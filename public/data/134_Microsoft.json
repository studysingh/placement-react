[
    {
        "id": 463,
        "title": "Short Message Service",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Short Message Service</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>There is a metro rail line with <code>k</code> stations numbered from <code>0</code> to <code>k-1</code>. There is a direct connection between stations if their numbers differ by one. Passengers can ride the metro line in both directions.</p>\n        <p>The fee for boarding the train is <code>1</code>. Every time a passenger travels between two adjacent stations, the fee increases by <code>2</code>. The metro system charges money at the end of each day based on the passenger\\'s travel history for that day.</p>\n        <p>There is a total fee limit for a single day. The passenger cannot be charged more than the limit, even if their associated travel fees exceed the limit. The limit depends on the maximum station number the passenger visited during the day.</p>\n        <p>You are given arrays <code>start</code> and <code>dest</code> of length <code>N</code>, describing all the metro rides the passenger took during the day. During the <code>x-th</code> ride, the passenger boarded the train at <code>start[x]</code> and left the train at station <code>dest[x]</code>. You are also given an array <code>limit</code> of length <code>K</code>. If the largest station number the passenger visited during the day is <code>limit[Y]</code>, then the fee limit for this passenger for that day is <code>limit[Y]</code>.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of input contains a single integer <code>N</code> - the number of destinations.</p>\n        <p>The second line of input contains <code>N</code> space-separated integers <code>start[0], start[1], ..., start[N-1]</code> - the starting stations of the rides.</p>\n        <p>The third line of input contains <code>N</code> space-separated integers <code>dest[0], dest[1], ..., dest[N-1]</code> - the destination stations of the rides.</p>\n        <p>The fourth line of input contains a single integer <code>K</code> - the number of limits.</p>\n        <p>The fifth line of input contains <code>K</code> space-separated integers <code>limit[0], limit[1], ..., limit[K-1]</code> - the fee limits.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the amount of money the passenger will be charged at the end of the day.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>2 ≤ n ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ a<sub>i</sub> ≤ 10<sup>7</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n0 2 4 2 0\n2 2 0 5\n3\n17 7 4 5 17</pre>\n            <pre class=\\\"output\\\">Output:\n[Sample output]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation of the output if necessary.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1EGm0eYfzOGYAChuBEbcQuwStLx-OB5pCeRNijZZqb4w/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint solution(vector<int> &start, vector<int> &dest, vector<int> &limit){\\n    int total_fees=0;\\n    int Y=0;\\n    int N = start.size();\\n    for(int i=0;i<N;i++){\\n        total_fees += 1 + abs(start[i]-dest[i])*2;\\n        Y = max(Y, max(start[i], dest[i]));\\n    }\\n    return min(total_fees, limit[Y]);\\n}",
        "company_name": "Microsoft",
        "company_id": 134
    },
    {
        "id": 464,
        "title": "Road Reorientation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Challenge 2: Road Reorientation</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>There is a network with <code>N</code> roads and <code>N + 1</code> cities. The cities are labeled with distinct integers within the range <code>[0..N]</code>.</p>\n        <p>Roads connect the cities in such a way that there is exactly one way to travel between any two of the cities. In other words, the network forms a <strong>tree</strong>.</p>\n        <p>The roads in the network are too narrow to accommodate two cars. For this reason, every road (that connects cities <code>A</code> and <code>B</code>) is oriented in one of two possible ways: either from <code>A</code> to <code>B</code>, or from <code>B</code> to <code>A</code>. If the road is oriented from <code>A</code> to <code>B</code>, then every car traveling from <code>B</code> has to give way to cars traveling from <code>A</code> to <code>B</code>. This, naturally, makes traveling from <code>A</code> to <code>B</code> much faster than traveling from <code>B</code> to <code>A</code>.</p>\n        <p>A big hospital was recently founded in the city labeled <code>0</code>. For that reason, the citizens have decided to rearrange the orientation of the roads so that everyone can get to the hospital as quickly as possible. This means that the trip from every city to the <code>0</code>th city should be as fast as possible.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>Write a function:</p>\n        <pre>int solution(int A[], int B[], int N);</pre>\n        <p>that, given the description of the network as two arrays <code>A</code> and <code>B</code> of <code>N</code> integers each, returns the minimum number of roads that must be reoriented in order to make everyone\\'s trip to the hospital as fast as possible. Arrays <code>A</code> and <code>B</code> describe the network in the following way: for each <code>K</code> in the range <code>[0..N-1]</code>, there is a road between cities labeled <code>A[K]</code> and <code>B[K]</code> that is oriented from <code>A[K]</code> to <code>B[K]</code>.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the amount of money the passenger will be charged at the end of the day.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>2 ≤ N ≤ 10<sup>5</sup></code></li>\n            <li><code>0 ≤ A[i], B[i] ≤ N</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nA = [1, 2, 3]\nB = [2, 3, 4]\nN = 3</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation of the output if necessary.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1LpogcIc_6es9tj0roxSz4CGJC1fawwXBECdsyFHkrm8/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\nint solution(int A[], int B[], int N) {\\n    vector<vector<pair<int,int>>> g(N+1);\\n    for(int i=0;i<N;i++){\\n        g[A[i]].push_back({B[i],1});\\n        g[B[i]].push_back({A[i],0});\\n    }\\n    vector<bool> visited(N+1,false);\\n    int ans=0;\\n    queue<int>q;\\n    q.push(0);\\n    visited[0]=true;\\n    while(!q.empty()){\\n        int u=q.front(); \\n        q.pop();\\n        for(auto &e:g[u]){\\n            int v=e.first, d=e.second;\\n            if(!visited[v]){\\n                visited[v]=true;\\n                ans+=d;\\n                q.push(v);\\n            }\\n        }\\n    }\\n    return ans;\\n}",
        "company_name": "Microsoft",
        "company_id": 134
    }
]