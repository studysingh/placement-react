[
    {
        "id": 107,
        "title": "Count of Non-Repeated Characters",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>Count of Non-Repeated Characters</h2>\n        <p>The current selected programming language is C++14. We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of GCC being used is 5.5.0.</p>\n        <p>A data compression software uses various steps to compress a string of data. One of the steps involves finding the count of characters that are not repeated in the string.</p>\n        <p>Write an algorithm for the software developer to find the count of characters that are not repeated in the string.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of a string <code>compString</code>, representing the string to be compressed.</p>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the count of characters that are not repeated in the string. If no such character is found or the input string is empty, then print <code>0</code>.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 &le; length of <code>compString</code></li>\n        </ul>\n    </div>\n\n<div class=\\\"note\\\">\n        <h3>Note</h3>\n        <p>The input string <code>compString</code> is case sensitive. Uppercase characters and lowercase characters are counted as different. The input string <code>compString</code> consists of alphanumeric and special characters only.</p>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nalphaadida</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation: The non-repeated characters in the string are <code>l</code>, <code>p</code>, <code>h</code>, <code>i</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1lwqdatbiNFImw1tWGTz3ZYxNODMtjnAU2bC_hcGd3AQ/edit?usp=sharing",
        "solution_code": "#include<iostream>\\n#include<string>\\n#include<vector>\\nusing namespace std;\\n\\nint nonRepeatedChar(string compString) {\\n    if(compString.empty()) return 0;\\n    int freq[256] = {0};\\n    for(char c : compString) freq[c]++;\\n    int answer = 0;\\n    for(char c : compString) if(freq[c] == 1) answer++;\\n    return answer;\\n}\\n\\nint main() {\\n    string compString;\\n    getline(cin, compString);\\n    int result = nonRepeatedChar(compString);\\n    cout << result;\\n    return 0;\\n}",
        "company_name": "Wells Fargo ",
        "company_id": 23
    },
    {
        "id": 108,
        "title": "Secret Code Encryption",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>SHL - Secret Code Encryption</h2>\n        <p>The current selected programming language is C++14. We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of GCC being used is 5.5.0.</p>\n        <p>An employee has to send a secret code <code>S</code> to their boss. They design a method to encrypt the code using two key values <code>N</code> and <code>M</code>. The formula that they use to develop the encrypted code is shown below:</p>\n        <p><code>(((S % 10) <sup>N</sup>) <sup>M</sup>) % 1000000007</code></p>\n        <p>Write an algorithm to help the employee encrypt the code.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An integer, <code>secretCode</code>, representing the secret code (S).</li>\n            <li>An integer, <code>firstKey</code>, representing the first key value (N).</li>\n            <li>An integer, <code>secondKey</code>, representing the second key value (M).</li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the code encrypted by the employee.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ <code>secretCode</code> ≤ 10<sup>9</sup></li>\n            <li>0 ≤ <code>firstKey</code>, <code>secondKey</code> ≤ 1000000007</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n3\n4</pre>\n            <pre class=\\\"output\\\">Output:\n4096</pre>\n            <div class=\\\"explanation\\\">\n                <p><strong>Explanation:</strong></p>\n                <p>S = 2, N = 3, M = 4, and the formula of the encrypted code is:</p>\n                <p><code>(((S % 10) <sup>N</sup>) <sup>M</sup>) % 1000000007</code></p>\n                <p>Calculating step-by-step:</p>\n                <ul>\n                    <li><code>(2 % 10) = 2</code></li>\n                    <li><code>(2^3) = 8</code></li>\n                    <li><code>(8^4) % 1000000007 = 4096</code></li>\n                </ul>\n                <p>So the output is <code>4096</code>.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre><code class=\\\"language-cpp\\\">// Header Files\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\n\nint findSecretCode(int secretCode, int firstKey, int secondKey) {\n    int answer;\n    // Write your code here to calculate the encrypted code\n    return answer;\n}\n\nint main() {\n    int secretCode, firstKey, secondKey;\n    cin &gt;&gt; secretCode;\n    cin &gt;&gt; firstKey;\n    cin &gt;&gt; secondKey;\n\nint result = findSecretCode(secretCode, firstKey, secondKey);\n    cout &lt;&lt; result;\n    return 0;\n}\n</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/13T0CwIR-MB8uh191jxW_Ndi9Pxn7snjqSJwJnjK-cHM/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Wells Fargo ",
        "company_id": 23
    }
]