[
    {
        "id": 629,
        "title": "Smart Ice Shelf",
        "problem_statement": "<h1>Smart Ice Shelf</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You work at a tech company developing a smart, temperature-controlled shelf for an experimental kitchen.</p>\r\n<p>The shelf consists of a row of temperature modules, each of which can either heat, cool, or stay neutral. After the shelf is used, the modules may end up in a mixed state – some set to heat, some to cool, and others unchanged.</p>\r\n<ul>\r\n    <li>A positive number represents a heated module (emits heat)</li>\r\n    <li>A negative number represents a cooled module (absorbs heat)</li>\r\n    <li>A zero represents a neutral module (no effect)</li>\r\n</ul>\r\n<p>To simplify this setup, the shelf includes a self-balancing button. When pressed, the shelf performs a cleanup cycle to resolve local conflicts between adjacent modules:</p>\r\n<ul>\r\n    <li>It scans the modules once from left to right.</li>\r\n    <li>If a heating module (+) is immediately followed by a cooling module (-), the two conflict. For every conflict, the cooling module is always removed because the heating module overpowers it, regardless of their magnitude.</li>\r\n    <li>Neutral modules (0) do not interact and are never removed.</li>\r\n    <li>This process only checks each adjacent pair once, in a single pass – there are no repeated scans or chain reactions.</li>\r\n</ul>\r\n<p>Your goal is to implement a function, <code>smartIceShelf</code>, that simulates this process and finds out which blocks remain on the shelf after this cycle.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: [4, -3, 0, -4, 5]\r\nOutput: [4, 0, 5]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>4 and -3: -3 melts (lower intensity)</p>\r\n<p>0 has no effect</p>\r\n<p>-4 and 5: -4 melts (lower intensity)</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: [3, -3, 2]\r\nOutput: [2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>3 and -3: same intensity -> both removed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= blocks.length <= 10^4</code></li>\r\n    <li><code>-1000 <= blocks[i] <= 1000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Josh technology_15july",
        "company_id": 207
    },
    {
        "id": 630,
        "title": "Analyze Query Similarity",
        "problem_statement": "<h1>Analyze Query Similarity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're part of a team building a new <strong>query suggestion</strong> feature for a search engine.</p>\r\n<p>When a user types a sequence of queries, your system groups <strong>related queries</strong> together so it can recommend similar queries later.</p>\r\n<p>To evaluate how well the grouping works, your team tests what happens when a single query is removed from the list. After removing each query, the system checks <strong>neighbouring queries</strong> to see how similar they still are.</p>\r\n<p>Two queries are considered similar if they share the same <strong>starting characters</strong>. The number of matching <strong>starting characters</strong> measures the similarity score.</p>\r\n<p>Your goal is to implement a function <code>analyzeQuerySimilarity</code> that find the <strong>highest similarity scores</strong> among any pair of adjacent queries that remain, for <strong>each possible single removal</strong>. If no matching starting characters exist between any pair of adjacent queries, the similarity score for that removal is 0.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: [\"flower\", \"flow\", \"flight\"]\r\nOutput: [2, 2, 4]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Check each removal:</p>\r\n<ul>\r\n    <li>Remove \"flower\" -> [\"flow\", \"flight\"]\r\n        <ul>\r\n            <li>Compare: \"flow\" & \"flight\" -> common start = \"fl\" -> length 2</li>\r\n        </ul>\r\n    </li>\r\n    <li>Remove \"flow\" -> [\"flower\", \"flight\"]\r\n        <ul>\r\n            <li>Compare: \"flower\" & \"flight\" -> common start = \"fl\" -> length 2</li>\r\n        </ul>\r\n    </li>\r\n    <li>Remove \"flight\" -> [\"flower\", \"flow\"]\r\n        <ul>\r\n            <li>Compare: \"flower\" & \"flow\" -> common start = \"flow\" -> length 4</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: [\"p\", \"pq\", \"pqr\", \"pqrs\"]\r\nOutput: [3, 3, 2, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Check first removal:</p>\r\n<p>On Removing 'p'</p>\r\n<ul>\r\n    <li>Similarity score between ['pq', 'pqr'] is 2</li>\r\n    <li>Similarity score between ['pqr', 'pqrs'] is 3</li>\r\n</ul>\r\n<p>So, highest similarity score is 3 for the first removal.</p>\r\n<p>Similarly for other removals.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: [\"dog\", \"racecar\", \"car\"]\r\nOutput: [0, 0, 0]</code></pre>\r\n<p><strong>Explanation:</strong> No two adjacent strings share any prefix after any removal.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= words.length <= 10^4</code></li>\r\n    <li><code>1 <= words[i].length <= 100</code></li>\r\n    <li>All strings in words contain only lowercase English letters (a-z)</li>\r\n    <li>All strings in words are unique</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>const readline = require('readline');\r\nconst rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout\r\n});\r\n\r\nfunction analyzeQuerySimilarity(queries) {\r\n    // Enter your code here\r\n}\r\n\r\nrl.on('line', (line) => {\r\n    const queries = line.trim().split(',').map(q => q.trim());\r\n    const result = analyzeQuerySimilarity(queries);\r\n    console.log(result);\r\n    rl.close();\r\n});</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Josh technology_15july",
        "company_id": 207
    }
]