[
    {
        "id": 41,
        "title": "Slow and Fast Pointers",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>Slow and Fast Pointers</h2>\n\n<div class=\"problem-description\">\n        <p>Process an array, <code>arr</code>, using two pointers, <code>P1</code> and <code>P2</code>, and an integer, <code>segSize</code>. Pick an integer to test for <code>segSize</code>, then start with <code>P1 = 0</code> and <code>P2 = 1</code>.</p>\n\n<p>Compare the value at <code>arr[P1]</code> with all of the elements in a subarray. The subarray starts at <code>arr[P2]</code> and includes <code>segSize</code> elements or it reaches the end of <code>arr</code>. If <code>arr[P1]</code> is greater or equal in all cases, increment <code>P1</code> by 1, increment <code>P2</code> by <code>segSize</code>, and repeat the process.</p>\n\n<p>Do this until the subarray including the last element of <code>arr</code> has been processed. Determine the minimum value of <code>segSize</code> that allows the entire array to be processed. Return this minimum step value or -1 if it is not possible.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>dualSpeed</code> that takes the following parameter:</p>\n        <ul>\n            <li><code>arr[n]</code>: an array of integers</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 5000</li>\n            <li>1 ≤ arr[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example\">\n            <p>Given array: <code>arr = [11, 9, 10, 8, 10, 9]</code></p>\n\n<h4>Try: segSize = 1</h4>\n            <table>\n                <tr>\n                    <th>P1</th>\n                    <th>P2</th>\n                    <th>arr[P1]</th>\n                    <th>Subarray</th>\n                    <th>Continue</th>\n                </tr>\n                <tr>\n                    <td>0</td>\n                    <td>1</td>\n                    <td>11</td>\n                    <td>[9]</td>\n                    <td>y</td>\n                </tr>\n                <tr>\n                    <td>1</td>\n                    <td>2</td>\n                    <td>9</td>\n                    <td>[10]</td>\n                    <td>n (fails because 10 > 9)</td>\n                </tr>\n            </table>\n\n<h4>Try: segSize = 4</h4>\n            <table>\n                <tr>\n                    <th>P1</th>\n                    <th>P2</th>\n                    <th>arr[P1]</th>\n                    <th>Subarray</th>\n                    <th>Continue</th>\n                </tr>\n                <tr>\n                    <td>0</td>\n                    <td>1</td>\n                    <td>11</td>\n                    <td>[9, 10, 8, 10]</td>\n                    <td>y</td>\n                </tr>\n                <tr>\n                    <td>1</td>\n                    <td>5</td>\n                    <td>9</td>\n                    <td>[9]</td>\n                    <td>y</td>\n                </tr>\n            </table>\n\n<div class=\"explanation\">\n                <p>All array elements were processed, so the minimum segSize = 4.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\"sample-cases\">\n        <h3>Sample Test Cases</h3>\n        <div class=\"sample-case\">\n            <h4>Sample Case 0</h4>\n            <pre class=\"input\">Input:\narr = [11, 9, 7, 7, 7, 6, 5]</pre>\n            <pre class=\"output\">Output:\n1</pre>\n            <div class=\"explanation\">\n                <p>Since the array is in non-increasing order, a segSize of 1 can be used.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1pIsshIeEa2JNR7lWn0IyFtvBBwvDrEkurTbn6_oUZJY/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 48,
        "title": "Project Estimates",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">Project Estimates</h2>\n\n<div class=\"problem-description\">\n        <p>A number of bids are received for a project. Determine the number of distinct pairs of project costs where their absolute difference is some target value. Two pairs are distinct if they differ in at least one value.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>countPairs</code> in the editor below.</p>\n        <p><code>countPairs</code> has the following parameter(s):</p>\n        <ul>\n            <li><code>int projectCosts[n]</code>: array of integers</li>\n            <li><code>int target</code>: the target difference</li>\n        </ul>\n    </div>\n\n<div class=\"return-value\">\n        <h3>Return</h3>\n        <p><code>int</code>: the number of distinct pairs in <code>projectCosts</code> with an absolute difference of <code>target</code></p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>5 ≤ n ≤ 10<sup>5</sup></li>\n            <li>0 < projectCosts[i] ≤ 2 × 10<sup>9</sup></li>\n            <li>Each projectCosts[i] is distinct, i.e. unique within projectCosts</li>\n            <li>1 ≤ target ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>Input from stdin will be processed as follows and passed to the function:</p>\n        <ul>\n            <li>The first line contains an integer n, the size of the array projectCosts</li>\n            <li>The next n lines each contain an element projectCosts[i] where 0 ≤ i < n</li>\n            <li>The next line contains the integer target, the target difference</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Sample Cases</h3>\n\n<div class=\"example\">\n            <h4>Sample Case 0</h4>\n            <pre class=\"input\">5\n1\n5\n3\n4\n2\n2</pre>\n            <pre class=\"output\">3</pre>\n            <div class=\"explanation\">\n                <p>Count the number of pairs in projectCosts whose difference is target = 2. The following three pairs meet the criterion: (1, 3), (5, 3), and (4, 2).</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Case 1</h4>\n            <pre class=\"input\">10\n363374326\n364147530\n61825163\n107306571\n128124602\n139946991\n428047635\n491595254\n879792181\n106926279\n1</pre>\n            <pre class=\"output\">0</pre>\n            <div class=\"explanation\">\n                <p>Count the number of pairs in projectCosts whose difference is target = 1. Because no such pair of integers exists, return 0.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Case 2</h4>\n            <pre class=\"input\">6\n2\n4\n6\n8\n10\n12\n2</pre>\n            <pre class=\"output\">5</pre>\n            <div class=\"explanation\">\n                <p>Count the number of pairs in projectCosts whose difference is target = 2. The following five pairs meet the criterion: (2, 4), (4, 6), (6, 8), (8, 10), and (10, 12).</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/11zk0kMVJBTDTkgRt2OjcYCHfmoqGL2j5fQc7V82qSQ4/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 49,
        "title": "Closest Numbers",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>2. Closest Numbers</h2>\n\n<div class=\"problem-description\">\n        <p>Given an array of distinct integers, determine the minimum absolute difference between any two elements. Print all element pairs with that difference in ascending order.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>closestNumbers</code> in the editor.</p>\n\n<h4>Parameters:</h4>\n        <ul>\n            <li><code>vector&lt;int&gt; numbers</code>: an array of integers</li>\n        </ul>\n\n<h4>Returns:</h4>\n        <p><code>NONE</code></p>\n\n<h4>Prints:</h4>\n        <p>distinct element pairs that share the minimum absolute difference, displayed in ascending order with each pair separated by one space on a single line</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ n ≤ 10<sup>5</sup></li>\n            <li>-10<sup>9</sup> ≤ numbers[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Sample Case 0</h4>\n            <pre class=\"input\">Input:\n4\n4\n2\n1\n3</pre>\n            <pre class=\"output\">Output:\n1 2\n2 3\n3 4</pre>\n            <div class=\"explanation\">\n                <p>The minimum absolute difference between any two elements in the array is 1, and there are three such pairs with this difference: (1, 2), (2, 3), and (3, 4).</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Case 1</h4>\n            <pre class=\"input\">Input:\n4\n4\n-2\n-1\n3</pre>\n            <pre class=\"output\">Output:\n-2 -1\n3 4</pre>\n            <div class=\"explanation\">\n                <p>The minimum absolute difference between any two elements in the array is 1, and there are two such pairs with this difference: (-2, -1) and (3, 4).</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\"code-template\">\n        <h3>Code Template</h3>\n        <pre class=\"cpp\">void closestNumbers(vector&lt;int&gt; numbers) {\n    // Your code here\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1qNVMxpL1AOsrwR0bbXzGwmPlNDmmwW1i2jMc1NUZKTI/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 50,
        "title": "Process allocation",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>Process Allocation</h2>\n\n<div class=\"problem-description\">\n        <p>There are <em>n</em> processes to be executed, and the <em>i<sup>th</sup></em> process has a size of <code>processSize[i]</code> where 1 ≤ i ≤ n. Also, there are <em>m</em> processors with different size capacity. The capacity of the <em>i<sup>th</sup></em> processor is <code>capacity[i]</code> (1 ≤ i ≤ m). A processor can process a task of size less than or equal to its capacity in 1 second, but it cannot execute processes whose size is greater than its capacity.</p>\n\n<p>A processor can execute multiple processes one after the other, but needs to pause for 1 second after completing its current one. Multiple processors can work on different processes simultaneously.</p>\n\n<p>Find the minimum time to execute all the processes or return -1 if there is no way to execute all the processes.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMinimumTime</code> in the editor below.</p>\n\n<p><code>getMinimumTime</code> has the following parameters:</p>\n        <ul>\n            <li><code>int processSize[n]</code>: the size of each process</li>\n            <li><code>int capacity[m]</code>: the capacity of each processor</li>\n        </ul>\n\n<h4>Returns</h4>\n        <p><code>int</code>: the minimum time required to execute all the processes, or -1 if there is no way to execute all processes.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, m ≤ 2 × 10<sup>5</sup></li>\n            <li>1 ≤ processSize[i], capacity[i] ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">Input:\nn = 3, processSize = [2, 5, 3], m = 3\ncapacity = [6, 2, 4]</pre>\n            <pre class=\"output\">Output:\n1</pre>\n            <div class=\"explanation\">\n                <p>The optimal way to assign processes is to give the first processor the second process, the second processor the first process, and the third processor the third process. All of them complete their processes in 1 second.</p>\n                <p>Therefore, the minimum time required is 1 second.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">Input:\nn = 3, processSize = [2, 5, 8]\ncapacity = [6, 7, 4]</pre>\n            <pre class=\"output\">Output:\n-1</pre>\n            <div class=\"explanation\">\n                <p>No processor has the required capacity to process the third process, so there is no way to process them all.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 3:</h4>\n            <pre class=\"input\">Input:\nn = 5, processSize = [1, 2, 3, 4, 6]\ncapacity = [4, 7, 4]</pre>\n            <pre class=\"output\">Output:\n3</pre>\n            <div class=\"explanation\">\n                <p>Assign the second and third process to the first processor. It completes the first process in 1 second then pauses for another second, before completing the third process. Therefore, it takes 3 seconds to complete all of its work.</p>\n                <p>Similarly, assign the first and fifth process to the second processor. It also completes its processes in 3 seconds. The fourth process is completed by the third processor in 1 second.</p>\n                <p>Hence, all of the processes are completed in 3 seconds.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/13tXGGPGvwAcrZY-55rgoKQhi4EO4P-IRm3_RBlVBuiw/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 51,
        "title": "Simpler Cipher",
        "problem_statement": "<div class=\"problem-container\">\n    <h1 class=\"problem-title\">1. Simple Cipher</h1>\n\n<div class=\"problem-description\">\n        <p>A simple cipher is built on the <em>alphabet wheel</em> which has uppercase English letters ['A'-'Z'] written on it:</p>\n\n<div class=\"wheel-image\">\n            <img src=\"path/to/wheel-image.png\" alt=\"Alphabet wheel showing letters A-Z in a circle\" class=\"responsive-img\">\n        </div>\n\n<p>Given an encrypted string consisting of English letters ['A'-'Z'] only, decrypt the string by replacing each character with the k<sup>th</sup> character away on the wheel in the counter-clockwise direction. Counter-clockwise is the opposite direction in which the hands on a clock usually move. In the image, Z is 1 unit counter-clockwise from A.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>simpleCipher</code> in the editor below.</p>\n\n<p>simpleCipher has the following parameter(s):</p>\n        <ul>\n            <li><code>string encrypted</code>: the string to decrypt</li>\n            <li><code>int k</code>: the position of the character to find</li>\n        </ul>\n\n<p>Returns:</p>\n        <ul>\n            <li><code>string</code>: the decrypted string</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ |encrypted| ≤ 10<sup>5</sup></li>\n            <li>1 ≤ k ≤ 10<sup>5</sup></li>\n            <li>encrypted[i] ∈ ascii['A'-'Z']</li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format For Custom Testing</h3>\n        <p>The first line contains a string, <code>encrypted</code>.</p>\n        <p>The next line contains an integer, <code>k</code>.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Sample Cases</h3>\n\n<div class=\"example\" id=\"sample-case-0\">\n            <h4>Sample Case 0</h4>\n            <pre class=\"input\">Input:\nCDEF\nk = 2</pre>\n            <pre class=\"output\">Output:\nABCD</pre>\n            <div class=\"explanation\">\n                <p>Each character is replaced by the character k = 2 positions away in the counter-clockwise direction. 'C' → 'A', 'D' → 'B', and so on. The decrypted string is 'ABCD'.</p>\n            </div>\n        </div>\n\n<div class=\"example\" id=\"sample-case-1\">\n            <h4>Sample Case 1</h4>\n            <pre class=\"input\">Input:\nDGEO\nk = 3</pre>\n            <pre class=\"output\">Output:\nADBL</pre>\n            <div class=\"explanation\">\n                <p>Each character is replaced by the character k = 3 positions away in the counter-clockwise direction. 'D' → 'A', 'G' → 'D', and so on. The decrypted string is 'ADBL'.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/11VfLElPWAKarZ1gjArDvGucBTw2qIwvFEh3vSUruSQU/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 52,
        "title": "Missing Words",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">2. Missing Words</h2>\n\n<div class=\"problem-description\">\n        <p>Given two strings, one is a subsequence if all of the elements of the first string occur in the same order within the second string. They do not have to be contiguous in the second string, but order must be maintained. For example, given the string 'I like cheese', the words ('I', 'cheese') are one possible subsequence of that string. Words are space delimited.</p>\n\n<p>Given two strings, <em>s</em> and <em>t</em>, where <em>t</em> is a subsequence of <em>s</em>, report the words of <em>s</em> missing in <em>t</em> (case sensitive), in the order they are missing.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>missingWords</code> in the editor below.</p>\n\n<p>missingWords has the following parameter(s):</p>\n        <ul>\n            <li><code>string s</code>: a sentence of space-separated words</li>\n            <li><code>string t</code>: a sentence of space-separated words</li>\n        </ul>\n\n<h4>Returns:</h4>\n        <ul>\n            <li><code>string[]</code>: an array of strings that contains all words in <em>s</em> that are missing from <em>t</em>, in the order they occur within <em>s</em></li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Strings <em>s</em> and <em>t</em> consist of English alphabetic letters (i.e., a-z and A-Z, dash '-', and spaces only)</li>\n            <li>All words are delimited by a space</li>\n            <li>1 ≤ |<em>t</em>| ≤ |<em>s</em>| ≤ 10<sup>6</sup></li>\n            <li>1 ≤ length of any word in <em>s</em> or <em>t</em> ≤ 15</li>\n            <li>It is guaranteed that string <em>t</em> is a subsequence of string <em>s</em></li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example\">\n            <p>Given:</p>\n            <pre class=\"input\">s = 'I like cheese'\nt = 'like'</pre>\n            <p>Then 'like' is the subsequence, and ['I', 'cheese'] is the list of missing words, in order.</p>\n        </div>\n\n<div class=\"sample-case\">\n            <h4>Sample Case 0</h4>\n            <h5>Sample Input</h5>\n            <pre class=\"input\">s = 'I am using HackerRank to improve programming'\nt = 'am HackerRank to improve'</pre>\n\n<h5>Sample Output</h5>\n            <pre class=\"output\">I\nusing\nprogramming</pre>\n\n<div class=\"explanation\">\n                <h5>Explanation</h5>\n                <p>The missing words are:</p>\n                <ol>\n                    <li>I</li>\n                    <li>using</li>\n                    <li>programming</li>\n                </ol>\n                <p>Add these words <em>in order</em> to the array [\"I\", \"using\", \"programming\"], then return this array as the answer.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1BJ00s7PXEpg4OzHLcPJmR2rWr8adX4hj4umZJazmi6A/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 53,
        "title": "City Attractions",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>City Attractions</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>You have just arrived in a new city and would like to see its sights. Each sight is located in a square and you have assigned each a beauty value. Each road is a square takes an amount of time to travel, and you have arranged time for sightseeing. Determine the maximum sum of beauty that you can visit during your time in the city. Start and finish at your hotel, the location of sight zero.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Function Parameters</h3>\n        <ul>\n            <li><code>int n</code>: an integer, the number of sights in the city</li>\n            <li><code>int m</code>: an integer, the number of connecting roads</li>\n            <li><code>int max_t</code>: an integer, the amount of time for sightseeing</li>\n            <li><code>vector&lt;int&gt; beauty</code>: integer array, the beauty values assigned to each sight</li>\n            <li><code>vector&lt;int&gt; u</code>: integer array, the starting sight location for each bidirectional road</li>\n            <li><code>vector&lt;int&gt; v</code>: integer array, the ending sight location for each bidirectional road</li>\n            <li><code>vector&lt;int&gt; t</code>: integer array, the travel time for each bidirectional road</li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Returns</h3>\n        <p><code>int</code>: an integer, the maximum sum of beauty values of squares you will visit</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 1000</li>\n            <li>1 ≤ m ≤ 2000</li>\n            <li>10 ≤ max_t ≤ 100</li>\n            <li>0 ≤ u[i], v[i] ≤ n-1</li>\n            <li>u[i] ≠ v[i]</li>\n            <li>10 ≤ t[i] ≤ 100</li>\n            <li>0 ≤ beauty[i] ≤ 10<sup>9</sup></li>\n            <li>No more than 4 roads connect a single square with others</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Sample Test Cases</h3>\n\n<div class=\\\"example\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">n = 4\nm = 3\nmax_t = 49\nbeauty = [0, 32, 10, 43]\nu = [0, 2, 0]\nv = [1, 0, 3]\nt = [10, 13, 17]</pre>\n            <pre class=\\\"output\\\">43</pre>\n            <div class=\\\"explanation\\\">\n                <ul>\n                    <li>n = 4 squares are chosen in the map including the hotel</li>\n                    <li>m = 3 bidirectional roads that connect them</li>\n                    <li>beauty = [0, 32, 10, 43] represents the beauty value for squares 0, 1, 2, and 3</li>\n                    <li>To visit Squares 0 -> 3 -> 0, it takes 17 + 17 = 34 minutes and it has 0 + 43 = 43 beauty value</li>\n                </ul>\n            </div>\n        </div>\n\n<!-- Additional sample cases can be added in the same format -->\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1bmks0bZIvstZyi7CRfQaGKZC9Nwqbqot_tXcSDWI1wk/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 54,
        "title": "count Binary substrings",
        "problem_statement": "<div class=\"problem-container\">\n    <h1>1. Count Binary Substrings</h1>\n\n<div class=\"problem-description\">\n        <p>A binary string is a string consisting only of 0s and 1s. A substring is a contiguous group of characters within a string.</p>\n\n<p>Given a binary string, find the number of substrings that contain an equal number of 0s and 1s and all the 0s and 1s are grouped together. Note that duplicate substrings are also counted in the answer. For example, '0011' has two overlapping substrings that meet the criteria: '0011' and '01'.</p>\n\n<div class=\"function-description\">\n            <h3>Function Description</h3>\n            <p>Complete the function <code>getSubstringCount</code> in the editor below.</p>\n\n<h4>Parameters</h4>\n            <ul>\n                <li><code>s</code>: a binary string</li>\n            </ul>\n\n<h4>Returns</h4>\n            <ul>\n                <li><code>int</code>: the number of substrings that meet the criteria</li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ length of s ≤ 10<sup>5</sup></li>\n            <li>The string s consists of 0s and 1s only.</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example-1\">\n            <p>s = \"011001\"</p>\n            <p>The substrings \"01\", \"10\", \"1100\", and \"01\" have equal numbers of 0s and 1s with all 0s and 1s grouped consecutively. Hence, the answer is 4. Note that the substring \"0110\" has an equal number of 0s and 1s but is not counted because not all 0s and 1s are grouped together.</p>\n        </div>\n\n<h3>Sample Cases</h3>\n        <div class=\"example\">\n            <h4>Sample Case 0</h4>\n            <pre class=\"input\">Input:\n00110011</pre>\n            <pre class=\"output\">Output:\n6</pre>\n            <div class=\"explanation\">\n                <p>The substrings \"01\", \"0011\", \"10\", \"1100\", \"01\" and \"0011\" have an equal number of 0s and 1s with consecutive groupings.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Case 1</h4>\n            <pre class=\"input\">Input:\n000110</pre>\n            <pre class=\"output\">Output:\n3</pre>\n            <div class=\"explanation\">\n                <p>The substrings \"01\", \"0011\", and \"10\" satisfy the constraints.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format For Custom Testing</h3>\n        <p>The first line contains a string, s, a binary string.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1MOD_vYPf3ZgPRDddPpTVxJAl55edUDnpJoSiwqUq5lk/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 55,
        "title": "Calculate region",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h2>3. Calculate Region</h2>\n    </div>\n\n<div class=\"problem-description\">\n        <p>There is a straight line of students of various heights. The students' heights are given in the form of an array, in the order they are standing in the line.</p>\n\n<p>Consider the region of a student as the length of the largest subarray that includes that student's position, and in which that student's height is equal to maximum height among all students present in that subarray. Return the sum of the region of all students.</p>\n\n<p>For example:</p>\n        <ul>\n            <li><code>heights = [3, 5, 6]</code></li>\n            <li>The longest subarray in which the first student's height is equal to the maximum height among all other students is [3]; thus, the length of the region of the first student is 1.</li>\n            <li>The longest subarray in which the second student's height is equal to maximum height among all other students is [3, 5]; thus, the length of the region of the second student is 2.</li>\n            <li>The longest subarray in which the third student's height is equal to maximum height among all other students is [3, 5, 6]; thus, the length of the region of the third student is 3.</li>\n            <li>Thus, the sum of the lengths of all regions of all students is 1 + 2 + 3 = 6.</li>\n        </ul>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>calculateTotalRegion</code> in the editor below. The function must return the desired sum of all regions.</p>\n\n<p><code>calculateTotalRegion</code> has the following parameter(s):</p>\n        <ul>\n            <li><code>heights</code>: an array of the heights of students standing in the line</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 2 × 10<sup>5</sup></li>\n            <li>1 ≤ boxesInPiles[i] ≤ 2 × 10<sup>6</sup></li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format for Custom Testing</h3>\n        <p>The first line contains a single integer n, the number of piles of boxes.</p>\n        <p>Each of the following n lines contains an integer that represents the height of a pile.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Sample Cases</h3>\n\n<div class=\"example\" id=\"sample-case-0\">\n            <h4>Sample Case 0</h4>\n            <pre class=\"input\">Input:\n5\n4\n5\n5\n4</pre>\n            <pre class=\"output\">Output:\n6</pre>\n            <div class=\"explanation\">\n                <p>1. 2 steps required to convert 2 piles of height 5 to 4. So, now we have 4 piles of height 4.</p>\n                <p>2. 4 steps are required to convert 4 piles of height 4 to 2.</p>\n                <p>The total number of steps required is 2 + 4 = 6 steps.</p>\n                <img src=\"path-to-steps-diagram.png\" alt=\"Step by step visualization of box pile reduction\" class=\"explanation-diagram\">\n            </div>\n        </div>\n\n<div class=\"example\" id=\"sample-case-1\">\n            <h4>Sample Case 1</h4>\n            <pre class=\"input\">Input:\n2\n886\n777</pre>\n            <pre class=\"output\">Output:\n1</pre>\n            <div class=\"explanation\">\n                <p>In 1 step, 109 boxes can be removed from the first pile to make both piles have a height of 886 - 109 = 777.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1_1hzocjPGkQkIXeHhoalDjAy0El2_BZ508t2MiAEFeQ/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 56,
        "title": "Max Path Sum",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">Max Path Sum</h2>\n\n<div class=\"problem-description\">\n        <p>There is a puzzle using a rectangular grid. The upper left corner is at (row, column) = (0, 0). Each cell contains an integer. The score starts at 0 and is the sum of all the integers in each cell visited in the grid is traversed. Movement begins in either the top or the bottom row and stays within the bounds of the grid. Only 1 cell can be visited per row per direction. Determine the maximum achievable score.</p>\n\n<div class=\"movement-rules\">\n            <h3>Movement Rules:</h3>\n            <ol>\n                <li>From a cell (i,j) = (0,p), i.e. in the top row:\n                    <ul>\n                        <li>(i+1, j-1)</li>\n                        <li>(i+1, j)</li>\n                        <li>(i+1, j+1)</li>\n                    </ul>\n                </li>\n                <li>From a cell (i,j) = (rows-1,q), i.e. in the bottom row:\n                    <ul>\n                        <li>(i-1, j-1)</li>\n                        <li>(i-1, j)</li>\n                        <li>(i-1, j+1)</li>\n                    </ul>\n                </li>\n            </ol>\n        </div>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Function Parameters</h3>\n        <ul>\n            <li><code>int board[n][m]</code>: the values for the grid cells</li>\n            <li><code>p</code>: row 0 starting column</li>\n            <li><code>q</code>: row n-1 starting column</li>\n        </ul>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Returns</h3>\n        <p>int: the maximum achievable score from the two start positions</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ n, m ≤ 501</li>\n            <li>0 ≤ board[i][j] < 501</li>\n            <li>0 ≤ p, q ≤ m-1</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example\">\n            <pre class=\"input\">board = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\np = 1\nq = 0</pre>\n            <div class=\"grid-visualization\">\n                <p>Starting at (0,1):</p>\n                <div class=\"grid\">\n                    <table>\n                        <tr><td>1</td><td class=\"highlight\">2</td><td>3</td></tr>\n                        <tr><td>4</td><td>5</td><td class=\"highlight\">6</td></tr>\n                        <tr><td>7</td><td>8</td><td class=\"highlight\">9</td></tr>\n                    </table>\n                    <p>Maximum score is 2+6+9 = 17</p>\n                </div>\n\n<p>Starting at (2,0):</p>\n                <div class=\"grid\">\n                    <table>\n                        <tr><td>1</td><td>2</td><td class=\"highlight\">3</td></tr>\n                        <tr><td>4</td><td class=\"highlight\">5</td><td>6</td></tr>\n                        <tr><td class=\"highlight\">7</td><td>8</td><td>9</td></tr>\n                    </table>\n                    <p>Maximum score is 7+5+3 = 15</p>\n                </div>\n            </div>\n            <pre class=\"output\">17</pre>\n            <div class=\"explanation\">\n                <p>The better path starts from (0, 1) with a score of 17.</p>\n                <p>The worse path starts at position (2, 0) with a score of 15.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\"function-signature\">\n        <h3>Function Signature</h3>\n        <pre class=\"code\">int maxPathSum(vector&lt;vector&lt;int&gt;&gt; board, int p, int q)</pre>\n    </div>\n</div>\n\n<style>\n.grid table {\n    border-collapse: collapse;\n    margin: 10px 0;\n}\n\n.grid td {\n    border: 1px solid #ccc;\n    padding: 10px;\n    text-align: center;\n    width: 40px;\n    height: 40px;\n}\n\n.highlight {\n    background-color: #90EE90;\n}\n\n.problem-container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\n.movement-rules ul, .movement-rules ol {\n    margin-left: 20px;\n}\n\n.code {\n    background-color: #f5f5f5;\n    padding: 10px;\n    border-radius: 4px;\n    font-family: monospace;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1qA0Q0NTh_nwX77Tn3ieDsFrvtN6yjWIsPsaNX1kyVF8/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 57,
        "title": "Find the Winner",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">Find the Winner!</h2>\n\n<div class=\"problem-description\">\n        <p>Andrea and Maria each have a deck of numbered cards in a pile face down. They play a game where they each alternately discard and flip the cards on the pile from top to bottom.</p>\n\n<p>At the beginning of the game, someone will call out \"Even\" or \"Odd\". The first move depends on which is called. If \"Even\" is called, the player's top cards are flipped so they can see the face value. If instead \"Odd\" is called, the top card is removed from each deck and discarded, then each flips her next card.</p>\n\n<p>Andrea subtracts the value of Maria's card from her own and adds the result to her score. Likewise, Maria subtracts the value of Andrea's card from her own and adds the result to her score.</p>\n\n<p>From this point forward, each alternately discards then flips a card. Each time two cards are flipped, the players' scores are computed as before. Once all the cards have been played, whoever has the most points wins.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Function Parameters</h3>\n        <ul>\n            <li><code>int andrea[n]</code>: Andrea's array of card values</li>\n            <li><code>int maria[n]</code>: Maria's array of card values</li>\n            <li><code>string s</code>: the starting called out word</li>\n        </ul>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Return</h3>\n        <p><code>string</code>: either 'Maria', 'Andrea' or 'Tie'</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ a[i], m[i] ≤ 10<sup>3</sup>, where 0 ≤ i < n</li>\n            <li>String s will be either the word 'Odd' or 'Even'</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Sample Case 0</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\nn = 3\nandrea = [1, 2, 3]\nmaria = [2, 1, 3]\ns = \"Even\"</pre>\n            <pre class=\"output\">Output:\nMaria</pre>\n            <div class=\"explanation\">\n                <p>The indices range from 0 through 2. Since s = 'Even', the only cards flipped are at indices 0 and 2:</p>\n                <ul>\n                    <li>When i = 0, Andrea gets andrea[0] - maria[0] = 1 - 2 = -1 point and Maria gets maria[0] - andrea[0] = 2 - 1 = 1 point</li>\n                    <li>When i = 2, Andrea gets andrea[2] - maria[2] = 3 - 3 = 0 points and Maria gets maria[2] - andrea[2] = 3 - 3 = 0 points</li>\n                </ul>\n                <p>At the end of play, Andrea's cumulative score is -1 and Maria's is 1 so Maria wins.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1G3WQva1r1uBIE42ZlgkkIqkqgCHRI207ZRjzATVUNag/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 58,
        "title": "Minimum Divisor",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">Minimum Divisor</h2>\n\n<div class=\"problem-description\">\n        <p>Given an array of integers, each element is to be divided by an integer so that the sum of the results is less than or equal to a threshold. Each non-integer result of division is rounded up before it is added to the sum. For example, 1/2 = 0.111... it is rounded up to 1. Determine the minimum divisor to make the sum less than or equal to the threshold.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Parameters</h3>\n        <ul>\n            <li><code>int arr[]</code>: an array of integers</li>\n            <li><code>int threshold</code>: the maximum value of the sum</li>\n        </ul>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Returns</h3>\n        <p><code>int</code>: the minimum divisor</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>n ≤ threshold ≤ 10<sup>9</sup></li>\n            <li>1 ≤ arr[i] ≤ 10<sup>9</sup>, 0 ≤ i < n</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Sample Case 0</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\narr[] size n = 3\narr = [2, 4, 5]\nthreshold = 10</pre>\n            <pre class=\"output\">Output:\n2</pre>\n            <div class=\"explanation\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>The sum of the original array is 13 which is greater than the threshold 10.</li>\n                    <li>Test a divisor 2 which is higher than the divisor 1: arr' = [1, 2, 3] which sums to 6 ≤ 10.</li>\n                    <li>The minimum divisor to make the sum less than or equal to the threshold is 2.</li>\n                </ul>\n            </div>\n        </div>\n\n<h3>Sample Case 1</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\narr[] size n = 4\narr = [30069534, 82705253]\nthreshold = 82705253</pre>\n            <pre class=\"output\">Output:\n1</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ScPAd0npfnWxIWGHNyS8cC2ZJZ-NT1B7CrMBp1FKzDM/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 59,
        "title": "Folder Compression",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">2. Folder Compression</h2>\n\n<div class=\"problem-description\">\n        <p>You have a folder with n files, each with a size given by fileSize[i], where 0 ≤ i < n. The folder is compressed when files are arranged in non-decreasing order of size.</p>\n\n<p>This operation takes 1 second and can be performed any number of times:</p>\n        <ol>\n            <li>Extract the first file and insert it at the back (highest index).</li>\n            <li>Continue swapping the file with the one before it until it reaches either the front of the array or a position where its size is strictly greater than the file in front.</li>\n        </ol>\n\n<p>Return the number of seconds required to compress the folder, or -1 if it's impossible.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMinimumSeconds</code> in the editor below.</p>\n\n<h4>Function Parameters:</h4>\n        <p><code>int fileSize[n]</code>: the size of the files.</p>\n\n<h4>Returns</h4>\n        <p><code>int</code>: the number of seconds required to compress the folder or -1 if impossible.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 2 × 10⁵</li>\n            <li>1 ≤ fileSize[i] ≤ 10⁹</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example\">\n            <p>Given, n = 5<br>\n            fileSize = [4, 3, 1, 3, 5]</p>\n\n<table class=\"steps-table\">\n                <thead>\n                    <tr>\n                        <th>Steps</th>\n                        <th>Operation Description</th>\n                        <th>State of Array</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>0</td>\n                        <td>Initial state</td>\n                        <td>[4, 3, 1, 3, 5]</td>\n                    </tr>\n                    <tr>\n                        <td>1</td>\n                        <td>Remove the first file (4) and insert it at the back (requires 1 second)</td>\n                        <td>[3, 1, 3, 5, 4]</td>\n                    </tr>\n                    <tr>\n                        <td>2</td>\n                        <td>Swaps: 1 swap to place 4 between 3 and 5</td>\n                        <td>[3, 1, 3, 4, 5]</td>\n                    </tr>\n                    <tr>\n                        <td>3</td>\n                        <td>Remove the first file (3) and insert it at the back (requires 1 second)</td>\n                        <td>[1, 3, 4, 5, 3]</td>\n                    </tr>\n                    <tr>\n                        <td>4</td>\n                        <td>Swaps: 1 swap to place 3 between 4 and 5</td>\n                        <td>[1, 3, 4, 3, 5]</td>\n                    </tr>\n                    <tr>\n                        <td>5</td>\n                        <td>Swaps: 1 swap to place 3 between 3 and 4</td>\n                        <td>[1, 3, 3, 4, 5]</td>\n                    </tr>\n                    <tr>\n                        <td>6</td>\n                        <td>Swaps: 1 swap to place 3 between 1 and 3</td>\n                        <td>[1, 3, 3, 4, 5]</td>\n                    </tr>\n                </tbody>\n            </table>\n\n<div class=\"explanation\">\n                <p>Steps 1 and 2 form the first operation. Steps 3 through 6 form the next one. The array is in non-decreasing order after 2 seconds.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1_pRaidnBAA7TMIUAGg9DGG2dTvkic7h1RtUn6XCQp90/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 60,
        "title": "Do They Belong?",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h2>3. Do They Belong?</h2>\n    </div>\n\n<div class=\"problem-description\">\n        <p>Given three points a(x1, y1), b(x2, y2), and c(x3, y3), check if they form a non-degenerate triangle. Then, verify if two points, p = (xp, yp) and q = (xq, yq), are inside or on the triangle. Return the appropriate scenario number.</p>\n    </div>\n\n<div class=\"scenarios\">\n        <h3>Scenarios:</h3>\n        <ul>\n            <li><strong>0:</strong> the lines do not form a valid non-degenerate triangle</li>\n            <li><strong>1:</strong> point p belongs to the triangle but point q does not</li>\n            <li><strong>2:</strong> point q belongs to the triangle but point p does not</li>\n            <li><strong>3:</strong> both points p and q belong to the triangle</li>\n            <li><strong>4:</strong> neither point p nor point q belong to the triangle</li>\n        </ul>\n    </div>\n\n<div class=\"notes\">\n        <h3>Note:</h3>\n        <p>A triangle is considered non-degenerate if it meets the following conditions, where |ab| denotes the length of the line segment between points a and b:</p>\n        <div class=\"mathematical-conditions\">\n            <ul>\n                <li>|ab| + |bc| > |ac|</li>\n                <li>|bc| + |ac| > |ab|</li>\n                <li>|ab| + |ac| > |bc|</li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <!-- Example section appears to be cut off in the image -->\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1tD4TzYmH5NmCcNs6FrGzfVLNwzTP1MEV2TM4HiKJTyM/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 61,
        "title": "Consolidating Partitions",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h2>Consolidating Partitions</h2>\n    </div>\n\n<div class=\"problem-description\">\n        <p>Given the space currently used on each partition of an existing drive and the total capacity of each partition, determine the minimum number of partitions needed to hold all the data. There are two arrays given as inputs, <code>used</code> and <code>totalCapacity</code>. The first array represents the space used in each partition, and the second represents the total capacity of each partition.</p>\n\n<p>Return the minimum number of partitions required to accommodate all the data without exceeding any partition's total capacity.</p>\n    </div>\n\n<div class=\"function-signature\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>minPartitions</code> with the following parameters:</p>\n        <ul>\n            <li><code>int used[]</code>: the amount of space used in each partition</li>\n            <li><code>int totalCapacity[]</code>: the total capacity of each partition</li>\n        </ul>\n        <p><strong>Returns:</strong></p>\n        <ul>\n            <li><code>int</code>: the minimum number of partitions needed to store all the data</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 1000</li>\n            <li>1 ≤ used[i] ≤ 1000</li>\n            <li>1 ≤ totalCapacity[i] ≤ 1000</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\nused = [3, 2, 1, 3, 1]\ntotalCapacity = [3, 5, 3, 5, 5]</pre>\n\n<div class=\"explanation\">\n                <p>The data can be moved around like so:</p>\n                <ul>\n                    <li>Move all the data (3 units of space) from the first partition to the second. This empties the first partition, and fills the second partition.</li>\n                    <li>Move the data from the third partition (1 unit) and fifth partition (1 unit) into the fourth partition. This empties the third and fifth partitions.</li>\n                </ul>\n                <p>The data fits in a minimum of 2 partitions. Therefore, the answer is 2.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/15gLUSa8HFX2radm3J_HJump7ScsD0zLgjWc4sfVTPV4/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    },
    {
        "id": 62,
        "title": "Similar Strings",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h1>1. Similar Strings</h1>\n    </div>\n\n<div class=\"problem-description\">\n        <p>Two strings are said to be <em>similar</em> if they are composed of the same characters. For example \"abca\" and \"cba\" are similar since both of them are composed of the characters 'a', 'b', and 'c'. However \"abca\" and \"bcd\" are not similar since they do not share all of the same letters.</p>\n\n<p>Given an array of strings <code>words</code> of length <em>n</em>, find the number of pairs of strings that are similar.</p>\n\n<div class=\"notes\">\n            <h3>Note:</h3>\n            <ul>\n                <li>Each string is composed of lowercase English characters only.</li>\n                <li>Pairs are considered index-wise, i.e., two equal strings at different indices are counted as separate pairs.</li>\n                <li>A pair at indices (i, j) is the same as the pair at (j, i).</li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>countSimilarPairs</code> in the editor below.</p>\n\n<p><code>countSimilarPairs</code> has the following parameter:</p>\n        <ul>\n            <li><code>string words[n]</code>: an array of n strings</li>\n        </ul>\n\n<h4>Returns</h4>\n        <ul>\n            <li><code>long_int</code>: the number of similar pairs</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>The sum of the lengths of all strings does not exceed 10<sup>6</sup></li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example\">\n            <p>Consider n = 3, words = [\"xyz\", \"foo\", \"of\"]</p>\n            <div class=\"explanation\">\n                <p>Here, the strings \"foo\" and \"of\" are similar because they are composed of the same characters ['f', 'o'].</p>\n                <p>There are no other similar pairs so the answer is 1.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1JvWEFbGsHjXJFBDPwfpjg4gZwvBlS-2YwzuYfBhnLAo/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Agoda",
        "company_id": 10
    }
]