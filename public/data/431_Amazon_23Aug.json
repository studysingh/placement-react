[
    {
        "id": 1266,
        "title": "Maximize Product Operations",
        "problem_statement": "<h1>Maximize Product Operations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In an Amazon inventory management, an operations analyst is dealing with a set of initial product identifiers represented by strings. The type of a string product identifier is determined by the first and last letters in the identifier string, for example, the type of the identifier string \"abddac\" is \"ac\".</p>\r\n<p>The analyst wants to optimize the product identifiers by performing a series of operations on the string to maximize the number of operations while maintaining the same initial and final types.</p>\r\n<p>Given a product identifier string <code>s</code>, the analyst can perform one operation at a time, involving the removal of either the first or last letter from the string.</p>\r\n<p>Find the maximum number of operations they can perform on the string while ensuring that its type aligns with the initial string's type.</p>\r\n<p><strong>Note:</strong> The type of an empty string <code>\"\"</code> is <code>\"\"</code>, and the type of a string with a single character, like \"a\", is \"aa\".</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"babdcaac\"</code></pre>\r\n<p>The type of the initial string s is \"bc\":</p>\r\n<p>Consider the initial string <code>s = \"babdcaac\"</code>. The initial type is \"bc\". We can perform operations to get various final strings:</p>\r\n<ul>\r\n<li>\"babdcaac\" (0 operations, type \"bc\")</li>\r\n<li>\"bdcaac\" (2 operations, type \"bc\")</li>\r\n<li>\"d\" (7 operations, type \"dd\")</li>\r\n<li>\"bdc\" (5 operations, type \"bc\")</li>\r\n<li>\"babdc\" (3 operations, type \"bc\")</li>\r\n</ul>\r\n<p><strong>Explanation:</strong> From the above final strings, the only valid final strings (strings with a type equal to the type of the initial string \"bc\") are \"babdcaac\", \"bdc\", and \"babdc\" with a total of operations performed of 0, 5, and 3 respectively. The maximum number of operations is 5.</p>\r\n<pre><code class='language-text'>Output: 5</code></pre>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>maximizeProductOperations</code> in the editor below.</p>\r\n<p><code>maximizeProductOperations</code> has the following parameter:</p>\r\n<ul>\r\n<li><code>string s</code>: the initial product identifiers.</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the maximum number of operations the operations analyst can perform on the string, such that its type is equal to the initial string's type.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>2 &lt;= |s| &lt;= 2 * 10<sup>5</sup></li>\r\n<li>String s consists of lowercase English letters only.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: s = \"hchc\"</code></pre>\r\n<pre><code class='language-text'>Output: 2</code></pre>\r\n<p><strong>Explanation:</strong> The type of the initial string is \"hc\", so the operations analyst can remove the first 2 or last 2 letters and get the string \"hc\" with a type \"hc\", hence the answer is 2.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abbc\"</code></pre>\r\n<pre><code class='language-text'>Output: 0</code></pre>\r\n<p><strong>Explanation:</strong> The operations analyst can't remove any letters from the string since the type will change, hence the answer is 0.</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'maximizeProductOperations' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts STRING s as parameter.\r\n */\r\n\r\nint maximizeProductOperations(string s) {\r\n\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_23Aug",
        "company_id": 431
    },
    {
        "id": 1267,
        "title": "Retrieve Data",
        "problem_statement": "<h1>Retrieve Data</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The Data Science Team at Amazon is facing a unique challenge. A portion of their data has gone missing from their database. However, they believe they can recover the lost data based on the following information:</p>\r\n<ol>\r\n    <li>The missing data is a permutation of the characters found in the string <code>firstInfo</code>.</li>\r\n    <li>The missing data is lexicographically greater than the string <code>secondInfo</code>.</li>\r\n    <li>The missing data is the lexicographically smallest string that satisfies the above two conditions.</li>\r\n</ol>\r\n<p>In other words, they are searching for the smallest string that meets these criteria.</p>\r\n<p>A string <code>x</code> is lexicographically smaller than a string <code>y</code> if:</p>\r\n<ul>\r\n    <li><code>x[i] < y[i]</code> at the first position where <code>x</code> and <code>y</code> differ, or</li>\r\n    <li><code>|x| < |y|</code> and <code>x</code> is a prefix of <code>y</code> (where <code>|x|</code> denotes the length of string <code>x</code>).</li>\r\n</ul>\r\n<p>Given two strings, <code>firstInfo</code> and <code>secondInfo</code>, find the missing data that matches the above criteria. If no such string exists, return <code>\"-1\"</code>.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>retrieveData</code> in the editor below.</p>\r\n<p><code>retrieveData</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>firstInfo</code>: the string that contains the first information.</li>\r\n    <li><code>secondInfo</code>: the string that contains the second information.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<p><code>string</code>: the missing data that matches the above criteria if possible, otherwise return <code>\"-1\"</code>.</p>\r\n\r\n<pre><code class='language-javascript'>string retrieveData(string firstInfo, string secondInfo) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aca\", secondInfo = \"aba\"\r\nOutput: \"aca\"</code></pre>\r\n<p><strong>Explanation:</strong> The data that satisfies the given conditions is either \"aca\" or \"caa\". Both options are valid permutations of <code>firstInfo</code> and are lexicographically greater than <code>secondInfo</code>. Since the goal is to retrieve the lexicographically smallest piece of missing data, \"aca\" is the correct result.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aac\", secondInfo = \"aa\"\r\nOutput: \"aac\"</code></pre>\r\n<p><strong>Explanation:</strong> The possible pieces of missing data that satisfy the conditions are \"aac\", \"aca\", and \"caa\". Since \"aac\" is the lexicographically smallest, it is the most suitable piece of data to retrieve.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"abc\", secondInfo = \"defg\"\r\nOutput: \"-1\"</code></pre>\r\n<p><strong>Explanation:</strong> It can be observed that no permutation of the missing data from <code>firstInfo = \"abc\"</code> would be lexicographically greater than <code>secondInfo = \"defg\"</code>. Therefore, no valid data can be retrieved.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |firstInfo|, |secondInfo| <= 5000</code></li>\r\n    <li><code>firstInfo</code> and <code>secondInfo</code> consist of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_23Aug",
        "company_id": 431
    }
]