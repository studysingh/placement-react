[
    {
        "id": 1448,
        "title": "Best Sum Downward Tree Path",
        "problem_statement": "<h1>Best Sum Downward Tree Path</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For a tree with <code>n</code> nodes rooted at node <code>0</code> (nodes numbered from <code>0</code> to <code>n-1</code>), where each node <code>i</code> has a value given by <code>values[i]</code>, determine the maximum sum of values along any path that starts at a node <code>u</code> and only goes downward in the tree.</p>\r\n<p>Consider only paths of the form <code>u<sub>1</sub>, u<sub>2</sub>, ..., u<sub>k</sub></code> where each node <code>u<sub>i</sub></code> is a child of node <code>u<sub>i-1</sub></code> for <code>1 &lt; i &lt;= k</code>. For example, given the following tree (labeled node number / value):</p>\r\n<p>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0/5<br>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;\\<br>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;1/7&nbsp;&nbsp;&nbsp;4/15<br>\r\n    &nbsp;&nbsp;&nbsp;/<br>\r\n    &nbsp;&nbsp;2/-10<br>\r\n    &nbsp;/<br>\r\n    3/4\r\n</p>\r\n<p>Two possible paths are <code>0 &rarr; 1 &rarr; 2 &rarr; 3</code> which has a sum of <code>5 + 7 + (-10) + 4 = 6</code> and <code>1 &rarr; 2 &rarr; 3</code> with a sum of <code>7 + (-10) + 4 = 1</code>. The highest sum path is <code>0 &rarr; 4</code> with a sum of <code>5 + 15 = 20</code>.</p>\r\n<p>Complete the function <code>bestSumDownwardTreePath</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int parent[n]</code>: each <code>parent[i]</code> represents the parent node for node <code>i</code>, <code>parent[i] = -1</code> means node <code>i</code> is the root.</li>\r\n    <li><code>int values[n]</code>: each <code>values[i]</code> represents the value of node <code>i</code>.</li>\r\n</ul>\r\n<p><strong>Return:</strong> <code>int</code>: the largest sum of values along a path down the tree from any node <code>u</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nparent = [-1, 0, 1, 2, 0]\r\nvalues = [-2, 10, 10, -3, 10]\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> The tree looks like the following (labels are node number/value):</p>\r\n<p>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0/-2<br>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;\\<br>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1/10&nbsp;&nbsp;&nbsp;&nbsp;4/10<br>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/<br>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2/10<br>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/<br>\r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3/-3\r\n</p>\r\n<p>The path with the largest sum of values starts at node 1 and finishes at node 2. Its sum is <code>10 + 10 = 20</code>. Notice that there is a path with a larger sum, i.e., from node 2 to node 4 with a sum of 28, but it is not a path going only down the tree.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>parent[0] = -1</code></li>\r\n    <li><code>0 &lt;= parent[i] &lt;= n-1</code> for <code>1 &lt;= i &lt;= n-1</code></li>\r\n    <li><code>-1000 &lt;= values[i] &lt;= 1000</code></li>\r\n    <li>The tree described is valid.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Citadel_19sep",
        "company_id": 508
    },
    {
        "id": 1449,
        "title": "Minimum Operations to Execute Jobs",
        "problem_statement": "<h1>Minimum Operations to Execute Jobs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Determine the minimum number of operations needed to execute multiple jobs in parallel. There are <code>n</code> jobs with execution times specified in the <code>executionTime</code> array.</p>\r\n<p>In each operation, one job is designated as the major job and is executed for <code>x</code> seconds, while all other jobs are executed for <code>y</code> seconds (where <code>y < x</code>). A job is complete when it has been executed for at least its required execution time and then exits the processor pool.</p>\r\n<p>Complete the function <code>getMinumumOperations</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int executionTime[n]</code>: the execution times of the jobs</li>\r\n    <li><code>int x</code>: the time spent executing the major job</li>\r\n    <li><code>int y</code>: the time spent executing the other jobs</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of operations for the processor to complete the jobs</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nexecutionTime = [3, 4, 1, 7, 6]\r\nx = 4\r\ny = 2\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>Choose job 4 as the major job:\r\n        <ul>\r\n            <li>Reduce the execution time of job 4 by <code>x</code> and other jobs by <code>y</code>.</li>\r\n            <li><code>executionTime</code> becomes <code>[1, 2, -1, 3, 4]</code>. Job 3 completes.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Choose job 4 again: <code>executionTime</code> becomes <code>[-1, 0, -, -1, 2]</code>. Jobs 1, 2, and 4 complete.</li>\r\n    <li>Choose job 5: <code>executionTime</code> becomes <code>[-,-,-,-, -2]</code>. Job 5 completes.</li>\r\n</ol>\r\n<p>The minimum number of operations required is 3.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3\r\n3\r\n6\r\n3\r\n9\r\n3\r\n2\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given <code>n = 5</code>, <code>executionTime = [3, 3, 6, 3, 9]</code>, <code>x = 3</code>, <code>y = 2</code>.</p>\r\n<ol>\r\n    <li>Choose job 5, then <code>executionTime = [1, 1, 4, 1, 6]</code>. All jobs are still in the pool.</li>\r\n    <li>Choose job 5, then <code>executionTime = [-1, -1, 2, -1, 3]</code>. So, jobs 1, 2, and 4 are complete.</li>\r\n    <li>Choose job 5, then <code>executionTime = [-,-,0,-,0]</code>. Jobs 3 and 5 are complete.</li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= executionTime[i] <= 10^9</code></li>\r\n    <li><code>1 <= y < x</code></li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>The first line contains an integer, <code>n</code>, that denotes the number of elements in <code>executionTime[]</code>.</p>\r\n<p>Each line <code>i</code> of the <code>n</code> subsequent lines (where <code>0 <= i < n</code>) contains an integer that describes <code>executionTime[i]</code>.</p>\r\n<p>The next line contains an integer, <code>x</code>.</p>\r\n<p>The last line contains an integer, <code>y</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Citadel_19sep",
        "company_id": 508
    }
]