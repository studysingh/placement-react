[
    {
        "id": 1624,
        "title": "Minimize Cleaning Cost",
        "problem_statement": "<h1>Minimize Cleaning Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Data Scientists at Amazon are working on cleaning a machine learning dataset. The dataset is represented as a string dataset consisting of an even number of lowercase English letters. The goal is to clean the dataset efficiently by performing specific operations.</p>\r\n<p>Here's how the operations work:</p>\r\n<ul>\r\n    <li>In each operation, two characters from the dataset are selected and removed.</li>\r\n    <li>Each operation has an associated cost:\r\n        <ul>\r\n            <li>matchCost: the cost of removing two identical characters.</li>\r\n            <li>mismatchCost: the cost of removing two different characters.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The task is to determine the optimal strategy that minimizes the total cost to completely clean up the dataset. In other words, find the minimum cost required to remove all characters and make the dataset empty.</p>\r\n<p>Complete the function <code>minimizeCleaningCost</code> in the editor below.</p>\r\n<p><code>minimizeCleaningCost</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string dataset</code>: a string that denotes a machine learning dataset</li>\r\n    <li><code>int matchCost</code>: the cost of operation when the removed characters are equal</li>\r\n    <li><code>int mismatchCost</code>: the cost of operation when the removed characters are unequal</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>int</code>: the minimum cost to clean up the dataset or make the string empty</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"ouio\", matchCost = 2, mismatchCost = 4\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initial String: dataset = \"ouio\"</p>\r\n<p>Operation 1:</p>\r\n<ul>\r\n    <li>Action: Remove the first and last characters of the dataset, resulting in the string dataset = 'ui'.</li>\r\n    <li>Cost: mismatchCost = 2 (since both removed characters, 'o' and 'o', are the same).</li>\r\n</ul>\r\n<p>Operation 2:</p>\r\n<ul>\r\n    <li>Action: Delete the remaining characters of 'ui', making dataset an empty string.</li>\r\n    <li>Cost: mismatchCost = 4 (since the removed characters, 'u' and 'i', are different).</li>\r\n</ul>\r\n<p>Total Cost: matchCost + mismatchCost = 2 + 4 = 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"aaabca\", matchCost = 3, mismatchCost = 2\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> In the first operation, the first and second characters are deleted from the dataset, resulting in <code>dataset = \"abca\"</code>. The cost of this operation is <code>matchCost = 3</code> because both removed characters are equal to 'a'. In the next operation, the first and third characters are deleted, making <code>dataset = \"ba\"</code>. The cost of this operation is <code>mismatchCost = 2</code> because the removed characters are not equal. In the final operation, the remaining two characters are deleted, making the dataset an empty string. The cost of this operation is <code>mismatchCost = 2</code> because the removed characters are not equal. Hence, the total cost is <code>3 + 2 + 2 = 7</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"xxch\", matchCost = 5, mismatchCost = 5\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> In the first operation, the first two characters are deleted, resulting in <code>dataset = \"ch\"</code>. The cost of this operation is <code>matchCost = 5</code>, because both removed characters are equal to 'x'. In the next operation, the remaining two characters are deleted, making <code>dataset</code> an empty string. The cost of this operation is <code>mismatchCost = 5</code>, because the removed characters are not equal. Hence, the total cost is <code>5 + 5 = 10</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= |dataset| <= 10<sup>5</sup></code></li>\r\n    <li><code>|dataset|</code> is even</li>\r\n    <li><code>1 <= matchCost, mismatchCost <= 10<sup>4</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_7oct",
        "company_id": 568
    },
    {
        "id": 1625,
        "title": "Find Minimum Sum",
        "problem_statement": "<h1>Find Minimum Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>AWS provides scalable systems. A set of <code>n</code> servers are used for horizontally scaling an application. The goal is to have the computational power of the servers in non-decreasing order. To do so, you can increase the computational power of each server in any contiguous segment by <code>x</code>. Choose the values of <code>x</code> such that after the computational powers are in non-decreasing order, the sum of the <code>x</code> values is minimum.</p>\r\n<p>Complete the function <code>findMinimumSum</code> in the editor below.</p>\r\n<p>The function <code>findMinimumSum</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int power[]</code>: the computational powers of <code>n</code> different servers</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>long</code>: the minimum possible sum of integers required to make the array non-decreasing</li>\r\n</ul>\r\n<pre><code class='language-javascript'>long findMinimumSum(int power_count, int* power) {\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>There are <code>n = 5</code> servers and their computational power = <code>[3, 4, 1, 6, 2]</code>.</p>\r\n<p><strong>Explanation:</strong> Add 3 units to the subarray (2,4) and 4 units to the subarray (4,4). The final arrangement of the servers is <code>[3, 4, 4, 9, 9]</code>. The answer is <code>3 + 4 = 7</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\npower = [3, 2, 1]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Add 1 unit to subarray (1,2) and 1 unit to subarray (2,2). The final arrangement of servers is <code>[3, 3, 3]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\npower = [3, 5, 2, 3]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Add 3 units to subarray (2,3). The final arrangement of servers is <code>[3, 5, 5, 6]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= power[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_7oct",
        "company_id": 568
    }
]