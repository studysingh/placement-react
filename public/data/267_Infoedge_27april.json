[
    {
        "id": 873,
        "title": "Multiverse Possibilities",
        "problem_statement": "<h1>Multiverse Possibilities</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string named <code>year</code> of length <code>n</code>. It contains only digits. Now there are various universes in the world and every universe has its own timeline. To sort out the time on planets in a single universe we count them based on their year at a particular moment. Now given a string that contains years of different planets in a single universe. It is hard to find the years since there are no commas or spaces and the first digit will never be '0' and the years in the string are <strong>strictly increasing</strong>.</p>\r\n<p>Since every different possibility proves a different universe in the multiverse, find out the number of universes present in the multiverse.</p>\r\n<p>The integer can be very long so return the modulo of answer by 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains the length of the string n.</p>\r\n<p>The second line contains the string year.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return the number of possible ways to have a multiverse.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n20152016\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> There are 4 different ways of dividing the string while following the conditions. They are:</p>\r\n<ul>\r\n    <li>'20152016'\r\n        <ul>\r\n            <li>No splits. This is just one year.</li>\r\n        </ul>\r\n    </li>\r\n    <li>'20' + '152016'\r\n        <ul>\r\n            <li>Split after '20'. '20' &lt; '152016'.</li>\r\n        </ul>\r\n    </li>\r\n    <li>'201' + '52016'\r\n        <ul>\r\n            <li>Split after '201'. '201' &lt; '52016'.</li>\r\n        </ul>\r\n    </li>\r\n    <li>'2015' + '2016'\r\n        <ul>\r\n            <li>Split after '2015'. '2015' &lt; '2016'.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= n &lt;= 4000</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infoedge_27april",
        "company_id": 267
    },
    {
        "id": 876,
        "title": "Fault Detection in Automotive Firmware",
        "problem_statement": "<h1>Fault Detection in Automotive Firmware</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As part of a validation process for an <strong>automotive microcontroller firmware</strong>, a team is analyzing the correctness of low-level arithmetic operations used across various electronic control units (ECUs). During testing, it was discovered that a junior developer mistakenly implemented a logic block that performs <strong>bitwise XOR (⊕)</strong> instead of standard arithmetic addition (<strong>+</strong>).</p>\r\n<p>Interestingly, in some specific cases, the outputs of <strong>i + j</strong> and <strong>i ⊕ j</strong> are identical. This behavior only occurs when <strong>no carry-over occurs during addition</strong>, i.e., the binary representations of <strong>i</strong> and <strong>j</strong> have no overlapping 1s (<strong>i & j = 0</strong>).</p>\r\n<p>Your task is to assist the team in assessing the impact of this issue. You are given multiple integer ranges, and for each range <strong>[a, b]</strong>, you must determine the number of <strong>ordered integer pairs (i, j)</strong> such that <strong>i + j = i ⊕ j</strong>.</p>\r\n<p>This exercise is part of a broader validation effort across <strong>multiple automotive software modules</strong>, not limited to ADAS or autonomous functions. It reflects the kind of fault detection and recovery mechanisms commonly used in safety-critical embedded systems.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n<li>First line contains an integer <strong>n</strong>, the number of test cases.</li>\r\n<li>The following line contains an integer 2 denoting that each test case contains 2 integers representing the range values.</li>\r\n<li>Each of the next <strong>n</strong> lines contains two integers <strong>a</strong> and <strong>b</strong>, the range of values to consider.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 ≤ n ≤ 10^2</li>\r\n<li>1 ≤ a ≤ b ≤ 10^6</li>\r\n<li>a, i, j ≤ b</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n<li>Return an array of length <strong>n</strong>, where each element represents the result for the corresponding test case.</li>\r\n<li>Since results can be large, return each value modulo 10^9 + 7.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 2\r\n1 4\r\n323 323</code></pre>\r\n<pre><code class='language-text'>Output: 8\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>In the first query, there are 8 possible combinations where i+j = i⊕j. They are (1,2), (1,4), (2,1), (2,4), (3,4), (4,1), (4,2), and (4,3).</p>\r\n<p>In the second query, there are no possible pairs.</p>\r\n\r\n<p><strong>Execution time limit:</strong> 4 seconds</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infoedge_27april",
        "company_id": 267
    }
]