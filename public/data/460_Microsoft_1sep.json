[
    {
        "id": 1323,
        "title": "Count Palindromic Subsequences of Length 5",
        "problem_statement": "<h1>Count Palindromic Subsequences of Length 5</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For a string <code>s</code> consisting only of characters '0' and '1', determine the number of subsequences of length 5 that are palindromes. Since the result can be very large, return the answer modulo (10<sup>9</sup> + 7).</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>A palindrome is a sequence that reads the same backward and forward.</li>\r\n    <li>A subsequence is obtained from the given sequence by deleting zero or more elements without changing the order of the remaining elements.</li>\r\n    <li>Two subsequences are considered different if the indices used to form them are different.</li>\r\n</ul>\r\n<p>Complete the function <code>getPalindromesCount</code> in the editor with the following parameter:</p>\r\n<ul>\r\n    <li><code>string s</code>: the binary string</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of subsequences of length 5 which are palindromes, modulo (10<sup>9</sup> + 7)</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int getPalindromesCount(string s) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"0100110\"\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> Using 1-based indexing, the 5 palindromic subsequences of length 5 are:</p>\r\n<ul>\r\n    <li>indices (1, 2, 3, 6, 7) -> 01010</li>\r\n    <li>indices (1, 2, 3, 5, 7) -> 01010</li>\r\n    <li>indices (1, 2, 4, 6, 7) -> 01010</li>\r\n    <li>indices (1, 2, 4, 5, 7) -> 01010</li>\r\n    <li>indices (1, 2, 5, 6, 7) -> 01110</li>\r\n</ul>\r\n<p>5 modulo (10<sup>9</sup> + 7) = 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"010110\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Palindromic subsequences with their indices:</p>\r\n<ul>\r\n    <li>(1, 2, 3, 4, 6) -> 01010</li>\r\n    <li>(1, 2, 3, 5, 6) -> 01010</li>\r\n    <li>(1, 2, 4, 5, 6) -> 01110</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: s = \"01111\"\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> There is no palindrome subsequence of length 5.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>5 &le; length of s &le; 10<sup>5</sup></code></li>\r\n    <li>All characters in <code>s</code> are either <code>0</code> or <code>1</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_1sep",
        "company_id": 460
    },
    {
        "id": 1324,
        "title": "Maximum Path Sum in a Grid with Specific Movement Constraints",
        "problem_statement": "<h1>Maximum Path Sum in a Grid with Specific Movement Constraints</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Find the path that maximizes the score when traversing a rectangular grid under specific movement constraints.</p>\r\n<p>You start in either the top row of the grid, column <code>p</code>, and move down, or the bottom row, column <code>q</code>, and move up. You must visit exactly one cell per row. The score is the sum of all integer values in the cells visited. You can only move to adjacent cells (including diagonals) in the next row. All moves must stay within the boundaries of the board.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nboard = [[1, 2, 3],\r\n         [4, 5, 6],\r\n         [7, 8, 9]]\r\np = 1\r\nq = 0</code></pre>\r\n<p><strong>Explanation:</strong> For a 3x3 grid, the cursor starts at position (0, p) = (0, 1) or (rows - 1, q) = (2, 0).</p>\r\n<p><strong>Path 1 (starting at (0,1) and moving down):</strong></p>\r\n<pre><code class='language-text'>Grid:\r\n0 1 2\r\n-----\r\n1 2 3  &lt;- (0,1) value 2\r\n4 5 6  &lt;- (1,2) value 6\r\n7 8 9  &lt;- (2,2) value 9\r\n\r\nPath: (0,1) -> (1,2) -> (2,2)\r\nMaximum score = 2 + 6 + 9 = 17</code></pre>\r\n<p><strong>Path 2 (starting at (2,0) and moving up):</strong></p>\r\n<pre><code class='language-text'>Grid:\r\n0 1 2\r\n-----\r\n1 2 3  &lt;- (0,2) value 3\r\n4 5 6  &lt;- (1,1) value 5\r\n7 8 9  &lt;- (2,0) value 7\r\n\r\nPath: (2,0) -> (1,1) -> (0,2)\r\nMaximum score = 7 + 5 + 3 = 15</code></pre>\r\n<p>The better path starts from (0, 1) with a score of 17. The worse path starts from (2, 0) with a score of 15. The maximum achievable score is 17.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nm = 3\r\nboard = [[9, 4, 7],\r\n         [2, 1, 3],\r\n         [1, 4, 2]]\r\np = 2\r\nq = 1\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> The best paths down and up are shown below:</p>\r\n<p><strong>Path 1 (starting at (0,p) = (0,2) and moving down):</strong></p>\r\n<pre><code class='language-text'>Grid:\r\n9 4 7  &lt;- (0,2) value 7\r\n2 1 3  &lt;- (1,2) value 3\r\n1 4 2  &lt;- (2,1) value 4\r\n\r\nPath: (0,2) -> (1,2) -> (2,1)\r\nMaximum score = 7 + 3 + 4 = 14</code></pre>\r\n<p><strong>Path 2 (starting at (n-1,q) = (2,1) and moving up):</strong></p>\r\n<pre><code class='language-text'>Grid:\r\n9 4 7  &lt;- (0,0) value 9\r\n2 1 3  &lt;- (1,0) value 2\r\n1 4 2  &lt;- (2,1) value 4\r\n\r\nPath: (2,1) -> (1,0) -> (0,0)\r\nMaximum score = 4 + 2 + 9 = 15</code></pre>\r\n<p>The maximum achievable score is 15.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>maxPathSum</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int board[n][m]</code>: the values for the grid cells</li>\r\n    <li><code>p</code>: row 0 starting column</li>\r\n    <li><code>q</code>: row n-1 starting column</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum achievable score from the two start positions</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int maxPathSum(vector<vector<int>> board, int p, int q) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= n, m &lt;= 501</code></li>\r\n    <li><code>0 &lt;= board[i][j] &lt;= 501</code></li>\r\n    <li><code>0 &lt;= p, q &lt;= m - 1</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_1sep",
        "company_id": 460
    }
]