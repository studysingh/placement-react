[
    {
        "id": 787,
        "title": "Slice master",
        "problem_statement": "<h1>Slice master</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your friends and you are playing a game called Slice master. You are given a string S. The motive of the game is to slice String S into parts such that each letter appears in at most one part. After slicing, your total points will be calculated as follows:</p>\r\n<ul>\r\n    <li>For each length X, you will be allotted X^2 points.</li>\r\n</ul>\r\n<p>Return the minimum possible points a player can score while playing Slice master with String S.</p>\r\n<p><strong>Note:</strong> The slicing should be such that a particular character is present in at most one part. For example: If part 1 has letters [a, m, i, q] then these letters cannot be present in any other part.</p>\r\n<p>Find the minimum possible points a player can score while playing Slice master with String S.</p>\r\n\r\n<h2>Function description</h2>\r\n<p>Complete the Solve() function. This function takes the following argument and the minimum possible points a player can get while playing Slice master:</p>\r\n<ul>\r\n    <li>S: Represents the string to be sliced</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains a string S denoting the String to be sliced.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Return the minimum possible points a player can get while playing Slice master.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; length(S) &le; 500</li>\r\n    <li>a &le; S[i] &le; z</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: eccbbbbdec\r\nOutput: 100</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Points = 0</p>\r\n<p>part 1 -> eccbbbbdec -> length = 10 -> Points = 0+10^2 = 100</p>\r\n<p>This could not be sliced further therefore return 100.</p>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<p>Time Limit: 1.0 sec(s) for each input file</p>\r\n<p>Memory Limit: 256 MB</p>\r\n<p>Source Limit: 1024 KB</p>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nokia_9march",
        "company_id": 249
    },
    {
        "id": 788,
        "title": "OR bit",
        "problem_statement": "<h1>OR bit</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Find the maximum value obtained by performing a bitwise OR operation on any subsequence of a given array.</p>\r\n<p>Complete the <code>solve</code> function. The function takes 2 parameters and returns an integer denoting the answer to the question:</p>\r\n<ul>\r\n<li><code>N</code> Represents the number of elements in the array</li>\r\n<li><code>A</code> Represents the array</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>Note: Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n<li>The first line contains a single integer <code>T</code>, which denotes the number of test cases.</li>\r\n<li>For each test case:\r\n    <ul>\r\n    <li>The first line contains an integer <code>N</code>, denoting the total elements in the array.</li>\r\n    <li>The second line contains <code>N</code> space-separated numbers.</li>\r\n    </ul>\r\n</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print the answer in a new line.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &lt;= T &lt;= 10<sup>4</sup></code></li>\r\n<li><code>1 &lt;= N &lt;= 10<sup>5</sup></code></li>\r\n<li><code>0 &lt;= |A[i]| &lt;= 10<sup>9</sup></code></li>\r\n</ul>\r\n<p>Where <code>|x|</code> represents the absolute value of x.</p>\r\n<p>It's guaranteed that the sum of <code>N</code> over all test cases will not exceed <code>2 * 10<sup>5</sup></code>.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 10, A = [9, 10, -9, -7, 0, 4, 10, 7, -2, -2]\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> For the given array <code>A</code>, we can select the subsequence <code>[10, 7]</code>, which gives the maximum Bitwise OR value of <code>10 | 7 = 15</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 2, A = [-9, -7]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> For the given array <code>A</code>, the subsequence consisting of the numbers <code>[-9, -7]</code> will result in the maximum Bitwise OR value of <code>-9 | -7 = -1</code>.</p>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n<li>Time Limit: 1.0 sec(s) for each input file</li>\r\n<li>Memory Limit: 256 MB</li>\r\n<li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes.</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++14, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nokia_9march",
        "company_id": 249
    },
    {
        "id": 789,
        "title": "Maximum displacement",
        "problem_statement": "```html\r\n<h1>Maximum displacement</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a 1D lane, you can move one step ahead (denoted by S) or move one step back (denoted by R). You are given a string of commands and an integer N.</p>\r\n<p>Calculate the maximum displacement that you can achieve from the starting point after changing exactly N commands in the string and executing them.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>Game()</code> function. This function takes the following 2 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>Str</code>: Represents the string containing the commands</li>\r\n    <li><code>N</code>: Represents the number of commands that must be changed</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains the string Str which represents the string that contains the commands.</li>\r\n    <li>The second line contains an integer N which represents the number of commands that must be changed.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Print the maximum displacement that you can achieve from the starting point after changing exactly N commands in the string and executing all the commands of that string. One command can be changed several times.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |Str| <= 100</code></li>\r\n    <li><code>1 <= N <= 50</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nSR\r\n1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li><code>Str = SR</code></li>\r\n    <li><code>N = 1</code></li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<p>Maximum displacement is 2 by changing the 2nd command as the resulting string will become \"SS\" which takes the player 2 steps away.</p>\r\n\r\n<h1>Highest Rated Dish</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A restaurant built a new app for delivering their food. People wrote N reviews about different things they ordered from the menu. They gave a score from 1 to 5, with 1 being the lowest and 5 the highest. The manager wants to figure out which dish is liked the most by customers.</p>\r\n<p>To do this, find the dish that has the highest average score.</p>\r\n<p><strong>Note:</strong> If two dishes have the same rating, pick the dish with the lower ID number.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>solution()</code> function provided in the editor. The function takes the following 2 parameters and returns the solution:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the number of reviews</li>\r\n    <li><code>ratings</code>: Represents the reviews of each dish</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains N denoting the number of reviews.</li>\r\n    <li>Next, the N line contains two integers each, the ID and rating of the i-th review.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Print a single integer, representing the ID of the highest-rated dish.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= ratings[i][0] <= 10<sup>9</sup></code></li>\r\n    <li><code>1 <= ratings[i][1] <= 5</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n512 3\r\n123 4\r\n987 4\r\nOutput:\r\n123</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<p><strong>Input:</strong></p>\r\n<!-- The explanation section is cut off in the image, so only the visible parts are included. -->\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nokia_9march",
        "company_id": 249
    },
    {
        "id": 790,
        "title": "Seat reservation",
        "problem_statement": "<h1>Seat reservation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A movie theater has <code>N</code> seats numbered 1 to <code>N</code>.</p>\r\n<p>Build a seat reservation system that performs one of the following operations <code>K</code> times:</p>\r\n<ul>\r\n    <li>Fetches the smallest-numbered unreserved seat then reserves it and returns its number.</li>\r\n    <li>Cancels a seat reservation for <code>seat[i]</code>.</li>\r\n</ul>\r\n<p>The result should be an array containing the reserved seat numbers.</p>\r\n\r\n<h3>Notes</h3>\r\n<ul>\r\n    <li>If <code>seat[i] = 0</code>, reserve the seat</li>\r\n    <li>If <code>seat[i] > 0</code>, cancel the reservation of a seat</li>\r\n    <li>Every time we reserve a seat, it is guaranteed that there is an unreserved seat</li>\r\n    <li>Every time we cancel the reservation of a seat, it is guaranteed that the seat is reserved</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>solution()</code> provided in the editor. The function takes the following 3 parameters and returns the solution:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the number of seats</li>\r\n    <li><code>K</code>: Represents the number of operations</li>\r\n    <li><code>seat</code>: Represents the details of operations</li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains <code>N</code> denoting the number of seats.</li>\r\n    <li>The second line contains <code>K</code> denoting the number of operations.</li>\r\n    <li>The third line contains <code>seat</code> denoting the details of operations.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Print an array, representing the reserved seat numbers.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; K &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; seat[i] &le; N</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n0 0 0\r\nOutput:\r\n1 2 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given:</p>\r\n<pre><code class='language-text'>N = 3\r\nK = 3\r\nseat = [0, 0, 0]\r\nOutput: 1 2 3</code></pre>\r\n<p>Approach:</p>\r\n<ul>\r\n    <li>The smallest unreserved seat is 1.</li>\r\n    <li>The smallest unreserved seat is 2.</li>\r\n    <li>The smallest unreserved seat is 3.</li>\r\n</ul>\r\n\r\n<h2>Follow-up</h2>\r\n<h3>Note:</h3>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits</h3>\r\n<ul>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages</h3>\r\n<p>Bash, C, C++, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp(SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic. </p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nokia_9march",
        "company_id": 249
    },
    {
        "id": 791,
        "title": "Product of pairs",
        "problem_statement": "<h1>Product of pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array A consisting of N elements and an integer K.</p>\r\n<p>Let's define a function as follows:</p>\r\n<pre><code class='language-text'>f(i,j) = { A_i x A_j if i &lt; j and K | (j-i)\r\n         { 0         else</code></pre>\r\n<p>Note: K|(j-i) denotes (j-i) is divisible by K.</p>\r\n<p>Calculate &sum;<sub>i=1</sub><sup>N</sup> &sum;<sub>j=i+1</sub><sup>N</sup> f(i,j).</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>solve()</code> function. This function takes the following 3 parameters and returns the answer:</p>\r\n<ul>\r\n    <li><strong>N</strong>: Represents the size of the array</li>\r\n    <li><strong>K</strong>: Represents the number K according to the problem statement</li>\r\n    <li><strong>A</strong>: Represents an array of integers of size N</li>\r\n</ul>\r\n<p>Note: 1-based indexing is followed.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>Note: Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains T, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer N denoting the size of the array</li>\r\n            <li>The second line contains an integer K</li>\r\n            <li>The third line contains N space-separated integers denoting the array A.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case in a new line, print the answer.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n5\r\n4\r\n2 3 5 1 5\r\n5\r\n3\r\n7 8 2 3 1\r\nOutput:\r\n10\r\n29</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first line contains the number of test cases, T=2</p>\r\n<p><strong>The first test case</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li>N = 5</li>\r\n    <li>K = 4</li>\r\n    <li>A = [2, 3, 5, 1, 5]</li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<p>Considering all the possible pairs, only the following pairs satisfy the conditions:</p>\r\n<ul>\r\n    <li>Pair (1, 5) satisfies 1 &lt; 5 and 5 - 1 = 4 is divisible by K</li>\r\n</ul>\r\n<p>All the other pairs would contribute zero.</p>\r\n<p>Hence, the final answer is (A<sub>1</sub> * A<sub>5</sub> = 2 * 5 = 10).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>The second test case</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li>N = 5</li>\r\n    <li>K = 3</li>\r\n    <li>A = [7, 8, 2, 3, 1]</li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<p>Considering all the possible pairs, only the following pairs satisfy the conditions:</p>\r\n<ul>\r\n    <li>Pair (1, 4) satisfies 1 &lt; 4 and 4 - 1 = 3 is divisible by K</li>\r\n    <li>Pair (2, 5) satisfies 2 &lt; 5 and 5 - 2 = 3 is divisible by K</li>\r\n</ul>\r\n<p>All the other pairs would contribute zero.</p>\r\n<p>Hence, the final answer is (A<sub>1</sub> * A<sub>4</sub>) + (A<sub>2</sub> * A<sub>5</sub>) = (7 * 3) + (8 * 1) = 21 + 8 = 29.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= T &lt;= 10</code></li>\r\n    <li><code>1 &lt;= K &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= A<sub>i</sub> &lt;= 100 &forall; i &in; [1, N]</code></li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits</h3>\r\n<ul>\r\n    <li>Time Limit: 2.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring</h3>\r\n<ul>\r\n    <li>Score is assigned if any testcase passes</li>\r\n</ul>\r\n\r\n<h3>Allowed Languages</h3>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nokia_9march",
        "company_id": 249
    }
]