[
    {
        "id": 1055,
        "title": "Check the Structure",
        "problem_statement": "<h1>Check the Structure</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a pre-order traversal sequence of a binary tree, determine if it represents a Binary Search Tree (BST). A binary tree consists of nodes, each having up to two child nodes and a value. A BST must satisfy two conditions:</p>\r\n<ul>\r\n    <li>The left subtree of a node contains only values less than the node's value.</li>\r\n    <li>The right subtree of a node contains only values greater than the node's value.</li>\r\n</ul>\r\n<p>Pre-order traversal visits the root node first, then recursively visits the left subtree, followed by the right subtree. Here's the pseudocode for pre-order traversal:</p>\r\n<ul>\r\n    <li>If the root is null, return an empty list.</li>\r\n    <li>For a non-null root node:\r\n        <ul>\r\n            <li>Create a pre-order traversal list for the left subtree.</li>\r\n            <li>Create a pre-order traversal list for the right subtree.</li>\r\n            <li>Return the concatenated list: node + left subtree + right subtree.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Given a pre-order traversal sequence, check if it can represent a valid BST. Return \"YES\" if it can, or \"NO\" if it cannot.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: nodes = [2, 1, 3, 4, 5]\r\nOutput: YES</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The root node will always be the first node in the array. In this case, the root is at node 2.</li>\r\n    <li>The next value, 1, is less than 2. Place the node 1 at the left of node 2.</li>\r\n    <li>The next value, 3, is greater than 2. Place the node 3 at the right of node 2.</li>\r\n    <li>The next value, 4, is greater than 3. Place the node 4 at the right of node 3.</li>\r\n    <li>The next value, 5, is greater than 4. Place the node 5 at the right of node 4.</li>\r\n    <li>This graph meets the definition of a BST.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>isValid</code> function with the following parameters:</p>\r\n<pre><code class='language-javascript'>public static String isValid(List&lt;Integer&gt; a) {\r\n    // Write your code here\r\n}</code></pre>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>string</code>: either the string YES if the path represents a valid BST, or NO.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= q &lt;= 10</code></li>\r\n    <li><code>1 &lt;= n &lt;= 100</code></li>\r\n    <li><code>1 &lt;= a[i] &lt;= 100</code></li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The following parameters are read from stdin:</p>\r\n<ul>\r\n    <li>The first line contains an integer <code>q</code>, the number of queries.</li>\r\n    <li>The next <code>q</code> sets of lines are defined as:\r\n        <ul>\r\n            <li>The first line contains an integer <code>n</code>, the number of nodes in the tree.</li>\r\n            <li>The next line contains <code>a[n]</code>: a list of space-separated integers that denote values encountered in the traversal of a tree.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Sample Case 0</h2>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3\r\n1 3 2\r\n3\r\n2 1 3\r\n6\r\n3 2 1 5 4 6\r\n5\r\n1 3 4 5 2\r\n5\r\n3 4 5 1 2\r\nOutput:\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>An explanation of the <code>q = 5</code> queries:</p>\r\n<ul>\r\n    <li>1. Diagram (a) is valid, so return the string YES.</li>\r\n    <li>2. Diagram (b) is valid, so return the string YES.</li>\r\n    <li>3. Diagram (c) is valid, so return the string YES.</li>\r\n    <li>4. Diagram (d), the query <code>1 3 4 5 2</code>, is not valid. The root is 1. Because it is the first value in the list. The second value of 3 must be the right child of 1 because it is greater. Likewise the third value, 4, must be the right child of 3. For 2 to be the last value in the traversal, it has to be the left child of 4. It is less than the root value 3 above it and is on its right subtree. Return the string NO.</li>\r\n    <li>5. Diagram (e), the query <code>3 4 5 1 2</code>, is not valid. The root, the first value in the list, is 3. The second value, 4, must be the right child of 3. The third value, 5, must be the right child of 4. For the fourth value to be 1, it must be the left child of 5, but that is less than the root at 4 and is in its right subtree. Return the string NO.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_29july",
        "company_id": 343
    }
]