[
    {
        "id": 98,
        "title": "Odd Count",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Odd Count</h1>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>Given an undirected graph with N nodes and N-1 edges, it doesn\\'t contain any cycle or self-loop. The graph is connected. None of the nodes have any value associated with them initially. At an edge between any two nodes u and v, you can assign a value that is either 1 or 2.</p>\n\n<p>The sum of a path between any two vertices u and v is defined as the sum of assigned values of all the edges that comprise the path between nodes u and v.</p>\n\n<p>You have to process Q queries, each containing two integers a and b. For each query, you need to count the number of ways in which the sum of the path between nodes a and b can be made odd by assigning the values. Output the answer modulo 10<sup>9</sup>+7.</p>\n\n<h3>Function Description</h3>\n        <p>Complete the solve function. This function takes the following 4 parameters and returns an array containing answers for Q queries:</p>\n        <ul>\n            <li><code>N</code>: Represents the value of a number</li>\n            <li><code>Edges</code>: Represents a 2D array of integers representing the edges of the graph</li>\n            <li><code>Q</code>: Represents the size of the query array</li>\n            <li><code>Queries</code>: Represents a 2D array of integers denoting the queries</li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains T, which represents the number of test cases.</li>\n            <li>For each test case:\n                <ul>\n                    <li>The first line contains a single integer denoting the value of N</li>\n                    <li>The next N-1 lines contain two single space-separated integers u and v denoting an edge between nodes u and v</li>\n                    <li>The next line contains a single integer denoting the value of Q</li>\n                    <li>The next Q lines contain two single space-separated integers a and b, denoting nodes a and b for the given query</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>For each test case, print the number of ways required for each query in a new line taking modulo 10<sup>9</sup>+7</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ T ≤ 100</li>\n            <li>1 ≤ N ≤ 10<sup>5</sup></li>\n            <li>1 ≤ Q ≤ 10<sup>5</sup></li>\n            <li>1 ≤ u, v ≤ N</li>\n            <li>1 ≤ a, b ≤ N</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Sample Input</h3>\n        <pre>\n1\n5\n1 2\n2 3\n3 4\n4 5\n2\n2 4\n3 4</pre>\n\n<h3>Sample Output</h3>\n        <pre>\n1\n2</pre>\n\n<div class=\\\"explanation\\\">\n            <h3>Explanation</h3>\n            <p>The first line contains the number of test cases, T = 1.</p>\n            <p>Given:</p>\n            <ul>\n                <li>N = 5</li>\n                <li>Edges = {{1,2}, {2,3}, {3,4}, {4,5}}</li>\n                <li>Q = 2</li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Function Template</h3>\n        <pre class=\\\"language-cpp\\\">\nlong long* solve(int N, int** Edges, int Q, int** Queries, int *out_n) {\n    // Write your code here\n    // Assign the size of the array to be returned into out_n variable\n    *out_n = Q;\n    long long *res = (long long*)malloc(*out_n * sizeof(long long));\n    return res;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1RDfly7mqcc8Ga2Z7DY4xIDCaoYFIvvPDOD8yPKVJX-0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Sprinklr",
        "company_id": 21
    },
    {
        "id": 99,
        "title": "Check the anagram",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Check the anagram</h2>\n        <div class=\\\"score\\\">Max. score: 20.00</div>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>Given lowercase string inputs s1, s2, and s3. Check if these strings are anagrams of each other or not. For example, strings \\\"dog\\\" and \\\"god\\\" are anagrams, so are strings \\\"baba\\\" and \\\"abab\\\"; but strings \\\"abbac\\\" and \\\"caaba\\\" are not.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function description</h3>\n        <p>Complete the <code>solve()</code> function. This function takes the following 3 parameters and returns either YES or NO:</p>\n        <ul>\n            <li>s1: Represents input string 1</li>\n            <li>s2: Represents input string 2</li>\n            <li>s3: Represents input string 3</li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input format for custom testing</h3>\n        <div class=\\\"note\\\">\n            <p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don\\'t provide boilerplate code.</p>\n        </div>\n        <ul>\n            <li>The first line contains a string s1.</li>\n            <li>The second line contains a string s2.</li>\n            <li>The third line contains a string s3.</li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Output format</h3>\n        <p>Print <code>YES</code> if all the given 3 strings are anagrams of each other, else print <code>NO</code></p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ |s, |s2|, |s3| ≤ 10<sup>6</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Sample Test Case</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nbbaa\nabab\naabb</pre>\n            <pre class=\\\"output\\\">Output:\nYES</pre>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <pre class=\\\"code\\\"><code class=\\\"language-c\\\">\n#include&lt;stdio.h&gt;\nchar* solve (char* s1, char* s2, char* s3) {\n    // Write your code here\n}\n        </code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1OMb1TOOZ2Hh6DA8if9mdOb2dr_cYKExG2bAdktdNbhQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Sprinklr",
        "company_id": 21
    },
    {
        "id": 100,
        "title": "Number in a range",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Number in a range</h1>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>Given three integers L, R, and K. A number X represents a lucky number if the binary representation of X contains the pattern 101 as a substring. Determine the K<sup>th</sup> lucky number in between L and R. If the K<sup>th</sup> lucky number does not exist, then print -1.</p>\n\n<h3>Function description</h3>\n        <p>Complete the solve function. This function takes the following 3 parameters and returns the K<sup>th</sup> lucky number in between L and R:</p>\n        <ul>\n            <li>L: Represents an integer denoting the value of L</li>\n            <li>R: Represents an integer denoting the value of R</li>\n            <li>K: Represents an integer denoting that K<sup>th</sup> lucky number which has to be found</li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input format for custom testing</h3>\n        <p>Note: Use this input format if you are testing against custom input or writing code in a language where we don\\'t provide boilerplate code.</p>\n        <ul>\n            <li>The first line contains T, which represents the number of test cases.</li>\n            <li>For each test case:\n                <ul>\n                    <li>The first line contains three space-separated integers L, R, and K.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Output format</h3>\n        <p>For each test case, print the K<sup>th</sup> lucky number in the range [L, R] in the new line. If the K<sup>th</sup> lucky number does not exist, then print -1.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ T ≤ 200</li>\n            <li>1 ≤ L ≤ R ≤ 10<sup>18</sup></li>\n            <li>1 ≤ K ≤ 10<sup>18</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Sample Input</h3>\n        <pre>\n6\n5 40 6\n5 12 4\n9 20 5\n7 7 3\n14 37 4\n13 25 4</pre>\n\n<h3>Sample Output</h3>\n        <pre>\n21\n-1\n-1\n-1\n23\n22</pre>\n\n<div class=\\\"explanation\\\">\n            <h3>Explanation</h3>\n            <ul>\n                <li>For test case 1:\n                    <p>All lucky numbers between 5 and 40 are 5, 10, 11, 13, 20, 21, 22, 23, 26, 27, 29, 37 and 40. The sixth lucky number is 21.</p>\n                </li>\n                <li>For test case 2:\n                    <p>All lucky numbers between 5 and 12 are 5, 10, and 11. There are less than 4 lucky numbers, so print -1.</p>\n                </li>\n                <li>For test case 3:\n                    <p>All lucky numbers between 9 and 20 are 9, 10, and 11. There are less than 5 lucky numbers so print -1.</p>\n                </li>\n                <li>For test case 4:\n                    <p>There are 0 lucky numbers between [7, 7] so print -1.</p>\n                </li>\n                <li>For test case 5:\n                    <p>All lucky numbers between 14 and 37 are 20, 21, 22, 23, 26, 27, 29, and 37. The fourth lucky number is 23.</p>\n                </li>\n                <li>For test case 6:\n                    <p>All lucky numbers between 13 and 25 are 13, 20, 21, 22, and 23. The fourth lucky number is 22.</p>\n                </li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"code\\\">long long solve(long long L, long long R, long long K);</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/14gGDm4PIcEV90Jep66FGo46sInPO7D8UbfFnCZgyj8Q/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Sprinklr",
        "company_id": 21
    }
]