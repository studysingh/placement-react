[
    {
        "id": 1099,
        "title": "Drone Delivery System",
        "problem_statement": "<h1>Drone Delivery System</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Pincode wants to start delivering using drones, and they are assessing the logistics needed for implementing the same. There are 'n' delivery routes along a straight highway. Each route begins at a certain kilometre marker as denoted in the array locations[0,...,n-1]. There would be one drone for each delivery route.</p>\r\n<p>To enable the smooth functioning of the entire delivery system and keep the drones operational, Pincode wants to install charging stations along the highway. Each station can only charge drones within a fixed radius r (in kms) from its position.</p>\r\n<p>Pincode can build at most k charging stations placed anywhere along the highway. Your task is to determine the minimum possible integer radius r such that all delivery routes are within range of at least one charging station.</p>\r\n\r\n<h2>Input</h2>\r\n<ul>\r\n    <li>An integer `n` representing the number of delivery routes/drones.</li>\r\n    <li>An integer `k` representing the number of charging stations available.</li>\r\n    <li>An array `locations[]` of length `n`, representing the kilometer markers of routes on the highway.</li>\r\n</ul>\r\n\r\n<h2>Output</h2>\r\n<p>A single integer - the minimum radius `r` needed to cover all delivery routes using at most `k` stations.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= n <= 10^5`</li>\r\n    <li>`1 <= k <= n`</li>\r\n    <li>`locations[i]: 1 <= locations[i] <= 10^9`</li>\r\n    <li>Charging stations can be placed anywhere on the highway, not necessarily at delivery routes (only at integer positions).</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n2\r\n1 2 4 8 10 12\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> You can have the two stations at positions 2,10. With a minimum radius of 2, this setup would cover all the routes.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n1 7 8\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> You can have the one station at positions 4 or 5. With a minimum radius of 4, this setup would cover all the routes.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "phonepe_1aug",
        "company_id": 360
    },
    {
        "id": 1107,
        "title": "Framewright Tournament",
        "problem_statement": "<h1>Framewright Tournament</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the land of Tricolor, there are three master guilds, each famous for their crafting materials:</p>\r\n<ul>\r\n    <li>The Crimson Guild (Red sticks)</li>\r\n    <li>The Verdant Guild (Green sticks)</li>\r\n    <li>The Azure Guild (Blue sticks)</li>\r\n</ul>\r\n<p>Each guild sends its finest materials to the Framewright Tournament - where artisans from across the realm craft rectangular frames using matching stick pairs.</p>\r\n<p>Each crate from a guild contains pairs of sticks of equal length - glued and polished together, never separated.</p>\r\n<p>Your Mission is the Framewright:</p>\r\n<p>You can craft a rectangular display frame using:</p>\r\n<ul>\r\n    <li>One pair of sticks from one guild (for height), and</li>\r\n    <li>One pair from a different guild (for width).</li>\r\n</ul>\r\n<p>Each frame's value is the area: length × width = value.</p>\r\n<p>Your goal: Craft the most valuable set of frames possible using the available pairs.</p>\r\n<p>Rules:</p>\r\n<ul>\r\n    <li>Only mix sticks from different guilds (no red-red, green-green, etc.).</li>\r\n    <li>Each pair can be used at most once.</li>\r\n    <li>You don't have to use every pair.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains three integers R, G, and B - representing the number of stick-pairs from the Crimson, Verdant, and Azure Guilds respectively.</li>\r\n    <li>The second line contains R integers: the lengths of the red stick-pairs</li>\r\n    <li>The third line contains G integers: the lengths of the green stick-pairs</li>\r\n    <li>The fourth line contains B integers: the lengths of the blue stick-pairs</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>Print the maximum possible total area of the constructed frames.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1 1 1\r\n3\r\n7\r\n4\r\nOutput:\r\n28</code></pre>\r\n<p><strong>Explanation:</strong> You can construct one of these frames: red and green with sides 3 and 7, red and blue with sides 3 and 4, and green and blue with sides 7 and 4. The best area of them is 4x7=28.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 1 3\r\n9 5\r\n3\r\n2 8 5\r\nOutput:\r\n103</code></pre>\r\n<p><strong>Explanation:</strong> The best possible frames are: red/blue 9x8, red/blue 5x5, green/blue 3x2. So the total area is 72+25+6=103.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; R, G, B &le; 200</code></li>\r\n    <li><code>1 &le; each stick length &le; 2000</code></li>\r\n    <li>Execution time limit: 4 seconds</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "phonepe_1aug",
        "company_id": 360
    },
    {
        "id": 1108,
        "title": "Fair Contestant Pairs",
        "problem_statement": "<h1>Fair Contestant Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a reality game show, there are <code>n</code> contestants standing in a line. Each contestant has been assigned two attributes:</p>\r\n<ul>\r\n    <li>A score, representing their performance in the game so far.</li>\r\n    <li>A popularity index based on audience votes.</li>\r\n</ul>\r\n<p>After some rounds, the show's producers want to check if the perceived differences in scores between any two contestants are <strong>justified by their popularity</strong> — to ensure fairness and transparency.</p>\r\n<p>You are given two integer arrays of size <code>n</code>:</p>\r\n<ul>\r\n    <li><code>score[i]</code> — the current score of the i-th contestant</li>\r\n    <li><code>popularity[i]</code> — the popularity index of the i-th contestant</li>\r\n</ul>\r\n<p>There is also an integer constant <code>k</code>, which represents the <strong>tolerance</strong> the producers are willing to allow in the mismatch between score difference and popularity difference.</p>\r\n<p>The producers want to find out how many pairs of contestants <code>(i, j)</code> (with <code>i < j</code>) satisfy the following condition:</p>\r\n<p><code>score[j] - score[i] <= popularity[j] - popularity[i] + k</code></p>\r\n<p>Your task is to compute the total number of such valid pairs.</p>\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n    <li>An integer <code>n</code> — number of contestants</li>\r\n    <li>An integer array <code>score[]</code> of size <code>n</code></li>\r\n    <li>An integer array <code>popularity[]</code> of size <code>n</code></li>\r\n    <li>An integer <code>k</code> — the allowed fairness tolerance</li>\r\n</ul>\r\n<p><strong>Output Format:</strong></p>\r\n<ul>\r\n    <li>A single integer — the number of valid contestant pairs <code>(i, j)</code> where the fairness condition holds.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, score = [1,2,3], popularity = [3,2,1], k = 1\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> We evaluate all possible pairs:</p>\r\n<ul>\r\n    <li><code>(0, 1): 1 - 2 <= 3 - 2 + 1 -> -1 <= 2</code></li>\r\n    <li><code>(0, 2): 1 - 3 <= 3 - 1 + 1 -> -2 <= 3</code></li>\r\n    <li><code>(1, 2): 2 - 3 <= 2 - 1 + 1 -> -1 <= 2</code></li>\r\n</ul>\r\n<p>So, all 3 pairs are valid.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>-10^4 <= score[i], popularity[i] <= 10^4</code></li>\r\n    <li><code>-10^4 <= k <= 10^4</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "phonepe_1aug",
        "company_id": 360
    }
]