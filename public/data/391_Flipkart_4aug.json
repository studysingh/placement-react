[
    {
        "id": 1163,
        "title": "QWERTY Word Sort",
        "problem_statement": "<h1>QWERTY Word Sort</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a popular quiz show, contestants are selected for further rounds using the Fastest Finger First round. Many of the questions require them to arrange a given list of words according to the QWERTY order format. The standard QWERTY keyboard order is QWERTYUIOPASDFGHJKL;ZXCVBNM.</p>\r\n<p>Help contestants with a program to sort the given words based on the QWERTY specified in the problem statements.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print anything else to stderr anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>All the characters in each word are in uppercase format only</li>\r\n    <li>The input does not contain any numbers, special characters, or any lower case letters.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input contains few lines and there is one word in each line, with the last line always containing 'X' (without quotes) which indicates the end of the list (X is not part of the list).</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains few lines (same as the number of lines in the input) which contain the sorted list with each line containing one word.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nIMAGINATION\r\nIS\r\nTHE\r\nHIGHEST\r\nFORM\r\nOF\r\nRESEARCH\r\nX\r\nOutput:\r\nRESEARCH</code></pre>\r\n<p><strong>Explanation:</strong> As per the QWERTY format, among the words given, R is the first in the sequence, since there are two words starting with Q-W-E. After that, then I, O, F, and H. There are two words with 'I' (IS and IMAGINATION') hence the second letter is and M are compared, and since S comes before M in the QWERTY format, 'IS' is placed above 'IMAGINATION'.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nWHERE\r\nTHERE\r\nIS\r\nLOVE\r\nTHERE\r\nIS\r\nLIFE\r\nTHE\r\nMOON\r\nX\r\nOutput:\r\nWHERE\r\nTHE\r\nTHERE\r\nTHERE\r\nIS\r\nIS\r\nLIFE\r\nLOVE\r\nMOON</code></pre>\r\n<p><strong>Explanation:</strong> As per the QWERTY format, W comes first, then T, I, L, and M. Between 'THE' and 'THERE', as 'THE' does not contain any further characters, it is printed before 'THERE'. In 'LIFE' and 'LOVE', as 'I' comes before 'O', 'LIFE' is placed above 'LOVE'.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_4aug",
        "company_id": 391
    },
    {
        "id": 1164,
        "title": "Sum of Anomaly Checkpoints",
        "problem_statement": "<h1>Sum of Anomaly Checkpoints</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A marathon is being organised in the hilly terrains of Ladakh. Since the region is sparsely populated, care must be taken to ensure that no runner gets lost along the route. There are multiple checkpoints along the route, and expert checkpoint must connect to only one downstream checkpoint. However, since there were multiple teams working on setting up the checkpoints, there have been some mistakes, and there are some checkpoints which are connecting to more than one downstream checkpoints.</p>\r\n<p>The checkpoint details are given, with each checkpoint represented by a random integer. Write a program to identify the checkpoints which are connecting to more than one downstream checkpoints, and print their sum as the output.</p>\r\n<p>The route details are given as a list of relations between the Starting point and the checkpoints. The relations are indicated as L, R, LL, LR, and so on, where the checkpoint is to the left (L), or left-left (LL) or right-left (RL) to the Starting point.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>3 <= Number of checkpoints <= 100</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains an integer N, the number of checkpoints in the route, including the Starting point.</p>\r\n<p>The second line of input contains an integer, which is the Starting point of the route.</p>\r\n<p>The next N-1 lines of input contain a string, S and an integer, X separated by a single white space, where X is a checkpoint along the route and S is the relation between the Starting point and X.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains an integer which is the sum of all checkpoints connecting to more than one downstream checkpoint.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n70\r\nL 50\r\nLR 65\r\nLRL 60\r\nLRR 68\r\nLRRL 69\r\nLRLL 39\r\nOutput:\r\n65</code></pre>\r\n<p><strong>Explanation:</strong> The marathon route can be represented as a tree structure. The starting point is 70.</p>\r\n<p>\r\n    The connections are:\r\n    <ul>\r\n        <li>70 (root) has children: 50 (path L), 65 (path LR)</li>\r\n        <li>50 has no children (leaf)</li>\r\n        <li>65 has children: 60 (path LRL), 68 (path LRR)</li>\r\n        <li>60 has no children (leaf)</li>\r\n        <li>68 has children: 69 (path LRRL), 39 (path LRLL)</li>\r\n        <li>69 has no children (leaf)</li>\r\n        <li>39 has no children (leaf)</li>\r\n    </ul>\r\n</p>\r\n<p>We can see that checkpoint 65 is connecting to two downstream checkpoints, 60 and 68, instead of one. Since this is the only checkpoint which does, its output is printed as 65.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n24\r\nR 35\r\nRL 30\r\nRLL 28\r\nRLLR 34\r\nRLLL 25\r\nRLLR 29\r\nRLRL 33\r\nOutput:\r\n58</code></pre>\r\n<p><strong>Explanation:</strong> The marathon route can be represented as a tree structure. The starting point is 24.</p>\r\n<p>\r\n    The connections are:\r\n    <ul>\r\n        <li>24 (root) has child: 35 (path R)</li>\r\n        <li>35 has child: 30 (path RL)</li>\r\n        <li>30 has children: 28 (path RLL), 33 (path RLRL)</li>\r\n        <li>28 has children: 34 (path RLLR), 25 (path RLLL)</li>\r\n        <li>33 has no children (leaf)</li>\r\n        <li>34 has no children (leaf)</li>\r\n        <li>25 has no children (leaf)</li>\r\n    </ul>\r\n</p>\r\n<p>In this example, checkpoint 30 connects to two downstream checkpoints (28 and 33), and checkpoint 28 connects to two downstream checkpoints (34 and 25). The sum of these checkpoints is 30 + 28 = 58.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_4aug",
        "company_id": 391
    },
    {
        "id": 1165,
        "title": "Wizard Chess Escape",
        "problem_statement": "<h1>Wizard Chess Escape</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Harry is being chased by an unknown enemy while trying to get to the Philosopher's stone to a safe place. He stands on one corner of a giant wizard chess board with the door to escape being at the diagonally opposite end of the board.</p>\r\n<p>Wizard chess boards are always square in shape, and allow anyone to move only one step at a time in any of the four directions: forward, backward, left & right. Some blocks on the board have the mark of Voldemort, and if Harry steps on any of those blocks, he will instantly die.</p>\r\n<p>Harry is standing at the top-left corner block of the board, and the door is at the bottom right corner block. To avoid capture, Harry needs to get to the escape door as quickly as possible. Help Harry in his quest by writing a program to find out the least number of steps needed to reach the escape door. Make the code as efficient as possible (in terms of time complexity), and print the least number of steps required as output.</p>\r\n<p><strong>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the standard output and test cases will fail.</strong></p>\r\n\r\n<h3>Input Format:</h3>\r\n<p>The first line contains a number N. This number is the length of the side of the chess board.</p>\r\n<p>The first line is followed by N lines, each containing a string of length N.</p>\r\n<p>The string can consist of characters 'D' and 'V' (quotes for clarity). D represents blocks that are accessible to Harry. V represents blocks which have the mark of Voldemort.</p>\r\n\r\n<h3>Output Format:</h3>\r\n<p>A number representing the least number of steps Harry has to move to reach the escape door. Please note that in a single step Harry can move from one complete block to another. If reaching the escape door is impossible, print -1.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nDVDD\r\nVDVD\r\nDDDD\r\nDDDD\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> There is no way to reach the escape door, hence output is printed as -1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nDVDDD\r\nDVDVD\r\nVVVDV\r\nDVDDV\r\nDDDDDD\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> The shortest (and only) path is marked as X below, which takes 12 steps.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 <= Size of the board <= 100</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_4aug",
        "company_id": 391
    }
]