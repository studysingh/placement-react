[
    {
        "id": 118,
        "title": "The Event",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">19. C++: The Event</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>A major event is taking place at a mall with multiple entry gates. Attendees arrive with friends and specify the gate they will use.</p>\n\n<p>You have two integer arrays of length n:</p>\n        <ul>\n            <li><code>friends</code>: Represents the number of friends each attendee is bringing.</li>\n            <li><code>gates</code>: Represents the gate each attendee will enter.</li>\n        </ul>\n\n<p>Determine the total number of people entering through each gate.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getGatesCount</code> with the following parameters:</p>\n        <ul>\n            <li><code>int friends[n]</code>: friends[i] denotes the number of friends accompanying the i<sup>th</sup> attendee</li>\n            <li><code>int gates[n]</code>: gates[i] indicates the gate through which the i<sup>th</sup> attendee and their friends enter</li>\n            <li><code>int m</code>: the number of gates</li>\n        </ul>\n    </div>\n\n<div class=\\\"return-value\\\">\n        <h3>Returns</h3>\n        <p><code>int[m]</code>: An array representing the total number of people entering from each gate</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, m ≤ 100000</li>\n            <li>1 ≤ friends[i] ≤ 1000</li>\n            <li>1 ≤ gate[i] ≤ m</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nfriends = [1, 2, 3]\ngates = [1, 1, 2]\nm = 2</pre>\n            <pre class=\\\"output\\\">Output:\n[5, 4]</pre>\n            <div class=\\\"explanation\\\">\n                <p>For three attendees with two gates:</p>\n                <ol>\n                    <li>The first attendee, with 1 friend, enters through Gate 1.</li>\n                    <li>The second attendee, with 2 friends, also chooses Gate 1.</li>\n                    <li>The third attendee, with 3 friends, enters through Gate 2.</li>\n                </ol>\n                <p>In this case:</p>\n                <ul>\n                    <li>Gate 1 sees 5 people (first attendee with 1 friend and second with 2 friends).</li>\n                    <li>Gate 2 sees 4 people (third attendee with 3 friends).</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp-code\\\">vector&lt;int&gt; getGatesCount(vector&lt;int&gt; friends, vector&lt;int&gt; gates, int m);</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1yutsRsM8_X01KbQVpp7Dv0fEYC410KdTlU_5zE_ES80/edit?usp=sharing",
        "solution_code": "",
        "company_name": "KLA",
        "company_id": 28
    },
    {
        "id": 119,
        "title": "Find Longest Ride",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">20. Find Longest Ride</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Given the dataset of taxi rides completed in a pandas dataframe, process the dataframe as follows:</p>\n\n<ul>\n            <li>Drop all the rows where the pickup time or dropoff time is missing.</li>\n            <li>Find the longest ride (on basis of duration) for each pickup month (YYYY-MM).</li>\n            <li>Sort the resulting dataframe by the pickup month.</li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The given dataframe consists of four columns:</p>\n        <ul>\n            <li><code>id</code> - unique trip id</li>\n            <li><code>vendor_id</code> - vendor id</li>\n            <li><code>pickup_datetime</code> - when the ride started</li>\n            <li><code>dropoff_datetime</code> - when the ride ended</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <p>Consider, for example, you are given the following dataframe:</p>\n\n<div class=\\\"example-table\\\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>id</th>\n                        <th>vendor_id</th>\n                        <th>pickup_datetime</th>\n                        <th>dropoff_datetime</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>id01234</td>\n                        <td>3</td>\n                        <td>2016-06-06 06:06:20</td>\n                        <td>2016-06-06 08:00:00</td>\n                    </tr>\n                    <tr>\n                        <td>id01434</td>\n                        <td>4</td>\n                        <td>2016-06-09 06:06:20</td>\n                        <td>2016-06-09 06:07:20</td>\n                    </tr>\n                    <tr>\n                        <td>id13234</td>\n                        <td>3</td>\n                        <td></td>\n                        <td>2016-07-06 03:06:10</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n<div class=\\\"output-format\\\">\n            <h3>Expected Output Format</h3>\n            <table>\n                <thead>\n                    <tr>\n                        <th>pickup_month</th>\n                        <th>id</th>\n                    </tr>\n                </thead>\n            </table>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1RdYAGZX1zgd8-B98RDvGMyGae9P4F8CijlsbJ2mAUp4/edit?usp=sharing",
        "solution_code": "",
        "company_name": "KLA",
        "company_id": 28
    },
    {
        "id": 156,
        "title": "C++: The Event",
        "problem_statement": "<div class=\\\"problem-container\\\">\\n    <h2 class=\\\"problem-title\\\"> C++: The Event</h2>\\n    \\n    <div class=\\\"problem-description\\\">\\n        <p>A major event is taking place at a mall with multiple entry gates. Attendees arrive with friends and specify the gate they will use.</p>\\n        \\n        <p>You have two integer arrays of length n:</p>\\n        <ul>\\n            <li><code>friends</code>: Represents the number of friends each attendee is bringing.</li>\\n            <li><code>gates</code>: Represents the gate each attendee will enter.</li>\\n        </ul>\\n        \\n        <p>Determine the total number of people entering through each gate.</p>\\n    </div>\\n\\n    <div class=\\\"function-details\\\">\\n        <h3>Function Description</h3>\\n        <p>Complete the function <code>getGatesCount</code> in the editor below.</p>\\n\\n        <h4>Function Parameters</h4>\\n        <ul>\\n            <li><code>int friends[n]</code>: friends[i] denotes the number of friends accompanying the i<sup>th</sup> attendee</li>\\n            <li><code>int gates[n]</code>: gates[i] indicates the gate through which the i<sup>th</sup> attendee and their friends enter</li>\\n            <li><code>int m</code>: the number of gates</li>\\n        </ul>\\n\\n        <h4>Returns</h4>\\n        <p><code>int[m]</code>: An array representing the total number entering from each gate</p>\\n    </div>\\n\\n    <div class=\\\"constraints\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ n, m ≤ 100000</li>\\n            <li>1 ≤ friends[i] ≤ 1000</li>\\n            <li>1 ≤ gates[i] ≤ m</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"input-format\\\">\\n        <h3>Input Format for Custom Testing</h3>\\n        <p>The first line contains an integer, n, the size of the friends array.</p>\\n        <p>The following n lines contain an integer representing friends[i].</p>\\n        <p>The following line contains an integer, n, the size of the gates array.</p>\\n        <p>The following n lines contain an integer representing gates[i].</p>\\n        <p>The last line contains an integer, m, the number of gates.</p>\\n    </div>\\n\\n    <div class=\\\"examples\\\">\\n        <h3>Sample Cases</h3>\\n        \\n        <div class=\\\"example\\\">\\n            <h4>Sample Case 0</h4>\\n            <pre class=\\\"input\\\">Input:\\n3\\n1\\n2\\n3\\n3\\n1\\n1\\n2\\n3</pre>\\n            <pre class=\\\"output\\\">Output:\\n5\\n4</pre>\\n            <div class=\\\"explanation\\\">\\n                <p>In this test case, there are three attendees and two gates.</p>\\n                <ul>\\n                    <li>The first attendee, with 1 friend, enters through Gate 1.</li>\\n                    <li>The second attendee, with 2 friends, also chooses Gate 1.</li>\\n                    <li>The third attendee, with 3 friends, enters through Gate 2.</li>\\n                </ul>\\n                <p>Gate 1 sees 5 people (first attendee with 1 friend and second with 2 friends).</p>\\n                <p>Gate 2 sees 4 people (third attendee with 3 friends).</p>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"example\\\">\\n            <h4>Sample Case 1</h4>\\n            <pre class=\\\"input\\\">Input:\\n3\\n3\\n5\\n1\\n3\\n1\\n1\\n3\\n3</pre>\\n            <pre class=\\\"output\\\">Output:\\n10\\n0\\n2</pre>\\n            <div class=\\\"explanation\\\">\\n                <p>Three attendees and three gates.</p>\\n                <ul>\\n                    <li>Attendee 1 arrives with 3 friends, and they enter Gate 1.</li>\\n                    <li>Attendee 2 arrives with 5 friends, and they enter Gate 1.</li>\\n                    <li>Attendee 3 arrives with 1 friend and they enter Gate 3.</li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/17f3-NlKSYfkmMvzpTo_Ap7vE74niH2LFbR3nubn33q0/edit?usp=sharing",
        "solution_code": "vector<int> getGatesCount(vector<int> friends, vector<int> gates, int m) { \\n    vector<int> counts(m, 0);\\n    for(int i=0;i<friends.size();i++) {\\n        counts[gates[i]-1] += friends[i] + 1;\\n    }\\n    return counts;\\n}",
        "company_name": "KLA",
        "company_id": 28
    },
    {
        "id": 157,
        "title": "Find Longest Ride",
        "problem_statement": "<div class=\\\"problem-container\\\">\\n    <h1 class=\\\"problem-title\\\"> Find Longest Ride</h1>\\n    \\n    <div class=\\\"problem-description\\\">\\n        <p>Given the dataset of taxi rides completed in a pandas dataframe, process the dataframe as follows:</p>\\n        <ul>\\n            <li>Drop all the rows where the pickup time or dropoff time is missing.</li>\\n            <li>Find the longest ride (on basis of duration) for each pickup month (YYYY-MM).</li>\\n            <li>Sort the resulting dataframe by the pickup month.</li>\\n        </ul>\\n\\n        <p>The given dataframe consists of four columns:</p>\\n        <ul>\\n            <li>id - unique trip id</li>\\n            <li>vendor_id - vendor id</li>\\n            <li>pickup_datetime - when the ride started</li>\\n            <li>dropoff_datetime - when the ride ended</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"example-data\\\">\\n        <h3>Sample DataFrame</h3>\\n        <table class=\\\"data-table\\\">\\n            <thead>\\n                <tr>\\n                    <th>id</th>\\n                    <th>vendor_id</th>\\n                    <th>pickup_datetime</th>\\n                    <th>dropoff_datetime</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr>\\n                    <td>id01234</td>\\n                    <td>3</td>\\n                    <td>2016-06-06 06:06:20</td>\\n                    <td>2016-06-06 08:00:00</td>\\n                </tr>\\n                <tr>\\n                    <td>id01434</td>\\n                    <td>4</td>\\n                    <td>2016-06-09 06:06:20</td>\\n                    <td>2016-06-09 06:07:20</td>\\n                </tr>\\n                <tr>\\n                    <td>id13234</td>\\n                    <td>3</td>\\n                    <td></td>\\n                    <td>2016-07-06 03:06:10</td>\\n                </tr>\\n            </tbody>\\n        </table>\\n\\n        <h4>Expected Output Format</h4>\\n        <table class=\\\"result-table\\\">\\n            <thead>\\n                <tr>\\n                    <th>pickup_month</th>\\n                    <th>id</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr>\\n                    <td>2016-06</td>\\n                    <td>id01234</td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n\\n    <div class=\\\"function-description\\\">\\n        <h3>Function Description</h3>\\n        <p>Complete the function <code>longestRide</code> in the editor below.</p>\\n        <p><code>longestRide</code> has the following parameter(s):</p>\\n        <ul>\\n            <li><code>df</code>: a pandas dataframe</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"constraints\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ the number of rows in the dataframe ≤ 1000.</li>\\n            <li>It is guaranteed that the resulting dataframe consists of at least one row with no nulls.</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"examples\\\">\\n        <h3>Sample Test Cases</h3>\\n        \\n        <div class=\\\"example\\\">\\n            <h4>Sample Case 0</h4>\\n            <pre class=\\\"input\\\">id,vendor_id,pickup_datetime,dropoff_datetime\\nid0219696,72,2016-06-06 06:06:20,2016-06-06 06:13:34\\nid1372182,80,2016-02-07 19:18:49,\\nid3569980,69,2016-06-14 00:26:11,2016-06-14 00:34:09\\nid2858528,29,,</pre>\\n            <pre class=\\\"output\\\">pickup_month,id\\n2016-06,id3569980</pre>\\n            <div class=\\\"explanation\\\">\\n                <p>After dropping null rows, only 2 trips remain in 2016-06. The duration is calculated and the pickup_month and id for the longest ride is returned.</p>\\n            </div>\\n        </div>\\n\\n        <div class=\\\"example\\\">\\n            <h4>Sample Case 1</h4>\\n            <pre class=\\\"input\\\">id,vendor_id,pickup_datetime,dropoff_datetime\\nid2714955,83,2016-02-29 08:12:29\\nid0418897,42,2016-06-01 07:46:35,\\nid2366946,61,2016-02-14 14:15:42,2016-02-14 14:21:32\\nid1943471,67,,2016-04-24 11:47:33\\nid2366984,62,2016-03-14 14:15:42,2016-03-14 14:21:32</pre>\\n            <pre class=\\\"output\\\">pickup_month,id\\n2016-02,id2366946\\n2016-03,id2366984</pre>\\n            <div class=\\\"explanation\\\">\\n                <p>After dropping null rows, only 2 trips remain - one each for 2016-02 & 2016-03. The pickup_month and id are returned for each month, sorted in increasing order of date.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Iq91KiMhoqpLsgO2zcllDnWjb6_pdPx25hDAzVLj-NA/edit?usp=sharing",
        "solution_code": "#!/bin/python3import os\\nimport pandas as pdimport numpy as np\\n\\n## Complete the \\'longestRide\\' function below.\\n## The function is expected to return a dataframe.\\n#starr ye wala??han\\n def longestRide(df):\\n    df = df.dropna(subset=[\\'pickup_datetime\\', \\'dropoff_datetime\\'])\\n    df[\\'p\\'] = pd.to_datetime(df[\\'pickup_datetime\\'])\\n    df[\\'d\\'] = pd.to_datetime(df[\\'dropoff_datetime\\']) \\n    df[\\'t\\'] = (df[\\'d\\'] - df[\\'p\\']).dt.total_seconds()\\n    df[\\'m\\'] = df[\\'p\\'].dt.strftime(\\'%Y-%m\\')\\n    i = df.groupby(\\'m\\')[\\'t\\'].idxmax()\\n    r = df.loc[i, [\\'m\\', \\'id\\']].sort_values(\\'m\\').reset_index(drop=True)\\n    r.columns = [\\'pickup_month\\', \\'id\\']\\n    return r\\n# import pandas as pddef longestRide(df):\\n    if name == \\'__main__\\':\\n    fptr = open(os.environ[\\'OUTPUT_PATH\\'], \\'w\\')\\n    df = pd.read_csv(\\'/dev/stdin\\')\\n    result = longestRide(df)\\n    fptr.write(result.to_csv(index=False))\\n    fptr.close()",
        "company_name": "KLA",
        "company_id": 28
    }
]