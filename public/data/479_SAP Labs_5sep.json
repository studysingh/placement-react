[
    {
        "id": 1375,
        "title": "Aesthetically Pleasing Garden",
        "problem_statement": "<h1>Aesthetically Pleasing Garden</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Jimmy owns a garden in which he has planted N trees in a row. After a few years, the trees have grown up and now they have different heights.</p>\r\n<p>Jimmy pays much attention to the aesthetics of his garden. He finds his trees aesthetically pleasing if they alternately increase and decrease in height (..., shorter, taller, shorter, taller, ...).</p>\r\n<p>Note that two adjacent trees cannot have equal heights.</p>\r\n<p>It may turn out that some trees have to be shortened in order to keep the look of the garden aesthetically pleasing. Jimmy is a lazy type, so he wants to put as little energy as possible into obtaining the desired look for his garden. What is the minimum number of trees that should be shortened so that Jimmy would find his garden aesthetically pleasing?</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-cpp'>int solution(vector&lt;int&gt; &amp;A);</code></pre>\r\n<p>that, given an array A consisting of N integers, where A[K] denotes the height of the K-th tree, returns the minimum number of trees that should be shortened so that the garden looks aesthetically pleasing.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = [5, 4, 3, 2, 6]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Jimmy can obtain the desired pattern by decreasing the height of the second tree (A[1]) to 2. For example, if A becomes [5, 2, 3, 2, 6], it follows the pattern (taller, shorter, taller, shorter, taller).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = [3, 7, 4, 5]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The garden already looks aesthetically pleasing, following the pattern (shorter, taller, shorter, taller).</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>Write an efficient algorithm for the following assumptions:</p>\r\n<ul>\r\n    <li>N is an integer within the range [1..100,000].</li>\r\n    <li>Each element of array A is an integer within the range [2..1,000].</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "SAP Labs_5sep",
        "company_id": 479
    },
    {
        "id": 1376,
        "title": "Game Piece Movement Distance",
        "problem_statement": "<h1>Game Piece Movement Distance</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>board</code> of length <code>N</code>, describing subsequent positions on a game board from left to right. Every position is either empty (represented by 0 in the array) or contains a single game piece (represented by 1).</p>\r\n<p>Each game piece can be moved at most once. A move means going one or more positions to either the left or the right. Pieces cannot capture (occupy another piece's position) or jump over each other. When a game piece is moved by <code>X</code> positions (either left or right), we say it travels distance <code>X</code>. Pieces can be moved in any order, but they must be moved only one at a time.</p>\r\n<p>What is the maximum possible distance that the game pieces can travel altogether?</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-javascript'>int solution(vector&lt;int&gt; &board);</code></pre>\r\n<p>that, given an array <code>board</code> consisting of <code>N</code> integers (0s and/or 1s), returns the maximum total distance the game pieces can travel altogether, under the constraint that each of them is moved at most once.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: board = [1, 1, 0, 0, 1]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The pieces are initially at positions 0, 1, and 4. To maximize total distance while preserving relative order and not occupying other pieces' positions, the piece at original position 0 moves to position 2 (distance 2), the piece at original position 1 moves to position 3 (distance 2), and the piece at original position 4 stays at position 4 (distance 0). The resulting configuration is <code>[0, 0, 1, 1, 1]</code>. Total traveled distance is 2 + 2 = 4. There are no combinations of moves that would produce a larger total.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: board = [0, 1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The only piece is at position 1. It can be moved one position to the left to position 0. Total traveled distance is 1.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: board = [0, 0, 0]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> There are no pieces in the board, so nothing can be moved, and the total distance is 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>Write an efficient algorithm for the following assumptions:</p>\r\n<ul>\r\n    <li><code>N</code> is an integer within the range <code>[1..40,000]</code>.</li>\r\n    <li><code>array board</code> contains only integers 1 and/or 0.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "SAP Labs_5sep",
        "company_id": 479
    }
]