[
    {
        "id": 1425,
        "title": "Almost Binary Tree Last Numbers",
        "problem_statement": "<h1>Almost Binary Tree Last Numbers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Consider that you are provided with a list A of integers N. Construct an almost binary tree by using these integers and write a program to print the last number from each level that is completely filled.</p>\r\n<p>If the elements of the list L are [x1, x2, x3, x4, x5, x6, ..., xN] then the constructed almost binary tree would be formed by inserting elements in level-order fashion.</p>\r\n<p>An almost binary tree is a binary tree that satisfies the following conditions:</p>\r\n<ul>\r\n    <li>Insertion of nodes must take place level by level and all the nodes must be left justified.</li>\r\n    <li>All the levels from 1 to h-1 (where h stands for the number of levels) should be completely filled without any gap.</li>\r\n</ul>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the standard output and test cases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains N where N denotes the total number of elements in the list A.</p>\r\n<p>The second line of input contains N elements separated by a single white space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single line of output contains last numbers from each level that is completely filled. Each number should be on a new line as shown in the examples.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Element should not be negative</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n12 23 354 32\r\nOutput:\r\n12\r\n354</code></pre>\r\n<p><strong>Explanation:</strong> From the given Sample Input 1, we have: Total number of elements = 4. So an almost binary tree is formed:</p>\r\n<pre><code class='language-text'>12 (Level 1)\r\n/  \\\r\n23  354 (Level 2)\r\n/\r\n32 (Level 3 is not completely filled as it should contain 4 elements)</code></pre>\r\n<p>So the last numbers from each completely filled level are 12 and 354, which are printed as an output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n1 2 3 4 5 6 7 8\r\nOutput:\r\n1\r\n3\r\n7</code></pre>\r\n<p><strong>Explanation:</strong> From the given Sample Input 2, we have: Total number of elements = 8. So an almost binary tree is formed:</p>\r\n<pre><code class='language-text'>1 (Level 1)\r\n/ \\\r\n2  3 (Level 2)\r\n/ \\ / \\\r\n4  5 6  7 (Level 3)\r\n/\r\n8 (Level 4)</code></pre>\r\n<p>So the last numbers from each completely filled level are 1, 3 and 7, which are printed as an output.</p>\r\n\r\n<h2>Code Snippet</h2>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\n#include &lt;vector&gt;\r\nusing namespace std;\r\nvoid getLastNumbers(vector&lt;int&gt; arr, int n) // arr is an integer vector of size n\r\n{\r\n    //WRITE YOUR CODE HERE\r\n}\r\nint main() {\r\n    int n;\r\n    cin >> n;\r\n    vector&lt;int&gt; arr(n);\r\n    for (int i = 0; i &lt; n; i++) {\r\n        std::cin >> arr[i];\r\n    }\r\n    getLastNumbers(arr, n);\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "bank of Australia_15sep",
        "company_id": 502
    },
    {
        "id": 1426,
        "title": "String Rearrangement Pattern",
        "problem_statement": "<h1>String Rearrangement Pattern</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string (str) where the characters have to be rearranged according to a specific pattern. The pattern is not given; only some examples that follow the pattern are provided. Your task is to analyze the provided examples, identify the pattern, and write a program that applies the same rearrangement to any given input string.</p>\r\n\r\n<p>Some examples following the pattern are given below:</p>\r\n<ul>\r\n    <li>Input: HELLO, Output: GGKNN</li>\r\n    <li>Input: WORLD, Output: VQQNC</li>\r\n    <li>Input: OPEN, Output: NRDP</li>\r\n    <li>Input: CLOSE, Output: BNNDUD</li>\r\n    <li>Input: ZERO, Output: YGQQ</li>\r\n    <li>Input: AAA, Output: ZCZ</li>\r\n    <li>Input: BB, Output: AD</li>\r\n</ul>\r\n\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output, and test cases will fail.</p>\r\n\r\n<p><strong>Input Format:</strong><br>The only line of input should contain a string, str, which needs to be rearranged.</p>\r\n\r\n<p><strong>Output Format:</strong><br>The only line of output should display the rearranged string.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: SPLURGE\r\nOutput: RRKWQID</code></pre>\r\n<p><strong>Explanation:</strong> Based on the identified pattern from the problem description examples, each character in \"SPLURGE\" is transformed to produce \"RRKWQID\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: LIAISON\r\nOutput: KKZKRQM</code></pre>\r\n<p><strong>Explanation:</strong> Based on the identified pattern from the problem description examples, each character in \"LIAISON\" is transformed to produce \"KKZKRQM\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= Length of the input \"str1\" &lt;= 1000</code></li>\r\n    <li>Only English alphabets are allowed in the <code>\"str1\"</code>.</li>\r\n    <li>Only uppercase letters are allowed in the <code>\"str1\"</code>.</li>\r\n</ul>\r\n\r\n<p>Here's a C++ boilerplate code snippet provided:</p>\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\n\r\nusing namespace std;\r\n\r\nstring printResult(string str1) { // str1 is given input string.\r\n    string res = \"\";\r\n\r\n    // WRITE YOUR CODE HERE.\r\n\r\n    return res;\r\n}\r\n\r\nint main() {\r\n    string str1;\r\n    getline(cin, str1);\r\n    string res = printResult(str1);\r\n    cout &lt;&lt; res &lt;&lt; endl;\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "bank of Australia_15sep",
        "company_id": 502
    }
]