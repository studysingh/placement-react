[
    {
        "id": 1847,
        "title": "Festival of Spirits - Eywa's Festival",
        "problem_statement": "<h1>Festival of Spirits - Eywa's Festival</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the mystical world of Pandora, the Na'vi tribes live in harmony with the life force of Eywa. They have N sacred sites, numbered from 0 to N-1, connected by pathways with the Great Tree at site 0 at the center.</p>\r\n<p>When new sacred sites are discovered, they are added to this network, favoring a connection to the left. If the left is occupied, they connect to the right instead. The Na'vi keep track of the number of guardians at each site in the Book of Souls.</p>\r\n<p>For the upcoming Eywa Festival, the Na'vi need to choose the perfect site for the celebration. They use a special number, M, to determine this site through a specific traversal of the network. This hallowed traversal respects the order of connecting to the left first, then the site itself, and finally the right.</p>\r\n<p>The chosen Mth site, revealed through this hallowed traversal, will host the festival, its guardian count ensuring a gathering resonant with Eywa's energy and peace. Write an algorithm to find the number of Na'vi guardians at chosen sacred site.</p>\r\n<p><strong>Input:</strong> Enter an integer N (i.e. number of sacred sites) and put semi-colon then enter N space-separated integers representing the number of Na'vi guardians at each sacred site. Then put semi-colon and enter two space-separated integers pathwayCount and connectionCount (will always be 2). Then put semi-colon and enter pathwayCount set seperated by semi-colon consisting of connectionCount space-separated integers, representing the sacred site connected by an energy pathway. Then enter semi-colon and enter an integer M. For Example:\\n7;10 20 15 25 30 18 22;6 2;0 1;0 2;1 3;1 4;2 5;2 6;3</p>\r\n<p><strong>Output:</strong> Print an integer representing the number of Na'vi guardians at chosen sacred site.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 7;10 20 15 25 30 18 22;6 2;0 1;0 2;1 3;1 4;2 5;2 6;3\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong> The hierarchy is as given below:</p>\r\n<pre><code class='language-text'>    0\r\n   / \\\r\n  1   2\r\n /|\\ /|\\\r\n3 4 5 6</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 <= siteCount <= 10^4</code></li>\r\n    <li><code>0 < siteGuardians[0], siteGuardians[1], ..., siteGuardians[N-1] < 10^4</code></li>\r\n    <li><code>0 <= festivalSite <= siteCount</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <utility>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int findGuardianCount(int N, const std::vector<int>& guardians, const std::vector<std::pair<int, int>>& children, int M) {\n        // Core logic to find the Mth site in the in-order traversal\n        // and return its guardian count will be implemented here.\n        return 0;\n    }\n};\n\nvoid ignore_char(std::stringstream& ss, char c) {\n    if (ss.peek() == c) {\n        ss.ignore();\n    }\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n    std::cin.ignore(); // Consume the semicolon\n\n    std::vector<int> guardians(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> guardians[i];\n    }\n    std::cin.ignore(); // Consume the semicolon\n\n    int pathwayCount, connectionCount;\n    std::cin >> pathwayCount >> connectionCount;\n    std::cin.ignore(); // Consume the semicolon\n\n    std::vector<std::pair<int, int>> children(N, {-1, -1});\n    for (int i = 0; i < pathwayCount; ++i) {\n        int u, v;\n        std::cin >> u >> v;\n        if (children[u].first == -1) {\n            children[u].first = v;\n        } else {\n            children[u].second = v;\n        }\n        if (i < pathwayCount - 1) {\n            std::cin.ignore(); // Consume the semicolon between pathways\n        }\n    }\n    std::cin.ignore(); // Consume the final semicolon\n\n    int M;\n    std::cin >> M;\n\n    Solution solution;\n    int result = solution.findGuardianCount(N, guardians, children, M);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Bounteous Ã— Accolite_15oct",
        "company_id": 652
    },
    {
        "id": 1848,
        "title": "Question 1: Stack and Queue Operations",
        "problem_statement": "<h1>Question 1: Stack and Queue Operations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Five elements A,B,C,D and E are pushed into a stack one after another starting from A. The stack is popped four times and each element is inserted in a queue.Then three elements are deleted from the queue and pushed back into the stack.Now one item is popped from the stack. The popped item is</p>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>\r\n\r\n<h1>Question 2: Big O Expression for Sum of N Numbers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Which of these is the correct big o expression for 1+2+3+...+n?</p>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>\r\n\r\n<h1>Question 3: AVL Tree Rebalancing Time Complexity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The time complexity for rebalancing the AVL tree is</p>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>\r\n\r\n<h1>Question 4: Binary Search Tree Insertion Time Complexity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Which one of the following is the tightest upper bound that represents the time complexity of inserting an object into a binary search tree of n nodes?</p>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>\r\n\r\n<h1>Question 5: C Printf Output</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>what is the output of following :</p>\r\n<pre><code class='language-javascript'>printf(\"%d\",printf(\"%d\",1234));</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement beyond the code snippet.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>\r\n\r\n<h1>Question 6: Missing Number in Series</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Find the missing number of the following series: 1, 4, 9, 16, 25, 36, ___, 64</p>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>\r\n\r\n<h1>Question 7: Relational Database Key Identification</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Consider the relation R (A, B, C, D, E) and the Functional Dependency set as:</p>\r\n<pre><code class='language-text'>AB --> C\r\nCD --> E\r\nDE --> B</code></pre>\r\n<p>Which of the following is a key of R ?</p>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>\r\n\r\n<h1>Question 8: SQL Join Type for Maximum Rows</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>If we do join operation between two tables, which join gives maximum number of rows?</p>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>\r\n\r\n<h1>Question 9: Max-Heap Insertion and Level-Order Traversal</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A priority queue is implemented as a Max-Heap. Initially, it has 5 elements.The level-order traversal of the heap is: 10, 8, 5, 3, 2.Two new elements 1 and 7 are inserted into the heap in that order.The level-order traversal of the heap after the insertion of the elements is:</p>\r\n\r\n<h2>Examples</h2>\r\n<p>No specific examples provided in the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No specific constraints mentioned.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>No follow-up questions mentioned.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <queue>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @brief Solves the stack and queue operations problem.\n     * \n     * This method simulates the described operations on a stack and a queue\n     * to determine the final popped item.\n     * \n     * @return The character that is popped from the stack at the end.\n     */\n    char solve() {\n        // Core logic to simulate the stack and queue operations will go here.\n        // For now, it's a placeholder.\n        return ' ';\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement describes a fixed sequence of operations\n    // with no variable input. Therefore, we don't need to read any input.\n    \n    Solution solution;\n    char result = solution.solve();\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Bounteous Ã— Accolite_15oct",
        "company_id": 652
    },
    {
        "id": 1849,
        "title": "Library Catalog Sorting Algorithm",
        "problem_statement": "<h1>Library Catalog Sorting Algorithm</h1>\r\n<h2>Problem Description</h2>\r\n<p>You are running a library catalog. You know that the books in your collection are almost in sorted ascending order by title, with the exception of one book which is in the wrong place. You want the catalog to be completely sorted in ascending order. Which algorithm will you use?</p>\r\n<ul>\r\n    <li>A. InsertionSort</li>\r\n    <li>B. MergeSort</li>\r\n    <li>C. RadixSort</li>\r\n    <li>D. HeapSort</li>\r\n</ul>\r\n\r\n<h1>Student Scores Frequency Storage</h1>\r\n<h2>Problem Description</h2>\r\n<p>A program P reads in 500 integers in the range [0..100] representing the scores of 500 students. It then prints the frequency of each score above 50. What would be the best way for P to store the frequencies?</p>\r\n<ul>\r\n    <li>A. An array of 50 numbers</li>\r\n    <li>B. An array of 100 numbers</li>\r\n    <li>C. An array of 101 numbers</li>\r\n    <li>D. An array of 500 numbers</li>\r\n</ul>\r\n\r\n<h1>SQL Top Salary Query</h1>\r\n<h2>Problem Description</h2>\r\n<p>What does this query output:</p>\r\n<pre><code class='language-javascript'>SELECT TOP 1 Salary\r\nFROM (\r\n    SELECT TOP 3 Salary\r\n    FROM Salary_P\r\n    ORDER BY Salary DESC\r\n) AS sal\r\nORDER BY Salary ASC</code></pre>\r\n<ul>\r\n    <li>A. 3rd highest salary</li>\r\n    <li>B. 3 highest salaries</li>\r\n    <li>C. 1st highest salary</li>\r\n    <li>D. 1 highest salary</li>\r\n</ul>\r\n\r\n<h1>Family Relations Granddaughter</h1>\r\n<h2>Problem Description</h2>\r\n<p>P, Q, R, S, T, U are 6 members of a family in which there are two married couples. T, a teacher is married to a doctor who is mother of R and U. Q, the lawyer is married to P - P has one son and one grandson. Of the two married ladies one is a house wife. There is also one student and one male engineer in the family. Which of the following is true about the grand-daughter of the family ?</p>\r\n<ul>\r\n    <li>A. She is a lawyer</li>\r\n    <li>B. She is an engineer</li>\r\n    <li>C. She is a student</li>\r\n    <li>D. She is a doctor</li>\r\n</ul>\r\n\r\n<h1>Varchar Variable Space Allocation</h1>\r\n<h2>Problem Description</h2>\r\n<p>If we have declared the variable @Var Varchar(200) and data saved in that variable is only 20 characters. So what will happen to left over space of 180 characters.</p>\r\n<ul>\r\n    <li>A. all declared space is assigned</li>\r\n    <li>B. 180 character space is wasted</li>\r\n    <li>C. 180 character space is not assigned at all.</li>\r\n    <li>D. None of them</li>\r\n</ul>\r\n\r\n<h1>Make Utility Graph Algorithm</h1>\r\n<h2>Problem Description</h2>\r\n<p>Make is a utility that automatically builds executable programs and libraries from source code by reading files called makefiles which specify how to derive the target program. Which of the following standard graph algorithms is used by Make.</p>\r\n<ul>\r\n    <li>A. Strongly Connected Components</li>\r\n    <li>B. Topological Sorting</li>\r\n    <li>C. Breadth First Search</li>\r\n    <li>D. Dijkstra's Shortest Path</li>\r\n</ul>\r\n\r\n<h1>Blood Relations Determination</h1>\r\n<h2>Problem Description</h2>\r\n<p>If P is the brother of Q, which of the statements is/are necessary to determine how Q is related to R? Statement 1: The son of P is the grandson of R. Statement 2: Q is the sister of P.</p>\r\n<ul>\r\n    <li>A. Only 1</li>\r\n    <li>B. Only 2</li>\r\n    <li>C. Either 1 or 2</li>\r\n    <li>D. Both 1 and 2</li>\r\n</ul>\r\n\r\n<h1>Linear Data Structure Identification</h1>\r\n<h2>Problem Description</h2>\r\n<p>Which of the following is a linear Data Structure?</p>\r\n<ul>\r\n    <li>A. Graph</li>\r\n    <li>B. Tree</li>\r\n    <li>C. array</li>\r\n    <li>D. none</li>\r\n</ul>\r\n\r\n<h1>Cycle Detection in Directed Graph</h1>\r\n<h2>Problem Description</h2>\r\n<p>Which of the following condition is sufficient to detect the cycle in a directed graph?</p>\r\n<ul>\r\n    <li>A. There is an edge from currently being visited node to an already visited node.</li>\r\n    <li>B. There is an edge from currently being visited node to an ancestor of currently visited node in DFS forest.</li>\r\n    <li>C. Every node is seen twice in DFS.</li>\r\n    <li>D. None of the above</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <ios>\n\nclass Solution {\npublic:\n    // The provided text is a collection of multiple-choice questions, not a standard\n    // competitive programming problem with a defined input/output format.\n    // This boilerplate is based on a plausible interpretation of the first question,\n    // \"Library Catalog Sorting Algorithm\", assuming the task is to sort a list of strings.\n    // The actual problem to be solved by code is ambiguous.\n    void solve() {\n        // Core logic goes here.\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // Since the problem statement does not specify an input format or the number of test cases,\n    // this main function is a generic placeholder. It does not read any input.\n    // You will need to modify this based on the actual problem's input specification.\n\n    Solution solution;\n    solution.solve();\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Bounteous Ã— Accolite_15oct",
        "company_id": 652
    },
    {
        "id": 1850,
        "title": "Average Case Time Complexity of Merge Sort",
        "problem_statement": "<h1>Average Case Time Complexity of Merge Sort</h1>\r\n<h2>Problem Description</h2>\r\n<p>The average case time complexity of Merge Sort is:</p>\r\n\r\n<h1>Complexity of Insertion Sort</h1>\r\n<h2>Problem Description</h2>\r\n<p>What is the complexity of sorting an array with insertion sort given below?</p>\r\n<ul>\r\n    <li>a) where array is already sorted</li>\r\n    <li>b) where array is reverse sorted</li>\r\n</ul>\r\n\r\n<h1>3NF in DB Design</h1>\r\n<h2>Problem Description</h2>\r\n<p>In DB design 3NF ensures how non key attributes are dependent on key attributes, so there is no _____</p>\r\n\r\n<h1>Find the Value of j After Code Execution</h1>\r\n<h2>Problem Description</h2>\r\n<p>For given code snippet, find the value of j after execution.</p>\r\n<pre><code class='language-javascript'>main (){\r\n    int x,y=0;\r\n    for (x = 0; x <= 4; y++)\r\n        y = func(x,y);\r\n}\r\nint func (int i,int j){\r\n    static int loop = 0;\r\n    loop = loop + i + j;\r\n    return (loop);\r\n}</code></pre>\r\n\r\n<h1>C Code Snippet Analysis (Defining ABC)</h1>\r\n<h2>Problem Description</h2>\r\n<p>For Given code, how can you define ABC?</p>\r\n<pre><code class='language-javascript'>struct XYZ{\r\n    int x; float y; double z;\r\n};\r\nstruct XYZ *ABC[10];</code></pre>\r\n\r\n<h1>Worst-Case Complexity for Deletion in a B-Tree</h1>\r\n<h2>Problem Description</h2>\r\n<p>What is the worst-case complexity for deletion in a B-Tree?</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <limits>\n\nclass Solution {\npublic:\n    /**\n     * @brief Solves the problem for a single test case.\n     * \n     * @param question A string representing the question from the input.\n     * @return A string representing the answer.\n     */\n    std::string solve(const std::string& question) {\n        // Core logic to process the question and find the answer goes here.\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement is a collection of unrelated questions with no clear input format.\n    // A common competitive programming pattern is to handle 't' test cases.\n    // We will assume 't' is given, and each test case is a single line of text representing a question.\n    int t;\n    std::cin >> t;\n    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); // Consume the rest of the line\n\n    while (t--) {\n        std::string line;\n        std::getline(std::cin, line);\n\n        Solution solver;\n        std::string result = solver.solve(line);\n        std::cout << result << std::endl;\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Bounteous Ã— Accolite_15oct",
        "company_id": 652
    }
]