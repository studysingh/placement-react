[
    {
        "id": 1887,
        "title": "Towers Transmission Redistribution",
        "problem_statement": "<h1>Towers Transmission Redistribution</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A line of communication towers is placed along a deserted Highway. Each tower maintains a group of active transmitters. When the central system wants to rebalance network load, it can temporarily disable a tower – redistributing its transmitters to neighboring towers.</p>\r\n<p>The engineers want to predict, for every tower, what is the maximum number of transmitters that could be gathered around it after performing these redistributions optimally.</p>\r\n<p>You must determine, for every tower i, the maximum possible number of transmitters that could be accumulated around it after performing any sequence of redistributions.</p>\r\n\r\n<h3>Rules of Redistribution</h3>\r\n<ul>\r\n    <li>There are n towers in total, numbered 1 to n.</li>\r\n    <li>Each tower i initially has a<sub>i</sub> active transmitters.</li>\r\n    <li>When the central system disables a tower:\r\n        <ul>\r\n            <li>Let x be the current number of transmitters at that tower.</li>\r\n            <li>[x / 2] transmitters move to the previous tower (tower i-1), and another [x / 2] move to the next tower (tower i+1).</li>\r\n            <li>If x is odd, one transmitter remains at tower i.</li>\r\n            <li>If i=1 or i=n, any transmitters moving off the ends are lost.</li>\r\n        </ul>\r\n    </li>\r\n    <li>After redistribution, the tower is re-enabled, and the process can continue on any tower, in any order, any number of times.</li>\r\n</ul>\r\n\r\n<h2>Input</h2>\r\n<p>The first line contains an Integer t — number of test cases (1 &le; t &le; 10<sup>4</sup>).</p>\r\n<p>Each test case contains:</p>\r\n<ul>\r\n    <li>An integer n (1 &le; n &le; 10<sup>5</sup>) — the number of towers.</li>\r\n    <li>A line with n integers a<sub>1</sub>, ..., a<sub>n</sub> (0 &le; a<sub>i</sub> &le; 10<sup>9</sup>) — the initial transmitter counts.</li>\r\n</ul>\r\n<p>The sum of all n across test cases does not exceed 10<sup>5</sup>.</p>\r\n\r\n<h2>Output</h2>\r\n<p>For each test case, output n integers b<sub>1</sub>, b<sub>2</sub>, ..., b<sub>n</sub>, where b<sub>i</sub> is the maximum number of transmitters that can be gathered at tower i.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n2\r\n8 0\r\nOutput:\r\n8 4</code></pre>\r\n<p><strong>Explanation:</strong>\r\nTo maximize transmitters at tower 1 -> do nothing.\r\nTo maximize tower 2 -> disable tower 1 once; half the transmitters shift right.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n2\r\n7 1\r\nOutput:\r\n7 4</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3\r\n1 2 3\r\nOutput:\r\n2 3 4</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe central tower starts with 9 transmitters. By successively disabling neighboring towers, the outer ones can accumulate up to 4, 6, 9, 6, 4 respectively.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; t &le; 10<sup>4</sup></li>\r\n    <li>1 &le; n &le; 10<sup>5</sup></li>\r\n    <li>0 &le; a<sub>i</sub> &le; 10<sup>9</sup></li>\r\n    <li>Sum of all n across test cases &le; 10<sup>5</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Ivyleague csforall_18oct",
        "company_id": 666
    },
    {
        "id": 1888,
        "title": "Frequency Subarray Updates",
        "problem_statement": "<h1>Frequency Subarray Updates</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You monitor a long timeline of packet tags. Each second has one tag (an integer). Engineers want to keep some frequency bands \"balanced\" inside subsegments of the timeline.</p>\r\n<p>You are given an integer array `a` of length `n`. You must process `m` operations of two types:</p>\r\n<ol>\r\n    <li><strong>Query</strong>\r\n        <pre><code class='language-text'>1 l r k</code></pre>\r\n        <p>Find the smallest non-negative integer `T` such that there exist `k` distinct tag values `x_1, ..., x_k` which all appear at least once in the subarray `a[l...r]`, and if `cnt_i` is the number of occurrences of `x_i` inside `a[l...r]`, then</p>\r\n        <p><code>|cnt_i - cnt_j| &lt;= T</code> for all <code>1 &lt;= i, j &lt;= k</code>.</p>\r\n        <p>If it is impossible to choose `k` distinct values that appear in `a[l...r]`, print -1.</p>\r\n    </li>\r\n    <li><strong>Point update</strong>\r\n        <pre><code class='language-text'>2 p x</code></pre>\r\n        <p>Set <code>a[p] := x</code>.</p>\r\n    </li>\r\n</ol>\r\n<p>You must answer every query of the first type.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line contains two integers `n` and `m`.</p>\r\n<p>The second line contains `n` integers `a_1, ..., a_n`.</p>\r\n<p>Each of the next `m` lines contains an operation in one of the two formats:</p>\r\n<ul>\r\n    <li><code>1 l r k</code></li>\r\n    <li><code>2 p x</code></li>\r\n</ul>\r\n\r\n<h2>Output</h2>\r\n<p>For each query of type 1, print the smallest non-negative integer `T` or -1 if impossible.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 3\r\n1 2\r\n1 1 2 2\r\nOutput:\r\n0\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong>\r\nFor the first query (1 1 2 2): Subarray `a[1...2]` is `[1, 2]`. We need `k=2` distinct values. We can choose `x_1=1, x_2=2`. `cnt_1=1, cnt_2=1`. `|cnt_1 - cnt_2| = |1-1| = 0`. So `T=0`.\r\nFor the second query (1 1 2 2): This input seems to be a typo or repeated. Assuming it's the same query, the output is -1. This would imply that for some reason, it's impossible to find 2 distinct values, which contradicts the first part. Given the sample output, it's likely the second query is different or the `k` value implies impossibility. Without further context, we rely on the given output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 6\r\n2 1 1 3 3 2\r\n1 1 6 3\r\n1 2 6 2\r\n2 5 1\r\n1 1 5 2\r\n2 8 2\r\n1 4 6 3\r\nOutput:\r\n1\r\n0\r\n2\r\n1</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 4\r\n1 2 3 3 2 1\r\n1 1 6 3\r\n2 4 1\r\n1 2 6 3\r\n1 1 3 2\r\nOutput:\r\n0\r\n1\r\n0</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n, m &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= a_i &lt;= 10^5</code></li>\r\n    <li>For query type 1: <code>1 &lt;= l &lt;= r &lt;= n, 1 &lt;= k &lt;= 10^5</code></li>\r\n    <li>For update type 2: <code>1 &lt;= p &lt;= n, 1 &lt;= x &lt;= 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Ivyleague csforall_18oct",
        "company_id": 666
    },
    {
        "id": 1889,
        "title": "Beacon Activation on a Straight Highway",
        "problem_statement": "<h1>Beacon Activation on a Straight Highway</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A straight highway has numbered positions 1...m. There are m possible beacons (one per position). If you activate the beacon at position j it yields a fixed power p_j (possibly 0).</p>\r\n<p>You also have n zones L_i, R_i. Zone i covers the inclusive segment [L_i, R_i].</p>\r\n<p>If you choose a subset of beacons to activate, then the benefit of a zone is:</p>\r\n<ul>\r\n    <li>If there is no activated beacon inside [L_i, R_i];</li>\r\n    <li>otherwise, the power of the activated beacon with the largest position inside [L_i, R_i] (i.e., the rightmost activated beacon inside that zone).</li>\r\n</ul>\r\n<p>Your task: choose which beacons to activate to maximize the sum of benefits over all zones.</p>\r\n\r\n<h2>Input</h2>\r\n<p>Multiple test cases.</p>\r\n<p>First line: <strong>Integer t</strong> — number of tests (1 &le; t &le; 10^5).</p>\r\n<p>For each test case:</p>\r\n<ul>\r\n    <li>One line with integers <strong>n</strong> and <strong>m</strong> (1 &le; n, m &le; 10^6).</li>\r\n    <li>Next <strong>n</strong> lines: two integers <strong>L_i R_i</strong> (1 &le; L_i &le; R_i &le; m) — the i-th zone.</li>\r\n    <li>Next line: <strong>m</strong> integers <strong>p_1, p_2, ..., p_m</strong> (0 &le; p_j &le; 10^9) — beacon powers.</li>\r\n</ul>\r\n\r\n<h2>Output</h2>\r\n<p>For each test case, print a single integer — the maximum total benefit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n3 6\r\n1 3\r\n2 5\r\n4 6\r\n0 5 2 7 0 4\r\nOutput:\r\n16</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Test 1. Activate beacons at positions 2 (power 5), 4 (power 7), and 6 (power 4):</p>\r\n<ul>\r\n    <li>Zone [1,3] -> rightmost active is 2 -> +5</li>\r\n    <li>Zone [2,5] -> rightmost active is 4 -> +7</li>\r\n    <li>Zone [4,6] -> rightmost active is 6 -> +4</li>\r\n</ul>\r\n<p>Total = 16.</p>\r\n<p>Test 2. Activate only position 4 (power 9): both zones take that beacon -> 9 + 9 = 18.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n4 8\r\n1 4\r\n2 8\r\n3 7\r\n5 8\r\n3 0 6 0 5 9 0 4\r\nOutput:\r\n33</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>One optimal choice: activate positions 3 (8), 5 (5), and 6 (9):</p>\r\n<ul>\r\n    <li>[1,4] -> rightmost active is 3 -> +6</li>\r\n    <li>[2,8] -> rightmost active is 6 -> +9</li>\r\n    <li>[3,7] -> rightmost active is 6 -> +9</li>\r\n    <li>[5,8] -> rightmost active is 6 -> +9</li>\r\n</ul>\r\n<p>Total = 6 + 9 + 9 + 9 = 33.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; t &le; 10^5</li>\r\n    <li>1 &le; n, m &le; 10^6</li>\r\n    <li>1 &le; L_i &le; R_i &le; m</li>\r\n    <li>0 &le; p_j &le; 10^9</li>\r\n    <li>It is guaranteed that &Sigma; n &le; 10^6 and &Sigma; m &le; 10^6 (sum over all test cases).</li>\r\n</ul>\r\n\r\n<h2>Sample Test Cases</h2>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2 3\r\n1 2\r\n1 3\r\n0 5 10\r\nOutput:\r\n5\r\n10</code></pre>\r\n<pre><code class='language-text'>Input:\r\n1\r\n1 1\r\n1 1\r\n2\r\nOutput:\r\n2</code></pre>\r\n<pre><code class='language-text'>Input:\r\n1\r\n2 2\r\n1 1\r\n2 2\r\n3 4\r\nOutput:\r\n3</code></pre>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3 4\r\n1 2\r\n1 3\r\n3 4\r\n5 1 4 2\r\nOutput:\r\n5</code></pre>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3 5\r\n1 5\r\n2 4\r\n3 3\r\n5 4 3 2 1\r\nOutput:\r\n9</code></pre>\r\n<pre><code class='language-text'>Input:\r\n1\r\n2 7\r\n1 7\r\n3 5\r\n6 1 8 0 3 2 7\r\nOutput:\r\n16</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Ivyleague csforall_18oct",
        "company_id": 666
    }
]