[
    {
        "id": 1049,
        "title": "Minimum Time to Complete Tasks with Dependencies",
        "problem_statement": "<h1>Minimum Time to Complete Tasks with Dependencies</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given N tasks numbered from 0 to N-1. Each task takes 1 unit of time to complete. Some tasks depend on the completion of other tasks and can only start once all their prerequisite tasks are finished. You are also given a list of dependency pairs where each pair (a, b) means task 'a' must be completed before task 'b' can start.</p>\r\n<p>You have unlimited resources and can run multiple tasks in parallel as long as their dependencies are satisfied. Your task is to find the minimum time required to complete all tasks.</p>\r\n<p>Implement the function <code>minimumTimeToCompleteTasks</code> which takes the number of tasks N and a list of dependency pairs, and returns the minimum time required to finish all tasks.</p>\r\n\r\n<h3>Parameters:</h3>\r\n<ul>\r\n    <li><strong>N:</strong> An integer representing the total number of tasks.</li>\r\n    <li><strong>M:</strong> The number of dependency pairs.</li>\r\n    <li><strong>dependencies:</strong> A list of pairs (a, b) representing dependencies, where task 'a' must be completed before task 'b'.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains a single integer N, the number of tasks.</li>\r\n    <li>The second line contains a single integer M, the number of dependency pairs.</li>\r\n    <li>The next M lines each contain two space-separated integers a and b, indicating task a must be completed before task b.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return a single integer denoting the minimum time to complete all tasks.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3\r\n0 1\r\n0 2\r\n3 4\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Tasks 0 can start at time 1.</li>\r\n    <li>Tasks 1 and 2 depend on task 0, so they can start at time 2.</li>\r\n    <li>Task 4 depends on 3, so they start at time 3.</li>\r\n</ul>\r\n<p>Thus, the minimum time to complete all tasks is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^5</code></li>\r\n    <li><code>0 <= M <= 10^5</code></li>\r\n    <li><code>0 <= a, b < N</code></li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<p>Time Limit: 5.0 sec(s) for each input file<br>Memory Limit: 256 MB</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "urban_29july",
        "company_id": 340
    },
    {
        "id": 1050,
        "title": "Bitwise Palindromic Paths",
        "problem_statement": "<h1>Bitwise Palindromic Paths</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a binary matrix of size N x M where each cell contains either 0 or 1. A path from the top-left cell (0,0) to the bottom-right cell (N-1,M-1) is valid if you can only move right or down at each step.</p>\r\n<p>A path is called bitwise palindromic if the sequence of bits collected along the path forms a palindrome when interpreted as a string (e.g., 010, 1, 101).</p>\r\n<p>Your task is to count the number of such bitwise palindromic paths.</p>\r\n<p><strong>Function Description:</strong> You need to implement the function <code>countBitwisePalindromicPaths</code>.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li>N: An integer representing the number of rows.</li>\r\n    <li>M: An integer representing the number of columns.</li>\r\n    <li>grid: A 2D list of size N x M consisting of binary values (0 or 1).</li>\r\n</ul>\r\n<p><strong>Return:</strong> An integer representing the number of valid bitwise palindromic paths from (0,0) to (N-1,M-1), modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains a single integer N.</li>\r\n    <li>The second line contains a single integer M.</li>\r\n    <li>The next N lines each contain M space-separated binary digits representing the matrix.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return a single integer representing the number of valid bitwise palindromic paths.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2\r\n1 0\r\n0 1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> There are 2 paths:</p>\r\n<ul>\r\n    <li>Path 1: 1 -> 0 -> 1 forms \"101\", which is a palindrome.</li>\r\n    <li>Path 2: 1 -> 0 -> 1 forms \"101\", which is a palindrome.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N, M &le; 15</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "urban_29july",
        "company_id": 340
    },
    {
        "id": 1051,
        "title": "Rotten Oranges",
        "problem_statement": "<h1>Rotten Oranges</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an N Ã— M grid representing a storage area for oranges. Each cell in the grid can have one of the following values:</p>\r\n<ul>\r\n    <li><code>0</code> -- An empty cell</li>\r\n    <li><code>1</code> -- A fresh orange</li>\r\n    <li><code>2</code> -- A rotten orange</li>\r\n</ul>\r\n<p>A rotten orange at position <code>(i, j)</code> spreads to its adjacent fresh oranges (up, down, left, or right) <strong>every minute</strong>. The rotting process occurs simultaneously for all currently rotten oranges during each time step.</p>\r\n<p>Your task is to determine the <strong>minimum time required</strong> for all fresh oranges to become rotten. If at least one fresh orange cannot become rotten, return <code>-1</code>.</p>\r\n<p>You must implement the function: <code>int minTimeToRottenOranges(int N, int M, int[][] grid)</code>.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>Int N</code> -- Number of rows in the grid</li>\r\n    <li><code>Int M</code> -- Number of columns in the grid</li>\r\n    <li><code>Int [][] grid</code> -- A 2D array of size N x M, where each element represents the state of an orange (0, 1, or 2)</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li><strong>First line:</strong> One Integer N (number of rows)</li>\r\n    <li><strong>Second line:</strong> One Integer M (number of columns)</li>\r\n    <li><strong>Next N lines:</strong> Each line contains M integers, representing the grid state (0, 1, or 2)</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single integer representing the <strong>minimum time required</strong> for all oranges to rot.</p>\r\n<p>If it is impossible, return <code>-1</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n0 2 1\r\n1 1 0\r\n0 0 2\r\nOutput:\r\nMinute 3:\r\n2 2 2\r\n2 2 0\r\n0 0 2\r\n\r\nMinute 4:\r\n2 2 2\r\n2 2 0\r\n0 2 2\r\n\r\nAll oranges rot within 4 minutes</code></pre>\r\n<p><strong>Explanation:</strong> The problem asks for the minimum time for all fresh oranges to rot. Based on the rules, a fresh orange turns rotten if it is adjacent to a rotten orange. This process occurs simultaneously each minute. The provided output shows the state of the grid after 3 minutes and 4 minutes, concluding that all oranges rot within 4 minutes.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N, M <= 1000</code> (large grid size)</li>\r\n    <li><code>0 <= grid[i][j] <= 2</code> (valid cell values)</li>\r\n    <li>At least one orange is present in the grid</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code will be against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li><strong>Time Limit:</strong> 5.0 secs for each input file</li>\r\n    <li><strong>Memory Limit:</strong> 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Batch, C, C++, C#, Clojure, CP, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Javascript, Javascript (Node.js), Kotlin, Lisp (Racket), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python 2, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "urban_29july",
        "company_id": 340
    }
]