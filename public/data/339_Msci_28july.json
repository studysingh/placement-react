[
    {
        "id": 1046,
        "title": "Maximum Coupon Value",
        "problem_statement": "<h1>Maximum Coupon Value</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An e-commerce platform offers discount coupons as scratch cards.</p>\r\n<p>For a coupon code of lowercase English letters, the value is determined as follows:</p>\r\n<ul>\r\n    <li>Each letter is assigned its position value in the alphabet (a=1, b=2, ..., z=26).</li>\r\n    <li>Character contribution = (character value)<sup>(character frequency)</sup> modulo (10<sup>9</sup> + 7)</li>\r\n    <li>Coupon value = sum of all character contributions</li>\r\n</ul>\r\n<p><strong>Example:</strong> The coupon \"ddzdzz\" has a value of (4<sup>3</sup> + 26<sup>3</sup>) modulo (10<sup>9</sup> + 7) = 17640</p>\r\n<p>Given an initial coupon string and an integer <code>k</code>, create coupon codes using all substrings of length <code>k</code>. Determine the highest possible coupon value among all generated coupon codes.</p>\r\n<p><strong>Note:</strong> The maximum value can exceed (10<sup>9</sup> + 7).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider <code>coupon = \"abcc\"</code> and <code>k = 2</code>.</p>\r\n<p>All coupon codes of length 2, and their coupon values are:</p>\r\n<ul>\r\n    <li>\"ab\": value = 1<sup>1</sup> + 2<sup>1</sup> = 3</li>\r\n    <li>\"bc\": value = 2<sup>1</sup> + 3<sup>1</sup> = 5</li>\r\n    <li>\"cc\": value = 3<sup>2</sup> = 9</li>\r\n</ul>\r\n<p>The maximum coupon value amongst all coupon codes is 9 modulo (10<sup>9</sup> + 7) = 9.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: coupon = \"bcaa\", k = 3\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> All coupon codes of length 3, and their coupon values are:</p>\r\n<ul>\r\n    <li>\"bca\": value = 2<sup>1</sup> + 3<sup>1</sup> + 1<sup>1</sup> = 6</li>\r\n    <li>\"caa\": value = 3<sup>1</sup> + 1<sup>2</sup> = 4</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: coupon = \"dccccd\", k = 3\r\nOutput: 27</code></pre>\r\n<p><strong>Explanation:</strong> All coupon codes of length 3, and their coupon values are:</p>\r\n<ul>\r\n    <li>\"dcc\": value = 4<sup>1</sup> + 3<sup>2</sup> = 13</li>\r\n    <li>\"ccc\": value = 3<sup>3</sup> = 27</li>\r\n    <li>\"ccc\": value = 3<sup>3</sup> = 27</li>\r\n    <li>\"ccd\": value = 3<sup>2</sup> + 4<sup>1</sup> = 13</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; length of coupon &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; k &le; length of coupon</code></li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumCouponValue</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string coupon</code>: the coupon</li>\r\n    <li><code>int k</code>: the substring length for coupon codes</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>long_int</code>: the maximum coupon value among the coupon codes generated</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Msci_28july",
        "company_id": 339
    },
    {
        "id": 1047,
        "title": "Minimum Cost to Rent Cores",
        "problem_statement": "<h1>Minimum Cost to Rent Cores</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In order to shift its infrastructure to the cloud, a company plans to rent <code>k</code> computing cores per day over <code>n</code> days. They have <code>m</code> pricing plans available for this period. Each pricing plan includes:</p>\r\n<ul>\r\n    <li><code>l[i]</code> and <code>r[i]</code>: the starting and ending days the plan is available</li>\r\n    <li><code>c[i]</code>: the number of cores available each day</li>\r\n    <li><code>p[i]</code>: the cost to rent one core per day</li>\r\n</ul>\r\n<p>The company can rent between 0 and <code>c[i]</code> cores each day from each available plan. Given <code>n</code>, <code>k</code>, and the list of plans as a 2D array, return the minimum cost to rent the required cores.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinCost</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of days to rent cores</li>\r\n    <li><code>int k</code>: the number of cores to rent each day</li>\r\n    <li><code>int plans[m][4]</code>: each <code>plan[i]</code> contains <code>[l[i], r[i], c[i], p[i]]</code>, the start and end days, cores available, and price per core per day</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the minimum cost to complete the process</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Suppose <code>n = 5</code>, <code>k = 7</code>, and <code>plans = [[1, 3, 5, 2], [1, 4, 5, 3], [2, 5, 10, 1]]</code>.</p>\r\n<p><strong>Explanation:</strong> The optimal strategy is shown below:</p>\r\n<ul>\r\n    <li><strong>Day 1:</strong> Purchase 5 cores from plan 1 and 2 cores from plan 2. Cost = 5*2 + 2*3 = 16.</li>\r\n    <li><strong>Day 2:</strong> Purchase 7 cores from plan 3. Cost = 7*1 = 7.</li>\r\n    <li><strong>Day 3:</strong> Purchase 7 cores from plan 3. Cost = 7*1 = 7.</li>\r\n    <li><strong>Day 4:</strong> Purchase 7 cores from plan 3. Cost = 7*1 = 7.</li>\r\n    <li><strong>Day 5:</strong> Purchase 7 cores from plan 3. Cost = 7*1 = 7.</li>\r\n</ul>\r\n<p>The total sum of costs is 16 + 7 + 7 + 7 + 7 = 44. Return 44.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nk = 4\r\nplans = [[1, 4, 4, 5], [1, 4, 2, 5], [1, 2, 2, 1], [2, 3, 3, 2]]\r\nOutput: 49</code></pre>\r\n<p><strong>Explanation:</strong> The optimal strategy is shown below:</p>\r\n<ul>\r\n    <li><strong>Day 1:</strong> Purchase 2 cores from plan 1 and 2 cores from plan 3. Cost = 2*5 + 2*1 = 12.</li>\r\n    <li><strong>Day 2:</strong> Purchase 2 cores from plan 3 and 2 cores from plan 4. Cost = 2*1 + 2*2 = 6.</li>\r\n    <li><strong>Day 3:</strong> Purchase 1 core from plan 2 and 3 cores from plan 4. Cost = 1*5 + 3*2 = 11.</li>\r\n    <li><strong>Day 4:</strong> Purchase 4 cores from plan 1. Cost = 4*5 = 20.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 1\r\nk = 4\r\nplans = [[1, 1, 4, 5]]\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> On day 1, choose 4 cores from plan 1. Cost = 4*5 = 20.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n, m &le; 10<sup>4</sup></code></li>\r\n    <li><code>1 &le; k &le; 500</code></li>\r\n    <li><code>1 &le; plans[i][0], plans[i][1] &le; n</code> (start and end days)</li>\r\n    <li><code>1 &le; plans[i][2] &le; k</code> (cores available)</li>\r\n    <li><code>1 &le; plans[i][3] &le; 10<sup>9</sup></code> (price per core)</li>\r\n    <li>It is guaranteed that for any available day, there are at least <code>k</code> cores available.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Msci_28july",
        "company_id": 339
    },
    {
        "id": 1048,
        "title": "Maximize Beauty of an Array",
        "problem_statement": "<h1>Maximize Beauty of an Array</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The beauty of an array is defined as the number of elements whose value equals their position index (1-indexed).</p>\r\n<p>Given an array of integers, you can perform the following operation any number of times while the array length is greater than 1:</p>\r\n<ul>\r\n    <li>Choose any position <code>i</code> and delete the element at that position without changing the order of the remaining elements.</li>\r\n</ul>\r\n<p>Determine the maximum possible beauty that can be achieved.</p>\r\n<p>Complete the function <code>maximizeBeauty</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: the given array</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum possible beauty of the array</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 6, arr = [6, 3, 2, 4, 3, 4]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One optimal sequence of operations is shown.</p>\r\n<ul>\r\n    <li>Choose <code>i = 2</code>, delete <code>arr[2] = 3</code>; <code>arr = [6, 2, 4, 3, 4]</code>.</li>\r\n    <li>Choose <code>i = 3</code>, delete <code>arr[3] = 4</code>; <code>arr = [6, 2, 3, 4]</code>.</li>\r\n</ul>\r\n<p>In the final array <code>[6, 2, 3, 4]</code>, <code>arr[2] = 2</code>, <code>arr[3] = 3</code>, and <code>arr[4] = 4</code>. The beauty is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [3, 2, 1, 2]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> One optimal sequence of operations is shown.</p>\r\n<ul>\r\n    <li>Choose <code>i = 1</code>, delete <code>arr[1] = 3</code>; <code>arr = [2, 1, 2]</code>.</li>\r\n    <li>Choose <code>i = 1</code>, delete <code>arr[1] = 2</code>; <code>arr = [1, 2]</code>.</li>\r\n</ul>\r\n<p>In the final array <code>[1, 2]</code>, <code>arr[1] = 1</code> and <code>arr[2] = 2</code>. The beauty is 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 7, arr = [1, 3, 2, 5, 4, 5, 3]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Optimal operations:</p>\r\n<ol>\r\n    <li>Delete <code>arr[2] = 3</code>, resulting in <code>arr = [1, 2, 5, 4, 5, 3]</code>.</li>\r\n    <li>Delete <code>arr[6] = 3</code>, resulting in <code>arr = [1, 2, 5, 4, 5]</code>.</li>\r\n</ol>\r\n<p>The beauty of the final array <code>[1, 2, 5, 4, 5]</code> is 4, since:</p>\r\n<ul>\r\n    <li><code>arr[1] = 1</code></li>\r\n    <li><code>arr[2] = 2</code></li>\r\n    <li><code>arr[4] = 4</code></li>\r\n    <li><code>arr[5] = 5</code></li>\r\n</ul>\r\n<p>The maximum possible beauty is 4.</p>\r\n<p>Note that there can be more than one final array with maximum beauty, like <code>[1, 2, 5, 4, 5, 3]</code> in this case.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2000</code></li>\r\n    <li><code>1 <= arr[i] <= 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Msci_28july",
        "company_id": 339
    }
]