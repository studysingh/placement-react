[
    {
        "id": 1205,
        "title": "Task Scheduling",
        "problem_statement": "<h1>Task Scheduling</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array <code>taskMemory</code> of n positive integers representing memory required for each task, an array <code>taskType</code> of n positive integers representing task types, and an integer <code>maxMemory</code>, find the minimum time required to process all tasks.</p>\r\n<p>Each task takes 1 unit of time. The server can process at most two tasks in parallel only if they are the same type and together require no more than <code>maxMemory</code> units.</p>\r\n<p>Complete the function <code>getMinTime</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int taskMemory[n]</code>: the memory required by the tasks</li>\r\n    <li><code>int taskType[n]</code>: the type of the tasks</li>\r\n    <li><code>int maxMemory</code>: the maximum total memory that can be allocated to the tasks</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the minimum time required to process all tasks</p>\r\n<pre><code class='language-cpp'>int getMinTime(std::vector&lt;int&gt; taskMemory, std::vector&lt;int&gt; taskType, int maxMemory) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, taskMemory = [7, 2, 3, 9], taskType = [1, 2, 1, 3], maxMemory = 10\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Suppose n = 4, taskMemory = [7, 2, 3, 9], taskType = [1, 2, 1, 3], and maxMemory = 10. Tasks 0 and 2 are processed concurrently (taskMemory[0]=7, taskType[0]=1; taskMemory[2]=3, taskType[2]=1). Their types are the same (1) and their combined memory (7+3=10) is within maxMemory (10). The other two tasks must be processed separately due to their memory requirements and because they are not the same type. The minimum amount of time required to process all the tasks is 3 units.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p>(This corresponds to \"Sample Case 0\" in the original problem statement)</p>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\ntaskMemory = [1, 2, 3, 4, 2]\r\ntaskType = [1, 2, 1, 2, 3]\r\nmaxMemory = 4\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> The first and the third tasks are processed in parallel. The other three tasks need to be processed individually. The second and fourth use too much memory together, and the fifth is a unique type.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= maxMemory &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= taskMemory[i] &lt;= maxMemory</code></li>\r\n    <li><code>1 &lt;= taskType[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Booking holdings_9aug",
        "company_id": 409
    },
    {
        "id": 1206,
        "title": "Deciding Schedule",
        "problem_statement": "<h1>Deciding Schedule</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a company, an employee receives a fixed amount, <strong>fixedPay</strong> dollars, each day they work. They also receive a bonus, <strong>bonus</strong> dollars, on a workday if they worked the day before. The employee is planning their work schedule for <strong>n</strong> days.</p>\r\n<p>Their schedule is given as a binary string <strong>schedule</strong> where 'T' is a workday, and 'O' is not. The employee can change up to <strong>k</strong> days off ('O') to workdays ('T').</p>\r\n<p>Find the maximum earnings the employee can get after changing at most <strong>k</strong> days from 'O' to 'T'.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, k = 2, fixedPay = 1, bonus = 2, schedule = \"10100\"\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> An optimal way to change the schedule is to work on the second and fourth days. In this case, the schedule becomes \"11110\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = fixedPay = 1.</li>\r\n    <li>On days 2, 3, and 4, earnings = fixedPay + bonus = 3.</li>\r\n</ul>\r\n<p>Total earnings = 1 + 3 + 3 + 3 + 0 = 10. Return 10.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nschedule = \"100101\"\r\nk = 2\r\nfixedPay = 4\r\nbonus = 3\r\nOutput: 29</code></pre>\r\n<p><strong>Explanation:</strong> An optimal schedule is to work on the second and third days too, so the schedule is \"11101\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = fixedPay = 4.</li>\r\n    <li>On days 2, 3, and 4, earnings = fixedPay + bonus = 7.</li>\r\n    <li>On day 5, earnings = fixedPay = 4.</li>\r\n</ul>\r\n<p>Total earnings = 4 + 7 + 7 + 0 + 4 = 29.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nschedule = \"111001\"\r\nk = 1\r\nfixedPay = 3\r\nbonus = 3\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong> An optimal schedule is to also work on the fifth day, so the schedule is \"111101\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = fixedPay = 3.</li>\r\n    <li>On days 2, 3, 4, and 5, earnings = fixedPay + bonus = 6.</li>\r\n    <li>On day 6, earnings = fixedPay = 3.</li>\r\n</ul>\r\n<p>Total earnings = 3 + 6 + 6 + 6 + 6 + 3 = 30.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= k &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= fixedPay, bonus &lt;= 10^9</code></li>\r\n    <li><code>schedule[i]</code> is 'O' or 'T'.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaxEarnings</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string schedule</code>: initial work schedule</li>\r\n    <li><code>int k</code>: the maximum number of extra days the employee can work</li>\r\n    <li><code>int fixedPay</code>: the fixed pay for each workday</li>\r\n    <li><code>int bonus</code>: the bonus if they also worked the previous day</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>long</code>: the maximum earnings possible</li>\r\n</ul>\r\n<pre><code class='language-javascript'>long getMaxEarnings(string schedule, int k, int fixedPay, int bonus)</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Booking holdings_9aug",
        "company_id": 409
    }
]