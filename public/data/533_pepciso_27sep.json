[
    {
        "id": 1525,
        "title": "Count Desktop Product IDs",
        "problem_statement": "<h1>Count Desktop Product IDs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A company Digicomparts manufactures 52 types of unique products for laptop and desktop computers. It manufactures 10 types of laptop products and 42 types of desktop products.</p>\r\n<p>Each product manufactured by the company has a unique productID from a-z and A-Z. The laptop products have productIDs (a, i, e, o, u, A, I, E, O, U) while the rest of the productIDs are assigned to the desktop products. The company manager wishes to find the sales data for the desktop products.</p>\r\n<p>Given a list of productIDs of the sales of the last N products, write an algorithm to help the manager find the productIDs of the desktop products.</p>\r\n\r\n<p><strong>Input:</strong></p>\r\n<p>The first line of the input consists of an integer <strong>numOfProducts</strong>, representing the number of products to be considered in the sales data (N).</p>\r\n<p>The second line consists of N space-separated characters - <strong>productID<sub>1</sub></strong>, <strong>productID<sub>2</sub></strong>, ..., <strong>productID<sub>N</sub></strong> representing the product IDs of the sales of the last N products.</p>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>Print an integer representing the number of desktop products among the given sales data.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 6\r\navikel\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The productIDs of the desktop products in the sales data are [v,k,l]. So, the output is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>0 ≤ numOfProducts ≤ 10⁶</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>// Header files\r\n#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\n#include &lt;vector&gt;\r\n\r\nusing namespace std;\r\n\r\n/*\r\n * productID representing the product IDs of the sales.\r\n */\r\nint calculateDesktopProductIDs (vector&lt;char&gt; productID)\r\n{\r\n    int answer;\r\n    // Write your code here\r\n\r\n    return answer;\r\n}\r\n\r\nint main()\r\n{\r\n    //input for productID\r\n    int productID_size;\r\n    cin >> productID_size;\r\n    vector&lt;char&gt; productID;\r\n    for (int idx = 0; idx &lt; productID_size; idx++)\r\n    {\r\n        char temp;\r\n        cin >> temp;\r\n        productID.push_back(temp);\r\n    }\r\n\r\n    int result = calculateDesktopProductIDs(productID);\r\n    cout &lt;&lt; result;\r\n\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "pepciso_27sep",
        "company_id": 533
    },
    {
        "id": 1526,
        "title": "Calculate Common Footsteps and Velocity",
        "problem_statement": "<h1>Calculate Common Footsteps and Velocity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Martin's father goes for a jog every morning. Martin follows him several minutes later. His father starts at a position that is X1 meters away from their home and runs rectilinearly at a constant speed of V1 meters per step for N steps.</p>\r\n<p>Martin is standing at X2 meters away from his home. He wonders how fast he must run at some constant speed of V2 meters per step so as to maximize F, where F equals the number of his father's footsteps that Martin will land on during his run. It is given that the first step that Martin will land on, from his starting position, will have been landed on by his father.</p>\r\n<p>Note that if more than one prospective velocity results in the same number of maximum common steps, output the highest prospective velocity as V2.</p>\r\n<p>Write an algorithm to help Martin calculate F and V2.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of an integer <code>fatherPos</code>, representing the initial position of Martin's father (X1).</p>\r\n<p>The second line consists of an integer <code>martinPos</code>, representing the initial position of Martin (X2).</p>\r\n<p>The third line consists of an integer <code>velFather</code>, representing the velocity of the father (V1).</p>\r\n<p>The last line consists of an integer <code>steps</code>, representing the number of steps taken by the father (N).</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print two space-separated integers as the maximum number of common footsteps F and respective speed V2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= fatherPos &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= martinPos &lt;= fatherPos</code></li>\r\n    <li><code>1 &lt;= velFather &lt;= 10^4</code></li>\r\n    <li><code>1 &lt;= steps &lt;= 10^4</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n2\r\n20\r\nOutput:\r\n21 1</code></pre>\r\n<p><strong>Explanation:</strong> Martin can have a maximum of 21 common footsteps with a velocity of 1 m/step.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "pepciso_27sep",
        "company_id": 533
    },
    {
        "id": 1527,
        "title": "Count Name Occurrences",
        "problem_statement": "<h1>Count Name Occurrences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The agent gave Martin a hint that the number of terrorists is the number of times the terrorist's name occurs in the text.</p>\r\n<p>Write an algorithm to help Martin find the number of terrorists who are going to attack the army base.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of a string <code>text</code>, representing the text portion of the secret information shared by the agent.</p>\r\n<p>The second line consists of a string <code>name</code> representing the name of the terrorist.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print an integer representing the number of terrorists who are going to attack the army base. If no occurrence of <code>name</code> is found in <code>text</code> then print 0.</p>\r\n\r\n<h2>Note</h2>\r\n<ul>\r\n    <li>The name matching is case insensitive (i.e., \"Tim\" is equivalent to \"tim\").</li>\r\n    <li>Overlapping instances of the name may appear in the text.</li>\r\n    <li>The input strings <code>text</code> and <code>name</code> consists of English letters only.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nTimsplayinginthehouseofTimwiththetoysofTim\r\nTim\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> Tim occurs 3 times in the text of the secret information. So, the number of terrorists is 3.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "pepciso_27sep",
        "company_id": 533
    }
]