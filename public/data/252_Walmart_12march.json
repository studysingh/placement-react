[
    {
        "id": 797,
        "title": "Minimum Moves to Destination",
        "problem_statement": "<h1>Minimum Moves to Destination</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Raj is a worker in a warehouse. The warehouse is laid out as a 2D coordinate plane with Raj positioned at (0,0) and his goal is to deliver a package to the coordinate (a,b).</p>\r\n<p>In one move Raj can cover a distance d such that 0 &lt;= d &lt;= z (z would be given).</p>\r\n<p>The first move he makes is along the x-axis and after every move, he changes his direction of move alternatively from x to y and y to x. That is, after moving along the x-axis, he will next move along the y-axis, and then back to the x-axis, and so on.</p>\r\n<p>Your task is to determine the minimum number of moves Raj must make to reach exactly at point (a,b).</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line of input contains two space separated integers 'a' and 'b' representing the x and y coordinates of the destination.</p>\r\n<p>Second line of input contains a single integer 'z', representing the maximum distance Raj can cover.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the minimum number of moves Raj needs to make to reach the destination (a,b).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>0 &lt;= a,b &lt;= 10<sup>4</sup></li>\r\n    <li>1 &lt;= z &lt;= 10<sup>4</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 9 11\r\n3\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Move 1: Raj moves along the x-axis from (0, 0) to (3, 0). Value of d = 3 (maximum jump along x-axis).</p>\r\n<p>Move 2: Raj moves along the y-axis from (3, 0) to (3, 3). Value of d = 3 (maximum jump along y-axis).</p>\r\n<p>Move 3: Raj moves along the x-axis from (3, 3) to (6, 3). Value of d = 3 (maximum jump along x-axis).</p>\r\n<p>Move 4: Raj moves along the y-axis from (6, 3) to (6, 6). Value of d = 3 (maximum jump along y-axis).</p>\r\n<p>Move 5: Raj moves along the x-axis from (6, 6) to (9, 6). Value of d = 3 (maximum jump along x-axis).</p>\r\n<p>Move 6: Raj moves along the y-axis from (9, 6) to (9, 9). Value of d = 3 (maximum jump along y-axis).</p>\r\n<p>Move 7: Raj moves along the x-axis from (9, 9) to (9, 9) (x-coordinate already achieved, so no movement here). Value of d = 0 (no move along x-axis since the destination x-coordinate is already reached).</p>\r\n<p>Move 8: Raj moves along the y-axis from (9, 9) to (9, 11). Value of d = 2 (final jump along y-axis to reach the exact destination).</p>\r\n<p>Thus, Raj makes 8 moves in total.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 5 4\r\n2\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Move 1: Raj moves along the x-axis from (0, 0) to (2, 0). Value of d = 2 (maximum jump along x-axis).</p>\r\n<p>Move 2: Raj moves along the y-axis from (2, 0) to (2, 2). Value of d = 2 (maximum jump along y-axis).</p>\r\n<p>Move 3: Raj moves along the x-axis from (2, 2) to (4, 2). Value of d = 2 (maximum jump along x-axis).</p>\r\n<p>Move 4: Raj moves along the y-axis from (4, 2) to (4, 4). Value of d = 2 (maximum jump along y-axis).</p>\r\n<p>Move 5: Raj moves along the x-axis from (4, 4) to (5, 4). Value of d = 1 (only 1 more needed along x-axis to reach x = 5).</p>\r\n<p>Raj makes 5 moves in total to reach the destination.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 798,
        "title": "Ideal Fruit Arrangement",
        "problem_statement": "<h1>Ideal Fruit Arrangement</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string <code>s</code> in which different characters represent different type of fruits. A fruit arrangement <code>y</code> is considered \"ideal\" if it meets two criteria:</p>\r\n<ol>\r\n    <li>The count of each fruit type in <code>y</code> should not exceed its count in <code>s</code>.</li>\r\n    <li>The arrangement <code>y</code> should be the smallest lexicographically among all possible arrangements derived from the fruits in <code>y</code>.</li>\r\n</ol>\r\n<p>Find how many distinct ideal fruit arrangements can be created. Return the result modulo 10^9 + 7.</p>\r\n<p><strong>Note:</strong> <code>s</code> will contain only lowercase alphabets.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input consists of a single line containing the string <code>s</code> where each character represents a type of fruit.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer representing the number of distinct ideal fruit arrangements.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"aba\"\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> For the string <code>s = \"aba\"</code>, the possible ideal arrangements are: (a, b, aa, ab, aab)</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"ab\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> For the string <code>s = \"ab\"</code>, the possible ideal arrangements are: (a, b, ab)</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= s.length() &lt;= 10^2</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 799,
        "title": "Train Station Waiting Time",
        "problem_statement": "<h1>Train Station Waiting Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a busy city, the train station is a hub of constant activity, with trains arriving and departing to connect people across the region. However, the station has only a limited number of platforms, which means that when several trains arrive close together, some must wait for a platform to become free.</p>\r\n<p>Your task is to help the station manager determine the overall delay experienced by all the trains. Each train has a specific arrival and departure time, and the rules are as follows:</p>\r\n<ul>\r\n    <li>When a train arrives, if there is an available platform, it is assigned immediately.</li>\r\n    <li>If all platforms are occupied, the arriving train must wait until a platform becomes free.</li>\r\n    <li>The waiting time for a train is the interval between its scheduled arrival and the time it is finally accommodated on a platform.</li>\r\n</ul>\r\n<p>Write a program that calculates the total waiting time for all trains based on these constraints.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two integers N and P which represent the number of trains and the number of platforms respectively.</p>\r\n<p>The next N lines each contain two space-separated integers a and d representing the arrival time and departure time respectively.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer which represents the total waiting time for all trains.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= P &lt;= 10^4</code></li>\r\n    <li><code>1 &lt;= a, d &lt;= 10^5</code></li>\r\n    <li><code>a &lt; d</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 1\r\n1 5\r\n2 6\r\n4 7\r\nOutput:\r\n5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Train 1 arrives at 1 and departs at 5. It occupies the only platform.</p>\r\n<p>Train 2 arrives at 2. It needs to wait until Train 1 departs at 5. Therefore, the waiting time for Train 2 is 5 - 2 = 3.</p>\r\n<p>Train 3 arrives at 4. It needs to wait until Train 1 departs at 5 and Train 2 departs at 6. Therefore, the waiting time for Train 3 is 6 - 4 = 2.</p>\r\n<p>The total waiting time for all trains is 3 + 2 = 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 2\r\n1 4\r\n2 5\r\n3 8\r\n10 12\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Train 1 arrives at 1 and departs at 4. It occupies the first platform.</p>\r\n<p>Train 2 arrives at 2 and departs at 5. It occupies the second platform.</p>\r\n<p>Train 3 arrives at 3. Both platforms are occupied, so it waits until Train 1 departs at 4. The waiting time for Train 3 is 4 - 3 = 1.</p>\r\n<p>Train 4 arrives at 10. There are no trains at the station, so it does not have to wait.</p>\r\n<p>The total waiting time for all trains is 1.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 800,
        "title": "Mystic Array Operations",
        "problem_statement": "<h1>Mystic Array Operations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the enchanting land of Algoria, where mountains whispered secrets and rivers hummed ancient tunes, lived an old wizard named Elric. Elric was the guardian of the Mystic Array, a magical construct capable of infinite growth. Legends spoke of its origin, crafted by the First Enchanter to test the wisdom and patience of future generations.</p>\r\n<p>One misty morning, Elric found a sealed parchment at his doorstep. The wax bore the insignia of the Oracle of Queries, a mysterious entity known for its perplexing challenges. The message read:</p>\r\n<p>\"Wizard Elric, the time has come to test your command over the Mystic Array. Perform the following spells and unveil the hidden elements that lie within. Only then shall you prove yourself worthy of the Enchanter's Legacy.\"</p>\r\n<p>The parchment listed a series of spells, each described as follows:</p>\r\n<ul>\r\n    <li><strong>T=1: Invoke the Growth Spell</strong> to append an element X to the end of the array.</li>\r\n    <li><strong>T=2: Cast the Replication Charm</strong> to append X copies of the current array to itself.</li>\r\n</ul>\r\n<p>Elric, with his apprentice by his side, began chanting incantations. Each addition and replication expanded the array beyond imagination, its once-empty array now shimmered with numbers, representing the arcane energies of Algoria itself.</p>\r\n<p>Hours passed, and finally, the Oracle appeared as a spectral figure floating above the ground. It spoke with a voice like rustling leaves:</p>\r\n<p>\"You have cast your spells well, Wizard. Now, answer my queries.\"</p>\r\n<p>The Oracle posed Q questions, each demanding the K-th element of the enchanted array. Elric turned to his apprentice and said, \"The challenge lies not in the spells but in understanding their structure. Use logic, patience, and our records to uncover the answers.\"</p>\r\n<p>Your task is to step into the apprentice's shoes and find the K-th element for each query, revealing the secrets the Oracle seeks. Can you solve the mystery of the Mystic Array and help Wizard Elric prove his mastery?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains two space separated integers N denotes the number of operation and Q denotes the number of queries.</p>\r\n<p>The next N line contains two space separated integers each, T and X representing the powerful spell and the appending of the array respectively.</p>\r\n<p>The next lines contain Q space separated integers K1, K2, K3... KN representing the transformed array.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each query print the element present at the Kth index.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= N,Q <= 10^6</code></li>\r\n    <li><code>If T=1 then 1 <= X <= N</code></li>\r\n    <li><code>If T=2 then 1 <= X <= 10^9</code></li>\r\n    <li><code>1 <= Ki <= min(10^9, size(final array))</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 2\r\n1 1\r\n1 2\r\n1 2\r\nOutput:\r\n1\r\n2</code></pre>\r\n<p><strong>Explanation:</strong>\r\nFirst operation <code>1 1</code>: Add element 1 to the end of the array. Array: <code>[1]</code>\r\nSecond operation <code>1 2</code>: Add element 2 to the end of the array. Array: <code>[1, 2]</code>\r\nQueries:\r\n1st element: 1\r\n2nd element: 2</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n1 1\r\n1 2\r\n2 3\r\n1 2 4\r\nOutput:\r\n2\r\n2\r\n1</code></pre>\r\n<p><strong>Explanation:</strong>\r\nFirst operation <code>1 1</code>: Add element 1 to the end of the array. Array: <code>[1]</code>\r\nSecond operation <code>1 2</code>: Add element 2 to the end of the array. Array: <code>[1, 2]</code>\r\nThird operation <code>2 3</code>: Append 3 copies of the current array to the end of the array.\r\nCurrent array before operation: <code>[1, 2]</code>\r\nAppend 3 copies of <code>[1, 2]</code>: <code>[1, 2, 1, 2, 1, 2, 1, 2]</code>\r\nQueries:\r\n1st element: 2\r\n2nd element: 2\r\n4th element: 2\r\n5th element: 1</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 801,
        "title": "Hand Elevation Disparity",
        "problem_statement": "<h1>Hand Elevation Disparity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Professor Elena Ivanovna oversees a history class with N students. Homework assigned for the day comprises M topics. Due to time constraints, each student has only managed to study topics ranging from li to ri, inclusively.</p>\r\n<p>At the start of the lesson, every student positions their hand at 0. The instructor proceeds to inquire about each topic in turn:</p>\r\n<ul>\r\n    <li>If a student has studied topic k, they raise their hand by 1; otherwise, they lower it by 1.</li>\r\n    <li>Each topic may only be queried once by Professor Elena Ivanovna.</li>\r\n</ul>\r\n<p>The task at hand is to determine the maximum disparity between the highest and lowest hand elevations that could result in the class following this survey.</p>\r\n<p>It's crucial to note that a student's hand may descend below 0.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of the input contains two integer N and M representing the number of students and the number of topics respectively.</p>\r\n<p>Each of the next N lines of each test case contain two integers li and ri representing the endpoints of the segment of topics that i-th student has learned.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the maximum disparity between the highest and lowest hand elevations that could result in the class following this survey.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10^8</li>\r\n    <li>1 &lt;= M &lt;= 10^8</li>\r\n    <li>1 &lt;= li &lt;= ri &lt;= M</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 8\r\n2 6\r\n4 8\r\n2 7\r\n1 5\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>We have 4 students and 8 topics.</p>\r\n<p>The first student has studied topics 2, 3, 4, 5, and 6.</p>\r\n<p>The second student has studied topics 4, 5, 6, 7, and 8.</p>\r\n<p>The third student has studied topics 2, 3, 4, 5, 6, and 7.</p>\r\n<p>The fourth student has studied topics 1, 2, 3, 4, and 5.</p>\r\n<p>To maximize the disparity between the highest and lowest hand elevations, we should consider querying topics that lead to the largest difference in hand positions.</p>\r\n<p>Query Topic 5:</p>\r\n<ul>\r\n    <li>First student: +1 (studied)</li>\r\n    <li>Second student: +1 (studied)</li>\r\n    <li>Third student: +1 (studied)</li>\r\n    <li>Fourth student: +1 (studied)</li>\r\n    <li>Hand positions: 1, 1, 1, 1</li>\r\n</ul>\r\n<p>Query Topic 6:</p>\r\n<ul>\r\n    <li>First student: +1 (studied)</li>\r\n    <li>Second student: +1 (studied)</li>\r\n    <li>Third student: +1 (studied)</li>\r\n    <li>Fourth student: -1 (not studied)</li>\r\n    <li>Hand positions: 2, 2, 2, 0</li>\r\n</ul>\r\n<p>Query Topic 7:</p>\r\n<ul>\r\n    <li>First student: -1 (not studied)</li>\r\n    <li>Second student: +1 (studied)</li>\r\n    <li>Third student: +1 (studied)</li>\r\n    <li>Fourth student: -1 (not studied)</li>\r\n    <li>Hand positions: 1, 3, 3, -1</li>\r\n</ul>\r\n<p>Query Topic 8:</p>\r\n<ul>\r\n    <li>First student: -1 (not studied)</li>\r\n    <li>Second student: +1 (studied)</li>\r\n    <li>Third student: -1 (not studied)</li>\r\n    <li>Fourth student: -1 (not studied)</li>\r\n    <li>Hand positions: 0, 4, 2, -2</li>\r\n</ul>\r\n<p>After querying topics 5, 6, 7, and 8, the maximum hand elevation is 4, and the minimum hand elevation is -2. Therefore, the disparity is 4 - (-2) = 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n1 3\r\n2 3\r\n2 2\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>We have 3 students and 3 topics.</p>\r\n<p>The first student has studied topics 1, 2, and 3.</p>\r\n<p>The second student has studied topics 2 and 3.</p>\r\n<p>The third student has studied only topic 2.</p>\r\n<p>To maximize the disparity between the highest and lowest hand elevations, we should consider querying topics that lead to the largest difference in hand positions.</p>\r\n<p>Query Topic 1:</p>\r\n<ul>\r\n    <li>First student: +1 (studied)</li>\r\n    <li>Second student: -1 (not studied)</li>\r\n    <li>Third student: -1 (not studied)</li>\r\n    <li>Hand positions: 1, -1, -1</li>\r\n</ul>\r\n<p>Query Topic 2:</p>\r\n<ul>\r\n    <li>First student: +1 (studied)</li>\r\n    <li>Second student: +1 (studied)</li>\r\n    <li>Third student: +1 (studied)</li>\r\n    <li>Hand positions: 2, 0, 0</li>\r\n</ul>\r\n<p>Query Topic 3:</p>\r\n<ul>\r\n    <li>First student: +1 (studied)</li>\r\n    <li>Second student: +1 (studied)</li>\r\n    <li>Third student: -1 (not studied)</li>\r\n    <li>Hand positions: 3, 1, -1</li>\r\n</ul>\r\n<p>After querying all the topics, the maximum hand elevation is 3, and the minimum hand elevation is -1. Therefore, the disparity is 3 - (-1) = 4.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 802,
        "title": "Resource Allocation Dilemma",
        "problem_statement": "<h1>Resource Allocation Dilemma</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a distant realm, nested among misty valleys and towering peaks, lay the kingdom of Arithmos. Amidst its verdant landscapes and ancient castles, a perplexing challenge befell the kingdom's ruler, King Aric.</p>\r\n<p>Concerned with the equitable distribution of resources among his subjects, King Aric sought the counsel of Professor Mathias, a renowned mathematician whose wisdom was legendary throughout the land.</p>\r\n<p>Can k positive integers (a1, a2, ... ak) summing up to N and having a gcd greater than 1 be found, as suggested by Professor Mathias for the kingdom's resource allocation dilemma?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains two space separated integers, N and K.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print \"YES\" or \"NO\"</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N, K &lt;= 10^8</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 4 3\r\nOutput: NO</code></pre>\r\n<p><strong>Explanation:</strong> No three integers satisfy the given condition.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 4 2\r\nOutput: YES</code></pre>\r\n<p><strong>Explanation:</strong> a1 = 2, a2 = 2 satisfy the condition since a1 + a2 = 4 and gcd(a1, a2) = gcd(2, 2) = 2 &gt; 1.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 803,
        "title": "Sweet Shop Scheme",
        "problem_statement": "<h1>Sweet Shop Scheme</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Ram wants to buy N sweets (S1, S2, S3, S4, ..., Sn) from a shop.</p>\r\n<p>The shopkeeper is running a scheme:</p>\r\n<ul>\r\n    <li>For the first 'l' sweets, the price of the i-th sweet (1-indexed, i from 1 to l) will be 'x-i+1'. The value of 'l' can be chosen such that 0 &lt;= l &lt;= min(N,x).</li>\r\n    <li>For the remaining 'N-l' sweets, the price will be 'y'.</li>\r\n</ul>\r\n<p><strong>Note:</strong> If l = 0, the price of all N sweets will be 'y'.</p>\r\n<p>The values of 'N', 'x', and 'y' are fixed. The shopkeeper can choose the value of 'l' to maximize the total cost of buying all N sweets.</p>\r\n<p>Help the shopkeeper determine the value of 'l' that maximizes the overall price of the N sweets.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains a single integer N representing the total number of sweets.</p>\r\n<p>The second line contains two integers 'x' and 'y'.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the value of 'l' that maximizes the total price, followed by the maximum possible total price of N sweets in a single line separated by space.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10^3</li>\r\n    <li>1 &lt;= x, y &lt;= 10^8</li>\r\n    <li>0 &lt;= l &lt;= min(N,x)</li>\r\n    <li>1 &lt;= i &lt;= l (This constraint refers to the index 'i' used in the price formula 'x-i+1' for the first 'l' sweets.)</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n5 1\r\nOutput:\r\n4 14</code></pre>\r\n<p><strong>Explanation:</strong> Evaluating different values of l:</p>\r\n<ul>\r\n    <li>For l=0: Price for all 4 sweets = y. Total price = 1+1+1+1 = 4</li>\r\n    <li>For l=1: Price for s1 = x-1+1 = 5. Price for remaining 3 sweets = y = 1. Total price = 5+1+1+1 = 8</li>\r\n    <li>For l=2: Price for s1 = x-1+1 = 5. Price for s2 = x-2+1 = 4. Price for remaining 2 sweets = y = 1. Total price = 5+4+1+1 = 11</li>\r\n    <li>For l=3: Price for s1 = x-1+1 = 5. Price for s2 = x-2+1 = 4. Price for s3 = x-3+1 = 3. Price for remaining 1 sweet = y = 1. Total price = 5+4+3+1 = 13</li>\r\n    <li>For l=4: Price for s1 = x-1+1 = 5. Price for s2 = x-2+1 = 4. Price for s3 = x-3+1 = 3. Price for s4 = x-4+1 = 2. Total price = 5+4+3+2 = 14</li>\r\n</ul>\r\n<p>Therefore, the maximum price is 14 for l=4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2 4\r\nOutput:\r\n0 8</code></pre>\r\n<p><strong>Explanation:</strong> 0 &lt;= l &lt;= 2</p>\r\n<ul>\r\n    <li>For l=0: Price for s1 and s2 = 'y' = 4. Total price = 4+4 = 8</li>\r\n    <li>For l=1: Price for s1 = x-1+1 = 2. Price for s2 = y = 4. Total price = 2+4 = 6</li>\r\n    <li>For l=2: Price for s1 = x-1+1 = 2. Price for s2 = x-2+1 = 2-2+1 = 1. Total price = 2+1 = 3</li>\r\n</ul>\r\n<p>Therefore, maximum total price is 8 for l=0.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 804,
        "title": "Amusement Park Ride",
        "problem_statement": "<h1>Amusement Park Ride</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are managing an amusement park ride that operates in rounds. Each round requires a specific amount of energy calculated as the number of passengers multiplied by the energy required per passenger. The ride needs energy to go up but does not need energy to come down.</p>\r\n<p>You are given the initial energy available, the number of passengers initially on the ride, and the energy required per passenger. As the ride starts, one passenger completes their ride and leaves after each round. The ride can only complete a round if there is enough energy to meet the requirement for that round. If at any point there is insufficient energy to complete the next round, the ride stops.</p>\r\n<p>Your task is to determine whether all passengers can complete their ride or not. Return true if all passengers are able to complete their ride, otherwise return false.</p>\r\n<p><strong>Note:</strong> When all the passengers leave the ride one by one after each round, it is said that all passengers have complete their ride.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line of input consists of an integer representing initial energy available for the ride.</p>\r\n<p>Second line consists of an integer representing the number of passengers initially in the ride.</p>\r\n<p>Third line consists of an integer representing the energy required per passenger.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return true if all passengers are able to complete their ride, otherwise false.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= initial energy <= 135</code></li>\r\n    <li><code>1 <= no. of passenger <= 15</code></li>\r\n    <li><code>1 <= energy requires per person <= 70</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n35\r\n7\r\n2\r\nOutput:\r\nfalse</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>At round 1, the Energy is 35 and Passengers are 7.<br>The Energy Required for this round is 2*7 = 14<br>Passengers Remaining: 7 - 1 = 6</p>\r\n<p>At round 2, the Energy is 35-14 = 21 and Passengers are 6.<br>The Energy Required for this round is 2*6 = 12<br>Passengers Remaining: 6 - 1 = 5</p>\r\n<p>At round 3, the Energy is 21-12 = 9 and Passengers are 5.<br>The Energy Required for this round is 2*5 = 10. Here we don't have enough energy to complete this round. So, the ride stops here.<br>Not all passengers were able to complete their ride.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n46\r\n4\r\n3\r\nOutput:\r\ntrue</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>At round 1, the initial Energy is 46 and Passengers are 4.<br>The Energy Required for this round is 4 (passengers) * 3 (energy per passenger) = 12<br>Passengers Remaining: 4 - 1 = 3.</p>\r\n<p>At round 2, the Energy is 46 - 12 = 34 and Passengers are 3.<br>The Energy Required for this round is 3*3 = 9<br>Passengers Remaining: 3 - 1 = 2.</p>\r\n<p>At round 3, the Energy is 34 - 9 = 25 and Passengers are 2.<br>The Energy Required for this round is 2*3 = 6<br>Passengers Remaining: 2 - 1 = 1.</p>\r\n<p>At round 4, the Energy is 25 - 6 = 19 and Passengers are 1.<br>The Energy Required for this round is 1*3 = 3<br>Passengers Remaining: 1 - 1 = 0.</p>\r\n<p>Result: All passengers completed their ride. The output is true.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 805,
        "title": "Number Sequence Analysis",
        "problem_statement": "<h1>Number Sequence Analysis</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are tasked with solving a problem that involves filtering, computing, and finding subsequences based on specific criteria. You are asked to take numbers from 1 to n(exclusive) and find out the numbers which are divisible by 6 or 7 and add their digits to match with an integer k, if matched find the min number to be added so that these numbers become prime and store it as a sequence.</p>\r\n<p>You are then supposed to find a subsequence such that its sum is equal to x. If the length of the subsequence is again a prime number, find the middle element in that sequence.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer n indicating the total number of integers to be considered.</p>\r\n<p>The second line contains an integer k indicating the sum of digits to be matched.</p>\r\n<p>The third line contains an integer x indicating the target sum for subsequences.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>In the first line display a valid subsequence sorted lexicographically.</p>\r\n<p>In the second line, display the middle element if the length of the subsequence is a prime number .Do the same for all valid subsequences, if not prime then print 0 and if no subsequence found print -1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 <= n, x <= 2*10^2</code></li>\r\n    <li><code>0 <= k <= 45</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n30\r\n3\r\n1\r\nOutput:\r\n1\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> The numbers are 1 to 30.The numbers divisible by 6 or 7 upto 30(excluding) are - 6,12,18,24,7,14,21,28</p>\r\n<p>The numbers whose digit sum =3 are - 12,21</p>\r\n<p>Min number to be added so that these numbers become prime is - 1,2 as 12+1=13=prime and 21+ 2 = 23 = prime</p>\r\n<p>The numbers are 1,2 and required subsequence sum=1, hence only 1 satisfies the condition.</p>\r\n<p>Since the length of the sequence is 1, print 0</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n50\r\n6\r\n5\r\nOutput:\r\n5\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> We start by considering numbers from 1 to 50 (exclusive). The numbers that are divisible by 6 or 7 are:</p>\r\n<p>6, 12, 18, 24, 30, 36, 42, 48 (divisible by 6)</p>\r\n<p>7, 14, 21, 28, 35, 49 (divisible by 7)</p>\r\n<p>Filter by Sum of Digits: Next, we check if the sum of the digits of these numbers equals 6:</p>\r\n<p>6 --> Sum = 6</p>\r\n<p>12 --> Sum = 1+2 = 3</p>\r\n<p>18 --> Sum = 1+8 = 9</p>\r\n<p>24 --> Sum = 2+4 = 6</p>\r\n<p>30 --> Sum = 3+0 = 3</p>\r\n<p>36 --> Sum = 3+6 = 9</p>\r\n<p>42 --> Sum = 4+2 = 6</p>\r\n<p>48 --> Sum = 4+8 = 12</p>\r\n<p>7 --> Sum = 7</p>\r\n<p>14 --> Sum = 1+4 = 5</p>\r\n<p>21 --> Sum = 2+1 = 3</p>\r\n<p>28 --> Sum = 2+8 = 10</p>\r\n<p>35 --> Sum = 3+5 = 8</p>\r\n<p>Min number to be added so that these numbers become prime is - 1,2 as 12+1=13=prime and 21+ 2 = 23 = prime</p>\r\n<p>The numbers are 1,2 and required subsequence sum=1, hence only 1 satisfies the condition.</p>\r\n<p>Since the length of the sequence is 1, print 0</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 806,
        "title": "Sequence Termination",
        "problem_statement": "<h1>Sequence Termination</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>We've devised a sequence for any integer N, where the next term is determined by the function:</p>\r\n<ul>\r\n    <li><code>a(n+1) = f(a(n)) = 3 * a(n) + 3</code> if <code>a(n)</code> is odd</li>\r\n    <li><code>a(n+1) = f(a(n)) = a(n)/2</code> if <code>a(n)</code> is even</li>\r\n</ul>\r\n<p>The sequence starts with <code>a(0) = N</code>. The sequence terminates if for some element <code>a(i)</code>, its value becomes <code>1</code>.</p>\r\n<p>Given any integer N, can you predict if the sequence terminates or not?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>A single integer representing N.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print \"YES\" if the sequence terminates otherwise, print \"NO\". Note: The output is case-sensitive.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 2\r\nOutput: YES</code></pre>\r\n<p><strong>Explanation:</strong> For N=2, the sequence is <code>a(0)=2</code> (even) &rarr; <code>a(1)=2/2=1</code>. The sequence is <code>2, 1</code>. Since <code>a(1)</code> is <code>1</code>, the sequence terminates.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 3\r\nOutput: NO</code></pre>\r\n<p><strong>Explanation:</strong> For N=3, the sequence is <code>a(0)=3</code> (odd) &rarr; <code>a(1)=3*3+3=12</code>. <code>a(1)=12</code> (even) &rarr; <code>a(2)=12/2=6</code>. <code>a(2)=6</code> (even) &rarr; <code>a(3)=6/2=3</code>. <code>a(3)=3</code> (odd) &rarr; <code>a(4)=3*3+3=12</code>. The sequence becomes <code>3, 12, 6, 3, 12, 6, ...</code>, entering a cycle and never reaching <code>1</code>. Thus, it is an infinite sequence.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: N = 4\r\nOutput: YES</code></pre>\r\n<p><strong>Explanation:</strong> For N=4, the sequence is <code>a(0)=4</code> (even) &rarr; <code>a(1)=4/2=2</code>. <code>a(1)=2</code> (even) &rarr; <code>a(2)=2/2=1</code>. The sequence is <code>4, 2, 1</code>. Since <code>a(2)</code> is <code>1</code>, the sequence terminates.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 807,
        "title": "Optimize Final Participants",
        "problem_statement": "<h1>Optimize Final Participants</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alex is organizing a coding challenge and needs to determine the best group size to increase the number of participants in the final round. There are N clubs, each competing, and each club will only join if the total number of its members can be evenly divided by the group size.</p>\r\n<p>The challenge consists of two stages: preliminary and final. In the initial stage, clubs can form any number of groups, but only one group from each club, according to the group size, can advance to the final round. To make the event engaging, at least two clubs must participate. Your task is to find the group size that will produce the most participants in the final round while ensuring that at least two clubs can compete.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer N, the number of clubs.</p>\r\n<p>The second line contains N integers separated by spaces, where each integer represents the number of members in each club.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single integer represents the maximum number of participants in the finals.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; N &le; 100</li>\r\n    <li>1 &le; club_size[i] &le; 1000</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n12 24 36 48 60\r\nOutput: 180</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Group Size 1:</strong><br>All clubs can form teams of size 1.<br>Number of participants = 12/1+24/1+36/1+48/1+60/1 = 12+24+36+48+60 = 180</p>\r\n<p><strong>Group Size 2:</strong><br>All clubs can form teams of size 2.<br>Number of participants = 12/2+24/2+36/2+48/2+60/2 = 6+12+18+24+30 = 90</p>\r\n<p><strong>Group Size 3:</strong><br>All clubs can form teams of size 3.<br>Number of participants = 12/3+24/3+36/3+48/3+60/3 = 4+8+12+16+20 = 60</p>\r\n<p><strong>Group Size 4:</strong><br>All clubs can form teams of size 4.<br>Number of participants = 12/4+24/4+36/4+48/4+60/4 = 3+6+9+12+15 = 45</p>\r\n<p>The group size of 1 gives the maximum number of participants, 180.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n25 35 50 75 100 125\r\nOutput: 410</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Group Size 1:</strong><br>All clubs can form teams of size 1.<br>Number of participants = 25/1+35/1+50/1+75/1+100/1+125/1<br>Calculation: 25+35+50+75+100+125 = 410.</p>\r\n<p><strong>Group Size 5:</strong><br>All clubs can form teams of size 5.<br>Number of participants = 25/5+35/5+50/5+75/5+100/5+125/5<br>Calculation: 5+7+10+15+20+25 = 82</p>\r\n<p><strong>Group Size 10:</strong><br>All clubs can form teams of size 10.<br>Number of participants = 25/10+35/10+50/10+75/10+100/10+125/10<br>Calculation: 2+3+5+7+10+12 = 39.</p>\r\n<p><strong>Group Size 25:</strong><br>All clubs can form teams of size 25.<br>Number of participants = 25/25+35/25+50/25+75/25+100/25+125/25<br>Calculation: 1+1.4+2+3+4+5 = 16.4 (integer part = 16)</p>\r\n<p><strong>Group Size 35:</strong><br>Clubs with 35, 75, 100, and 125 members can form teams of size 35.<br>Number of participants = 35/35+75/35+100/35+125/35<br>Calculation: 1+2.14+2.85+3.57 = 9.56 (integer part = 9)</p>\r\n<p><strong>Group Size 50:</strong><br>Clubs with 50 and 100 members can form teams of size 50.<br>Number of participants = 50/50+100/50<br>Calculation: 1+2 = 3</p>\r\n<p>Among these, the group size of 1 has the highest number of participants, 410.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 808,
        "title": "Ordered Tree",
        "problem_statement": "<h1>Ordered Tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>We are given a binary tree's preorder traversal and tasked with checking if the tree can be rearranged (by swapping node values) to become an ordered tree, where:</p>\r\n<ol>\r\n    <li>Each node's value is greater than both its left and right child.</li>\r\n    <li>If the tree cannot be rearranged to satisfy this condition, the output is false.</li>\r\n</ol>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer 'N' - the number of nodes in the binary tree.</p>\r\n<p>The second line contains 'N' space-separated integers representing the node values in preorder traversal of the binary tree. The value -1 represents a null node, which should be ignored.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output a Boolean value true if at least one such arrangement is possible to make the tree ordered tree. Else false.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 31</code>, where 'N' is the number of nodes in the binary tree.</li>\r\n    <li><code>1 &lt;= node[i] &lt;= 16</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n9\r\n1 6 7 -1 -1 2 -1 -1 -1\r\nOutput:\r\ntrue</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The binary tree will be visualised like below where null nodes are shown by -1:</p>\r\n<pre><code class='language-text'>    9\r\n   / \\\r\n  6   1\r\n / \\ / \\\r\n7   2 -1 -1\r\n/ \\\r\n-1 -1</code></pre>\r\n<p>In this tree:</p>\r\n<p>Node 1 has children 6 (left) and 7 (right), which is greater than 1.</p>\r\n<p>Node 6 has children 7 (left) and 2 (right), with 7 being greater than 6.</p>\r\n<p>The tree does not satisfy the ordered condition, as node 1 and 6 are not greater than both its children.</p>\r\n<p>One possible rearrangement of the node value is shown below to make it ordered tree.</p>\r\n<pre><code class='language-text'>    9\r\n   / \\\r\n  7   6\r\n / \\ / \\\r\n2   1 -1 -1\r\n/ \\\r\n-1 -1</code></pre>\r\n<p>Now, the tree satisfies the condition that each node is greater than its children.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n11\r\n3 4 -1 -1 6 2 -1 9 -1 -1\r\nOutput:\r\ntrue</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The Given binary tree will be visualised like below where null nodes are shown by -1:</p>\r\n<pre><code class='language-text'>    3\r\n   / \\\r\n  4   6\r\n / \\ / \\\r\n-1 12 9 -1\r\n/ \\\r\n-1 -1</code></pre>\r\n<p>In this tree:</p>\r\n<p>Node 3 has children 4 (left) and 6 (right), which are both greater than 3.</p>\r\n<p>Node 6 has children 2 (left) and 9 (right), with 9 being greater than 6.</p>\r\n<p>The tree does not satisfy the ordered condition, as node 3 and 6 are not greater than both its children.</p>\r\n<p>One possible rearrangement of the node value is shown below to make it ordered tree.</p>\r\n<pre><code class='language-text'>    9\r\n   / \\\r\n  6   4\r\n / \\ / \\\r\n-1 12 3 -1\r\n/ \\\r\n-1 -1</code></pre>\r\n<p>Now, the tree satisfies the condition that each node is greater than its children.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 809,
        "title": "Great Queen",
        "problem_statement": "<h1>Great Queen</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A king has ordered all N women in his kingdom to stand in a row. Some women stand facing the right direction, and some stand facing the left direction, and their directions are depicted using a string K. The king decides to choose one woman from the row to be the queen, and he needs your help in doing so, based on the following criteria:</p>\r\n<ol>\r\n    <li>Any woman can be chosen to be queen. Once the queen is chosen, all other women must change their direction and stand in the row facing the queen.</li>\r\n    <li>The best queen will be the one who will cause the least number of women to change their direction.</li>\r\n</ol>\r\n<p>Find out the position of the best queen and the number of women who will have to change their position to face the best queen.</p>\r\n<p>Note: Each character in string K is either 'R' or 'L'.</p>\r\n<p>If multiple positions exists then print the one which has smallest position.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer N, the number of women in the row.</p>\r\n<p>The second line contains a string K of length N, where 'R' depicts right and 'L' depicts left.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output should display two space-separated positive integers in a single line:</p>\r\n<ul>\r\n    <li>The position of the best queen (index starting from 1)</li>\r\n    <li>The number of women who will have to change their position to face the best queen.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 6, K = [initial K not explicitly provided in explanation]\r\nOutput: 6 1</code></pre>\r\n<p><strong>Explanation:</strong> The possible positions for the queen are at indices 1, 2, 3, 4, 5 and 6 in the row.</p>\r\n<ul>\r\n    <li>If the queen is placed at position 1: 4 women need to change her direction to face the queen, as the women at positions 2, 3, 5 and 6 are facing right.</li>\r\n    <li>If the queen is placed at position 2: 3 women need to change her direction to face the queen, as the women at positions 3, 5 and 6 are facing right.</li>\r\n    <li>If the queen is placed at position 3: 2 women need to change her direction to face the queen, as the women at positions 5 and 6 are facing right.</li>\r\n    <li>If the queen is placed at position 4: 2 women need to change her direction to face the queen, as the women at positions 5 and 6 are facing right.</li>\r\n    <li>If the queen is placed at position 5: 2 women need to change her direction to face the queen, as the woman at position 6 is facing right while the woman at position 1 is facing left.</li>\r\n    <li>If the queen is placed at position 6: 1 woman needs to change her direction to face the queen, as the woman at position 4 is facing left.</li>\r\n</ul>\r\n<p>Hence, the best position for the queen is at index 6, where the total number of changes required is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 3, K = LLL\r\nOutput: 1 0</code></pre>\r\n<p><strong>Explanation:</strong> The possible positions for the queen are at indices 1, 2, and 3 in the row.</p>\r\n<ul>\r\n    <li>If the queen is placed at position 1: no women need to change their direction to face the queen (as all women are 'L' and need to face left). So, the total number of changes required is 0.</li>\r\n    <li>If the queen is placed at position 2: 1 woman needs to change her direction. The woman at position 1 is 'L' and needs to face left (no change). The woman at position 3 is 'L' but needs to face right (change).</li>\r\n    <li>If the queen is placed at position 3: 0 women need to change their direction (as all women are 'L' and need to face left). So, the total number of changes required is 0.</li>\r\n</ul>\r\n<p>Hence, the best position for the queen is at index 1, where the total number of changes required is 0 (since both positions 1 and 3 yield 0 changes, and the smallest position is chosen).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N is an integer representing the number of women in the row.</li>\r\n    <li>K is a string of length N.</li>\r\n    <li>Each character in string K is either 'R' or 'L'.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 810,
        "title": "Widget Management",
        "problem_statement": "<h1>Widget Management</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A busy factory operates under a constantly shifting schedule, where the daily demand for widgets changes from one day to the next. On day i (where i ranges from 1 to N), the factory needs exactly R<sub>i</sub> widgets to keep production running smoothly. To meet these fluctuating requirements, the factory has a couple of strategies at its disposal.</p>\r\n<p>The first option is to produce new widgets on the spot, each at a cost of P. However, producing new widgets every day can be expensive, so the factory has also invested in a maintenance system that allows used widgets to be refurbished and reused.</p>\r\n<p>There are two types of maintenance available:</p>\r\n<ul>\r\n    <li><strong>1. Quick Maintenance:</strong> This option promises a fast turnaround. A widget sent for quick maintenance takes m days to be ready for use again, and each widget processed this way incurs a cost of F. This option is appealing when the factory needs widgets returned quickly, but the higher cost per widget can add up over time.</li>\r\n    <li><strong>2. Slow Maintenance:</strong> Alternatively, widgets can be sent for slow maintenance, which takes Q days (with Q being greater than m) to return a widget to service. The cost for slow maintenance is only S per widget, which is lower than F. This option is beneficial when there is some flexibility in the schedule and the factory can afford to wait a bit longer for the widgets to be refurbished.</li>\r\n</ul>\r\n<p>At the end of each day, the factory must make several critical decisions. The management team needs to determine:</p>\r\n<ul>\r\n    <li>How many new widgets to produce,</li>\r\n    <li>How many used widgets to send for quick maintenance,</li>\r\n    <li>How many to send for slow maintenance,</li>\r\n    <li>And how many widgets to hold in reserve for future use.</li>\r\n</ul>\r\n<p>The overarching goal is to ensure that the sum of newly produced widgets and those returned from maintenance exactly meets the daily demand of R<sub>i</sub> widgets on each day i. Every widget used on any given day must eventually be cycled back into maintenance if it is to be used again in the future. This creates a complex scheduling puzzle, as the decision on one day can affect widget availability and maintenance scheduling in subsequent days.</p>\r\n<p>Your challenge is to design an algorithm that minimizes the total cost incurred over N days. The algorithm must carefully balance immediate production costs with the longer-term savings offered by the two types of maintenance. By strategically planning production, quick maintenance, and slow maintenance, you need to ensure that the factory meets its daily widget requirements at the lowest possible cost.</p>\r\n<p>Can you develop an efficient algorithm that optimally schedules widget production and maintenance, thereby reducing the overall expenses for the factory over the course of N days?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains a positive integer N, representing the number of days.</p>\r\n<p>The second line contains N integers representing the number of daily widgets needed.</p>\r\n<p>The third line contains five positive integers P,M,F,Q,S representing:</p>\r\n<ul>\r\n    <li>P: Cost of producing a new widget.</li>\r\n    <li>M: Number of days for quick maintenance.</li>\r\n    <li>F: Cost of quick maintenance per widget.</li>\r\n    <li>Q: Number of days for slow maintenance.</li>\r\n    <li>S: Cost of slow maintenance per widget.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output a single integer representing the minimum total cost of managing the widgets over N days.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 2000</li>\r\n    <li>1 &le; R<sub>i</sub> &le; 10<sup>7</sup></li>\r\n    <li>1 &le; P, M, F, Q, S &le; 10<sup>4</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2 5\r\n8 1 2 3 1\r\nOutput:\r\n44</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Day 1:</p>\r\n<p>The restaurant needs 2 widgets.</p>\r\n<p>It buys 2 new widgets at a cost of 2 * 8 = 16.</p>\r\n<p>The 2 used widgets are then sent to quick manufacturing, which will return them on Day 2.</p>\r\n<p>Day 2:</p>\r\n<p>The restaurant needs 5 widgets.</p>\r\n<p>It receives the 2 widgets from quick manufacturing, costing 2 * 2 = 4.</p>\r\n<p>It buys 3 more new widgets at a cost of 3 * 8 = 24.</p>\r\n<p>Total Cost Calculation:</p>\r\n<p>Day 1 cost: 16 (new widgets)</p>\r\n<p>Day 2 cost: 4 (quick manufacturing) + 24 (new widgets)</p>\r\n<p>Total cost: 16 + 4 + 24 = 44</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3 5 1\r\n8 1 2 3 1\r\nOutput:\r\n48</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Day 1:</p>\r\n<p>The restaurant needs 3 widgets.</p>\r\n<p>It buys 3 new widgets at a cost of 3 * 8 = 24.</p>\r\n<p>The 3 used widgets are then sent to quick manufacturing, which will return them on Day 2.</p>\r\n<p>Day 2:</p>\r\n<p>The restaurant needs 5 widgets.</p>\r\n<p>It receives the 3 widgets from quick manufacturing, costing 3 * 2 = 6.</p>\r\n<p>It buys 2 more new widgets at a cost of 2 * 8 = 16.</p>\r\n<p>One of the widget is sent to quick manufacturing, which will return them on Day 3.</p>\r\n<p>Day 3:</p>\r\n<p>The restaurant needs 1 widget.</p>\r\n<p>It receives the 1 widget from quick manufacturing, costing 1 * 2 = 2.</p>\r\n<p>Total Cost Calculation:</p>\r\n<p>Day 1 cost: 24 (new widgets)</p>\r\n<p>Day 2 cost: 6 (quick manufacturing) + 16 (new widgets)</p>\r\n<p>Day 3 cost: 2 (quick manufacturing)</p>\r\n<p>Total cost: 24 + 6 + 16 + 2 = 48</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 811,
        "title": "Momo Purchase",
        "problem_statement": "<h1>Momo Purchase</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A shop sells Momo and you may choose to buy the Momos according to the pricing scheme given below:</p>\r\n<ul>\r\n    <li>The cost of one Momo for rupees X</li>\r\n    <li>The cost of three Momos for rupees Y</li>\r\n</ul>\r\n<p>How much rupees do you need to pay to obtain exactly N Momo?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Input:</strong> The input consists of three space separated integers X, Y and N which represent the price of 1 Momo, price of 3 Momos and the number of Momos you are required to buy.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p><strong>Output:</strong> Print the amount you need to pay as a single integer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; X &le; Y &le; 10<sup>9</sup></li>\r\n    <li>1 &le; N &le; 10<sup>9</sup></li>\r\n    <li>All values in input are integers.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 10 25 10\r\nOutput: 85</code></pre>\r\n<p><strong>Explanation:</strong> You can buy three Momos for Rs 25 for three times and one Momo for Rs 10 for one time, and you will obtain exactly 10 Momo for a total of Rs 85. You cannot obtain exactly 10 Momo for a lower cost, so the answer is Rs 85</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 10 40 10\r\nOutput: 100</code></pre>\r\n<p><strong>Explanation:</strong> You can buy 10 Momo for Rs 10 each, and you will obtain exactly 10 Momo for a total of Rs 10 * 10 = 100. You cannot obtain exactly 10 Momo for a lower cost, so the answer is Rs 100</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 812,
        "title": "Minimize Sensitivity Score Difference",
        "problem_statement": "<h1>Minimize Sensitivity Score Difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are developing a secure document storage system. Each document has a unique identifier and a sensitivity score.</p>\r\n<p>To maximize security, you need to distribute the documents across multiple servers such that the sum of sensitivity scores on each server is balanced. Use appropriate algorithmic concepts to store and manage document distributions.</p>\r\n<p>Given a list of documents with their sensitivity scores and the number of servers, distribute the documents such that the maximum difference in sensitivity scores between any two servers is minimized.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two space separated integer N, representing the number of documents and integer K, representing the number of servers.</p>\r\n<p>The next N lines contain the list of tuples, where each tuple contains two elements: An integer id representing the unique identifier of the document and, An integer sensitivity representing the sensitivity score of the document</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A list of lists, where each inner list contains the identifiers of the documents assigned to that server. The outer list should contain K inner lists (one for each server).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^5</code></li>\r\n    <li><code>0 &lt; K &lt;= N</code></li>\r\n    <li><code>0 &lt;= Sensitivity score of each document &lt;= 10^4</code></li>\r\n    <li>Sensitivity score of each document is unique.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 3\r\n1 10\r\n2 20\r\n3 30\r\n4 40\r\n5 50\r\nOutput:\r\n1 4\r\n2 3\r\n5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>You have 5 documents and 3 servers. Each document has an identifier and a sensitivity score.</p>\r\n<ul>\r\n    <li>Document 1: Sensitivity = 10</li>\r\n    <li>Document 2: Sensitivity = 20</li>\r\n    <li>Document 3: Sensitivity = 30</li>\r\n    <li>Document 4: Sensitivity = 40</li>\r\n    <li>Document 5: Sensitivity = 50</li>\r\n</ul>\r\n<p>Sensitivity score:</p>\r\n<ul>\r\n    <li>Server 1: [1,4] = 10 + 40 = 50</li>\r\n    <li>Server 2: [2,3] = 20 + 30 = 50</li>\r\n    <li>Server 3: [5] = 50</li>\r\n</ul>\r\n<p>The sensitive score difference between any two servers is 0.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 3\r\n1 20\r\n2 30\r\n3 10\r\n4 50\r\n5 40\r\n6 60\r\nOutput:\r\n1 4\r\n2 5\r\n3 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>You have 6 documents and 3 servers. Each document has an identifier and a sensitivity score.</p>\r\n<ul>\r\n    <li>Document 1: Sensitivity = 20</li>\r\n    <li>Document 2: Sensitivity = 30</li>\r\n    <li>Document 3: Sensitivity = 10</li>\r\n    <li>Document 4: Sensitivity = 50</li>\r\n    <li>Document 5: Sensitivity = 40</li>\r\n    <li>Document 6: Sensitivity = 60</li>\r\n</ul>\r\n<p>Sensitivity score:</p>\r\n<ul>\r\n    <li>Server 1: [1,4] = 20 + 50 = 70</li>\r\n    <li>Server 2: [2,5] = 30 + 40 = 70</li>\r\n    <li>Server 3: [3,6] = 10 + 60 = 70</li>\r\n</ul>\r\n<p>The sensitive score difference between any two servers is 0.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 813,
        "title": "Object Store",
        "problem_statement": "<h1>Object Store</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a family there are N members each have a capacity of Ci units to buy anything.</p>\r\n<p>In a store there are M objects. Each of which have some weight Wi and its price Pi printed on it.</p>\r\n<p>Each of the members go to the store and can buy those items whose price is lower than or equals their buying capacity and store that bought object in a bag.</p>\r\n<p>Find the maximum weight of each of the bags collected by all N members individually.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first line of input contains two integers N and M where N is the number of members in house and M is the number of objects in the store.</p>\r\n<p>The second line of input contain N space-separated integers (C1, C2, C3, C4, ..., CN) representing their buying capacities.</p>\r\n<p>The next M lines of input contain two integers (Pi, Wi), where Pi is the price of the Ith objects and Wi is the weight of the Ith objects:</p>\r\n<pre><code class='language-text'>P0 W0\r\nP1 W1\r\n...\r\nP(M-1) W(M-1)</code></pre>\r\n\r\n<h3>Output Format</h3>\r\n<p>Print N space-separated integers representing the maximum weight of each of the bags collected by all N members individually.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 6\r\n1 2 3 4 5\r\n3 5\r\n7 8\r\n2 4\r\n5 8\r\n9 8\r\n6 8\r\nOutput:\r\n0 4 9 9 17</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first member cannot buy any item because it has capacity of 1.</p>\r\n<p>The second member can buy item 3 which gives the weight of the bag as 4.</p>\r\n<p>The third member can buy items 1 and 3 which gives the weight of the bag as 5+4 = 9.</p>\r\n<p>The fourth member can buy items 1 and 3 which gives the weight of the bag as 5+4 = 9.</p>\r\n<p>The fifth member can buy items 1, 3 and 4 which gives the weight of the bag as 5+4+8 = 17.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 4\r\n1 3 5 2 4\r\n0 1\r\n4 2\r\n2 8\r\n9 4\r\nOutput:\r\n1 9 11 9 11</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first member can buy item 1 which gives the weight of the bag as 1 = 1.</p>\r\n<p>The second member can buy item 1 and 3 which gives the weight of the bag as 1+8 = 9.</p>\r\n<p>The third member can buy item 1, 2 and 3 which gives the weight of the bag as 1+2+8 = 11.</p>\r\n<p>The fourth member can buy item 1 and 3 which gives the weight of the bag as 1+8 = 9.</p>\r\n<p>The fifth member can buy item 1, 2 and 3 which gives the weight of the bag as 1+2+8 = 11.</p>\r\n<p>So the respective value of each bag is 1 9 11 9 11 respectively</p>\r\n<p>Like for 3rd person weight of 1st item =1, weight of 2nd item =2 and weight of 3rd item =8 when added gives 11.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>N &lt;= 10^8</code></li>\r\n    <li><code>M &lt;= 10^8</code></li>\r\n    <li><code>0 &lt;= Ci &lt;= 10^8</code></li>\r\n    <li><code>0 &lt;= Pi, Wi &lt;= 10^8</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 814,
        "title": "Minimum Stops",
        "problem_statement": "<h1>Minimum Stops</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're going on a road trip in an electric car. The car's battery starts fully charged with a capacity of C units and a time limit of T units, and you have a certain amount of time to reach your destination.</p>\r\n<p>There are charging stations along the way, but they might be busy. If a station is busy (value=0), you can't charge there and have to wait or move on to the next one. If it's not busy (value>0), you can charge your car there.</p>\r\n<p>Every time you stop to charge, it takes extra time which adds an overhead of Y time where Y is the position where it stopped to charge. This extra time is equal to the number of stops you've made so far.</p>\r\n<p>Your goal is to make as few stops as possible, while making sure you reach your destination within the time limit. You also have to consider that some charging stations might be busy.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains a single integer number representing the total distance to be covered.</p>\r\n<p>The second line contains a single integer number representing the battery capacity of your EV.</p>\r\n<p>The third line contains a single integer number indicating the total number of charging stations along the way(N).</p>\r\n<p>The fourth line contains a single integer number representing the time limit to reach the destination.</p>\r\n<p>The next N lines is a two space-separated tuple containing the position and the capacity of the charging station.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>In the first line display the number of times your EV stops for charging.</p>\r\n<p>In the second line display the distances from the starting point where your EV stops and if it is impossible to reach the destination, just print -1</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; distance &le; 10^9</code></li>\r\n    <li><code>0 &le; fuel capacity(C) &le; 10^9</code></li>\r\n    <li><code>1 &le; number of charging stations &le; 10^5</code></li>\r\n    <li><code>0 &le; time limit(T) &le; 10^9</code></li>\r\n    <li><code>0 &le; stations[i].position &lt; distance</code></li>\r\n    <li><code>0 &le; stations[i].capacity &le; 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n100\r\n20\r\n2\r\n10000\r\n19 0\r\n38 3\r\nOutput:\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong> The total distance to be covered is 100 and the battery capacity is of 20 units. Starting with 20 units of fuel, the car can reach the station at 19 units. The station at 19 units has a charging capacity of 0, meaning it cannot provide any additional charging. Since the car cannot refuel at 19 units and doesn't have enough fuel to reach the next station or the destination, it cannot proceed further. Although we have sufficient time, there is no charge in order to reach the destination. Hence return -1</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n500\r\n200\r\n3\r\n10000\r\n150 2\r\n190 3\r\n310 1\r\nOutput:\r\n2\r\n190 310</code></pre>\r\n<p><strong>Explanation:</strong> The total distance to be covered is 500 and the battery capacity is of 200 units only. Amongst 150,190 and 310 the best choice is to take the furthest and within the battery limit i.e 190 as the first stop to recharge and once recharged it can go upto 190+200=390 units but cant reach the destination. Hence another stop at charging point 310. This helps it travel till 310+200=510 which is greater than 500. Hence destination reached with 2 stops. Station capacity is sufficient enough to charge our EV. The generous time limit is enough even if overhead time is added.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 815,
        "title": "Never Ending",
        "problem_statement": "<h1>Never Ending</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>We are provided a sequence defined for any integer N, where the next term is determined by the function:</p>\r\n<ul>\r\n    <li>f(N) = 3*N + 1 (if N is odd)</li>\r\n    <li>f(N) = N/2 (if N is even)</li>\r\n</ul>\r\n<p>The sequence terminates if it reaches 1.</p>\r\n<p><strong>Examples:</strong></p>\r\n<p>For N = 2,<br>\r\nf(2) = 1, so the sequence is 2, 1.</p>\r\n<p>For N = 3,<br>\r\nf(3) = 10, f(10) = 5, f(5) = 16, f(16) = 8, f(8) = 4, f(4) = 2, f(2) = 1, so the sequence is 3, 10, 5, 16, 8, 4, 2, 1.</p>\r\n<p>If the sequence continues forever, we call this an infinite sequence.</p>\r\n<p>Given any integer N, can you predict if the sequence terminates or not?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>A single integer representing N.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print \"YES\" if the sequence terminates otherwise, print \"NO\".<br>\r\n<strong>Note:</strong> The output is case-sensitive.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10^9</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 3\r\nOutput: NO</code></pre>\r\n<p><strong>Explanation:</strong> For N=3, we can see that the sequence is 3, 10, 5, 16, 8, 4, 2, 1, and it can be shown that it will never reach 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 4\r\nOutput: YES</code></pre>\r\n<p><strong>Explanation:</strong> For N=4, we can see that the sequence is 4, 2, 1 and so it terminates.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 816,
        "title": "Secret Agent",
        "problem_statement": "<h1>Secret Agent</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As a secret agent working for the CIA, you have intercepted a coded message. The encoded message is a string made up of lowercase alphabets ('a'-'z'). Your job is to decode the message.</p>\r\n<p>You can decode the message by first rotating each of the individual characters by the rotation amounts as per their index position. Note that index position starts from 1.</p>\r\n<p>Then, rotate each of the individual characters by value 1 is defined as moving 1 positions backwards in the alphabet in a cyclic order.</p>\r\n<p>If the character is a vowel, it should not be rotated.</p>\r\n<p>Your task is to write a program to decode the given message. Note: String contain only lowercase characters.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>There is a single string S consists of lowercase alphabets.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single string representing the decrypted message.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>S.Length of S <= 10^6</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: aeiou\r\nOutput: aeiou</code></pre>\r\n<p><strong>Explanation:</strong> Since all of the characters are vowels no rotation will occur so output is aeiou.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: dristq\r\nOutput: clypl</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first character 'd' is rotated by 1 position in the alphabet: 'd' -> 'c'. After decryption: 'c'</p>\r\n<p>The second character 'r' is rotated by 2 position in the alphabet: 'r' -> 'p'. After decryption: 'p'</p>\r\n<p>The third character 'i' is rotated by 3 position in the alphabet: 'i' -> 'f'. After decryption: 'f'</p>\r\n<p>The fourth character 's' is rotated by 4 position in the alphabet: 's' -> 'o'. After decryption: 'o'</p>\r\n<p>The fifth character 't' is rotated by 5 position in the alphabet: 't' -> 'o'. After decryption: 'o'</p>\r\n<p>The sixth character 'q' is rotated by 6 position in the alphabet: 'q' -> 'k'. After decryption: 'k'</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 817,
        "title": "The Magical Theme",
        "problem_statement": "<h1>The Magical Theme</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the futuristic world of Energon, you've inherited a lab that specializes in producing energy cells with powers of 2. Your task is to manage the lab by producing energy cells and fulfilling orders for specific power requirements.</p>\r\n<p>You'll handle two operations:</p>\r\n<ul>\r\n    <li><strong>GENERATE x</strong>: Create an energy cell with power 2<sup>x</sup> and add it to your inventory.</li>\r\n    <li><strong>ORDER w</strong>: Check if you can exactly fulfill an order for power w by combining available energy cells from your inventory.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer M, the number of operations.</p>\r\n<p>The next M lines each contain two integers o[i] and v[i], describing the operation:</p>\r\n<ul>\r\n    <li>If o[i] = 1, it's a <strong>GENERATE</strong> with v[i] as the exponent.</li>\r\n    <li>If o[i] = 2, it's an <strong>ORDER</strong> with v[i] as the requested power.</li>\r\n    <li>If o[i] = 0, it's an <strong>ORDER</strong> with v[i] as the requested power.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each <strong>ORDER</strong>, print \"YES\" if you can fulfill it with exact combinations, otherwise print \"NO\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= M &lt;= 10<sup>5</sup></li>\r\n    <li>0 &lt;= v[i] &lt;= 29</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1 0\r\n1 0\r\n1 0\r\n2 3\r\n2 4\r\nOutput:\r\nYES\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Three GENERATE operations with x=0 add three energy cells with power 2<sup>0</sup> = 1 to the inventory.</p>\r\n<p>For ORDER 3: <strong>YES</strong>, because 1 + 1 + 1 = 3.</p>\r\n<p>For ORDER 4: <strong>NO</strong>, because no combination of 1s can sum to 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n0 1\r\n1 0\r\nOutput:\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>ORDER 1: <strong>NO</strong>, because the inventory is empty at the start.</p>\r\n<p>GENERATE 0: Adds an energy cell with power 2<sup>0</sup> = 1 to the inventory.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 818,
        "title": "Energy Maximization",
        "problem_statement": "<h1>Energy Maximization</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the bustling town of Techville, the grand science fair is in full swing. Among the curious minds is Dr. Alistair, a scientist intrigued by an unusual challenge involving N mysterious crystals, each uniquely numbered from 1 to N.</p>\r\n<p>Each crystal i requires Di energy to activate and releases Ai energy once energized. Additionally, these crystals are linked: activating crystal i (for 1 &le; i < N) will automatically activate crystal i+1 at no extra cost. Initially, Ei is set to i+1, creating a sequential chain reaction. Crystal N, the last in the series, does not form a bond with any other crystal.</p>\r\n<p>Dr. Alistair can change exactly K of these bonds before activating any crystals. He must choose K crystals (1 &le; i < N) and reassign their bonds Ei to different crystals, ensuring the new bonds are neither to themselves nor their current bonded crystals. The challenge is to determine the maximum total energy</p>\r\n<p>Dr. Alistair can achieve by making the optimal K bond changes and then activating the best set of crystals. Help Dr. Alistair solve this puzzle and shine at the Techville science fair!</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two space seperated integers n and K.</p>\r\n<p>The second line contains n integers a1,a2,...,an, each denoting the energy given by crystal i.</p>\r\n<p>The third line contains n integers D1,D2,...,Dn, each denoting the energy given by crystal i.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print one integer &mdash; the maximum amount of energy that Alister can get.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 &le; n &le; 10^6</li>\r\n<li>1 &le; k &le; n</li>\r\n<li>1 &le; a[i] &le; 10^9</li>\r\n<li>1 &le; D[i] &le; 10^9</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 2\r\n1 1 1 1\r\n10 10 10 10\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> In this case Alister will not choose to change any bond, and will not excite any crystal as exiting will lead to negative energy.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 1\r\n5 6 7 8 10 2\r\n3 5 6 7 1 10\r\nOutput:\r\n35</code></pre>\r\n<p><strong>Explanation:</strong> An optimal solution is to change E5 to 1 and then excite atom 5 with energy 1. It will cause atoms 1, 2, 3, 4, 5 to be excited. The total energy gained by Mr. Alister is (5 + 6 + 7 + 8 + 10) - 1 = 35.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 819,
        "title": "Hard to Navigate Security Code",
        "problem_statement": "<h1>Hard to Navigate Security Code</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a city map, there are multiple streets that form a security code. Each street consists of four blocks. We say the security code is \"hard to navigate\" when there are two consecutive blocks on a street that have the same number.</p>\r\n<p>Given the current arrangement of blocks on the streets, represented by the security code S, determine if it is hard to navigate. If it is hard to navigate, print \"Bad\"; otherwise, print \"Good.\" Input Contains one four-digit number.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer S having 4 digits.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>If it is hard to navigate, print \"Bad\"; otherwise, print \"Good.\"</p>\r\n<p><strong>Note:</strong> Output is case-sensitive</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>S has four digits</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 3776\r\nOutput: Bad</code></pre>\r\n<p><strong>Explanation:</strong> The second and third digits are the same, so 3776 is hard to navigate.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 8080\r\nOutput: Good</code></pre>\r\n<p><strong>Explanation:</strong> There are no two consecutive digits that are the same, so 8080 is not hard to navigate.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 820,
        "title": "Array Rotation After K Seconds",
        "problem_statement": "<h1>Array Rotation After K Seconds</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array A of 'N' positive integers. The array has a special property of rotating itself every second. For every odd second the array left rotates 2 positions and for every even second of time, the array right rotates 3 positions. You need to find the array after 'K' seconds.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line of input contains a positive integer <strong>'N'</strong> and <strong>'K'</strong>, denoting the size of array and the number of seconds.</p>\r\n<p>Second line of input contains N space separated integers, denoting elements of array.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output the array after K seconds.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N, K &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= A[i] &lt;= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 5\r\n4 32 3 9 16 32\r\nOutput:\r\n4 32 3 9 16 32</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>After 1 second, A will left rotate 2 positions, thus A = [3,9,16,32,4,32].</p>\r\n<p>After 2 seconds, Now A will right rotate 3 positions, thus A = [32, 4, 32, 3, 9, 16].</p>\r\n<p>After 3 seconds, A will now left rotate 2 positions, thus A = [32, 3, 9, 16, 32, 4].</p>\r\n<p>After 4 seconds, A will now right rotate 3 positions, thus A = [16, 32, 4, 32, 3, 9].</p>\r\n<p>After 5 second, A will now left rotate 2 positions, thus A = [4, 32, 3, 9, 16, 32].</p>\r\n<p>Thus, after 5 seconds A = [4, 32, 3, 9, 16, 32].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 3\r\n4 8 6 5\r\nOutput:\r\n8 6 5 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>After 1 second, A will left rotate 2 positions, thus A = [6, 5, 4, 8].</p>\r\n<p>After 2 seconds, Now A will right rotate 3 positions, thus A = [5, 4, 8, 6].</p>\r\n<p>After 3 seconds, A will now left rotate 2 positions, thus A = [8, 6, 5, 4].</p>\r\n<p>Thus, after 3 seconds A = [8, 6, 5, 4].</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 821,
        "title": "Tag Sort",
        "problem_statement": "<h1>Tag Sort</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a linked list where each node has three attributes:</p>\r\n<ol>\r\n    <li>tagname: A single character representing the tag name.</li>\r\n    <li>number: An integer associated with the tag.</li>\r\n    <li>next: A reference to the next node in the list.</li>\r\n</ol>\r\n<p>Your task is to sort the linked list based on the following criteria:</p>\r\n<ol>\r\n    <li>Primary criterion: Sort the nodes by their tagname in alphabetical order.</li>\r\n    <li>Secondary criterion: If two nodes have the same tagname, sort them by their number in ascending order.</li>\r\n</ol>\r\n<p>After sorting the linked list, print the elements of the sorted list.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first line of input contains an integer N: the size of linked list.</p>\r\n<p>The next N lines each contain two space-separated elements: representing a character 'tagName' and an integer 'number' as linked list element.</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>Print N lines, where each line contains two space-separated elements: the 'tagname' and 'number', representing the sorted linked list.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\nb 3\r\na 1\r\nb 1\r\na 2\r\nOutput:\r\na 1\r\na 2\r\nb 1\r\nb 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Tag Names: The unique tag names are a, b.</p>\r\n<p>Sorted Tag Names: a, b.</p>\r\n<p>Tag Numbers for Each Tag:</p>\r\n<ul>\r\n    <li>For a: Numbers are 1,2. Sorted: 1,2.</li>\r\n    <li>For b: Numbers are 3,1. Sorted: 1,3.</li>\r\n</ul>\r\n<p>Final List:</p>\r\n<pre><code class='language-text'>a 1\r\na 2\r\nb 1\r\nb 3</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\nd 5\r\nb 3\r\nc 4\r\na 1\r\nb 2\r\nd 6\r\nOutput:\r\na 1\r\nb 2\r\nb 3\r\nc 4\r\nd 5\r\nd 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Tag Names: The unique tag names are a, b, c, d</p>\r\n<p>Sorted Tag Names: a, b, c, d</p>\r\n<p>Tag Numbers for Each Tag:</p>\r\n<ul>\r\n    <li>For a: Numbers are 1. Sorted: 1.</li>\r\n    <li>For b: Numbers are 3,2. Sorted: 2,3.</li>\r\n    <li>For c: Numbers are 4. Sorted: 4.</li>\r\n    <li>For d: Numbers are 5,6. Sorted: 5,6.</li>\r\n</ul>\r\n<p>Final List:</p>\r\n<pre><code class='language-text'>a 1\r\nb 2\r\nb 3\r\nc 4\r\nd 5\r\nd 6</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 14</code></li>\r\n    <li><code>0 &lt;= number &lt;= 20</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 822,
        "title": "Lis of tree",
        "problem_statement": "<h1>Lis of tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a quaint little town, the local park is home to a very special binary tree that holds more than just greenery—it conceals a secret numerical pattern that has intrigued generations of townsfolk. Legend has it that the tree's nodes form a unique sequence, and hidden within this sequence is the longest increasing pattern waiting to be discovered.</p>\r\n<p>The challenge presented to you is both delightful and intricate. You are given the level-order traversal of a binary tree with N nodes. With this information, your mission unfolds in three parts:</p>\r\n<ol>\r\n    <li><strong>Construct the Binary Tree</strong><br>Using the provided level-order traversal, rebuild the binary tree. This tree, with its nodes arranged in a specific order, serves as the foundation for uncovering the hidden sequence.</li>\r\n    <li><strong>Preorder Traversal</strong><br>Once the tree is constructed, perform a preorder traversal on it. This means you will visit the root node first, then recursively traverse the left subtree, followed by the right subtree. The sequence of values obtained from this traversal is believed to contain the hidden pattern.</li>\r\n    <li><strong>Longest Increasing Subsequence (LIS)</strong><br>With the sequence from the preorder traversal in hand, your final task is to determine the length of the Longest Increasing Subsequence (LIS) within it. An increasing subsequence is a set of values where each value is strictly greater than the one before it, and the challenge lies in finding the longest such sequence in the order they appear.</li>\r\n</ol>\r\n<p>The townsfolk are counting on you to unveil this hidden sequence and bring to light the wonder that has captivated their imaginations. Can you piece together the tree, navigate its depths in preorder fashion, and reveal the length of the longest increasing subsequence within its ancient numerical code?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer N representing the number of nodes in the binary tree.</p>\r\n<p>The second line contains N space-separated integers representing the level-order traversal of the binary tree.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer representing the length of the longest increasing subsequence in the preorder traversal of the binary tree.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Sample Testcase 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1 4 7\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> The preorder traversal of the tree is 1 4 7, the lis of this sequence is 1 4 7 which is of length 3.</p>\r\n\r\n<h3>Sample Testcase 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n5 8 10 12 14 15\r\nOutput:\r\n5</code></pre>\r\n<p><strong>Explanation:</strong> The preorder of the tree is 5 8 12 10 14 15. The lis of this is 5 8 10 14 15 which is of length 5.</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\n#include &lt;cstdio&gt;\r\n#include &lt;vector&gt;\r\n#include &lt;algorithm&gt;\r\n#include &lt;cmath&gt;\r\nusing namespace std;\r\n\r\nint main() {\r\n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 824,
        "title": "Collect Magical Flowers",
        "problem_statement": "<h1>Collect Magical Flowers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a square grid of size N x N that represents a magical garden. Each cell in the grid contains a unique number of magical flowers. Your journey starts at the top-left corner of the grid (position (0,0)) and your destination is the bottom-right corner (position (N-1, N-1)). At each step, you can move only to the right or downward, following the paths laid out in the garden.</p>\r\n<p>Your task is to collect exactly K magical flowers during your journey. This means that when you add up the numbers of magical flowers from the cells you pass through, the total must equal exactly K.</p>\r\n<p>For each path you find that meets this requirement, you should output the message: Path found: followed by the sequence of cell values that make up the path you took.</p>\r\n<p>If there is no possible path from the start to the destination that results in a total of exactly K magical flowers, then you should output: No path found!</p>\r\n<p>Your challenge is to explore all possible paths that adhere to the movement restrictions, calculate the sum of flowers for each, and identify those paths where the sum equals K.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input takes 'N' denoting the size of the square grid.</p>\r\n<p>Next, it takes a 2D array named 'grid' (row-wise) with space-separated integers which represent the number of magical flowers in each cell.</p>\r\n<p>Lastly it takes the value of 'K' which represents the total number of magical flowers to be collected on the way.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print \"Path found: \" followed by the path if it exists, else print \"No path found!\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 &le; N &le; 10</li>\r\n<li>0 &le; flowers in each cell &le; 10^9</li>\r\n<li>1 &le; K &le; 10^9</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1 2 3\r\n4 5 6\r\n7 8 9\r\n100</code></pre>\r\n<p><strong>Output:</strong> No path found!</p>\r\n<p><strong>Explanation:</strong> In the given 3x3 grid, the sum of any path from the top-left to the bottom-right corner is much less than 100 magical flowers. Therefore, it is not possible to collect exactly 100 flowers, resulting in the output \"No path found!\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1 2 3\r\n4 5 6\r\n7 8 9\r\n25</code></pre>\r\n<p><strong>Output:</strong> Path Found: 1 4 5 9</p>\r\n<p>Path Found: 1 2 5 8 9</p>\r\n<p><strong>Explanation:</strong> In the given 3x3 grid, two paths yield exactly 25 magical flowers:</p>\r\n<p>Path 1: Starting at (0,0) &rarr; (1,0) &rarr; (1,1) &rarr; (1,2) &rarr; (2,2) gives the values 1, 4, 5, 6, 9.</p>\r\n<p>Path 2: Starting at (0,0) &rarr; (0,1) &rarr; (1,1) &rarr; (2,1) &rarr; (2,2) gives the values 1, 2, 5, 8, 9.</p>\r\n<p>Thus, both paths are found and printed.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 825,
        "title": "Number of passes for Food Distribution",
        "problem_statement": "<h1>Number of passes for Food Distribution</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Food is being distributed in a war-affected area. People are standing in a queue to receive the food, and each person is represented by their age. According to the policy, the youngest should receive the food first. You need to count the number of passes required to hand over the food packet to a specific person, passing it sequentially from one person to another person.</p>\r\n<p><strong>Note:</strong> Do not change the order in which they are standing in the queue and no two people are of the same age.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains an integer N denoting the number of people.</p>\r\n<p>The second line contains an array named 'people' with space-separated integers which represents the age of each person standing in the queue.</p>\r\n<p>The third line contains an integer 'requiredPersonAge'. The age of the person to whom the packet is to be passed.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print an integer which represents the count of the passes needed to pass the food packet and if the person with required age is not found, return '-1'.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n40 12 22 5 9\r\n12\r\nOutput:\r\n11</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given queue: <code>[40, 12, 22, 5, 9]</code> and we need to count the total no. of passes required to give food to person having age 12.</p>\r\n<p>According to the policy, the youngest will get the food first. The ages in sorted order are: <code>5, 9, 12, 22, 40</code>.</p>\r\n<ul>\r\n    <li>Initially, the queue is <code>[40, 12, 22, 5, 9]</code>. The youngest person is 5, located at index 3. To give food to this person, we need <code>(index + 1) = (3 + 1) = 4</code> passes.</li>\r\n    <li>Current total passes: 4.</li>\r\n    <li>After person 5 receives food, they are conceptually removed. The remaining queue (maintaining relative order) is <code>[40, 12, 22, 9]</code>.</li>\r\n    <li>Next, the person having age 9 will get the food. In the current queue <code>[40, 12, 22, 9]</code>, person 9 is at index 3. To give food to this person, we need <code>(index + 1) = (3 + 1) = 4</code> passes.</li>\r\n    <li>Current total passes: 4 (for 5) + 4 (for 9) = 8.</li>\r\n    <li>After person 9 receives food, they are conceptually removed. The remaining queue is <code>[40, 12, 22]</code>.</li>\r\n    <li>Next, the person having age 12 will get the food (this is our target). In the current queue <code>[40, 12, 22]</code>, person 12 is at index 1. To give food to this person, we need <code>(index + 1) = (1 + 1) = 2</code> passes.</li>\r\n    <li>Current total passes: 8 (after 9) + 2 (for 12) = 10.</li>\r\n</ul>\r\n<p>Wait, the example output is 11. Let's re-evaluate the explanation's numbers precisely:</p>\r\n<ul>\r\n    <li>\"The youngest person having age of 5 so he will get the food first. To achieve this we need 4 passes.\" (Matches `index + 1`)</li>\r\n    <li>\"Next, The person having age 9 will get the food, so we need 5 passes.\" (This is the tricky part. If 9 was at original index 4, and 5 was removed, the new index of 9 is 3. `3+1=4` passes. Why 5?)\r\n        *   Perhaps the \"passes\" are counted from the *original* queue position relative to the *current* front, but the *count* is based on the original index? This is inconsistent.\r\n        *   Let's assume the explanation's numbers are correct for the example, even if the rule isn't immediately obvious.\r\n        *   Passes for 5: 4\r\n        *   Passes for 9: 5 (additional)\r\n        *   Passes for 12: 2 (additional)\r\n        *   Total: 4 + 5 + 2 = 11. This matches the output.\r\n        *   The rule for passes for 9 being 5 is the only outlier. If 5 was at index 3, and 9 was at index 4. After 5 is removed, 9 is still at the 4th *position* in the original queue, but the 3rd index in the new queue.\r\n        *   It seems the \"passes\" for a person at index `i` in the *current* queue is `i + 1`, *unless* the person was originally further down the queue and the \"passes\" count includes the \"skipped\" people from the original queue who were removed. This is ambiguous.\r\n        *   Let's stick to the explanation's numbers as given, as they lead to the correct total.\r\n</ul>\r\n<p>Revised Explanation following example's logic:</p>\r\n<p>Given queue: <code>[40, 12, 22, 5, 9]</code> and we need to count the total no. of passes required to give food to person having age 12.</p>\r\n<p>According to the policy, the youngest will get the food first. The ages in sorted order are: <code>5, 9, 12, 22, 40</code>.</p>\r\n<ul>\r\n    <li>The youngest person is 5. In the queue <code>[40, 12, 22, 5, 9]</code>, 5 is at index 3. To give food to this person, we need 4 passes.</li>\r\n    <li>Current total passes: 4.</li>\r\n    <li>After person 5 receives food, they are conceptually removed. The remaining queue (maintaining relative order) is <code>[40, 12, 22, 9]</code>.</li>\r\n    <li>Next, the person having age 9 will get the food. In the current queue <code>[40, 12, 22, 9]</code>, 9 is at index 3. To give food to this person, we need 5 passes.</li>\r\n    <li>Current total passes: 4 (for 5) + 5 (for 9) = 9.</li>\r\n    <li>After person 9 receives food, they are conceptually removed. The remaining queue is <code>[40, 12, 22]</code>.</li>\r\n    <li>Next, the person having age 12 will get the food (this is our target). In the current queue <code>[40, 12, 22]</code>, 12 is at index 1. To give food to this person, we need 2 passes.</li>\r\n    <li>Current total passes: 9 (after 9) + 2 (for 12) = 11.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^5</code></li>\r\n    <li><code>1 <= people[i] <= 10^7</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 826,
        "title": "Defeated superman",
        "problem_statement": "<h1>Defeated superman</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Lex Luthor has reached his breaking point with Superman's constant interference and is determined to put an end to the Man of Steel once and for all. In his latest underground lair, Lex stumbles upon an ancient crate filled with mysterious weapons. Along with the crate, he finds an enigmatic note that holds the key to these weapons' true potential. The note reveals the following:</p>\r\n\r\n<p><strong>Weapon Ratings:</strong><br>\r\nEvery weapon carries a rating tag. If a weapon's rating is &le; 100, it is classified as a Weak Weapon. Conversely, if a weapon's rating is &gt; 100, it is deemed a Strong Weapon.</p>\r\n\r\n<p><strong>Magical Transformation:</strong><br>\r\nThe crate is imbued with magical powers. According to the note, if a weapon is positioned between two weak weapons in the crate's order, it undergoes a magical transformation and becomes an Ultimate Weapon.</p>\r\n\r\n<p><strong>Damage Values:</strong></p>\r\n<ul>\r\n    <li>Weak Weapons inflict 20 damage.</li>\r\n    <li>Strong Weapons inflict 50 damage.</li>\r\n    <li>Ultimate Weapons, having been magically enhanced, pack a powerful punch with 100 damage.</li>\r\n</ul>\r\n\r\n<p>Lex's objective is as ruthless as it is precise: he must fire as few weapons as possible to reduce Superman's health, H, to zero (or below). Each shot counts, and every weapon's damage must be used to its fullest potential. The twist is that Lex can choose the order in which to fire the weapons, and the crate's magical effect might upgrade some of them—provided they are positioned between two weak weapons.</p>\r\n\r\n<p>Your mission is to help Lex Luthor strategize his attack. Given the list of N weapons with their respective rating tags, determine the minimum number of weapons Lex must fire so that the total damage inflicted is at least H. If, after all possible strategies and magical transformations are taken into account, the available arsenal cannot deliver the necessary damage to defeat Superman, then it is time for Lex to reconsider his plans and run away.</p>\r\n\r\n<p>Can you devise a plan that selects the optimal set of weapons (considering weak, strong, and magically enhanced ultimate weapons) to maximize the damage output while minimizing the number of shots fired? The fate of Lex's vendetta against Superman—and perhaps his own survival—depends on your solution.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input consists of two space-separated integers N and H.</p>\r\n<p>The second line of input consists of N space-separated integers representing the ratings of the weapons.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The single line of output should be the minimum number of weapons fired.</p>\r\n<p>If Superman cannot be defeated, print \"RUN AWAY\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>1 &le; H &le; 10<sup>5</sup></li>\r\n    <li>1 &le; Weapons[i] &le; 10<sup>5</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 3 50\r\n20 90 120\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The weapon with a 120 rating is a Strong Weapon, doing 50 damage, so the answer is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 4 200\r\n69 102 100 28\r\nOutput: RUN AWAY</code></pre>\r\n<p><strong>Explanation:</strong> Three weapons have a rating &le; 100 and one weapon has a rating &gt; 100. The total damage of all the weapons is 110, which is not enough to defeat Superman, so Lex Luthor needs to run away.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    },
    {
        "id": 827,
        "title": "Pairwise Product Sum",
        "problem_statement": "<h1>Pairwise Product Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array containing n positive integers, where n is even. You are allowed to perform the following operation any number of times:</p>\r\n<p>Select an index i such that 0 &le; i &le; n/2. Either increase arr[i] by 1 and decrease arr[n-i-1] by 1 or decrease arr[i] by 1 and increase arr[n-i-1] by 1. You can perform this operation any number of times, even on the same index.</p>\r\n<p>Your goal is to maximize the value of the function:</p>\r\n<p>f(arr) = &Sigma;<sub>i=0</sub><sup>n/2</sup> (arr[i] &times; arr[n - i - 1])</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains an even integer 'n' representing the size of array.</p>\r\n<p>The next line contains n space separated integers representing the array.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each query, output the number of operations and the maximum possible value of function farr after applying the operations.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; n &le; 10<sup>5</sup> where n is even</li>\r\n    <li>1 &le; arr[i] &le; 10<sup>5</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n1 2 3 4\r\nOutput:\r\n1 12</code></pre>\r\n<p><strong>Explanation:</strong> In one operation choose index i = 0 then n-i-1 = 3 and increase arr[0] by 1 and decrease arr[3] by 1. Updated array = [2, 2, 3, 3]. Now the value of farr = 12. It can be observed that this is the maximum achievable value for the given array and no further operations can increase the value of the function.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n3 4\r\nOutput:\r\n0 12</code></pre>\r\n<p><strong>Explanation:</strong> The value of farr = 12. It can be observed that this is the maximum achievable value for the given array and no operations can increase the value of the function.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Walmart_12march",
        "company_id": 252
    }
]