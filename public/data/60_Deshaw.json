[
    {
        "id": 238,
        "title": "Minimum Subarray Length",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">1. Question 1</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>A computer factory produces computers in batches. Each batch contains n computers, where the cost to produce the i<sup>th</sup> computer is represented by the array cost[i].</p>\n\n        <p>The factory can produce an infinite number of batches, thus forming an infinite array of computers, where the cost to produce the i<sup>th</sup> computer is represented by the array infinite_cost[i].</p>\n\n        <p>For example, for cost = [2, 3, 1, 5], infinite_cost = [2, 3, 1, 5, 2, 3, 1, 5, ...]</p>\n\n        <p>The factory manager wants to know the minimum number of computers produced in a row with a sum of the cost to produce them equal to k.</p>\n\n        <p>Given n computers of each batch, an array cost, and an integer k, find the length of the smallest subarray of the array infinite_cost with a sum equal to k. In case there is no subarray with sum k, return -1 as the answer.</p>\n\n        <p><strong>Note:</strong> A subarray is defined as any contiguous segment of the array.</p>\n    </div>\n\n    <div class=\\\"example\\\">\n        <h3>Example</h3>\n        <p>Given n = 5, cost = [4, 2, 1, 3, 1], and k = 14.</p>\n        <p>The resulting infinite_cost = [4, 2, 1, 3, 1, 4, 2, 1, 3, 1, ...]</p>\n\n        <p>Some of the subarrays with sum k = 14 are:</p>\n        <table class=\\\"example-table\\\">\n            <tr>\n                <th>Subarray</th>\n                <th>Length</th>\n            </tr>\n            <tr>\n                <td>[4, 2, 1, 3, 1, 3]</td>\n                <td>7</td>\n            </tr>\n            <tr>\n                <td>[4, 2, 1, 3, 4]</td>\n                <td>6</td>\n            </tr>\n        </table>\n\n        <p>[3, 1, 4, 2, 1, 3] with a length of 6 is the smallest subarray with a sum of 14. Hence, the answer is 6.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>findMinSubarrayLen</code> in the editor below.</p>\n\n        <p><code>findMinSubarrayLen</code> has the following parameters:</p>\n        <ul>\n            <li><code>int amount[n]</code>: the cost to produce computers</li>\n            <li><code>int k</code>: the target sum</li>\n        </ul>\n\n        <h4>Returns</h4>\n        <ul>\n            <li><code>long</code>: the minimum length of the subarray of computers with a sum of the cost to produce them equal to k or -1 if no subarray has the target sum</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>0 ≤ cost[i] ≤ 10<sup>5</sup></li>\n            <li>1 ≤ k ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"sample-cases\\\">\n        <h3>Sample Case 0</h3>\n        <pre class=\\\"input\\\">Input:\n5\n3 7 2 1 2\n5</pre>\n        <pre class=\\\"output\\\">Output:\n2</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1lmYLyX7Onv9XIOnEr-fdbgyJ0iaTHpfPCnlvU2YBkok/edit?usp=sharing",
        "solution_code": "int findMinSubarrayLength(const vector<int>& cost, int n, ll target) {\\n    int min_length = n + 1;\\n    ll current_sum = 0;\\n    int left = 0;\\n    \\n    for(int right = 0; right < 2 * n; ++right){\\n        current_sum += cost[right % n];\\n        \\n        while(current_sum > target && left <= right){\\n            current_sum -= cost[left % n];\\n            left++;\\n        }\\n        \\n        if(current_sum == target){\\n            int window_length = right - left +1;\\n            if(window_length <= n){\\n                min_length = min(min_length, window_length);\\n            }\\n        }\\n    }\\n    \\n    if(min_length <= n){\\n        return min_length;\\n    }\\n    else{\\n        return-1;    }\\n}",
        "company_name": "Deshaw",
        "company_id": 60
    },
    {
        "id": 239,
        "title": "Maximize Codebase Beauty",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Maximize Codebase Beauty</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>In a software project, the \\\"beauty\\\" of a codebase is defined as the number of modules whose performance score exactly matches their module index.</p>\n\n        <p>Given an array <code>modules</code> of size <var>n</var> where <code>modules[i]</code> is defined as the performance score of the i<sup>th</sup> module, a developer can improve the beauty of the codebase by removing any module, ensuring that the order of the remaining modules is preserved.</p>\n\n        <p>Find the maximum possible beauty of the codebase after performing this operation any number of times.</p>\n    </div>\n\n    <div class=\\\"example\\\">\n        <h3>Example</h3>\n        <p>Given <var>n</var> = 7,<br>\n        <code>modules = [1, 3, 2, 5, 4, 5, 3]</code></p>\n\n        <p>One optimal sequence of improvements is shown below:</p>\n        <ul>\n            <li>Remove the module at index 1 with a performance score of 3; the updated list is [1, 2, 5, 4, 5, 3].</li>\n            <li>Remove the module at new index 5 with a performance score of 3; the updated list is [1, 2, 5, 4, 5].</li>\n        </ul>\n\n        <p>The beauty of the codebase is 4 since:</p>\n        <ul>\n            <li><code>modules[1] = 1</code></li>\n            <li><code>modules[2] = 2</code></li>\n            <li><code>modules[4] = 4</code></li>\n            <li><code>modules[5] = 5</code></li>\n        </ul>\n\n        <p>Note that there can be more than one final array with maximum beauty, like [1, 2, 5, 4, 5, 3] in this case.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>maximizeCodebaseBeauty</code> in the editor below.</p>\n\n        <h4>Parameters</h4>\n        <ul>\n            <li><code>vector&lt;int&gt; modules</code>: array of module performance scores</li>\n        </ul>\n\n        <h4>Returns</h4>\n        <ul>\n            <li><code>int</code>: the maximum possible beauty of the codebase</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 2000</li>\n            <li>1 ≤ modules[i] ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Cases</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\n6\n6 3 2 4 3 4</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>One optimal sequence of improvements is shown:</p>\n                <ul>\n                    <li>Remove the module at index 2 with a performance score of 3; the updated list is [6, 2, 4, 3, 4].</li>\n                    <li>Remove the module at index 3 with a performance score of 4; the updated list is [6, 2, 3, 4].</li>\n                </ul>\n                <p>Final state: <code>modules[2] = 2, modules[3] = 3, modules[4] = 4</code></p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Case 1</h4>\n            <pre class=\\\"input\\\">Input:\n4\n3 2 1 2</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>One optimal sequence of improvements is shown:</p>\n                <ul>\n                    <li>Remove the module at index 1 with a performance score of 3; the updated list is [2, 1, 2].</li>\n                    <li>Remove the module at index 1 with a performance score of 2; the updated list is [1, 2].</li>\n                </ul>\n                <p>Final state: <code>modules[1] = 1</code> and <code>modules[2] = 2</code></p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1t5I03zFQjPZDUMTLY6r_5_X0yEkwdJg3GQbRBvLihJY/edit?usp=sharing",
        "solution_code": "int maximizeBeauty(vector<int> mod) {\\n    int n = mod.size();\\n    vector<int> dp_prev(n + 1, 0);\\n    \\n    for(int i = 0; i < n; ++i){\\n        vector<int> dp_curr(n +1, 0);\\n        for(int j = 0; j <= i; ++j){\\n            dp_curr[j] = max(dp_curr[j], dp_prev[j]);\\n            int new_j = j +1;\\n            if(new_j <= n){\\n                int b = dp_prev[j] + (mod[i] == new_j ? 1 : 0);\\n                dp_curr[new_j] = max(dp_curr[new_j], b);\\n            }\\n        }\\n        dp_prev = dp_curr;\\n    }\\n    \\n    return *max_element(dp_prev.begin(), dp_prev.end());\\n}",
        "company_name": "Deshaw",
        "company_id": 60
    },
    {
        "id": 240,
        "title": "Valid Paths in Weighted Graph",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Valid Paths in Weighted Graph</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given a weighted graph with <code>route_nodes</code> nodes and <code>m</code> bidirectional edges given in the array <code>route_from</code> and <code>route_to</code> and each edge having weight <code>route_weight</code> corresponding to it.</p>\n\n        <p>A path between two nodes is considered valid if the weights of all the edges used in that path are the same.</p>\n\n        <p>Given <code>q</code> queries, the i<sup>th</sup> query contains <code>query_from[i]</code> and <code>query_to[i]</code>, the starting and ending node of the paths, 0 ≤ i < q. For each query, find the number of acyclic valid paths.</p>\n    </div>\n\n    <div class=\\\"example\\\">\n        <h3>Example</h3>\n        <p>Given: n = 3 nodes, and m = 5 paths, <code>route_from = [1, 1, 1, 2, 2]</code>, <code>route_to = [3, 2, 2, 3, 3]</code> having <code>route_weight = [3, 1, 2, 1, 3]</code>. As shown in the diagram below:</p>\n\n        <div class=\\\"graph-example\\\">\n            <!-- Note: In actual implementation, replace this with an image or SVG -->\n            <p>[Graph visualization showing nodes 1, 2, and 3 with weighted edges]</p>\n        </div>\n\n        <p>There are q = 3 queries, <code>query_from = [1, 1, 2]</code> and <code>query_to = [2, 3, 3]</code></p>\n\n        <ul>\n            <li>Between 1 and 2 there are 3 valid paths - 1 to 3 to 2 with weight of the edges as 3, 1 to 2 directly with weights of the edges as 1 and 2 respectively</li>\n            <li>Between 1 and 3 there are 2 valid paths - 1 to 3 directly with the edge of weight 3 and 1 to 2 to 3 with the weight of the edge as 1</li>\n            <li>Between 2 and 3 also there are 2 valid paths - 2 to 3 directly with weights of the edges as 1 and 3 respectively.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getNumOfWays</code> in the editor below.</p>\n\n        <h4>Parameters</h4>\n        <ul>\n            <li><code>int route_nodes</code>: the number of nodes</li>\n            <li><code>int route_from[m]</code>: an array with the one end of the path</li>\n            <li><code>int route_to[m]</code>: an array with the other end of the path</li>\n            <li><code>int route_weight[m]</code>: an array with the weight of the path</li>\n            <li><code>int query_nodes</code>: the number of queries</li>\n            <li><code>int query_from[q]</code>: an array with the starting node of each query</li>\n            <li><code>int query_to[q]</code>: an array with the ending node of each query</li>\n        </ul>\n\n        <h4>Returns</h4>\n        <p><code>int[]</code>: the number of valid paths i.e. paths where the weights of all the edges used in that path are the same</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10000</li>\n            <li>1 ≤ m ≤ 10000</li>\n            <li>1 ≤ route_from[i], route_to[i] ≤ n</li>\n            <li>1 ≤ route_weight[i] ≤ 100</li>\n            <li>1 ≤ q ≤ 10000</li>\n            <li>1 ≤ query_from, query_to ≤ n</li>\n            <li>There can exist multiple edges between a pair of nodes but the weight of each edge will be different</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <div class=\\\"example\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\n4 5\n1 2 2 2\n2 2 3 3\n1 2 1 3\n3 4 3</pre>\n            <pre class=\\\"output\\\">Output:\n2\n1\n0</pre>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Case 1</h4>\n            <pre class=\\\"input\\\">Input:\n5 7\n1 2 3 4 1 2 3\n5 5 5 5 2 3 4\n1 1 1 1 2 2 2</pre>\n            <pre class=\\\"output\\\">Output:\n1\n1\n1\n1\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>For query from node 1 to 5, and from node 5 to 1, since the paths are bidirectional the answer will be the same. There is only one valid path between 1 and 5 - direct edge of weight 1, so the answer will be 1.</p>\n                <p>For queries from nodes 2 to 5, again there is only one way to reach - direct edge of weight 1, so the answer is 1.</p>\n                <p>The 4<sup>th</sup> query, from nodes 1 to 5, is already solved.</p>\n                <p>For query from nodes 1 to 4, there are 2 paths to travel with each edge of the same weight. These are:</p>\n                <ul>\n                    <li>The path from 1 -> 5 -> 4 with weight of each edge as 1.</li>\n                    <li>The path from 1 -> 2 -> 3 -> 4 with weight of each edge as 2.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1nszlGOLYSX6xEIAywOT32S0TW5caClT_o-4jiW7J1tU/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\n\\nstruct UF {\\n    vector<int> p;\\n    UF(int sz) {\\n        p.resize(sz + 1);\\n        iota(p.begin(), p.end(), 0);\\n    }\\n    int find(int x) {\\n        if (p[x] != x) p[x] = find(p[x]);\\n        return p[x];\\n    }\\n    void unite(int x, int y) {\\n        p[find(x)] = find(y);\\n    }\\n};\\n\\nvector<int> getNumOfWays(int n, vector<int> from, vector<int> to, vector<int> w, int qn, vector<int> qf, vector<int> qt) {\\n    int m = from.size();\\n    vector<UF> ufs(101, UF(n));\\n    for (int i = 0; i < m; i++) {\\n        int wt = w[i];\\n        ufs[wt].unite(from[i], to[i]);\\n    }\\n    vector<int> res;\\n    res.reserve(qn);\\n    for (int i = 0; i < qn; i++) {\\n        int a = qf[i];\\n        int b = qt[i];\\n        if (a == b) {\\n            res.push_back(0);\\n            continue;\\n        }\\n        int cnt = 0;\\n        for (int j = 1; j <= 100; j++) {\\n            if (ufs[j].find(a) == ufs[j].find(b)) {\\n                cnt++;\\n            }\\n        }\\n        res.push_back(cnt);\\n    }\\n    return res;\\n}#include<bits/stdc++.h>\\nusing namespace std;\\n\\nstruct UF {\\n    vector<int> p;\\n    UF(int sz) {\\n        p.resize(sz + 1);\\n        iota(p.begin(), p.end(), 0);\\n    }\\n    int find(int x) {\\n        if (p[x] != x) p[x] = find(p[x]);\\n        return p[x];\\n    }\\n    void unite(int x, int y) {\\n        p[find(x)] = find(y);\\n    }\\n};\\n\\nvector<int> getNumOfWays(int n, vector<int> from, vector<int> to, vector<int> w, int qn, vector<int> qf, vector<int> qt) {\\n    int m = from.size();\\n    vector<UF> ufs(101, UF(n));\\n    for (int i = 0; i < m; i++) {\\n        int wt = w[i];\\n        ufs[wt].unite(from[i], to[i]);\\n    }\\n    vector<int> res;\\n    res.reserve(qn);\\n    for (int i = 0; i < qn; i++) {\\n        int a = qf[i];\\n        int b = qt[i];\\n        if (a == b) {\\n            res.push_back(0);\\n            continue;\\n        }\\n        int cnt = 0;\\n        for (int j = 1; j <= 100; j++) {\\n            if (ufs[j].find(a) == ufs[j].find(b)) {\\n                cnt++;\\n            }\\n        }\\n        res.push_back(cnt);\\n    }\\n    return res;\\n}",
        "company_name": "Deshaw",
        "company_id": 60
    },
    {
        "id": 247,
        "title": "Maximum Minimum Rating",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Maximum Minimum Rating</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are an app developer working for an e-commerce company with n customers and m products. Each customer has rated all m products, and these ratings are given in a 2-D matrix, where <code>rating[i][j]</code> (0 ≤ i < n, 0 ≤ j < m) represents the rating given by the i-th customer to the j-th product.</p>\n\n        <p>You have been assigned the task to list exactly (n - 2) products of the m products on the app\\'s homepage. For all 0 ≤ i < n, let mx[i] denote the maximum rating given by the i-th customer among all the selected (n - 2) products. You aim to select these (n - 2) products in such a way that the minimum rating among all mx[i] is maximized.</p>\n\n        <p>Determine the maximum value of the minimum rating.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMaximumRating</code> in the editor below.</p>\n        \n        <h4>Parameters</h4>\n        <ul>\n            <li><code>int rating[n][m]</code>: the rating given by n customers to m products</li>\n        </ul>\n\n        <h4>Returns</h4>\n        <ul>\n            <li><code>int</code>: the maximum value of the minimum rating</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>Given n = 4, m = 4 and rating = [[3, 4, 2, 2], [3, 3, 3, 4], [2, 4, 2, 3], [4, 2, 4, 2]].</p>\n\n            <p>We have to select 2 products. If we select the first and second products, then ratings given by the customers to these products will be [3, 4], [3, 3], [2, 4], [4, 2]].</p>\n\n            <div class=\\\"explanation\\\">\n                <p>Considering the maximum rating for each customer, mx = [4, 3, 4, 4]. The minimum rating obtained is 3.</p>\n                <p>For any other combination of 2 products, a minimum rating greater than 3 cannot be obtained.</p>\n                <p>Therefore, the maximum value of the minimum rating is 3.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ n ≤ 100</li>\n            <li>n ≤ m ≤ 100</li>\n            <li>1 ≤ rating[i][j] ≤ 100</li>\n        </ul>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"python\\\"><code>def getMaximumRating(rating):\n    # Write your code here\n    pass</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1itX37Xp1cGTbpxmA84ld9y20SdcC2gmdmYQ4z1B_qvY/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Deshaw",
        "company_id": 60
    },
    {
        "id": 509,
        "title": "DEshaw",
        "problem_statement": "<h2>Password Validation</h2>\r\n<div class='problem-description'>\r\nAn engineer is designing a system and needs to create valid passwords for it. However, the passwords must follow specific rules to be considered valid. Each password the engineer proposes must be evaluated to ensure it is valid according to these rules.\r\n<br>\r\n<strong>Password Validation Rules:</strong>\r\n<ol>\r\n    <li>An empty password is always valid.</li>\r\n    <li>If a valid password <em>A</em> exists, adding the same character <em>X</em> to both the beginning and the end of <em>A</em> creates a new valid password <em>C</em>. For example, if <em>A</em> = \"aa\", adding 'b' gives <em>C</em> = \"baab\" which is valid.</li>\r\n    <li>If two passwords <em>A</em> and <em>B</em> are valid, their concatenations <em>AB</em> and <em>BA</em> are also valid. For example, if <em>A</em> = \"aa\" and <em>B</em> = \"bb\", then <em>AB</em> = \"aabb\" and <em>BA</em> = \"bbaa\" are valid.</li>\r\n</ol>\r\nThe engineer proposed <em>N</em> passwords, each consisting of only lowercase English characters, where the <em>i</em>th password is denoted <code>passwords[i]</code>. Determine if each password is valid or not. A valid password is denoted by 1 in the answer array while an invalid password is denoted by 0.\r\n</div>\r\n<div class='examples'>\r\n<div class='input-format'>\r\n<strong>Input:</strong>\r\n<pre>passwords = [\"abba\", \"abca\"]</pre>\r\n</div>\r\n<div class='output-format'>\r\n<strong>Output:</strong>\r\n<pre>[1, 0]</pre>\r\n</div>\r\n<div class='explanation'>\r\n<strong>Explanation:</strong>\r\nChecking 'abba':\r\n<ul>\r\n    <li>The empty string is valid per the first rule.</li>\r\n    <li>Under the second rule, the same character can be added to the beginning and end of a valid password. Add 'b' to the beginning and end of the empty string to have 'bb', a valid password.</li>\r\n    <li>Using the same rule, 'a' is added to the beginning and end of the 'bb' password. Again, the string is valid.</li>\r\n</ul>\r\nThe string is valid, so the answer array is [1].\r\n<br>\r\nChecking 'abca':\r\n<ul>\r\n    <li>Using rule 2, a letter can be added to both ends of a string without altering its validity. The 'a' added to the beginning and end of 'bc' does not change its validity.</li>\r\n    <li>The remaining string 'bc', is not valid. There is no rule allowing the addition of different characters to the ends of a string.</li>\r\n</ul>\r\nSince the string is invalid, append 0 to the answer array. There are no more strings to test, so return [1, 0].\r\n</div>\r\n</div>\r\n\r\n<div class='constraints'>\r\n<h3>Constraints</h3>\r\n<ul>\r\n    <li>1 &le; <em>N</em> &le; 10</li>\r\n    <li><code>passwords[i]</code> consists of lowercase English letters, [a-z].</li>\r\n    <li>1 &le; |<code>passwords[i]</code>| &le; 10<sup>5</sup></li>\r\n</ul>\r\n</div>\r\n<div class='examples'>\r\n<div class='input-format'>\r\n<strong>Sample Case 0</strong>\r\n<h3>Input For Custom Testing</h3>\r\n<pre>STDIN     FUNCTION\r\n2         passwords[] size n = 2\r\n\"daabbd\"    passwords[] = [\"daabbd\",\r\n\"abc\"     \"abc\"]</pre>\r\n</div>\r\n<div class='output-format'>\r\n<strong>Sample Output</strong>\r\n<pre>1\r\n0</pre>\r\n</div>\r\n<div class='explanation'>\r\n<strong>Explanation:</strong>\r\n<ul>\r\n    <li>For the first string, the strings 'aa' and 'bb' are valid, therefore, the string 'aabb' is also valid. Since the string 'aabb' is valid, adding a character 'd' to both the end and the beginning of it will produce a valid password: 'daabbd'.</li>\r\n    <li>For the second string, we cannot obtain the password \"abc\" using any sequence of valid operations. Thus, it is invalid.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n<div class='examples'>\r\n<div class='input-format'>\r\n<strong>Sample Case 1</strong>\r\n<h3>Input For Custom Testing</h3>\r\n<pre>STDIN     FUNCTION\r\n1         passwords[] size n = 1\r\n\"acac\"      passwords[] = [\"acac\"]</pre>\r\n</div>\r\n<div class='output-format'>\r\n<strong>Sample Output</strong>\r\n<pre>0</pre>\r\n</div>\r\n<div class='explanation'>\r\n<strong>Explanation:</strong>\r\nWe cannot construct the password 'acac' by concatenation or by adding one character to both the beginning and the end. Hence, the password is invalid and the answer is 0.\r\n</div>\r\n</div>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Deshaw",
        "company_id": 60
    }
]