[
    {
        "id": 1470,
        "title": "Determine Minimum Facilities",
        "problem_statement": "<h1>Determine Minimum Facilities</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An e-commerce partner on Amazon's platform faces an operational challenge due to fluctuations in daily processing needs. To solve this, Amazon allocates a set of <code>n</code> processing facilities, each identified by a unique integer from 1 to <code>n</code>.</p>\r\n<p>Amazon selects which processing facility to activate based on comparisons between consecutive days' processing volumes:</p>\r\n<ul>\r\n    <li>If the processing volume increases compared to the previous day, Amazon activates a processing facility with a higher identifier.</li>\r\n    <li>If the processing volume decreases, Amazon activates a processing facility with a lower identifier.</li>\r\n    <li>If the processing volume remains the same as the previous day, then Amazon activates a processing facility with an identifier equal to the one used on the previous day.</li>\r\n</ul>\r\n<p>The resource allocation cost for the partner is calculated by counting the number of unique processing facilities used. Your task is to determine the minimum number of unique processing facilities that Amazon needs to use to handle the given processing volumes over <code>n</code> days.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, dailyVolume = [10, 20, 30, 15, 10]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Amazon can activate the processing facilities in the sequence: [1, 2, 3, 2, 1], resulting in a cost of 3 since the unique processing facilities used are [1, 2, 3]. It's worth noting that alternative sequences of processing facilities may also meet the processing volumes over <code>n</code> days. For example, a sequence like [4, 5, 8, 5, 4] would have the unique facilities [4, 5, 8], also incurring a cost of 3. However, it is guaranteed that no sequence can achieve a cost lower than 3, as this is the minimum number of unique processing facilities required to handle the processing volumes. Hence, the answer is 3.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: n = 4, dailyVolume = [100, 93, 106, 85]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Amazon can use the processing facilities in the following order: [3, 2, 3, 4], thus incorporating 3 different processing facilities. It's worth noting that alternative sequences of processing facilities may also meet the processing volumes over <code>n</code> days. For example, a sequence like [2, 1, 2, 3] would have the unique facilities [1, 2, 3], also incurring a cost of 3. However, it is guaranteed that no sequence can achieve a cost lower than 3, as this is the minimum number of unique processing facilities required to handle the processing volumes. Hence, the answer is 3.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: n = 9, dailyVolume = [100, 200, 150, 250, 175, 192, 130, 200, 199]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Amazon can use the processing facilities in the order: [6, 9, 6, 9, 6, 9, 6, 9, 6], thus incorporating 2 different processing facilities. It's worth noting that alternative sequences of processing facilities may also meet the processing volumes over <code>n</code> days. For example, a sequence like [1, 2, 1, 2, 1, 2, 1, 2, 1] would have the unique facilities [1, 2], also incurring a cost of 2. However, it is guaranteed that no sequence can achieve a cost lower than 2, as this is the minimum number of unique processing facilities required to handle the processing volumes. Hence, the answer is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; dailyVolume[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>determineMinimumFacilities</code> in the editor below.</p>\r\n<p><code>determineMinimumFacilities</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int dailyVolume[n]</code>: an integer array denoting the processing volumes over <code>n</code> days</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: an integer denoting the minimum number of unique processing facilities that Amazon needs to use</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_20sep",
        "company_id": 514
    },
    {
        "id": 1471,
        "title": "Maximize Hardware Performance",
        "problem_statement": "<h1>Maximize Hardware Performance</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon is upgrading its network infrastructure and needs to purchase at most two new hardware components to meet the requirement. There are two arrays, <code>expense</code> and <code>performance</code> relating to the <code>n</code> available hardware components. Here <code>expense[i]</code> and <code>performance[i]</code> represent the cost and performance rating of the <code>i<sup>th</sup></code> hardware component. Due to procurement limitations, the maximum total expense of the two hardware components is <code>spending_cap</code>.</p>\r\n<p>Given two arrays, <code>expense</code> and <code>performance</code>, find the maximum possible performance rating that can be achieved with at most two hardware components whose total expense is less than or equal to <code>spending_cap</code>.</p>\r\n\r\n<p>Complete the function <code>findMaximumPerformance</code> in the editor below.</p>\r\n<p><strong>Function Signature:</strong></p>\r\n<pre><code class='language-cpp'>int findMaximumPerformance(vector&lt;int&gt; expense, vector&lt;int&gt; performance, int spending_cap)</code></pre>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>int expense[n]</code>: the costs of hardware components</li>\r\n    <li><code>int performance[n]</code>: the performance ratings</li>\r\n    <li><code>int spending_cap</code>: the maximum expense</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum possible performance rating of at most two hardware components with a combined expense that is less than or equal to <code>spending_cap</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\nexpense = [4, 6, 5, 7, 1, 6]\r\nperformance = [3, 6, 2, 6, 9, 5]\r\nspending_cap = 7\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe problem asks to find the maximum performance from selecting at most two components such that their total expense does not exceed <code>spending_cap = 7</code>.\r\n</p>\r\n<ul>\r\n    <li><strong>Considering single components:</strong>\r\n        <ul>\r\n            <li>Component 1: expense=4, performance=3 (Valid)</li>\r\n            <li>Component 2: expense=6, performance=6 (Valid)</li>\r\n            <li>Component 3: expense=5, performance=2 (Valid)</li>\r\n            <li>Component 4: expense=7, performance=6 (Valid)</li>\r\n            <li>Component 5: expense=1, performance=9 (Valid)</li>\r\n            <li>Component 6: expense=6, performance=5 (Valid)</li>\r\n        </ul>\r\n        The maximum performance from a single component is 9 (from Component 5).\r\n    </li>\r\n    <li><strong>Considering two components:</strong>\r\n        <ul>\r\n            <li>Select Component 2 (expense=6, performance=6) and Component 5 (expense=1, performance=9).\r\n                Total expense = 6 + 1 = 7.\r\n                Total performance = 6 + 9 = 15.\r\n                This combination is valid as total expense (7) &le; spending_cap (7).\r\n            </li>\r\n            <li>Other valid two-component combinations:\r\n                <ul>\r\n                    <li>(Component 1, Component 5): expense=4+1=5, performance=3+9=12</li>\r\n                    <li>(Component 3, Component 5): expense=5+1=6, performance=2+9=11</li>\r\n                    <li>(Component 5, Component 6): expense=1+6=7, performance=9+5=14</li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Comparing all valid options (single or two components), the maximum performance rating achieved is 15.</p>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nexpense = [1, 2, 3, 5, 4]\r\nperformance = [1, 2, 3, 4, 6]\r\nspending_cap = 8\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> Select the 3rd and 5th hardware components (using 1-based indexing).\r\n(0-indexed: <code>expense[2]</code> and <code>expense[4]</code>).\r\nTheir total expense is <code>expense[2] + expense[4] = 3 + 4 = 7</code>, which is less than or equal to <code>spending_cap = 8</code>.\r\nTheir total performance rating is <code>performance[2] + performance[4] = 3 + 6 = 9</code>.\r\nThis is the maximum possible performance.</p>\r\n\r\n<h3>Example 3: (Sample Case 1)</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nexpense = [7, 6, 5, 4]\r\nperformance = [1, 7, 2, 4]\r\nspending_cap = 9\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> Select only the 2nd item (using 1-based indexing).\r\n(0-indexed: <code>expense[1]</code>).\r\nIts expense is <code>expense[1] = 6</code>, which is less than or equal to <code>spending_cap = 9</code>.\r\nIts performance is <code>performance[1] = 7</code>.\r\nNo combination of two items yields a higher performance within the <code>spending_cap</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; expense[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; performance[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; spending_cap &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<p><strong>Input Format For Custom Testing:</strong></p>\r\n<p>The first line contains an integer, <code>n</code>, the number of hardware components available.<br>\r\nEach of the next <code>n</code> lines contains an integer <code>expense[i]</code>, the cost of each hardware component.<br>\r\nThe next <code>n</code> lines contain an integer <code>performance[i]</code>, the performance rating of each hardware component.<br>\r\nThe last line contains an integer denoting <code>spending_cap</code>, the maximum expense.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_20sep",
        "company_id": 514
    }
]