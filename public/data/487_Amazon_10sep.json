[
    {
        "id": 1396,
        "title": "Minimum Delivery Time",
        "problem_statement": "<h1>Minimum Delivery Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon operates two delivery drones, each tasked with completing a specific number of deliveries.</p>\r\n<ul>\r\n    <li>Drone 1 must complete <code>delivery1</code> deliveries.</li>\r\n    <li>Drone 2 must complete <code>delivery2</code> deliveries.</li>\r\n    <li>Each delivery takes exactly 1 hour to complete.</li>\r\n</ul>\r\n<p>To maintain optimal drone health, both drones require charging at specific intervals:</p>\r\n<ul>\r\n    <li>Drone 1 must charge every <code>charge1</code> hours. Specifically, at hours which are multiples of <code>charge1</code>.</li>\r\n    <li>Drone 2 must charge every <code>charge2</code> hours. Specifically, at hours which are multiples of <code>charge2</code>.</li>\r\n</ul>\r\n<p>Both drones can charge simultaneously, and the charging sessions must occur at the exact specified intervals. Due to high drone traffic in the area, only one drone can be out making a delivery at any given time.</p>\r\n<p>Given integers <code>delivery1</code>, <code>delivery2</code>, <code>charge1</code>, and <code>charge2</code>, determine the minimum total time required for both drones to complete all their deliveries while adhering to the delivery and charging constraints.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: delivery1 = 3, delivery2 = 1, charge1 = 2, charge2 = 3\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>Drone 1 is out for delivery on hours 1, 3, 5. It charges on hours 2 and 4 (multiples of <code>charge1</code> = 2).</li>\r\n    <li>Drone 2 is out for delivery on hour 2. It was scheduled to charge on hour 3 (multiples of <code>charge2</code> = 3), but since it completed its delivery by hour 2, it does not need to charge.</li>\r\n</ul>\r\nNote that only one drone is out for delivery at any given hour. The minimum required time is 5 hours.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>minDeliveryTime</code> in the editor below.</p>\r\n<p><code>minDeliveryTime</code> takes the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int charge1</code>: indicates that Drone 1 needs to charge at hours which are multiples of <code>charge1</code>.</li>\r\n    <li><code>int delivery1</code>: the number of deliveries to be made by Drone 1.</li>\r\n    <li><code>int charge2</code>: indicates that Drone 2 needs to charge at hours which are multiples of <code>charge2</code>.</li>\r\n    <li><code>int delivery2</code>: the number of deliveries to be made by Drone 2.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the minimum total time (in hours) required to complete all the deliveries by the drones.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= charge1, charge2 &lt;= 3 * 10^4</code></li>\r\n    <li><code>1 &lt;= delivery1, delivery2 &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Sample Case 0</h2>\r\n<h3>Sample Input:</h3>\r\n<pre><code class='language-text'>charge1 = 2\r\ndelivery1 = 1\r\ncharge2 = 2\r\ndelivery2 = 3</code></pre>\r\n<h3>Sample Output:</h3>\r\n<pre><code class='language-text'>7</code></pre>\r\n<p><strong>Explanation:</strong> The minimum total time will be 7 hours; Drone 1 is out for delivery at hour 1, while Drone 2 is out for delivery at hours 3, 5, and 7.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_10sep",
        "company_id": 487
    },
    {
        "id": 1397,
        "title": "Retrieve Data",
        "problem_statement": "<h1>Retrieve Data</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The Data Science Team at Amazon is facing a unique challenge. A portion of their data has gone missing from their database. However, they believe they can recover the lost data based on the following information:</p>\r\n<ol>\r\n    <li>The missing data is a permutation of the characters found in the string <code>firstInfo</code>.</li>\r\n    <li>The missing data is lexicographically greater than the string <code>secondInfo</code>.</li>\r\n    <li>The missing data is the lexicographically smallest string that satisfies the above two conditions.</li>\r\n</ol>\r\n<p>In other words, they are searching for the smallest string that meets these criteria.</p>\r\n<p>A string x is lexicographically smaller than a string y if:</p>\r\n<ul>\r\n    <li><code>x[i] &lt; y[i]</code> at the first position where x and y differ, or</li>\r\n    <li><code>|x| &lt; |y|</code> and x is a prefix of y (where <code>|x|</code> denotes the length of string x).</li>\r\n</ul>\r\n<p>Given two strings, <code>firstInfo</code> and <code>secondInfo</code>, find the missing data that matches the above criteria. If no such string exists, return \"-1\".</p>\r\n<p>Complete the function <code>retrieveData</code> in the editor below.</p>\r\n<pre><code class='language-javascript'>function retrieveData(firstInfo, secondInfo) {\r\n    // Write your code here\r\n}</code></pre>\r\n<p>The function has the following parameters:</p>\r\n<ul>\r\n    <li><code>firstInfo</code>: the string that contains the first information.</li>\r\n    <li><code>secondInfo</code>: the string that contains the second information.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>string</code>: the missing data that matches the above criteria if possible, otherwise return \"-1\".</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aca\", secondInfo = \"aba\"\r\nOutput: \"aca\"</code></pre>\r\n<p><strong>Explanation:</strong> The data that satisfies the given conditions is either \"aca\" or \"caa\". Both options are valid permutations of <code>firstInfo</code> and are lexicographically greater than <code>secondInfo</code>. Since the goal is to retrieve the lexicographically smallest piece of missing data, \"aca\" is the correct result.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aac\", secondInfo = \"aa\"\r\nOutput: \"aac\"</code></pre>\r\n<p><strong>Explanation:</strong> The possible pieces of missing data that satisfy the conditions are \"aac\", \"aca\", and \"caa\". Since \"aac\" is the lexicographically smallest, it is the most suitable piece of data to retrieve.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |firstInfo|, |secondInfo| &lt;= 5000</code></li>\r\n    <li><code>firstInfo</code> and <code>secondInfo</code> consist of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_10sep",
        "company_id": 487
    }
]