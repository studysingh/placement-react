[
    {
        "id": 871,
        "title": "Count Valid Prefix Sequences",
        "problem_statement": "<h1>Count Valid Prefix Sequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a binary sequence of length <code>n</code> as a string, perform the following operation any number of times:</p>\r\n<ul>\r\n    <li>Append either a '0' or a '1' to the end of the sequence.</li>\r\n</ul>\r\n<p>A sequence is considered valid if it is possible to make the total number of \"10\" subsequences in the updated sequence exactly equal to <code>k</code>.</p>\r\n<p>Your task is to count the total number of valid non-empty prefix sequences of the given binary sequence.</p>\r\n\r\n<h3>Notes:</h3>\r\n<ol>\r\n    <li>A sequence is a subsequence if it can be obtained by deleting digits (possibly none) without altering the relative positions.</li>\r\n    <li>A non-empty prefix sequence is any sequence derived by deleting digits from the end of the given sequence, ensuring the length of the prefix is at least 1.</li>\r\n</ol>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>calculateTotalPrefix</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string sequence</code>: the binary sequence</li>\r\n    <li><code>int k</code>: the number of \"10\" subsequences desired</li>\r\n</ul>\r\n<p>Returns <code>int</code>: the total number of non-empty prefix sequences of the given binary sequence</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>0 <= k <= 10<sup>9</sup></code></li>\r\n    <li>The sequence consists only of digits 0 and 1.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> <code>sequence = \"100\"</code>, <code>k = 1</code></p>\r\n<p><strong>Output:</strong> <code>2</code></p>\r\n<p><strong>Explanation:</strong> Analyze all non-empty prefix sequences:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Prefix Sequence</th>\r\n            <th>Appended String</th>\r\n            <th>Sequence Formed After Append</th>\r\n            <th>Is Good?</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>\"1\"</td>\r\n            <td>\"01\"</td>\r\n            <td>\"101\"</td>\r\n            <td>Good (There are k=\"10\" sequences)</td>\r\n        </tr>\r\n        <tr>\r\n            <td>\"10\"</td>\r\n            <td>Blank</td>\r\n            <td>\"10\"</td>\r\n            <td>Good (There are k=\"10\" sequences)</td>\r\n        </tr>\r\n        <tr>\r\n            <td>\"100\"</td>\r\n            <td>--</td>\r\n            <td>--</td>\r\n            <td>Not Good (Not possible)</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>For \"100\", there are already 2 subsequences of \"10\": indices (0, 1) and indices (0, 2). Hence, the number of non-empty prefix sequences of the given binary sequence is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Agoda_20april",
        "company_id": 266
    },
    {
        "id": 872,
        "title": "HackerMan Maze Navigation",
        "problem_statement": "<h1>HackerMan Maze Navigation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a grid-based maze, each cell is either empty (0) or contains an obstacle (1).</p>\r\n<p>HackerMan must navigate from cell (0, 0) to cell (n-1, m-1) with a jump parameter k, allowing these moves:</p>\r\n<ul>\r\n    <li>Right: (i, j) &rarr; (i, j+x) where 1 &le; x &le; k</li>\r\n    <li>Down: (i, j) &rarr; (i+x, j) where 1 &le; x &le; k</li>\r\n    <li>Left: (i, j) &rarr; (i, j-x) where 1 &le; x &le; k</li>\r\n    <li>Up: (i, j) &rarr; (i-x, j) where 1 &le; x &le; k</li>\r\n</ul>\r\n<p>For any move, all cells in the path must be obstacle-free and within maze boundaries.</p>\r\n<p>Determine the minimum number of moves required to reach the destination, or return -1 if it is impossible.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinimunMoves</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int maze[n][m]</code>: the maze where HackerMan is standing</li>\r\n    <li><code>int k</code>: the maximum distance HackerMan can traverse in one move</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int</code> the minimum number of moves in which HackerMan can reach the destination cell (n-1, m-1)</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p>Consider n=2, m=2, jump parameter k=2, and maze = [[0, 0], [1, 0]].</p>\r\n<p>The maze looks like this:</p>\r\n<pre><code class='language-text'>0 0\r\n1 0</code></pre>\r\n<p><strong>Explanation:</strong> The following sequence of moves can be performed: (0, 0) &rarr; (0, 1) &rarr; (1, 1). Hence, HackerMan can reach the end in 2 moves, which is the minimum possible. The answer is 2.</p>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nm = 3\r\nmaze = [[0,0,0],[0,0,1],[0,0,0]]\r\nk = 5\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The maze can be represented as:</p>\r\n<pre><code class='language-text'>0 0 0\r\n0 0 1\r\n0 0 0</code></pre>\r\n<p>The following sequence of moves can be performed: (0, 0) &rarr; (0, 2) &rarr; (2, 2). This takes 2 moves.</p>\r\n\r\n<h3>Example 3: (Sample Case 1)</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nm = 3\r\nmaze = [[0,1,0],[0,0,0],[1,0,0]]\r\nk = 5\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> The maze can be represented as:</p>\r\n<pre><code class='language-text'>0 1 0\r\n0 0 0\r\n1 0 0</code></pre>\r\n<p>HackerMan is blocked and cannot reach the destination from cell (0, 0).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; n &le; 100</li>\r\n    <li>1 &le; m &le; 100</li>\r\n    <li>1 &le; k &le; 100</li>\r\n    <li>Each cell of the grid contains either 0 or 1.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Agoda_20april",
        "company_id": 266
    }
]