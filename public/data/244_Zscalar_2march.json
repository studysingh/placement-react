[
    {
        "id": 769,
        "title": "Movie Ratings",
        "problem_statement": "<h1>Movie Ratings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alex loves movies and keeps track of their ratings, which can be either positive or negative integers.</p>\r\n<p>Alex is preparing for a film festival and wants to choose a subsequence of movies that meets the following criteria:</p>\r\n<ul>\r\n<li>The total sum of their ratings is maximized.</li>\r\n<li>Also must follow the list in order. You can skip more than one movie but not consecutively. For instance, if ratings = [1, 3, -2, 4], you can include either the first and fourth numbers or both the first and third numbers to achieve a maximal rating sum of 4.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>maxMovieRatings</code> in the editor with the following parameter(s):</p>\r\n<p><code>ratings</code>: an integer array of movie ratings</p>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the maximum possible rating sum for a subsequence of movies</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: ratings = [2, 4, -2, 4]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The maximal choices are [2, 4, -2] for a sum of 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: ratings = [-1, -2, -3, -4, -5]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> Alex picks the item -1 from the ratings array [-1, -2, -3, -4, -5] to get a maximum rating of -1.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: ratings = [-1, -2, -3, -4, -5]\r\nOutput: -6</code></pre>\r\n<p><strong>Explanation:</strong> Alex picks the items -1 and -5 from the ratings array [-1, -2, -3, -4, -5] to get a maximum rating of -1 + -5 = -6.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n<li><code>-1000 &lt;= ratings[i] &lt;= 1000</code>, where <code>0 &lt;= i &lt; n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zscalar_2march",
        "company_id": 244
    },
    {
        "id": 770,
        "title": "Shortest Substring",
        "problem_statement": "<h1>Shortest Substring</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Determine the length of the shortest substring to delete from a string <code>s</code> of lowercase English letters such that the resulting string contains only distinct characters.</p>\r\n<p>A substring is a sequence of characters that appear consecutively in a string. If a substring is deleted, the remaining parts of the string are joined together. If no deletion is necessary, the answer is 0.</p>\r\n<p>Complete the function <code>findShortestSubstring</code> in the editor with the following parameter:</p>\r\n<ul>\r\n    <li><code>s</code>: the string to analyze</li>\r\n</ul>\r\n<p><strong>Returns:</strong> An integer representing the length of the shortest substring that should be deleted.</p>\r\n\r\n<pre><code class='language-python'>\r\ndef findShortestSubstring(s):\r\n    # Write your code here\r\n    pass\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"kbbcbpcpr\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Given string <code>s = \"kbbcbpcpr\"</code>, if we remove the substring 'bcb', the remaining parts 'kbb' and 'pcpr' join to form 'kbbpcpr'. This new string 'kbbpcpr' contains only distinct characters. The length of 'bcb' is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"abc\"\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The string <code>s = \"abc\"</code> already contains distinct characters only, so no deletion is necessary. The length of the substring to delete is 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |s| &lt;= 10^5</code></li>\r\n    <li><code>s</code> consists of lowercase English letters only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zscalar_2march",
        "company_id": 244
    },
    {
        "id": 771,
        "title": "Efficient Team Formation",
        "problem_statement": "<h1>Efficient Team Formation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Count all possible strong team combinations. A team is strong if the number of weak players in any sub-array of size <code>k</code> is less than or equal to a threshold <code>x</code>. The team is represented by a string of length <code>n</code> where each character corresponds to a player.</p>\r\n<p><strong>Task:</strong> Determine the number of unique non-empty substrings (teams) that qualify as strong teams based on the thresholds <code>k</code> and <code>x</code>.</p>\r\n<p>Complete the function `countEfficientFormations` in the editor below.</p>\r\n<p>The function is expected to return an <code>INTEGER</code>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>string team</code>: the lineup of players, where each character corresponds to a player's unique attribute or skill.</li>\r\n    <li><code>vector&lt;bool&gt; efficiencyArray</code>: an array of booleans where <code>efficiencyArray[i]</code> is 1 or 0, indicating strong or weak players, respectively.</li>\r\n    <li><code>int k</code>: the size of the sub-array to check for weak players.</li>\r\n    <li><code>int x</code>: the maximum number of weak players allowed in any sub-array of size <code>k</code> for a team to be considered strong.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of unique strong team formations.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: team = \"titus\", efficiencyArray = [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 1, x = 1\r\nOutput: 14</code></pre>\r\n<p><strong>Explanation:</strong> Here are the 14 unique strong team formations:</p>\r\n<ol>\r\n    <li>\"t\"</li>\r\n    <li>\"ti\"</li>\r\n    <li>\"tit\"</li>\r\n    <li>\"titu\"</li>\r\n    <li>\"titus\"</li>\r\n    <li>\"i\"</li>\r\n    <li>\"it\"</li>\r\n    <li>\"itu\"</li>\r\n    <li>\"itus\"</li>\r\n    <li>\"tu\"</li>\r\n    <li>\"tus\"</li>\r\n    <li>\"u\"</li>\r\n    <li>\"us\"</li>\r\n    <li>\"s\"</li>\r\n</ol>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: team = \"cdcdcd\", efficiencyArray = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], k = 1, x = 1\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> Here are the 5 unique strong team formations:</p>\r\n<ol>\r\n    <li>\"c\"</li>\r\n    <li>\"cd\"</li>\r\n    <li>\"d\"</li>\r\n    <li>\"cdc\"</li>\r\n    <li>\"dcd\"</li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 1000</code> (where <code>n</code> is <code>team.length()</code>)</li>\r\n    <li><code>1 &lt;= k &lt;= n</code></li>\r\n    <li><code>efficiencyArray.length() == 26</code></li>\r\n    <li><code>efficiencyArray[i] &isin; {0, 1}</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zscalar_2march",
        "company_id": 244
    },
    {
        "id": 772,
        "title": "Encryption Validity Test",
        "problem_statement": "<h1>Encryption Validity Test</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Encryption is the process of converting information algorithmically so that only a valid recipient can read it. A message encrypted before its validity period expires is not secure. This is its validity period. An attacker has a limited processing power. To decrypt a message, the number of keys a hijacker can test per second is the instruction count. The size of the message is the number of keys divided by the instruction count. The average time to find a key is very high. To achieve a balance between the time required for encryption/decryption and the strength of the encryption, the validity period of the message must be taken into consideration.</p>\r\n<p>Given the number of keys, a hijacker can test per second, determine if the encrypted information should remain confidential throughout its validity period. Each test will return two items of information as integers:</p>\r\n<ul>\r\n    <li>Can a hijacker crack the code within the period? (1 if true, 0 if false)</li>\r\n    <li>The strength of the encryption, that is, the number of keys that must be tested to break the encryption.</li>\r\n</ul>\r\n\r\n<p>The strength of the encryption is determined as follows:</p>\r\n<ul>\r\n    <li>A key is a list of positive integers, <code>keys[i]</code> that act as keys.</li>\r\n    <li>The degree of divisibility of an element is the number of elements in the set <code>keys[j]</code> such that <code>keys[j]</code> is less than <code>i</code> and are divisors of the element, i.e. <code>element modulo keys[j] == 0</code>.</li>\r\n    <li>The element <code>m</code> that has the maximum number of divisors (or degree of divisibility) in <code>keys</code> is used to determine the strength of the encryption.</li>\r\n    <li>The strength of the encryption is defined as (the degree of divisibility of <code>m</code>) * 10<sup>5</sup>.</li>\r\n</ul>\r\n\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>Any divisor of a key must be greater than 1.</li>\r\n    <li>The list may",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zscalar_2march",
        "company_id": 244
    }
]