[
    {
        "id": 283,
        "title": "Array Challenge",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Array Challenge</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Have the function <code>ArrayChallenge(arr)</code> read the array of numbers stored in <code>arr</code> which will contain a sliding window size, N, as the first element in the array and the rest will be a list of numbers. Your program should return the Moving Median for each element based on the element and its N-1 predecessors, where N is the sliding window size. The final output should be a string with the moving median corresponding to each entry in the original array separated by commas.</p>\n        \n        <p>Note that for the first few elements (until the window size is reached), the median is computed on a smaller number of entries. For example: if <code>arr</code> is [3, 1, 3, 5, 10, 6, 4, 3, 1] then your program should output \\\"1,2,3,5,6,6,4,3\\\"</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>An array <code>arr</code> where the first element is the sliding window size N, followed by a list of numbers.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>A string containing the moving medians separated by commas.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The sliding window size N will always be less than or equal to the length of the array minus 1.</li>\n            <li>The array will contain at least 2 elements (N and one number).</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input: [3, 1, 3, 5, 10, 6, 4, 3, 1]</pre>\n            <pre class=\\\"output\\\">Output: \\\"1,2,3,5,6,6,4,3\\\"</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <ul>\n                    <li>For the first element (1), the median is 1 itself.</li>\n                    <li>For the second element (3), the median of [1,3] is 2.</li>\n                    <li>For the third element (5), the median of [1,3,5] is 3.</li>\n                    <li>For the fourth element (10), the median of [3,5,10] is 5.</li>\n                    <li>For the fifth element (6), the median of [5,10,6] is 6.</li>\n                    <li>And so on...</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1IY4xElAOV5yHq2GCf7xqvNDyqN-dcJwE0ts2fjgSXos/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Vmock",
        "company_id": 79
    },
    {
        "id": 314,
        "title": "Array Challenge",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Array Challenge</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Have the function <code>ArrayChallenge(arr)</code> take the array of numbers stored in <code>arr</code> and determine if the array forms a superincreasing sequence where each element in the array is greater than the sum of all previous elements. The array will only consist of positive integers. For example: if <code>arr</code> is [1, 3, 6, 13, 54] then your program should return the string \\\"true\\\" because it forms a superincreasing sequence. If a superincreasing sequence isn\\'t formed, then your program should return the string \\\"false\\\".</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>An array of positive integers.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return \\\"true\\\" if the array forms a superincreasing sequence, otherwise return \\\"false\\\".</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The array will only consist of positive integers.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[1, 2, 3, 4]</pre>\n            <pre class=\\\"output\\\">Output:\nfalse</pre>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[1, 2, 5, 10]</pre>\n            <pre class=\\\"output\\\">Output:\ntrue</pre>\n        </div>\n    </div>\n\n    <div class=\\\"code-block\\\">\n        <h3>Code</h3>\n        <pre class=\\\"code\\\">def ArrayChallenge(arr):\n    # code goes here\n    return arr\n\n# keep this function call here\nprint(ArrayChallenge(input()))</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ClXfieIaHlTCWbUA-sRrnTxboVqblCnGBa-va9gxPHM/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Vmock",
        "company_id": 79
    },
    {
        "id": 315,
        "title": "Matrix Challenge",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Matrix Challenge</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Have the function <code>MatrixChallenge(strArr)</code> read the <code>strArr</code> parameter being passed which will represent a 9x9 Sudoku board of integers ranging from 1 to 9. The rules of Sudoku are to place each of the 9 integers in every row and column and not have any integers repeat in the respective row, column, or 3x3 sub-grid. The input <code>strArr</code> will represent a Sudoku board and it will be structured in the following format: <code>[\\\"(N,N,N,N,N,x,x,x,x)\\\", \\\"(...)\\\", \\\"(...)\\\"]</code> where N stands for an integer between 1 and 9 and x will stand for an empty cell. Your program will determine if the board is legal; the board also does not necessarily have to be finished. If the board is legal, your program should return the string <code>legal</code> but if it isn\\'t legal, it should return the 3x3 quadrants (separated by commas) where the errors exist. The 3x3 quadrants are numbered from 1 to 9 starting from top-left going to bottom-right.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A list of strings representing the Sudoku board.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return \\\"legal\\\" if the board is valid, otherwise return the quadrants with errors.</p>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[\\\"(1,2,3,4,5,6,7,8,1)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(1,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\"]</pre>\n            <pre class=\\\"output\\\">Output:\n1,3,4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The errors are in quadrants 1, 3, and 4 because of the repeating integer 1.</p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[\\\"(1,2,3,4,5,6,7,8,9)\\\", \\\"(6,x,5,x,3,x,x,4,x)\\\", \\\"(2,x,1,1,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,x)\\\", \\\"(x,x,x,x,x,x,x,x,9)\\\"]</pre>\n            <pre class=\\\"output\\\">Output:\n3,4,5,9</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/167ZIxCL4uon4Db21tX478LXdbbMBo-KdygpzKZXDIeg/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Vmock",
        "company_id": 79
    }
]