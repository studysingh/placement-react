[
    {
        "id": 438,
        "title": "TikTok Viral Posts",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2></h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>TikTok uses a sophisticated algorithm to promote viral content. This algorithm relies on specific \\'Viral Factors\\' that measure the level of engagement a post receives. A key part of this engagement is determined by the post\\'s <strong>spikeSpread</strong>, which measures the gap between engagement spikes.</p>\n        <p>You are given an array <code>activityIndex</code> of length <code>n</code> representing the activity score of each of the <code>n</code> posts. The engagement pattern of each post is represented by the binary form of its <code>activityIndex</code>, where each \\'set-bit\\' indicates an engagement spike.</p>\n        <p>The <strong>spikeSpread</strong> of a post is defined as the maximum gap between any two consecutive engagement spikes.</p>\n        <p>For example, let\\'s say a post with <code>activityIndex = 75</code> is given, then its engagement pattern (75 in binary) is <code>1001011</code>. The maximum gap between consecutive engagement spikes = <code>max(2, 1, 0) = 2</code>. Thus, the <code>spikeSpread/activityIndex = 75</code> is 2.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>Given the array <code>activityIndex</code> of length <code>n</code>, and an integer <code>k</code>, sort the posts in decreasing order of their <strong>spikeSpread</strong>. If there are multiple posts with the same <strong>spikeSpread</strong>, sort them in decreasing order by their <code>activityIndex</code>. Return the <code>activityIndex</code> of the first <code>k</code> posts from this sorted list of array.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The function must return an array of integers representing the <code>activityIndex</code> of the top <code>k</code> viral posts.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ activityIndex[i] ≤ 10<sup>9</sup></code></li>\n            <li><code>1 ≤ k ≤ n</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nactivityIndex = [11, 3, 4, 9, 7]\nk = 3</pre>\n            <pre class=\\\"output\\\">Output:\n[11, 9, 7]</pre>\n            <div class=\\\"explanation\\\">\n                <p>The binary representations of the <code>activityIndex</code> are <code>[1011, 0011, 0100, 1001, 0111]</code> and their corresponding <strong>spikeSpread</strong> values are <code>[2, 1, 0, 1, 2]</code>. The highest <strong>spikeSpread</strong> value among the posts is 2, for posts with <code>activityIndex = 11</code> and <code>activityIndex = 7</code>. Thus, the top 3 posts are <code>11</code>, <code>9</code>, and <code>7</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Z0F4Q5YiZTYGvRi3QZHg1ryOMiyTeRrhLZA-RKhNjDM/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nstruct Post {\\n    int activityIndex;\\n    int spikeSpread;\\n};\\n\\nint computeSpikeSpread(int activityIndex) {\\n    vector<int> setBits;\\n    int pos = 0;\\n    int num = activityIndex;\\n    while (num > 0) {\\n        if (num & 1) {\\n            setBits.push_back(pos);\\n        }\\n        num >>= 1;\\n        pos++;\\n    }\\n    int count = setBits.size();\\n    if (count == 1) {\\n        return 1;\\n    }\\n    int max_gap = 0;\\n    for (int i = 1; i < count; ++i) {\\n        int gap = setBits[i] - setBits[i-1];\\n        if (gap > max_gap) {\\n            max_gap = gap;\\n        }\\n    }\\n    return max_gap;\\n}\\n\\nbool comparePosts(const Post &a, const Post &b) {\\n    if (a.spikeSpread != b.spikeSpread) {\\n        return a.spikeSpread > b.spikeSpread;\\n    }\\n    return a.activityIndex > b.activityIndex;\\n}\\n\\nint* getTopKViralPosts(int activityIndex_count, int* activityIndex, int k, int* result_count) {\\n    vector<Post> posts(activityIndex_count);\\n    \\n    for(int i = 0; i < activityIndex_count; ++i){\\n        posts[i].activityIndex = activityIndex[i];\\n        posts[i].spikeSpread = computeSpikeSpread(activityIndex[i]);\\n    }\\n    \\n    sort(posts.begin(), posts.end(), comparePosts);\\n    \\n    *result_count = min(k, activityIndex_count);\\n    \\n    int* result = (int*)malloc((*result_count) * sizeof(int));\\n    for(int i = 0; i < *result_count; ++i){\\n        result[i] = posts[i].activityIndex;\\n    }\\n    \\n    return result;\\n}",
        "company_name": "Tik Tok ",
        "company_id": 128
    },
    {
        "id": 439,
        "title": "TikTok Creator Support",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>TikTok Creator Support</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You\\'re managing TikTok\\'s viral trend team, responsible for boosting the platform\\'s popularity by working with content creators.</p>\n        <p>Each content creator on TikTok has an <strong>impactValue</strong> associated with them, which represents the overall effect they have on the platform.</p>\n        <p>The <strong>impactValue</strong> associated with the creators are of the following two types:</p>\n        <ul>\n            <li><strong>Cost (Negative impactValue):</strong> Indicates a creator that incurs expenses and resources to achieve visibility and engagement.</li>\n            <li><strong>Yield (Positive impactValue):</strong> Indicates a creator that generates engagement and followers with minimal or no resource investment.</li>\n        </ul>\n        <p>Your task is to determine the optimal order for supporting the content creators to maximize TikTok\\'s popularity by ensuring that the cumulative <strong>impactValue</strong>—the sum of all supported creators\\' <strong>impactValues</strong>—remains positive for as many creators as possible.</p>\n        <p>Given an array of creators\\' <strong>impactValue</strong> of length <code>n</code>, find the maximum number of creators you can support while maintaining a positive cumulative <strong>impactValue</strong> throughout the process.</p>\n        <p>Note: Initially the cumulative <strong>impactValue</strong> is considered to be 0.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer <code>n</code>, the number of creators.</p>\n        <p>The second line contains <code>n</code> space-separated integers representing the <strong>impactValue</strong> of each creator.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The function must return an integer representing the maximum number of creators you can support.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10<sup>5</sup></code></li>\n            <li><code>-10<sup>9</sup> ≤ impactValue[i] ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\nimpactValue = [2, 5, -3, 1, -2, -8]</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>One optimal order of support can be <code>[2, 5, -3, 1]</code>. This allows us to analyze how the process unfolds with this sequence.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1843jZJUpGf9oXI1cq961U33qHNKgNezBHHC8nw3McEw/edit?usp=sharing",
        "solution_code": "Please convert this problem statement image into clean, structured HTML code that can be stored in a database and displayed on a website. The HTML should:\\n\\n1. Use semantic HTML5 elements\\n2. Include proper formatting for:\\n   - Problem title\\n   - Problem description\\n   - Input/Output formats\\n   - Constraints\\n   - Examples\\n   - Code blocks\\n   - Mathematical formulas (if any)\\n   - Tables (if any)\\n   - Lists\\n   - Images (if necessary)\\n\\n3. Follow this structure:\\n<div class=\\\"problem-container\\\">\\n    <div class=\\\"problem-description\\\">\\n        [Problem text here]\\n    </div>\\n    \\n    <div class=\\\"input-format\\\">\\n        <h3>Input Format</h3>\\n        [Input description]\\n    </div>\\n    \\n    <div class=\\\"output-format\\\">\\n        <h3>Output Format</h3>\\n        [Output description]\\n    </div>\\n    \\n    <div class=\\\"constraints\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            [Constraints list]\\n        </ul>\\n    </div>\\n    \\n    <div class=\\\"examples\\\">\\n        <h3>Examples</h3>\\n        <div class=\\\"example\\\">\\n            <pre class=\\\"input\\\">Input:\\n[Sample input]</pre>\\n            <pre class=\\\"output\\\">Output:\\n[Sample output]</pre>\\n            <div class=\\\"explanation\\\">\\n                [Explanation if any]\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\nPlease ensure the HTML is properly formatted and escaped for database storage. The code should be compatible with modern browsers and responsive design principles.",
        "company_name": "Tik Tok ",
        "company_id": 128
    }
]