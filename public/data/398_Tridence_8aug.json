[
    {
        "id": 1179,
        "title": "Optimal Server Load Balancing",
        "problem_statement": "<h1>Optimal Server Load Balancing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are managing a network of servers, each capable of handling a certain number of tasks concurrently. You receive a batch of tasks with varying resource requirements, and you need to assign each task to a server such that:</p>\r\n<ul>\r\n    <li>No server is assigned tasks exceeding its capacity.</li>\r\n    <li>The maximum load difference between any two servers is minimized.</li>\r\n</ul>\r\n<p>Here, the load of a server is the total resource requirement of the tasks assigned to it.</p>\r\n<p>Your task is to find the minimal possible maximum load difference between the most loaded server and the least loaded server after assigning all tasks optimally.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Implement the function <code>minimizeLoadDifference</code>. The function should take the number of servers, the capacities of the servers, and the list of task resource requirements, and return the minimal possible maximum load difference after optimally assigning all tasks.</p>\r\n\r\n<h3>Parameters</h3>\r\n<ul>\r\n    <li><strong>servers</strong> (int): The number of servers available.</li>\r\n    <li><strong>capacities</strong> (List[int]): A list of integers where <code>capacities[i]</code> represents the maximum concurrent capacity (maximum total resource load) of the i-th server.</li>\r\n    <li><strong>T</strong> (int): The number of tasks.</li>\r\n    <li><strong>tasks</strong> (List[int]): A list of integers representing the resource requirement of each task.</li>\r\n</ul>\r\n\r\n<h3>Return</h3>\r\n<ul>\r\n    <li>An integer representing the minimal possible maximum load difference achievable after assigning all tasks optimally.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer <code>servers</code>, representing the number of servers available.</p>\r\n<p>The second line contains <code>servers</code> space-separated integers, representing the <code>capacities</code> of each server.</p>\r\n<p>The third line contains an integer <code>T</code>, representing the number of tasks.</p>\r\n<p>The fourth line contains <code>T</code> space-separated integers, representing the resource requirement of each <code>task</code>.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single integer denoting the minimal possible maximum load difference.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; servers &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; capacities[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; T &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; tasks[i] &le; 10<sup>5</sup></code></li>\r\n    <li><code>Sum of tasks[i] &le; Sum of capacities[i]</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n10 10 10 10\r\n6\r\n2 4 5 6 3 1\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> Here, you have 4 servers each with capacity 10, and 6 tasks with sizes [2, 4, 5, 6, 3, 1]. The goal is to assign tasks so no server exceeds capacity and the difference between the busiest and least busy server is minimized. The minimal possible difference is 1, meaning the loads can be balanced very evenly across servers without overloading any.</p>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tridence_8aug",
        "company_id": 398
    },
    {
        "id": 1180,
        "title": "Enigma function",
        "problem_statement": "<h1>Enigma function</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Enigma is a function that takes 3 inputs, <code>X</code>, <code>i</code>, and <code>j</code>, and produces a single output <code>K</code>. Modulo of the Enigma function (for every value of <code>i</code> and <code>j</code>) is calculated by the following formula:</p>\r\n<p><code>K = Enigma(X, i, j) % mod</code></p>\r\n<p>The <code>Enigma(X, i, j)</code> function is defined as:</p>\r\n<pre><code class='language-text'>\r\n{ X                                 if i == 0 or j == 0\r\n{\r\n{ sum_{p=0}^{j} Enigma(X, i-1, p) % mod   Otherwise\r\n</code></pre>\r\n<p>The value of <code>mod</code> is constant for every test case, <code>mod = 100000007</code>.</p>\r\n<p>Calculate the value of <code>K</code>, that is, <code>Enigma(X, i, j)</code> modulo <code>100000007</code>, for a given value of <code>X</code>, <code>i</code>, and <code>j</code>.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the <code>solve</code> function provided in the editor. This function takes the following 3 parameters and returns the required answer.</p>\r\n\r\n<h3>Parameters:</h3>\r\n<ul>\r\n    <li><code>X</code>: Represents the value of <code>X</code> in the Enigma function</li>\r\n    <li><code>i</code>: Represents the value of <code>i</code> in the Enigma function</li>\r\n    <li><code>j</code>: Represents the value of <code>j</code> in the Enigma function</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code>, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The next <code>T</code> lines contain three integers <code>X</code>, <code>i</code>, and <code>j</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>For each test case in a new line, return the value of Enigma output <code>K</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; X &le; 10<sup>8</sup></code></li>\r\n    <li><code>0 &le; i &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; j &le; 10<sup>5</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3 0 4\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> The value of <code>i</code> is 0, so according to the Enigma function, the output should be <code>X</code> which is 3. Thus, the answer is 3.</p>\r\n\r\n<h3>Note:</h3>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits</h3>\r\n<ul>\r\n    <li>Time Limit: 10 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages</h3>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tridence_8aug",
        "company_id": 398
    }
]