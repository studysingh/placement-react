[
    {
        "id": 1417,
        "title": "Minimize Image Processing Cost",
        "problem_statement": "<h1>Minimize Image Processing Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Devise a strategy to minimize the costs of processing <code>n</code> images, where each image requires specific filters applied for a defined time frame, and the cost to apply filters to the <code>i</code>th image is <code>filterCost[i]</code>. Each image must be processed from <code>startDay[i]</code> to <code>endDay[i]</code> (inclusive). Additionally, there is an exclusive offer to apply a filter to all <code>n</code> images at a discounted rate of <code>discountPrice</code> per day. Your goal is to create an efficient image processing plan that adheres to time constraints and budget considerations, and return the minimum cost modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<p>Complete the function <code>getMinProcessingCost</code> that takes the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int filterCost[n]</code>: the cost of filtering each image for processing</li>\r\n    <li><code>int startDay[n]</code>: the first day each image should be processed</li>\r\n    <li><code>int endDay[n]</code>: the last day each image should be processed</li>\r\n    <li><code>int discountPrice</code>: the discounted rate at which filters can be applied to all the images on one day</li>\r\n</ul>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the minimum cost to process all the images modulo (10<sup>9</sup> + 7)</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 3\r\nfilterCost = [5, 3, 6]\r\nstartDay = [1, 4, 8]\r\nendDay = [5, 5, 8]\r\ndiscountPrice = 8</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>37</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given <code>n = 3</code>, <code>filterCost = [5, 3, 6]</code>, <code>startDay = [1, 4, 8]</code>, <code>endDay = [5, 5, 8]</code> and <code>discountPrice = 8</code>.</p>\r\n<p>Consider the costs for each day if no discount is applied:</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Day(s)</th>\r\n<th>Images</th>\r\n<th>Total Cost (per day)</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>1 to 3</td>\r\n<td>[1]</td>\r\n<td>5</td>\r\n</tr>\r\n<tr>\r\n<td>4 to 7</td>\r\n<td>[1, 2]</td>\r\n<td>5 + 3 = 8</td>\r\n</tr>\r\n<tr>\r\n<td>8</td>\r\n<td>[3]</td>\r\n<td>6</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>The optimal strategy is to apply individual filters for days 1, 2, 3, and 8 (since <code>discountPrice</code> 8 is greater than 5 and 6 respectively). For days 4 and 5, the sum of individual filter costs is 8, which is equal to the <code>discountPrice</code>, so we can use the discount offer.\r\nThe modulo of the final cost is <code>5 * 3 + 8 * 2 + 6 = 15 + 16 + 6 = 37</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 4\r\nfilterCost = [4, 6, 10, 8]\r\nstartDay = [1, 3, 5, 3]\r\nendDay = [2, 5, 8, 6]\r\ndiscountPrice = 12</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>76</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given <code>n = 4</code>, <code>filterCost = [4, 6, 10, 8]</code>, <code>startDay = [1, 3, 5, 3]</code>, <code>endDay = [2, 5, 8, 6]</code> and <code>discountPrice = 12</code>.</p>\r\n<p>Consider the costs for each day if no discount is applied:</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Days</th>\r\n<th>Images</th>\r\n<th>Total Cost (per day)</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>1 to 2</td>\r\n<td>[1]</td>\r\n<td>4</td>\r\n</tr>\r\n<tr>\r\n<td>3 to 4</td>\r\n<td>[2, 4]</td>\r\n<td>6 + 8 = 14</td>\r\n</tr>\r\n<tr>\r\n<td>5</td>\r\n<td>[2, 3, 4]</td>\r\n<td>6 + 10 + 8 = 24</td>\r\n</tr>\r\n<tr>\r\n<td>6</td>\r\n<td>[3, 4]</td>\r\n<td>10 + 8 = 18</td>\r\n</tr>\r\n<tr>\r\n<td>7 to 8</td>\r\n<td>[3]</td>\r\n<td>10</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>The optimal strategy is to apply individual filters for days 1, 2, 7, and 8 (since <code>discountPrice</code> 12 is greater than 4 and 10 respectively). For days 3, 4, 5, and 6, the sum of individual filter costs (14, 24, 18) is greater than the <code>discountPrice</code> 12, so we use the discount offer on these days.\r\nThe modulo of the final cost is <code>4 * 2 + 12 * 4 + 10 * 2 = 8 + 48 + 20 = 76</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 <= filterCost[i], startDay[i], endDay[i] <= 10<sup>9</sup></code></li>\r\n    <li><code>startDay[i] <= endDay[i]</code></li>\r\n    <li><code>1 <= discountPrice <= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<p><strong>Function Signature:</strong></p>\r\n<pre><code class='language-cpp'>int getMinProcessingCost(vector&lt;int&gt; filterCost, vector&lt;int&gt; startDay, vector&lt;int&gt; endDay, int discountPrice) {\r\n    // Function body\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Deshaw_16sep",
        "company_id": 499
    },
    {
        "id": 1418,
        "title": "Passenger Processing Times",
        "problem_statement": "<h1>Passenger Processing Times</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An airport has exactly one security scanner. It can be used either for arrivals or departures. Unfortunately, sometimes many passengers arrive at the scanner at the same time with different travel directions. The <i>i</i><sup>th</sup> passenger arrives at the scanner at <code>time[i]</code> and wants to either go to departures if <code>direction[i] = 1</code> or go to arrivals if <code>direction[i] = 0</code>. Passengers form 2 lines, one for departures and one for arrivals. They are ordered by the time when they arrived at the scanner and, if the times are equal, by their passenger IDs.</p>\r\n\r\n<p>If a departing passenger and an arriving passenger reach the scanner at the same moment, there are three cases:</p>\r\n<ul>\r\n    <li>If in the previous second the scanner was not used (maybe it was used before, but not at the previous second), then the departing passenger goes first.</li>\r\n    <li>If in the previous second the scanner was used for departures, then the departing passenger goes first.</li>\r\n    <li>If in the previous second the scanner was used for arrivals, then the arriving passenger goes first.</li>\r\n</ul>\r\n<p>Passing through the scanner takes 1 second.</p>\r\n<p>For each passenger, find the time when they will pass through the security scanner.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getPassengerTimes</code> in the editor below.</p>\r\n<p><code>getPassengerTimes</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int time[n]</code>: an array of <i>n</i> integers where the value at index <i>i</i> is the time in seconds when the <i>i</i><sup>th</sup> passenger will arrive at the scanner</li>\r\n    <li><code>int direction[n]</code>: an array of <i>n</i> integers where the value at index <i>i</i> is the direction of the <i>i</i><sup>th</sup> passenger</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Deshaw_16sep",
        "company_id": 499
    }
]