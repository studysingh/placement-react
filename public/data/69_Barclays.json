[
    {
        "id": 260,
        "title": "Number of Elements Less Than K",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Number of Elements Less Than K</h2>\n        <div class=\\\"language-info\\\">Programming Language: C++14 (GCC 5.5.0)</div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are given a list of integers and an integer K. Write an algorithm to find the number of elements in the list that are strictly less than K.</p>\n        \n        <div class=\\\"code-environment\\\">\n            <p>Note: You can use <code>cout</code> to debug your code. The code may not work in case of syntax/runtime error.</p>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer - <code>element_size</code>, representing the number of elements in the list (N).</li>\n            <li>The second line consists of N space-separated integers - <code>element[1], element[2], ..., element[N]</code>, representing the list of integers.</li>\n            <li>The last line consists of an integer - <code>num</code>, representing the integer to be compared (K).</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a positive integer representing the number of elements in the list that are strictly less than <code>num</code>.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>10<sup>2</sup> ≤ num ≤ 10<sup>9</sup></li>\n            <li>10<sup>2</sup> ≤ element[1], element[2], ......., element[N] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n7\n1 7 4 5 6 3 2\n5</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The numbers that are less than 5 are 1,2,3,4.</p>\n                <p>So, the output is 4.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">int noOfElement (vector&lt;int&gt; element, int num)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1SCrMR47dB5LDHcSa-Ma2vbvk1rywaSKzvYvpgZ94eM8/edit?usp=sharing",
        "solution_code": "#include<iostream>\\n#include<string>\\n#include<vector>\\nusing namespace std;\\n\\nint noOfElement (vector<int> element, int num)\\n{\\n    int answer = 0;\\n    for(auto x : element){\\n        if(x < num){\\n            answer++;\\n        }\\n    }\\n    return answer;\\n}\\n\\nint main()\\n{\\n    int element_size;\\n    cin >> element_size;\\n    vector<int> element;\\n    for ( int idx = 0; idx < element_size; idx++ )\\n    {\\n        int temp;\\n        cin >> temp;\\n        element.push_back(temp);\\n    }\\n    int num;\\n    cin >> num;\\n    \\n    int result = noOfElement(element, num);\\n    cout << result;\\n    \\n    return 0;\\n}",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 261,
        "title": "Team Power",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Team Power</h2>\n        <div class=\\\"language-info\\\">Programming Language: C++14</div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>A random game is being played in teams by N kids, each with strength Xi. The kids stand in a line with the first kid at position 1, the second at 2, and so on. A person draws M cards randomly from a box, each card containing a pair of numbers that represents the position of kids belonging to the same team. For example, if a card contains [1, 4] and another contains [4, 3], then the kids at positions [1, 4, 3] belong to the same team. The kids whose positions do not come up on any of the cards participate as one-person teams.</p>\n\n        <p>Each team\\'s power is determined by the sum of the strengths of the kids on the team. The team with the highest power wins. Design an algorithm that outputs the power of the winning team.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer - <code>num</code>, representing the number of kids (N).</li>\n            <li>The second line consists of N space-separated integers, representing the kids\\' strength.</li>\n            <li>The third line input consists of two space-separated integers - <code>numCards</code> and <code>pairCount</code>, representing the number of times the cards are drawn (M) and the number of positions of the students that make a pair (C is always equal to 2), respectively.</li>\n            <li>The next M lines consist of C space-separated integers, representing the positions of the students that make a pair.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the power of the winning team.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ num ≤ 10<sup>5</sup></li>\n            <li>0 ≤ numCards ≤ 10<sup>5</sup></li>\n            <li>0 ≤ x ≤ 10<sup>12</sup>; where X represents kids\\' strength</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n1 1 2 3 15 8 22\n3 2\n1 2\n2 3\n4 5</pre>\n\n            <pre class=\\\"output\\\">Output:\n23</pre>\n\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>Kids at position 1, 2 and 3 form a team and the sum of their strengths is 16.</li>\n                    <li>Kids at position 4 and 5 form a team and the sum of their strengths is 23.</li>\n                    <li>The kid at position 6 will form a separate team with strength value 22.</li>\n                    <li>The winning team is that of kid 4 and 5, because their team has the maximum strength.</li>\n                    <li>So, the output is 23.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">int winTeamPower(vector&lt;int&gt; kidsStr, vector&lt;vector&lt;int&gt;&gt; teamPair)</pre>\n        <p>Where:</p>\n        <ul>\n            <li><code>kidsStr</code> is a list of kids strength</li>\n            <li><code>teamPair</code> is a 2D list where each pair contains the positions of the students that make a pair</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/16FYfvoBc3-onejlLvpPQWZX-FMO8KzSsR1FMpN2j2xI/edit?usp=sharing",
        "solution_code": "#include<iostream>\\n#include<string>\\n#include<vector>\\n#include<cstring>\\nusing namespace std;\\n\\nconst int MAX_N = 100005;\\nint p[MAX_N];\\nint r[MAX_N];\\nlong long sum[MAX_N];\\nbool vis[MAX_N];\\n\\nint find(int x) {\\n    if (p[x] != x) {\\n        p[x] = find(p[x]);\\n    }\\n    return p[x];\\n}\\n\\nvoid unite(int x, int y) {\\n    int rx = find(x);\\n    int ry = find(y);\\n    if (rx != ry) {\\n        if (r[rx] < r[ry]) {\\n            p[rx] = ry;\\n            sum[ry] += sum[rx];\\n        } else if (r[rx] > r[ry]) {\\n            p[ry] = rx;\\n            sum[rx] += sum[ry];\\n        } else {\\n            p[ry] = rx;\\n            sum[rx] += sum[ry];\\n            r[rx]++;\\n        }\\n    }\\n}\\n\\nlong long winPower(vector<long long> s, vector<vector<int>> pairs) {\\n    int n = s.size();\\n    for (int i = 0; i < n; i++) {\\n        p[i] = i;\\n        r[i] = 0;\\n        sum[i] = s[i];\\n        vis[i] = false;\\n    }\\n    for (size_t i = 0; i < pairs.size(); i++) {\\n        int u = pairs[i][0] - 1;\\n        int v = pairs[i][1] - 1;\\n        unite(u, v);\\n    }\\n    long long maxSum = 0;\\n    for (int i = 0; i < n; i++) {\\n        int root = find(i);\\n        if (!vis[root]) {\\n            maxSum = max(maxSum, sum[root]);\\n            vis[root] = true;\\n        }\\n    }\\n    return maxSum;\\n}\\n\\nint main() {\\n    int sz;\\n    cin >> sz;\\n    vector<long long> s;\\n    for (int i = 0; i < sz; i++) {\\n        long long tmp;\\n        cin >> tmp;\\n        s.push_back(tmp);\\n    }\\n    int rows, cols;\\n    cin >> rows >> cols;\\n    vector<vector<int>> pairs;\\n    for (int i = 0; i < rows; i++) {\\n        vector<int> v;\\n        for (int j = 0; j < cols; j++) {\\n            int tmp;\\n            cin >> tmp;\\n            v.push_back(tmp);\\n        }\\n        pairs.push_back(v);\\n    }\\n    long long res = winPower(s, pairs);\\n    cout << res << endl;\\n    return 0;\\n}",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 262,
        "title": "Magical Route Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Magical Route Optimization</h2>\n        <div class=\\\"language-info\\\">Programming Language: Java</div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>A state consists of N cities numbered from 0 to N-1. All the roads in the state are bidirectional. Each city is connected to another city by one direct road only. A magician travels to these cities to perform shows. He knows a magic spell that can completely eliminate the distance between any two directly connected cities. But he must be very careful because this magic spell can be performed only K number of times.</p>\n\n        <p>Write an algorithm to find the length of the shortest route between two given cities after performing the magic spell K number of times. The output is -1 if no path exists.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer - <code>numCities</code>, representing the number of cities (N).</li>\n            <li>The second line consists of an integer - <code>cityA</code>, representing the city A.</li>\n            <li>The third line consists of an integer - <code>cityB</code>, representing the city B.</li>\n            <li>The fourth line consists of an integer - <code>numMagic</code>, representing the number of times the magician can perform the magic spell (K).</li>\n            <li>The fifth line consists of two space-separated integers - <code>numRoads</code> and <code>roadProp</code>, representing the number of roads (M) and number of given properties of each road (<code>roadProp</code> (R) is always equal to 3), respectively.</li>\n            <li>The next M lines consist of R space-separated integers - <code>cityU</code>, <code>cityV</code> and <code>lenW</code>, where cityU and cityV represent the cities and lenW represents the length of the bidirectional road between the cities.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the length of the shortest route between the two given cities after performing the magic spell K number of times. Print -1 if no path exists.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ numCities ≤ 1000</li>\n            <li>0 ≤ numMagic ≤ numCities</li>\n            <li>0 ≤ cityA, cityB < numCities</li>\n            <li>0 ≤ numRoads ≤ 10<sup>4</sup></li>\n            <li>1 ≤ lenW ≤ 1000</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n0\n3\n1\n5 3\n0 1 1\n0 4 1\n1 2 2\n2 3 4\n4 3 7</pre>\n\n            <pre class=\\\"output\\\">Output:\n1</pre>\n\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>There are two possible routes between 0 and 3:</p>\n                <ul>\n                    <li>0->1->2->3</li>\n                    <li>0->4->3</li>\n                </ul>\n                <p>After reducing the distance of edge 4->3 to zero, the second route becomes 0->(4,3) and thus the minimum distance is 1.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"java\\\">public static int shortRoute(int numCities, int cityA, int cityB, int numMagic, int[][] cityConn)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1a4HbN8urirDBu0TU9tDfv7uvxky-ywka5tu0Kf6CaGM/edit?usp=sharing",
        "solution_code": "import java.util.*;\\nimport java.io.*;\\n\\npublic class Solution {\\n    static class State implements Comparable<State> {\\n        int distance;\\n        int node;\\n        int spellsUsed;\\n\\n        public State(int distance, int node, int spellsUsed) {\\n            this.distance = distance;\\n            this.node = node;\\n            this.spellsUsed = spellsUsed;\\n        }\\n\\n        public int compareTo(State other) {\\n            return Integer.compare(this.distance, other.distance);\\n        }\\n    }\\n\\n    public static int shortRoute(int numCities, int cityA, int cityB, int numMagic, int[][] cityConn) {\\n        List<List<int[]>> adj = new ArrayList<>();\\n        for (int i = 0; i < numCities; i++) {\\n            adj.add(new ArrayList<>());\\n        }\\n        for (int[] conn : cityConn) {\\n            int u = conn[0];\\n            int v = conn[1];\\n            int w = conn[2];\\n            adj.get(u).add(new int[]{v, w});\\n            adj.get(v).add(new int[]{u, w});\\n        }\\n\\n        int[][] dist = new int[numCities][numMagic + 1];\\n        for (int[] row : dist) {\\n            Arrays.fill(row, Integer.MAX_VALUE);\\n        }\\n        dist[cityA][0] = 0;\\n\\n        PriorityQueue<State> pq = new PriorityQueue<>();\\n        pq.offer(new State(0, cityA, 0));\\n\\n        while (!pq.isEmpty()) {\\n            State current = pq.poll();\\n            int currDist = current.distance;\\n            int u = current.node;\\n            int spellsUsed = current.spellsUsed;\\n\\n            if (u == cityB) {\\n                return currDist;\\n            }\\n\\n            if (currDist > dist[u][spellsUsed]) {\\n                continue;\\n            }\\n\\n            for (int[] neighbor : adj.get(u)) {\\n                int v = neighbor[0];\\n                int w = neighbor[1];\\n\\n                if (currDist + w < dist[v][spellsUsed]) {\\n                    dist[v][spellsUsed] = currDist + w;\\n                    pq.offer(new State(dist[v][spellsUsed], v, spellsUsed));\\n                }\\n\\n                if (spellsUsed < numMagic) {\\n                    if (currDist < dist[v][spellsUsed + 1]) {\\n                        dist[v][spellsUsed + 1] = currDist;\\n                        pq.offer(new State(dist[v][spellsUsed + 1], v, spellsUsed + 1));\\n                    }\\n                }\\n            }\\n        }\\n\\n        int minDist = Integer.MAX_VALUE;\\n        for (int i = 0; i <= numMagic; i++) {\\n            if (dist[cityB][i] < minDist) {\\n                minDist = dist[cityB][i];\\n            }\\n        }\\n\\n        return minDist == Integer.MAX_VALUE ? -1 : minDist;\\n    }\\n\\n    public static void main(String[] args) {\\n        Scanner in = new Scanner(System.in);\\n        int numCities = in.nextInt();\\n        int cityA = in.nextInt();\\n        int cityB = in.nextInt();\\n        int numMagic = in.nextInt();\\n        int numRoads = in.nextInt();\\n        int roadProp = in.nextInt();\\n        int[][] cityConn = new int[numRoads][3];\\n        for (int i = 0; i < numRoads; i++) {\\n            cityConn[i][0] = in.nextInt();\\n            cityConn[i][1] = in.nextInt();\\n            cityConn[i][2] = in.nextInt();\\n        }\\n\\n        int answer = shortRoute(numCities, cityA, cityB, numMagic, cityConn);\\n\\n        System.out.println(answer);\\n\\n        in.close();\\n    }\\n}",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 263,
        "title": "Count Non-Common Elements",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Count Non-Common Elements</h2>\n        <div class=\\\"language-info\\\">\n            <p>Programming Language: C++14 (GCC 5.5.0)</p>\n            <p class=\\\"note\\\">Note: You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error.</p>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are given two lists of different lengths of positive integers. Write an algorithm to count the number of elements that are not common to each list.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer - <code>listInput1_size</code>, representing the number of elements in the first list (N).</li>\n            <li>The second line consists of N space-separated integers representing the first list of positive integers.</li>\n            <li>The third line consists of an integer - <code>listInput2_size</code>, representing the number of elements in the second list (M).</li>\n            <li>The last line consists of M space-separated integers representing the second list of positive integers.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a positive integer representing the count of elements that are not common to both the lists of integers.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n11\n1 2 3 4 5 5 7 6 9 10\n10\n11 12 13 4 5 6 7 18 19 20</pre>\n            <pre class=\\\"output\\\">Output:\n12</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The numbers that are not common to both lists are [1, 1, 2, 3, 9, 10, 11, 12, 13, 18, 19, 20].</p>\n                <p>So, the output is 12.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">int countOfElement(vector&lt;int&gt; a, vector&lt;int&gt; b)\n/*\n * listInput1, representing the vector with size of listInput1_size\n * listInput2, representing the vector with size of listInput2_size\n */</pre>\n    </div>\n\n    <div class=\\\"test-cases\\\">\n        <h3>Sample Test Case</h3>\n        <div class=\\\"test-case\\\">\n            <h4>Case 1:</h4>\n            <pre class=\\\"input\\\">Input:\n4\n1 2 3 4\n4\n4 5 6 7</pre>\n            <div class=\\\"status\\\">Status: Compilation Error</div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1PC2NhrOKVEy4Deht7bfLgIfdjKrWf0lSHGuyS_bOQjg/edit?usp=sharing",
        "solution_code": "#include <vector>\\n#include <unordered_set>\\n\\nclass Solution {\\npublic:\\n    int countOfElement(const std::vector<int>& listInput1, const std::vector<int>& listInput2) {\\n        std::unordered_set<int> set1;\\n        std::unordered_set<int> set2;\\n\\n       \\n        for (const int& num : listInput1) {\\n            set1.insert(num);\\n        }\\n\\n        \\n        for (const int& num : listInput2) {\\n            set2.insert(num);\\n        }\\n\\n        int count = 0;\\n\\n       \\n        for (const int& num : listInput1) {\\n            if (set2.find(num) == set2.end()) {\\n                count++;\\n            }\\n        }\\n\\n        \\n        for (const int& num : listInput2) {\\n            if (set1.find(num) == set1.end()) {\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n};",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 264,
        "title": "Nuclear Reactor Energy Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Nuclear Reactor Energy Optimization</h2>\n        <div class=\\\"language-info\\\">\n            <span class=\\\"language\\\">C++14</span>\n            <span class=\\\"compiler\\\">GCC 5.5.0</span>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Dr. Victor Frankenstein has quit the monster creation business. Nuclear energy now strikes his fantasy. He has created a fission reactor that takes radioactive materials in a liquid state. The capacity of the reactor is \\'V\\' gallons. He has \\'N\\' vials of radioactive liquids, each with some mass and some volume. Some units of energy are produced when a liquid is poured into the reactor. Victor would like to maximize the energy output. However, there is a catch. Upon studying the physics and history of atomic elements, he realizes that the combined mass of the radioactive liquids inside the reactor must not exceed a certain critical mass \\'M\\' or else the reaction would get out of control and cause a violent explosion.</p>\n        <p>Write an algorithm that will help Victor get the maximum energy from the reactor without losing his life.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>First line: Integer <code>reactCapacity</code> representing reactor capacity(V)</li>\n            <li>Second line: Integer <code>criticalMass</code> representing critical mass(M)</li>\n            <li>Third line: Integer <code>numVolumes</code> representing number of volumes(N)</li>\n            <li>Fourth line: <code>X</code> space-separated integers <code>vol[0], vol[1],...vol[X-1]</code> representing volumes of X liquids</li>\n            <li>Fifth line: Integer <code>numMasses</code> representing number of masses(Y)</li>\n            <li>Sixth line: <code>Y</code> space-separated integers <code>mass[0], mass[1],...mass[Y-1]</code> representing masses of Y liquids</li>\n            <li>Seventh line: Integer <code>numEnergy</code> representing number of energies(Z)</li>\n            <li>Last line: <code>Z</code> space-separated integers <code>energy[0], energy[1],...energy[Z-1]</code> representing energy produced by Z liquids</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer which is the maximum energy that can be generated from the reactor in the given constraints.</p>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <h3>Note</h3>\n        <p><code>numVolumes</code>, <code>numMasses</code>, <code>numEnergy</code> are same.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ numVolumes, numMasses, numEnergy ≤ 10<sup>4</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n100\n15\n5\n50 40 30 20 10\n5\n1 2 3 9 5\n5\n300 480 270 200 180</pre>\n            <pre class=\\\"output\\\">Output:\n960</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>By selecting liquids from vials number 1, 2, 5, the energy produced is = 300+480+180=960.</p>\n                <p>This combination of liquid contributed to the total volume = 50+40+10=100, which is not greater than reactorCap; and contributed to the total mass in the reactor=1+2+5=8, which is not greater than criticalMass.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">int maxEnergyGenerate(int reacCapacity, int criticalMass, vector&lt;int&gt; vol, vector&lt;int&gt; mass, vector&lt;int&gt; energy)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1r2F_SkqRudZ7XZATdGa2O_wGtXwRlMymrn2lvKcwFS4/edit?usp=sharing",
        "solution_code": "Please convert this problem statement image into clean, structured HTML code that can be stored in a database and displayed on a website. The HTML should:\\n\\n1. Use semantic HTML5 elements\\n2. Include proper formatting for:\\n   - Problem title\\n   - Problem description\\n   - Input/Output formats\\n   - Constraints\\n   - Examples\\n   - Code blocks\\n   - Mathematical formulas (if any)\\n   - Tables (if any)\\n   - Lists\\n   - Images (if necessary)\\n\\n3. Follow this structure:\\n<div class=\\\"problem-container\\\">\\n    <div class=\\\"problem-description\\\">\\n        [Problem text here]\\n    </div>\\n    \\n    <div class=\\\"input-format\\\">\\n        <h3>Input Format</h3>\\n        [Input description]\\n    </div>\\n    \\n    <div class=\\\"output-format\\\">\\n        <h3>Output Format</h3>\\n        [Output description]\\n    </div>\\n    \\n    <div class=\\\"constraints\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            [Constraints list]\\n        </ul>\\n    </div>\\n    \\n    <div class=\\\"examples\\\">\\n        <h3>Examples</h3>\\n        <div class=\\\"example\\\">\\n            <pre class=\\\"input\\\">Input:\\n[Sample input]</pre>\\n            <pre class=\\\"output\\\">Output:\\n[Sample output]</pre>\\n            <div class=\\\"explanation\\\">\\n                [Explanation if any]\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\nPlease ensure the HTML is properly formatted and escaped for database storage. The code should be compatible with modern browsers and responsive design principles.",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 265,
        "title": "Frequency Sort",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Frequency Sort</h2>\n        <div class=\\\"language-info\\\">\n            <span class=\\\"language\\\">C++14</span>\n            <span class=\\\"compiler\\\">GCC 5.5.0</span>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Design a way to sort the list of positive integers in the descending order according to frequency of the elements. The elements with higher frequency come before those with lower frequency. Elements with the same frequency come in the same order as they appear in the given list.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>First line: Integer <code>num</code>, representing the number of elements in the list (N)</li>\n            <li>Second line: N space-separated integers representing the elements in the list</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print N space-separated integers representing the elements of the list sorted according to the frequency of elements present in the given list.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n19\n1 2 2 3 3 3 4 4 5 5 5 5 5 6 6 6 7 8 9 10</pre>\n            <pre class=\\\"output\\\">Output:\n5 5 5 5 5 3 3 3 6 6 6 2 2 4 4 1 7 8 9 10</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>The element 5 has highest frequency.</li>\n                    <li>The elements 3 and 6 have same frequencies. So, their original order has been maintained in the output.</li>\n                    <li>Similarly the frequencies of rest of elements will be found and arranged.</li>\n                    <li>So, the output will be: 5 5 5 5 5 3 3 3 6 6 6 2 2 4 4 1 7 8 9 10</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">vector&lt;int&gt; freqSort(vector&lt;int&gt; listEle)</pre>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\">#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nvector&lt;int&gt; freqSort(vector&lt;int&gt; listEle) {\n    vector&lt;int&gt; answer;\n    // Write your code here\n    return answer;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1NBj2U8fRxHo4P2VHEltkK4b_ciNVSquCrnr2tlU-uS8/edit?usp=sharing",
        "solution_code": "vector<int> freqSort(vector<int>& listEle) {\\n    // Count frequencies\\n    unordered_map<int, int> freq;\\n    for(int num : listEle) {\\n        freq[num]++;\\n    }\\n    \\n   \\n    unordered_map<int, int> origIndex;\\n    for(int i = 0; i < listEle.size(); i++) {\\n        if(origIndex.find(listEle[i]) == origIndex.end()) {\\n            origIndex[listEle[i]] = i;\\n        }\\n    }\\n    \\n    \\n    vector<int> answer = listEle;\\n    \\n    \\n    sort(answer.begin(), answer.end(), \\n        [&freq, &origIndex](int a, int b) {\\n            if(freq[a] != freq[b])\\n                return freq[a] > freq[b];\\n            return origIndex[a] < origIndex[b];\\n        });\\n    \\n    return answer;\\n}",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 266,
        "title": "Family Phone Tree",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Family Phone Tree</h2>\n        <div class=\\\"language-info\\\">\n            <span class=\\\"language\\\">C++14</span>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Every member of a family owns at least one mobile phone. The head of the family keeps track of all the phone accounts. She has sketched out a tree figure wherein each node of the tree represents a member of the family and the value of the node represents the number of phones owned by that person. The head of the family assigns herself to be the root of this tree. She wishes to find the maximum number of phones owned by any single generation of family members. She wishes to find which generation of the family owns the most phones. [All the members who belong to the same level of the tree are considered as belonging to the same generation.]</p>\n        <p>Write an algorithm to find the maximum number of phones owned by a single generation of family members.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>First line: Integer <code>num</code>, representing the total number of family members (N)</li>\n            <li>Second line: N space-separated integers <code>arr<sub>1</sub>, arr<sub>2</sub>, ..., arr<sub>N</sub></code>, representing the number of phones owned by each family member</li>\n            <li>Third line: Two space-separated integers <code>numRel</code> and <code>memConnect</code>, representing the total number of relationships among those members (M) and family members directly connected by a relationship (X=2 always), respectively</li>\n            <li>Next M lines: X space-separated integers <code>mem1</code> and <code>mem2</code>, representing the family members connected by a relationship</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the maximum number of phones owned by a single generation of family members.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 ≤ num ≤ 10<sup>5</sup></li>\n            <li>0 ≤ numRel ≤ 10<sup>5</sup></li>\n            <li>0 ≤ arr<sub>1</sub>, arr<sub>2</sub>,...,arr<sub>N</sub> ≤ 10<sup>5</sup></li>\n            <li>0 ≤ mem1, mem2 ≤ num</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n7\n10 11 10 2 3 1 5\n6 2\n0 1\n0 2\n1 3\n1 4\n2 5\n2 6</pre>\n            <pre class=\\\"output\\\">Output:\n21</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <pre class=\\\"tree-structure\\\">\n0\n/ \\\\\n1   2\n/\\\\ /\\\\\n3 4 5 6</pre>\n                <p>Step1: Sum at levels 1, 2 and 3 is 10, 21 and 11, respectively.</p>\n                <p>Step2: The maximum sum of node values is 21 at level 2.</p>\n                <p>So, the output is 21.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">int maxGenePhone(vector&lt;int&gt; arr1, vector&lt;vector&lt;int&gt;&gt; memCon)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/19T3d2FUgbaGKkFDnZEEHZqKeHJAoXtxtknC4WokXRKk/edit?usp=sharing",
        "solution_code": "#include<iostream>\\n#include<string>\\n#include<vector>\\n#include<queue>\\nusing namespace std;\\n\\n\\nint maxGenePhone (vector<int> arr1, vector<vector<int>> memCon) {\\n    \\n    if(arr1.empty()) return 0;\\n    \\n    int num = arr1.size();\\n    \\n   \\n    vector<vector<int>> adj(num, vector<int>());\\n    for(auto &relation : memCon){\\n        int u = relation[0];\\n        int v = relation[1];\\n        adj[u].push_back(v);\\n        adj[v].push_back(u);\\n    }\\n    \\n   \\n    queue<int> q;\\n    vector<bool> visited(num, false);\\n    q.push(0);\\n    visited[0] = true;\\n    \\n    int max_sum = arr1[0];\\n    \\n    while(!q.empty()){\\n        int level_size = q.size();\\n        int current_sum = 0;\\n        \\n        for(int i = 0; i < level_size; ++i){\\n            int node = q.front();\\n            q.pop();\\n            current_sum += arr1[node];\\n            \\n            for(auto &neighbor : adj[node]){\\n                if(!visited[neighbor]){\\n                    visited[neighbor] = true;\\n                    q.push(neighbor);\\n                }\\n            }\\n        }\\n        \\n        if(current_sum > max_sum){\\n            max_sum = current_sum;\\n        }\\n    }\\n    \\n    return max_sum;\\n}",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 268,
        "title": "Popular Products Analysis",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Popular Products Analysis</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The manager of a grocery store tagGrocery wishes to determine which products are most popular with his customers (i.e. which products they purchase most frequently). The manager selects N customers who purchase a shopping bag of items containing M products, each labeled with a productID. By analyzing these M products, the manager wishes to find the productIDs of the distinct products that get purchased most frequently by at least K(given) customers.</p>\n        <p>Write an algorithm to help the manager find the productIDs of the products that are most frequently purchased by the K customers.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>First line: Two space-separated integers - <code>tag_row</code>, <code>tag_col</code>, representing the number of customers (N) and the number of products in the shopping bag of the customer (M)</li>\n            <li>Next N lines: M space-separated integers - <code>tag[0], tag[1], ..., tag[M-1]</code>, representing the productIDs of the products contained in the shopping bag of each customer</li>\n            <li>Last line: Integer <code>K_input</code>, representing number of K customers who are chosen by the manager (K)</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print space-separated integers representing the lexicographically sorted productIDs of the products that are most frequently purchased by the K customers.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ tag_row ≤ 10<sup>3</sup></li>\n            <li>1 ≤ tag_col ≤ 10<sup>3</sup></li>\n            <li>1 ≤ K_input < tag_row</li>\n            <li>0 ≤ tag[0], tag[1], ..., tag[N-1] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 4\n1 2 3 2\n2 3 4 8\n8 3 11 12\n2 3 6 8\n3</pre>\n            <pre class=\\\"output\\\">Output:\n2 3 8</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The products with ProductIDs 2, 3 and 8 are purchased by at least K customers.</p>\n                <p>So, the output is [2 3 8].</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">vector&lt;int&gt; sortedProductID(vector&lt;vector&lt;int&gt;&gt; tag, int K)</pre>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\">#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n/*\n * tag, represents vector&lt;vector&gt; containing the productIDs of the products contained in the shopping bag of each customer\n * K, represents number of K customers who are chosen by the manager.\n */\nvector&lt;int&gt; sortedProductID(vector&lt;vector&lt;int&gt;&gt; tag, int K) {\n    vector&lt;int&gt; answer;\n    // Write your code here\n    return answer;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1NFDZ4vqLtotY5qaIs_Lu2gvyhaxmgKInj9HleqZLSDs/edit?usp=sharing",
        "solution_code": "#include<iostream>\\n#include<string>\\n#include<vector>\\n#include<unordered_map>\\n#include<algorithm>\\nusing namespace std;\\n\\nvector<int> sortedProductID (vector<vector<int> > tag, int K)\\n{\\n    unordered_map<int, int> product_counts;\\n    for(auto &customer_bag: tag){\\n        vector<int> unique_products = customer_bag;\\n        sort(unique_products.begin(), unique_products.end());\\n        unique_products.erase(unique(unique_products.begin(), unique_products.end()), unique_products.end());\\n        \\n        for(auto pid: unique_products){\\n            product_counts[pid]++;\\n        }\\n    }\\n    \\n    vector<int> popular_products;\\n    for(auto &[pid, count]: product_counts){\\n        if(count >= K){\\n            popular_products.push_back(pid);\\n        }\\n    }\\n    \\n    sort(popular_products.begin(), popular_products.end());\\n    \\n    return popular_products;\\n}",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 269,
        "title": "Secret Code Encryption",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Secret Code Encryption</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Bob has to send a secret code S to his boss. He designs a method to encrypt the code using two key values N and M. The formula that he uses to develop the encrypted code is shown below:</p>\n        <div class=\\\"formula\\\">\n            <code>(((S<sup>N</sup> %10)<sup>M</sup>)%1000000007)</code>\n        </div>\n        <p>Write an algorithm to help Bob encrypt the code.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The input consists of an integer <code>secretCode</code>, representing the secret code (S).</li>\n            <li>The second line consists of an integer <code>firstKey</code>, representing the first key value (N).</li>\n            <li>The third line consists of an integer <code>secondKey</code>, representing the second key value (M).</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the code encrypted by Bob.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ secretCode ≤ 10<sup>9</sup></li>\n            <li>0 ≤ firstKey, secondKey ≤ 1000000007</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n3\n4</pre>\n            <pre class=\\\"output\\\">Output:\n4096</pre>\n            <div class=\\\"explanation\\\">\n                <p>S = 2, N = 3, M = 4 and the formula of the encrypted code is:</p>\n                <p>(((2<sup>3</sup> %10)<sup>4</sup>)%1000000007)</p>\n                <p>((2<sup>3</sup> %10)<sup>4</sup>) = 4096</p>\n                <p>So, the output is 4096.</p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\\\"notes\\\">\n        <h3>Notes</h3>\n        <ul>\n            <li>The programming language to be used is Java</li>\n            <li>The version of JDK being used is 1.8</li>\n            <li>The main class name must be \\\"Solution\\\"</li>\n            <li>System.out.println() can be used to debug your code</li>\n            <li>System.out.println() may not work in case of syntax/runtime error</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1clhHejlVRElMT0ML85XarEwXWH0jJuUREuPvRw7jxfk/edit?usp=sharing",
        "solution_code": "public class Solution {\\n    public static int findSecretCode(int secretCode, int firstKey, int secondKey) {\\n        int q = (int) Math.pow(secretCode, firstKey);\\n        int w = q % 10;\\n        int e = (int) Math.pow(w, secondKey);\\n        int answer = e % 1000000007;\\n        \\n        return answer;\\n    }",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 270,
        "title": "Lucky Customers Gift Basket",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Lucky Customers Gift Basket</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Write an algorithm to help the Manager find the total numbers of lucky customers who will win a gift basket.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer <code>list_input_size</code>, representing the types of products(N).</li>\n            <li>The second line consists of N space-separated integers - <code>list_input[0]</code>, <code>list_input[1]</code>, ..., <code>list_input[N-1]</code>, representing the price of the products.</li>\n            <li>The last line consists of an integer <code>k_input</code>, representing the given value K.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the total number of lucky customers who will win a gift basket.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ list_input_size ≤ 10<sup>6</sup></li>\n            <li>0 ≤ k_input ≤ 10<sup>9</sup></li>\n            <li>0 ≤ list_input[0], list_input[1], ..., list_input[N-1] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n10 15 23 14 2 15\n13</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>There are 3 pairs with difference 13; the pairs are (10, 23), (15, 2) and (2, 15).</p>\n                <p>So, the output is 3.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"java\\\"><code>public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n    //input for list_input\n    int list_input_size = in.nextInt();\n    int list_input[] = new int[list_input_size];\n    for(int idx = 0; idx < list_input_size; idx++) {\n        list_input[idx] = in.nextInt();\n    }\n    //input for K\n    int k = in.nextInt();\n    \n    int result = totalLuckyCustomer(list_input, k);\n    System.out.println(result);\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1CRhJjp0NE2B7A7EJ2B6BPYBQY2pUlxL0a2vyAixUMRk/edit?usp=sharing",
        "solution_code": "public static int totalLuckyCustomer(int[] arr, int K) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        for(int num : arr){\\n            map.put(num, map.getOrDefault(num, 0) +1);\\n        }\\n        long count =0;\\n        if(K >0){\\n            for(Map.Entry<Integer, Integer> e : map.entrySet()){\\n                int key = e.getKey();\\n                int val = e.getValue();\\n                if(map.containsKey(key + K)){\\n                    count += (long) val * map.get(key + K);\\n                }\\n            }\\n        } else {\\n            for(Map.Entry<Integer, Integer> e : map.entrySet()){\\n                int val = e.getValue();\\n                if(val >=2){\\n                    count += ((long) val * (val -1))/2;\\n                }\\n            }\\n        }\\n        return (int) count;\\n    }",
        "company_name": "Barclays",
        "company_id": 69
    },
    {
        "id": 275,
        "title": "Alumni Dinner Seating Arrangement",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Alumni Dinner Seating Arrangement</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>A University has invited N alumni for a dinner. The dinner table has a circular shape. Each alumnus is assigned an invitation ID from 0 to N-1. Each alumnus likes exactly one fellow alumnus and will attend the dinner only if he/she can be seated next to the person he/she likes.</p>\n        <p>Write an algorithm to find the IDs of the alumni in a lexicographical order so that maximum number of alumni attend the dinner. If more than one such seating arrangement exists, then output the one that is lexicographically smaller.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of the input consists of an integer <code>num</code>, representing the number of alumni (N).</p>\n        <p>The second line consists of N space-separated integers, <code>alumniID[0]</code>, <code>alumniID[1]</code>,...., <code>alumniID[N-1]</code> representing the ID of the person whom the i<sup>th</sup> alumnus likes.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print space-separated integers representing the IDs of the alumni who will attend the dinner.</p>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <h3>Note</h3>\n        <p>One alumnus can be liked by multiple alumni.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ <code>num</code> ≤ 10<sup>5</sup></li>\n            <li>0 ≤ L < <code>num</code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n2 3 4 1</pre>\n            <pre class=\\\"output\\\">Output:\n1 2 3 4</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The first alumnus likes the person whose ID is 2.</p>\n                <p>The second alumnus likes the person whose ID is 3.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1pTJaD-915HyysQw1AJCrTjiuglmHWnVhV4WPFsMOQbw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays",
        "company_id": 69
    }
]