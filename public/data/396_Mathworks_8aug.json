[
    {
        "id": 1175,
        "title": "Capable Models",
        "problem_statement": "<h1>Capable Models</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given n machine learning models, each with an associated cost and feature compatibility:</p>\r\n<ul>\r\n    <li><code>cost[i]</code> represents the cost of the i<sup>th</sup> model</li>\r\n    <li><code>featureAvailability[i]</code> is a binary string indicating suitability for two distinct features:\r\n        <ul>\r\n            <li>\"00\": not equipped for either feature</li>\r\n            <li>\"01\": suitable for feature A but not feature B</li>\r\n            <li>\"10\": suitable for feature B but not feature A</li>\r\n            <li>\"11\": suitable for both features</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>A set of models is k-capable if the number of models suitable for feature A and the number suitable for feature B are both greater than or equal to k.</p>\r\n<p>For each value of k from 1 to n, determine the minimum cost required to assemble a k-capable set of models. Return an array of n integers, where the i<sup>th</sup> integer represents the minimum cost for an i-capable set. If no i-capable set exists, the i<sup>th</sup> integer should be -1.</p>\r\n\r\n<p>Complete the function <code>getMinimumCost</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int cost[n]</code>: the cost of machine learning models</li>\r\n    <li><code>string featureAvailability[n]</code>: the compatibility string of models indicating their suitability for two features</li>\r\n</ul>\r\n<p><strong>Returns</strong>: <code>int[n]</code>: the i<sup>th</sup> integer is the minimum cost of a set of i-capable models</p>\r\n\r\n<pre><code class='language-javascript'>vector&lt;int&gt; getMinimumCost(vector&lt;int&gt; cost, vector&lt;string&gt; featureAvailability) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>This example is derived from the detailed breakdown provided in the problem statement.</p>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\ncost = [3, 6, 9, 1, 2, 5]\r\nfeatureAvailability = [\"10\", \"01\", \"01\", \"11\", \"10\", \"01\"]\r\n\r\nOutput: [2, 6, 15, 26, -1, -1]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For k=1: Optimal Set [Model 5], Feature 1 Compatible [Model 5], Feature 2 Compatible [Model 5], Cost 2</p>\r\n<p>For k=2: Optimal Set [Model 1, Model 4, Model 5], Feature 1 Compatible [Model 1, Model 5], Feature 2 Compatible [Model 4, Model 5], Cost 3+1+2=6</p>\r\n<p>For k=3: Optimal Set [Model 1, Model 3, Model 4, Model 5], Feature 1 Compatible [Model 1, Model 3, Model 5], Feature 2 Compatible [Model 3, Model 4, Model 5], Cost 3+9+1+2=15</p>\r\n<p>For k=4: Optimal Set [Model 1, Model 2, Model 3, Model 4, Model 5], Feature 1 Compatible [Model 1, Model 2, Model 5], Feature 2 Compatible [Model 2, Model 3, Model 4, Model 5], Cost 3+6+9+1+2=26</p>\r\n<p>For k >= 5, there will be no capable set.</p>\r\n<p>Hence, the answer is [2, 6, 15, 26, -1, -1].</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\ncost = [5, 6, 10, 1]\r\nfeatureAvailability = [\"10\", \"01\", \"11\", \"00\"]\r\n\r\nOutput:\r\n10\r\n21\r\n-1\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For k=1: Optimal Set [Model 3], Feature 1 Compatible [Model 3], Feature 2 Compatible [Model 3], Cost 10</p>\r\n<p>For k=2: Optimal Set [Model 1, Model 2, Model 3], Feature 1 Compatible [Model 1, Model 3], Feature 2 Compatible [Model 2, Model 3], Cost 5+6+10=21</p>\r\n<p>For k >= 3, there is no capable set.</p>\r\n<p>Hence, the answer is [10, 21, -1, -1].</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\ncost = [1, 1]\r\nfeatureAvailability = [\"10\", \"10\"]\r\n\r\nOutput:\r\n-1\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong> There is no possible way of forming a k-capable set for all k from 1 to n.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= cost[i] <= 10<sup>4</sup></code></li>\r\n    <li>It is guaranteed that <code>featureAvailability[i]</code> is a binary string of length 2.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_8aug",
        "company_id": 396
    },
    {
        "id": 1176,
        "title": "Array Nullification",
        "problem_statement": "<h1>Array Nullification</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two arrays, <code>change</code> and <code>arr</code>, of lengths <code>n</code> and <code>m</code>, respectively. In each operation, you can perform one of the following:</p>\r\n<ol>\r\n    <li>You can decrement any element of <code>arr</code> by 1.</li>\r\n    <li>If <code>change[i] == 0</code> and <code>arr[change[i]] == 0</code>, you can change that element to NULL.</li>\r\n</ol>\r\n<p>Assume 1-based indexing and find the minimum number of operations required to change all elements of the array to NULL, or report -1 if not possible.</p>\r\n<p><strong>Example:</strong><br>\r\n<code>n = 4, m = 2</code><br>\r\n<code>change = [0, 1, 0, 2]</code><br>\r\n<code>arr = [1, 1]</code></p>\r\n<p><strong>Operations sequence:</strong></p>\r\n<ol>\r\n    <li>Decrement arr[1]: [0, 1]</li>\r\n    <li>Change arr[1] to NULL since change[2] = 1 and arr[1] = 0: [NULL, 1]</li>\r\n    <li>Decrement arr[2]: [NULL, 0]</li>\r\n    <li>Change arr[2] to NULL since change[4] = 2 and arr[2] = 0: [NULL, NULL]</li>\r\n</ol>\r\n<p>The answer is 4.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMinOperations</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int change[n]:</code> an array of integers</li>\r\n    <li><code>int arr[m]:</code> an array of integers</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int:</code> the minimum number of operations required to change all the elements to NULL, or -1 if it is not possible</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= m <= 10^5</code></li>\r\n    <li><code>0 <= change[i] <= m</code></li>\r\n    <li><code>1 <= arr[i] <= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n10\r\n1 0 1 3 2 1 0 3 1 1\r\n3\r\n2 1 2\r\nOutput:\r\n8</code></pre>\r\n<p><strong>Explanation:</strong> One of the possible operation flows can be:</p>\r\n<ol>\r\n    <li>Decrement arr[1] - [0, 1, 2]</li>\r\n    <li>Decrement arr[2] - [0, 0, 2]</li>\r\n    <li>Decrement arr[3] - [0, 0, 1]</li>\r\n    <li>Decrement arr[3] - [0, 0, 0]</li>\r\n    <li>Change arr[2] as change[5] = 2 - [0, NULL, 0]</li>\r\n    <li>Change arr[1] as change[6] = 1 - [NULL, NULL, 0]</li>\r\n    <li>Decrement arr[3] - [NULL, NULL, 0]</li>\r\n    <li>Change arr[3] as change[8] = 3 - [NULL, NULL, NULL]</li>\r\n    <li>Operations 9 and 10 are not needed.</li>\r\n</ol>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n0 0 0 2 1 3 2\r\n3\r\n1 3 2\r\nOutput:\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong> It is not possible to change all the elements to NULL while respecting the conditions.</p>\r\n\r\n<pre><code class='language-javascript'>/*\r\n * Complete the 'getMinOperations' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts the following parameters:\r\n *  1. INTEGER_ARRAY change\r\n *  2. INTEGER_ARRAY arr\r\n */\r\n\r\nint getMinOperations(vector<int> change, vector<int> arr) {\r\n\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_8aug",
        "company_id": 396
    }
]