[
    {
        "id": 929,
        "title": "Employee Schedule Optimization",
        "problem_statement": "<h1>Employee Schedule Optimization</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a company, an employee receives a fixed amount, fixedPay dollars, each day they work. They also receive a bonus, bonus dollars, on a workday if they worked the day before. The employee is planning their work schedule for n days.</p>\r\n<p>Their schedule is given as a binary string where '1' is a workday, and '0' is not. The employee can change up to k days off ('0') to workdays ('1').</p>\r\n<p>Find the maximum earnings the employee can get after changing at most k days from '0' to '1'.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMaxEarnings</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string schedule</code>: initial work schedule</li>\r\n    <li><code>int k</code>: the maximum number of extra days the employee can work</li>\r\n    <li><code>int fixedPay</code>: the fixed pay for each workday</li>\r\n    <li><code>int bonus</code>: the bonus if they also worked the previous day</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the maximum earnings possible</li>\r\n</ul>\r\n<pre><code class='language-javascript'>long getMaxEarnings(string schedule, int k, int fixedPay, int bonus) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nschedule = \"10100\"\r\nk = 2\r\nfixedPay = 1\r\nbonus = 2\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> An optimal way to change the schedule is to work on the second and fourth days. In this case, the schedule becomes \"11110\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = fixedPay = 1.</li>\r\n    <li>On days 2, 3, and 4, earnings = fixedPay + bonus = 3.</li>\r\n    <li>Total earnings = 1 + 3 + 3 + 3 + 0 = 10. Return 10.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nschedule = \"100101\"\r\nk = 2\r\nfixedPay = 4\r\nbonus = 3\r\nOutput: 29</code></pre>\r\n<p><strong>Explanation:</strong> An optimal schedule is to work on the second and third days too, so the schedule is \"111101\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = fixedPay = 4.</li>\r\n    <li>On days 2, 3, and 4, earnings = fixedPay + bonus = 7.</li>\r\n    <li>On day 5, earnings = fixedPay = 4.</li>\r\n    <li>Total earnings = 4 + 7 + 7 + 0 + 4 = 29.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nschedule = \"111001\"\r\nk = 1\r\nfixedPay = 3\r\nbonus = 3\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong> An optimal schedule is to also work on the fifth day, so the schedule is \"111101\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = fixedPay = 3.</li>\r\n    <li>On days 2, 3, and 4, earnings = fixedPay + bonus = 6.</li>\r\n    <li>On day 5, earnings = fixedPay = 3.</li>\r\n    <li>Total earnings = 3 + 6 + 6 + 0 + 3 = 30.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= k &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= fixedPay, bonus &lt;= 10^9</code></li>\r\n    <li><code>schedule[i] = {'0', '1'}</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Rippling_19july",
        "company_id": 290
    },
    {
        "id": 930,
        "title": "Minimum Changes for Palindromic Password",
        "problem_statement": "<h1>Minimum Changes for Palindromic Password</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The current password is represented by the string <code>currentPassword</code>, consisting only of lowercase Latin letters.</p>\r\n<p>New password requirements have just been released. The new password, called <code>newPassword</code>, must meet the following two conditions:</p>\r\n<ul>\r\n    <li>It must be a palindrome.</li>\r\n    <li>It must have a period <code>k</code>. That is, <code>newPassword[i] = newPassword[i+k]</code>, for all <code>i <= length(newPassword) - k</code>.</li>\r\n</ul>\r\n<p>The objective is to determine the minimum number of characters that need to be changed in <code>currentPassword</code> to create a <code>newPassword</code> of the same length.</p>\r\n\r\n<p>Complete the function <code>findMinChanges</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string currentPassword</code>: the current password</li>\r\n    <li><code>int k</code>: the required period of the new password</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the minimum number of characters to change to make a valid <code>newPassword</code></p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: currentPassword = \"abrzbz\", k = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Changing the first character of <code>currentPassword</code> to 'z' creates a <code>newPassword</code> of 'zbzzbz' which is a palindrome with a period of 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: currentPassword = \"cbpebcbbc\", k = 4\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Changing the third and fourth characters to 'c' and 'b' respectively makes <code>newPassword</code> 'cbbccbbc' which is a palindrome with period four.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: currentPassword = \"vsvvsv\", k = 1\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the <code>currentPassword</code> is a palindrome with period three already, so no changes are required. (Note: There might be a discrepancy between the input <code>k=1</code> and the explanation mentioning \"period three\". Based on the output 0 and explanation, it's highly probable that <code>k</code> should have been 3 for this example.)</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= k <= length(currentPassword) <= 2 * 10^5</code></li>\r\n    <li><code>currentPassword</code> only contains lowercase Latin letters.</li>\r\n    <li>It is guaranteed that <code>length(currentPassword)</code> is divisible by <code>k</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Rippling_19july",
        "company_id": 290
    }
]