[
    {
        "id": 133,
        "title": "Product Search Suggestions System",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Question 2</h2>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>For an array of n strings products and a word to search, search, design a system that, when each character of the searched word is typed, suggests at most three product names from the products array. The suggested products should share a common prefix with the searched word. If more than three products exist with a common prefix, report the three product names that appear first in lexicographical order.</p>\n\n<p>Return the suggested products, which will be a list of lists after each character of the searched word is typed.</p>\n\n<p class=\\\"note\\\"><strong>Note:</strong> A string x is considered lexicographically smaller than another string y if x will occur before y in the English dictionary.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function getProductSuggestions in the editor below.</p>\n        <p>getProductSuggestions has the following parameter(s):</p>\n        <ul>\n            <li><code>string products[n]</code>: the list of products</li>\n            <li><code>string search</code>: a string</li>\n        </ul>\n    </div>\n\n<div class=\\\"return-value\\\">\n        <h3>Returns</h3>\n        <p><code>string[n][]</code>: for each prefix of the string, return a maximum of three lexicographically smallest words with a common prefix.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 1000</li>\n            <li>1 ≤ length of products[i] ≤ 500</li>\n            <li>1 ≤ sum(length of products[i]) ≤ 5 × 10⁵</li>\n            <li>All the strings of products are unique.</li>\n            <li>products[i] consists of lowercase English letters only.</li>\n            <li>1 ≤ length of search ≤1000</li>\n            <li>The searched text consists of lowercase English letters only.</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>Suppose n = 5, products = [\\\"carpet\\\", \\\"cart\\\", \\\"car\\\", \\\"camera\\\", \\\"crate\\\"], and search = \\\"camera\\\".</p>\n\n<table class=\\\"example-table\\\">\n                <thead>\n                    <tr>\n                        <th>Search Prefix</th>\n                        <th>Matches</th>\n                        <th>Lexicographically Smallest 3</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>c</td>\n                        <td>[\\\"carpet\\\", \\\"cart\\\", \\\"car\\\", \\\"camera\\\", \\\"crate\\\"]</td>\n                        <td>[\\\"camera\\\", \\\"car\\\", \\\"carpet\\\"]</td>\n                    </tr>\n                    <tr>\n                        <td>ca</td>\n                        <td>[\\\"carpet\\\", \\\"cart\\\", \\\"car\\\", \\\"camera\\\"]</td>\n                        <td>[\\\"camera\\\", \\\"car\\\", \\\"carpet\\\"]</td>\n                    </tr>\n                    <tr>\n                        <td>cam</td>\n                        <td>[\\\"camera\\\"]</td>\n                        <td>[\\\"camera\\\"]</td>\n                    </tr>\n                    <tr>\n                        <td>came</td>\n                        <td>[\\\"camera\\\"]</td>\n                        <td>[\\\"camera\\\"]</td>\n                    </tr>\n                    <tr>\n                        <td>camer</td>\n                        <td>[\\\"camera\\\"]</td>\n                        <td>[\\\"camera\\\"]</td>\n                    </tr>\n                    <tr>\n                        <td>camera</td>\n                        <td>[\\\"camera\\\"]</td>\n                        <td>[\\\"camera\\\"]</td>\n                    </tr>\n                </tbody>\n            </table>\n\n<div class=\\\"example-result\\\">\n                <p>Hence the answer is [[\\\"camera\\\", \\\"car\\\", \\\"carpet\\\"], [\\\"camera\\\", \\\"car\\\", \\\"carpet\\\"], [\\\"camera\\\"], [\\\"camera\\\"], [\\\"camera\\\"], [\\\"camera\\\"]].</p>\n            </div>\n        </div>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\n4\nproducts[] size n = 4\nproducts = [\\\"abcd\\\", \\\"abdc\\\", \\\"abaa\\\", \\\"abcd\\\"]\nsearch = \\\"abad\\\"</pre>\n\n<pre class=\\\"output\\\">Output:\nabaa abcd abdc\nabaa abcd abdc\nabaa\n[]</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1aXDnrAECNj66I8qFF59_AmIMgwRof-P2ss0gBXkgUB8/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Wayfair",
        "company_id": 16
    },
    {
        "id": 134,
        "title": "Maximum Taxi Revenue",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Maximum Taxi Revenue</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>A taxi driver knows the pick-up and drop-off locations of people who are requesting taxi services. All the locations are in <em>km</em> from the starting point. The starting point is at <em>0 km</em>.</p>\n\n<p>For each <em>km</em> travelled by a passenger, the driver charges 1 unit of money per passenger. Moreover, the taxi itself is very fancy. Therefore some people are even willing to pay an extra tip if they get to travel in the taxi. At any point of time, the taxi can only accommodate one passenger.</p>\n\n<p>Determine the maximum amount the driver can earn.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>taxiDriver</code> in the editor below. The function must return an integer denoting the maximum amount that can be earned by the driver.</p>\n\n<h4>Parameters:</h4>\n        <ul>\n            <li><code>pickup[pickup[0],...,pickup[n-1]]</code>: an array of n integers that denote the pickup location of the potential riders</li>\n            <li><code>drop[drop[0],...,drop[n-1]]</code>: an array of n integers that denote the drop-off locations of the potential riders</li>\n            <li><code>tip[tip[0],...,tip[n-1]]</code>: an array of n integers that denote the tips offered by each person if they are accepted for a ride</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 < |pickup|, |drop|, |tip| ≤ 10<sup>4</sup></li>\n            <li>0 ≤ pickup[i], drop[i] ≤ 10<sup>12</sup></li>\n            <li>pickup[i] < drop[i]</li>\n            <li>0 ≤ tip ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">pickup = [0, 2, 9, 10, 11, 12]\ndrop = [5, 9, 11, 11, 14, 17]\ntip = [1, 2, 3, 2, 2, 1]</pre>\n\n<div class=\\\"explanation\\\">\n                <p>The way to earn the most money is by accepting passengers at indices 1, 2 and 5.</p>\n                <ul>\n                    <li>The amount paid by the passenger at index 1: 9 - 2 + 2 = 9</li>\n                    <li>The amount paid by the passenger at index 2: 11 - 9 + 3 = 5</li>\n                    <li>The amount paid by the passenger at index 5: 17 - 12 + 1 = 6</li>\n                    <li>The total amount paid by the passengers is 9 + 5 + 6 = 20</li>\n                </ul>\n                <p>Therefore, the return value is 20.</p>\n            </div>\n        </div>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">pickup[] size n = 2\npickup[] = [1, 4]\ndrop[] size n = 2\ndrop[] = [5, 6]\ntip[] size n = 2\ntip[] = [2, 5]</pre>\n\n<pre class=\\\"output\\\">7</pre>\n\n<div class=\\\"explanation\\\">\n                <p>There are two people, and locations are overlapping so only one of them can be accepted.</p>\n                <p>If person 1 is picked, the amount made is 5-1+2 = 6</p>\n                <p>If person 2 is picked, the amount made is 6-4+5 = 7</p>\n                <p>It is best to pick person 2 and earn 7.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1LXLZr85nghD7Mc2VKKNrY6FwwAZMy-J6njQZgqNtels/edit?usp=sharing",
        "solution_code": "static class Passenger {\\n        long pickup;\\n        long drop;\\n        int tip;\\n\\n        Passenger(long pickup, long drop, int tip) {\\n            this.pickup = pickup;\\n            this.drop = drop;\\n            this.tip = tip;\\n        }\\n    }\\n\\n    public static long taxiDriver(long[] pickup, long[] drop, int[] tip) {\\n        int n = pickup.length;\\n        Passenger[] passengers = new Passenger[n];\\n        for (int i = 0; i < n; i++) {\\n            passengers[i] = new Passenger(pickup[i], drop[i], tip[i]);\\n        }\\n\\n        Arrays.sort(passengers, Comparator.comparingLong(p -> p.drop));\\n\\n        long[] dp = new long[n];\\n        dp[0] = passengers[0].drop - passengers[0].pickup + passengers[0].tip;\\n\\n        for (int i = 1; i < n; i++) {\\n            dp[i] = dp[i - 1];\\n\\n            long currentEarning = passengers[i].drop - passengers[i].pickup + passengers[i].tip;\\n\\n            int low = 0, high = i - 1;\\n            int lastNonConflict = -1;\\n\\n            while (low <= high) {\\n                int mid = (low + high) / 2;\\n                if (passengers[mid].drop <= passengers[i].pickup) {\\n                    lastNonConflict = mid;\\n                    low = mid + 1;\\n                } else {\\n                    high = mid - 1;\\n                }\\n            }\\n\\n            if (lastNonConflict != -1) {\\n                currentEarning += dp[lastNonConflict];\\n            }\\n\\n            dp[i] = Math.max(dp[i], currentEarning);\\n        }\\n\\n        return dp[n - 1];\\n    }",
        "company_name": "Wayfair",
        "company_id": 16
    },
    {
        "id": 135,
        "title": "Factor Sum Array",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Factor Sum Array</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>For each number in an array, get the sum of its factors. Return an array of results.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>maxSubsetSum</code> in the editor below.</p>\n\n<h4>Parameters</h4>\n        <ul>\n            <li><code>int arr[n]</code>: an array of integers</li>\n        </ul>\n\n<h4>Returns</h4>\n        <ul>\n            <li><code>long[n]</code>: the sums calculated for each arr[i]</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>3</sup></li>\n            <li>1 ≤ arr[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>arr = [12]</p>\n            <div class=\\\"explanation\\\">\n                The factors of arr[0] = 12 are [1, 2, 3, 4, 6, 12]. The sum of these factors is 28. Return the array [28].\n            </div>\n        </div>\n\n<h3>Sample Case 0</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2    → arr[] size n = 2\n2 4  → arr = [2, 4]</pre>\n\n<pre class=\\\"output\\\">Output:\n3\n7</pre>\n\n<div class=\\\"explanation\\\">\n                <p>Factors of arr[0] = 2 are [1, 2] and their sum is 3.</p>\n                <p>Factors of arr[1] = 4 are [1, 2, 4] and their sum is 7.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <pre class=\\\"code\\\"><code class=\\\"cpp\\\">vector&lt;long&gt; maxSubsetSum(vector&lt;int&gt; k) {\n    // Implementation goes here\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1t5jGXc0ne-81nplPJmXhkv82XuDLKpIENIjj_w4UGlo/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\nll sum_of_factors(int n){\\n    if(n ==1) return 1;\\n    ll res =1;\\n    int num = n;\\n    for(int i=2;i*i<=num;i++){\\n        if(num%i ==0){\\n            ll temp =1;\\n            ll power =1;\\n            while(num%i ==0){\\n                power *=i;\\n                temp +=power;\\n                num /=i;\\n            }\\n            res *= temp;\\n        }\\n    }\\n    if(num >1){\\n        res *= (1 + num);\\n    }\\n    return res;\\n}\\n\\nvector<long> maxSubsetSum(vector<int> k){\\n    vector<long> result;\\n    for(auto num:k){\\n        result.push_back(sum_of_factors(num));\\n    }\\n    return result;\\n}\\n\\nint main(){\\n    int n;\\n    cin>>n;\\n    vector<int> k(n);\\n    for(auto &x:k) cin>>x;\\n    vector<long> res = maxSubsetSum(k);\\n    for(auto x:res) cout<<x<<\\'\\\\n\\';\\n}",
        "company_name": "Wayfair",
        "company_id": 16
    },
    {
        "id": 136,
        "title": "Optimal Middle Mountain",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Optimal Middle Mountain</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>An intern at HackerRank is assigned is finding the <em>optimal middle subsequence</em>.</p>\n\n<p>An optimal middle subsequence is the subsequence <em>chosen[]</em> of length 3 chosen from an array <code>arr</code>, such that <code>chosen[0] < chosen[1] > chosen[2]</code> and that the sum of its elements is the minimum possible.</p>\n\n<p>Given an array, return the sum of the values of the optimal middle subsequence. If there is none, return -1.</p>\n\n<div class=\\\"note\\\">\n            <strong>Note:</strong> A subsequence of an array is obtained by deleting some (possibly 0) elements from the array without changing the order of the remaining elements. For example, [1, 3] is a subsequence of [1, 2, 3, 4] while [4, 2] is not.\n        </div>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMinimumSum</code> in the editor below.</p>\n\n<p><code>getMinimumSum</code> has the following parameter:</p>\n        <ul>\n            <li><code>int arr[n]</code>: the given array</li>\n        </ul>\n\n<h4>Returns</h4>\n        <ul>\n            <li><code>long_int</code>: the sum of the elements in the optimal middle subsequence or -1</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>3 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ arr[i] ≤ 10<sup>3</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>Consider n = 7, arr = [3, 4, 5, 1, 2, 3, 1].</p>\n            <p>Then, the subsequence [1, 2, 1] can be chosen as 1 < 2 > 1 and sum = 1 + 2 + 1 = 4, which is minimum possible. Thus, the answer is 4.</p>\n        </div>\n\n<h3>Sample Case 0</h3>\n        <div class=\\\"sample-case\\\">\n            <pre class=\\\"input\\\">Input:\n7\n3 4 2 6 1 1 1</pre>\n            <pre class=\\\"output\\\">Output:\n8</pre>\n            <div class=\\\"explanation\\\">\n                <p>The subsequence [3, 4, 1] can be chosen as 3 < 4 > 1 and sum = 3 + 4 + 1 = 8.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <pre class=\\\"code cpp\\\">\nlong getMinimumSum(vector&lt;int&gt; arr) {\n    // Write your code here\n}\n        </pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ydEF9PaD5C1a_PG-D29ZH0Lq2XizPGCIq-OjNt4yNGw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Wayfair",
        "company_id": 16
    },
    {
        "id": 137,
        "title": "Project Cost Pairs",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Project Cost Pairs</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>A number of bids are received for a project. Determine the number of distinct pairs of project costs where their absolute difference is some target value. Two pairs are distinct if they differ in at least one value.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>countPairs</code> in the editor below.</p>\n        <p><code>countPairs</code> has the following parameter(s):</p>\n        <ul>\n            <li><code>int projectCosts[n]</code>: array of integers</li>\n            <li><code>int target</code>: the target difference</li>\n        </ul>\n\n<h4>Return</h4>\n        <p><code>int</code>: the number of distinct pairs in <code>projectCosts</code> with an absolute difference of <code>target</code></p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>5 ≤ n ≤ 10<sup>5</sup></li>\n            <li>0 < projectCosts[i] ≤ 2 × 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n<div class=\\\"example\\\">\n            <h4>Example 1</h4>\n            <pre class=\\\"input\\\">Input:\nn = 3\nprojectCosts = [1, 3, 5]\ntarget = 2</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>There are 2 pairs [1,3], [3,5] with the target difference target = 2. Therefore, 2 is returned.</p>\n            </div>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\nn = 5\nprojectCosts = [1, 5, 3, 4, 2]\ntarget = 2</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>Count the number of pairs in projectCosts whose difference is target = 2. The following three pairs meet the criterion: (1, 3), (5, 3), and (4, 2).</p>\n            </div>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Sample Case 2</h4>\n            <pre class=\\\"input\\\">Input:\nn = 6\nprojectCosts = [2, 4, 6, 8, 10, 12]\ntarget = 2</pre>\n            <pre class=\\\"output\\\">Output:\n5</pre>\n            <div class=\\\"explanation\\\">\n                <p>Count the number of pairs in projectCosts whose difference is target = 2. The following five pairs meet the criterion: (2, 4), (4, 6), (6, 8), (8, 10), and (10, 12).</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"code-block java\\\">\npublic static int countPairs(List&lt;Integer&gt; projectCosts, int target) {\n    // Write your code here\n}\n        </pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/15ZZcWK3ft-z0Wgc0WyV8k-WVaEWW6Z0jaxKzxYpak40/edit?usp=sharing",
        "solution_code": "#include <iostream>\\n#include <vector>\\n#include <unordered_set>\\n\\n// Function to count the number of pairs with a given target difference\\nint countPairs(const std::vector<int>& projectCosts, int target) {\\n    int count = 0;\\n    std::unordered_set<int> seen;\\n\\n    for (const auto& cost : projectCosts) {\\n        // Check if (cost + target) exists in the seen set\\n        if (seen.find(cost + target) != seen.end()) {\\n            count += 1;\\n        }\\n        // Check if (cost - target) exists in the seen set\\n        if (seen.find(cost - target) != seen.end()) {\\n            count += 1;\\n        }\\n        // Add the current cost to the seen set\\n        seen.insert(cost);\\n    }\\n\\n    return count;\\n}",
        "company_name": "Wayfair",
        "company_id": 16
    },
    {
        "id": 189,
        "title": "Maximize CPU Utilization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Maximize CPU Utilization</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A number of tasks need to be distributed among servers. All tasks are assigned to their first server until it reaches capacity. They want to utilize the CPU as much as possible.</p>\n        <p><em>Determine the maximum units of capacity the first server can process. Any process is only run once.</em></p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The function maximizeCPU has two parameters:</p>\n        <ul>\n            <li><code>int requirements[n]</code>: the processing requirements of each task</li>\n            <li><code>processingCapacity</code>: the available processing capacity</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an integer: the maximum processing requirements that can be served</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 42</li>\n            <li>1 ≤ processingCapacity ≤ 10<sup>9</sup></li>\n            <li>1 ≤ requirements[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\nrequirements = [15, 12, 3, 7, 8]\nprocessingCapacity = 18</pre>\n            <pre class=\\\"output\\\">Output:\n18</pre>\n            <div class=\\\"explanation\\\">\n                <p>There are two groups that sum to processingCapacity = 18:</p>\n                <ul>\n                    <li>[15, 3]</li>\n                    <li>[8, 7, 3]</li>\n                </ul>\n                <p>Either group requires full capacity, which is the perfect solution. Return 18.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Case 0:</h4>\n            <pre class=\\\"input\\\">Input:\nrequirements[] size n = 3\nrequirements[] = [2, 9, 7]\nprocessingCapacity = 15</pre>\n            <pre class=\\\"output\\\">Output:\n11</pre>\n            <div class=\\\"explanation\\\">\n                <p>All possible combinations of requirements and their sums are shown:</p>\n                <pre>\nItems = 0\n(): 0\nItems = 1\n(2): 2, (7): 7, (9): 9\nItems = 2\n(2, 7): 9, (2, 9): 11, (7, 9): 16\nItems = 3\n(2, 7, 9): 18</pre>\n                <p>The highest usage that is within the limit of processingCapacity = 15 is 2 + 9 = 11.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1pcJmFmy6omQv7CPI_3JIuvlF0M0rxEz-m6cxJghhPfA/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Wayfair",
        "company_id": 16
    },
    {
        "id": 197,
        "title": "Maximum Subsequence with K Adjacent Differences",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Maximum Subsequence with K Adjacent Differences</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>A test needs to be prepared on the HackerRank platform with questions from different sets of skills to assess candidates. Given an array, <code>skills</code>, of size <code>n</code>, where <code>skills[i]</code> denotes the skill type of the i<sup>th</sup> question, select skills for the questions on the test. The skills should be grouped together as much as possible.</p>\n        \n        <p>The goal is to find the maximum length of a subsequence of <code>skills</code> such that there are no more than <code>k</code> unequal adjacent elements in the subsequence. Formally, find a subsequence of <code>skills</code>, call it <code>x</code>, of length <code>m</code> such that there are at most <code>k</code> indices where <code>x[i] != x[i+1]</code> for all <code>0 ≤ i < m</code>.</p>\n\n        <div class=\\\"note\\\">\n            <h4>Note:</h4>\n            <p>A subsequence of an array is obtained by deleting several elements of the array (possibly zero or all) without changing the order of the remaining elements. For example, [1, 3, 4], [3] are subsequences of [1, 2, 3, 4] whereas [1, 5], [4, 3] are not.</p>\n        </div>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function findMaxLength in the editor below.</p>\n        <p>findMaxLength has the following parameter(s):</p>\n        <ul>\n            <li><code>int skills[]</code>: the different skill types</li>\n            <li><code>int k</code>: the maximum count of unequal adjacent elements</li>\n        </ul>\n        <p>Returns:</p>\n        <ul>\n            <li><code>int</code>: the maximum value of m</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 2 × 10<sup>3</sup></li>\n            <li>1 ≤ k ≤ n</li>\n            <li>1 ≤ skills[i] ≤ 2 × 10<sup>3</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Case 0</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nn = 4\nskills = [1, 1, 2, 3]\nk = 1</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>[1, 1, 2] and [1, 1, 3] are the longest possible subsequences with a maximum of 1 adjacent unequal element.</p>\n            </div>\n        </div>\n\n        <h3>Sample Case 1</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nn = 8\nskills = [1, 2, 1, 2, 1, 2, 1, 2]\nk = 2</pre>\n            <pre class=\\\"output\\\">Output:\n5</pre>\n            <div class=\\\"explanation\\\">\n                <p>Some of the longest subsequences are [1, 1, 1, 1, 2], [1, 2, 1, 1, 1], [2, 1, 2, 2, 2] and others.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <pre class=\\\"code-block\\\"><code class=\\\"language-c\\\">#include &lt;assert.h&gt;\n\n/*\n * Complete the \\'findMaxLength\\' function below.\n * The function is expected to return an INTEGER.\n * The function accepts following parameters:\n * 1. INTEGER_ARRAY skills\n * 2. INTEGER k\n */\nint findMaxLength(int skills_count, int* skills, int k) {\n\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1LNicPhCME_m1XK4Dxw0Ys7TK2D2hdahjlIRmK_u9fs4/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint findMaxLength(int n, int* s, int k) {\\n    int ms = 0;\\n    for (int i = 0; i < n; i++) ms = max(ms, s[i]);\\n    vector<vector<int>> dp(k+1, vector<int>(ms+1, 0));\\n\\n    for (int i = 0; i < n; i++) {\\n        vector<vector<int>> ndp(k+1, vector<int>(ms+1));\\n        for (int j = 0; j <= k; j++) {\\n            for (int sk = 1; sk <= ms; sk++) {\\n                ndp[j][sk] = dp[j][sk];\\n            }\\n        }\\n        for (int sk = 1; sk <= ms; sk++) {\\n            if (dp[0][sk]) ndp[0][sk] = max(ndp[0][sk], dp[0][sk] + (s[i] == sk));\\n        }\\n        for (int j = 1; j <= k; j++) {\\n            for (int sk = 1; sk <= ms; sk++) {\\n                if (dp[j][sk]) {\\n                    ndp[j][sk] = max(ndp[j][sk], dp[j][sk] + (s[i] == sk));\\n                    ndp[j][s[i]] = max(ndp[j][s[i]], dp[j-1][sk] + 1);\\n                }\\n            }\\n        }\\n        dp = move(ndp);\\n    }\\n\\n    int res = 0;\\n    for (int j = 0; j <= k; j++) {\\n        for (int sk = 1; sk <= ms; sk++) {\\n            res = max(res, dp[j][sk]);\\n        }\\n    }\\n    return res;\\n}\\n\\nint main() {\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    int n;\\n    cin >> n;\\n    int* skills = new int[n];\\n    for (int i = 0; i < n; i++) cin >> skills[i];\\n    int k;\\n    cin >> k;\\n    cout << findMaxLength(n, skills, k);\\n    delete[] skills;\\n}",
        "company_name": "Wayfair",
        "company_id": 16
    }
]