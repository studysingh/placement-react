[
    {
        "id": 540,
        "title": "Super Tunnel Maintenance",
        "problem_statement": "<h1>Super Tunnel Maintenance</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Tunnels are an important part of the rail network in the country particularly in hill ranges. The Chief Engineer of the Railways has released a tender for maintenance of 'super tunnels' in the Garhwal hills. Super tunnels are those tunnels which, if they collapse or become dysfunctional, the areas that are connected through that tunnel will become unreachable. A map of all tunnels, including the super tunnels, is given with the tender.</p>\r\n<p>Your company is bidding for the project and your finance team has given you the cost of maintaining each tunnel separately. Your task is to figure out which tunnels are the super tunnels, and what will be your total project cost. Write a program that can help you identify the super tunnels, and print the project cost as the output.</p>\r\n<p>Read the <strong>Input</strong> from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>First line consists of an integer n, which is the number of tunnels. Tunnels are referred by the numbers 0 to n-1.</p>\r\n<p>Next n lines consist of n space-separated 0s / 1s, where 1 indicates if two tunnels are connected, and 0 if not. First the details of connectivity between tunnel 0 and rest of the tunnels are given, next details of connectivity between tunnel 1 and rest of the tunnels are given, and so on until tunnel n-1 connectivity details are given.</p>\r\n<p>The last line of input contains n space-separated integers, which are the maintenance costs of tunnels 0 to n-1, in sequence.</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>Single line of output has the project cost of maintaining all the super tunnels.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n01100000\r\n10010011\r\n10010011\r\n01101100\r\n00010100\r\n00011000\r\n00100010\r\n23516427\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> From the given input, the following tunnel map can be drawn.</p>\r\n<p>Here tunnels 2 and 3 are the super tunnels. If tunnel 2 collapses, tunnels 6 & 7 become unreachable. If tunnel 3 collapses, tunnels 4 & 5 become unreachable. The tunnel maintenance cost of tunnels 2 and 3 = 5 + 1 = 6, which is printed as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n9\r\n011100100\r\n101000000\r\n110000000\r\n100011100\r\n000101000\r\n000110000\r\n000000101\r\n000000110\r\n3710511151892\r\nOutput:\r\n26</code></pre>\r\n<p><strong>Explanation:</strong> From the given input, the following tunnel map can be drawn.</p>\r\n<p>Here, tunnels 0, 3 and 6 are super tunnels which need to be maintained. Cost of maintenance of these tunnels is = 3+5+18 = 26, which is printed as the output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt; number of tunnels &lt; 100</li>\r\n    <li>0 &lt; maintenance cost of each tunnel &lt; 10<sup>6</sup></li>\r\n</ul>\r\n\r\n<h2>Provided Code Structure (C++)</h2>\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nint findTunnelMaintenanceCost(int **arr, int n, int cost[]) {\r\n    // given number of tunnels\r\n    // cost contains the maintenance cost of each tunnel\r\n    int res = 0;\r\n\r\n    // WRITE YOUR CODE HERE\r\n\r\n    return res;\r\n}\r\n\r\nint main() {\r\n    int n = 0;\r\n    cin >> n;\r\n    int **arr;\r\n    arr = new int*[n];\r\n    for (int i = 0; i &lt; n; i++) {\r\n        arr[i] = new int[n];\r\n        for (int j = 0; j &lt; n; j++) {\r\n            cin >> arr[i][j];\r\n        }\r\n    }\r\n\r\n    int cost[n];\r\n    for (int i = 0; i &lt; n; i++) {\r\n        cin >> cost[i];\r\n    }\r\n\r\n    cout &lt;&lt; findTunnelMaintenanceCost(arr, n, cost);\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    },
    {
        "id": 560,
        "title": "Cheapest Path to Visit Shortlisted Places",
        "problem_statement": "<h1>Cheapest Path to Visit Shortlisted Places</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the city of Atlanta, Perce is planning to visit some memorable places. The city has N places that she wants to visit. These places are connected by paths on which buses with fixed ticket prices travel people from one place to another. There may be multiple paths between two places and the ticket prices are for a round trip. So, even if she wants to buy a ticket for a one way trip, she has to pay for a round trip and this makes the trip a bit expensive.</p>\r\n<p>Being on a tight budget, she wants to find a cheap way to visit the places. Looking at the ticket prices, she soon realizes that she would not be able to visit all the N places. So she decides as a first step to eliminate from her list all those places which are at distinct corners of the city or places connected only by paths which if eliminated, divides the trip into 2 unconnected parts. Then, to visit the shortened list of places that remained, she would take the cheapest paths available.</p>\r\n<p>Help Perce out by writing a program to find the cheapest paths after eliminating the undesirable places to visit and the minimum amount needed to visit the listed places.</p>\r\n<p>Read the input from STDIN and write the output to STDOUT. Do not write arbitrary strings while reading the input or while printing, as these contribute to the standard output.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains two integers, N and K separated by a single white space, where N is the number of places and K is the number of paths between N places.</p>\r\n<p>Next K lines of input contain three integers, a, b, and w, where a is the place she is currently at, b is the place she is about to visit next and w is the round trip ticket price to travel between a and b.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains an integer which is the amount needed to visit the shortlisted places in the cheapest way possible.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7 7\r\n0 6 15\r\n0 1 10\r\n1 2 20\r\n1 3 30\r\n2 3 40\r\n2 5 50\r\n2 4 60\r\nOutput:\r\n50</code></pre>\r\n<p><strong>Explanation:</strong> The given input can be imagined as a graph with 7 nodes (0-6) and 7 edges. The red paths are the eliminated paths in the first step. In this, as 0-1 is the path if eliminated, divides the city into 2 unconnected parts, i.e. 0 and 6 form one part and 1,2,3,4 and 5 form another. Similarly paths 0-6, 2-5, and 2-4 also get eliminated so places 0, 4, 5, and 6 will not be visited.</p>\r\n<p>To visit the remaining places (1, 2, and 3), the cheapest way is to take the paths between 1-3 and 1-2, which together cost 30 + 20 = 50. Hence 50 is printed as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 8\r\n0 4 70\r\n0 1 60\r\n0 3 10\r\n0 2 20\r\n1 5 50\r\n1 2 30\r\n1 3 80\r\n2 3 40\r\nOutput:\r\n60</code></pre>\r\n<p><strong>Explanation:</strong> No detailed explanation provided, but the graph illustrates the connections and the expected output for the given input.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &lt;= N, the number of places &lt;= 100</li>\r\n    <li>2 &lt;= K, number of paths &lt;= 100</li>\r\n    <li>The places are numbered from 0 to N-1.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    },
    {
        "id": 663,
        "title": "Maximize Candies Delivered",
        "problem_statement": "<h1>Maximize Candies Delivered</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Avish has a factory which produces N different varieties of candy. Candies are made in batches (one batch has one candy variety only), and depending on the variety, different quantities of candies are produced per batch. For instance, a chocolate candy batch may output 5 candies while a vanilla candy batch may output 8 candies.</p>\r\n<p>Ritish, a big merchant wanted to sample Avish's candies. He requested Avish to send him as many total candies as possible; however, there should be at least two varieties of candy, and the quantity of each variety of candy must be the same (say k).</p>\r\n<p>Avish makes a plan to produce a fresh batch of each candy variety, pack the output into boxes containing k candies each, and send one box of each variety to Ritish. However, he also wants to avoid wastage and therefore decides not to send those varieties that would have leftover candies after a batch was packed into boxes of k quantity.</p>\r\n<p>Write a program to help Avish select a k value such that he can send the maximum number of candies to Ritish. Print the maximum number of candies (of all varieties put together) that Avish can send as output.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings while reading the input or while printing, as these contribute to the standard output and test cases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains the positive integer N, the number of varieties of candy.</p>\r\n<p>The second line of input contains N space-separated integers, the number of candies per batch for each variety.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should print a long integer denoting the maximum number of candies that Avish can deliver.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= N <= 10^6</code></li>\r\n    <li><code>1 <= Candies per batch <= 10^7</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2 3 6\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given the number of varieties (N) = 3</p>\r\n<p>The number of Candies per batch for each variety is 2, 3, and 6 respectively.</p>\r\n<p>If we take k=3 (number of candies in a box)</p>\r\n<ul>\r\n    <li>Variety 1: no box can be created as the quantity of candies (2) is less than k (3).</li>\r\n    <li>Variety 2: 1 box can be created.</li>\r\n    <li>Variety 3: 2 boxes can be created.</li>\r\n</ul>\r\n<p>So Avish can send 1 box of Variety 2 and 1 box of Variety 3. Hence, a total of 6 candies can be delivered.</p>\r\n<p>In no other option, more than 6 candies can be delivered.</p>\r\n<p>Hence 6 is the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3 8 4 6 12\r\nOutput:\r\n12</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given the number of varieties (N) = 5</p>\r\n<p>The number of Candies per batch for each variety is 3, 8, 4, 6, and 12 respectively.</p>\r\n<p>We can create a box of 4 candies, and deliver one box from Varieties 2, 3, and 5. Hence, 12 candies can be delivered.</p>\r\n<p>Alternately 2 boxes with 6 candies each of varieties 4 and 5 can be delivered. Here also total candies is 12.</p>\r\n<p>In no other option, more than 12 candies can be delivered.</p>\r\n<p>Hence 12 is the output.</p>\r\n\r\n<h2>Code Snippet (C++)</h2>\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nlong long int getResult(long long int n, long long int arr[]) {\r\n    // n is the number of flavors, arr is array that\r\n    // holds number of candies for each flavour\r\n    long long int sale = 0;\r\n\r\n    // WRITE YOUR CODE HERE.\r\n\r\n    return sale; // return the maximum number of candies avish can sale.\r\n}\r\n\r\nint main() {\r\n    long long int n;\r\n    cin >> n;\r\n    long long int arr[n];\r\n    for (long long int i = 0; i &lt; n; ++i) {\r\n        cin >> arr[i];\r\n    }\r\n    long long int result = getResult(n, arr);\r\n    cout &lt;&lt; result;\r\n\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    },
    {
        "id": 664,
        "title": "River Log Jumps",
        "problem_statement": "<h1>River Log Jumps</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Geeta wants to cross a river which does not have a bridge across it. She found some logs floating on the water and decides to cross the river by jumping from one log to the other. All the logs are arranged linearly and are of varying lengths, some very slippery and someone had tied them together at the left end to hold them parallel to each other. Only the right end of the logs are free to move. Geeta can jump from the right end of one log by jumping from the right end of one log to the next. However all the logs were of different lengths so which meant in each jump she had to also go a certain distance left or right.</p>\r\n<p>Geeta knew she could only jump a fixed distance to her right and to her left. So if the logs were more apart than that, she would have to turn back and reach her starting position. But if she could jump, it was always from the bank, but if left with no no choice she would return back to her starting position.</p>\r\n<p>Write a program to print the number of jumps Geeta makes before reaching either the opposite end or her starting position.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N >= 1, N = the number of logs</li>\r\n    <li>X, Y = maximum distance Geeta can jump in left and right directions, respectively.</li>\r\n    <li>Length of any log >= 1</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains N, X and Y separated by a single white space.</p>\r\n<p>The second line of input contains N integers separated by a single white space, which represent the lengths of the logs.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains the number of jumps.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 3 5\r\n1 6 5 4 1\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> From the input, there are 5 logs, and Geeta's capacity is to move at most 3 steps to her left and at most 5 steps to her right. At first, Geeta jumps from bank to Log(I). Now, Geeta has to move 5 steps to the right to reach Log(II), which is within her capacity. Next, for Log(III) she has to move 1 step to the left from Log(II), which is within her capacity. Similarly she can jump through all the logs. At last she jumps to the other bank and total number of jumps she made is 6 as shown in the figure above.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 1 5\r\n1 6 5 4 1\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Geeta can move at most 1 step to her left and at most 5 steps to her right. Geeta can jump 4 logs as they are within her step movement capacity. To move from 4th to 5th log however she has to jump 3 steps to her left, which is beyond her capacity of 1 step. So she turns back and in total makes 8 jumps as shown in the figure above.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    },
    {
        "id": 665,
        "title": "Count Word Occurrences in Grid",
        "problem_statement": "<h1>Count Word Occurrences in Grid</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n<p><strong>Input Format:</strong></p>\r\n<p>The first line of input has N, which is the number of rows/columns in the grid. The next N lines each contain N-characters (alphabets or digits). The last line contains the word whose number of occurrences has to be found out.</p>\r\n<p><strong>Output Format:</strong></p>\r\n<p>The output has the number of occurrences of the given word in the grid.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\nctt\r\ncct\r\ncat\r\ncat\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Size of the grid, N = 3. The grid along with occurrences of the word given in input is marked in the figure given below. We can see that the word 'cat' is present 4 times. Hence the output is 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nJampu\r\nspmuJ\r\nRmjus\r\njumpsp\r\nujpsM\r\njump\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Size of the grid, N = 5. The grid along with occurrences of the word given in input is marked in the figure given below. We can see that the word 'jump' is present 2 times. Hence the output is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N >= 3</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    },
    {
        "id": 666,
        "title": "PPE Distribution Network",
        "problem_statement": "<h1>PPE Distribution Network</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A new virus is causing illness across the globe. Healthcare workers need to wear personal protective equipment (PPE) to save themselves from the virus, but there is a shortage of PPE across the country. To help get PPE to places where it is needed most, the Government has come up with a plan.</p>\r\n<p>All major cities have been classified into three types and a connectivity map has been prepared. <strong>Type A</strong> are the main cities; <strong>Type B</strong> are cities that are connected to Type A cities directly, and <strong>Type C</strong> are all the remaining cities.</p>\r\n<p>Type A cities are the most important for both economy and supply chain. They have a unique characteristic that if a Type A city gets locked down, then the map breaks down into two or more sub maps such that there is no connectivity between the two submaps. Because of this, all Type A cities were provided PPE on a war footing. Now it is the turn of Type B cities to get the PPE.</p>\r\n<p>Write a program to identify all the Type B cities, given a map of all the cities and their connectivity with other cities.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line consists of an integer <code>n</code>, which is the number of cities. Cities are referred by the numbers 0 to n-1.</p>\r\n<p>Next <code>n</code> lines consist of <code>n</code> space-separated 0s / 1s, where 1 indicates if a connection exists between two cities and 0 if not. The first row gives details of connectivity between city 0 and rest of the cities. The next row gives details of connectivity between city 1 and rest of the cities, and so on until city n-1 connectivity details are given in the last row.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single line of output contains all the Type B cities, in ascending order, separated by a single whitespace.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt; n &lt; 100</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n011110\r\n101001\r\n110000\r\n100010\r\n100100\r\n010000\r\nOutput:\r\n1 2 3 4</code></pre>\r\n<p><strong>Explanation:</strong> From the given input, the map can be drawn as a graph with 6 nodes (0-5) and the following connections (edges):</p>\r\n<ul>\r\n    <li>City 0 is connected to cities 1, 2, 3, 4.</li>\r\n    <li>City 1 is connected to cities 0, 2, 5.</li>\r\n    <li>City 2 is connected to cities 0, 1.</li>\r\n    <li>City 3 is connected to cities 0, 4.</li>\r\n    <li>City 4 is connected to cities 0, 3.</li>\r\n    <li>City 5 is connected to city 1.</li>\r\n</ul>\r\n<p>Here, City 0 is a Type A city, because if it is locked down (removed), cities 1, 2, 5 will not be able to connect to cities 3, 4. Type B cities are those connected to Type A directly, hence are cities 1, 2, 3, and 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n16\r\n0111100000000000\r\n1001000001000000\r\n1001001100000000\r\n1100000110000000\r\n1000100000000001\r\n0001000000000000\r\n0010001000001000\r\n0011000000000100\r\n0001000010000100\r\n0010000000001000\r\n0000000000000010\r\n0000000000000000\r\n0000000000000110\r\n0000000000000100\r\n0000000000000000\r\n0001100000000000\r\nOutput:\r\n4 5 6 7 8 9 10 11</code></pre>\r\n<p><strong>Explanation:</strong> From the given input, the map can be drawn as a graph with 16 nodes (0-15). Here, cities 0, 1, 2 and 3 are the Type A cities, because if any of these lock down, then some cities will lose connection to the rest of the country (e.g., if city 0 is locked down, cities 8, 9, 13 will lose connectivity). Type B cities are those connected to Type A directly, hence are cities 4, 5, 6, 7, 8, 9, 10 and 11.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    },
    {
        "id": 667,
        "title": "Minimum Sum of Visible Cells",
        "problem_statement": "<h1>Minimum Sum of Visible Cells</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Daniel has an old square table in his house which is of size N × N, and each of its cells consists of a non-negative integer printed on it as a design. Daniel is not happy with the design of the table because the printed numbers are too large, so he decided to arrange K wooden slabs on top of the table to cover some of the cells. He wants to arrange the wooden slabs by following the rules listed below:</p>\r\n<ol>\r\n    <li>Each wooden slab covers two cells of the table that are adjacent in a row or a column.</li>\r\n    <li>The wooden slabs can touch each other but do not overlap.</li>\r\n    <li>The sum of all visible (uncovered) cells needs to be as small as possible.</li>\r\n</ol>\r\n<p>Write a program to help Daniel determine the lowest sum of the visible cells possible. Consider that it will always be possible to place all the K slabs on the table without overlapping.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains the integers N (the dimensions of the table), and K (the number of wooden slabs), separated by a single space.<br>Each of the following N lines contains N integers from the interval [0, 1000].</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Single line of output must contain the lowest possible sum of visible cells, after covering the table with wooden slabs.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 ≤ N ≤ 1000</li>\r\n    <li>1 ≤ K ≤ 8</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 1\r\n6 4\r\n8 7\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe size of the table N = 2\r\nThe number of wooden slabs K = 1\r\nThe table is:\r\n6 4\r\n8 7\r\nHere, these are the possibilities of arranging the one slab by following rules:</p>\r\n<p><strong>(I) Slab covers (0,0) and (1,0) (values 6, 8):</strong><br>\r\nVisible cells: 4, 7. Sum = 11.</p>\r\n<p><strong>(II) Slab covers (0,1) and (1,1) (values 4, 7):</strong><br>\r\nVisible cells: 6, 8. Sum = 14.</p>\r\n<p><strong>(III) Slab covers (0,0) and (0,1) (values 6, 4):</strong><br>\r\nVisible cells: 8, 7. Sum = 15.</p>\r\n<p><strong>(IV) Slab covers (1,0) and (1,1) (values 8, 7):</strong><br>\r\nVisible cells: 6, 4. Sum = 10.</p>\r\n<p>We can see the minimum sum of visible (white) cells is 10, which is in fig. (IV). Hence 10 is the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 2\r\n9 9 9 9 9\r\n1 1 1 1 1\r\n9 9 9 9 9\r\n1 1 1 1 1\r\n9 9 9 9 9\r\nOutput: 13</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe size of the table N = 5\r\nThe number of wooden slabs K = 2\r\nThe table is:\r\n9 9 9 9 9\r\n1 1 1 1 1\r\n9 9 9 9 9\r\n1 1 1 1 1\r\n9 9 9 9 9\r\nOf all the possibilities of arranging the two slabs by following rules, the minimum sum is 13 as shown in the problem image. Hence the output is 13.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    },
    {
        "id": 668,
        "title": "Number of Ways to Form Sum",
        "problem_statement": "<h1>Number of Ways to Form Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Golu is a rich potato farmer. During harvesting season, the workers at his farm packed his potatoes into sacks of different weights. When Golu reached the market to sell his produce, he realized that the Market Association had standardised the buy-sell transactions. Now buyers in the market could buy potatoes only in one standardised weight, and they could carry a specified number of bags only.</p>\r\n<p>Given the standardised weight and number of bags, help Golu to determine how many different ways he can bunch his sacks together to make a sale.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>First line has an integer, W, which is the standardised weight which a buyer can buy.</p>\r\n<p>Second line has two integers, N and X, where N is the number of bags a buyer can carry, and X is the number of sacks Golu has.</p>\r\n<p>Third line has X integers, the weights of Golu's sacks, separated by single white space.</p>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>Single line has an integer, S, which is the number of ways in which the standard weight W can be formed as the sum of Golu's sacks' weights.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Weights of X sacks are unique and entered in the ascending order of their weights.</li>\r\n    <li>0 &lt; W &lt;= 500</li>\r\n    <li>0 &lt; N &lt;= 50</li>\r\n    <li>0 &lt; X &lt;= 100</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n20\r\n3 10\r\n1 2 4 5 10 11 13 15 17 19\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> Standardised weight in which sale can happen, W=20. Number of bags buyers can carry N=3. Number of sacks with Golu, X=10. Weights of 10 sacks - 1 2 4 5 10 11 13 15 17 19. Different ways in which the sacks can be bunched to match the standardized weight are:</p>\r\n<ul>\r\n    <li>[1, 2, 17]</li>\r\n    <li>[1, 4, 15]</li>\r\n    <li>[1, 5, 13]</li>\r\n    <li>[4, 5, 11]</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n45\r\n7 19\r\n1 2 4 5 6 8 9 10 12 13 15 16 17 18 19 20 21 23 24\r\nOutput:\r\n12</code></pre>\r\n<p><strong>Explanation:</strong> Standardised weight in which sale can happen, W=45. Number of bags buyers can carry N=7. Number of sacks with Golu, X=19. Different ways in which the sacks can be bunched to match the standardized weight are:</p>\r\n<ul>\r\n    <li>1 2 4 5 6 8 19</li>\r\n    <li>1 2 4 5 6 9 18</li>\r\n    <li>1 2 4 5 6 10 17</li>\r\n    <li>1 2 4 5 6 12 15</li>\r\n    <li>1 2 4 5 8 9 16</li>\r\n    <li>1 2 4 5 8 10 15</li>\r\n    <li>1 2 4 5 8 12 13</li>\r\n    <li>1 2 4 6 8 9 15</li>\r\n    <li>1 2 4 6 9 10 13</li>\r\n    <li>1 2 5 6 8 10 13</li>\r\n    <li>1 2 5 6 9 10 12</li>\r\n    <li>1 4 5 6 8 9 12</li>\r\n</ul>\r\n<p>Hence output is 12.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<pre><code class='language-javascript'>static int bagsSum(int target, int nBags, int n, int[] V) {\r\n    // target contains the standardized weight which a buyer can buy.\r\n    // nBags contains the number of bags a buyer can carry.\r\n    // n contains the number of sacks Golu has.\r\n    // V contains the array of n weights of Golu's sacks.\r\n    int sum = -1;\r\n\r\n    // WRITE YOUR CODE HERE\r\n\r\n    // Store the output in \"sum\"\r\n    return sum;\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    Scanner sc = new Scanner(System.in);\r\n    int target = sc.nextInt();\r\n    int nBags = sc.nextInt();\r\n    int n = sc.nextInt();\r\n    int[] V = new int[n];\r\n    for (int i = 0; i < n; i++) {\r\n        V[i] = sc.nextInt();\r\n    }\r\n    System.out.println(bagsSum(target, nBags, n, V));\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    },
    {
        "id": 669,
        "title": "Abhaneri Stepwell Reconstruction",
        "problem_statement": "<h1>Abhaneri Stepwell Reconstruction</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The Abhaneri village stepwell has not been in use for a while. Stepwells are wells or ponds in which water is reached by descending a set of steps to the water level.</p>\r\n<p>The stepwell in Abhaneri went out of use because the steps were very disorganised and people found it difficult to ascend/descend them. To correct this situation, the villagers decide to reconstruct the steps such that the heights of adjacent steps differ exactly by 1 unit.</p>\r\n<p>The steps are in two directions, East-West and North-South. For symmetry, the villagers decide that the final steps in both directions must be identical. In each direction, the steps should be strictly descending, reach the water level and then be strictly ascending. The lowest step, which is the water level, must have an equal number of steps to the left and to the right of it.</p>\r\n<p>The existing N steps can be modified by reducing or increasing the height of a step by 1 unit is counted as one change. Since funds are limited and stepwell construction requires many resources, the villagers want to make as few changes as possible.</p>\r\n<p>Write a program to determine the minimum number of changes needed such that the villagers can rebuild their stepwell in the described way.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N is always an odd number</li>\r\n    <li>3 <= N <= 10001</li>\r\n    <li>0 <= step height <= 10000000</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains N, the number of total steps in one direction (including the water level step).</p>\r\n<p>The second line of input contains the steps in the East-West direction, separated by a single space.</p>\r\n<p>The third line of input contains the steps in the North-South direction, separated by a single space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains the minimum number of total changes needed in both directions to reconstruct the stepwell.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1 2 3\r\n3 2 2\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 steps (including the water level).</p>\r\n<p>East-West steps are 1 2 3.</p>\r\n<p>North-South steps are 3 2 2.</p>\r\n<p>To minimize the changes, the final steps in both directions should be in the form of 3 2 3.</p>\r\n<p>To reach this, East-West steps will need 2 changes (first step height increases from 1 to 3), while North-South will need 1 change (last step height increases from 2 to 3).</p>\r\n<p>So a total of 3 changes are required.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n2 3 0 1 4\r\n3 3 2 3 1\r\nOutput:\r\n10</code></pre>\r\n<p><strong>Explanation:</strong> One possibility is to reconstruct the stepwell with the final steps as 2 1 0 1 2. This will need 12 changes in both directions.</p>\r\n<p>Another possibility is 4 3 2 3 4. This will need 10 changes.</p>\r\n<p>Another possibility is 3 2 1 2 3. This will also need 10 changes.</p>\r\n<p>So, minimum 10 changes are required.</p>\r\n\r\n<pre><code class='language-javascript'>import java.util.*;\r\n\r\npublic class testclass {\r\n    public static long findMoves(int n, long[] a, long[] b) {\r\n        // WRITE YOUR CODE HERE\r\n        long moves = -1;\r\n        return moves;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int n = sc.nextInt();\r\n        long[] a = new long[n];\r\n        long[] b = new long[n];\r\n        for (int i = 0; i < n; i++) {\r\n            a[i] = sc.nextLong();\r\n        }\r\n        for (int i = 0; i < n; i++) {\r\n            b[i] = sc.nextLong();\r\n        }\r\n        System.out.println(findMoves(n, a, b));\r\n    }\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_13july",
        "company_id": 177
    }
]