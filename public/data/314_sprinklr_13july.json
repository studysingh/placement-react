[
    {
        "id": 978,
        "title": "Maximum Products",
        "problem_statement": "<h1>Maximum Products</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two arrays A and B both consisting of N positive integers respectively. For any element A<sub>i</sub> (1 &lt;= i &lt;= N) of array A, you can select an element B<sub>j</sub> (1 &lt;= j &lt;= N) and set A<sub>i</sub> = A<sub>i</sub> + B<sub>j</sub> or can set A<sub>i</sub> = A<sub>i</sub> * B<sub>j</sub>. Note that any element of the array B can be used at most once. After at most N operations, what is the maximum product of array A that can be obtained?</p>\r\n\r\n<p><strong>Input:</strong></p>\r\n<p>The beginning of the input starts with a single integer denoting the number of test cases(T). The First line of each test case contains a single integer denoting the value of N. The next line contains N single space-separated A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>n</sub> positive integers denoting the elements of the array A. The next line contains N single space-separated B<sub>1</sub>, B<sub>2</sub>, ..., B<sub>n</sub> positive integers denoting the elements of the array B.</p>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>Print a single integer - The maximum product of the array A after at most N number of operations performed taking mod with 10<sup>9</sup> + 7 (=1000000007)</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3\r\n2 3 5\r\n2 1 4\r\nOutput:\r\n360</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>No. of Test Cases : 1</p>\r\n<p>No. of elements in each array : 3</p>\r\n<p>Array A : [2, 3, 5]</p>\r\n<p>Array B : [2, 1, 4]</p>\r\n<p>Maximum product of all elements of Array after atmost 3 operations : 360, this is achievable by the following operations :</p>\r\n<ul>\r\n    <li>Replace A<sub>3</sub> with A<sub>3</sub> * B<sub>3</sub> i.e. A<sub>3</sub> now becomes 5 * 4 = 20</li>\r\n    <li>Replace A<sub>2</sub> with A<sub>2</sub> * B<sub>1</sub> i.e. A<sub>2</sub> now becomes 3 * 2 = 6</li>\r\n    <li>Replace A<sub>1</sub> with A<sub>1</sub> + B<sub>2</sub> i.e. A<sub>1</sub> now becomes 2 + 1 = 3</li>\r\n</ul>\r\n<p>Now Array A = [3, 6, 20]. Product of all elements = 3 * 6 * 20 = 360</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= T &lt;= 5</li>\r\n    <li>1 &lt;= N &lt;= 10<sup>6</sup></li>\r\n    <li>1 &lt;= A<sub>i</sub> &lt;= 10<sup>6</sup></li>\r\n    <li>1 &lt;= B<sub>i</sub> &lt;= 10<sup>6</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "sprinklr_13july",
        "company_id": 314
    },
    {
        "id": 979,
        "title": "Search Engine",
        "problem_statement": "<h1>Search Engine</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Prof. Arnab Bhattacharya has asked you to implement a basic search engine which gives you term frequencies for his Course Information Retrieval. This search engine will have these functionalities:</p>\r\n<ol>\r\n    <li>Index i.e. store a given term &amp; it's frequency</li>\r\n    <li>Prefix query i.e. frequency of terms with given prefix (upto this point)</li>\r\n    <li>Update i.e. update frequency of given term</li>\r\n</ol>\r\n<p><strong>Input:</strong> First line: Integer `n` denoting number of operations. Next `n` lines containing space separated operation, string (say `op_i s_i f_i`) &amp; integer only if it's index/update operation. Where `op_i` == 'Q' denotes prefix query. `op_i` == 'I' (capital i) denotes index operation. `op_i` == 'U' denotes update operation. `s_i` is string to be queried or indexed &amp; `f_i` is frequency of terms (present only if `op_i`=='I' or `op_i`=='U').</p>\r\n<p><strong>Output:</strong> Term frequency for every prefix query in newline.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\nI apple 2\r\nI google 1\r\nI sprinkle 10\r\nI spring 2\r\nQ apple\r\nQ spr\r\nOutput:\r\n2\r\n12</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ol>\r\n    <li>Frequency for apple is 2.</li>\r\n    <li>spr prefix comes in 2 terms: sprinkle &amp; spring. So frequency of prefix = 10 + 2 = 12.</li>\r\n</ol>\r\n</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>0 &le; n &le; 10<sup>6</sup></li>\r\n    <li>`s_i` contains only English lowercase letters</li>\r\n    <li>1 &le; `f_i` &le; 10<sup>4</sup></li>\r\n    <li>Length of `s_i` &le; 30</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li>Time Limit: 5.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "sprinklr_13july",
        "company_id": 314
    },
    {
        "id": 980,
        "title": "Parkour",
        "problem_statement": "<h1>Parkour</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Michael Scott just learnt about Parkour and want to reach other end of office parkouring his way on tables. Since he is very unfit for parkouring he cannot jump to higher tables continously so he derived a strategy, during odd numbered jump he will jump to lowest table which is higher than(or equal height to) current table & during even numbered jump he will jump to highest table lower than(or equal height to) current table. Since he want to reach other end of the office he decided to jump only in one direction.</p>\r\n\r\n<p>You being Pam (Michael Scott's assistant) is trying to figure out all the starting tables such that if he starts \"parkouring\" from any of these tables, he can reach the other end of the office following above rules. (He can jump 0 times as well). We will refer to them as <strong>good tables/indices</strong>.</p>\r\n\r\n<p>You will be given an array containing height of tables, return all the starting table indices.</p>\r\n\r\n<p><strong>Input:</strong> An integer n followed by n space seperated integers in newline.</p>\r\n<p><strong>Output:</strong> All good indices seperated by newline in ascending order.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; arr[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n5 1 3 4 2\r\nOutput:\r\n1\r\n2\r\n4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>If he starts at index 0: There no table higher than current table so there is no jump possible.</p>\r\n<p>If he starts at index 1: The next lowest table which is higher than current is 2 Which is the last element of array -> end of the office</p>\r\n<p>If he starts at index 2: 4 is the next higher index, in even numbered jump he will jump to 2 from 4 -> end of the office</p>\r\n<p>If he starts at index 3: No legal jumps</p>\r\n<p>If he starts at index 4: He is already at the end of the office.</p>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<p>Time Limit: 1.0 sec(s) for each input file<br>\r\nMemory Limit: 256 MB<br>\r\nSource Limit: 1024 KB</p>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, R(Rscript), Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "sprinklr_13july",
        "company_id": 314
    }
]