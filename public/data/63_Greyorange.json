[
    {
        "id": 235,
        "title": "Do They Belong?",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1 class=\\\"problem-title\\\">9. Do They Belong?</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A triangle formed by the three points a(x1, y1), b(x2, y2) and c(x3, y3) is a non-degenerate triangle if the following rules are respected (|ab| is the length of the line between points a and b):</p>\n        \n        <ul class=\\\"triangle-rules\\\">\n            <li>|ab| + |bc| > |ac|</li>\n            <li>|bc| + |ac| > |ab|</li>\n            <li>|ab| + |ac| > |bc|</li>\n        </ul>\n\n        <p>A point <em>belongs</em> to a triangle if it lies somewhere on or inside the triangle. Given two points p = (xp, yp) and q = (xq, yq), return the correct scenario number:</p>\n\n        <ul class=\\\"scenarios\\\">\n            <li>0: If the triangle abc does not form a valid non-degenerate triangle.</li>\n            <li>1: If point p belongs to the triangle but point q does not.</li>\n            <li>2: If point q belongs to the triangle but point p does not.</li>\n            <li>3: If both points p and q belong to the triangle.</li>\n            <li>4: If neither point p nor point q belong to the triangle.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>pointsBelong</code> with the following parameter(s):</p>\n        <ul>\n            <li><code>int x1, y1, x2, y2, x3, y3</code>: integer coordinates of the three points that may create a valid triangle</li>\n            <li><code>int xp, yp, xq, yq</code>: integer coordinates of the two points p and q</li>\n        </ul>\n        <p><strong>Returns:</strong></p>\n        <ul>\n            <li><code>int</code>: an integer value that represents the scenario</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 ≤ x1, y1, x2, y2, x3, y3, xp, yp, xq, yq ≤ 2000</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Cases</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">\n(x1,y1) = (0,0)\n(x2,y2) = (2,0)\n(x3,y3) = (4,0)\np = (xp,yp) = (2,0)\nq = (xq,yq) = (4,0)</pre>\n            <pre class=\\\"output\\\">0</pre>\n            <div class=\\\"explanation\\\">\n                <p>First, the lines do not form a valid non-degenerate triangle: The three points a, b, c lie on the same line, so it is impossible to form a triangle. The answer is 0.</p>\n            </div>\n        </div>\n\n        <!-- Additional sample cases can be added following the same structure -->\n    </div>\n</div>\n\n<style>\n.problem-container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n    font-family: Arial, sans-serif;\n}\n\n.problem-title {\n    color: #333;\n    border-bottom: 2px solid #eee;\n    padding-bottom: 10px;\n}\n\npre {\n    background-color: #f5f5f5;\n    padding: 15px;\n    border-radius: 5px;\n    overflow-x: auto;\n}\n\n.example {\n    margin: 20px 0;\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\n.explanation {\n    margin-top: 10px;\n    padding: 10px;\n    background-color: #f9f9f9;\n    border-left: 3px solid #2196F3;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1Vj4fNd10WcbVoROBfZLyKIbmvgQ3ZrRILTybuOxq2Qs/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nlong long area2(int x1, int y1, int x2, int y2, int x3, int y3){\\n    return abs((long long)x1*(y2 - y3) + (long long)x2*(y3 - y1) + (long long)x3*(y1 - y2));\\n}\\n\\nbool pointInTriangle(int xa, int ya, int xb, int yb, int xc, int yc, int xp, int yp){\\n    long long A = area2(xa, ya, xb, yb, xc, yc);\\n    long long A1 = area2(xp, yp, xb, yb, xc, yc);\\n    long long A2 = area2(xa, ya, xp, yp, xc, yc);\\n    long long A3 = area2(xa, ya, xb, yb, xp, yp);\\n    return (A1 + A2 + A3) == A;\\n}\\n\\nint pointsBelong(int x1, int y1, int x2, int y2, int x3, int y3, int xp, int yp, int xq, int yq){\\n    long long A = area2(x1, y1, x2, y2, x3, y3);\\n    if(A == 0) return 0;\\n    bool bp = pointInTriangle(x1, y1, x2, y2, x3, y3, xp, yp);\\n    bool bq = pointInTriangle(x1, y1, x2, y2, x3, y3, xq, yq);\\n    if(bp && bq) return 3;\\n    if(bp) return 1;\\n    if(bq) return 2;\\n    return 4;\\n}\\n\\nint main(){\\n    int x1, y1, x2, y2, x3, y3, xp, yp, xq, yq;\\n    cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> xp >> yp >> xq >> yq;\\n    cout << pointsBelong(x1, y1, x2, y2, x3, y3, xp, yp, xq, yq);\\n}",
        "company_name": "Greyorange",
        "company_id": 63
    },
    {
        "id": 236,
        "title": " Ancestral Names",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">10. Ancestral Names</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given a list of strings comprised of a name and a Roman numeral, sort the list first by name, then by the decimal value of the Roman numeral.</p>\n        \n        <p>In Roman numerals, a value is not repeated more than three times. At that point, a smaller value precedes a larger value to indicate subtraction. For example, the letter I represents the number <em>1</em>, and V represents <em>5</em>. Reason through the formation of <em>1</em> to <em>10</em> below, and see how it is applied in the following lines.</p>\n\n        <ul>\n            <li><em>I, II, III, IV, V, VI, VII, VIII, IX,</em> and <em>X</em> represent <em>1</em> through <em>10</em>.</li>\n            <li><em>XX, XXX, XL,</em> and <em>L</em> are <em>20, 30, 40,</em> and <em>50</em>.</li>\n            <li>For any other two-digit number < 50, concatenate the Roman numeral(s) that represent its multiples of ten with the Roman numeral(s) for its values < 10. For example, <em>43</em> is <em>40 + 3 = \\'XL\\' + \\'III\\' = \\'XLIII\\'</em></li>\n        </ul>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>sortRoman</code> in the editor below.</p>\n        \n        <p><code>sortRoman</code> has the following parameters:</p>\n        <ul>\n            <li><code>names[n]</code>: an array of strings comprised of names and roman numerals</li>\n        </ul>\n\n        <p><strong>Returns:</strong></p>\n        <ul>\n            <li><code>string[n]</code>: an array of strings sorted first by given name, then by ordinal</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 50</li>\n            <li>Each <code>names[i]</code> is a single string composed of 2 space-separated values: <code>givenName</code> and <code>romanNumeral</code></li>\n            <li><code>romanNumeral</code> represents a number between 1 and 50, inclusive</li>\n            <li>1 ≤ |givenName| ≤ 20</li>\n            <li>Each <code>givenName</code> starts with an uppercase letter ascii[A-Z] which is followed by lowercase letters ascii[a-z]</li>\n            <li>There is a space between <code>givenName</code> and <code>romanNumeral</code></li>\n            <li>Each <code>names[i]</code> is distinct</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p><code>names = [\\'Steven XL\\', \\'Steven XVI\\', \\'David IX\\', \\'Mary XV\\', \\'Mary XIII\\', \\'Mary XX\\']</code></p>\n            \n            <p>The result with Roman numerals is the expected return value. Written in decimal and sorted, they are [\\'David 9\\', \\'Mary 13\\', \\'Mary 15\\', \\'Mary 20\\', \\'Steven 16\\', \\'Steven 40\\']. The return array is [\\'David IX\\', \\'Mary XIII\\', \\'Mary XV\\', \\'Mary XX\\', \\'Steven XVI\\', \\'Steven XL\\'].</p>\n        </div>\n\n        <div class=\\\"sample-case\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\n2\nLouis IX\nLouis VIII</pre>\n            <pre class=\\\"output\\\">Output:\nLouis VIII\nLouis IX</pre>\n            <div class=\\\"explanation\\\">\n                <p>Sort first by <code>givenName</code> and then, if <code>givenName</code> is not unique, by the value of the Roman numeral. In decimal, the list is sorted [\\'Louis 8\\', \\'Louis 9\\'].</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1avmtXmdFsIiv5HzrRMBlOCWog5tZv9q9-oZcapvx1No/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint romanToInt(const string& s){\\n    unordered_map<char, int> roman = { {\\'I\\',1}, {\\'V\\',5}, {\\'X\\',10}, {\\'L\\',50}, {\\'C\\',100}, {\\'D\\',500}, {\\'M\\',1000} };\\n    int total = 0;\\n    int prev = 0;\\n    for(auto it = s.rbegin(); it != s.rend(); ++it){\\n        int curr = roman[*it];\\n        if(curr < prev)\\n            total -= curr;\\n        else\\n            total += curr;\\n        prev = curr;\\n    }\\n    return total;\\n}\\n\\nvector<string> sortRoman(vector<string> names) {\\n    struct Entry {\\n        string name;\\n        string numeral;\\n        int value;\\n    };\\n    vector<Entry> entries;\\n    for(auto &s : names){\\n        size_t pos = s.find(\\' \\');\\n        string name = s.substr(0, pos);\\n        string numeral = s.substr(pos+1);\\n        int val = romanToInt(numeral);\\n        entries.push_back(Entry{ name, numeral, val });\\n    }\\n    sort(entries.begin(), entries.end(), [&](const Entry &a, const Entry &b) -> bool{\\n        if(a.name != b.name)\\n            return a.name < b.name;\\n        return a.value < b.value;\\n    });\\n    vector<string> sorted;\\n    for(auto &e : entries){\\n        sorted.push_back(e.name + \\\" \\\" + e.numeral);\\n    }\\n    return sorted;\\n}\\n\\nint main(){\\n    int n;\\n    cin >> n;\\n    vector<string> names(n);\\n    cin.ignore();\\n    for(int i = 0; i < n; ++i){\\n        getline(cin, names[i]);\\n    }\\n    vector<string> sorted = sortRoman(names);\\n    for(auto &s : sorted){\\n        cout << s << \\\"\\\\n\\\";\\n    }\\n}",
        "company_name": "Greyorange",
        "company_id": 63
    },
    {
        "id": 237,
        "title": "Optimal Points Selection",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">11. Optimal Points Selection</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given a set of n distinct points on the x-axis, choose k of them such that the minimum distance between any two chosen points is as large as possible. Find this maximum possible minimum distance.</p>\n    </div>\n\n    <div class=\\\"example-initial\\\">\n        <h3>Example</h3>\n        <p>Consider n = 5, k = 3 and x = [1, 4, 2, 9, 8].</p>\n        <p>In the optimal solution, one of the possible selection of points is [1, 4, 8]. Here,</p>\n        <ul>\n            <li>The distance between 1 and 4 = abs(1 - 4) = 3</li>\n            <li>The distance between 1 and 8 = abs(1 - 8) = 7</li>\n            <li>The distance between 4 and 8 = abs(4 - 8) = 4</li>\n        </ul>\n        <p>The minimum amongst them is 3, which is the maximum possible.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>maximizeMinimumDistance</code> in the editor below.</p>\n\n        <p><code>maximizeMinimumDistance</code> has the following parameters:</p>\n        <ul>\n            <li><code>int x[n]</code>: the x-coordinates of points</li>\n            <li><code>int k</code>: the number of points to choose</li>\n        </ul>\n\n        <div class=\\\"returns\\\">\n            <h4>Returns</h4>\n            <p><code>int</code>: the maximum possible minimum distance between any 2 of the chosen points</p>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ n ≤ 10<sup>5</sup></li>\n            <li>0 < x<sub>i</sub> < 10<sup>9</sup></li>\n            <li>2 ≤ k ≤ n</li>\n            <li>All points are at distinct x-coordinates.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format For Custom Testing</h3>\n        <p>The first line contains an integer, n, the number of elements in x.</p>\n        <p>Each line i of the n subsequent lines (where 0 ≤ i < n) contains an integer, x[i].</p>\n        <p>The last line contains an integer, k.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <div class=\\\"example\\\">\n            <h3>Sample Case 0</h3>\n            <pre class=\\\"input\\\">Input:\n5\n3\n10\n14\n8\n7\n4</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>One optimal selection is [3, 10, 14, 7].</p>\n                <ul>\n                    <li>Distance between 3 and 10 = abs(3 - 10) = 7</li>\n                    <li>Distance between 3 and 14 = abs(3 - 14) = 11</li>\n                    <li>Distance between 3 and 7 = abs(3 - 7) = 4</li>\n                    <li>Distance between 10 and 14 = abs(10 - 14) = 4</li>\n                    <li>Distance between 10 and 7 = abs(10 - 7) = 3</li>\n                    <li>Distance between 14 and 7 = abs(14 - 7) = 7</li>\n                </ul>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h3>Sample Case 1</h3>\n            <pre class=\\\"input\\\">Input:\n3\n1\n10\n100\n2</pre>\n            <pre class=\\\"output\\\">Output:\n99</pre>\n            <div class=\\\"explanation\\\">\n                <p>The optimal selection of points is [1, 100].</p>\n                <ul>\n                    <li>The distance between 1 and 100 = abs(1 - 100) = 99.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1AtyfMmSkxOMCqpl_RPIcuQqUXI_lUXxJrRc2dkaIykk/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nbool isPossible(const vector<int>& x, int n, int k, int d){\\n    int cnt = 1, last = x[0];\\n    for(int i = 1; i < n; i++) {\\n        if(x[i] - last >= d){\\n            cnt++;\\n            last = x[i];\\n            if(cnt >= k) return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nint maximizeMinimumDistance(vector<int> x, int k){\\n    int n = x.size();\\n    sort(x.begin(), x.end());\\n    int l = 0, h = x[n-1] - x[0], res = 0;\\n    while(l <= h){\\n        int m = l + (h - l) / 2;\\n        if(isPossible(x, n, k, m)){\\n            res = m;\\n            l = m + 1;\\n        }\\n        else{\\n            h = m - 1;\\n        }\\n    }\\n    return res;\\n}",
        "company_name": "Greyorange",
        "company_id": 63
    }
]