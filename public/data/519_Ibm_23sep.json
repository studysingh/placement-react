[
    {
        "id": 1483,
        "title": "Task Processing Order",
        "problem_statement": "<h1>Task Processing Order</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a queue of <code>n</code> tasks numbered from 1 to <code>n</code>, where each task requires <code>time[i]</code> units to complete. You will process tasks in order from 1 to <code>n</code>. In one turn, you can process at most <code>m</code> units of time for a task.</p>\r\n<p>If a task needs more than <code>m</code> units, it is moved to the back of the queue with its remaining time. A task is removed from the queue once it is completed.</p>\r\n<p>Implement a function that finds the order in which tasks are completed.</p>\r\n<p>The function <code>getTaskOrder</code> will take two inputs:</p>\r\n<ul>\r\n    <li><code>int time[]</code>: the time required for each task to complete</li>\r\n    <li><code>int m</code>: the maximum units of time any task you can process in one turn</li>\r\n</ul>\r\n<p>The function should return an array of integers representing the order in which tasks are completed.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: time = [1,2,3], m = 1\r\nOutput: [1,2,3]</code></pre>\r\n<p><strong>Explanation:</strong> Tasks are processed one by one. Since <code>m = 1</code>, each task is completed in a single turn as their required times are 1, 2, and 3 respectively, and <code>m</code> is sufficient for each step. The simulation steps are as follows:</p>\r\n<pre><code class='language-text'>Simulation Steps\r\nStep | Queue before (1-based indexing) | Task Processed | Time Processed | Queue after (1-based indexing) | Completed Tasks (1-based indexing)\r\n-----|---------------------------------|----------------|----------------|--------------------------------|-----------------------------------\r\n1    | [1, 2, 3]                       | 1              | 1              | [2, 3]                         | [1]\r\n2    | [2, 3]                          | 2              | 1              | [3]                            | [1, 2]\r\n3    | [3]                             | 3              | 1              | []                             | [1, 2, 3]\r\n\r\nSo, the final order of completion is [1, 2, 3].</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: time = [2,1,4,3], m = 3\r\nOutput: [1,2,4,3]</code></pre>\r\n<p><strong>Explanation:</strong> Tasks are processed in a round-robin fashion. Task 1 needs 2 units, processed in 1 turn. Task 2 needs 1 unit, processed in 1 turn. Task 3 needs 4 units, processed for 3 units in the first turn, then moved to back, then processed for 1 unit in a later turn. Task 4 needs 3 units, processed in 1 turn. The simulation steps are as follows:</p>\r\n<pre><code class='language-text'>Simulation Steps\r\nStep | Queue before (1-based indexing) | Task Processed | Time Processed | Queue after (1-based indexing) | Completed Tasks (1-based indexing)\r\n-----|---------------------------------|----------------|----------------|--------------------------------|-----------------------------------\r\n1    | [1, 2, 3, 4]                    | 1              | 2              | [2, 3, 4]                      | [1]\r\n2    | [2, 3, 4]                       | 2              | 1              | [3, 4]                         | [1, 2]\r\n3    | [3, 4]                          | 3              | 3              | [4, 3]                         | [1, 2]\r\n4    | [4, 3]                          | 4              | 3              | [3]                            | [1, 2, 4]\r\n5    | [3]                             | 3              | 1              | []                             | [1, 2, 4, 3]\r\n\r\nSo, the final order of completion is [1, 2, 4, 3].</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: time = [4,4,5,3,5], m = 3\r\nOutput: [4,1,2,3,5]</code></pre>\r\n<p><strong>Explanation:</strong> Tasks are processed in a round-robin fashion. Tasks requiring more than <code>m=3</code> units are partially processed and moved to the back of the queue. The simulation steps are as follows:</p>\r\n<pre><code class='language-text'>Simulation Steps\r\nStep | Queue before (1-based indexing) | Task Processed | Time Processed | Queue after (1-based indexing) | Completed Tasks (1-based indexing)\r\n-----|---------------------------------|----------------|----------------|--------------------------------|-----------------------------------\r\n1    | [1, 2, 3, 4, 5]                 | 1              | 3              | [2, 3, 4, 5, 1]                | []\r\n2    | [2, 3, 4, 5, 1]                 | 2              | 3              | [3, 4, 5, 1, 2]                | []\r\n3    | [3, 4, 5, 1, 2]                 | 3              | 3              | [4, 5, 1, 2, 3]                | []\r\n4    | [4, 5, 1, 2, 3]                 | 4              | 3              | [5, 1, 2, 3]                   | [4]\r\n5    | [5, 1, 2, 3]                    | 5              | 3              | [1, 2, 3, 5]                   | [4]\r\n6    | [1, 2, 3, 5]                    | 1              | 1              | [2, 3, 5]                      | [4, 1]\r\n7    | [2, 3, 5]                       | 2              | 1              | [3, 5]                         | [4, 1, 2]\r\n8    | [3, 5]                          | 3              | 2              | [5]                            | [4, 1, 2, 3]\r\n9    | [5]                             | 5              | 2              | []                             | [4, 1, 2, 3, 5]\r\n\r\nSo, the final order of completion is [4, 1, 2, 3, 5].</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= m, time[i] &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>vector<int> getTaskOrder(vector<int> time, int m) {\r\n    // Function implementation would go here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ibm_23sep",
        "company_id": 519
    },
    {
        "id": 1484,
        "title": "Total Transmitted Logs",
        "problem_statement": "<h1>Total Transmitted Logs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a logging system with a circular buffer that can hold up to `n` logs. Each log has a unique timestamp `logTimestamp[i]` (in milliseconds) and a tag `logTag[i]`. When a new log arrives, the system:</p>\r\n<ul>\r\n    <li>Transmits all logs sharing the same tag as the new log, but only if they fall within a specific time window (`transmissionWindow`).</li>\r\n    <li>If the buffer is full, it removes the oldest log to make space for the new one.</li>\r\n</ul>\r\n<p>Implement a function that finds the total number of logs transmitted throughout the process as logs arrive, considering the circular buffer's capacity and the time window for transmission.</p>\r\n<p>The function `getTotalTransmittedLogs` takes the following parameters:</p>\r\n<ul>\r\n    <li>`int logTimestamp[]`: the recording times of logs in milliseconds</li>\r\n    <li>`string logTag[]`: the tags of logs</li>\r\n    <li>`int bufferCapacity`: the capacity of the circular buffer</li>\r\n    <li>`int transmissionWindow`: the time range (in milliseconds) within which logs sharing the same tag as the arriving log are transmitted</li>\r\n</ul>\r\n<p>The function should return the number of logs transmitted during the process as an integer.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nlogTimestamp = [1000, 2000, 3000, 4001]\r\nlogTag = [\"error\", \"warning\", \"error\", \"warning\"]\r\nbufferCapacity = 3\r\ntransmissionWindow = 2000\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The logs received are as follows:</p>\r\n<ul>\r\n    <li>Log 1: Timestamp = 1000 ms, Tag = \"error\"</li>\r\n    <li>Log 2: Timestamp = 2000 ms, Tag = \"warning\"</li>\r\n    <li>Log 3: Timestamp = 3000 ms, Tag = \"error\"</li>\r\n    <li>Log 4: Timestamp = 4001 ms, Tag = \"warning\"</li>\r\n</ul>\r\n<p>Let's trace the process:</p>\r\n<ul>\r\n    <li><strong>At 1000 ms (Log 1 \"error\"):</strong> The buffer is empty. Log 1 is added to the buffer. Log 1 is transmitted. Total transmitted: 1. Buffer: [Log 1].</li>\r\n    <li><strong>At 2000 ms (Log 2 \"warning\"):</strong> The buffer contains [Log 1]. Log 2 is added. Log 2 is transmitted. Total transmitted: 2. Buffer: [Log 1, Log 2].</li>\r\n    <li><strong>At 3000 ms (Log 3 \"error\"):</strong> The buffer contains [Log 1, Log 2]. Log 3 is added. The buffer is now [Log 1, Log 2, Log 3]. Logs in the buffer with tag \"error\" and within `transmissionWindow` (3000 - 2000 = 1000 ms) of Log 3 are transmitted. Log 1 (1000 ms) has tag \"error\" and `3000 - 1000 = 2000` ms, which is within the `transmissionWindow` of 2000 ms. So, Log 1 and Log 3 are transmitted. Total transmitted: 2 + 2 = 4. Buffer: [Log 1, Log 2, Log 3].</li>\r\n    <li><strong>At 4001 ms (Log 4 \"warning\"):</strong> The buffer contains [Log 1, Log 2, Log 3] and is full. The oldest log, Log 1, is removed. Log 4 is added. The buffer is now [Log 2, Log 3, Log 4]. Logs in the buffer with tag \"warning\" and within `transmissionWindow` (4001 - 2000 = 2001 ms) of Log 4 are checked. Log 2 (2000 ms) has tag \"warning\", but `4001 - 2000 = 2001` ms, which is outside the `transmissionWindow` of 2000 ms. So, only Log 4 is transmitted. Total transmitted: 4 + 1 = 5. Buffer: [Log 2, Log 3, Log 4].</li>\r\n</ul>\r\n<p>The total number of logs transmitted during the process is 5.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nlogTimestamp = [1000, 2000, 2500, 3000, 4000]\r\nlogTag = [\"error\", \"warning\", \"error\", \"info\", \"warning\"]\r\nbufferCapacity = 3\r\ntransmissionWindow = 2000\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The logs received are as follows:</p>\r\n<ul>\r\n    <li>Log 1: Timestamp = 1000 ms, Tag = \"error\"</li>\r\n    <li>Log 2: Timestamp = 2000 ms, Tag = \"warning\"</li>\r\n    <li>Log 3: Timestamp = 2500 ms, Tag = \"error\"</li>\r\n    <li>Log 4: Timestamp = 3000 ms, Tag = \"info\"</li>\r\n    <li>Log 5: Timestamp = 4000 ms, Tag = \"warning\"</li>\r\n</ul>\r\n<p>Let's trace the process:</p>\r\n<ul>\r\n    <li><strong>At 1000 ms (Log 1 \"error\"):</strong> Buffer: []. Log 1 added. Log 1 transmitted. Total transmitted: 1. Buffer: [Log 1].</li>\r\n    <li><strong>At 2000 ms (Log 2 \"warning\"):</strong> Buffer: [Log 1]. Log 2 added. Log 2 transmitted. Total transmitted: 2. Buffer: [Log 1, Log 2].</li>\r\n    <li><strong>At 2500 ms (Log 3 \"error\"):</strong> Buffer: [Log 1, Log 2]. Log 3 added. Buffer: [Log 1, Log 2, Log 3]. Log 1 (1000 ms) has tag \"error\" and `2500 - 1000 = 1500` ms, which is within `transmissionWindow` (2000 ms). Log 1 and Log 3 transmitted. Total transmitted: 2 + 2 = 4. Buffer: [Log 1, Log 2, Log 3].</li>\r\n    <li><strong>At 3000 ms (Log 4 \"info\"):</strong> Buffer: [Log 1, Log 2, Log 3] (full). Oldest log (Log 1) removed. Log 4 added. Buffer: [Log 2, Log 3, Log 4]. Log 4 transmitted. Total transmitted: 4 + 1 = 5. Buffer: [Log 2, Log 3, Log 4].</li>\r\n    <li><strong>At 4000 ms (Log 5 \"warning\"):</strong> Buffer: [Log 2, Log 3, Log 4] (full). Oldest log (Log 2) removed. Log 5 added. Buffer: [Log 3, Log 4, Log 5]. Log 5 transmitted. Total transmitted: 5 + 1 = 6. Buffer: [Log 3, Log 4, Log 5].</li>\r\n</ul>\r\n<p>The total number of logs transmitted during the process is 6.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nlogTimestamp = [10, 15, 20]\r\nlogTag = [\"a\", \"a\", \"b\"]\r\nbufferCapacity = 2\r\ntransmissionWindow = 5\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The logs received are as follows:</p>\r\n<ul>\r\n    <li>Log 1: Timestamp = 10 ms, Tag = \"a\"</li>\r\n    <li>Log 2: Timestamp = 15 ms, Tag = \"a\"</li>\r\n    <li>Log 3: Timestamp = 20 ms, Tag = \"b\"</li>\r\n</ul>\r\n<p>Let's trace the process:</p>\r\n<ul>\r\n    <li><strong>At 10 ms (Log 1 \"a\"):</strong> Buffer: []. Log 1 added. Log 1 transmitted. Total transmitted: 1. Buffer: [Log 1].</li>\r\n    <li><strong>At 15 ms (Log 2 \"a\"):</strong> Buffer: [Log 1]. Log 2 added. Buffer: [Log 1, Log 2]. Log 1 (10 ms) has tag \"a\" and `15 - 10 = 5` ms, which is within `transmissionWindow` (5 ms). Log 1 and Log 2 transmitted. Total transmitted: 1 + 2 = 3. Buffer: [Log 1, Log 2].</li>\r\n    <li><strong>At 20 ms (Log 3 \"b\"):</strong> Buffer: [Log 1, Log 2] (full). Oldest log (Log 1) removed. Log 3 added. Buffer: [Log 2, Log 3]. Log 3 transmitted. Total transmitted: 3 + 1 = 4. Buffer: [Log 2, Log 3].</li>\r\n</ul>\r\n<p>The total number of logs transmitted during the process is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= n <= 10^5`</li>\r\n    <li>`1 <= logTimestamp[i] <= 10^9`</li>\r\n    <li>`1 <= logTag[i].length <= 10`</li>\r\n    <li>`logTag[i]` consists only of lowercase English letters.</li>\r\n    <li>`1 <= bufferCapacity <= n`</li>\r\n    <li>`1 <= transmissionWindow <= 10^9`</li>\r\n    <li>`logTimestamp` is in ascending order of timestamps.</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>The first line contains an integer `n`, the number of logs.</p>\r\n<p>Each of the next `n` lines contains an integer `logTimestamp[i]`.</p>\r\n<p>The following line contains an integer `n` (representing the size of `logTag`).</p>\r\n<p>Each of the next `n` lines contains a string `logTag[i]`.</p>\r\n<p>The next line contains an integer `bufferCapacity`.</p>\r\n<p>The final line contains an integer `transmissionWindow`.</p>\r\n\r\n<pre><code class='language-javascript'>long getTotalTransmittedLogs(vector<int> logTimestamp, vector<string> logTag, int bufferCapacity, int transmissionWindow) {\r\n    // Function implementation\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ibm_23sep",
        "company_id": 519
    },
    {
        "id": 1491,
        "title": "Highly Profitable Intervals",
        "problem_statement": "```html\r\n<h1>Highly Profitable Intervals</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The stock performance of a company is being examined to assess its net profit over time.</p>\r\n<p>For a given analysis parameter <code>k</code>, an interval of <code>k</code> consecutive months is considered highly profitable if the stock prices increase strictly throughout those months.</p>\r\n<p>Given the stock prices for <code>n</code> months and the analysis parameter <code>k</code>, determine the number of such highly profitable intervals.</p>\r\n<p><strong>Note:</strong> If the interval length is 1, each subarray of length 1 is highly profitable.</p>\r\n<p>Complete the function <code>countHighlyProfitableIntervals</code> in the editor below.</p>\r\n<p><code>countHighlyProfitableIntervals</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int stockPrices[n]</code>: the stock prices for <code>n</code> months</li>\r\n    <li><code>int k</code>: the analysis parameter</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of highly profitable intervals</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: stockPrices = [3, 5, 7, 8], k = 3\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The intervals <code>[3, 5, 7]</code> (months 1-3) and <code>[5, 7, 8]</code> (months 2-4) are strictly increasing. Therefore, there are 2 highly profitable intervals.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: stockPrices = [1, 2, 3, 4, 5], k = 3\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Months 1 to 3: <code>[1, 2, 3]</code>. Months 4 to 6: <code>[3, 4, 5]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: stockPrices = [1, 2, 3, 4], k = 4\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Since <code>k</code> is equal to <code>n</code>, we can only make one group consisting of all the months. Since this is strictly increasing, the answer is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= k <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= stockPrice[i] <= 10^9</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ibm_23sep",
        "company_id": 519
    },
    {
        "id": 1492,
        "title": "Minimum Cost String Transformation",
        "problem_statement": "<h1>Minimum Cost String Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two strings <code>s</code> and <code>t</code>, determine the minimum total cost required to transform <code>s</code> into <code>t</code> using the following operation any number of times, including zero:</p>\r\n<ul>\r\n    <li>Select an index <code>i</code> such that <code>0 &le; i &lt; length of s</code>.</li>\r\n    <li>Remove the character at index <code>i</code>.</li>\r\n    <li>Concatenate the remaining characters in order.</li>\r\n    <li>The step costs <code>i</code> units.</li>\r\n</ul>\r\n<p>If the transformation is not possible, return <code>-1</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abacc\", t = \"aba\"\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> To transform \"abacc\" into \"aba\":</p>\r\n<p>\r\n    The underlined character is removed in the step.\r\n</p>\r\n<p>\r\n    <strong>Step 1:</strong> From <code>s = \"abacc\"</code>, choose index <code>i = 3</code> (the first 'c'). Remove it. The cost is 3 units. <code>s</code> becomes <code>\"abac\"</code>.\r\n</p>\r\n<p>\r\n    <strong>Step 2:</strong> From <code>s = \"abac\"</code>, choose index <code>i = 3</code> (the second 'c'). Remove it. The cost is 3 units. <code>s</code> becomes <code>\"aba\"</code>.\r\n</p>\r\n<p>\r\n    Total cost = 3 + 3 = 6.\r\n</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"abcde\", t = \"acx\"\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> It is not possible to match the 'x' in <code>t</code>, as 'x' is not present in <code>s</code> or cannot be formed by removing characters.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; length of s</code> and <code>t &le; 2 * 10<sup>5</sup></code></li>\r\n    <li>Strings <code>s</code> and <code>t</code> contain only lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ibm_23sep",
        "company_id": 519
    },
    {
        "id": 1493,
        "title": "Split Into Two",
        "problem_statement": "<h1>Split Into Two</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of integers, find the number of ways to split the entire array into two non-empty subarrays, left and right, such that the sum of elements in the left subarray is greater than the sum of elements in the right subarray.</p>\r\n<p>Complete the function <code>splitIntoTwo</code> in the editor with the following parameter:</p>\r\n<ul>\r\n    <li><code>int arr[n]:</code> an integer array</li>\r\n</ul>\r\n<p>The function is expected to return an <code>int</code>, representing the number of ways to split the array such that the left sum is greater than the right sum.</p>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>Input from stdin will be processed as follows and passed to the function.</p>\r\n<p>In the first line, there is a single integer <code>n</code>.</p>\r\n<p>Each of the next <code>n</code> lines contains an integer, <code>arr[i]</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [10, 4, -8, 7]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are three ways to split the array into two non-empty subarrays:</p>\r\n<ul>\r\n    <li>Left: <code>[10]</code>, Right: <code>[4, -8, 7]</code>. Left sum = 10, Right sum = 3. Since 10 > 3, this split satisfies the condition.</li>\r\n    <li>Left: <code>[10, 4]</code>, Right: <code>[-8, 7]</code>. Left sum = 14, Right sum = -1. Since 14 > -1, this split satisfies the condition.</li>\r\n    <li>Left: <code>[10, 4, -8]</code>, Right: <code>[7]</code>. Left sum = 6, Right sum = 7. Since 6 > 7 is false, this split does not satisfy the condition.</li>\r\n</ul>\r\n<p>The first two splits satisfy the condition that the left sum is greater than the right sum, so the return value is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n10\r\n-5\r\n6\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The input represents <code>n = 3</code> and <code>arr = [10, -5, 6]</code>.</p>\r\n<ul>\r\n    <li>Left: <code>[10]</code>, Right: <code>[-5, 6]</code>. Left sum = 10, Right sum = 1. Since 10 > 1, this split satisfies the condition.</li>\r\n    <li>Left: <code>[10, -5]</code>, Right: <code>[6]</code>. Left sum = 5, Right sum = 6. Since 5 > 6 is false, this split does not satisfy the condition.</li>\r\n</ul>\r\n<p>Only one split satisfies the condition, so the return value is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>-10<sup>4</sup> &le; arr[i] &le; 10<sup>4</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ibm_23sep",
        "company_id": 519
    }
]