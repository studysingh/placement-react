[
    {
        "id": 1538,
        "title": "Minimum Operations to Zero Array",
        "problem_statement": "```html\r\n<h1>Minimum Operations to Zero Array</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a function that determines the number of operations required to reduce all elements of a given array <code>arr</code> to zero.</p>\r\n<p>In each operation, traverse the whole array from left to right. For each index <code>i</code> (from <code>0</code> to <code>n-1</code>), using <code>0</code>-based indexing:</p>\r\n<ul>\r\n    <li>If <code>arr[i] &gt; arr[i-1]</code> and <code>i &gt; 0</code>, update <code>arr[i]</code> to <code>max(0, arr[i] - 1)</code>.</li>\r\n    <li>Otherwise, leave <code>arr[i]</code> unchanged.</li>\r\n</ul>\r\n<p>The function <code>getNumberOfOperations</code> will take one input: <code>int arr[]</code> the given array of positive integers.</p>\r\n<p>The function signature is as follows:</p>\r\n<pre><code class='language-cpp'>int getNumberOfOperations(vector&lt;int&gt; arr)</code></pre>\r\n<p>The function should return an integer denoting the number of operations required to make all elements of <code>arr</code> equal to zero.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, arr = [1,3,1]</code></pre>\r\n<p><strong>Explanation:</strong> Here, the underlined elements represent those changed during the operation and their modified values.</p>\r\n<p>The sequence of operations:</p>\r\n<pre><code class='language-text'>Operation Number | arr before | arr after\r\n-----------------|------------|----------\r\n1                | [1, 3, 1]  | [0, 2, 0]\r\n2                | [0, 2, 0]  | [0, 0, 0]</code></pre>\r\n<pre><code class='language-text'>Output: 2</code></pre>\r\n<p><strong>Explanation:</strong> Hence, the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 2, arr = [2,1]</code></pre>\r\n<p><strong>Explanation:</strong> Here, the underlined elements represent those changed during the operation and their modified values.</p>\r\n<p>The sequence of operations:</p>\r\n<pre><code class='language-text",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_29sep",
        "company_id": 539
    },
    {
        "id": 1539,
        "title": "Array Challenge",
        "problem_statement": "<h1>Array Challenge</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For each element in an array, implement a function that:</p>\r\n<ol>\r\n    <li>Initializes a counter to 0 for each element.</li>\r\n    <li>Compares the element with each element to its left:\r\n        <ul>\r\n            <li>If the left element is greater, subtract the absolute difference from the counter.</li>\r\n            <li>If the left element is smaller, add the absolute difference to the counter.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Returns a new array containing the final counter values for each element.</li>\r\n</ol>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>arrayChallenge</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int arr[]</code>: an array of integers</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>int[]</code>: an array of integers calculated as described</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, arr = [2, 4, 3]\r\nOutput: [0, 2, 0]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For <code>arr[0] = 2</code>, counter starts at 0, and there are no elements to the left, so the counter = 0.</li>\r\n    <li>For <code>arr[1] = 4</code>, counter starts at 0 and then increases by <code>|4 - 2| = 2</code> at the first and only comparison; counter = 2.</li>\r\n    <li>Testing <code>arr[2] = 3</code>, first against 4, counter = <code>0 - |3 - 4| = -1</code>, and then against 2, counter = <code>-1 + |3 - 2| = 0</code>.</li>\r\n    <li>The answer array is <code>[0, 2, 0]</code>.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'arrayChallenge' function below.\r\n *\r\n * The function is expected to return a LONG_INTEGER_ARRAY.\r\n * The function accepts LONG_INTEGER_ARRAY arr as parameter.\r\n */\r\n\r\nvector&lt;long&gt; arrayChallenge(vector&lt;long&gt; arr) {\r\n    //\r\n}\r\n\r\nint main() {\r\n    //\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_29sep",
        "company_id": 539
    },
    {
        "id": 1540,
        "title": "Get Smallest String",
        "problem_statement": "<h1>Get Smallest String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a binary string <code>dataSequence</code> and an integer <code>maxSwaps</code>. The adjacent characters in the string can be swapped at most <code>maxSwaps</code> times.</p>\r\n<p>Your task is to determine the alphabetically smallest string that can be achieved by performing at most <code>maxSwaps</code> swaps.</p>\r\n<p><strong>Note:</strong> A string is said to be alphabetically smaller than another if it appears before it in dictionary order, comparing character by character from left to right.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getSmallestString</code> in the editor with the following parameters:</p>\r\n<ul>\r\n<li><code>string dataSequence</code>: the binary string</li>\r\n<li><code>int maxSwaps</code>: the maximum number of adjacent swaps that can be performed</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>string</code>: the alphabetically smallest binary string after at most <code>maxSwaps</code> swaps.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dataSequence = \"1111100\", maxSwaps = 5\r\nOutput: \"0111110\"</code></pre>\r\n<p><strong>Explanation:</strong> To achieve the alphabetically smallest string, we prioritize moving '0's to the leftmost possible positions. The following sequence of 5 swaps moves the '0's to the front:</p>\r\n<p>Initial: \"1111100\"</p>\r\n<p>1. Swap '0' at index 5 with '1' at index 4: \"1111010\"</p>\r\n<p>2. Swap '0' at index 4 with '1' at index 3: \"1110110\"</p>\r\n<p>3. Swap '0' at index 3 with '1' at index 2: \"1101110\"</p>\r\n<p>4. Swap '0' at index 2 with '1' at index 1: \"1011110\"</p>\r\n<p>5. Swap '0' at index 1 with '1' at index 0: \"0111110\"</p>\r\n<p>After 5 swaps, the string becomes \"0111110\", which is the alphabetically smallest possible string.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: dataSequence = \"0011\", maxSwaps = 5\r\nOutput: \"0011\"</code></pre>\r\n<p><strong>Explanation:</strong> The string \"0011\" is already the alphabetically smallest possible string. No operation is performed on the string.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &le; |dataSequence| &le; 2 * 10<sup>5</sup></code>, where <code>| |</code> denotes the length of the string.</li>\r\n<li><code>1 &le; maxSwaps &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_29sep",
        "company_id": 539
    },
    {
        "id": 1541,
        "title": "Minimum Project Cost",
        "problem_statement": "<h1>Minimum Project Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A client has posted multiple web development projects on a freelancing website, and different developers have submitted bids for these projects. Given the information about project bids, determine the minimum total cost for the client to complete all projects.</p>\r\n<p>Return the minimum possible cost for completing all projects. If any project does not receive any bids, return -1.</p>\r\n<p>Complete the function <code>minCost</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int numProjects</code>: the total number of projects labeled from 0 to <code>numProjects - 1</code>.</li>\r\n    <li><code>int projectId[]</code>: the projects that the freelancers bid on.</li>\r\n    <li><code>int bid[]</code>: the bid amounts posted by the freelancers.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>long</code>: the minimum cost the client can spend to complete all projects, or -1 if any project has no bids.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nnumProjects = 3\r\nprojectId = [2, 0, 1, 2]\r\nbid = [8, 7, 6, 9]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe bids are aligned with <code>projectId</code> as follows:</p>\r\n<ul>\r\n    <li>The first web developer bid 8 for project 2.</li>\r\n    <li>The second web developer bid 7 for project 0.</li>\r\n    <li>The third web developer bid 6 for project 1.</li>\r\n    <li>The fourth web developer bid 9 for project 2.</li>\r\n</ul>\r\n<p>There is only one choice for who to hire for project 0, and it will cost 7. Likewise, there is only one choice for project 1, which will cost 6. For project 2, it is optimal to hire the first web developer, instead of the fourth, and doing so will cost 8. So the final answer is 7 + 6 + 8 = 21.</p>\r\n<p>If instead there were four projects, the answer would be -1 since there were no bids received on the fourth project.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nnumProjects = 2\r\nprojectId = [0, 1, 0, 1, 1]\r\nbid = [4, 74, 47, 744, 7]\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe bids are as follows:</p>\r\n<ul>\r\n    <li>The first web developer bid 4 for project 0.</li>\r\n    <li>The second web developer bid 74 for project 1.</li>\r\n    <li>The third web developer bid 47 for project 0.</li>\r\n    <li>The fourth web developer bid 744 for project 1.</li>\r\n    <li>The fifth web developer bid 7 for project 1.</li>\r\n</ul>\r\n<p>The optimal solution is to hire the first web developer to complete project 0 (which costs 4) and to hire the fifth web developer to complete project 1 (which costs 7). This brings the total cost to 11.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nnumProjects = 2\r\nprojectId = [1, 1]\r\nbid = [4, 7]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> Since there are no bids for project 0, the function should return -1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= numProjects <= 5 * 10^5</code></li>\r\n    <li><code>1 <= N <= 5 * 10^5</code> (where <code>N</code> is the number of bids, i.e., the length of <code>projectId</code> and <code>bid</code> arrays)</li>\r\n    <li><code>0 <= projectId[i] < numProjects</code></li>\r\n    <li><code>1 <= bid[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_29sep",
        "company_id": 539
    },
    {
        "id": 1542,
        "title": "Valid Brackets",
        "problem_statement": "<h1>Valid Brackets</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of strings, where each string contains only the characters '(', ')', '{', '}', '[' and ']'. For each string, determine if the string is valid.</p>\r\n<p>A string is valid if:</p>\r\n<ul>\r\n    <li>Every opening bracket has a matching closing bracket of the same type.</li>\r\n    <li>Brackets close in the correct order.</li>\r\n</ul>\r\n<p>The function <code>isValidBrackets</code> will take one input: <code>string queries[q]: the string queries</code></p>\r\n<p>The function should return an array of strings, where each element is \"YES\" if the corresponding input string is valid, or \"NO\" otherwise.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: q = 4\r\nqueries = [\"{[]}\", \"([\", \"{[]\", \")(]\"]\r\nOutput: [\"YES\", \"NO\", \"YES\", \"NO\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li><code>\"{[]}\"</code> &rarr; All brackets are correctly matched and nested.</li>\r\n    <li><code>\"([</code>\" &rarr; Missing closing bracket for '('.</li>\r\n    <li><code>\"{[]\"</code> &rarr; Brackets are properly nested and matched.</li>\r\n    <li><code>\")(]\"</code> &rarr; Starts with closing bracket ')' without a match.</li>\r\n</ol>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n{[]}()\r\n({]}\r\n{}\r\nOutput:\r\nYES\r\nNO\r\nYES</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li><code>\"{[]}()\"</code> &rarr; Brackets are correctly nested and all pairs match.</li>\r\n    <li><code>\"({]}\"</code> &rarr; Incorrect closing: '}' closes before '[' is matched.</li>\r\n    <li><code>\"{}\"</code> &rarr; Brackets are properly matched and in correct order.</li>\r\n</ol>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n{[[}}\r\n[[(){}]\r\n({[]})\r\n((({})[])\r\nOutput:\r\nNO\r\nNO\r\nYES\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li><code>\"{[[}}\"</code> &rarr; Missing closing bracket for '{'.</li>\r\n    <li><code>\"[[(){}]\"</code> &rarr; Incorrect closing: ']' closes before '(' is matched.</li>\r\n    <li><code>\"({[]})\"</code> &rarr; All brackets are properly matched and nested.</li>\r\n    <li><code>\"((({})[])\"</code> &rarr; Incorrect closing: ']' closes before '(' is matched.</li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; q &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; length of queries[i] &le; 2 * 10<sup>5</sup></code></li>\r\n    <li>It is guaranteed that the sum of the lengths of strings over all the queries does not exceed <code>2 * 10<sup>5</sup></code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_29sep",
        "company_id": 539
    }
]