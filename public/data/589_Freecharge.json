[
    {
        "id": 1686,
        "title": "Partitioning the Servers",
        "problem_statement": "<h1>Partitioning the Servers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A local cloud services provider CLTech offers On Demand Services (ODS) for customers to host their operations on CLTech's servers.</p>\r\n<p>Customers send requests for resources to CLTech as and when they require them. Each request can be represented as a list of 3 strings, <code>[request_id, request_start_time, request_end_time]</code>.</p>\r\n<p><strong>Example Request:</strong></p>\r\n<pre><code class='language-text'>[\"300.11.4380\", \"03:34:49\", \"05:23:11\"]</code></pre>\r\n<p><strong>Description of Fields in a Request:</strong></p>\r\n<ul>\r\n    <li><code>request_id</code>: A unique ID is given to each request, which is used to trace the origin of the request.</li>\r\n    <li><code>request_start_time</code>: The time when the serving of the request needs to begin, if the request is served (and not rejected). The request is allocated a partition of the resources beginning at the time. Time is given in <code>hh:mm:ss</code> format.</li>\r\n    <li><code>request_end_time</code>: The time when the serving of the request ends. The request occupies the resource till <code>request_end_time</code>, after which it is freed. Time is given in <code>hh:mm:ss</code> format.</li>\r\n</ul>\r\n<p>Being a private organization, CLTech has limited resources (memory and computational resources), hence, it has to utilize them intelligently and efficiently.</p>\r\n<p>Specifically, assume that a fixed amount of memory and processors are in possession of CLTech.</p>\r\n<p>In order to meet the demands of its large customer base, it has to create partitions (VMs or containers) of the resources. At the beginning of each day, a certain number of partitions K are created, which will be used to serve all requests in the upcoming day. The number of partitions K is chosen to be the maximum number of concurrent requests that were served on the previous day. That is, at max, K requests were served at a single instant on the previous day.</p>\r\n<p><strong>Note:</strong> A successful request is allotted the server from the <code>request_start_time</code> to the <code>request_end_time</code> inclusively.</p>\r\n\r\n<h2>Task</h2>\r\n<p>Given the successful requests (that were served) from yesterday, find K, the number of partitions that CLTech must make today.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nN = 5\r\nrequests = [\r\n    [\"221.005.2333\", \"04:02:31\", \"06:03:32\"],\r\n    [\"33.145.322\", \"05:48:11\", \"06:12:13\"],\r\n    [\"106.234.42\", \"04:15:55\", \"07:11:48\"],\r\n    [\"255.67.888\", \"06:45:36\", \"11:51:58\"],\r\n    [\"655.34.899\", \"09:12:00\", \"12:34:29\"]\r\n]\r\n\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The maximum concurrent requests that occur during a particular time duration are 3 requests, namely 1st, 2nd and 3rd. These occur in the time interval ['05:48:11', '06:03:32'].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>request_id</code> is a string.</li>\r\n    <li><code>request_start_time</code> and <code>request_end_time</code> are strings in <code>hh:mm:ss</code> format.</li>\r\n    <li><code>request_start_time</code> will be less than or equal to <code>request_end_time</code>.</li>\r\n    <li><code>N</code> is an integer representing the number of requests.</li>\r\n    <li>The input list <code>R</code> contains <code>N</code> requests.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>solve</code> provided in the editor. This function takes the following 2 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>N</code>: An integer representing the number of requests.</li>\r\n    <li><code>R</code>: A list of <code>N</code> lists, where each list represents a successful request of the format <code>[request_id, request_start_time, request_end_time]</code>.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line contains a single integer <code>N</code>, denoting the number of requests.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param N An integer representing the number of requests.\n     * @param requests A list of N lists, where each list represents a successful request\n     *                 of the format [request_id, request_start_time, request_end_time].\n     * @return An integer representing the number of partitions K.\n     */\n    int solve(int N, const std::vector<std::vector<std::string>>& requests) {\n        // TODO: Implement the core logic here\n        return 0;\n    }\n};\n\nint main() {\n    // Fast I/O\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<std::vector<std::string>> requests(N, std::vector<std::string>(3));\n    for (int i = 0; i < N; ++i) {\n        std::cin >> requests[i][0] >> requests[i][1] >> requests[i][2];\n    }\n\n    Solution solution;\n    int result = solution.solve(N, requests);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Freecharge",
        "company_id": 589
    },
    {
        "id": 1687,
        "title": "Maximize score",
        "problem_statement": "<h1>Maximize score</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>A</code> of size <code>N</code> as <code>A = [A1, A2, ..., AN]</code>.</p>\r\n<p>Let <code>D(X)</code> be the number of distinct prime factors of integer <code>X</code>. Define a variable <code>score</code> that is initially equal to 1.</p>\r\n<p>You have to maximize the score by doing the following operation at most <code>K</code> times. Remember, that initially, you have a <code>score</code> equal to 1:</p>\r\n<ul>\r\n    <li>Choose a pair of indices <code>(L, R)</code> that you haven't chosen in any of the previous operations and <code>1 &le; L &le; R &le; N</code> must hold true.</li>\r\n    <li>Find an index <code>i</code> in the subarray from <code>L</code> to <code>R</code> (inclusive) such that <code>D(A_i)</code> is maximum in the subarray, i.e., find the index of the element having the maximum number of unique prime factors in subarray <code>[L, R]</code>. If there are multiple indices having the same value of <code>D(A_i)</code> then select the index having a smaller index <code>i</code> within the range <code>[L, R]</code>.</li>\r\n    <li>Multiply <code>A_i</code> to your <code>score</code>.</li>\r\n</ul>\r\n<p>Determine the maximum possible value of score, after applying operations.</p>\r\n<p><strong>Note:</strong> Since the value of score can be huge, compute it modulo <code>10^9 + 7</code>.</p>\r\n<p>Complete the <code>maximizeScore</code> function provided in the editor. This function takes the following 3 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the number of elements in array <code>A</code>.</li>\r\n    <li><code>A</code>: Represents the elements of array <code>A</code>.</li>\r\n    <li><code>K</code>: Represents the maximum number of operations allowed.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<p>The first line contains a single integer <code>T</code>, which denotes the number of test cases. <code>T</code> also specifies the number of times you have to run the <code>maximizeScore</code> function on a different set of inputs.</p>\r\n<p>For each test case:</p>\r\n<ul>\r\n    <li>The first line contains an integer <code>N</code> denoting the number of elements in array <code>A</code>.</li>\r\n    <li>The second line contains <code>N</code> space-separated integers denoting the elements of the array.</li>\r\n    <li>The third line contains an integer <code>K</code> denoting the maximum number of operations allowed.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case in a new line, print the answer representing the maximum possible value of score modulo <code>10^9 + 7</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nN = 4\r\nA = [5, 10, 15, 20]\r\nK = 1\r\nOutput:\r\n20</code></pre>\r\n<p><strong>Explanation:</strong>\r\nInitial score = 1.\r\nIn the first operation, choose <code>(L, R) = (4,4)</code>. The subarray is <code>[20]</code>.\r\nHere, the subarray contains only one element, so you will multiply 20 to the score.\r\nHence, the maximum possible value of score is 20.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n5\r\n4 2 9 2 8\r\n2\r\n5\r\n3 5 8 2 10\r\n2\r\nOutput:\r\n81\r\n100</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe first line contains the number of test cases, <code>T=2</code>.</p>\r\n<p><strong>For first test case:</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li><code>N = 5</code></li>\r\n    <li><code>A = [4, 2, 9, 2, 8]</code></li>\r\n    <li><code>K = 2</code></li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<p>Initial score = 1.</p>\r\n<p>In the first operation, choose <code>(L, R) = (3,3)</code>. The subarray is <code>[9]</code>.</p>\r\n<p>Here, the subarray contains only one element, so multiply 9 to score. So score = 9.</p>\r\n<p>In the second operation, choose <code>(L, R) = (3,4)</code>. The subarray is <code>[9, 2]</code>.</p>\r\n<p>Here <code>D(9)=1</code> (prime factor 3) and <code>D(2)=1</code> (prime factor 2). Both have the same number of distinct prime factors. According to the tie-breaking rule, we pick the element at the smaller index within the subarray. Index 3 (for 9) is smaller than index 4 (for 2). So we pick 9. Score = 9 * 9 = 81.</p>\r\n<p>Since <code>K=2</code> operations are done, the final score is 81.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3 5 8 2 10\r\n2\r\nOutput:\r\n100</code></pre>\r\n<p><strong>Explanation:</strong> (This explanation is not provided in the image, but based on the output, it would involve selecting elements to maximize the score, potentially 10 and then 10 again, or 5 and 20, etc., depending on D(X) values and optimal strategy.)</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 10</code></li>\r\n    <li><code>1 &le; N &le; 10^5</code></li>\r\n    <li><code>1 &le; K &le; min(N * (N - 1) / 2, 10^9)</code></li>\r\n    <li><code>1 &le; A_i &le; 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <numeric>\n\nclass Solution {\npublic:\n    long long maximizeScore(int N, std::vector<int>& A, int K) {\n        // Core logic to solve the problem goes here.\n        const int MOD = 1e9 + 7;\n        long long score = 1;\n        \n        // Placeholder implementation\n        \n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int N;\n        std::cin >> N;\n        std::vector<int> A(N);\n        for (int i = 0; i < N; ++i) {\n            std::cin >> A[i];\n        }\n        int K;\n        std::cin >> K;\n\n        Solution sol;\n        long long result = sol.maximizeScore(N, A, K);\n        std::cout << result << \"\\n\";\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Freecharge",
        "company_id": 589
    }
]