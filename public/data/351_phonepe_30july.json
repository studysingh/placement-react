[
    {
        "id": 1071,
        "title": "Song of Ice and Water",
        "problem_statement": "<h1>Song of Ice and Water</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine a magical ice crate with 8 slots in a row. Each slot can be filled with either ice (1) or water (0).</p>\r\n<p>Every day, the magic changes the state of each slot:</p>\r\n<ul>\r\n    <li>If a slot has two neighbors that are both ice or both water, it will freeze (become ice).</li>\r\n    <li>Otherwise, it will melt (become water).</li>\r\n    <li>The first and last slots only have one neighbor each, so they always melt (become water) the next day.</li>\r\n</ul>\r\n<p>Given the initial state of the crate and a number n, return the state of the crate after n days.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>First line: 8 space-separated integers (0 or 1), representing the initial state of the crate.</li>\r\n    <li>Second line: An integer n, the number of days.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>One line with 8 space-separated integers (0 or 1), representing the state of the crate after n days.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 0 1 0 1 1 0 0 1\r\n1\r\nOutput: 0 1 1 0 0 0 0 0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Slot 0 and Slot 7 always become 0 (water) regardless of the neighbors, as per the rule for first/last slots.</li>\r\n    <li>Slot 1 becomes 1 (ice) because its neighbors, Slot 0 (water) and Slot 2 (water), are both water.</li>\r\n    <li>Slot 2 becomes 1 (ice) because its neighbors, Slot 1 (ice) and Slot 3 (ice), are both ice.</li>\r\n    <li>Slot 3 becomes 0 (water) because its neighbors, Slot 2 (water) and Slot 4 (ice), are different.</li>\r\n    <li>Slot 4 becomes 0 (water) because its neighbors, Slot 3 (ice) and Slot 5 (water), are different.</li>\r\n    <li>Slot 5 becomes 0 (water) because its neighbors, Slot 4 (ice) and Slot 6 (water), are different.</li>\r\n    <li>Slot 6 becomes 0 (water) because its neighbors, Slot 5 (water) and Slot 7 (ice), are different.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "phonepe_30july",
        "company_id": 351
    },
    {
        "id": 1072,
        "title": "Juice Blending Showdown",
        "problem_statement": "<h1>Juice Blending Showdown</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're participating in a unique juice blending competition.</p>\r\n<p>There are N different juice containers placed in a line. Each container has a number written on it, which represents its flavour strength.</p>\r\n<p>At every step of the contest, a container can absorb one of its adjacent neighbours, i.e. either the one to its left or the one to its right. When this happens:</p>\r\n<ul>\r\n    <li>The neighbour container disappears</li>\r\n    <li>The absorbing container updates its intensity to: current strength - neighbours strength</li>\r\n</ul>\r\n<p>The process continues until there's only one container left.</p>\r\n<p>Your goal is to maximize the final flavour strength of the last remaining container by choosing the best possible sequence of absorptions.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line contains an integer n, the number of juice containers</p>\r\n<p>The second line contains n integers a₁, a₂, ..., aₙ, indicating the flavour strength of the containers</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print the maximum possible flavour strength that you can achieve by mixing the juice containers</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 5 * 10<sup>5</sup></code></li>\r\n    <li><code>-10<sup>9</sup> &le; aᵢ &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3 3 0\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> In the first example, the only optimal blending path is:</p>\r\n<ul>\r\n    <li>The third container absorbs the second, intensities become: 3, -3</li>\r\n    <li>The first container absorbs the second, intensity becomes: 6</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n-1 -2 0 -3\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> In the second example, the third container can absorb each neighbour in sequence, gaining intensity to:</p>\r\n<ul>\r\n    <li>0 - 3 - 5 - 6</li>\r\n    <li>OR</li>\r\n    <li>0 - 2 - 5 - 6</li>\r\n    <li>OR</li>\r\n    <li>0 - 2 - 3 - 6</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "phonepe_30july",
        "company_id": 351
    },
    {
        "id": 1073,
        "title": "Trinity Shot Problem",
        "problem_statement": "<h1>Trinity Shot Problem</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Robert Oppenheimer is a sworn communist and believes in equality in nature. He believes that it is unfair that different atoms in the universe have different energy levels, and thinks that all of them must have the same energy level.</p>\r\n<p>In order to do this, Robert invented a laser beam, and named it Trinity. This beam is able to shoot a ray of 'm' energy units that hits the activation energy of an atom and splits it into 2 parts of variable energies following the law of conservation of energy (The parts may have any energy as Robert pleases, as long as conservation of energy is followed). Please note that when an atom with energy 'x' is hit with Trinity, its energy rises by 'm' hence becomes (x+'m').</p>\r\n<p>Robert now wants to test his theory of whether he can equalize the energy levels of all atoms, on a smaller scale. He has 'n' atoms, each of which has an energy level of A_i (1 <= i <= n). Robert has a limited supply of Trinity shots, and hence wants to use them wisely. Tell Robert whether he can make all the resulting atoms with equal energies, and if he can, what is the minimum number of trinity shots that he must make in order to achieve this.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li><strong>First line:</strong> An integer t — the number of test cases (1 <= t <= 1e5).</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li><strong>Line 1:</strong> Consists of 2 integers, 'n' and 'm'. The initial number of atoms, and the activation energy required to break an atom.</li>\r\n            <li><strong>Line 2:</strong> 'n' integers: A1, A2, A3, ....., An : An array where each element denotes the energy of the i-th atom.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 <= n <= 1e5</li>\r\n    <li>1 <= m <= 1e11</li>\r\n    <li>1 <= A_i <= 1e11</li>\r\n    <li>Sum of 'n' over all test cases does not exceed 1e6.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test-case log:</p>\r\n<ul>\r\n    <li>If there is no way to make the energies of all the atoms equal, then log -1.</li>\r\n    <li>If there is a way, then output a single integer, the minimum number of shots of Trinity that are needed to achieve it.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2 5\r\n4 4\r\n2 3\r\n4 5\r\n3 3\r\n1 3 5\r\nOutput:\r\n0\r\n1\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>In the first test-case, the energies of both the atoms are already equal, hence Robert need not use Trinity even once, hence the answer is 0.</p>\r\n<p>In the second test-case, Robert can use the trinity on the 2nd atom, thus its energy will increase to 8, it will then be split into 2 parts each of energy 4. Finally we get 3 atoms, each with energy 4, hence the desired result is obtained.</p>\r\n<p>In the third test-case, it can be shown that there exists no way, such that the resulting atoms end up with equal energies.</p>\r\n\r\n<h2>Notes</h2>\r\n<p><strong>Execution time limit:</strong> 4 seconds</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "phonepe_30july",
        "company_id": 351
    },
    {
        "id": 1074,
        "title": "Maximize Exercises in Workshops",
        "problem_statement": "<h1>Maximize Exercises in Workshops</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A teacher is organising a series of coding workshops using a collection of student-created exercises. She has prepared k exercises, where each exercise belongs to a particular category (represented by an integer). Some exercises may share the same category.</p>\r\n<p>The teacher wants to organise multiple workshops, each conducted on a separate day. For each workshop:</p>\r\n<ul>\r\n    <li>All exercises used on a given day must belong to the <strong>same category</strong>.</li>\r\n    <li>Each workshop must focus on a <strong>unique category</strong> (i.e., no two workshops can use the same category).</li>\r\n    <li>The number of exercises used each day must be <strong>exactly double</strong> the number used on the previous day. The first day's workshop can have any positive number of exercises.</li>\r\n    <li>She can <strong>choose not to use all the exercises</strong>. Some may remain unused if they don't fit the pattern.</li>\r\n</ul>\r\n<p>The teacher wants to plan the workshops in a way that <strong>maximizes the total number of exercises used</strong> over all days.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line provides an integer k (1 ≤ k ≤ 200,000), representing the <strong>total number of exercises available</strong>.</li>\r\n    <li>The second line lists k space-separated integers c₁, c₂, ..., cₖ where each cᵢ (1 ≤ cᵢ ≤ 1,000,000,000) indicates the category ID of the i-th exercise.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer — the maximum number of exercises the teacher can use while organising such workshops.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n18\r\n5 3 5 11 5 11 11 5 5 3 11 11 11 11 3 3 11 11\r\nOutput:\r\n14</code></pre>\r\n<p><strong>Explanation:</strong> In the first example the optimal sequence of workshops is: 2 exercises of category 3, 4 exercises of category 5, 8 exercises of category 11.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n10\r\n1 1 1 2 1 1000000000 2 2 1 1\r\nOutput:\r\n9</code></pre>\r\n<p><strong>Explanation:</strong> In the second example the optimal sequence of workshops is: 3 exercises of category 2, 6 exercises of category 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 ≤ k ≤ 200,000</li>\r\n    <li>1 ≤ cᵢ ≤ 1,000,000,000</li>\r\n    <li>Execution time limit: 4 seconds</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "phonepe_30july",
        "company_id": 351
    }
]