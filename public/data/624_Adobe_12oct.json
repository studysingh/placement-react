[
    {
        "id": 1772,
        "title": "Service Timeout",
        "problem_statement": "<h1>Service Timeout</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given heartbeat records. Each record has:</p>\r\n<ul>\r\n<li>timestamp (in seconds) when the heartbeat was recorded, and</li>\r\n<li>service ID it came from.</li>\r\n</ul>\r\n<p>For each service ID, order its heartbeats by timestamp. If the gap between any two consecutive heartbeats is greater than the threshold, that service timed out at least once.</p>\r\n<p>Return an array of strings with the service IDs that timed out at least once. The array must be sorted in lexicographical order.</p>\r\n<p><strong>Note:</strong> Heartbeats are not sorted by timestamp in the input.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: timestamp = [10, 20, 80, 10, 65]\r\nserviceId = [\"svc1\", \"svc1\", \"svc2\", \"svc2\", \"svc2\"]\r\nthreshold = 30\r\nOutput: [\"svc1\", \"svc2\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>For svc1: heartbeats at 20s and 80s are 60 seconds apart -> exceeds threshold = 30 -> timed out.</li>\r\n<li>For svc2: heartbeats at 10s and 65s are 55 seconds apart -> exceeds threshold = 30 -> timed out.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: timestamp = [1, 2, 3]\r\nserviceId = [\"svc1\", \"svc2\", \"svc1\"]\r\nthreshold = 1\r\nOutput: [\"svc1\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>For svc1: heartbeats at timestamps 1 and 3 are 2 seconds apart -> exceeds threshold = 1 -> timed out.</li>\r\n<li>For svc2: only one heartbeat -> no timeout.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= lengths of the arrays <= 2 * 10<sup>5</sup></code></li>\r\n<li><code>1 <= timestamp[i] <= 10<sup>9</sup></code></li>\r\n<li><code>1 <= length of serviceId[i] <= 10</code></li>\r\n<li><code>serviceId[i]</code> consists only of lowercase English letters ('a'-'z') and digits ('0'-'9')</li>\r\n<li><code>0 <= threshold <= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <map>\n\nclass Solution {\npublic:\n    std::vector<std::string> findTimedOutServices(\n        const std::vector<int>& timestamp,\n        const std::vector<std::string>& serviceId,\n        int threshold) {\n        // Core logic to be implemented here\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::vector<int> timestamp(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> timestamp[i];\n    }\n\n    std::vector<std::string> serviceId(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> serviceId[i];\n    }\n\n    int threshold;\n    std::cin >> threshold;\n\n    Solution sol;\n    std::vector<std::string> result = sol.findTimedOutServices(timestamp, serviceId, threshold);\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Adobe_12oct",
        "company_id": 624
    },
    {
        "id": 1785,
        "title": "Identical Distribution",
        "problem_statement": "<h1>Identical Distribution</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An e-commerce company needs to create packets of sports cards, with each packet containing an equal number of each card type.</p>\r\n<p>Given an array representing the current quantity of each card type, find the minimum number of cards that must be added so that all types can be evenly distributed among a number of packets greater than 1.</p>\r\n\r\n<p>Complete the function <code>cardPackets</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int cardTypes[n]</code>: the quantity available of card type</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of additional cards to add</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: cardTypes = [4, 7, 5, 11, 15]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>To create 2 packets: Add [0, 1, 1, 1, 1] cards = 4 additional cards.</li>\r\n    <li>Final quantities: [4, 8, 6, 12, 16].</li>\r\n    <li>To create 3 packets: Add [2, 2, 1, 1, 0] cards = 6 additional cards.</li>\r\n    <li>Final quantities: [6, 9, 6, 12, 15].</li>\r\n</ul>\r\n<p>The minimum number of cards to add is 4 to create 2 packets.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: cardTypes = [3, 8, 7, 6, 4]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For 2 packets add: [1, 0, 1, 0, 0] (2 cards) to get [4, 8, 8, 6, 4].</li>\r\n    <li>For 3 add [0, 1, 2, 0, 2] (5 cards) to get [3, 9, 9, 6, 6].</li>\r\n</ul>\r\n<p>Any number of packets &ge; 2 can be created, but making 2 packets requires the minimum number of additional cards.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; cardTypes[i] &le; 500</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param cardTypes A vector of integers representing the quantity of each card type.\n     * @return The minimum number of additional cards to add.\n     */\n    int cardPackets(std::vector<int>& cardTypes) {\n        // Core logic to find the minimum number of additional cards goes here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::vector<int> cardTypes(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> cardTypes[i];\n    }\n\n    Solution sol;\n    int result = sol.cardPackets(cardTypes);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Adobe_12oct",
        "company_id": 624
    }
]