[
    {
        "id": 617,
        "title": "Smallest String",
        "problem_statement": "<h1>Smallest String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string <code>s</code> of lowercase English letters, select exactly one non-empty substring and replace each character with the previous character in the English alphabet. For example, 'b' becomes 'a', 'c' becomes 'b', and 'a' becomes 'z'.</p>\r\n<p>Find the alphabetically smallest string that can be obtained after performing this operation exactly once.</p>\r\n<p>Complete the function <code>getSmallestString</code> in the editor with the following parameter:</p>\r\n<ul>\r\n    <li><code>s:</code> a string</li>\r\n</ul>\r\n<p><strong>Return:</strong></p>\r\n<ul>\r\n    <li><code>string:</code> the alphabetically smallest string possible</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"hackerrank\"\r\nOutput: gackerrank</code></pre>\r\n<p><strong>Explanation:</strong> Selecting and changing only the first character produces 'gackerrank', which is the alphabetically smallest string possible.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"bbcad\"\r\nOutput: aacbd</code></pre>\r\n<p><strong>Explanation:</strong> Change 'bb' to 'aa'.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: s = \"ab\"\r\nOutput: aa</code></pre>\r\n<p><strong>Explanation:</strong> Change 'b' to 'a'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= length of s <= 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_15 july",
        "company_id": 203
    },
    {
        "id": 618,
        "title": "Transaction Simplification",
        "problem_statement": "```html\r\n<h1>Transaction Simplification</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a prototype service to simplify a group of debt transactions.</p>\r\n<p>There are <code>n</code> people, and a list of <code>m</code> debts amongst them where <code>debt[i] = [fromID, toID, amount]</code> represents that person <code>fromID</code> owes the person <code>toID</code> an amount of <code>amount</code>.</p>\r\n<p>Given the array <code>debts</code>, find the minimum number of transactions required to clear all the debts.</p>\r\n<p><strong>Example:</strong></p>\r\n<p>Suppose <code>n=3</code>, <code>m=4</code>, <code>debts = [[0, 1, 10], [1, 0, 20], [2, 0, 5], [0, 2, 10]]</code></p>\r\n<pre><code class='language-text'>from | to | amount\r\n-----|----|-------\r\n0    | 1  | 10\r\n1    | 0  | 20\r\n2    | 0  | 5\r\n0    | 2  | 10</code></pre>\r\n<p>Suppose 0 gives 1 a total amount of 5 units.</p>\r\n<pre><code class='language-text'>from | to | amount\r\n-----|----|-------\r\n0    | 1  | 5\r\n1    | 0  | 10\r\n2    | 0  | 5\r\n0    | 2  | 10</code></pre>\r\n<p>It also owed 0-5 units, so reduce the debt from 1 to 0 by that 5 units. Now 0 and 1's debts are simplified.</p>\r\n<pre><code class='language-text'>from | to | amount\r\n-----|----|-------\r\n0    | 1  | 10\r\n1    | 0  | 10\r\n2    | 0  | 10</code></pre>\r\n<p>The three transactions can now cancel each other out. Only one transaction is required to clear all the debts, i.e., from 0 to 1. Hence, the answer is 1.</p>\r\n\r\n<p><strong>Function Description:</strong><br>Complete the function <code>getMinTransactions</code> in the editor below.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>n</code>: <code>int</code>, the number of people</li>\r\n    <li><code>debt</code>: <code>vector&lt;vector&lt;int&gt;&gt;</code>, the debts</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>, the minimum number of transactions required.</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int getMinTransactions(int n, vector&lt;vector&lt;int&gt;&gt; debt)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\ndebt = [[0, 1, 10], [1, 0, 20], [2, 0, 5]]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> No explanation provided in the problem statement for this specific example.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\ndebt = [[1, 2, 15], [3, 2, 14], [0, 3, 10]]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> In aggregate, person 0 owes a total amount of 10, person 1 gets back 15, person 2 gets back 29, and person 3 owes a total amount of 24. If person 0 gives to person 1 and 3, and person 3 gives 24 to person 2, they are all even.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= n &lt;= 9</code></li>\r\n    <li><code>2 &lt;= m &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= debt[i][0], debt[i][1] &lt; n</code></li>\r\n    <li><code>1 &lt;= debt[i][2] &lt;= 10^9</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_15 july",
        "company_id": 203
    }
]