[
    {
        "id": 850,
        "title": "Choose Fleets",
        "problem_statement": "<h1>Choose Fleets</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an integer denoting a total number of wheels, find the number of different ways to choose a fleet of vehicles from an infinite supply of two-wheeled and four-wheeled vehicles such that the group of chosen vehicles has that exact total number of wheels. Two ways of choosing vehicles are considered to be different if and only if they contain different numbers of two-wheeled or four-wheeled vehicles.</p>\r\n<p>For example, if our array <code>wheels = [4,5,6]</code> our return array would be <code>res = [2,0,1]</code>. Case by case, we can have 1 four-wheeler or 2 two-wheel to have 4 wheels, we cannot have 5 wheels, we can have 1 four-wheeler and 1 two-wheel or 3 two-wheeled vehicles in the final case.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>chooseFleets</code> in the editor below. The function should return an array of integers representing the answer for each <code>wheels[i]</code>.</p>\r\n<p><code>chooseFleets</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>wheels(wheels[0]...wheels[n-1]): an array of integers</code></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= wheels[i] <= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n6\r\n2\r\nOutput:\r\n2\r\n0\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>We must find the number of ways of choosing fleets of vehicles whose total numbers of wheels correspond to the values in <code>wheels = [3, 6, 2]</code>.</p>\r\n<ul>\r\n    <li>For <code>wheels_i = 6</code> we can choose a fleet with 6 total wheels in two ways:\r\n        <ol>\r\n            <li>Choose 1 four-wheeled vehicle and 1 two-wheeled vehicle.</li>\r\n            <li>Choose 3 two-wheeled vehicles.</li>\r\n        </ol>\r\n        Thus, we store 2 in index 0 of our return array.\r\n    </li>\r\n    <li>There is no way to choose a fleet of vehicles with exactly <code>wheels_i = 3</code> total wheels because each vehicle has either two or four wheels, so we store 0 in index 1 of our return array.</li>\r\n    <li>For <code>wheels_i = 2</code> we can only choose 1 two-wheeled vehicle to get a fleet with 2 total wheels. Thus, we store 1 in index 2 of our return array.</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>vector<int> chooseFleets(vector<int> wheels) {\r\n    // Function body to be completed\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DocuSign_5april",
        "company_id": 260
    },
    {
        "id": 851,
        "title": "Minimum Road Repair Cost",
        "problem_statement": "<h1>Minimum Road Repair Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The state of Hackerland is represented as a graph of <code>g_nodes</code> with each city numbered from 1 to <code>g_nodes</code>. There are <code>g_edges</code> bidirectional roads between the cities <code>g_from[i]</code> and <code>g_to[i]</code> with a repair cost of <code>g_weight[i]</code>. Initially, all roads are damaged. One can spend some amount of money, say <code>X</code>, and repair all the roads whose repair cost is less than or equal to <code>X</code>.</p>\r\n<p>The task is to reach the city numbered <code>g_nodes</code> starting from city 1 by traveling no more than <code>k</code> roads while spending as little money as possible. Find the minimum money required to complete the task or return -1 if it is impossible.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinRepairCost</code> in the editor below.</p>\r\n<p><code>getMinRepairCost</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int g_nodes</code>: the number of cities</li>\r\n    <li><code>int g_from[g_edges]</code>: cities at one end of each bidirectional road</li>\r\n    <li><code>int g_to[g_edges]</code>: cities at the other end of each bidirectional road</li>\r\n    <li><code>int g_weight[g_edges]</code>: the costs to repair the roads</li>\r\n    <li><code>int k</code>: the maximum number of roads to travel</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the minimum cost to repair roads such that one can reach the city <code>g_nodes</code> from city 1 by traveling at most <code>k</code> roads.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ng_nodes = 5\r\ng_edges = 6\r\ng_from = [1, 4, 3, 1, 2, 2]\r\ng_to = [2, 3, 4, 5, 2, 5]\r\ng_weight = [2, 4, 6, 9, 7, 8]\r\nk = 2\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> The network of cities is depicted in the figure below. Here we can reach from city 1 to city <code>g_nodes</code> = 5 by traveling &le; 2 (4) roads, 1 -> 2, 2 -> 5. It is optimal to spend an amount of 8 to repair all roads with repair cost less than or equal to 8. The answer is 8.</p>\r\n<p><em>(Image of graph for Example 1 would be here if images were renderable in HTML)</em></p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ng_nodes = 5, g_edges = 4\r\ng_from = [2, 3, 1, 2]\r\ng_to = [3, 1, 4, 2]\r\ng_weight = [6, 4, 5, 2]\r\nk = 3\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to spend 5 to repair all roads with repair cost less than or equal to 5.</p>\r\n<p><em>(Image of graph for Example 2 would be here if images were renderable in HTML)</em></p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; g_nodes &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; g_edges &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; g_from[i], g_to[i] &le; n</code> (where <code>n</code> is <code>g_nodes</code>)</li>\r\n    <li><code>1 &le; g_weight[i] &le; 10<sup>9</sup></code></li>\r\n    <li>The graph does not contain multiple edges or self-loops.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DocuSign_5april",
        "company_id": 260
    }
]