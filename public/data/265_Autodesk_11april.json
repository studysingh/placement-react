[
    {
        "id": 861,
        "title": "Distinct Consecutive Triplets",
        "problem_statement": "<h1>Distinct Consecutive Triplets</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string `s` consisting of lowercase English letters, find the number of consecutive triplets within `s` formed by unique characters. In other words, count the number of indices `i`, such that `s[i]`, `s[i + 1]`, and `s[i + 2]` are all pairwise distinct.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than `O(s.length^2)` will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abcdaaae\"\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For `i = 0`, `s[0] = 'a'`, `s[1] = 'b'`, and `s[2] = 'c'` which are pairwise distinct.</li>\r\n    <li>For `i = 1`, `s[1] = 'b'`, `s[2] = 'c'`, and `s[3] = 'd'` which are pairwise distinct.</li>\r\n    <li>For `i = 2`, `s[2] = 'c'`, `s[3] = 'd'`, and `s[4] = 'a'` which are pairwise distinct.</li>\r\n    <li>For `i = 3`, `s[3] = 'd'`, `s[4] = 'a'`, and `s[5] = 'a'` which are not pairwise distinct because `s[4]` and `s[5]` are equal.</li>\r\n    <li>For `i = 4`, `s[4] = 'a'`, `s[5] = 'a'`, and `s[6] = 'a'` which are not pairwise distinct because any two of these characters are equal.</li>\r\n    <li>For `i = 5`, `s[5] = 'a'`, `s[6] = 'a'`, and `s[7] = 'e'` which are not pairwise distinct because `s[5]` and `s[6]` are equal.</li>\r\n    <li>For `i = 6` or `i = 7`, at least one of the characters `s[i + 1]` or `s[i + 2]` doesn't exist (out of bounds).</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"abacaba\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are only 2 indices meeting the criteria.</p>\r\n<ul>\r\n    <li>`i = 1`: `s[1] = 'b'`, `s[2] = 'a'`, and `s[3] = 'c'`</li>\r\n    <li>`i = 3`: `s[3] = 'c'`, `s[4] = 'a'`, and `s[5] = 'b'`</li>\r\n</ul>\r\n<p>All other triplets will contain more than one 'a' character.</p>\r\n\r\n<h2>Input/Output</h2>\r\n<ul>\r\n    <li><strong>Execution Time Limit:</strong> 4 seconds (py3)</li>\r\n    <li><strong>Memory Limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong>\r\n        <ul>\r\n            <li>`string s`</li>\r\n            <li>A string consisting of lowercase English letters.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong>\r\n        <ul>\r\n            <li>`integer`</li>\r\n            <li>The number of indices `i` in `s`, such that characters `s[i]`, `s[i + 1]`, and `s[i + 2]` are all pairwise distinct.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= s.length <= 1000`</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_11april",
        "company_id": 265
    },
    {
        "id": 862,
        "title": "Bubble Popping Game",
        "problem_statement": "<h1>Bubble Popping Game</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Let's define the diagonal neighbors of a given cell as the surrounding cells, with precisely one corner touching a corner of the given cell. For example, for a cell at <code>(r, c)</code>, its diagonal neighbors would be <code>(r-1, c-1)</code>, <code>(r-1, c+1)</code>, <code>(r+1, c-1)</code>, and <code>(r+1, c+1)</code>, provided they are within the board boundaries.</p>\r\n<p>Given a board of cells containing a bubble of a specific color, your task is to emulate a bubble-popping game. In this game, the player can click a cell every turn to pop bubbles. After clicking the cell, the following happens:</p>\r\n<ul>\r\n    <li>The bubble in the clicked cell and bubbles of the same color among its diagonal neighbors are \"popped\" and removed, resulting in empty cells.</li>\r\n    <li>After bubbles are removed, the remaining bubbles in cells above the empty cells drop down to fill all empty cells.</li>\r\n    <li>Nothing happens if the clicked cell is empty (it does not contain a bubble).</li>\r\n</ul>\r\n<p>The input consists of two arrays:</p>\r\n<ul>\r\n    <li>An initial board of cells <code>bubbles</code> - a multidimensional array of integers representing cells containing different colored bubbles.</li>\r\n    <li>A set of player turns <code>operations</code> - 2-element integer arrays describing the coordinates (the row and column) of the cell that the player clicked on during each turn.</li>\r\n</ul>\r\n<p>Return the state of the game board after all operations are processed. The output should be a multidimensional array of integers with the same size as <code>bubbles</code>, but replace the integers in all empty cells (without bubbles) with 0.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(bubbles.length<sup>2</sup> * operations.length) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: bubbles = [[1, 1, 1, 4],\r\n                  [4, 1, 2, 3],\r\n                  [1, 3, 1, 7],\r\n                  [4, 3, 2, 4]],\r\n       operations = [[1, 1],\r\n                     [3, 1],\r\n                     [2, 2],\r\n                     [3, 0]]\r\nOutput: [[0, 0, 0, ...],\r\n         [0, 1, 0, ...],\r\n         [0, 5, 0, ...],\r\n         [4, 3, 2, ...]]</code></pre>\r\n<p><strong>Explanation:</strong> The output shown is a partial view of the final state of the board after all operations are processed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 4 seconds (py3)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.array.integer bubbles</code>\r\n        <ul>\r\n            <li>A multidimensional array of integers representing the initial game board of cells containing bubbles. Integers represent the colors of bubbles within cells, and it is guaranteed that all cells will have bubbles initially.</li>\r\n            <li><code>1 &le; bubbles.length &le; 30</code></li>\r\n            <li><code>1 &le; bubbles[0].length &le; 30</code></li>\r\n            <li><code>1 &le; bubbles[i][j] &le; 900</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> <code>array.array.integer operations</code>\r\n        <ul>\r\n            <li>An array of 2-element arrays representing the player's moves - integers represent the coordinates of the row and column that the player has clicked on each turn.</li>\r\n            <li><code>1 &le; operations.length &lt; 200</code></li>\r\n            <li><code>operations[i].length = 2</code></li>\r\n            <li><code>0 &le; operations[i][0] &lt; bubbles.length</code></li>\r\n            <li><code>0 &le; operations[i][1] &lt; bubbles[0].length</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>array.array.integer</code>\r\n        <ul>\r\n            <li>Return the final state of the game board after all operations are processed. The output should be a multidimensional array of integers with the same size as <code>bubbles</code>, with 0 representing empty cells, without bubbles.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_11april",
        "company_id": 265
    },
    {
        "id": 863,
        "title": "Unique Bytes Received",
        "problem_statement": "<h1>Unique Bytes Received</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A team of astronauts on a spaceship is receiving important data from Earth for their research. The data is being transmitted in segments that contain specific parts of the file, and each segment defines a byte range in the form of a two-dimensional array `segments[i]`. For each segment `segments[i]`, the range is given in an array of two 64-bit integers. `segments[i][0]` is the index of the first byte in the i-th segment, and `segments[i][1]` is the index of the last byte in the i-th segment (both indices are inclusive, 1-based).</p>\r\n<p>Your task is to calculate the total number of unique bytes received for the entire file after each segment is received. Keep in mind that segments can overlap with or completely replicate previous ones.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: segments = [[1, 1], [2, 2], [3, 3]]\r\nOutput: [1, 2, 3]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>The first segment only contains the byte 1 so the total number of unique bytes received becomes 1.</li>\r\n<li>The second segment only contains the byte 2, so the total number of unique bytes received becomes 2 after this segment.</li>\r\n<li>The third segment only contains the byte 3, making the total 3 after this segment.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: segments = [[1, 9], [1, 3], [8, 15]]\r\nOutput: [9, 9, 15]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>The first segment contains bytes 1 to 9, so the total is 9.</li>\r\n<li>The second segment doesn't add new data, keeping the total at 9.</li>\r\n<li>The third segment adds bytes up to 15, increasing the total to 15.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: segments = [[7, 9], [1, 3], [8, 15], [6, 9], [2, 4]]\r\nOutput: [3, 6, 12, 13, 14]</code></pre>\r\n\r\n<h2>Input/Output</h2>\r\n<p><strong>Execution time limit:</strong> 4 seconds (py3)</p>\r\n<p><strong>Memory limit:</strong> 1 GB</p>\r\n<p><strong>Input:</strong> `array.array.integer64 segments`</p>\r\n<p>An array of arrays, each representing the indices of the first and last bytes contained in each data segment.</p>\r\n<p><strong>Output:</strong> `array.integer64`</p>\r\n<p>An array of integers representing the cumulative total number of unique bytes received after each data segment.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>`1 <= segments.length <= 1000`</li>\r\n<li>`segments[i].length = 2`</li>\r\n<li>`1 <= segments[i][0] <= segments[i][1] <= 10^12`</li>\r\n</ul>\r\n\r\n<h2>Python 3 Syntax Tips</h2>\r\n<pre><code class='language-python'># Prints help message to the console\r\n# Returns a string\r\ndef helloworld(name):\r\n    print(\"This prints to the console when\")\r\n    return \"Hello, \" + name</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_11april",
        "company_id": 265
    }
]