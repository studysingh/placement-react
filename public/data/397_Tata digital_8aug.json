[
    {
        "id": 1177,
        "title": "Subsegment Sort",
        "problem_statement": "```html\r\n<h1>Subsegment Sort</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have an array of n integers, <code>arr[n]</code>. Partition it into contiguous subsegments such that:</p>\r\n<ol>\r\n    <li>Every element belongs to exactly one partition.</li>\r\n    <li>After sorting each partition in non-decreasing order and concatenating all sorted partitions, resulting array matches the original array sorted in non-decreasing order.</li>\r\n</ol>\r\n<p>Your task is to find the maximum number of contiguous subsegments into which the array can be partitioned while maintaining this property.</p>\r\n<p>Complete the function <code>findMaxSubsegmentsCount</code> in the editor with the following parameter(s):</p>\r\n<pre><code class='language-javascript'>int findMaxSubsegmentsCount(vector&lt;int&gt; arr)</code></pre>\r\n<p>The function is expected to return an <strong>INTEGER</strong>.</p>\r\n<p>The function accepts <strong>INTEGER_ARRAY</strong> <code>arr</code> as parameter.</p>\r\n<p><strong>Returns:</strong> int: the maximum number of contiguous subsegments in a valid set of partitions</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 6, arr = [2, 5, 1, 9, 7, 6]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The original array sorted in non-decreasing order is <code>[1, 2, 5, 6, 7, 9]</code>.</p>\r\n<p>Try with 2 subsegments:</p>\r\n<ul>\r\n    <li>Subsegments: <code>[2, 5, 1], [9, 7, 6]</code></li>\r\n    <li>Sorted subsegments: <code>[1, 2, 5], [6, 7, 9]</code></li>\r\n    <li>Concatenated final array: <code>[1, 2, 5, 6, 7, 9]</code></li>\r\n</ul>\r\n<p>Since the concatenated final array <code>[1, 2, 5, 6, 7, 9]</code> matches the original array sorted, 2 is a valid answer.</p>\r\n<p>Try with 3 subsegments:</p>\r\n<ul>\r\n    <li>Subsegments: <code>[2, 5], [1], [9, 7, 6]</code></li>\r\n    <li>Sorted subsegments: <code>[2, 5], [1], [6, 7, 9]</code></li>\r\n    <li>Concatenated final array: <code>[2, 5, 1, 6, 7, 9]</code></li>\r\n</ul>\r\n<p>Since the concatenated final array <code>[2, 5, 1, 6, 7, 9]</code> does not match the original array sorted, 3 is not valid.</p>\r\n<p>Any higher number of subsegments will also fail. Therefore, the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [2, 10, 5, 9]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Subsegments after partition -> <code>[2], [10, 5, 9]</code></li>\r\n    <li>Sorted subsegments -> <code>[2], [5, 9, 10]</code></li>\r\n    <li>Final array -> <code>[2, 5, 9, 10]</code> (Sorted)</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 10, arr = [2, 1, 3, 2, 4, 4, 5, 8, 7, 7]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Subsegments after partition -> <code>[2, 1], [3], [2], [4], [4], [5, 8, 7, 7]</code></li>\r\n    <li>Sorted subsegments -> <code>[1, 2], [3], [2], [4], [4], [5, 7, 7, 8]</code></li>\r\n    <li>Final array -> <code>[1, 2, 3, 2, 4, 4, 5, 7, 7, 8]</code> (Sorted)</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tata digital_8aug",
        "company_id": 397
    },
    {
        "id": 1178,
        "title": "Airport Limousine",
        "problem_statement": "<h1>Airport Limousine</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A limousine service for an airport can transport multiple passengers simultaneously. On the return trip, the driver may pick up more passengers for the next journey to the airport. A map of passenger locations is represented as a square matrix.</p>\r\n<p>The matrix contains cells with initial values as follows:</p>\r\n<ul>\r\n    <li>A value ≥ 0 signifies a path.</li>\r\n    <li>A value of 1 indicates a passenger.</li>\r\n    <li>A value of -1 signifies an obstruction.</li>\r\n</ul>\r\n<p>Movement rules are:</p>\r\n<ul>\r\n    <li>The driver starts at (0, 0) and the airport is at (n-1, n-1). Movement towards the airport is either right (→) or down (↓) through valid path cells.</li>\r\n    <li>After reaching (n-1, n-1), the driver returns to (0, 0) by moving left (←) or up (↑) through valid path cells.</li>\r\n    <li>Upon passing through a path cell containing a passenger, the passenger is picked up. The cell then becomes an empty path cell (0).</li>\r\n    <li>If there is no valid route between (0, 0) and (n-1, n-1), no passengers can be collected.</li>\r\n</ul>\r\n<p>Implement a function that returns the maximum number of passengers that can be collected.</p>\r\n<p>For example, consider the following grid:</p>\r\n<pre><code class='language-text'>0 1\r\n-1 0</code></pre>\r\n<p>Start at the top left corner. Move right one, collecting a rider. Move down one to the airport. Cell (1, 0) is blocked, so the return path is the reverse of the path to the airport. All paths have been explored, and 1 rider was collected.</p>\r\n<p>Complete the function `collectMax` in the editor with the following parameter(s):</p>\r\n<pre><code class='language-javascript'>int collectMax(vector<vector<int>> mat)</code></pre>\r\n<p><strong>Returns:</strong></p>\r\n<p>int: the maximum number of riders that can be collected</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n0 1 -1\r\n1 0 1\r\n1 1 1\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The driver can collect a maximum of 5 riders by taking the following path: (0, 0) → (0,1) → (1,1) → (2,1) → (2,2) → (2,1) → (2,0) → (1,0) → (0,0)</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n0 1 1\r\n1 0 1\r\n1 1 1\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The driver can collect all 7 riders by following the path:</p>\r\n<pre><code class='language-text'>0→1→1\r\n↓\r\n1→0→1\r\n↑\r\n1→1←1</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n0 1 1\r\n1 0 -1\r\n1 0 -1\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The cell at (2, 2) is blocked, so no riders can be collected.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 ≤ n ≤ 100</code></li>\r\n    <li><code>-1 ≤ mat[i][j] ≤ 1</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tata digital_8aug",
        "company_id": 397
    }
]