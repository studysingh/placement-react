[
    {
        "id": 1319,
        "title": "Autocomplete Feature",
        "problem_statement": "<h1>Autocomplete Feature</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a console for an old motor controller that accepts binary string commands, implement its autocomplete feature. The autocomplete works as follows:</p>\r\n<ul>\r\n    <li>When",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_13aug",
        "company_id": 458
    },
    {
        "id": 1320,
        "title": "Biohazard Coexistence Intervals",
        "problem_statement": "<h1>Biohazard Coexistence Intervals</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A biological researcher is studying bacteria interactions where certain bacteria are poisonous to others. The samples are arranged consecutively in a row numbered from 1 to <code>n</code>. Given lists detailing which bacteria are poisonous to others, your task is to determine the number of intervals within the row that contain only samples capable of coexisting.</p>\r\n\r\n<p>You are given three parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: The number of unique bacteria types, also representing the total number of samples arranged in a row from 1 to <code>n</code>.</li>\r\n    <li><code>int allergic[m]</code>: An array where <code>allergic[i]</code> represents a bacterium that is allergic to <code>poisonous[i]</code>.</li>\r\n    <li><code>int poisonous[m]</code>: An array where <code>poisonous[i]</code> represents a bacterium that is toxic to <code>allergic[i]</code>.</li>\r\n</ul>\r\n\r\n<p>A pair of bacteria (A, B) cannot coexist if A is poisonous to B, or B is poisonous to A. An interval <code>[start, end]</code> (inclusive) is considered \"valid\" if no two bacteria within that interval are poisonous to each other. Your goal is to count the total number of such valid intervals.</p>\r\n\r\n<p>For example, consider <code>n = 3</code> samples, with <code>allergic = [2, 1, 3]</code> and <code>poisonous = [3, 3, 1]</code>. This translates to the following relationships:</p>\r\n<ul>\r\n    <li>Bacteria 3 is poisonous to Bacteria 2 (from <code>poisonous[0] -> allergic[0]</code>)</li>\r\n    <li>Bacteria 3 is poisonous to Bacteria 1 (from <code>poisonous[1] -> allergic[1]</code>)</li>\r\n    <li>Bacteria 1 is poisonous to Bacteria 3 (from <code>poisonous[2] -> allergic[2]</code>)</li>\r\n</ul>\r\n<p>The bacteria are arranged as 1, 2, 3. All possible intervals are: (1), (2), (3), (1, 2), (2, 3), (1, 2, 3).</p>\r\n<p>Based on the poisonous relationships:</p>\r\n<ul>\r\n    <li>Intervals containing both 1 and 3 are invalid because 1 is poisonous to 3 and 3 is poisonous to 1.</li>\r\n    <li>Intervals containing both 2 and 3 are invalid because 3 is poisonous to 2.</li>\r\n</ul>\r\n<p>Therefore, the valid intervals are: (1), (2), (3), (1, 2). There are 4 valid intervals.</p>\r\n\r\n<p>Complete the function <code>bioHazard</code> which takes <code>n</code>, <code>allergic</code>, and <code>poisonous</code> as input and returns a <code>long int</code> representing the number of intervals made up only of bacteria that can coexist.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= m <= 10^5</code></li>\r\n    <li><code>1 <= allergic[i], poisonous[i] <= n</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4\r\nallergic = [1, 2]\r\npoisonous = [3, 4]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> Bacterium 3 cannot coexist with bacterium 1, and 4 cannot coexist with bacterium 2. There are 4 samples lined up as 1 2 3 4. All possible intervals are (1), (2), (3), (4), (1, 2), (2, 3), (3, 4), (1, 2, 3), (2, 3, 4), and (1, 2, 3, 4). The valid intervals are (1), (2), (3), (4), (1,2), (2,3), (3,4).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5\r\nallergic = [1, 2]\r\npoisonous = [3, 5]\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong> Bacterium 3 is poisonous to bacterium 1, and 5 is poisonous to 2. The intervals that can coexist are (1), (1,2), (2,3), (2,3,4), (3), (3,4), (3,4,5), (4), (4,5), (5).</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_13aug",
        "company_id": 458
    }
]