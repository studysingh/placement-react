[
    {
        "id": 1272,
        "title": "Decrypt Code Lock",
        "problem_statement": "```html\r\n<h1>Decrypt Code Lock</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of integers <code>codeSequence</code> of length <code>n</code> and an integer <code>maxValue</code>. A locking system allows you to modify any number in the array to any integer less than or equal to <code>maxValue</code> at a cost of 1 per change.</p>\r\n<p>Two numbers are co-prime if their greatest common divisor (GCD) is 1. To unlock the repository, you need to select a number from the array that is co-prime with all other numbers in the array.</p>\r\n<p>The lock's code is calculated as the maximum possible value of: selected number - total modification cost.</p>\r\n<p>Your task is to determine the lock code by selecting an optimal number from the array after modifications that is co-prime with all other numbers in the array.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>n = 3\r\ncodeSequence = [3, 2, 4]\r\nmaxValue = 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Change the element at the third position to 5 at the cost of 1 unit: <code>codeSequence' = [3, 2, 5]</code>.</li>\r\n    <li>Choose the element 5 since it is co-prime with both 2 and 3.</li>\r\n    <li>Calculate lock code = selected number - cost = 5 - 1 = 4.</li>\r\n</ul>\r\n<p>Return 4 as the answer.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>decryptCodeLock</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int codeSequence[n]</code>: the array presented by the code lock</li>\r\n    <li><code>int maxValue</code>: the maximum possible value for any element in the array</li>\r\n</ul>\r\n\r\n<h2>Sample Cases</h2>\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\ncodeSequence = [1, 2, 3]\r\nmaxValue = 6\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Optimally, change the second and third elements to 5 and 6 at a cost of 2 units, resulting in <code>[1, 5, 6]</code>. The number 6 is coprime with both 1 and 5. The lock's code is 6 - 2 (cost) = 4.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\ncodeSequence = [2, 4, 6, 8]\r\nmaxValue = 8\r\nOutput: 6</code></pre>\r\n\r\n<h1>The Knapsack Problem</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The Knapsack problem is a well-known problem in the field of computer programming and problem-solving. To make it more interesting, an interviewer uses a modified version of the problem.</p>\r\n<p>Given <code>n</code> items, where the weight of the <code>i</code>-th item is <code>2<sup>i</sup></code>, and the cost of the <code>i</code>-th item is <code>cost[i]</code>, find the minimum amount needed to purchase the items such that the combined weight of the purchased items is at least <code>minWeight</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>n = 5\r\ncost = [2, 5, 7, 11, 25]\r\nminWeight = 26</code></pre>\r\n<p><strong>Explanation:</strong> One of the optimal ways to purchase the items is as follows:</p>\r\n<ul>\r\n    <li>Buy 2 units of the 0<sup>th</sup> item and 3 units of the 3<sup>rd</sup> item.</li>\r\n    <li><strong>Total cost:</strong> <code>2 * 2 + 3 * 11 = 37</code>.</li>\r\n    <li><strong>Total weight:</strong> <code>(2 * 2<sup>0</sup>) + (3 * 2<sup>3</sup>) = (2 * 1) + (3 * 8) = 2 + 24 = 26</code>, which is at least <code>minWeight</code>.</li>\r\n</ul>\r\n<p>Return the total cost of the items, 37.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinimumCost</code> in the editor below.</p>\r\n<p><code>getMinimumCost</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int cost[n]</code>: the cost of each item</li>\r\n    <li><code>int minWeight</code>: the minimum combined weight of the items</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long_int</code>: the minimum amount needed to purchase the items</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 30</code></li>\r\n    <li><code>1 <= cost[i] <= 10<sup>9</sup></code></li>\r\n    <li><code>1 <= minWeight <= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Sample Cases</h2>\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\ncost = [4, 3, 2, 1, 10]\r\nminWeight = 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to buy 1 unit of item 3 (0-based) which has a weight of <code>2<sup>3</sup> = 8</code> units (greater than <code>minWeight = 2</code>) and has a cost of 1.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\ncost = [10, 9, 8, 10]\r\nminWeight = 14\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to buy 2 units of item 3 (0-based) which has a weight of 8 units. Total combined weight = <code>2 * 8 = 16</code>, which is greater than <code>minWeight</code>. Total cost = <code>2 * 10 = 20</code>.</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "paypal_26aug",
        "company_id": 432
    }
]