[
    {
        "id": 580,
        "title": "Challenge 4b",
        "problem_statement": "<h1>Challenge 4b</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Natasha is planning an expedition to Mars for n people. One of the important tasks is to provide food for each participant.</p>\r\n<p>The warehouse has m daily food packages. Each package has some food type a<sub>i</sub>.</p>\r\n<p>Each participant must eat exactly one food package each day. Due to extreme loads, each participant must eat the same food type throughout the expedition, different participants may eat different (or the same) types of food.</p>\r\n<p>Formally, for each participant j Natasha should select his food type b<sub>j</sub> and each day j-th participant will eat one food package of type b<sub>j</sub>. The values b<sub>j</sub> for different participants may be different.</p>\r\n<p>What is the maximum possible number of days the expedition can last, following the requirements above?</p>\r\n\r\n<h2>Input</h2>\r\n<p><strong>Input:</strong> An integer array</p>\r\n<p>The first element of the array has n - the number of the expedition participants.</p>\r\n<p>The second element of the array has m - the number of the daily food packages available.</p>\r\n<p>The rest of the array has m elements a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>m</sub>, where a<sub>j</sub> is the type of the j-th food package.</p>\r\n\r\n<h2>Output</h2>\r\n<p><strong>Output:</strong> Print the single integer - the number of days the expedition can last. If it is not possible to plan the expedition for even one day, print 0.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: (4, 10, 1, 5, 2, 1, 1, 1, 3, 7, 2)\r\nOutput: 2</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Auxia_22july",
        "company_id": 196
    },
    {
        "id": 581,
        "title": "Minimal Area Rectangle",
        "problem_statement": "<h1>Minimal Area Rectangle</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Pavel made a photo of his favourite stars in the sky. His camera takes a photo of all points of the sky that belong to some rectangle with sides parallel to the coordinate axes.</p>\r\n<p>Pavel's camera makes a photo of all points with coordinates (x, y) such that x1 &lt; x2 and y1 &lt; y2, where (x1, y1) and (x2, y2) are coordinates of the bottom left and the top right corners of the rectangle being photographed. The area of the rectangle is (x2 - x1) * (y2 - y1).</p>\r\n<p>Also, taking the photo, Pavel wrote down coordinates of n of his favourite stars which appeared in the photo. These points are not necessarily distinct. The coordinates of stars are integers.</p>\r\n<p>Pavel has lost his camera recently and wants to buy a similar one. Specifically, he wants to know the dimensions of the photo he took earlier.</p>\r\n<p>Unfortunately, the photo is also lost, his notes are also of not much help: numbers are written in random order all over his notepad, so it's impossible to tell which numbers specify coordinates of which points.</p>\r\n<p>Pavel asked you to help him to determine what are the possible dimensions of the photo according to his notes. As there are multiple possible answers, find the dimensions with the minimal possible area of the rectangle.</p>\r\n<p>For example, if the stars in Pavel's records are (1,3), (1,3), (2,3), (2,4), the minimal area of the rectangle which contains all these points is 1 (rectangle with corners at (1,3) and (2,4)).</p>\r\n\r\n<h2>Input</h2>\r\n<p><strong>Input:</strong> An array of integers - coordinates written by Pavel in some order.</p>\r\n\r\n<h2>Output</h2>\r\n<p><strong>Output:</strong> Print the only integer, the minimal area of the rectangle which could have contained all points from Pavel's records.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: nums = [4, 1, 1, 2, 3, 2, 2, 4]\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> The input array represents the following points: (4,1), (1,2), (3,2), (2,4).\r\nTo find the minimal bounding rectangle, we determine the minimum and maximum x and y coordinates among all points:\r\nMinimum x-coordinate: min(4, 1, 3, 2) = 1\r\nMaximum x-coordinate: max(4, 1, 3, 2) = 4\r\nMinimum y-coordinate: min(1, 2, 2, 4) = 1\r\nMaximum y-coordinate: max(1, 2, 2, 4) = 4\r\nThe width of the rectangle is (Maximum x - Minimum x) = (4 - 1) = 3.\r\nThe height of the rectangle is (Maximum y - Minimum y) = (4 - 1) = 3.\r\nThe minimal area is width * height = 3 * 3 = 9.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The input array `arr` will contain `2 * n` integers, representing `n` star coordinates, where `arr[2i]` is the x-coordinate and `arr[2i+1]` is the y-coordinate for the i-th point.</li>\r\n    <li>The coordinates of stars are integers.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Auxia_22july",
        "company_id": 196
    },
    {
        "id": 582,
        "title": "Challenge 14c",
        "problem_statement": "```html\r\n<h1>Challenge 14c</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Anna is a girl so brave that she is loved by everyone in the city and citizens love her cookies. She is planning to hold a party with cookies. Now she has a vanilla cookies and b chocolate cookies for the party.</p>\r\n<p>She invited n guests of the first type and m guests of the second type to the party. They will come to the party in some order. After coming to the party, each guest will choose the type of cookie (vanilla or chocolate) to eat. There is a difference in the way how they choose that type:</p>\r\n<ul>\r\n    <li>If there are v vanilla cookies and c chocolate cookies at the moment, when the guest comes, then\r\n        <ul>\r\n            <li>If the guest of the first type: If v>c the guest selects a vanilla cookie. Otherwise, the guest selects a chocolate cookie.</li>\r\n            <li>If the guest of the second type: If v<c the guest selects a chocolate cookie. Otherwise, the guest selects a vanilla cookie.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>After that:</p>\r\n<ul>\r\n    <li>If there is at least one cookie of the selected type, the guest eats one.</li>\r\n    <li>Otherwise (there are no cookies of the selected type), the guest gets angry and returns to home.</li>\r\n</ul>\r\n\r\n<h2>Output</h2>\r\n<p>Array of strings.</p>\r\n<p>For every test case, a string of 'Yes' (if there exists atleast one valid order) or 'No'.</p>\r\n\r\n<h2>Note</h2>\r\n<p>For the first test case:</p>\r\n<p>Let's consider the order (2,2,1) of types of guests. Then:</p>\r\n<ul>\r\n    <li>The first guest eats a vanilla cookie. After that, there is 1 vanilla cookie and 2 chocolate cookies.</li>\r\n    <li>The second guest eats a vanilla cookie. After that, there are 0 vanilla cookies and 2 chocolate cookies.</li>\r\n    <li>The last guest eats a chocolate cookie. After that, there are 0 vanilla cookies and 1 chocolate cookie.</li>\r\n</ul>\r\n<p>So, the answer to this test case is \"Yes\".</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong> [2, 2, 2, 1, 2, 0, 100, 0, 1]\r\n<strong>Output:</strong> [\"Yes\", \"No\"]</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong> [1, 12, 13, 25, 1]\r\n<strong>Output:</strong> [\"No\"]</code></pre>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Auxia_22july",
        "company_id": 196
    },
    {
        "id": 583,
        "title": "Challenge 8c",
        "problem_statement": "<h1>Challenge 8c</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>JATC loves Banh-mi (a Vietnamese food). His affection for Banh-mi is so much that he always has it for breakfast. This morning, as usual, he buys a Banh-mi and decides to enjoy it in a special way.</p>\r\n<p>First, he splits the Banh-mi into <code>n</code> parts, places them on a row and numbers them from 1 through <code>n</code>. For each part <code>i</code>, he defines the deliciousness of the part as <code>x_i</code> belongs to <code>{0,1}</code>. JATC's going to eat those parts one by one. At each step, he chooses arbitrary remaining part and eats it. Suppose that part is the <code>i</code>-th part then his enjoyment of the Banh-mi will increase by <code>x_i</code> and the deliciousness of all the remaining parts will also increase by <code>x_i</code>. The initial enjoyment of JATC is equal to 0.</p>\r\n<p>For example, suppose the deliciousness of 3 parts are <code>[0,1,0]</code>. If JATC eats the second part then his enjoyment will become 1 and the deliciousness of remaining parts will become <code>[1, ...]</code>. Next, if he eats the first part then his enjoyment will become 2 and the remaining parts will become <code>[...2]</code>. After eating the last part, JATC's enjoyment will become 4.</p>\r\n<p>However, JATC doesn't want to eat all the parts but to save some for later. He gives you <code>q</code> queries, each of them consisting of two integers <code>l_i</code> and <code>r_i</code>.</p>\r\n<p>For each query, you have to let him know what is the maximum enjoyment he can get if he eats all the parts with indices in the range <code>[l_i, r_i]</code> in some order. All the queries are independent of each other. Since the answer to the query could be very large, print it modulo 10^9+7.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line contains two integers <code>n</code> and <code>q</code>.</p>\r\n<p>The second line contains a string of length <code>n</code>, each character is either '0' or '1'. This string represents the initial deliciousness of the Banh-mi parts.</p>\r\n<p>The next <code>q</code> lines contain two integers <code>l_i</code> and <code>r_i</code>, representing the start and end indices for each query (1-indexed).</p>\r\n\r\n<h2>Output</h2>\r\n<p>Output <code>q</code> space separated integers, where the <code>j</code>-th integer is the answer to the <code>j</code>-th query modulo 10^9+7.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 2\r\n1011\r\n1 4\r\n3 4\r\nOutput: 14 3</code></pre>\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 1\r\n111\r\n1 3\r\nOutput: 3</code></pre>\r\n\r\n<h2>Note</h2>\r\n<p>In the first example:</p>\r\n<p>For query 1: One of the best ways for JATC to eats those parts is in this order: 1, 4, 3, 2.</p>\r\n<p>For query 2: Both 3, 4 and 4, 3 ordering give the same answer.</p>\r\n<p>In the second example, any order of eating parts leads to the same answer.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Auxia_22july",
        "company_id": 196
    },
    {
        "id": 584,
        "title": "Challenge 8b",
        "problem_statement": "<h1>Challenge 8b</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>JATC's math teacher always gives the class some interesting math problems so that they don't get bored. Today the problem is as follows. Given an integer n, you can perform the following operations zero or more times:</p>\r\n<ul>\r\n    <li><strong>mul x:</strong> multiplies n by x (where x is an arbitrary positive integer).</li>\r\n    <li><strong>sqrt:</strong> replaces n with square root of n (to apply this operation, n must be a perfect square, and the result must be an integer).</li>\r\n</ul>\r\n<p>You can perform these operations as many times as you like. What is the minimum value of n, that can be achieved and what is the minimum number of operations, to achieve that minimum value?</p>\r\n\r\n<h2>Input</h2>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>Integer n.</code></pre>\r\n\r\n<h2>Output</h2>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>Print two integers: the minimum integer that can be achieved using the described operations and the minimum number of operations required.</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 20\r\nOutput: 10 2</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 5184\r\nOutput: 6 4</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Auxia_22july",
        "company_id": 196
    },
    {
        "id": 585,
        "title": "Challenge 10c",
        "problem_statement": "<h1>Challenge 10c</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a set of points x_1, x_2, ..., x_n on the number line. Two points i and j can be matched with each other if the following conditions hold:</p>\r\n<ul>\r\n<li>neither i nor j is matched with any other point;</li>\r\n<li>|x_i - x_j| &gt;= z.</li>\r\n</ul>\r\n<p>What is the maximum number of pairs of points you can match with each other?</p>\r\n\r\n<h2>Input</h2>\r\n<p>An integer array.</p>\r\n<p>First element is n.</p>\r\n<p>Second element is z.</p>\r\n<p>The next n elements form the array x_1, x_2, ..., x_n.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print one integer – the maximum number of pairs of points you can match with each other.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: {4, 2, 1, 3, 3, 7}\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Here, n=4 and z=2. The input array is interpreted as: n=4, z=2, and points x_1=1, x_2=3, x_3=3, x_4=7. You can match point 1 (value 1) with point 2 (value 3) because |3-1|=2, which is &gt;= z (2). You can also match point 3 (value 3) with point 4 (value 7) because |7-3|=4, which is &gt;= z (2). Both pairs are valid, resulting in 2 matched pairs.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: {5, 5, 10, 9, 5, 8, 7}\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Here, n=5 and z=5. The input array is interpreted as: n=5, z=5, and points x_1=10, x_2=9, x_3=5, x_4=8, x_5=7. You can match point 1 (value 10) with point 3 (value 5) because |5-10|=5, which is &gt;= z (5). This results in 1 matched pair.</p>\r\n\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\nusing namespace std;\r\n\r\nint Challenge10c(int arr[], int arrLength) {\r\n    // code goes here\r\n    return arr[0];\r\n}\r\n\r\n// keep this function call here\r\nint main(void) { ... }\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Auxia_22july",
        "company_id": 196
    }
]