[
    {
        "id": 1002,
        "title": "Forbidden Arrangements",
        "problem_statement": "<h1>Forbidden Arrangements</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the land of Zephyria, a grand ritual known as the <strong>Cycle of Ascension</strong> requires <strong>N sages</strong> to stand in a perfect sequence from 1 to N.</p>\r\n<p>However, two ancient curses have disrupted the process:</p>\r\n<ul>\r\n    <li><strong>Hex of Shadows (A):</strong> A specific forbidden arrangement A = [A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub>], meaning that sage <code>i</code> cannot stand at position A<sub>i</sub>.</li>\r\n    <li><strong>Curse of Starlight (B):</strong> Another forbidden arrangement B = [B<sub>1</sub>, B<sub>2</sub>, ..., B<sub>N</sub>], meaning that sage <code>i</code> cannot stand at position B<sub>i</sub>.</li>\r\n</ul>\r\n<p>You want to find the number of valid ways the sages can be arranged while avoiding both forbidden sequences.</p>\r\n<p>In other words, Let C denote a valid sequence C = [C<sub>1</sub>, C<sub>2</sub>, ..., C<sub>N</sub>] where:</p>\r\n<ul>\r\n    <li>No sage <code>i</code> is placed at A[i].</li>\r\n    <li>No sage <code>i</code> is placed at B[i].</li>\r\n</ul>\r\n<p>Find the total number of valid permutations of C that respect these restrictions. Since the answer can be very large return it modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer, N, denoting the number of elements in A.</p>\r\n<p>Each line <code>i</code> of the N subsequent lines (where 1 &le; i &le; N) contains an integer describing A[i].</p>\r\n<p>Each line <code>i</code> of the N subsequent lines (where 1 &le; i &le; N) contains an integer describing B[i].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>1 &le; A[i] &le; N</li>\r\n    <li>1 &le; B[i] &le; N</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n1\r\n1\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> N=1, A=[1], B=[1]<br>There is only one sage and one position.<br>However, both A and B forbid sage 1 from standing at position 1.<br>Since no valid placement exists, the answer is 0.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n1\r\n2\r\n1\r\n2\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> N=2<br>A=[1, 2] forbids sage 1 from being in position 1 and sage 2 from being in position 2.<br>B=[1, 2] imposes the same restriction.<br>The only possible arrangement is [2, 1]:<br>Sage 1 goes to position 2.<br>Sage 2 goes to position 1.<br>There is 1 valid sequence, so the output is 1.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n2\r\n3\r\n1\r\n2\r\n3\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> N=3<br>A=[1, 2, 3]<br>B=[1, 2, 3]<br>Both A and B prevent sages from being in their natural position.<br>Possible valid arrangements:<br>[3, 1, 2]<br>[2, 3, 1]<br>There are 2 valid sequences, so the output is 2.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_13july",
        "company_id": 322
    },
    {
        "id": 1003,
        "title": "Question 1",
        "problem_statement": "<h1>Question 1</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a Tree of N nodes, rooted at 1.</p>\r\n<ul>\r\n    <li>The i+1-th node's parent is P[i] (guaranteed P[i] &lt; i)</li>\r\n    <li>Each node has value A[i]</li>\r\n</ul>\r\n<p>Find the number of ways to pick a non-empty subset of nodes such that:</p>\r\n<ol>\r\n    <li>Sum of values of picked nodes is divisible by X</li>\r\n    <li>No two nodes in subset are adjacent.</li>\r\n</ol>\r\n<p>Since the answer can be large return it modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer, N, denoting the number of elements in A.</p>\r\n<p>The next line contains an integer, X.</p>\r\n<p>Each line i of the N subsequent lines (where 1 &le; i &le; N) contains an integer describing A[i].</p>\r\n<p>The next line contains an integer, M, denoting the number of elements in P.</p>\r\n<p>Each line i of the M subsequent lines (where 1 &le; i &le; M) contains an integer describing P[i].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>3</sup></li>\r\n    <li>1 &le; X &le; 10<sup>2</sup></li>\r\n    <li>1 &le; A[i] &le; X</li>\r\n    <li>N-1 &le; M &le; N-1</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2\r\n2\r\n1\r\n1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> N=2, X=2, A=[2 2], M=1, P=[1]<br>The ways to pick the nodes are:<br>(1) , (2) because the sum is divisible by 2 and no adjacent nodes are picked.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n3\r\n3\r\n1\r\n1\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> N=2, X=3, A=[3 1], M=1, P=[1]<br>There is only one way to create a valid subset which is to pick 1 only.<br>The tree structure:<br>(1)<br>/<br>(2)<br>Node 1 has value 3 (divisible by 3).<br>Node 2 has value 1 (not divisible by 3).<br>Valid Subsets<br>we need to find non-empty subsets such that:<br>Sum of selected node values is divisible by 3.<br>No two selected nodes are adjacent.<br>Valid subsets:<br>{1} -> Sum = 3 (Divisible by 3)<br>No other valid subsets exist because:<br>{2} -> Sum = 1 (Not divisible by 3)<br>{1,2} -> Not allowed (Nodes are adjacent)<br>Only one valid subset exists: {1}.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_13july",
        "company_id": 322
    },
    {
        "id": 1004,
        "title": "Flip Flop Arrays",
        "problem_statement": "<h1>Flip Flop Arrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given three integers N, L and R.</p>\r\n<p>It is given that a <strong>flip flop array</strong> is defined as an array of length N such that:</p>\r\n<ul>\r\n    <li>Each element is between L and R (inclusive).</li>\r\n    <li>There are no two adjacent values that are equal (i.e., for all valid <code>i</code>, <code>A[i] != A[i+1]</code>).</li>\r\n    <li>No three adjacent values that are strictly increasing or strictly decreasing (i.e., for all valid <code>i</code>, it's not true that <code>A[i] &lt; A[i+1] &lt; A[i+2]</code> AND it's not true that <code>A[i] &gt; A[i+1] &gt; A[i+2]</code>).</li>\r\n</ul>\r\n<p>Moreover, it is guaranteed that L &lt; R.</p>\r\n<p>Find the <strong>total number of possible flip flop arrays</strong> of size N. Since the answer can be large return it modulo 10^9 + 7.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer, N, denoting the length of the array.</p>\r\n<p>The next line contains an integer, L, denoting the lower bound.</p>\r\n<p>The next line contains an integer, R, denoting the upper bound.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n2\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>N=3, L=1, R=2\r\nThe arrays are:\r\n[1, 2, 1]\r\n[2, 1, 2]\r\nBecause for all i, there is no i such that A[i] == A[i + 1]\r\nThere is no i such that A[i] &lt; A[i + 1] &lt; A[i + 2]\r\nThere is no i such that A[i] &gt; A[i + 1] &gt; A[i + 2]</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n3\r\nOutput:\r\n10</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>N=3, L=1, R=3\r\nThe arrays are:\r\n1) [1, 2, 1]\r\n2) [1, 3, 1]\r\n3) [1, 3, 2]\r\n4) [2, 1, 2]\r\n5) [2, 1, 3]\r\n6) [2, 3, 1]\r\n7) [2, 3, 2]\r\n8) [3, 1, 2]\r\n9) [3, 2, 1]\r\n10) [3, 2, 3]</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n4\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> (Explanation not provided in the image, but likely similar to Example 1, e.g., [3, 4, 3], [4, 3, 4])</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 &lt;= N &lt;= 2000</code></li>\r\n    <li><code>1 &lt;= L &lt;= 2000</code></li>\r\n    <li><code>1 &lt;= R &lt;= 2000</code></li>\r\n</ul>\r\n\r\n<h2>Provided Code Structure</h2>\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\nusing namespace std;\r\n\r\nstring trim(string str);\r\n\r\nint get_ans(int N, int L, int R) {\r\n    // Write your code here\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n\r\n    string inputline;\r\n\r\n    getline(cin, inputline);\r\n    int N = stoi(trim(inputline));\r\n\r\n    getline(cin, inputline);\r\n    int L = stoi(trim(inputline));\r\n\r\n    getline(cin, inputline);\r\n    int R = stoi(trim(inputline));\r\n\r\n    int result = get_ans(N, L, R);\r\n\r\n    cout &lt;&lt; result &lt;&lt; \"\\n\";\r\n\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_13july",
        "company_id": 322
    },
    {
        "id": 1005,
        "title": "Sum of Beauty of Increasing Subsequences",
        "problem_statement": "<h1>Sum of Beauty of Increasing Subsequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array A of length N.</p>\r\n<p>We define <strong>beauty(g)</strong> as g multiplied by the number of strictly increasing subsequence of A, where the GCD (greatest common divisor) of all the elements in any of these sequences is exactly g.</p>\r\n<p>Find the sum of <strong>beauty(g)</strong> for all positive integers (greater than zero). Since the answer can be very large, return it modulo 10^9 + 7.</p>\r\n<p>The input format is as follows:</p>\r\n<ul>\r\n    <li>The first line contains an integer, N, denoting the number of elements in A.</li>\r\n    <li>Each line i of the N subsequent lines (where 0 &lt;= i &lt; N) contains an integer describing A[i].</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n1\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> N=1, A=[1]. The only increasing subsequence is [1] with gcd equal to 1 so the answer is 1 * 1 = 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2\r\n2\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> N=2, A=[2 2]. There are two increasing sequences: [2] and [2] (first and second index), and both of gcd 2 so the answer is 2 * 2 = 4.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n1\r\n2\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> N=3, A=[2 1 2]. Increasing sequences are (indices): [1], [3], [2, 3]. The gcd of the first two is 2, and the gcd of the last two is 1. The answer is 2 * 2 + 1 * 2 = 6.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10^5</li>\r\n    <li>1 &lt;= A[i] &lt;= 10^5</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_13july",
        "company_id": 322
    },
    {
        "id": 1006,
        "title": "Divisible Game",
        "problem_statement": "<h1>Divisible Game</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array A of length N.</p>\r\n<p>Alice and Bob are playing a game called Divisible Game. The game consists of the following steps:</p>\r\n<ul>\r\n    <li>First, Alice must choose any integer G that is strictly greater than 1.</li>\r\n    <li>After that, Alice will choose two integers (l, r) such that 1 &lt;= l &lt;= r &lt;= N.</li>\r\n    <li>Let the score of both players be equal to 0 initially. For each element i such that l &lt;= i &lt;= r, if A<sub>i</sub> is divisible by G, the score of Alice will increase by A<sub>i</sub>, otherwise the score of Bob will increase by A<sub>i</sub>.</li>\r\n</ul>\r\n<p>Alice wants the value of her score - (minus) Bob's score to be as large as possible. Not only that, but she wants to find the minimum value of G that will result in this difference.</p>\r\n<p>Find the value of (maximum score difference) * (minimum G to get this score). Since the result can be large return it modulo 10^9 + 7.</p>\r\n\r\n<h2>Input format</h2>\r\n<p>The first line contains an integer, N, denoting the number of elements in A.</p>\r\n<p>Each line i of the N subsequent lines (where 0 &lt;= i &lt; N) contains an integer describing A[i].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10^5</li>\r\n    <li>2 &lt;= A[i] &lt;= 10^5</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n7\r\n3\r\nOutput:\r\n9</code></pre>\r\n<p><strong>Explanation:</strong> N=3, A=[2,7,3]. If we choose G=3 and [l=3, r=3], then the score of Alice will be equal to 3, and the score of Bob will be equal to 0. The answer is: (3 - 0) * 3 = 9.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n6\r\n1\r\nOutput:\r\n27</code></pre>\r\n<p><strong>Explanation:</strong> N=3, A=[2,6,1]. If we choose G=3 and [l=2, r=3], then the score of Alice will be equal to 9, and the score of Bob will be equal to 0. The answer is: (9 - 0) * 3 = 27.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n2\r\n2\r\nOutput:\r\n12</code></pre>\r\n<p><strong>Explanation:</strong> N=3, A=[1,2,2]. Alice can get a total score of 6 while Bob gets 0 (by selecting the FIRST 2 elements or the last 3 elements). It's optimal to choose the last three ones since we can choose G = 2, so the answer is 6 * 2 = 12.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_13july",
        "company_id": 322
    }
]