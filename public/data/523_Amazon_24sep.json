[
    {
        "id": 1495,
        "title": "Determine Minimum Storage",
        "problem_statement": "<h1>Determine Minimum Storage</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Within the Amazon Digital Resource Distribution Platform, a logistics specialist is responsible for optimally distributing a set of n software applications among k different teams. Each application is characterized by its memory requirement, denoted by <code>appMemory[i]</code> for <code>1 &lt;= i &lt;= n</code>.</p>\r\n<p>To streamline the distribution process, the specialist plans to utilize memory cards, ordering k memory cards with identical storage capacities. Each team can receive a maximum of 2 applications, and every team must receive at least one application, also no application should be left unassigned.</p>\r\n<p>Given the impracticality of downloading large application files directly, the approach involves determining the minimum storage capacity needed for the memory cards. A memory card can only store applications if the sum of their memory requirements does not exceed the memory card's storage capacity.</p>\r\n<p>What is the minimum storage capacity of memory cards that you must order to be able to distribute these applications to the teams?</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>determineMinStorage</code> in the editor below.</p>\r\n<p><code>determineMinStorage</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int appMemory[n]</code>: the memory requirement of each application</li>\r\n    <li><code>int k</code>: the number of teams amongst whom the applications are to be distributed</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: an integer variable denoting the minimum capacity of memory cards required to distribute the applications amongst the teams</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, appMemory = [9, 2, 4, 6], k = 3\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> We note that we will need memory cards of the size of at least 9 units, to store the first application. This also turns out to be the minimum size of memory cards that should be ordered to give the applications to these teams. We can use the first memory card to store the application of size 9, the 2nd one to store the second and third applications, and the 3rd memory card to store the fourth application. Hence, the minimum capacity of memory cards required is 9 units.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: n = 2, appMemory = [5, 11], k = 1\r\nOutput: 16</code></pre>\r\n<p><strong>Explanation:</strong> Since there is only 1 memory card available, we need to put both the applications in it. Hence, the minimum size of memory cards required is 11 + 5 = 16.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: n = 5, appMemory = [10, 7, 6, 12, 1], k = 5\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> We see that there are 5 applications, and we have 5 memory cards available. So, we will put one application in one memory card. Therefore, the minimum size of the memory card required is the maximum memory requirement of the application available. Hence, the minimum size of the memory card required is 12 units.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= k &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= appMemory[i] &lt;= 10^9</code></li>\r\n    <li><code>n &lt;= 2 * k</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_24sep",
        "company_id": 523
    },
    {
        "id": 1496,
        "title": "Maximum Storage Efficiency",
        "problem_statement": "<h1>Maximum Storage Efficiency</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're managing Amazon's cloud storage system. There are <code>n</code> tasks that need to be processed, and the <code>i<sup>th</sup></code> task is broken into <code>num_segments[i]</code> segments. The cloud storage is divided into <code>m</code> storage units. The segments are allocated to these units with the following rules:</p>\r\n<ul>\r\n    <li>Each segment is stored in exactly one storage unit.</li>\r\n    <li>Each storage unit must hold at least one segment.</li>\r\n    <li>A storage unit cannot contain segments from more than one task.</li>\r\n</ul>\r\n<p>The storage efficiency is measured by the minimum number of segments that any storage unit contains.</p>\r\n<p>Your task is to organize the segments in such a way that this storage efficiency is maximized.</p>\r\n<p><strong>Illustrative Example:</strong></p>\r\n<p>Consider the following inputs:</p>\r\n<pre><code class='language-text'>n = 3\r\nnum_segments = [7, 10, 5]\r\nm = 4</code></pre>\r\n<p>There are 3 tasks that need to be processed. Task 1 has 7 segments, Task 2 has 10 segments, and Task 3 has 5 segments.</p>\r\n<p>One of the optimal ways to allocate is:</p>\r\n<ul>\r\n    <li>Storage unit 1: all 7 segments from task 1</li>\r\n    <li>Storage unit 2: 5 segments from task 2</li>\r\n    <li>Storage unit 3: 5 segments from task 2</li>\r\n    <li>Storage unit 4: 5 segments from task 3</li>\r\n</ul>\r\n<p>The minimum segments in any storage unit is 5 (in storage units 2, 3, and 4). It can be proved that we cannot achieve a higher value for the minimum segment in any storage unit. Hence, the answer is 5.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumStorageEfficiency</code> in the editor below. The function should return an <code>int</code> representing the maximum storage efficiency.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><strong><code>vector&lt;int&gt; num_segments</code></strong>: an array where <code>num_segments[i]</code> is the number of segments the <code>i<sup>th</sup></code> process is divided into.</li>\r\n    <li><strong><code>long m</code></strong>: the number of storage units.</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int getMaximumStorageEfficiency(vector&lt;int&gt; num_segments, long m) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Returns</h2>\r\n<p><strong><code>int</code></strong>: the maximum storage efficiency.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; num_segments[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>n &le; m &le; &sum; num_segments[i]</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nnum_segments = [4, 3, 5]\r\nm = 3\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> As <code>m = 3 (= n)</code>, the only way to store the processes is -</p>\r\n<ul>\r\n    <li>Store 4 segments of task 1 in storage unit 1.</li>\r\n    <li>Store 3 segments of task 2 in storage unit 2.</li>\r\n    <li>Store 5 segments of task 3 in storage unit 3.</li>\r\n</ul>\r\n<p>Hence, the storage efficiency is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\nnum_segments = [1, 2]\r\nm = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The only way to store the processes is -</p>\r\n<ul>\r\n    <li>Store 1 segment of task 1 in storage unit 1.</li>\r\n    <li>Store 1 segment of task 2 in storage unit 2.</li>\r\n    <li>Store 1 segment of task 2 in storage unit 3.</li>\r\n</ul>\r\n<p>Hence, the storage efficiency is 1.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_24sep",
        "company_id": 523
    },
    {
        "id": 1506,
        "title": "Medians of Subsequences",
        "problem_statement": "```html\r\n<h1>Medians of Subsequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A new Amazon intern encountered a challenging task. Currently, the intern has <code>n</code> integers, where the value of the <code>i<sup>th</sup></code> element is represented by the array element <code>values[i]</code>.</p>\r\n<p>The intern is curious to play with arrays and subsequences and thus asks you to join him.</p>\r\n<p>Given <code>n</code> integer, array <code>values</code>, and an integer <code>k</code>, the intern needs to find the maximum and minimum overall medians among all subsequences of length <code>k</code>.</p>\r\n<p><strong>Note on Median:</strong> For a subsequence of length <code>k</code>, the median is defined as the element at index <code>floor((k-1)/2)</code> after sorting the subsequence in non-decreasing order (0-indexed).</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>medians</code> in the editor below.</p>\r\n<p><code>medians</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int values[n]</code>: the value of integers.</li>\r\n    <li><code>int k</code>: the given integer</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int[]</code>: the maximum and minimum overall medians of subsequences of length <code>k</code> in the form <code>[maximum median, minimum median]</code>.</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'medians' function below.\r\n *\r\n * The function is expected to return an INTEGER_ARRAY.\r\n * The function accepts following parameters:\r\n *  1. INTEGER_ARRAY values\r\n *  2. INTEGER k\r\n */\r\n\r\nvector&lt;int&gt; medians(vector&lt;int&gt; values, int k) {\r\n\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p>Given <code>n = 3</code>, <code>values = [1, 2, 3]</code> and <code>k = 2</code>.</p>\r\n<p>Subsequences of length <code>k</code> and their medians:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Subsequences of length k</th>\r\n            <th>median</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>[1, 2]</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[1, 3]</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[2, 3]</td>\r\n            <td>2</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p><strong>Explanation:</strong> Here, the maximum median present is 2 and the minimum median in the subsequence present is 1. So the result would be <code>[2, 1]</code>.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n56\r\n21\r\n1\r\n</code></pre>\r\n<p>This corresponds to <code>n = 2</code>, <code>values = [56, 21]</code>, <code>k = 1</code>.</p>\r\n<pre><code class='language-text'>Output: [56, 21]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Subsequences of length <code>k</code> and their medians:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Subsequences of length k</th>\r\n            <th>median</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>[56]</td>\r\n            <td>56</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[21]</td>\r\n            <td>21</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>The maximum median present is 56 and the minimum median present is 21.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n16\r\n21\r\n9\r\n2\r\n78\r\n5\r\n</code></pre>\r\n<p>This corresponds to <code>n = 5</code>, <code>values = [16, 21, 9, 2, 78]</code>, <code>k = 5</code>.</p>\r\n<pre><code class='language-text'>Output: [16, 16]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Subsequences of length <code>k</code> and their medians:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Subsequences of length k</th>\r\n            <th>median</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>[16, 21, 9, 2, 78]</td>\r\n            <td>16</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>There is only one subsequence of length 5, which is the array itself. After sorting <code>[2, 9, 16, 21, 78]</code>, the median at index <code>floor((5-1)/2) = 2</code> is 16. Hence, the maximum median and minimum median are both 16.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= values[i] &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>1 &lt;= k &lt;= n</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_24sep",
        "company_id": 523
    },
    {
        "id": 1507,
        "title": "Maximum Storage Efficiency",
        "problem_statement": "```html\r\n<h1>Maximum Storage Efficiency</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're managing Amazon's cloud storage system. There are <code>n</code> tasks that need to be processed, and the <code>j<sup>th</sup></code> task is broken into <code>num_segments[j]</code> segments. The cloud storage is divided into <code>m</code> storage units. The segments are allocated to these units with the following rules:</p>\r\n<ul>\r\n    <li>Each segment is stored in exactly one storage unit.</li>\r\n    <li>Each storage unit must hold at least one segment.</li>\r\n    <li>A storage unit cannot contain segments from more than one task.</li>\r\n</ul>\r\n<p>The storage efficiency is measured by the minimum number of segments that any storage unit contains.</p>\r\n<p>Your task is to organize the segments in such a way that this storage efficiency is maximized.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumStorageEfficiency</code> in the editor below with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int num_segments[n]</code>: the number of segments a process is divided into</li>\r\n    <li><code>long m</code>: the number of storage units</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the maximum storage efficiency</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><code>n = 3</code></p>\r\n<p><code>num_segments = {7, 10, 5}</code></p>\r\n<p><code>m = 4</code></p>\r\n<p>There are 3 tasks that need to be processed. Task 1 has 7 segments, Task 2 has 10 segments, and Task 3 has 5 segments.</p>\r\n<p>One of the optimal ways to allocate is:</p>\r\n<ul>\r\n    <li>Storage unit 1: all 7 segments from task 1</li>\r\n    <li>Storage unit 2: 5 segments from task 2</li>\r\n    <li>Storage unit 3: 5 segments from task 2</li>\r\n    <li>Storage unit 4: 5 segments from task 3</li>\r\n</ul>\r\n<p><strong>Explanation:</strong> The minimum segments in any storage unit is 5 in storage units 2, 3, and 4. It can be proved that we cannot achieve a higher value for the minimum segment in any storage unit. Hence, the answer is 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, num_segments = [4, 3, 5], m = 3\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> As m = 3 (= n), the only way to store the processes is -</p>\r\n<ul>\r\n    <li>Store 4 segments of task 1 in storage unit 1.</li>\r\n    <li>Store 3 segments of task 2 in storage unit 2.</li>\r\n    <li>Store 5 segments of task 3 in storage unit 3.</li>\r\n</ul>\r\n<p>Hence, the storage efficiency is 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 2, num_segments = [1, 2], m = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The only way to store the processes is -</p>\r\n<ul>\r\n    <li>Store 1 segment of task 1 in storage unit 1.</li>\r\n    <li>Store 1 segment of task 2 in storage unit 2.</li>\r\n    <li>Store 1 segment of task 2 in storage unit 3.</li>\r\n</ul>\r\n<p>Hence, the storage efficiency is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= num_segments[j] &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>n &lt;= m &lt;= sum_num_segments()</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_24sep",
        "company_id": 523
    }
]