[
    {
        "id": 712,
        "title": "Count Good Arrays",
        "problem_statement": "<h1>Count Good Arrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An array is considered \"good\" if the absolute difference between any two consecutive elements is less than or equal to 1.</p>\r\n<p>Given an array <code>arr</code> containing elements that are either 0, 1, or 2, or missing (represented by <code>?</code>), determine the number of ways to replace the missing elements with arbitrary integer values such that the resulting array is good.</p>\r\n<p>Since the result can be large, return the answer modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>countGoodArrays</code> function in the editor below. The function is expected to return an INTEGER.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>int arr_count</code>: an integer, the size of <code>arr</code>.</li>\r\n    <li><code>int* arr</code>: an array of integers, where missing elements are represented by a specific sentinel value (e.g., -1, or parsed from a character '?' in the input).</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the number of ways to replace missing elements to form a good array, modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider n = 3, arr = [0, ?, 1].</p>\r\n<p>There are 9 ways to make the array good. The resulting arrays are:</p>\r\n<pre><code class='language-text'>arr = [0,0,1]\r\narr = [0,1,1]\r\narr = [0,1,0]\r\narr = [0,1,2]\r\narr = [0,0,0]\r\narr = [0,2,1]\r\narr = [0,2,2]\r\narr = [0,1,3]\r\narr = [0,0,-1]</code></pre>\r\n<p><strong>Explanation:</strong> In each of these arrays, the absolute difference between each pair of consecutive elements is less than or equal to 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n0 ? 1 ?\r\nOutput:\r\n9</code></pre>\r\n<p><strong>Explanation:</strong> For <code>arr = [0, ?, 1, ?]</code>, the good arrays are:</p>\r\n<pre><code class='language-text'>arr = [0,0,1,0]\r\narr = [0,0,1,1]\r\narr = [0,1,1,0]\r\narr = [0,1,1,1]\r\narr = [0,1,1,2]\r\narr = [0,1,0,1]\r\narr = [0,1,0,0]\r\narr = [0,1,2,1]\r\narr = [0,1,2,2]</code></pre>\r\n<p>In each of these arrays, the absolute difference between each pair of consecutive elements is less than or equal to 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 1000</code></li>\r\n    <li>For non-missing elements <code>arr[i]</code> (i.e., not <code>?</code>): <code>0 &lt;= arr[i] &lt;= 2</code></li>\r\n    <li>There is at least one element in <code>arr</code> which is not equal to 0.</li>\r\n</ul>\r\n\r\n<h2>Code Snippet</h2>\r\n<pre><code class='language-c'>#include &lt;assert.h&gt;\r\n\r\n/*\r\n * Complete the 'countGoodArrays' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts INTEGER_ARRAY arr as parameter.\r\n */\r\n\r\nint countGoodArrays(int arr_count, int* arr) {\r\n    // Function body to be completed\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zomato_21july",
        "company_id": 226
    },
    {
        "id": 713,
        "title": "Binary Autocomplete",
        "problem_statement": "<h1>Binary Autocomplete</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a console for an old motor controller that accepts binary string commands, implement its autocomplete feature. The autocomplete works as follows:</p>\r\n<ul>\r\n    <li>When typing a new command, it displays the previously entered command with the longest common prefix.</li>\r\n    <li>If multiple previous commands share the same longest prefix, display the most recent one.</li>\r\n    <li>If no previous command shares a common prefix, display the most recent command.</li>\r\n    <li>If there are no previous commands, display nothing.</li>\r\n</ul>\r\n<p>Write a function that takes a sequence of commands and returns an array where each element is the index of the command displayed by autocomplete for each new command. Return 0 if there is no previous command.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>n = 6\r\ncommand = ['000', '110', '01', '001', '110', '11']</code></pre>\r\n<p>The return array is [0, 1, 1, 2, 5].</p>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>'000' - 0 (No command has previously been entered)</li>\r\n    <li>'110' - 1 (There is no previous command that shares a common prefix, so the last command is shown)</li>\r\n    <li>'01' - 1 ('000' shares the prefix '0' with the first command)</li>\r\n    <li>'001' - 1 ('000' shares the prefix '00' with the first command)</li>\r\n    <li>'110' - 2 ('110' shares the prefix '11' with the second command)</li>\r\n    <li>'11' - 5 ('11' shares the prefix '11' with the fifth command most recently)</li>\r\n</ol>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n100110\r\n1001\r\n1001111\r\nOutput:\r\n0\r\n1\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>'100110' - 0 (No command has previously been entered)</li>\r\n    <li>'1001' - 1 (The first command shares the prefix '1001')</li>\r\n    <li>'1001111' - 1 (The first command shares the prefix '10011')</li>\r\n</ol>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>autocomplete</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string command[n]</code>: an array of strings where <code>command[i]</code> denotes the (i+1)th entered command, <code>0 &le; i &lt; n</code>.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: an array of integers</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 10^5</code></li>\r\n    <li><code>1 &le; length of command[i] &le; 30</code> (where <code>0 &le; i &lt; n</code>)</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zomato_21july",
        "company_id": 226
    }
]