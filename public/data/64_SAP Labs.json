[
    {
        "id": 241,
        "title": "Common Town Name",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Common Town Name</h2>\n\n    <div class=\\\"environment-info\\\">\n        <p>The current selected programming language is <strong>C++14</strong>. We emphasize the submission of a fully working code over partially correct but efficient code. Once <em>submitted</em>, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of <code>GCC</code> being used is <strong>5.5.0</strong>.</p>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>There are N people living in a state. In this state, people concatenate their town name before their first name. Write an algorithm to find the name of the town of the given N people where the name of the town is the common substring and has the maximum length.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of the input consists of an integer - <code>size</code>, representing the given number of people (N).</p>\n        <p>The second line consists of N space-separated strings representing the first names of the people.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a string in lowercase letters representing the name of the town of the given N people where the name of the town is the common substring and has the maximum length. If no such common prefix is found, then do not print anything.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 ≤ size ≤ 10<sup>5</sup></li>\n            <li>0 < len < 10<sup>5</sup>, where len is the length of the string</li>\n        </ul>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <h3>Note</h3>\n        <p>The names of the people are spelled in English letters and are case insensitive.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\nRosewood rose rory rosemary roshh</pre>\n            <pre class=\\\"output\\\">Output:\nros</pre>\n            <div class=\\\"explanation\\\">\n                <p>The common substring with the maximum length in the names of the list of people, in the beginning is \\\"ros\\\".</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstring getTown(vector&lt;string&gt; peopleNames) {\n    string answer;\n    // Write your code here\n    \n    return answer;\n}\n\nint main() {\n    //Input for peopleNames\n    int peopleNames_size;\n    cin >> peopleNames_size;\n    vector&lt;string&gt; peopleNames;\n    for(int idx = 0; idx < peopleNames_size; idx++) {\n        string temp;\n        cin >> temp;\n        peopleNames.push_back(temp);\n    }\n    \n    string result = getTown(peopleNames);\n    cout << result;\n    \n    return 0;\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/15JVBDaCKwxmL0PLgdM48K7jXXVtlHiInOU-s533DkYk/edit?usp=sharing",
        "solution_code": "#include <iostream>\\n#include <string>\\n#include <vector>\\nusing namespace std;\\n\\nstring getTown(vector<string> peopleNames)\\n{\\n    if (peopleNames.empty()) return \\\"\\\";\\n\\n    string prefix = peopleNames[0];\\n    for (size_t i = 1; i < peopleNames.size(); ++i)\\n    {\\n        size_t j = 0;\\n        size_t min_length = min(prefix.size(), peopleNames[i].size());\\n        while (j < min_length && prefix[j] == peopleNames[i][j])\\n        {\\n            ++j;\\n        }\\n        prefix.resize(j);\\n        if (prefix.empty()) break;\\n    }\\n    return prefix;\\n}\\n\\nint main()\\n{\\n    ios::sync_with_stdio(false);\\n    cin.tie(NULL);\\n    \\n    int peopleNames_size;\\n    cin >> peopleNames_size;\\n    vector<string> peopleNames;\\n    peopleNames.reserve(peopleNames_size);\\n\\n    for(int idx = 0; idx < peopleNames_size; idx++)\\n    {\\n        string temp;\\n        cin >> temp;\\n        for(char &c : temp){\\n            if(\\'A\\' <= c && c <= \\'Z\\') c = c + (\\'a\\' - \\'A\\');\\n        }\\n        peopleNames.push_back(move(temp));\\n    }\\n    \\n    string result = getTown(peopleNames);\\n    if(!result.empty()) cout << result;\\n    \\n    return 0;\\n}",
        "company_name": "SAP Labs",
        "company_id": 64
    },
    {
        "id": 242,
        "title": "Nuclear Reactor Energy Maximization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Nuclear Reactor Energy Maximization</h2>\n\n    <div class=\\\"environment-info\\\">\n        <p>The current selected programming language is <strong>C++14</strong>. We emphasize the submission of a fully working code over partially correct but efficient code. Once <em>submitted</em>, you cannot review this problem again. You can use <code>cout</code> to debug your code. The version of <code>GCC</code> being used is <strong>5.5.0</strong>.</p>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Dr. Victor Frankenstein has quit the monster creation business. Nuclear energy now strikes his fantasy. He has created a fission reactor that takes radioactive materials in a liquid state. The capacity of his reactor is Y gallons. He has \\'N\\' vials of radioactive liquids, each with some mass and some volume. Some units of energy are produced when a liquid is poured into the reactor. Victor would like to maximize the energy output. However, there is a catch.</p>\n        \n        <p>Upon studying the physics and history of atomic elements, he realizes that the combined mass of the radioactive liquids inside the reactor must not exceed a certain critical mass \\'M\\' or else the reaction would get out of control and cause a violent explosion. Write an algorithm that will help Victor get the maximum energy from the reactor without losing his life.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line consists of an integer <code>reacCapacity</code>, representing the reactor capacity(Y).</li>\n            <li>The second line consists of an integer <code>criticalMass</code>, representing the critical mass of the reactor(M).</li>\n            <li>The third line consists of an integer <code>numVolumes</code>, representing the number of volumes of liquids(X).</li>\n            <li>The fourth line consists of X space-separated integers, <code>vol[0], vol[1],..., vol[X-1]</code> representing the volumes of X liquids in order.</li>\n            <li>The fifth line consists of an integer <code>numMasses</code>, representing the number of masses(Y).</li>\n            <li>The sixth line consists of Y space-separated integers, <code>mass[0], mass[1],...,mass[Y-1]</code> representing the masses of Y liquids in order.</li>\n            <li>The seventh line consists of an integer <code>numEnergy</code>, representing the number of energies(Z).</li>\n            <li>The last line consists of Z space-separated integers, <code>energy[0], energy[1],...,energy[Z-1]</code>, representing the energy produced by Z liquids in order.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer which is the maximum energy that can be generated from the reactor in the given constraints.</p>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <h3>Note</h3>\n        <p><code>numVolumes</code>, <code>numMasses</code>, <code>numEnergy</code> are same.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ numVolumes, numMasses, numEnergy ≤ 10<sup>4</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n100\n8\n5\n50 40 30 20 10\n5\n1 2 3 9 5\n5\n300 480 270 200 180</pre>\n            <pre class=\\\"output\\\">Output:\n960</pre>\n            <div class=\\\"explanation\\\">\n                <p>By selecting liquids from vials number- 1, 2, 5, the energy produced is = 300+480+180=960.</p>\n                <p>This combination of liquid contributed to the total volume = 50+40+10=100, which is not greater than reactorCap, and contributed to the total mass in the reactor=1+2+5=8, which is not greater than criticalMass.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\"><code>int maxEnergyGenerate(int reacCapacity, int criticalMass, vector&lt;int&gt; vol, vector&lt;int&gt; mass, vector&lt;int&gt; energy)</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/10PqAlKmph9XFi0k7bgjXKYtwsnAndIG6zmIMpHu1uYA/edit?usp=sharing",
        "solution_code": "int maxEnergyGenerate(int reacCapacity, int criticalMass, vector<int> vol, vector<int> mass, vector<int> energy) {\\n    int N = reacCapacity;\\n    int M = criticalMass;\\n    int n = vol.size();\\n    vector<vector<int>> dp(N + 1, vector<int>(M + 1, -1));\\n    dp[0][0] = 0;\\n\\n    for (int i = 0; i < n; i++) {\\n        int vi = vol[i];\\n        int mi = mass[i];\\n        int ei = energy[i];\\n        for (int v = N; v >= vi; v--) {\\n            for (int m = M; m >= mi; m--) {\\n                if (dp[v - vi][m - mi] != -1) {\\n                    int newEnergy = dp[v - vi][m - mi] + ei;\\n                    if (newEnergy > dp[v][m]) {\\n                        dp[v][m] = newEnergy;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    int max_energy = 0;\\n    for (int v = 0; v <= N; v++) {\\n        for (int m = 0; m <= M; m++) {\\n            if (dp[v][m] > max_energy) {\\n                max_energy = dp[v][m];\\n            }\\n        }\\n    }\\n    return max_energy;\\n}",
        "company_name": "SAP Labs",
        "company_id": 64
    }
]