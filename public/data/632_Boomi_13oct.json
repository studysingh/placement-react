[
    {
        "id": 1792,
        "title": "Generating Login Codes",
        "problem_statement": "<h1>Generating Login Codes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a software company, each employee's login process involves two arrays: <code>initialLogin</code> of size <code>n</code> and <code>standardLogin</code> of size <code>m</code>.</p>\r\n<p>The security software transforms these arrays by repeatedly performing an operation:</p>\r\n<ul>\r\n    <li>Select any subsegment of either array and replace it with the sum of its elements.</li>\r\n</ul>\r\n<p>For example, the array <code>[1, 5, 6, 8, 2]</code> can be transformed into <code>[12, 8, 2]</code> by replacing the subsegment <code>[1, 5, 6]</code> with <code>[12]</code>.</p>\r\n<p>The goal is to maximize the length of equal arrays after performing the operations any number of times on both <code>initialLogin</code> and <code>standardLogin</code>. The login code is the maximum possible length of these equal arrays. If the arrays cannot be made equal through the operations, the <code>initialLogin</code> is considered invalid, and the result should be -1.</p>\r\n<p>Determine the login code based on the provided <code>initialLogin</code> and <code>standardLogin</code>, or return -1 if <code>initialLogin</code> is invalid.</p>\r\n\r\n<p>Complete the function <code>getLoginCodes</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>initialLogin[n]</code>: the initial array</li>\r\n    <li><code>standardLogin[m]</code>: the standard array used by the security software</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the login code</p>\r\n\r\n<pre><code class='language-javascript'>int getLoginCodes(vector&lt;int&gt; initialLogin, vector&lt;int&gt; standardLogin) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\ninitialLogin = [2, 4, 3, 7, 10]\r\nm = 4\r\nstandardLogin = [6, 5, 5, 10]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nInitially, <code>initialLogin = [2, 4, 3, 7, 10]</code> and <code>standardLogin = [6, 5, 5, 10]</code>.</p>\r\n<p><strong>Operation 1:</strong> In <code>initialLogin</code>, replace the subsegment <code>[3, 7]</code> (which sums to 10) with <code>[10]</code>.\r\n    <ul>\r\n        <li><code>initialLogin</code> becomes <code>[2, 4, 10, 10]</code></li>\r\n        <li><code>standardLogin</code> remains <code>[6, 5, 5, 10]</code></li>\r\n    </ul>\r\n</p>\r\n<p><strong>Operation 2:</strong> In <code>standardLogin</code>, replace the subsegment <code>[5, 5]</code> (which sums to 10) with <code>[10]</code>.\r\n    <ul>\r\n        <li><code>initialLogin</code> remains <code>[2, 4, 10, 10]</code></li>\r\n        <li><code>standardLogin</code> becomes <code>[6, 10, 10]</code></li>\r\n    </ul>\r\n</p>\r\n<p><strong>Operation 3:</strong> In <code>initialLogin</code>, replace the subsegment <code>[2, 4]</code> (which sums to 6) with <code>[6]</code>.\r\n    <ul>\r\n        <li><code>initialLogin</code> becomes <code>[6, 10, 10]</code></li>\r\n        <li><code>standardLogin</code> remains <code>[6, 10, 10]</code></li>\r\n    </ul>\r\n</p>\r\n<p>Now, both arrays are <code>[6, 10, 10]</code>, and their length is 3. This is the maximum possible length.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\ninitialLogin = [1, 3, 4, 7, 2]\r\nm = 5\r\nstandardLogin = [1, 3, 4, 7, 2]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The arrays are already equal, so no operations need to be performed. Their length is 5.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n, m &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= initialLogin[i], standardLogin[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n\nclass Solution {\npublic:\n    int getLoginCodes(const std::vector<int>& initialLogin, const std::vector<int>& standardLogin) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n    std::vector<int> initialLogin(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> initialLogin[i];\n    }\n\n    int m;\n    std::cin >> m;\n    std::vector<int> standardLogin(m);\n    for (int i = 0; i < m; ++i) {\n        std::cin >> standardLogin[i];\n    }\n\n    Solution sol;\n    int result = sol.getLoginCodes(initialLogin, standardLogin);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Boomi_13oct",
        "company_id": 632
    },
    {
        "id": 1793,
        "title": "Population Density",
        "problem_statement": "<h1>Population Density</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Query an API for country information and calculate population density. Make a request to <code>https://jsonmock.hackerrank.com/api/countries?name=&lt;name&gt;</code> where <code>&lt;name&gt;</code> is the country you are searching for.</p>\r\n<p>The API returns a JSON object with several fields. The most important field is <code>data</code>, which contains either:</p>\r\n<ul>\r\n    <li>An empty array (if the country is not found)</li>\r\n    <li>An array with a single object containing country details</li>\r\n</ul>\r\n<p>When a country is found, the relevant properties in the data object are:</p>\r\n<ul>\r\n    <li><strong>population</strong>: the number of people in the country</li>\r\n    <li><strong>area</strong>: the land area of the country</li>\r\n</ul>\r\n<p>Calculate the population density using this formula:</p>\r\n<pre><code class='language-text'>populationDensity = population / area</code></pre>\r\n<p>Round the result to the nearest integer. If the country is not found (empty data array), return -1.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the <code>getPopulationDensity</code> function in the editor with the following parameters:</p>\r\n<pre><code class='language-text'>string name: the country to query</code></pre>\r\n<p><strong>Returns:</strong></p>\r\n<pre><code class='language-text'>int: the population density of the country rounded to the nearest integer, or -1</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>For the query <code>https://jsonmock.hackerrank.com/api/countries?name=india</code>, the data array is:</p>\r\n<pre><code class='language-text'>{\r\n  \"data\": [\r\n    {\r\n      \"name\": \"India\",\r\n      \"nativeName\": \"भारत\",\r\n      \"topLevelDomain\": [\".in\"],\r\n      \"alpha2Code\": \"IN\",\r\n      \"numericCode\": \"356\",\r\n      \"alpha3Code\": \"IND\",\r\n      \"currencies\": [\r\n        \"INR\"\r\n      ],\r\n      \"callingCodes\": [\r\n        \"91\"\r\n      ],\r\n      \"capital\": \"New Delhi\",\r\n      \"altSpellings\": [\"IN\",\"Bhārat\",\"Republic of India\",\"Bharat Ganrajya\"],\r\n      \"relevance\": \"3\",\r\n      \"region\": \"Asia\",\r\n      \"subregion\": \"Southern Asia\",\r\n      \"languages\": [\"hi\",\"en\"],\r\n      \"translations\": {\r\n        \"de\": \"Indien\",\r\n        \"es\": \"India\",\r\n        \"fr\": \"Inde\",\r\n        \"ja\": \"インド\",\r\n        \"it\": \"India\",\r\n        \"br\": \"Índia\",\r\n        \"pt\": \"Índia\",\r\n        \"nl\": \"India\",\r\n        \"hr\": \"Indija\",\r\n        \"fa\": \"هند\"\r\n      },\r\n      \"population\": 1275840000,\r\n      \"latlng\": [20,77],\r\n      \"demonym\": \"Indian\",\r\n      \"borders\": [\r\n        \"AFG\",\r\n        \"BGD\",\r\n        \"BTN\",\r\n        \"MMR\",\r\n        \"CHN\",\r\n        \"NPL\",\r\n        \"PAK\",\r\n        \"LKA\"\r\n      ],\r\n      \"area\": 3287590,\r\n      \"gini\": 33.4,\r\n      \"timezones\": [\"UTC+05:30\"]\r\n    }\r\n  ]\r\n}</code></pre>\r\n<pre><code class='language-text'>Input: name = \"india\"\r\nOutput: 388</code></pre>\r\n<p><strong>Explanation:</strong> India's population is 1275840000 and its area is 3287590. 1275840000/3287590 ≈ 388.077 which rounds to 388.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: name = \"california\"\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> There is no country named California, so return -1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>There will be either 1 or 0 records in data.</li>\r\n</ul>\r\n<p><strong>Note:</strong> Please review the header in the code stub to see available libraries for API requests in the selected language. Required libraries can be imported in order to solve the question. Check our full list of supported libraries at <a href=\"https://www.hackerrank.com/environment\">https://www.hackerrank.com/environment</a>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cmath>\n\n// The problem requires making API calls and parsing JSON.\n// For a real solution, you would need to include libraries for these tasks,\n// such as libcurl for HTTP requests and a JSON library like nlohmann/json.\n// This boilerplate focuses on the structure and input/output handling.\n\nclass Solution {\npublic:\n    /**\n     * Calculates the population density for a given country.\n     * @param name The name of the country to query.\n     * @return The population density rounded to the nearest integer, or -1 if the country is not found.\n     */\n    int getPopulationDensity(std::string name) {\n        // Core logic to be implemented here.\n        // This will involve:\n        // 1. Making an HTTP GET request to the API.\n        // 2. Parsing the JSON response.\n        // 3. Extracting population and area.\n        // 4. Calculating density and rounding.\n        // 5. Handling the case where the country is not found.\n        return 0; // Placeholder return\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string name;\n    std::cin >> name;\n\n    Solution solution;\n    int result = solution.getPopulationDensity(name);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Boomi_13oct",
        "company_id": 632
    },
    {
        "id": 1794,
        "title": "REST API: Country Codes",
        "problem_statement": "<h1>REST API: Country Codes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a function that formats phone numbers with the appropriate country calling codes.</p>\r\n<p>Given a country name and a phone number, your function should:</p>\r\n<ol>\r\n<li>Query the API at <code>https://jsonmock.hackerrank.com/api/countries?name=&lt;country&gt;</code> (replace <code>&lt;country&gt;</code> to retrieve the country's calling codes).</li>\r\n<li>If multiple calling codes exist, use the one at the highest index.</li>\r\n<li>Format the phone number as: <code>+&lt;Calling Code&gt; &lt;Phone Number&gt;</code>, like: <code>+1 765355443</code>.</li>\r\n<li>Return <code>\"-1\"</code> if the country data array is empty.</li>\r\n</ol>\r\n<p>The API response contains a data field which is an array.</p>\r\n<ul>\r\n<li>If the country is found, the array contains exactly 1 element with country information.</li>\r\n<li>If not found, the array is empty.</li>\r\n</ul>\r\n<p>The country record includes:</p>\r\n<ul>\r\n<li><code>name</code>: The country name (String)</li>\r\n<li><code>callingCodes</code>: An array of the country's calling codes (String Array)</li>\r\n<li>Other fields not relevant for this task</li>\r\n</ul>\r\n<p>For example, if querying Afghanistan, a portion of the record would be:</p>\r\n<pre><code class='language-javascript'>{\r\n  \"name\": \"Afghanistan\",\r\n  \"callingCodes\": [\r\n    \"93\"\r\n  ],\r\n  \"capital\": \"Kabul\"\r\n}\r\n</code></pre>\r\n<p><strong>Input Format For Custom Testing</strong></p>\r\n<ul>\r\n<li>The first line contains the string <code>country</code>.</li>\r\n<li>The second line contains the string <code>phoneNumber</code>.</li>\r\n</ul>\r\n<p><strong>Function Description</strong></p>\r\n<p>Complete the <code>getPhoneNumbers</code> function in the editor with the following parameters:</p>\r\n<ul>\r\n<li><code>string country</code>: the country to query</li>\r\n<li><code>string phoneNumber</code>: the phone number</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>string</code>: the completed phone number or <code>\"-1\"</code>.</p>\r\n<p>Note: Please review the header in the code stub to see available libraries for API requests in the selected language. Required libraries can be imported in order to solve the question. Check our full list of supported libraries at <code>https://www.hackerrank.com/environment</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>Afghanistan\r\n656445445</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+93 656445445</code></pre>\r\n<p><strong>Explanation:</strong> A call is made to API <code>https://jsonmock.hackerrank.com/api/countries?name=Afghanistan</code>. The calling codes array contains 1 entry, '93'.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>Puerto Rico\r\n564593986</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+1939 564593986</code></pre>\r\n<p><strong>Explanation:</strong> A call is made to the API to fetch the record for Puerto Rico. The returned <code>callingCodes = ['1787', '1939']</code>. Use the higher index code, <code>callingCodes[1]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>Oceania\r\n987574876</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>-1</code></pre>\r\n<p><strong>Explanation:</strong> The API call return has an empty data array.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>The returned JSON object contains either 0 or 1 record in data.</li>\r\n<li>The country name may contain uppercase and lowercase English letters and &lt;space&gt; (ascii 32).</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n\n// Note: The problem environment is expected to provide libraries for HTTP requests and JSON parsing.\n// You may need to include headers for libraries like libcurl and a JSON parser.\n\nclass Solution {\npublic:\n    /**\n     * @brief Formats a phone number with the appropriate country calling code by querying a REST API.\n     *\n     * @param country The country name to query.\n     * @param phoneNumber The phone number to format.\n     * @return std::string The formatted phone number or \"-1\" if the country is not found.\n     */\n    std::string getPhoneNumbers(const std::string& country, const std::string& phoneNumber) {\n        // Core logic to make the API call, parse the JSON response,\n        // and format the phone number goes here.\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string country;\n    std::getline(std::cin, country);\n\n    std::string phoneNumber;\n    std::cin >> phoneNumber;\n\n    Solution sol;\n    std::string result = sol.getPhoneNumbers(country, phoneNumber);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Boomi_13oct",
        "company_id": 632
    },
    {
        "id": 1795,
        "title": "URL Hashing",
        "problem_statement": "<h1>URL Hashing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement an algorithm to hash a URL using a specific method.</p>\r\n<p>Given a URL, a hash string, and an integer k:</p>\r\n<ol>\r\n    <li>Divide the URL into blocks of size k from left to right (the last block may be smaller)</li>\r\n    <li>Calculate the hash value for each block by summing the values of its characters (a=0, b=1, ..., z=25, /=26, .=27, -=28)</li>\r\n    <li>Replace each block with the character from the hash string at index (hash value modulo the length of hash_string)</li>\r\n</ol>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: url = \"https://xyz.com\", hash_string = \"pqrst\", k = 4\r\nOutput: psps</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>Block    Hash Value             Hash Character\r\nhttp     7 + 19 + 19 + 15 = 60  hash_string[60 % 5] = 0 = p\r\ns://     18 + 26 + 27 + 27 = 98 hash_string[98 % 5] = 3 = s\r\nxyz.     23 + 24 + 25 + 28 = 100 hash_string[100 % 5] = 0 = p\r\ncom      2 + 14 + 12 = 28       hash_string[28 % 5] = 3 = s</code></pre>\r\n<p>The hashed URL is \"psps\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: url = \"https://caayxdcdzwxwc.com\", hash_string = \"awpixaia\", k = 7\r\nOutput: iamp</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>Block     Hash Value                                 Hash Character\r\nhttps:/   7 + 19 + 19 + 15 + 18 + 26 + 27 = 131      hash_string[131 % 8] = 3 = i\r\n/caayxd   27 + 2 + 0 + 0 + 24 + 23 + 3 = 79          hash_string[79 % 8] = 7 = a\r\ncdzwxwc   23 + 22 + ... = 121                        hash_string[021 % 8] = 1 = w\r\n.com      2 + 14 + 12 = 58                           hash_string[58 % 8] = 2 = p</code></pre>\r\n<p>Note: There might be inconsistencies in the provided sample explanation values. The output `iamp` does not directly correspond to the derived characters `iawp` from the table.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: url = \"https://bet/addg/.com\", hash_string = \"gsuljpbokkkd\", k = 4\r\nOutput: gulgdg</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>Block    Hash Value             Hash Character\r\nhttp     7 + 19 + 19 + 15 = 60  hash_string[60 % 12] = 0 = g\r\ns://     18 + 26 + 27 + 27 = 98 hash_string[98 % 12] = 2 = u\r\nbet/     1 + 4 + 19 + 27 = 51   hash_string[51 % 12] = 3 = l\r\naddg     0 + 3 + 3 + 6 = 12     hash_string[12 % 12] = 0 = g\r\n/.co     27 + 28 + 2 + 14 = 71  hash_string[71 % 12] = 11 = d\r\nm        12                     hash_string[12 % 12] = 0 = g</code></pre>\r\n<p>Note: The blocks in the explanation table do not directly correspond to the provided `url` in the input for this example. However, the derived characters `gulgdg` match the sample output.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getHashedURL</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string url</code>: the input URL</li>\r\n    <li><code>string hash_string</code>: a hash string for mapping</li>\r\n    <li><code>int k</code>: the block sizes</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>string</code>: the hash string of the URL</li>\r\n</ul>\r\n<pre><code class='language-cpp'>string getHashedURL(string url, string hash_string, int k) {\r\n    // Complete the 'getHashedURL' function below.\r\n    // The function is expected to return a STRING.\r\n    // The function accepts following parameters:\r\n    //  1. STRING url\r\n    //  2. STRING hash_string\r\n    //  3. INTEGER k\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <numeric>\n\nclass Solution {\npublic:\n    /**\n     * @brief Implements an algorithm to hash a URL.\n     * \n     * @param url The input URL string.\n     * @param hash_string The hash string for mapping.\n     * @param k The block size.\n     * @return The hashed URL string.\n     */\n    std::string getHashedURL(std::string url, std::string hash_string, int k) {\n        // TODO: Implement the logic here.\n        // The function is expected to return a STRING.\n        // The function accepts following parameters:\n        // 1. STRING url\n        // 2. STRING hash_string\n        // 3. INTEGER k\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string url;\n    std::cin >> url;\n\n    std::string hash_string;\n    std::cin >> hash_string;\n\n    int k;\n    std::cin >> k;\n\n    Solution solution;\n    std::string result = solution.getHashedURL(url, hash_string, k);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Boomi_13oct",
        "company_id": 632
    }
]