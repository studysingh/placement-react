[
    {
        "id": 1845,
        "title": "Password Strength Evaluation",
        "problem_statement": "<h1>Password Strength Evaluation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amelia is working on a program that evaluates the strength of passwords based on specified criteria. She needs assistance in creating a program to automate this process.</p>\r\n<p>Evaluation is based on the length of the password:</p>\r\n<ul>\r\n    <li>If the length of the password is ≤ 3, classify it as <strong>Weak</strong>.</li>\r\n    <li>If the length is between 4 and 7 characters (both inclusive), classify it as <strong>Medium</strong>.</li>\r\n    <li>If the length is 8 characters or more, classify it as <strong>Strong</strong>.</li>\r\n</ul>\r\n<p>The program should:</p>\r\n<ul>\r\n    <li>Receive a password as input.</li>\r\n    <li>Write the entered password to a file named <code>password.txt</code>.</li>\r\n    <li>Read the stored password from <code>password.txt</code> to determine its strength based on the length criteria.</li>\r\n    <li>Write the evaluated password strength to a new file named <code>evaluation.txt</code> and display it.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: Sample@pass\r\nOutput: Strong</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: pass\r\nOutput: Medium</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: Av@\r\nOutput: Weak</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 ≤ length ≤ 15</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <fstream>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::string evaluatePasswordStrength(const std::string& password) {\n        // Core logic to determine password strength based on length will be implemented here.\n        return \"\"; // Placeholder\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string inputPassword;\n    std::cin >> inputPassword;\n\n    // Write the entered password to password.txt\n    std::ofstream pass_out(\"password.txt\");\n    pass_out << inputPassword;\n    pass_out.close();\n\n    // Read the stored password from password.txt\n    std::string storedPassword;\n    std::ifstream pass_in(\"password.txt\");\n    pass_in >> storedPassword;\n    pass_in.close();\n\n    Solution solution;\n    std::string result = solution.evaluatePasswordStrength(storedPassword);\n\n    // Write the evaluated strength to evaluation.txt\n    std::ofstream eval_out(\"evaluation.txt\");\n    eval_out << result;\n    eval_out.close();\n\n    // Display the result\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "virtusa_15oct",
        "company_id": 651
    },
    {
        "id": 1846,
        "title": "Seat Availability Checker",
        "problem_statement": "<h1>Seat Availability Checker</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a ticket reservation system, you store the available seat numbers in a TreeSet. Users input their desired seat number, and the program checks whether the chosen seat is available.</p>\r\n<p>Using a TreeSet ensures quick and efficient verification of seat availability, ensuring a smooth and organized ticket booking process.</p>\r\n<p><strong>Input format:</strong></p>\r\n<p>The first line of input contains a single integer <code>n</code>, representing the number of available seats.</p>\r\n<p>The second line contains <code>n</code> space-separated integers, representing the available seat numbers.</p>\r\n<p>The third line contains an integer <code>m</code>, representing the seat number that needs to be searched.</p>\r\n<p><strong>Output format:</strong></p>\r\n<p>The output displays \"<code>[m] is present!</code>\" if the given seat is available. Otherwise, it displays \"<code>[m] is not present!</code>\"</p>\r\n<p>Refer to the sample output for the formatting specifications.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n2 4 5 6\r\n5\r\nOutput:\r\n5 is present!</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n10\r\n2 4 6 8 5 9 7 1 2 10\r\n3\r\nOutput:\r\n3 is not present!</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10</code></li>\r\n    <li><code>1 &lt;= seat number &lt;= 10</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <set>\n\nclass Solution {\npublic:\n    std::string checkAvailability(const std::set<int>& availableSeats, int seatToSearch) {\n        // Core logic to be implemented here\n        if (availableSeats.count(seatToSearch)) {\n            return std::to_string(seatToSearch) + \" is present!\";\n        } else {\n            return std::to_string(seatToSearch) + \" is not present!\";\n        }\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::set<int> availableSeats;\n    for (int i = 0; i < n; ++i) {\n        int seat;\n        std::cin >> seat;\n        availableSeats.insert(seat);\n    }\n\n    int m;\n    std::cin >> m;\n\n    Solution solution;\n    std::string result = solution.checkAvailability(availableSeats, m);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "virtusa_15oct",
        "company_id": 651
    }
]