[
    {
        "id": 845,
        "title": "Domain Renewal Report",
        "problem_statement": "<h1>Domain Renewal Report</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In managing a domain hosting panel, tracking domain renewals is crucial for service continuity and customer satisfaction. A development team is creating a query to generate a report of all domains, including the current date, next renewal date, and days until renewal. This report helps domain owners plan their renewals, ensuring timely actions to maintain their online presence.</p>\r\n<p>The result should have the following columns:</p>\r\n<ul>\r\n    <li><strong>name</strong> - the name of the domain</li>\r\n    <li><strong>today_date</strong> - the current date, April 10, 2024, in the format YYYY-MM-DD</li>\r\n    <li><strong>next_renewal_date</strong> - the date when the domain is scheduled for its next renewal</li>\r\n    <li><strong>days_until_renewal</strong> - the number of full days from the current date until the domain's next renewal date</li>\r\n</ul>\r\n<p>The results should be sorted in ascending order by <code>days_until_renewal</code>, then in ascending order by <code>name</code>.</p>\r\n\r\n<h2>Note</h2>\r\n<ul>\r\n    <li>The current date is fixed as April 10, 2024.</li>\r\n</ul>\r\n\r\n<h2>Schema</h2>\r\n<p>The `domains` table is structured as follows:</p>\r\n<ul>\r\n    <li><code>name</code>: VARCHAR(255) - The name of the domain.</li>\r\n    <li><code>next_renewal_date</code>: VARCHAR(19) - The date when the domain is scheduled for its next renewal.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<p><code>domains</code> table:</p>\r\n<pre><code class='language-text'>+-------------+---------------------+\r\n| name        | next_renewal_date   |\r\n+-------------+---------------------+\r\n| wired.com   | 2024-06-14 00:10:12 |\r\n| blogger.com | 2024-07-18 05:54:57 |\r\n| com.com     | 2024-07-21 02:57:25 |\r\n+-------------+---------------------+</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+-------------+------------+-------------------+-------------------+\r\n| name        | today_date | next_renewal_date | days_until_renewal|\r\n+-------------+------------+-------------------+-------------------+\r\n| wired.com   | 2024-04-10 | 2024-06-14        | 65                |\r\n| blogger.com | 2024-04-10 | 2024-07-18        | 99                |\r\n| com.com     | 2024-04-10 | 2024-07-21        | 102               |\r\n+-------------+------------+-------------------+-------------------+</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe `today_date` is fixed as '2024-04-10'.\r\nFor 'wired.com', the difference between '2024-06-14' and '2024-04-10' is 65 days.\r\nFor 'blogger.com', the difference between '2024-07-18' and '2024-04-10' is 99 days.\r\nFor 'com.com', the difference between '2024-07-21' and '2024-04-10' is 102 days.\r\nThe results are sorted first by `days_until_renewal` (ascending), then by `name` (ascending).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>name</code> is a string with a maximum length of 255 characters.</li>\r\n    <li><code>next_renewal_date</code> is a string representing a date and time, with a maximum length of 19 characters (e.g., 'YYYY-MM-DD HH:MM:SS').</li>\r\n    <li>The current date for calculations is fixed as '2024-04-10'.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DocuSign_6april",
        "company_id": 259
    },
    {
        "id": 846,
        "title": "Minimum Vulnerability of Non-Adjacent Servers",
        "problem_statement": "<h1>Minimum Vulnerability of Non-Adjacent Servers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Hackerrank developers want to deploy an application on a set of exactly <code>k</code> servers with different vulnerabilities. They have an option to choose the <code>k</code> servers from a sequence of <code>n</code> servers where <code>vulnerability[i]</code> represents the vulnerability of the <code>i<sup>th</sup></code> server.</p>\r\n<p>The vulnerability of the chosen <code>k</code> servers is defined as the maximum vulnerability amongst any of the chosen servers. To avoid congestion, they would like to choose a subsequence of <code>k</code> servers such that no two adjacent servers are chosen as part of the <code>k</code> servers.</p>\r\n<p>Given an array <code>vulnerability</code> and an integer <code>k</code>, find the minimum possible vulnerability of the chosen servers such that the above condition is respected.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinVulnerability</code> in the editor below.</p>\r\n<p><code>getMinVulnerability</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int vulnerability[]</code>: An array of integers representing the vulnerability of each server.</li>\r\n    <li><code>int k</code>: The length of the subsequences to form.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: The minimum value returned by the max function for all valid subsequences.</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int getMinVulnerability(std::vector<int> vulnerability, int k);</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nk = 2\r\nvulnerability = [2, 4, 6, 8, 10]\r\n\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n = 5</code>, <code>k = 2</code> and <code>vulnerability = [2, 4, 6, 8, 10]</code>, only 3 subsequences of <code>k = 2</code> non-adjacent servers exists.</p>\r\n<p>The subsequences along with their max are:</p>\r\n<ul>\r\n    <li><code>[2, 6] = 6</code></li>\r\n    <li><code>[2, 8] = 8</code></li>\r\n    <li><code>[2, 10] = 10</code></li>\r\n    <li><code>[4, 8] = 8</code></li>\r\n    <li><code>[4, 10] = 10</code></li>\r\n    <li><code>[6, 10] = 10</code></li>\r\n</ul>\r\n<p>The minimum max is 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nk = 3\r\nvulnerability = [1, 2, 1, 2, 1]\r\n\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Only one subsequence of length 3 is possible: <code>[1, 1, 1]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= vulnerability[i] <= 10<sup>9</sup></code></li>\r\n    <li><code>1 <= k <= (n + 1) / 2</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DocuSign_6april",
        "company_id": 259
    },
    {
        "id": 847,
        "title": "Maximum Minimum Distance from Obstacle",
        "problem_statement": "<h1>Maximum Minimum Distance from Obstacle</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The city of Hackerland can be represented as a two-dimensional grid of size n x m. Each cell is either empty (a dot character '.'), has an obstacle (an asterisk '*'), an S, or an E that represent the start and end points, respectively.</p>\r\n<p>You can move in four directions: up, down, left, and right. Your goal is to find a path from the starting point to the ending point such that the minimum distance from any obstacle along the path is as large as possible. Return this maximum possible minimum distance.</p>\r\n<p>The distance between any two points on the grid with coordinates (r<sub>1</sub>, c<sub>1</sub>) and (r<sub>2</sub>, c<sub>2</sub>) is calculated as |r<sub>1</sub> - r<sub>2</sub>| + |c<sub>1</sub> - c<sub>2</sub>|, where |a| is the absolute value of integer a.</p>\r\n\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>One can visit a cell with an obstacle if necessary, i.e., no other path exists.</li>\r\n    <li>A cell can be visited only once.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider the following grid of size 4x4:</p>\r\n<pre><code class='language-text'>S . . *\r\n. . . .\r\n. * . .\r\n. . . E</code></pre>\r\n<p>The optimal path is shown in the 'Cell' column. The coordinates of any of the nearest obstacles are in 'Obstacle'.</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Cell</th>\r\n            <th>Nearest Obstacle</th>\r\n            <th>Distance</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>(0, 0)</td>\r\n            <td>(0, 3)*</td>\r\n            <td>3</td>\r\n        </tr>\r\n        <tr>\r\n            <td>(1, 0)</td>\r\n            <td>(1, 2)</td>\r\n            <td>2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>(2, 0)</td>\r\n            <td>(1, 2)</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>(3, 0)</td>\r\n            <td>(1, 2)</td>\r\n            <td>2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>(3, 1)</td>\r\n            <td>(1, 2)</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>(3, 2)</td>\r\n            <td>(1, 2)</td>\r\n            <td>2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>(3, 3)</td>\r\n            <td>(1, 2)</td>\r\n            <td>3</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>* The blocked cell (1, 2) is also 3 units distant.</p>\r\n<p>Return 2, the closest distance to any obstacle along the path.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findMaximumDistance</code> in the editor below with the following parameter:</p>\r\n<p><code>string grid[n]</code>: An array of strings that represent the rows of the grid.</p>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the largest possible minimum distance from an obstacle in any path from the starting point to the ending point</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= n, m <= 200</code></li>\r\n    <li><code>grid[i][j]</code> is <code>.</code> if the cell is empty.</li>\r\n    <li><code>grid[i][j]</code> is <code>*</code> if the cell has an obstacle.</li>\r\n    <li><code>grid[i][j]</code> is <code>S</code> if the cell is the starting point.</li>\r\n    <li><code>grid[i][j]</code> is <code>E</code> if the cell is the ending point.</li>\r\n    <li>There is only one starting and ending point.</li>\r\n    <li>There is at least one obstacle present.</li>\r\n</ul>\r\n\r\n<h2>Sample Input For Custom Testing</h2>\r\n<p>The first line contains an integer n, the number of rows in the grid.</p>\r\n<p>Each of the next n lines contains a string of length m that represents the rows of the grid.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>STDIN         FUNCTION\r\n5             grid[] number of rows n = 5\r\nS....\r\n.S...         grid = [\"S....\", \".S...\", \".**..\", \"...E.\", \"..E..\"]\r\n.**..\r\n...E.\r\n..E..</code></pre>\r\n<p><strong>Sample Output:</strong></p>\r\n<pre><code class='language-text'>2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>S . . *\r\n. . . .\r\n. * . .\r\n. . . E</code></pre>\r\n<p>Take the path (1,1)->(1,0)->(2,0)->(3,0)->(4,0)->(4,1)->(4,2). The minimum distance from an obstacle is shown in brackets.</p>\r\n<p>For comparison, a non-optimal path is (1,1)->(2,1)->(3,1)->(4,1)->(4,2) with a minimum distance from any obstacle of 1.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>STDIN         FUNCTION\r\n3             grid[] number of rows n = 3\r\n.S.\r\n.**\r\n.E.</code></pre>\r\n<p><strong>Sample Output:</strong></p>\r\n<pre><code class='language-text'>0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>S\r\n*\r\nE</code></pre>\r\n<p>It is not possible to reach the endpoint without visiting a cell with obstacles. Thus, the maximum possible minimum distance from any obstacle is 0.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DocuSign_6april",
        "company_id": 259
    },
    {
        "id": 848,
        "title": "Tax Calculation Mechanism",
        "problem_statement": "<h1>Tax Calculation Mechanism</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the world of finance, tax calculation is a fundamental operation. A development team is working on an online tax application designed to simplify tax calculations for users. One of the key features they aim to implement is a tax calculation mechanism. This mechanism will calculate a fixed 20% tax on the total income for each account in the system.</p>\r\n<p>The results should have the following columns: <code>iban | total_income | tax_rate | calculated_tax</code></p>\r\n<ul>\r\n    <li><strong>iban</strong> - the IBAN of the account</li>\r\n    <li><strong>total_income</strong> - the total income for the account, with two decimal places, including trailing zeros if necessary, e.g., 500.00</li>\r\n    <li><strong>tax_rate</strong> - the tax rate applied, which is a fixed text 20%</li>\r\n    <li><strong>calculated_tax</strong> - the tax calculated, rounded to two decimal places, including trailing zeros if necessary, e.g., 500.00</li>\r\n</ul>\r\n<p>The results should be sorted in ascending order by <code>iban</code>.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>Only income in 2023 should be included.</li>\r\n</ul>\r\n\r\n<h2>Schema</h2>\r\n<p>The database schema consists of two tables: <code>accounts</code> and <code>income</code>.</p>\r\n\r\n<h3>accounts</h3>\r\n<pre><code class='language-text'>+----------+---------------+-----------------+---------------------------------+\r\n| Name     | Type          | Constraints     | Description                     |\r\n+----------+---------------+-----------------+---------------------------------+\r\n| id       | INT           | PRIMARY KEY     | The identifier of the account   |\r\n| iban     | VARCHAR(255)  |                 | The IBAN of the account         |\r\n+----------+---------------+-----------------+---------------------------------+</code></pre>\r\n\r\n<h3>income</h3>\r\n<pre><code class='language-text'>+------------+---------------+-------------------------------------+--------------------------+\r\n| Name       | Type          | Constraints                         | Description              |\r\n+------------+---------------+-------------------------------------+--------------------------+\r\n| account_id | INT           | FOREIGN KEY(account_id => accounts.id) | The reference to the account |\r\n| dt         | VARCHAR(19)   |                                     | The date and time of income |\r\n| amount     | DECIMAL(6,2)  |                                     | The income amount        |\r\n+------------+---------------+-------------------------------------+--------------------------+</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<h4>accounts table:</h4>\r\n<pre><code class='language-text'>+----+--------------------------+\r\n| id | iban                     |\r\n+----+--------------------------+\r\n| 1  | FR55 4477 6154 73ND HMOU T36 |\r\n| 2  | DK46 1272 1831 2573 01 |\r\n| 3  | RS53 5237 5794 6016 5411 43 |\r\n+----+--------------------------+</code></pre>\r\n\r\n<h4>income table:</h4>\r\n<pre><code class='language-text'>+------------+---------------------+--------+\r\n| account_id | dt                  | amount |\r\n+------------+---------------------+--------+\r\n| 1          | 2022-12-31 10:03:42 | 2779.19|\r\n| 1          | 2023-02-04 08:50:14 | 1777.68|\r\n| 1          | 2023-02-13 04:22:07 | 1954.81|\r\n| 1          | 2023-03-04 14:46:04 | 1547.79|\r\n| 1          | 2023-05-23 15:42:13 | 1208.49|\r\n| 1          | 2023-05-24 23:24:07 | 1521.72|\r\n| 1          | 2023-07-28 11:01:46 | 1792.75|\r\n| 1          | 2023-12-07 14:19:09 | 2374.25|\r\n| 1          | 2024-01-27 05:55:36 | 2803.39|\r\n| 2          | 2022-12-03 18:04:34 | 1826.65|\r\n| 2          | 2023-02-17 00:59:57 | 3074.11|\r\n| 2          | 2023-03-01 08:17:15 | 1007.30|\r\n| 2          | 2023-08-19 09:16:41 | 4515.04|\r\n| 2          | 2024-01-08 04:14:22 | 3321.78|\r\n| 2          | 2024-01-10 15:16:28 | 2033.87|\r\n| 3          | 2023-05-09 07:28:27 | 3158.66|\r\n| 3          | 2023-05-22 04:39:34 | 3851.20|\r\n| 3          | 2023-07-21 19:51:14 | 4152.29|\r\n| 3          | 2023-10-05 05:42:49 | 4722.20|\r\n| 3          | 2023-11-11 02:42:59 | 1592.16|\r\n+------------+---------------------+--------+</code></pre>\r\n\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+--------------------------+--------------+----------+----------------+\r\n| iban                     | total_income | tax_rate | calculated_tax |\r\n+--------------------------+--------------+----------+----------------+\r\n| DK46 1272 1831 2573 01 | 8596.45      | 20%      | 1719.29        |\r\n| FR55 4477 6154 73ND HMOU T36 | 12177.49     | 20%      | 2435.50        |\r\n| RS53 5237 5794 6016 5411 43 | 17476.51     | 20%      | 3495.30        |\r\n+--------------------------+--------------+----------+----------------+</code></pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n<p>For each account, the <code>total_income</code> is calculated by summing all <code>amount</code> values from the <code>income</code> table where the <code>dt</code> (date and time) falls within the year 2023. The <code>tax_rate</code> is a fixed \"20%\". The <code>calculated_tax</code> is 20% of the <code>total_income</code>, rounded to two decimal places.</p>\r\n<ul>\r\n    <li><strong>For IBAN 'DK46 1272 1831 2573 01' (account_id = 2):</strong>\r\n        <ul>\r\n            <li>2023 income entries: 3074.11 (Feb), 1007.30 (Mar), 4515.04 (Aug)</li>\r\n            <li><strong>total_income</strong> = 3074.11 + 1007.30 + 4515.04 = 8596.45</li>\r\n            <li><strong>calculated_tax</strong> = 8596.45 * 0.20 = 1719.29</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>For IBAN 'FR55 4477 6154 73ND HMOU T36' (account_id = 1):</strong>\r\n        <ul>\r\n            <li>2023 income entries: 1777.68 (Feb), 1954.81 (Feb), 1547.79 (Mar), 1208.49 (May), 1521.72 (May), 1792.75 (Jul), 2374.25 (Dec)</li>\r\n            <li><strong>total_income</strong> = 1777.68 + 1954.81 + 1547.79 + 1208.49 + 1521.72 + 1792.75 + 2374.25 = 12177.49</li>\r\n            <li><strong>calculated_tax</strong> = 12177.49 * 0.20 = 2435.498, rounded to 2435.50</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>For IBAN 'RS53 5237 5794 6016 5411 43' (account_id = 3):</strong>\r\n        <ul>\r\n            <li>2023 income entries: 3158.66 (May), 3851.20 (May), 4152.29 (Jul), 4722.20 (Oct), 1592.16 (Nov)</li>\r\n            <li><strong>total_income</strong> = 3158.66 + 3851.20 + 4152.29 + 4722.20 + 1592.16 = 17476.51</li>\r\n            <li><strong>calculated_tax</strong> = 17476.51 * 0.20 = 3495.302, rounded to 3495.30</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The final output is sorted by <code>iban</code> in ascending order.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DocuSign_6april",
        "company_id": 259
    },
    {
        "id": 849,
        "title": "Get Shifted String",
        "problem_statement": "<h1>Get Shifted String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The following operations on a string are defined:</p>\r\n<ul>\r\n    <li><strong>Left Shift:</strong> A single circular rotation of the string where the first character moves to the end and all other characters shift one position to the left. For example, <code>abcde</code> becomes <code>bcdea</code> after one left shift and <code>cdeab</code> after two left shifts.</li>\r\n    <li><strong>Right Shift:</strong> A single circular rotation of the string where the last character moves to the beginning and all other characters shift one position to the right. For example, <code>abcde</code> becomes <code>eabcd</code> after one right shift and <code>deabc</code> after two right shifts.</li>\r\n</ul>\r\n<p>Complete the function <code>getShiftedString</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string s</code>: the string to shift</li>\r\n    <li><code>int leftShifts</code>: number of shifts left</li>\r\n    <li><code>int rightShifts</code>: number of shifts right</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>string</code>: a string shifted left or right</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = 'abcdefg', leftShifts = 2, rightShifts = 4\r\nOutput: fgabcde</code></pre>\r\n<p><strong>Explanation:</strong> The string <code>abcdefg</code> shifted left by 2 positions is <code>cdefgab</code>. The string <code>cdefgab</code> shifted right by 4 positions is <code>fgabcde</code>, the string to return.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"abcd\", leftShifts = 1, rightShifts = 2\r\nOutput: dabc</code></pre>\r\n<p><strong>Explanation:</strong> The string <code>\"abcd\"</code> shifted left by 1 position is <code>\"bcda\"</code>. The string <code>\"bcda\"</code> shifted right by 2 positions is <code>\"dabc\"</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= length of s <= 10^5</code></li>\r\n    <li><code>0 <= leftShifts, rightShifts <= 10^9</code></li>\r\n    <li>String <code>s</code> consists of lowercase English alphabetic letters only, <code>ascii[a-z]</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DocuSign_6april",
        "company_id": 259
    }
]