[
    {
        "id": 1461,
        "title": "Perfect Subarrays",
        "problem_statement": "<h1>Perfect Subarrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An array is called <strong>perfect</strong> if it can be sorted in ascending order by selecting any element from the array and adding a negative sign in front of it. This operation can be performed any number of times.</p>\r\n<p>For example: <code>[3,1,2,4]</code> can be turned sorted if we add a negative sign in front of 3, i.e., <code>[-3,1,2,4]</code>.</p>\r\n<p>You will be given an array <code>seq</code> of <code>n</code> integers with distinct entries ranging from <code>[1, n]</code> (inclusive). You have to find the number of subarrays in <code>seq</code> that are perfect.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Input:</strong></p>\r\n<p>First line of input contains integer <code>n</code> representing the number of elements in the array.</p>\r\n<p>Second line of input contains a list of <code>n</code> space separated integers, <code>seq</code>, representing the array.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p><strong>Output:</strong></p>\r\n<p>Output an integer representing the number of subarrays in <code>seq</code> that are perfect.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2 3 1\r\nOutput:\r\n5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Consider the array <code>seq = [2, 3, 1]</code>.</p>\r\n<p><strong>Contiguous Subarrays:</strong></p>\r\n<ul>\r\n    <li>\r\n        <p>Subarray: <code>[2]</code></p>\r\n        <p>The single-element subarray is already sorted. Perfect count: 1</p>\r\n    </li>\r\n    <li>\r\n        <p>Subarray: <code>[3]</code></p>\r\n        <p>The single-element subarray is already sorted. Perfect count: 2</p>\r\n    </li>\r\n    <li>\r\n        <p>Subarray: <code>[1]</code></p>\r\n        <p>The single-element subarray is already sorted. Perfect count: 3</p>\r\n    </li>\r\n    <li>\r\n        <p>Subarray: <code>[2, 3]</code></p>\r\n        <p>It is already sorted in ascending order. Perfect count so far: 4</p>\r\n    </li>\r\n    <li>\r\n        <p>Subarray: <code>[3, 1]</code></p>\r\n        <p>Consider the subarray <code>[3, 1]</code>. Negating 3 gives <code>[-3, 1]</code> which is sorted in ascending order, hence the subarray <code>[3, 1]</code> is perfect. Perfect count: 5</p>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n4 2 1 3\r\nOutput:\r\n10</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Consider the array <code>seq = [4, 2, 1, 3]</code>.</p>\r\n<p><strong>Contiguous Subarrays:</strong></p>\r\n<ul>\r\n    <li>\r\n        <p><strong>Single-element Subarrays:</strong></p>\r\n        <ul>\r\n            <li><code>[4]</code> - perfect.</li>\r\n            <li><code>[2]</code> - perfect.</li>\r\n            <li><code>[1]</code> - perfect.</li>\r\n            <li><code>[3]</code> - perfect.</li>\r\n        </ul>\r\n        <p>Perfect count so far: 4</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>Two-element Subarrays:</strong></p>\r\n        <ul>\r\n            <li>\r\n                <p><code>[4, 2]</code></p>\r\n                <p>Negating 4 gives <code>[-4, 2]</code>, which is sorted in ascending order. Thus, <code>[4, 2]</code> is perfect.</p>\r\n            </li>\r\n            <li>\r\n                <p><code>[2, 1]</code></p>\r\n                <p>Negating 2 gives <code>[-2, 1]</code>, which is sorted in ascending order. Thus, <code>[2, 1]</code> is perfect.</p>\r\n            </li>\r\n            <li>\r\n                <p><code>[1, 3]</code></p>\r\n                <p>This is already sorted. Thus, <code>[1, 3]</code> is perfect.</p>\r\n            </li>\r\n        </ul>\r\n        <p>Perfect count so far: 4+3=7</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>Three-element Subarrays:</strong></p>\r\n        <ul>\r\n            <li>\r\n                <p><code>[4, 2, 1]</code></p>\r\n                <p>Negating 4 and 2 gives <code>[-4, -2, 1]</code>, which is sorted in ascending order. Thus <code>[4, 2, 1]</code> is perfect.</p>\r\n            </li>\r\n            <li>\r\n                <p><code>[2, 1, 3]</code></p>\r\n                <p>Negating 2 gives <code>[-2, 1, 3]</code>, which is sorted in ascending order. Thus, <code>[2, 1, 3]</code> is perfect.</p>\r\n            </li>\r\n        </ul>\r\n        <p>Perfect count so far: 7+2=9</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>The whole array:</strong></p>\r\n        <ul>\r\n            <li>\r\n                <p><code>[4, 2, 1, 3]</code></p>\r\n                <p>Negating 4 and 2 gives <code>[-4, -2, 1, 3]</code> which is perfect.</p>\r\n            </li>\r\n        </ul>\r\n        <p>Total count = 7+2+1=10</p>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 30</code></li>\r\n    <li><code>seq</code> contains distinct integers in the range <code>[1, n]</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    },
    {
        "id": 1462,
        "title": "Minimum Total Awkwardness",
        "problem_statement": "<h1>Minimum Total Awkwardness</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Shreyas is getting married in the beautiful town of Mehendi Hills. His family has invited N guests, who are waiting in a line at the Royal Orchid Hotel (guest 1 at the front, guest N at the end). They need to travel to the Crystal Lotus Hall for the wedding ceremony.</p>\r\n<p>The family has K buses. Each bus makes one trip in order:</p>\r\n<ol>\r\n    <li>Bus 1 takes the first <code>q1</code> guests in line.</li>\r\n    <li>Bus 2 takes the next <code>q2</code> guests waiting.</li>\r\n    <li>This continues until Bus K takes the last <code>qK</code> guests.</li>\r\n</ol>\r\n<p>Now, not all guests are equally familiar with each other. For any two guests <code>i</code> and <code>j</code>, there is an awkwardness score <code>u_ij</code> (and <code>u_ji = u_ij</code>) which shows how uncomfortable it is for them to sit in the same bus. Note that <code>u_ii = 0</code>.</p>\r\n<p>When a group of guests travels together in a bus, the awkwardness of that bus is the total sum of <code>u_ij</code> for every pair of guests riding in that bus. The total awkwardness is the sum of awkwardness scores across all K buses.</p>\r\n<p>Your goal is to choose how many guests go in each bus - <code>q1, q2, ..., qK</code> - so that the total awkwardness is as small as possible.</p>\r\n<p>Print the minimum possible total awkwardness and help make the journey peaceful and pleasant for everyone!</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>First line contains 2 integers - <code>N</code> and <code>K</code> - the number of guests and the number of buses.</p>\r\n<p>Next <code>N</code> lines contains <code>N</code> space separated integers each - <code>u_11, u_12, ..., u_NN</code>, the symmetric awkwardness matrix.</p>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>Print a single integer - the minimum total awkwardness for transporting all the guests using the K buses.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5 2\r\n0 0 1 1 1\r\n0 0 1 1 1\r\n1 1 0 0 0\r\n1 1 0 0 0\r\n1 1 0 0 0\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Bus 1 carries guests (1,2). Awkwardness = <code>u_12</code> = 0.</p>\r\n<p>Bus 2 carries guests (3,4,5). Awkwardness = <code>u_34 + u_35 + u_45</code> = 0.</p>\r\n<p>Total awkwardness = 0.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 8 3\r\n0 1 1 1 1 1 1 1\r\n1 0 1 1 1 1 1 1\r\n1 1 0 1 1 1 1 1\r\n1 1 1 0 1 1 1 1\r\n1 1 1 1 0 1 1 1\r\n1 1 1 1 1 0 1 1\r\n1 1 1 1 1 1 0 1\r\n1 1 1 1 1 1 1 0\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>One optimal grouping is: (1,2,3), (4,5,6), (7,8)</p>\r\n<ul>\r\n    <li>Group 1: 3 pairs x 1 awkwardness = 3</li>\r\n    <li>Group 2: 3 pairs x 1 awkwardness = 3</li>\r\n    <li>Group 3: 1 pair x 1 awkwardness = 1</li>\r\n</ul>\r\n<p>Total = 3 + 3 + 1 = 7</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 4000</code></li>\r\n    <li><code>1 &lt;= K &lt;= min(N, 800)</code></li>\r\n    <li><code>0 &lt;= u_ij &lt;= 9</code></li>\r\n    <li>The matrix is symmetric.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    },
    {
        "id": 1463,
        "title": "Minimize Transformer Connection Cost",
        "problem_statement": "<h1>Minimize Transformer Connection Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the peaceful village of Jaspur, homes are built neatly along a single long road, and the government is launching a major project to electrify the village. There are N houses in total, numbered consecutively from 1 to N, and each house has a certain power demand - the amount of electricity it needs daily.</p>\r\n<p>To distribute electricity efficiently, the government will install exactly K electric transformers, each capable of powering nearby houses. However, a transformer can only be installed on the site of an existing house, and each house must connect to the nearest transformer available.</p>\r\n<p>The connection between a house and its nearest transformer requires laying underground electric cables. The cost of laying the cable for a house is calculated as:</p>\r\n<p><code>(distance to nearest transformer) * (power demand of the house)</code></p>\r\n<p>The distance between house i and house j is <code>|i - j|</code> - since all houses lie in a straight line.</p>\r\n<p>The government wants to minimize the total cost so that every house is connected to some transformer and the power demands are met. Your task is to compute this minimum possible total cost so that every house is connected to some transformer and the power demands are met.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line contains two space separated integers N and K representing the number of houses and the number of transformers.</p>\r\n<p>Next line contains N space separated integers - P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>N</sub> where p<sub>i</sub> is the power demand of the i-th house.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer representing the minimum total cost of wiring all the houses.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= K &lt; N &lt;= 3 * 10^3</code></li>\r\n    <li><code>1 &lt;= p_i &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7 3\r\n5 2 1 6 3 4 1\r\nOutput:\r\n7</code></pre>\r\n<p><strong>Explanation:</strong> Best placement: Place transformers at house 1, house 4, and house 6</p>\r\n<ul>\r\n    <li>House 1 -> transformer -> 0</li>\r\n    <li>House 2 -> nearest is house 1 -> |2-1| * 2 = 1 * 2 = 2</li>\r\n    <li>House 3 -> nearest is house 4 -> |3-4| * 1 = 1 * 1 = 1</li>\r\n    <li>House 4 -> transformer -> 0</li>\r\n    <li>House 5 -> nearest is house 4 -> |5-4| * 3 = 1 * 3 = 3</li>\r\n    <li>House 6 -> transformer -> 0</li>\r\n    <li>House 7 -> nearest is house 6 -> |7-6| * 1 = 1 * 1 = 1</li>\r\n</ul>\r\n<p>Total distance = 0 + 2 + 1 + 0 + 3 + 0 + 1 = 7</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 2\r\n2 7 1 4 6 4\r\nOutput:\r\n11</code></pre>\r\n<p><strong>Explanation:</strong> Best placement: Place transformers at house 2 and house 5</p>\r\n<ul>\r\n    <li>House 1 -> nearest is house 2 -> |1-2| * 2 = 1 * 2 = 2</li>\r\n    <li>House 2 -> transformer -> 0</li>\r\n    <li>House 3 -> nearest is house 2 -> |3-2| * 1 = 1 * 1 = 1</li>\r\n    <li>House 4 -> nearest is house 5 -> |4-5| * 4 = 1 * 4 = 4</li>\r\n    <li>House 5 -> transformer -> 0</li>\r\n    <li>House 6 -> nearest is house 5 -> |6-5| * 4 = 1 * 4 = 4</li>\r\n</ul>\r\n<p>Total distance = 2 + 0 + 1 + 4 + 0 + 4 = 11</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    },
    {
        "id": 1464,
        "title": "Connected Islands After Replacement",
        "problem_statement": "<h1>Connected Islands After Replacement</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a grid with N rows and M columns consisting of '.' (representing water) and '#' (representing islands) characters.</p>\r\n<p>You can move to the next island if it is located at (x-1, y), (x+1, y), (x, y-1), or (x, y+1). The size of a connected island is the number of cells in the set.</p>\r\n<p>In one operation, you can select any row R or any column C and set every cell in that row R or column C to be '#'.</p>\r\n<p>Determine the size of the connected component of islands that can be formed after replacing each row or column with islands.</p>\r\n<p>Print the results for rows top to bottom in the first line, and for columns from left to right in the second line.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two integers R and C, the number of rows and columns in the grid, respectively.</p>\r\n<p>The next R lines contain the grid's rows, each consisting of C characters which is '.' or '#'.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print R integers in the first line, each representing the size of the connected component after replacing each corresponding row with '#'.</p>\r\n<p>Print C integers in the second line, each representing the size of the connected component after replacing each corresponding column with '#'.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 2\r\n.#\r\n##\r\n.#\r\nOutput:\r\n4 3\r\n3 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Row replacement:</strong></p>\r\n<p>When Row 1 is replaced with '#':</p>\r\n<pre><code class='language-text'>##\r\n##\r\n.#</code></pre>\r\n<p>The connected island size is 4.</p>\r\n<p>When Row 2 is replaced with '#':</p>\r\n<pre><code class='language-text'>.#\r\n##\r\n.#</code></pre>\r\n<p>The connected island size is 3.</p>\r\n<p>When Row 3 is replaced with '#':</p>\r\n<pre><code class='language-text'>.#\r\n##\r\n##</code></pre>\r\n<p>The connected island size is 3.</p>\r\n<p><strong>Column replacement:</strong></p>\r\n<p>When Column 1 is replaced with '#':</p>\r\n<pre><code class='language-text'>##\r\n##\r\n##</code></pre>\r\n<p>The connected island size is 3.</p>\r\n<p>When Column 2 is replaced with '#':</p>\r\n<pre><code class='language-text'>.#\r\n##\r\n.#</code></pre>\r\n<p>The connected island size is 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n.#.\r\n##.\r\n.##\r\nOutput:\r\n7 6 5\r\n7 6 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Row replacement:</strong></p>\r\n<p>When Row 1 is replaced with '#':</p>\r\n<pre><code class='language-text'>###\r\n##.\r\n.##</code></pre>\r\n<p>The connected island size is 7.</p>\r\n<p>When Row 2 is replaced with '#':</p>\r\n<pre><code class='language-text'>.#.\r\n###\r\n.##</code></pre>\r\n<p>The connected island size is 6.</p>\r\n<p>When Row 3 is replaced with '#':</p>\r\n<pre><code class='language-text'>.#.\r\n##.\r\n###</code></pre>\r\n<p>The connected island size is 5.</p>\r\n<p><strong>Column replacement:</strong></p>\r\n<p>When Column 1 is replaced with '#':</p>\r\n<pre><code class='language-text'>##.\r\n###\r\n###</code></pre>\r\n<p>The connected island size is 7.</p>\r\n<p>When Column 2 is replaced with '#':</p>\r\n<pre><code class='language-text'>.#.\r\n##.\r\n.##</code></pre>\r\n<p>The connected island size is 6.</p>\r\n<p>When Column 3 is replaced with '#':</p>\r\n<pre><code class='language-text'>.#.\r\n##.\r\n.##</code></pre>\r\n<p>The connected island size is 5.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= R, C &lt;= 10^3</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    },
    {
        "id": 1465,
        "title": "Student Pairing",
        "problem_statement": "<h1>Student Pairing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are tasked with organising a college event where you must pair off students for various activities. You have a list of 2N students, each with some skill levels. Your goal is to pair these students such that all students can participate in an activity following a specific set of rules.</p>\r\n<p>Initially, you select a positive integer y. Then, you must follow this procedure N times: select two students whose combined skill levels equal y, pair them together, and then update y to the higher skill level of the two students you just paired. Your task is to determine whether you can pair all the students in the following manner or not. Note that you choose y at the beginning and cannot change it between pairings.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>The first line of each test case contains an integer N.</p>\r\n<p>The second line of each test case contains 2N integers S1, S2, ..., S2N – the skill levels of the students.</p>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>Print \"YES\" if it is possible to pair all students following the rules, and \"NO\" otherwise.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n1 1 2 4\r\nOutput:\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong> In the given input, it is impossible to pair all students such that their combined skill levels equal a consistent integer y because after pairing (1, 4) to reach y=5, the remaining students (1, 2) cannot form a valid pair that sums to the updated y=4. Therefore, the output is \"NO\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n3 5 1 2\r\nOutput:\r\nYES</code></pre>\r\n<p><strong>Explanation:</strong> If you start with the list of skill levels [3, 5, 1, 2], you could choose y=6. Then, you pair the second and third students, whose combined skill levels 5+1 equal 6. After pairing them, y becomes 5, and you are left with the skill levels [3, 2]. You then pair these remaining students, as their combined skill levels 3+2 equal 5. Since both pairs successfully matched the required sum, the output is \"YES\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= Si &lt;= 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    },
    {
        "id": 1466,
        "title": "Consistent Friend Lists",
        "problem_statement": "```html\r\n<h1>Consistent Friend Lists</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a social media app, each user has a list of N friends, but each user sees themselves at the top of their own list. The rest of the list is ordered based on a secret algorithm. If there are N friends, the secret order is a permutation of [1, 2, ..., N].</p>\r\n<p>For example, if the secret order is [2, 3, 1, 4], the friend lists would be:</p>\r\n<ol>\r\n    <li>Friend 1 sees [1, 2, 3, 4]</li>\r\n    <li>Friend 2 sees [2, 3, 1, 4]</li>\r\n    <li>Friend 3 sees [3, 2, 1, 4]</li>\r\n    <li>Friend 4 sees [4, 2, 3, 1]</li>\r\n</ol>\r\n<p>Given k screenshots of friend lists, your task is to determine if there exists a single secret order that could generate all the provided lists.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two integers n and k — the number of friends and the number of screenshots.</p>\r\n<p>The next k lines each contain n integers representing the friend list as seen by the friend at the top of that list.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print \"Yes\" if there exists at least one secret order that could produce all k screenshots. Otherwise, print \"No\".</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5 1\r\n1 2 3 4 5\r\nOutput: Yes</code></pre>\r\n<p><strong>Explanation:</strong> We have only one screenshot, showing the order [1, 2, 3, 4, 5].</p>\r\n<ol>\r\n    <li>This screenshot is from friend 1's perspective, as they see themselves first.</li>\r\n    <li>A possible secret order that produces this screenshot is [1, 2, 3, 4, 5].</li>\r\n    <li>Since we have only one screenshot and it's consistent with a possible order, the answer is Yes.</li>\r\n</ol>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 4 4\r\n1 2 3 4\r\n2 3 1 4\r\n3 2 1 4\r\n4 2 3 1\r\nOutput: Yes</code></pre>\r\n<p><strong>Explanation:</strong> The secret order [2, 3, 1, 4] can generate all the given friend lists:</p>\r\n<ol>\r\n    <li>For Friend 1: [1, 2, 3, 4] aligns with the secret order when Friend 1 is placed at the top.</li>\r\n    <li>For Friend 2: [2, 3, 1, 4] is exactly the secret order.</li>\r\n    <li>For Friend 3: [3, 2, 1, 4] aligns with the secret order when Friend 3 is placed at the top.</li>\r\n    <li>For Friend 4: [4, 2, 3, 1] aligns with the secret order when Friend 4 is placed at the top.</li>\r\n</ol>\r\n<p>Since one secret order can generate all the friend lists, the answer is Yes.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N, K &lt;= 2*10^5</code></li>\r\n    <li><code>1 &lt;= N*K &lt;= 2*10^5</code></li>\r\n    <li><code>1 &lt;= a[i][j] &lt;= N</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    },
    {
        "id": 1467,
        "title": "Count Strings with Specific Longest Common Subsequence Length",
        "problem_statement": "<h1>Count Strings with Specific Longest Common Subsequence Length</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string <code>S</code> consisting of lowercase English letters with length <code>N</code>, along with an integer <code>M</code>. For each integer <code>k</code> ranging from <code>0</code> to <code>N</code> (inclusive), compute the following:</p>\r\n<p>Consider all possible strings <code>T</code> of length <code>M</code> formed from lowercase English letters (there are exactly 26<sup>M</sup> such strings). Among these, determine the number of strings <code>T</code> where the length of the longest common subsequence (LCS) between <code>S</code> and <code>T</code> is exactly <code>k</code>. Output this count modulo 998244353.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n    <li>The first line contains a single integer <code>N</code> denoting the length of string <code>S</code>.</li>\r\n    <li>The second line contains a single integer <code>M</code> denoting the integer.</li>\r\n    <li>The third line contains the string <code>S</code> of length <code>N</code>.</li>\r\n</ul>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>Print <code>N+1</code> integers (<code>ans_0, ans_1, ..., ans_N</code>), separated by spaces, in ascending order of <code>k</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n4\r\naaa\r\nOutput:\r\n390625 62500 3750 101</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Since <code>S=\"aaa\"</code>, LCS length = <code>min(3, number of 'a's in T of length 4)</code>.</p>\r\n<ul>\r\n    <li>Total strings: 26<sup>4</sup> = 456976.</li>\r\n    <li><code>k=0</code>: 390625 strings with 0 'a's (e.g., \"bcdb\", all non-'a').</li>\r\n    <li><code>k=1</code>: 62500 strings with exactly 1 'a' (e.g., \"abcd\").</li>\r\n    <li><code>k=2</code>: 3750 strings with exactly 2 'a's (e.g., \"aabc\").</li>\r\n    <li><code>k=3</code>: 101 strings with 3 or 4 'a's (e.g., \"aaab\", \"aaaa\").</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2\r\nab\r\nOutput:\r\n576 99 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>k=0</code>: 576 length-2 strings (e.g., \"cd\", \"re\", \"zz\") have LCS length 0 with \"ab\".</li>\r\n    <li><code>k=1</code>: 99 length-2 strings (e.g., \"ac\", \"wa\", \"ba\") have LCS length exactly 1 with \"ab\".</li>\r\n    <li><code>k=2</code>: 1 length-2 string (\"ab\") has LCS length 2 with \"ab\".</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 1000</code></li>\r\n    <li><code>1 &le; M &le; 1000</code></li>\r\n    <li>Both <code>N</code> and <code>M</code> are positive integers.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    },
    {
        "id": 1468,
        "title": "Least Toffee Variety",
        "problem_statement": "<h1>Least Toffee Variety</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Lena loves toffees, and every day, her mother gives her one. She's collected M toffees in a row, each from one of M different types. Now, Lena will eat at least K consecutive toffees to enjoy. The fewer her toffees in that group, the happier she'll be.</p>\r\n<p>Can you help Lena find the group of toffees with the least variety so she can be as happy as possible?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer N, M, and K, respectively, where N is the number of toffees, M is the number of different types of toffees, and K is the least number of consecutive toffees Lena wants to enjoy.</p>\r\n<p>The second line contains N integers, t[1] (1 &le; t[i] &le; M), where t[i] represents the type of the i-th toffee.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer, which is the minimum number of different types of toffees Lena gets to eat.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10^5</code></li>\r\n    <li><code>1 &le; M &le; 10^6</code></li>\r\n    <li><code>1 &le; K &le; N</code></li>\r\n    <li><code>1 &le; t[i] &le; M</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 4 2\r\n4 1 1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the possible groups Lena can choose are (4, 1), (1, 1). The variety of toffees in each group is 2, 2, and 1, respectively. To maximize Lena's happiness, she would choose the group with a variety of 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 4 3\r\n4 1 1 2\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the possible groups Lena can choose are (4, 1, 1), (1, 1, 2). The variety of toffees in these groups is 2, 2, and 2, respectively. To maximize her happiness, Lena would choose one of the groups with a variety of 2.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    },
    {
        "id": 1469,
        "title": "Maximum Sum of Three Non-Overlapping Subarrays",
        "problem_statement": "<h1>Maximum Sum of Three Non-Overlapping Subarrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working on an analytics application that helps businesses monitor performance over time. In this case, the application analyzes the sales data of different products over several months. The sales data is provided in the form of an integer array <code>nums</code>, where each element represents the sales of a product for a specific month.</p>\r\n<p>Your task is to find three non-overlapping subarrays of length <code>k</code> that have the maximum total sum, and return their starting indices. Since businesses want to optimize sales strategies, they are interested in identifying the time periods (subarrays) with the highest sales.</p>\r\n<p>To solve this problem efficiently, you must consider the following:</p>\r\n<ul>\r\n    <li>Three subarrays: The subarrays must not overlap. Each subarray should be exactly of length <code>k</code>.</li>\r\n    <li>Maximum sum: The total sum of the three subarrays should be maximized.</li>\r\n    <li>Lexicographical order: If multiple solutions with the same sum exist, return the one with the lexicographically smallest set of starting indices.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line contains 2 space-separated integers <code>N</code> and <code>k</code>. <code>N</code> represents the size of the <code>nums</code> array and <code>k</code> represents the integer <code>k</code>.</p>\r\n<p>Second line contains <code>N</code> space-separated integers as entries of <code>nums</code> array.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the required list of starting indices in a single line, space-separated.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= nums.length <= 2 * 10^4</code></li>\r\n    <li><code>1 <= k <= floor(nums.length / 3)</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n9 2\r\n1 2 1 2 1 2 1 1 1\r\nOutput:\r\n0 2 4</code></pre>\r\n<p><strong>Explanation:</strong> It can be proven that the sequence of starting indices 0, 2, 4 is the final answer, yielding the maximum sum.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n8 2\r\n1 2 1 2 6 7 5 1\r\nOutput:\r\n0 3 5</code></pre>\r\n<p><strong>Explanation:</strong> The subarrays starting at indices 0, 3, and 5 are <code>nums[0..1] = [1,2]</code>, <code>nums[3..4] = [2,6]</code>, and <code>nums[5..6] = [7,5]</code> respectively. Their sums are 3, 8, and 12, totaling 23. This is the maximum possible sum. According to the problem statement, if multiple solutions yield the same maximum sum, the one with the lexicographically smallest set of starting indices should be returned.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_20sep",
        "company_id": 513
    }
]