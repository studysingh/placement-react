[
    {
        "id": 191,
        "title": "Trip Planner",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Trip Planner</h2>\n        <div class=\\\"score\\\">Max score: 50.00</div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are planning a bus journey across a network of towns. There are n towns connected by several bus routes. You are given an array routes where routes[i] = [startTown, endTown, fare] indicates that there is a bus route from town startTown to town endTown with a ticket fare of fare.</p>\n        \n        <p>You want to travel from your hometown to visit a friend in another town. The problem is, you want to keep your expenses as low as possible. However, you don\\'t mind making a few stops along the way to save some money. Additionally, you don\\'t want your journey to be too tedious, so you limit the number of stops you can make to a maximum of maxStops.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>First line contains 5 space-separated integers:</p>\n        <ul>\n            <li>Number of towns (n)</li>\n            <li>Source town</li>\n            <li>Destination town</li>\n            <li>Maximum stops allowed</li>\n            <li>Number of routes</li>\n        </ul>\n        <p>Following lines contain the bus routes, each with 3 space-separated integers:</p>\n        <ul>\n            <li>startTown endTown fare</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer representing the minimum fare required to reach the destination within the maximum allowed stops. If no such route exists, print -1.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Time Limit: 2.0 sec(s) for each input file</li>\n            <li>Memory Limit: 256 MB</li>\n            <li>Source Limit: 1024 KB</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Sample Input 1:</h4>\n            <pre class=\\\"input\\\">3 0 2 1 2\n0 1 100\n1 2 100</pre>\n            <pre class=\\\"output\\\">200</pre>\n            <div class=\\\"explanation\\\">\n                <p>Route: 0 -> 1 -> 2</p>\n                <p>Fare: 100 + 100 = 200</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Input 2:</h4>\n            <pre class=\\\"input\\\">4 0 3 2 4\n0 1 100\n1 2 100\n2 3 100\n0 2 500</pre>\n            <pre class=\\\"output\\\">300</pre>\n            <div class=\\\"explanation\\\">\n                <p>Route: 0 -> 1 -> 2 -> 3</p>\n                <p>Fare: 100 + 100 + 100 = 300</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"allowed-languages\\\">\n        <h3>Allowed Languages</h3>\n        <p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, R(RScript), Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Jl7Wlguol4tRAOMkUfZWKY3uGmEQAa5Esv_bgD5lz0I/edit?usp=sharing",
        "solution_code": "#include <cstdio>\\n#include <vector>\\n#include <climits>\\n\\nint main() {\\n    int n, s, d, k, m;\\n    scanf(\\\"%d %d %d %d %d\\\", &n, &s, &d, &k, &m);\\n    \\n    struct Edge {\\n        int u, v, f;\\n    };\\n    \\n    std::vector<Edge> e(m);\\n\\n    for (int i = 0; i < m; ++i) {\\n        int u, v, f;\\n        scanf(\\\"%d %d %d\\\", &u, &v, &f);\\n        e[i] = {u, v, f};\\n    }\\n\\n    std::vector<int> dt(n, INT_MAX);\\n    dt[s] = 0;\\n\\n    for (int i = 0; i <= k; ++i) {\\n        std::vector<int> t(dt);\\n        for (const auto& x : e) {\\n            if (dt[x.u] != INT_MAX && dt[x.u] + x.f < t[x.v]) {\\n                t[x.v] = dt[x.u] + x.f;\\n            }\\n        }\\n        dt = t;\\n    }\\n\\n    printf(\\\"%d\\\\n\\\", dt[d] == INT_MAX ? -1 : dt[d]);\\n    return 0;\\n}",
        "company_name": "MakeMyTrip",
        "company_id": 46
    },
    {
        "id": 192,
        "title": "Flight Series Counter",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Flight Series Counter</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You know that a series of flights has n segments, with each segment having a fuel percentage between 1 and m. The absolute difference in fuel percentage between two adjacent segments is at most 1.</p>\n        \n        <p>Given a description of the flight series where some fuel percentages may be unknown, your task is to count the number of valid flight series that match the description.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first input line has two integers n and m: the number of flight segments and the upper bound for the fuel percentage in each segment.</li>\n            <li>The next line has n integers f_1, f_2, ..., f_n: the fuel percentages of the segments. Value 0 denotes an unknown fuel percentage.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print one integer: the number of valid flight series modulo 10^9+7</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10^5</li>\n            <li>1 ≤ m ≤ 1000</li>\n            <li>0 ≤ f_i ≤ m</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3 5\n2 0 2</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>There are 3 valid flight series:</p>\n                <ul>\n                    <li>[2,1,2]</li>\n                    <li>[2,2,2]</li>\n                    <li>[2,3,2]</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\\\"limits\\\">\n        <h3>Limits</h3>\n        <ul>\n            <li>Time Limit: 2.0 sec(s) for each input file</li>\n            <li>Memory Limit: 512 MB</li>\n            <li>Source Limit: 1024 KB</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1xBumcPqBgfHYfpae9GM0cmT2PDmwiBHQ_FczRLky5D8/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    int findCheapestRoute(int n, vector<vector<int>>& routes, int src, int dest, int k) {\\n        // Create adjacency list\\n        vector<vector<pair<int,int>>> adj(n);\\n        for (auto& route : routes) {\\n            int from = route[0];\\n            int to = route[1];\\n            int fare = route[2];\\n            adj[from].push_back({to, fare});\\n        }\\n        \\n        // Distance array to track minimum cost\\n        vector<int> dist(n, INT_MAX);\\n        dist[src] = 0;\\n        \\n        // Queue to do BFS: {current_cost, remaining_stops, current_node}\\n        queue<vector<int>> q;\\n        q.push({0, k + 1, src});  // k+1 to allow k intermediate stops\\n        \\n        while (!q.empty()) {\\n            int curr_cost = q.front()[0];\\n            int curr_stops = q.front()[1];\\n            int curr_node = q.front()[2];\\n            q.pop();\\n            \\n            // No more stops allowed\\n            if (curr_stops == 0) continue;\\n            \\n            // Explore neighbors\\n            for (auto& neighbor : adj[curr_node]) {\\n                int next_node = neighbor.first;\\n                int edge_fare = neighbor.second;\\n                int total_cost = curr_cost + edge_fare;\\n                \\n                // Update if cheaper route found\\n                if (total_cost < dist[next_node]) {\\n                    dist[next_node] = total_cost;\\n                    q.push({total_cost, curr_stops - 1, next_node});\\n                }\\n            }\\n        }\\n        \\n        // Return result\\n        return dist[dest] == INT_MAX ? -1 : dist[dest];\\n    }\\n};\\n\\nint main() {\\n    int n, src, dest, k, m;\\n    cin >> n >> src >> dest >> k >> m;\\n    \\n    vector<vector<int>> routes(m, vector<int>(3));\\n    for (int i = 0; i < m; i++) {\\n        cin >> routes[i][0] >> routes[i][1] >> routes[i][2];\\n    }\\n    \\n    Solution solution;\\n    cout << solution.findCheapestRoute(n, routes, src, dest, k) << endl;\\n    \\n    return 0;\\n}",
        "company_name": "MakeMyTrip",
        "company_id": 46
    }
]