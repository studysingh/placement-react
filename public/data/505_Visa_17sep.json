[
    {
        "id": 1432,
        "title": "Dice Rolling Competition",
        "problem_statement": "<h1>Dice Rolling Competition</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Since you love games of chance, you've decided to participate in a dice-rolling competition. The competition involves rolling three 6-sided dice, and the results of each die are represented by the integers <code>a</code>, <code>b</code>, and <code>c</code> respectively. Scores are calculated according to the following rules:</p>\r\n<ul>\r\n    <li>If all three dice had the same value (<code>a = b = c</code>), you earn <code>1000 * a</code>.</li>\r\n    <li>If exactly two of them are the same, you earn <code>500 * x</code> (where <code>x</code> is the value of the two equal dice).</li>\r\n    <li>If all of them are different, you earn <code>100 * min(a, b, c)</code>.</li>\r\n</ul>\r\n<p>Given the values of <code>a</code>, <code>b</code>, and <code>c</code>, your task is to calculate and return your total score.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = 3, b = 3, c = 3\r\nOutput: 3000</code></pre>\r\n<p><strong>Explanation:</strong> Since all of the dice have the same value (3), your total score is equal to 1000 * 3 = 3000.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: a = 3, b = 6, c = 3\r\nOutput: 1500</code></pre>\r\n<p><strong>Explanation:</strong> Since exactly two of the values are the same (a = c = 3), your total score is equal to 500 * 3 = 1500.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: a = 3, b = 2, c = 5\r\nOutput: 200</code></pre>\r\n<p><strong>Explanation:</strong> Since all of these values are different, your total score is equal to 100 * min(a, b, c) = 100 * 2 = 200.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>a</code>: An integer representing the value of the first die.</li>\r\n    <li><code>b</code>: An integer representing the value of the second die.</li>\r\n    <li><code>c</code>: An integer representing the value of the third die.</li>\r\n    <li><code>1 <= a <= 6</code></li>\r\n    <li><code>1 <= b <= 6</code></li>\r\n    <li><code>1 <= c <= 6</code></li>\r\n</ul>\r\n<p><strong>Execution Time Limit:</strong> 0.5 seconds (C++)</p>\r\n<p><strong>Memory Limit:</strong> 1 GB</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1433,
        "title": "Count Divisible Substrings",
        "problem_statement": "<h1>Count Divisible Substrings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine you're part of a team analyzing fictional alien technology logs. You have a string, <code>alienCode</code>, which represents activity codes from their devices. Your task is to examine this string and count how many substrings of this code represent numbers evenly divisible by 3. It's important to note that none of these substrings should start with zero unless the substring is the character \"0\" itself.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(alienCode.lengthÂ³) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: alienCode = \"456\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Consider all substrings of the given string:</p>\r\n<ul>\r\n    <li><code>alienCode[0..0] = 4</code> isn't divisible by 3.</li>\r\n    <li><code>alienCode[1..1] = 5</code> isn't divisible by 3.</li>\r\n    <li><code>alienCode[2..2] = 6</code> is divisible by 3.</li>\r\n    <li><code>alienCode[0..1] = 45</code> is divisible by 3.</li>\r\n    <li><code>alienCode[1..2] = 56</code> isn't divisible by 3.</li>\r\n    <li><code>alienCode[0..2] = 456</code> is divisible by 3.</li>\r\n</ul>\r\n<p>There are 3 substrings that meet the conditions, so the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: alienCode = \"6666\"\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> All substrings are divisible by 3 and have no leading zeros, so the answer is equal to the number of possible substrings, which is 10.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: alienCode = \"303\"\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>alienCode[0..0] = 3</code> is divisible by 3.</li>\r\n    <li><code>alienCode[1..1] = 0</code> is divisible by 3.</li>\r\n    <li><code>alienCode[2..2] = 3</code> is divisible by 3.</li>\r\n    <li><code>alienCode[0..1] = 30</code> is divisible by 3.</li>\r\n    <li><code>alienCode[1..2] = 03</code> is divisible by 3, but it has leading zeroes, so we don't count it.</li>\r\n    <li><code>alienCode[0..2] = 303</code> is divisible by 3.</li>\r\n</ul>\r\n<p>There are 5 substrings that meet the conditions, so the answer is 5.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1434,
        "title": "Labyrinth Navigation",
        "problem_statement": "<h1>Labyrinth Navigation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine that you're exploring a mysterious labyrinth in the shape of a rectangular matrix, which contains obstacles and teleports. Starting from the upper-left corner, your goal is to reach the lower-right corner by first moving to the right, and then moving down if that doesn't work.</p>\r\n<p>You are given integers <code>n</code> and <code>m</code> representing the dimensions of the labyrinth. You are also given <code>obstacles</code> and <code>teleports</code>, which are lists of the cells that contain all the obstacles and teleports, respectively.</p>\r\n<p>Details about the labyrinth:</p>\r\n<ul>\r\n    <li>An <strong>obstacle</strong> cannot be traversed - if there's an obstacle in the cell to your right, try moving down. If there are obstacles in the cells to the right and below, stop immediately.</li>\r\n    <li>A <strong>teleport</strong> is a pair of cells (<code>start</code>, <code>end</code>). If you reach the <code>start</code> cell, you immediately move to the <code>end</code> cell.\r\n        <ul>\r\n            <li>Note that this doesn't work backwards: you cannot teleport from the <code>end</code> cell to the <code>start</code> cell.</li>\r\n            <li>It is guaranteed that all teleports have unique <code>start</code> cells (i.e. each cell in the labyrinth has one teleport at most).</li>\r\n            <li>It is guaranteed that the <code>end</code> cell for a teleport cannot be a <code>start</code> cell for another teleport.</li>\r\n            <li>It is also guaranteed that both the <code>start</code> and <code>end</code> cells of a teleport do not contain obstacles.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Any cell that doesn't contain an obstacle or a teleport is considered a free cell, and you can walk through it normally.</li>\r\n</ul>\r\n<p>You start at the upper-left corner cell with coordinates <code>(0, 0)</code>, and the goal is to reach the exit located at the cell with coordinates <code>(n - 1, m - 1)</code>. You move according to the following rules:</p>\r\n<ul>\r\n    <li>First, you will always try moving to the right: if you're currently on the cell with coordinates <code>(row, col)</code> you will try moving to the cell with coordinates <code>(row, col + 1)</code>.\r\n        <ul>\r\n            <li>If the destination cell <code>(row, col + 1)</code> is the starting point of a teleport, proceed to the coordinates of the end cell.</li>\r\n            <li>If the destination cell <code>(row, col + 1)</code> either contains an obstacle or is outside the bounds of the labyrinth, try moving down to the cell <code>(row + 1, col)</code>.\r\n                <ul>\r\n                    <li>If the destination cell <code>(row + 1, col)</code> is the starting point of a teleport, proceed to coordinates of the end cell.</li>\r\n                    <li>If the destination cell <code>(row + 1, col)</code> either contains an obstacle or is outside the bounds of the labyrinth, stop moving and stay where you are.</li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Your task is to check whether you can reach the goal (exit of the labyrinth) by following the algorithm above, and to return the total number of cells you travelled through to reach the exit. Note that you should count all cells travelled, including the starting cell <code>(0, 0)</code> and both the <code>start</code> and <code>end</code> cells of all teleports. If it is not possible to reach the exit, return <code>-1</code> if it's because of an obstacle or due to trying to go outside the bounds of the labyrinth, or <code>-2</code> if it's because of teleportation (i.e., an infinite teleport loop).</p>\r\n<p>It's guaranteed that the starting cell <code>(0, 0)</code> and the goal cell <code>(n - 1, m - 1)</code> do not contain an obstacle, or be the starting point of a teleport.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(n * m * (obstacles.length + teleports.length))</code> will fit within the execution time limit.</p>\r\n\r\n<pre><code class='language-javascript'>int solution(int n, int m, vector<vector<int>> obstacles, vector<vector<int>> teleports) {\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, m = 3, obstacles = [[2, 1]], teleports = [[0, 1, 2, 0]]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> You are unable to reach the exit because of an obstacle.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, m = 4, obstacles = [[2, 0], [1, 0]], teleports = [[0, 1, 1, 1], [1, 2, 0, 2], [0, 3, 2, 0]]\r\nOutput: -2</code></pre>\r\n<p><strong>Explanation:</strong> You are unable to reach the exit because of an infinite teleport loop.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 3, m = 4, obstacles = [[2, 0], [1, 0]], teleports = [[0, 1, 2, 2], [0, 3, 2, 1]]\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> By moving to the right and following teleports, you will eventually reach the exit cell <code>(2, 3)</code> while moving through 9 cells.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: n = 2, m = 4, obstacles = [[0, 2]], teleports = [[1, 1, 2, 3]]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The path leads to the goal <code>(1, 3)</code> in 6 steps.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1435,
        "title": "Max Length Subarray Sum Difference",
        "problem_statement": "<h1>Max Length Subarray Sum Difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>To optimize storage allocation for a data processing system, you need to analyze the sizes of data segments to maintain efficient usage.</p>\r\n<p>You are given an array of non-negative integers <code>dataSizes</code>, where each element represents the size of a data segment. Additionally, you are provided with a non-negative integer <code>threshold</code>.</p>\r\n<p>Your task is to find the maximum length of a contiguous subarray such that the difference between the sum of the subarray and the sum of the elements before this subarray (note that this difference is not taken in absolute terms, meaning it can be positive or negative) is less than or equal to <code>threshold</code>.</p>\r\n<p>In simpler terms, you need to identify the longest interval within <code>dataSizes</code> for which the condition: <code>sum(interval) - sum(prefix before interval) &lt;= threshold</code> is satisfied.</p>\r\n<p>Return an integer representing the maximum length of such a subarray. If no such subarray exists, return 0.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dataSizes = [1, 2, 3, 4], threshold = 5\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For subarray <code>[1]</code> and prefix subarray <code>[]</code> the difference is <code>1 - 0 = 1 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[2]</code> and prefix subarray <code>[1]</code> the difference is <code>2 - 1 = 1 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[3]</code> and prefix subarray <code>[1, 2]</code> the difference is <code>3 - (1 + 2) = 0 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[4]</code> and prefix subarray <code>[1, 2, 3]</code> the difference is <code>4 - (1 + 2 + 3) = -2 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[1, 2]</code> and prefix subarray <code>[]</code> the difference is <code>(1 + 2) - 0 = 3 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[2, 3]</code> and prefix subarray <code>[1]</code> the difference is <code>(2 + 3) - 1 = 4 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[3, 4]</code> and prefix subarray <code>[1, 2]</code> the difference is <code>(3 + 4) - (1 + 2) = 4 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[1, 2, 3]</code> and prefix subarray <code>[]</code> the difference is <code>(1 + 2 + 3) - 0 = 6 &gt; 5</code>.</li>\r\n    <li>For subarray <code>[2, 3, 4]</code> and prefix subarray <code>[1]</code> the difference is <code>(2 + 3 + 4) - 1 = 8 &gt; 5</code>.</li>\r\n    <li>For subarray <code>[1, 2, 3, 4]</code> and prefix subarray <code>[]</code> the difference is <code>(1 + 2 + 3 + 4) - 0 = 10 &gt; 5</code>.</li>\r\n</ul>\r\n<p>The longest subarrays with acceptable differences are <code>[1, 2]</code>, <code>[2, 3]</code> and <code>[3, 4]</code>, all of length 2. So the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: dataSizes = [8, 5, 6, 1, 4, 1, 9], threshold = 5\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The contiguous subarray <code>[6, 1, 4, 1]</code> has a sum of 12 and the prefix subarray <code>[8, 5]</code> has a sum of 13. The difference is <code>12 - 13 = -1</code>, which is within the threshold.</p>\r\n<p>Another contiguous subarray of length 4, <code>[1, 4, 1, 9]</code>, also yields an acceptable difference. Its sum is 15. The prefix subarray <code>[8, 5, 6]</code> has a sum of 19. The difference is <code>15 - 19 = -4</code>.</p>\r\n<p>Therefore, the answer is 4.</p>\r\n\r\n<pre><code class='language-cpp'>int solution(vector&lt;int&gt; dataSizes, int threshold) {\r\n    // Function implementation goes here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1436,
        "title": "Elements Greater Than Neighbors",
        "problem_statement": "<h1>Elements Greater Than Neighbors</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of integers <code>target</code>, return an array <code>result</code> consisting of all elements <code>target[i]</code> that are greater than both of their neighbors, i.e. that are <code>target[i] > max(target[i-1], target[i+1])</code>.</p>\r\n<p>Note that <code>target[0]</code> and <code>target[target.length - 1]</code>, which are the first and the last elements, are included by default, because they do not have two neighbors.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(target.length^2)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: target = [1, 3, 1, 3, 2]\r\nOutput: solution(target) = [1, 3, 3, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>target[0]</code> is included in the <code>result</code> by default, because it doesn't have two neighbors. <code>result = [1]</code></li>\r\n    <li><code>target[1] = 3 > max(target[0]=1, target[2]=1)</code>, so it is included in the <code>result</code>. <code>result = [1, 3]</code></li>\r\n    <li><code>target[2] = 1 > max(target[1]=3, target[3]=3)</code>, so it is not included in the <code>result</code>. <code>result = [1, 3]</code></li>\r\n    <li><code>target[3] = 3 > max(target[2]=1, target[4]=2)</code>, so it is included in the <code>result</code>. <code>result = [1, 3, 3]</code></li>\r\n    <li><code>target[4]</code> is included in the <code>result</code> by default, because it doesn't have two neighbors. <code>result = [1, 3, 3, 2]</code></li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: target = [1, 3, 3]\r\nOutput: solution(target) = [1, 3]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>target[0]</code> is included in the <code>result</code> by default, because it doesn't have two neighbors. <code>result = [1]</code></li>\r\n    <li><code>target[1] = 3 > max(target[0]=1, target[2]=3)</code>, so it is not included in the <code>result</code>. <code>result = [1]</code></li>\r\n    <li><code>target[2]</code> is included in the <code>result</code> by default, because it doesn't have two neighbors. <code>result = [1, 3]</code></li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: target = [1, 2, 1]\r\nOutput: solution(target) = [1, 2, 1]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>target[0]</code> is included in the <code>result</code> by default, because it doesn't have two neighbors. <code>result = [1]</code></li>\r\n    <li><code>target[1] = 2 > max(target[0]=1, target[2]=1)</code>, so it is included in the <code>result</code>. <code>result = [1, 2]</code></li>\r\n    <li><code>target[2]</code> is included in the <code>result</code> by default, because it doesn't have two neighbors. <code>result = [1, 2, 1]</code></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>A solution with time complexity not worse than <code>O(target.length^2)</code> will fit within the execution time limit.</li>\r\n</ul>\r\n\r\n<h2>Input/Output</h2>\r\n<p>The function signature provided is:</p>\r\n<pre><code class='language-cpp'>vector&lt;int&gt; solution(vector&lt;int&gt; target) {\r\n    // ...\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1437,
        "title": "No Higher Tide Moments",
        "problem_statement": "<h1>No Higher Tide Moments</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are part of the MOSE system in Venice, a critical defense mechanism designed to protect the city from devastating high tides. Your role is to monitor incoming tide data and determine how many moments have no higher tide in the future. With this information, the system can anticipate stability and avoid unnecessary barrier activations.</p>\r\n<p>You are given an array of integers <code>tide_levels</code> representing tide levels at regular intervals. Your task is to count how many tide readings do not have any future reading with a higher tide. Return a single integer: the number of such moments.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(tide_levels.length<sup>2</sup>) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: tide_levels = [130, 140, 120, 150, 110, 160]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Only the last tide reading <code>160</code> has no higher tide after it.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: tide_levels = [100, 160, 150, 130, 140]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The readings <code>160</code>, <code>150</code>, and <code>140</code> have no higher tide after them.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: tide_levels = [200, 190, 180, 170, 160]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> There is no higher tide reading after any of the readings, so all of them are counted.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li><strong>Input:</strong> array, integer <code>tide_levels</code>\r\n        <ul>\r\n            <li>An array of tide level readings.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Guaranteed constraints:\r\n        <ul>\r\n            <li><code>1 &lt;= tide_levels.length &lt;= 5 * 10^3</code></li>\r\n            <li><code>0 &lt;= tide_levels[i] &lt;= 10^6</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> integer\r\n        <ul>\r\n            <li>The number of tide readings that do not have any future reading with a higher tide.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1438,
        "title": "Y-Pattern Transformation",
        "problem_statement": "<h1>Y-Pattern Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are a molecular biologist working in a research laboratory that studies protein folding patterns. You have a square matrix representing a microscopic view of a protein structure, where each cell contains one of three possible molecular states: <strong>0</strong> (inactive), <strong>1</strong> (partially active), or <strong>2</strong> (fully active).</p>\r\n<p>Your research has identified a specific molecular pattern that indicates optimal protein stability - a \"Y-shaped\" molecular pathway. This pattern consists of two diagonal molecular chains extending from the upper corners down to the center, plus a vertical chain extending downward from the center.</p>\r\n<p>Your task is to determine the minimum number of molecular state changes required to transform the current protein matrix into one that exhibits this stable Y-pattern.</p>\r\n<p>The Y-pattern is achieved when:</p>\r\n<ul>\r\n    <li>all molecular states along the diagonals from the upper-left and upper-right corners down to the center are identical;</li>\r\n    <li>all molecular states along the vertical path from the center downward are identical to the diagonal states;</li>\r\n    <li>all other molecular states (the background) are identical to each other but different from the Y-pattern states.</li>\r\n</ul>\r\n<p>Note: For a square matrix of size <code>n x n</code> (where <code>n</code> is odd), there are exactly 6 possible Y-pattern configurations. The Y-pattern states and background states can be any combination of the three molecular states (0, 1, 2) as long as they are different from each other.</p>\r\n<p>Below, you can see an example of the Y-pattern for a <code>5 x 5</code> matrix (red cells represent the Y-pattern states, white cells represent background states):</p>\r\n<pre><code class='language-text'>n = 5\r\n+---+---+---+---+---+\r\n| R | W | W | W | R |\r\n+---+---+---+---+---+\r\n| W | R | W | R | W |\r\n+---+---+---+---+---+\r\n| W | W | R | W | W |\r\n+---+---+---+---+---+\r\n| W | W | R | W | W |\r\n+---+---+---+---+---+\r\n| W | W | R | W | W |\r\n+---+---+---+---+---+\r\n(R = Y-pattern state, W = Background state)</code></pre>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(n^2)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: proteinMatrix = [[1, 0, 2], [1, 2, 0], [0, 2, 0]]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The optimal transformation is to change the <strong>1</strong> in the <strong>0th</strong> row to <strong>2</strong> and the <strong>1</strong> in the <strong>1st</strong> row to <strong>0</strong>. <strong>2</strong>s form the Y-pattern molecular pathway and <strong>0</strong>s form the background. The final matrix is shown below:</p>\r\n<pre><code class='language-text'>proteinMatrix = [\r\n  [2, 0, 2],\r\n  [0, 2, 0],\r\n  [0, 2, 0]\r\n]</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: proteinMatrix = [[2, 0, 0, 0, 2], [1, 2, 1, 2, 0], [0, 1, 2, 1, 0], [0, 0, 2, 1, 1], [1, 1, 2, 1, 1]]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> The <strong>2</strong>s here form the Y-pattern molecular pathway. The optimal solution is to change all of the <strong>0</strong>s (total of 8) to <strong>1</strong>s to create a uniform background. The final matrix is shown below:</p>\r\n<pre><code class='language-text'>proteinMatrix = [\r\n  [2, 1, 1, 1, 2],\r\n  [1, 2, 1, 2, 1],\r\n  [1, 1, 2, 1, 1],\r\n  [1, 1, 2, 1, 1],\r\n  [1, 1, 2, 1, 1]\r\n]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>proteinMatrix</code> is an <code>n x n</code> square matrix of integers.</li>\r\n    <li><code>n</code> is odd.</li>\r\n    <li><code>0 <= proteinMatrix[i][j] <= 2</code> for all <code>i, j</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1439,
        "title": "Number of 2x2 Submatrices with Black Cells",
        "problem_statement": "<h1>Number of 2x2 Submatrices with Black Cells</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For a grid of black and white cells with <code>rows</code> rows and <code>cols</code> columns, you're given an array <code>black</code> that contains the <code>[row, column]</code> coordinates of all the black cells in the grid.</p>\r\n<p>Your task is to compute how many <code>2 x 2</code> submatrices of the grid contain exactly <code>blackCount</code> black cells, for each <code>0 <= blackCount < 4</code>. As a result, you will return an array of <code>5</code> integers, where the <code>i</code>th element is the number of <code>2 x 2</code> submatrices with exactly <code>i</code> black cells.</p>\r\n<p>It is guaranteed that black cell coordinates are pairwise unique, so the same cell is not colored twice.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: rows = 3, cols = 3, black = [[0, 0], [0, 1], [1, 0]]\r\nOutput: [1, 2, 0, 1, 0]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Let's visualize the 3x3 grid with the given black cells:</p>\r\n<pre><code class='language-text'>B B W\r\nB W W\r\nW W W</code></pre>\r\n<p>Where 'B' denotes a black cell and 'W' denotes a white cell.</p>\r\n<p>We need to count the number of 2x2 submatrices with 0, 1, 2, 3, or 4 black cells. The possible upper-left corners for a 2x2 submatrix in a 3x3 grid are (0,0), (0,1), (1,0), and (1,1).</p>\r\n<p>Initially, <code>result = [0, 0, 0, 0, 0]</code>.</p>\r\n<ul>\r\n    <li>The <code>2 x 2</code> submatrix with the upper-left corner at <code>(0, 0)</code> consists of cells (0,0), (0,1), (1,0), (1,1). It contains 3 black cells: (0,0), (0,1), (1,0).\r\n        <br><code>result</code> becomes <code>[0, 0, 0, 1, 0]</code>.</li>\r\n    <li>The <code>2 x 2</code> submatrix with the upper-left corner at <code>(0, 1)</code> consists of cells (0,1), (0,2), (1,1), (1,2). It contains 1 black cell: (0,1).\r\n        <br><code>result</code> becomes <code>[0, 1, 0, 1, 0]</code>.</li>\r\n    <li>The <code>2 x 2</code> submatrix with the upper-left corner at <code>(1, 0)</code> consists of cells (1,0), (1,1), (2,0), (2,1). It contains 1 black cell: (1,0).\r\n        <br><code>result</code> becomes <code>[0, 2, 0, 1, 0]</code>.</li>\r\n    <li>The <code>2 x 2</code> submatrix with the upper-left corner at <code>(1, 1)</code> consists of cells (1,1), (1,2), (2,1), (2,2). It contains 0 black cells.\r\n        <br><code>result</code> becomes <code>[1, 2, 0, 1, 0]</code>.</li>\r\n</ul>\r\n<p>The final <code>result</code> array is <code>[1, 2, 0, 1, 0]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> integer <code>rows</code>\r\n        <ul>\r\n            <li>An integer representing the number of rows in the grid.</li>\r\n            <li><code>2 <= rows < 10^5</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> integer <code>cols</code>\r\n        <ul>\r\n            <li>An integer representing the number of columns in the grid.</li>\r\n            <li><code>2 <= cols < 10^5</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> array.array.integer <code>black</code>\r\n        <ul>\r\n            <li>An array of black cells. Each black cell is represented as a 2-element array <code>[row, column]</code>.</li>\r\n            <li>Black cells are guaranteed to be all unique.</li>\r\n            <li><code>0 <= black.length <= 500</code></li>\r\n            <li><code>black[i].length = 2</code></li>\r\n            <li><code>0 <= black[i][0] < rows</code></li>\r\n            <li><code>0 <= black[i][1] < cols</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> array.integer64\r\n        <ul>\r\n            <li>An array of 5 integers, where the <code>i</code>th element is the number of <code>2 x 2</code> submatrices in the grid with <code>i</code> black cells.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1442,
        "title": "Words with Matching Start and End Characters",
        "problem_statement": "<h1>Words with Matching Start and End Characters</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine you are developing a tool for authors that helps them analyze their writing patterns to enhance consistency. One feature of this tool involves examining the structure of words within a text.</p>\r\n<p>You are given a string <code>text</code> that represents a sequence of words consisting of English letters (both uppercase and lowercase) separated by spaces.</p>\r\n<p>Your task is to find all words in the string that start and end with the same letter, considering that the letter may appear in different cases (e.g., a word may start with an \"a\" and end with an \"A\"). Return the number of such words as an integer.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(text.length) will fit within the execution time limit.</p>\r\n<p>The problem expects you to implement the following function:</p>\r\n<pre><code class='language-cpp'>int solution(string text) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: text = \"Level dEmaND nonE\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The words \"Level\" and \"dEmaND\" start and end with the same letter (case insensitive). \"nonE\" does not. Therefore, the result is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: text = \"\"\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The input string is empty, meaning there are no words to analyze, so the answer is 0.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: text = \"b bb aaa\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The words \"b\", \"bb\", and \"aaa\" start and end with the same letter (case insensitive).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &le; text.length &le; 1000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1443,
        "title": "Smallest String After Reversals",
        "problem_statement": "<h1>Smallest String After Reversals</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string <code>word</code>, you can reverse the order of some characters from the beginning or from the end of <code>word</code> to get new strings.</p>\r\n<p>Reversing the first <code>k</code> characters of a string <code>|w_0 ... w_{k-1}| w_k ... w_{n-1}</code> (i.e., within <code>|...|</code>) produces <code>|w_{k-1} ... w_0| w_k ... w_{n-1}</code>.</p>\r\n<p>Reversing the last <code>k</code> characters of a string <code>w_0 ... w_{n-k-1} |w_{n-k} ... w_{n-1}|</code> (i.e., within <code>|...|</code>) produces <code>w_0 ... w_{n-k-1} |w_{n-1} ... w_{n-k}|</code>.</p>\r\n<p>Your task is to iterate over all possible new strings that can be formed this way, and return the alphabetically smallest one.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(word.lengthÂ²) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: word = \"dbaca\"\r\nOutput: \"abdca\"</code></pre>\r\n<p><strong>Explanation:</strong> Let's consider all possible reverse operations:</p>\r\n<ul>\r\n    <li>Reversing the first 1 character results in the following: \"dbaca\".</li>\r\n    <li>Reversing the first 2 characters results in the following: \"bdaca\".</li>\r\n    <li>Reversing the first 3 characters results in the following: \"abdca\".</li>\r\n    <li>Reversing the first 4 characters results in the following: \"cabda\".</li>\r\n    <li>Reversing the first 5 characters results in the following: \"acabd\".</li>\r\n    <li>Reversing the last 1 character results in the following: \"dbaca\".</li>\r\n    <li>Reversing the last 2 characters results in the following: \"dbaac\".</li>\r\n    <li>Reversing the last 3 characters results in the following: \"dbaca\".</li>\r\n    <li>Reversing the last 4 characters results in the following: \"dacab\".</li>\r\n    <li>Reversing the last 5 characters results in the following: \"acabd\".</li>\r\n</ul>\r\n<p>Among these, the alphabetically smallest string is \"abdca\", which should be the final output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li><code>word</code> consists of lowercase English letters.</li>\r\n    <li><code>1 <= word.length <= 100</code></li>\r\n</ul>\r\n<p><strong>Output:</strong> A string representing the alphabetically smallest string possible after using one of the operations described above.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1444,
        "title": "Moisture Smoothing",
        "problem_statement": "<h1>Moisture Smoothing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are an agricultural scientist working on precision farming technology. You are given a two-dimensional matrix of integers <code>moistureGrid</code> representing soil moisture levels across a field. <code>moistureGrid[i][j]</code> contains an integer from 0 to 255 to represent the moisture level of a soil cell at coordinate <code>(i, j)</code>. You are also given a non-negative integer parameter <code>smoothingRadius</code>. Your task is to apply a moisture smoothing effect to this field data.</p>\r\n\r\n<p>To apply a moisture smoothing effect to the field, replace the moisture level of each soil cell <code>(i, j)</code> with a new value. This new value is derived from the cell's original moisture level <code>moistureGrid[i][j]</code> and the mean moisture level of its neighboring cells.</p>\r\n\r\n<p>A soil cell <code>(k, l)</code> is considered a <strong>neighbor</strong> of <code>(i, j)</code> if it is within the field boundaries, <code>(k, l) != (i, j)</code>, and it satisfies the conditions:</p>\r\n<ul>\r\n    <li><code>abs(i - k) &lt;= smoothingRadius</code></li>\r\n    <li><code>abs(j - l) &lt;= smoothingRadius</code></li>\r\n</ul>\r\n\r\n<p>The mean moisture level is defined as <code>mean(values) = sum(values) // values.length</code> where <code>//</code> is an integer division operator. The integer division operator <code>//</code> is equivalent to taking an integer part of a real division: <code>a // b = int(a / b)</code>.</p>\r\n\r\n<p>The formula for replacing the moisture level of each soil cell <code>(i, j)</code> is as follows:</p>\r\n<ol>\r\n    <li>First, identify all valid neighbor cells <code>(k, l)</code> for <code>(i, j)</code> according to the definition above.</li>\r\n    <li>Collect the moisture values of these valid neighbors. Let this be <code>neighbor_values</code>.</li>\r\n    <li>If <code>neighbor_values</code> is empty (i.e., the cell <code>(i, j)</code> has no neighbors), then its moisture level should not change after smoothing: <code>updated_moisture[i][j] = moistureGrid[i][j]</code>.</li>\r\n    <li>Otherwise (if <code>neighbor_values</code> is not empty):\r\n        <ol type=\"a\">\r\n            <li>Calculate <code>mean_of_neighbors = sum(neighbor_values) // count(neighbor_values)</code>.</li>\r\n            <li>Then, the updated moisture level is: <code>updated_moisture[i][j] = (moistureGrid[i][j] + mean_of_neighbors) // 2</code>.</li>\r\n        </ol>\r\n    </li>\r\n</ol>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: moistureGrid = [[9, 6], [3, 0]], smoothingRadius = 1\r\nOutput: [[6, 5], [4, 3]]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For <code>moistureGrid[0][0] = 9</code>:\r\n        <ul>\r\n            <li>Neighbors (within <code>smoothingRadius=1</code> and not <code>(0,0)</code> itself): <code>moistureGrid[0][1]=6</code>, <code>moistureGrid[1][0]=3</code>, <code>moistureGrid[1][1]=0</code>.</li>\r\n            <li>Neighbor values: <code>[6, 3, 0]</code>.</li>\r\n            <li><code>mean_of_neighbors = (6 + 3 + 0) // 3 = 9 // 3 = 3</code>.</li>\r\n            <li>Updated value: <code>(9 + 3) // 2 = 12 // 2 = 6</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li>For <code>moistureGrid[0][1] = 6</code>:\r\n        <ul>\r\n            <li>Neighbors: <code>moistureGrid[0][0]=9</code>, <code>moistureGrid[1][0]=3</code>, <code>moistureGrid[1][1]=0</code>.</li>\r\n            <li>Neighbor values: <code>[9, 3, 0]</code>.</li>\r\n            <li><code>mean_of_neighbors = (9 + 3 + 0) // 3 = 12 // 3 = 4</code>.</li>\r\n            <li>Updated value: <code>(6 + 4) // 2 = 10 // 2 = 5</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li>For <code>moistureGrid[1][0] = 3</code>:\r\n        <ul>\r\n            <li>Neighbors: <code>moistureGrid[0][0]=9</code>, <code>moistureGrid[0][1]=6</code>, <code>moistureGrid[1][1]=0</code>.</li>\r\n            <li>Neighbor values: <code>[9, 6, 0]</code>.</li>\r\n            <li><code>mean_of_neighbors = (9 + 6 + 0) // 3 = 15 // 3 = 5</code>.</li>\r\n            <li>Updated value: <code>(3 + 5) // 2 = 8 // 2 = 4</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li>For <code>moistureGrid[1][1] = 0</code>:\r\n        <ul>\r\n            <li>Neighbors: <code>moistureGrid[0][0]=9</code>, <code>moistureGrid[0][1]=6</code>, <code>moistureGrid[1][0]=3</code>.</li>\r\n            <li>Neighbor values: <code>[9, 6, 3]</code>.</li>\r\n            <li><code>mean_of_neighbors = (9 + 6 + 3) // 3 = 18 // 3 = 6</code>.</li>\r\n            <li>Updated value: <code>(0 + 6) // 2 = 6 // 2 = 3</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: moistureGrid = [[0, 0, 0], [0, 255, 0], [0, 0, 0]], smoothingRadius = 2\r\nOutput: [[15, 15, 15], [15, 127, 15], [15, 15, 15]]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Since <code>smoothingRadius</code> is 2, all other soil cells in the 3x3 grid are considered neighbors for any given cell.</p>\r\n<ul>\r\n    <li>For the central soil cell <code>moistureGrid[1][1] = 255</code>:\r\n        <ul>\r\n            <li>Neighbors are all 8 surrounding cells, all with value 0.</li>\r\n            <li>Neighbor values: <code>[0, 0, 0, 0, 0, 0, 0, 0]</code>.</li>\r\n            <li><code>mean_of_neighbors = (0 + ... + 0) // 8 = 0 // 8 = 0</code>.</li>\r\n            <li>Updated value: <code>(255 + 0) // 2 = 255 // 2 = 127</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li>For any of the 8 border soil cells (e.g., <code>moistureGrid[0][0] = 0</code>):\r\n        <ul>\r\n            <li>Neighbors are all 8 other cells. Their values are <code>[0, 0, 0, 255, 0, 0, 0, 0]</code> (the 255 comes from <code>moistureGrid[1][1]</code>).</li>\r\n            <li><code>sum(neighbor_values) = 255</code>. <code>count(neighbor_values) = 8</code>.</li>\r\n            <li><code>mean_of_neighbors = 255 // 8 = 31</code>.</li>\r\n            <li>Updated value: <code>(0 + 31) // 2 = 31 // 2 = 15</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Input/Output</h2>\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li><code>moistureGrid</code>: A matrix of integers representing the moisture levels of soil cells in a field to be smoothed.</li>\r\n    <li><code>smoothingRadius</code>: A non-negative integer representing the distance from a soil cell coordinate, which defines the coordinates that are considered neighbors.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= moistureGrid.length &lt;= 50</code></li>\r\n    <li><code>1 &lt;= moistureGrid[i].length &lt;= 50</code></li>\r\n    <li><code>0 &lt;= moistureGrid[i][j] &lt;= 255</code></li>\r\n    <li><code>0 &lt;= smoothingRadius</code> (implicitly, as it's non-negative)</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    },
    {
        "id": 1445,
        "title": "Flip Digits Equivalent Pairs",
        "problem_statement": "<h1>Flip Digits Equivalent Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine a group of young engineers trying to solve a puzzle involving sequences of lights on a giant circuit board. Each light sequence is represented by a non-negative integer, where reversing the digits in the integer represents reversing the light sequence. The reversal process <code>flipDigits</code> involves flipping the order of the digits and removing any leading zeroes from the result. For instance:</p>\r\n<ul>\r\n    <li><code>flipDigits(5070) = 705</code></li>\r\n    <li><code>flipDigits(800) = 8</code></li>\r\n    <li><code>flipDigits(123) = 321</code></li>\r\n</ul>\r\n<p>Some special pairs of light sequences can be combined in a unique way that makes them equivalent, no matter which sequence starts the combination.</p>\r\n<p>Given an array of non-negative integers <code>arr</code>, the engineers need to calculate how many pairs <code>(i, j)</code> exist such that <code>i &lt;= j</code> and <code>arr[i] + flipDigits(arr[j]) == arr[j] + flipDigits(arr[i])</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [1, 20, 2, 11]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The pairs <code>(i, j)</code> such that <code>i &lt;= j</code> are:</p>\r\n<ul>\r\n    <li>For <code>(i, j) = (0, 0)</code> equality holds: <code>1 + flipDigits(1) == 1 + flipDigits(1)</code> which is <code>1 + 1 == 1 + 1</code>.</li>\r\n    <li>For <code>(i, j) = (0, 1)</code> equality doesn't hold: <code>1 + flipDigits(20) == 20 + flipDigits(1)</code> which is <code>1 + 2 == 20 + 1</code>.</li>\r\n    <li>For <code>(i, j) = (0, 2)</code> equality holds: <code>1 + flipDigits(2) == 2 + flipDigits(1)</code> which is <code>1 + 2 == 2 + 1</code>.</li>\r\n    <li>For <code>(i, j) = (0, 3)</code> equality holds: <code>1 + flipDigits(11) == 11 + flipDigits(1)</code> which is <code>1 + 11 == 11 + 1</code>.</li>\r\n    <li>For <code>(i, j) = (1, 1)</code> equality holds: <code>20 + flipDigits(20) == 20 + flipDigits(20)</code> which is <code>20 + 2 == 20 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (1, 2)</code> equality doesn't hold: <code>20 + flipDigits(2) == 2 + flipDigits(20)</code> which is <code>20 + 2 == 2 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (1, 3)</code> equality doesn't hold: <code>20 + flipDigits(11) == 11 + flipDigits(20)</code> which is <code>20 + 11 == 11 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (2, 2)</code> equality holds: <code>2 + flipDigits(2) == 2 + flipDigits(2)</code> which is <code>2 + 2 == 2 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (2, 3)</code> equality holds: <code>2 + flipDigits(11) == 11 + flipDigits(2)</code> which is <code>2 + 11 == 11 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (3, 3)</code> equality holds: <code>11 + flipDigits(11) == 11 + flipDigits(11)</code> which is <code>11 + 11 == 11 + 11</code>.</li>\r\n</ul>\r\n<p>So the total number of such pairs is 7.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [32, 332, 100]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The pairs <code>(i, j)</code> such that <code>i &lt;= j</code> are:</p>\r\n<ul>\r\n    <li>For <code>(i, j) = (0, 0)</code> equality holds: <code>32 + flipDigits(32) == 32 + flipDigits(32)</code> which is <code>32 + 23 == 32 + 23</code>.</li>\r\n    <li>For <code>(i, j) = (0, 1)</code> equality doesn't hold: <code>32 + flipDigits(332) == 332 + flipDigits(32)</code> which is <code>32 + 233 == 332 + 23</code>.</li>\r\n    <li>For <code>(i, j) = (0, 2)</code> equality doesn't hold: <code>32 + flipDigits(100) == 100 + flipDigits(32)</code> which is <code>32 + 1 == 100 + 23</code>.</li>\r\n    <li>For <code>(i, j) = (1, 1)</code> equality holds: <code>332 + flipDigits(332) == 332 + flipDigits(332)</code> which is <code>332 + 233 == 332 + 233</code>.</li>\r\n    <li>For <code>(i, j) = (1, 2)</code> equality doesn't hold: <code>332 + flipDigits(100) == 100 + flipDigits(332)</code> which is <code>332 + 1 == 100 + 233</code>.</li>\r\n    <li>For <code>(i, j) = (2, 2)</code> equality holds: <code>100 + flipDigits(100) == 100 + flipDigits(100)</code> which is <code>100 + 1 == 100 + 1</code>.</li>\r\n</ul>\r\n<p>So the total number of such pairs is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.integer arr</code></li>\r\n    <li>An array of non-negative integers representing the light sequences on the circuit board.</li>\r\n</ul>\r\n<p>Guaranteed constraints:</p>\r\n<!-- The actual list of guaranteed constraints is cut off in the image. -->",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_17sep",
        "company_id": 505
    }
]