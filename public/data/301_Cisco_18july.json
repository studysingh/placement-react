[
    {
        "id": 952,
        "title": "Maximum Sum of Removed Elements",
        "problem_statement": "<h1>Maximum Sum of Removed Elements</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a matrix with <code>n</code> rows and <code>m</code> columns, the following operation can be performed on it:</p>\r\n<ul>\r\n    <li>Select a non-empty row of the matrix.</li>\r\n    <li>Remove an element either from the start or end of the selected row.</li>\r\n</ul>\r\n<p><strong>Note:</strong> If the first (starting) element of a row is removed, the element adjacent to it becomes the starting element of that row. A similar logic applies to removing the last element of the row.</p>\r\n<p>Find the maximum possible sum of elements removed after exactly <code>k</code> operations.</p>\r\n<p>Complete the function <code>getMaximumSum</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int matrix[n][m]</code>: an integer matrix of size <code>n * m</code></li>\r\n    <li><code>int k</code>: the number of operations</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int</code>: the maximum possible sum of elements removed in exactly <code>k</code> operations.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\nm = 3\r\nk = 3\r\nmatrix = [[3, 7, 2], [4, 1, 5]]\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> The following sequence is optimal.</p>\r\n<pre><code class='language-text'>Initial Matrix:\r\n[3 7 2]\r\n[4 1 5]\r\n\r\n1. Remove the first element from the first row, 3.\r\nMatrix becomes:\r\n[7 2]\r\n[4 1 5]\r\n\r\n2. Next, remove the last element from the second row, 5.\r\nMatrix becomes:\r\n[7 2]\r\n[4 1]\r\n\r\n3. Finally, remove the first element from the first row, 7.\r\nMatrix becomes:\r\n[2]\r\n[4 1]\r\n\r\nThe sum of elements removed = 3 + 5 + 7 = 15. Return 15.</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nm = 4\r\nk = 4\r\nmatrix = [[6, 5, 8, 1], [7, 5, 10, 3], [5, 1, 9, 6]]\r\nOutput: 28</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>Initial Matrix:\r\n6 5 8 1\r\n7 5 10 3\r\n5 1 9 6\r\n\r\n1. Remove the first element from the first row, 6.\r\n2. Now, remove the first element from the second row, 7.\r\n3. Now, remove the last element from third row, 6.\r\n4. Finally, remove the last element from the third row, 9.\r\n\r\nSum: 6 + 7 + 6 + 9 = 28</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nm = 4\r\nk = 5\r\nmatrix = [[8, 1, 5, 8], [7, 2, 8, 4], [5, 5, 8, 2], [1, 7, 3, 9]]\r\nOutput: 37</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>Initial Matrix:\r\n8 1 5 8\r\n7 2 8 4\r\n5 5 8 2\r\n1 7 3 9\r\n\r\n1. Remove the first element from the first row, 8.\r\n2. Now, remove the last element from the second row, 4.\r\n3. Now, remove the first element from the fourth row, 1.\r\n4. Now, remove the last element from the third row, 9.\r\n5. Finally, remove the last element from the second row, 8.\r\n\r\nSum: 8 + 4 + 8 + 9 + 8 = 37</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n, m <= 100</code></li>\r\n    <li><code>1 <= matrix[i][j] <= 10^5</code></li>\r\n    <li><code>1 <= k <= min(n * m, 2000)</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Cisco_18july",
        "company_id": 301
    },
    {
        "id": 953,
        "title": "Count Arrays",
        "problem_statement": "```html\r\n<h1>Count Arrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of n integers called <code>required_sums</code>, there is another array of n integers called <code>result</code> that can be constructed to meet the following conditions:</p>\r\n<ul>\r\n    <li>The values are non-decreasing, i.e., <code>result[i] &gt;= result[i-1] - 1</code> (1 &lt; i &lt;= n).</li>\r\n    <li>The sum of digits of <code>result[i] == required_sums[i]</code> for every 1 &lt;= i &lt;= n.</li>\r\n    <li><code>result[i] &lt;= 5000</code>, for every 1 &lt;= i &lt;= n.</li>\r\n</ul>\r\n<p>Find the number of distinct ways that <code>result</code> can be constructed to satisfy the constraints. Since the answer can be large, compute it modulo (10<sup>9</sup> + 7).</p>\r\n<p><strong>Note:</strong> Two arrays <code>a</code> and <code>b</code> of length <code>n</code> are distinct if <code>a[i]</code> is not equal to <code>b[i]</code> for at least one <code>i</code> in 1 &lt;= i &lt;= n.</p>\r\n<p>Complete the function <code>countArrays</code> in the editor with the following parameter:</p>\r\n<pre><code class='language-javascript'>int required_sums[n]: the required sums of the digits.</code></pre>\r\n<p>The function is expected to return an INTEGER.</p>\r\n<p>The function accepts INTEGER_ARRAY <code>required_sums</code> as parameter.</p>\r\n<p>The expected function signature is:</p>\r\n<pre><code class='language-javascript'>int countArrays(vector&lt;int&gt; required_sums)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1: (Illustration of Conditions)</h3>\r\n<p>For instance, consider <code>result = [4998, 4999, 4999]</code>.</p>\r\n<ul>\r\n    <li><code>4998 &lt;= 4999 &lt;= 4999</code>, it satisfies the first constraint (non-decreasing with <code>result[i] &gt;= result[i-1] - 1</code>).</li>\r\n    <li>For the second constraint:\r\n        <ul>\r\n            <li><code>4 + 9 + 9 + 8 = 30</code> (This would be <code>required_sums[1]</code> if <code>required_sums</code> was <code>[30, 31, 31]</code>)</li>\r\n            <li><code>4 + 9 + 9 + 9 = 31</code> (This would be <code>required_sums[2]</code>)</li>\r\n            <li><code>4 + 9 + 9 + 9 = 31</code> (This would be <code>required_sums[3]</code>)</li>\r\n        </ul>\r\n    </li>\r\n    <li>Every number is less than or equal to 5000, thus it also satisfies the third constraint.</li>\r\n</ul>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n1\r\n31\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> For <code>required_sums = [1, 31]</code>, the arrays that satisfy the conditions are:</p>\r\n<ul>\r\n    <li><code>result = [1, 4999]</code></li>\r\n    <li><code>result = [10, 4999]</code></li>\r\n    <li><code>result = [100, 4999]</code></li>\r\n    <li><code>result = [1000, 4999]</code></li>\r\n</ul>\r\n<p>There are no other arrays that satisfy the conditions.</p>\r\n\r\n<h3>Example 3: (Sample Case 1)</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n31\r\n7\r\n23\r\n17\r\n1\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> For <code>required_sums = [31, 7, 23, 17, 1]</code>, no arrays satisfy the conditions.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2000</code></li>\r\n    <li><code>0 &lt;= required_sums[i] &lt;= 31</code></li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the number of arrays that satisfy the constraints, modulo (10<sup>9</sup> + 7)</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Cisco_18july",
        "company_id": 301
    }
]