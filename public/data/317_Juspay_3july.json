[
    {
        "id": 987,
        "title": "Encrypted File Name Update",
        "problem_statement": "<h1>Encrypted File Name Update</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a cloud storage system, files are assigned encrypted names consisting of lowercase English letters. When a file is updated, its encrypted name must also be updated following strict rules:</p>\r\n<ul>\r\n    <li>The new file name must be exactly k characters long.</li>\r\n    <li>The new file name can only include characters that are present in the original file name.</li>\r\n    <li>The new file name must be lexicographically larger than the original file name. This means it should come later than the original name if they were arranged in alphabetical order.</li>\r\n</ul>\r\n<p>Given the original file name, find the smallest possible new file name of length k that satisfies these conditions. Return \"-1\" if no such name is possible.</p>\r\n<p><strong>Note:</strong> A string p is lexicographically smaller than string q if p comes before q in the dictionary. For example, \"abc\" is smaller than \"abcd\", and \"abd\" is smaller than \"abe\".</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>solve</code> function in the editor below. It has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>n</code>: INTEGER, length of the original file name</li>\r\n    <li><code>k</code>: INTEGER, length of the new file name</li>\r\n    <li><code>s</code>: STRING, original file name</li>\r\n</ul>\r\n<p>The function must return a STRING denoting the smallest possible new file name of length k that satisfies these conditions.</p>\r\n\r\n<pre><code class='language-javascript'>char *solve(int n, int k, char *s) {\r\n    // Write your code here\r\n}\r\n\r\nint main() {\r\n    int n = atoi(trim(readline())));\r\n    int k = atoi(trim(readline())));\r\n    char *s = readline();\r\n    char *result = solve(n, k, s);\r\n    printf(\"%s\\n\", result);\r\n    return 0;\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\nabc\r\nOutput: aca</code></pre>\r\n<p><strong>Explanation:</strong> Immediately next lexicographically larger string is aca.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n5\r\nabc\r\nOutput: abcaa</code></pre>\r\n<p><strong>Explanation:</strong> For such string of size 5, abcaa is smallest lexicographically larger string than s.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n1\r\nh\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> Since s=\"h\" is lexicographically largest, no larger string exists.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= k <= 10^5</code></li>\r\n    <li><code>1 <= len(s) <= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Input Format for Debugging</h2>\r\n<ul>\r\n    <li>The first line contains an integer, n, denoting the length of the original file name.</li>\r\n    <li>The next line contains an integer, k, denoting the length of the new file name.</li>\r\n    <li>The next line contains a string, s, denoting the original file name.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Juspay_3july",
        "company_id": 317
    },
    {
        "id": 988,
        "title": "Corporate Restructuring",
        "problem_statement": "<h1>Corporate Restructuring</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the large corporation Techify Inc., there is a hierarchical structure of employees. The company has N employees, each identified by a unique ID from 1 to N. At the top of this structure is the CEO, who serves as the root of the company's hierarchy.</p>\r\n<p>Employees report to their immediate supervisors except for the CEO, who has no supervisor. The company is undergoing a restructuring process because some employees have become non-compliant.</p>\r\n<ul>\r\n    <li><strong>Compliant</strong>: An employee is compliant if they respect the company's policies and directives given by their supervisor.</li>\r\n    <li><strong>Non-Compliant</strong>: Some employees have grown dissatisfied and no longer respect their supervisor's authority.</li>\r\n</ul>\r\n<p>To streamline the company, management has decided to identify and remove non-compliant employees, but with specific criteria:</p>\r\n<ol>\r\n    <li>Select a non-compliant employee (one who does not respect their supervisor) who also has no compliant subordinates. If there are multiple such employees, select the one with the smallest ID.</li>\r\n    <li>Remove the selected non-compliant employee. When this employee is removed, their direct reports are immediately reassigned to report to their supervisor.</li>\r\n    <li>Repeat the process until there are no more employees that meet the removal criteria.</li>\r\n</ol>\r\n<p>Your task is to determine the order in which these non-compliant employees will be removed.</p>\r\n<ul>\r\n    <li>If there is at least one non-compliant employee that can be removed, print a single line containing the IDs of the employees in the order they will be removed.</li>\r\n    <li>If no such employee exists, print -1.</li>\r\n</ul>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li><code>P_i</code> (1 &le; <code>P_i</code> &lt; N or -1) denotes the direct supervisor of employee i. The CEO (root) has <code>P_i = -1</code>.</li>\r\n    <li><code>C_i</code> (0 &le; <code>C_i</code> &le; 1) indicates whether the employee respects their supervisor.</li>\r\n    <li><code>C_i = 0</code> means the employee is compliant (respects the supervisor).</li>\r\n    <li><code>C_i = 1</code> means the employee is non-compliant (does not respect the supervisor).</li>\r\n</ul>\r\n<p>Complete the <code>isCompliant</code> function in the editor below. It has the following parameter(s):</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Name</th>\r\n            <th>Type</th>\r\n            <th>Description</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td><code>N</code></td>\r\n            <td>INTEGER</td>\r\n            <td>the number of employees in the company</td>\r\n        </tr>\r\n        <tr>\r\n            <td><code>Arr</code></td>\r\n            <td>INTEGER 2D ARRAY</td>\r\n            <td>Array containing Pi and Ci values</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p><strong>Return:</strong> The function must return an INTEGER ARRAY denoting the order in which these non-compliant employees will be removed.</p>\r\n\r\n<h2>Input format for debugging</h2>\r\n<ul>\r\n    <li>The first line contains an integer, N, denoting the number of rows in Arr.</li>\r\n    <li>Each line i of the N subsequent lines (where 0 &lt; i &lt; N) contains 2 space separated integers each describing the row Arr[i].</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3 1\r\n1 1\r\n-1 0\r\n2 1\r\n3 0\r\nOutput:\r\n1\r\n2\r\n4</code></pre>\r\n<p><strong>Output Description:</strong> 1,2,4 is order of non-compliant employee ID in which they are removed</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n2 1\r\n-1 0\r\n1 1\r\n1 1\r\n4 0\r\n5 1\r\n7 0\r\nOutput:\r\n5</code></pre>\r\n<p><strong>Output Description:</strong> Non-Compliant Employee with ID 5 is removed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>1 &le; Arr[i][j] &le; 10<sup>5</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Juspay_3july",
        "company_id": 317
    },
    {
        "id": 989,
        "title": "Smart City Traffic Toll System",
        "problem_statement": "<h1>Smart City Traffic Toll System</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a smart city, there are an infinite number of traffic control hubs numbered with positive integers starting from 1. Each hub is connected by smart roads in a unique tree-like structure.</p>\r\n<ol>\r\n    <li>There is a direct, bidirectional road between hub i and 2i.</li>\r\n    <li>Another direct road exists between hub i and 2i + 1.</li>\r\n</ol>\r\n<p>Given this structure, there is always a unique shortest path between any two traffic control hubs.</p>\r\n<p>Initially, passing through any road is toll-free. However, to optimize traffic flow and manage congestion, the city traffic authority occasionally imposes toll fees on certain roads along specific paths.</p>\r\n<p>The traffic authority will introduce a series of changes:</p>\r\n<ol>\r\n    <li><strong>Toll Fee Update</strong>: An update described by integers x, y, and t imposes a toll of t units on all roads along the shortest path from hub y to hub x.</li>\r\n    <li><strong>Travel Cost Calculation</strong>: A commuter travels from hub x to hub y using the shortest path, and you need to calculate the total toll fees they incur.</li>\r\n</ol>\r\n<p>Complete the `solve` function in the editor below. It has the following parameter(s):</p>\r\n<ul>\r\n    <li>`q`: INTEGER, number of events</li>\r\n    <li>`a`: INTEGER 2D ARRAY, details of the events</li>\r\n</ul>\r\n<p>The function must return an INTEGER denoting the sum of total cost for the trip.</p>\r\n\r\n<p><strong>Input:</strong></p>\r\n<p>The first line contains an integer q, representing the number of events. The next q lines contain details of the events:</p>\r\n<ul>\r\n    <li>`1 x y t` describes a toll update where all roads on the shortest path between hubs x and y increase their toll by t units.</li>\r\n    <li>`2 x y 0` represents a travel event where a commuter moves from hub x to hub y. They are given in the form of a 2D array of q rows and 4 columns.</li>\r\n</ul>\r\n<p>For debugging, the input format is:</p>\r\n<ul>\r\n    <li>The first line contains an integer, q, denoting the number of rows in a.</li>\r\n    <li>The next line contains an integer, 4, denoting the number of columns in a.</li>\r\n    <li>Each line i of the q subsequent lines (where 0 &le; i &lt; q) contains 4 space separated integers each describing the row a[i].</li>\r\n</ul>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>For each travel event (2 x y 0), add to a sum the total cost for the trip and return the sum.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1 1 2 4\r\n2 1 4 0\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> Query: 2 1 4 0: Path from 1 to 4 is: 1->2->4. So, fees is 4+2=6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1 1 4 2\r\n1 2 7 4\r\n2 1 2 0\r\n2 4 7 0\r\n2 5 7 0\r\nOutput:\r\n20</code></pre>\r\n<p><strong>Explanation:</strong>\r\n1. 2 4 7 0:\r\nFor 4 to 7, path is 4->2->1->3->7.\r\nCost from 4->2 is 2\r\nCost from 2->1 is 4\r\nCost from 1->3 is 2\r\nCost from 3->7 is 2\r\nTotal fees=2+4+2+2=10</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n1 3 4 22\r\n1 4 1 22\r\n2 4 3 0\r\n1 3 6 20\r\n1 8 2 22\r\n2 4 3 0\r\n1 6 1 22\r\n2 3 7 0\r\n2 2 4 0\r\nOutput:\r\n86</code></pre>\r\n<p><strong>Explanation:</strong>\r\n1. 2 4 3 0: Answer is 64 as path: 4->2->1->3\r\nAnd, 4->2 has cost 22, 2->1 has 22, 1->3 has 20. So,\r\n22+22+20=64.\r\n2. 2 3 7 0: Answer is 0 as no cost is present.\r\n3. 2 2 4 0: Answer is 22 as path 2->4 has cost 20\r\nfrom 1st query and 2 from 2nd. So, 22.\r\nSo, 64+0+22=86.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= q <= 10^5`</li>\r\n    <li>`1 <= a[i][j] <= 10^5`</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Juspay_3july",
        "company_id": 317
    }
]