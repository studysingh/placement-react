[
    {
        "id": 1881,
        "title": "Maximum product sales",
        "problem_statement": "<h1>Maximum product sales</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working in an E-commerce company. There are N products each having 10<sup>9</sup> items in it. The products are numbered from 1 to N.</p>\r\n<p>There will be Q customers who can do one of the following things:</p>\r\n<ul>\r\n    <li><strong>1 R:</strong> Buys one item from each of the products that have product numbers in the range (1, R) (including both 1 and R)</li>\r\n    <li><strong>2 L:</strong> Buys one item from each of the products that have product numbers in the range (L, N) (including both L and N)</li>\r\n    <li><strong>3 C:</strong> Search for the most bought product which has a product number greater than or equal to C</li>\r\n</ul>\r\n<p>You have to build a search filter that will return the most bought item that the customer wants to find. If there are multiple products then return the product that has a minimum difference from the C that is as close as possible to the customer query.</p>\r\n<p>Find out the most bought product that the customer wants to find.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the function <code>solve()</code>. This function takes the following 3 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents an integer denoting the number of products</li>\r\n    <li><strong>Q:</strong> Represents an integer denoting the number of customers</li>\r\n    <li><strong>query:</strong> Represents a 2D integer array of size Q*2 representing the query of the customer</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line of input contains an integer T denoting the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer N.</li>\r\n            <li>The second line contains an integer Q.</li>\r\n            <li>The following Q lines contain 2 space-separated integers each, representing the 2D array query.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each turn of type 3, return an integer that is closest to the product asked and has been most bought.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= T <= 10</code></li>\r\n    <li><code>1 <= N, Q <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= L, R, C <= N</code></li>\r\n    <li>There will be at most 100 type 3 items for each testcase.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Sample Input:</h3>\r\n<pre><code class='language-text'>4\r\n7\r\n1 5\r\n2 3\r\n3 6</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * This function takes the number of products, number of queries, and the queries themselves.\n     * It should process all queries and return a vector of integers containing the answers\n     * for each query of type 3, in the order they appear.\n     *\n     * @param N The total number of products.\n     * @param Q The total number of queries.\n     * @param queries A 2D vector where each inner vector represents a query.\n     *                queries[i][0] is the type of the query (1, 2, or 3).\n     *                queries[i][1] is the value associated with the query (R, L, or C).\n     * @return A vector of integers with the results for type 3 queries.\n     */\n    std::vector<int> solve(int N, int Q, const std::vector<std::vector<int>>& queries) {\n        // Core logic goes here\n        std::vector<int> results;\n        return results;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int N;\n        std::cin >> N;\n        int Q;\n        std::cin >> Q;\n        std::vector<std::vector<int>> queries(Q, std::vector<int>(2));\n        for (int i = 0; i < Q; ++i) {\n            std::cin >> queries[i][0] >> queries[i][1];\n        }\n\n        Solution sol;\n        std::vector<int> results = sol.solve(N, Q, queries);\n\n        for (int result : results) {\n            std::cout << result << \"\\n\";\n        }\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "kotak",
        "company_id": 662
    }
]