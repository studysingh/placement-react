[
    {
        "id": 784,
        "title": "Skyscapers",
        "problem_statement": "<h1>Skyscapers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Bob loves nature and lives in a lush green area that extends from position 0 to K. However, the government has decided to build N Skyscapers in this area one by one at specific locations.</p>\r\n<p>Bob wants to know the longest continuous greenery segment available after each skyscraper is constructed and note down its value. However, Bob is unsure about some of the values. To confirm these answers, he asks you Q queries, where each query asks for the longest continuous greenery segment after the construction of the <code>query[i]</code><sup>th</sup> skyscraper. Help Bob get the correct answer.</p>\r\n<p>Your task is to process the queries efficiently and return an array where each element represents the longest continuous greenery segment after the corresponding query.</p>\r\n\r\n<h2>Task</h2>\r\n<p>Return an array where the <code>P</code><sup>th</sup> element is the length of the longest continuous greenery segment after the construction of the <code>query[P]</code><sup>th</sup> skyscraper.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the function <code>solve()</code> provided in the editor. This function takes the following parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the number of skyscrapers</li>\r\n    <li><code>K</code>: Represents the range of Bob's area</li>\r\n    <li><code>Q</code>: Number of queries</li>\r\n    <li><code>A</code>: A list of <code>N</code> integers, where <code>A[i]</code> represents the position of the <code>i</code><sup>th</sup> skyscraper built in order.</li>\r\n    <li><code>query</code>: A list of <code>Q</code> integers where each <code>query[i]</code> represents the number of the skyscraper built, and we need to find the longest continuous greenery segment after this number of construction.</li>\r\n</ul>\r\n\r\n<h3>Input format</h3>\r\n<p><strong>Note:</strong> This is the input format you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line contains three space-separated integers <code>N</code>, <code>K</code>, and <code>Q</code>.</li>\r\n    <li>The second line contains <code>N</code> space-separated integers representing the positions where the skyscrapers are built in order.</li>\r\n    <li>The third line contains <code>Q</code> space-separated integers representing the queries.</li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>Return an array of size <code>Q</code>, where <code>P</code> element corresponds to the longest continuous greenery segment after the <code>query[P]</code><sup>th</sup> skyscraper given in the respective query.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 5 * 10^5</code></li>\r\n    <li><code>1 <= K <= 10^9</code></li>\r\n    <li><code>1 <= Q <= 10^5</code></li>\r\n    <li><code>0 <= A[i] < K</code></li>\r\n    <li><code>1 <= query[i] <= N</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 3 10 2\r\n2 5 8\r\n1 3\r\nOutput: 8 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Approach</strong></p>\r\n<p><strong>Initial State</strong></p>\r\n<ul>\r\n    <li>Greenery interval: <code>[0, 10]</code> is a single segment from 0 to 10.</li>\r\n</ul>\r\n<p><strong>After 1<sup>st</sup> building at position 2</strong></p>\r\n<ul>\r\n    <li>What happens? A building is constructed at position 2, which splits the greenery into two segments:\r\n        <ul>\r\n            <li>Left segment: <code>[0,2]</code></li>\r\n            <li>Right segment: <code>[2,10]</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>Lengths:\r\n        <ul>\r\n            <li><code>[0,2]</code> -> length = <code>2-0=2</code></li>\r\n            <li><code>[2,10]</code> -> length = <code>10-2=8</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>Maximum segment: The longest segment is <code>[2,10]</code> with a length of 8.</li>\r\n    <li>Query 1: Since the first query asks for the state after the 1<sup>st</sup> building, the answer is 8.</li>\r\n</ul>\r\n<p><strong>After 2<sup>nd</sup> building at position 5</strong></p>\r\n<ul>\r\n    <li>What happens? Next, a building is constructed at position 5. Now, the greenery is divided into three segments:\r\n        <ul>\r\n            <li>Segment 1: <code>[0,2]</code></li>\r\n            <li>Segment 2: <code>[2,5]</code></li>\r\n            <li>Segment 3: <code>[5,10]</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>Lengths:\r\n        <ul>\r\n            <li><code>[0,2]</code> -> length = 2</li>\r\n            <li><code>[2,5]</code> -> length = <code>5-2=3</code></li>\r\n            <li><code>[5,10]</code> -> length = <code>10-5=5</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>Maximum segment: The longest segment is now <code>[5,10]</code> with a length of 5.</li>\r\n</ul>\r\n<p><strong>After 3<sup>rd</sup> building at position 8</strong></p>\r\n<ul>\r\n    <li>What happens? Finally, a building is constructed at position 8. The greenery is now split into four segments:\r\n        <ul>\r\n            <li>Segment 1: <code>[0,2]</code></li>\r\n            <li>Segment 2: <code>[2,5]</code></li>\r\n            <li>Segment 3: <code>[5,8]</code></li>\r\n            <li>Segment 4: <code>[8,10]</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>Lengths:\r\n        <ul>\r\n            <li><code>[0,2]</code> -> length = 2</li>\r\n            <li><code>[2,5]</code> -> length = 3</li>\r\n            <li><code>[5,8]</code> -> length = 3</li>\r\n            <li><code>[8,10]</code> -> length = 2</li>\r\n        </ul>\r\n    </li>\r\n    <li>Maximum segment: The longest contiguous greenery segments now are <code>[2,5]</code> and <code>[5,8]</code>, both with a length of 3. (We choose the maximum, which is 3)</li>\r\n    <li>Query 2: The second query asks for the state after the 3<sup>rd</sup> building, so the answer is 3.</li>\r\n</ul>\r\n<p><strong>Final output</strong></p>\r\n<p>For the following queries:</p>\r\n<ol>\r\n    <li>After the 1<sup>st</sup> building: Maximum segment length is 8.</li>\r\n    <li>After the 3<sup>rd</sup> building: Maximum segment length is 3.</li>\r\n</ol>\r\n<p>Thus, the output is <code>8 3</code>.</p>\r\n\r\n<h3>Sample Test Case #1:</h3>\r\n<pre><code class='language-text'>Input: 43902 718403150 20996\r\n31603158 20996 32091553 958630 428607473 188850251 145020891 40079009 53348128 433770230 27407201 55799472 497187479 36937369 450377893 287619465 32802393 492152404 44992731 59038899 9837276 8292545 205603729 38083882 48021132 420318379 37563178 67373688 727806366 381922322 251262446 646560870 426106693 717808504 544020444 610869143 65574432 544108430 7154816 621815061 341524663 880877553 298328206 577864086 185753718 688078441 647675485 301567919 3592547 527520237 521384214 224258423 582958155 585904094 654758479 495358863 274734 58245657 430885919 474830253 687258100 262355993 153654411 433324165 244851216 680573834 497900593 592655901 19390797 462940499 477593307 508083131 459331726 675855983 425189915 328416195 319395376 714266455 4378473 703256831 605691712 288495728 359521559 245506923 624765788 53484445 185343479 664491726 24508197 426611882 24472719 365384178 32305238 683762844 337462736 213757290 435691928 402523395 43282141 35629682 546803238 531232679 690197929 1\r\n26412 15476 33259 33988 38667 17393 3859 34337 28667 29590 17714 4213 77398 6104 4671 27440 28573 11754 41151 34376 32838 5840 12845 6774 9787 8016 35152 9147 21969 8495 39456 36743 19222 20891 16931 39834 70834 19316 34995 7700 18148 12295 17742 34217 33285 12610 42862 8338 43363 19858 4584 3287 11889 13925 4797 38111 18068 5947 9782 31766 22846 2256 34731 34512 25093 28882 30720 27179 20875 15725 25190 12128 17435 6055 23163 41921 35249 4486 31586 20579 40169 41821 36186 34239 35843 12712 13838 14234 40757 15116 563 9357 29553\r\n35043 12712 13838 14234 40757 15116 563 9357 29553 20881 9448 12921 2083 37468 28350 8438 8546 13295 9159 29907 10167 7789 18206 14676 27305 17654 23888 35655 22288 16174 10218 26499 28377 38717 10983 16823 1480 39508 37964 16192 38567 41911 24627 17083 6392 5800 7651 7875 503 36850 30948 28940 4765 7660 34112 7182 7512 36676 9041 5919 33929 5202 42401 4302 26582 9537 9508 17130 1155 7422 27498 9805 36862 41805 32821 11051 19086 6980 27304 17929 31839 20376 8258 38980 25622 1889 200 25964 2050 16275 12209 40966 28</code></pre>\r\n<pre><code class='language-text'>Outputcode></pre>\r\n\r\n<h3>Sample Test Case #2:</h3>\r\n<pre><code class='language-text'>Input: 3 100 3\r\n42 55 19\r\n1 2 1\r\nOutput: 58 45 58</code></pre>\r\n\r\n<h2>Code Editor</h2>\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\nusing namespace std;\r\n\r\nvector&lt;int&gt; solve(int N, int K, int Q, vector&lt;int&gt; A, vector&lt;int&gt; Queries) {\r\n  // Write your code here\r\n}\r\n\r\nint main() {\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0);\r\n  vector&lt;string&gt; custom_input_1(3);\r\n  for (int i_custom_input_1 = 0; i_custom_input_1 &lt; 3; i_custom_input_1++) {\r\n    cin >> custom_input_1[i_custom_input_1];\r\n  }\r\n  int N = stoi(custom_input_1[0]);\r\n  int K = stoi(custom_input_1[1]);\r\n  int Q = stoi(custom_input_1[2]);\r\n  vector&lt;int&gt; A(N);\r\n  for (int i_A = 0; i_A &lt; N; i_A++) {\r\n    cin >> A[i_A];\r\n  }\r\n  vector&lt;int&gt; Queries(Q);\r\n  for (int i_Queries = 0; i_Queries &lt; Q; i_Queries++) {\r\n    cin >> Queries[i_Queries];\r\n  }\r\n  vector&lt;int&gt; out_ = solve(N, K, Q, A, Queries);\r\n  cout << out_[0];\r\n  for (int i_out_ = 1; i_out_ &lt; out_.size(); i_out_++) {\r\n    cout << \" \" << out_[i_out_];\r\n  }\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nokia_23march",
        "company_id": 248
    },
    {
        "id": 785,
        "title": "Health potions",
        "problem_statement": "<h1>Health potions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Congratulations! Here is the first piece of hint required to solve the final question in this challenge: Imagine you're on a journey—a long continuous path filled with delicious food that brings you joy. Every step you take is built upon the choices made before, with each bite influencing your future delight. As you move forward, you must decide at every turn: do you continue savoring the current sequence of treats, or do you start afresh, hoping to capture an even greater burst of happiness? Keep track of your most satisfying experiences so far might help you decide which path to follow next.</p>\r\n<p>You are given an array of N potions arranged in a line, where each potion has a certain health value associated with it. You and your enemy take turns drinking potions, with you starting first. On each turn, a player can choose to drink either one or two consecutive potions, and the value of the consumed potion(s) is added to their total health.</p>\r\n<p>Both you and your enemy play optimally, meaning each player tries to maximize their own health while minimizing the opponent's possible gain. Your goal is to determine the maximum health you can achieve by the end of the game.</p>\r\n\r\n<h3>Task</h3>\r\n<p>Determine the maximum health you can achieve if both you and your enemy play optimally.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the function solve() provided in the editor. This function takes the following two parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><strong>N:</strong> An integer representing the number of potions (size of the sequence).</li>\r\n    <li><strong>potions:</strong> A list of N integers, where each number represents the health value of a potion.</li>\r\n</ul>\r\n\r\n<h3>Input format</h3>\r\n<p>Note: This is the input format you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line contains a single integer N (number of potions).</li>\r\n    <li>The second line contains N space-separated integers representing the health values of the potions.</li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>For each test case, print the required maximum health on a new line.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10<sup>5</sup></code></li>\r\n    <li><code>-10<sup>4</sup> <= potions[i] <= 10<sup>4</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n10 -1 9 -2 8 -3\r\nOutput:\r\n16</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Approach</p>\r\n<ul>\r\n    <li>Your turn: You choose to drink the first potion only, which has a health value of 10.\r\n        <ul>\r\n            <li>Your health: 10, Enemy health: 0, Potions left: [-1, 9, -2, 8, -3]</li>\r\n        </ul>\r\n    </li>\r\n    <li>Enemy's turn: Your enemy chooses to drink two consecutive potions that have a health value of -1 and 9.\r\n        <ul>\r\n            <li>Your health: 10, Enemy health: 8, Potions left: [-2, 8, -3]</li>\r\n        </ul>\r\n    </li>\r\n    <li>Your turn: You choose to drink two consecutive potions that have a health value of -2 and 8.\r\n        <ul>\r\n            <li>Your health: 16, Enemy Health: 8, Potions left: [-3]</li>\r\n        </ul>\r\n    </li>\r\n    <li>Enemy's turn: Your enemy has no other option but to drink the last potion left.\r\n        <ul>\r\n            <li>Your health: 16, Enemy Health: 5, Potions Left: []</li>\r\n        </ul>\r\n    </li>\r\n    <li>Thus, the answer is 16.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n1231\r\nOutput:\r\n1231</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n-2230 2716\r\nOutput:\r\n486</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nokia_23march",
        "company_id": 248
    },
    {
        "id": 786,
        "title": "Hero's Journey in a Tree",
        "problem_statement": "<h1>Hero's Journey in a Tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a tree with <code>n</code> nodes (1 to <code>n</code>) rooted at node 1 and <code>n-1</code> edges. Each edge contains a monster with power <code>p</code>. A hero lands on a node <code>u</code> with initial health <code>H</code> and tries to climb toward the root. He battles every monster along his way. You can determine the battle condition in the following way:</p>\r\n<ul>\r\n    <li>If <code>H &lt; p</code>, the hero stops at the current node.</li>\r\n    <li>If <code>H &gt; p</code>, the hero defeats the monster, loses <code>p</code> health, and moves to the parent node.</li>\r\n    <li>If <code>H = p</code>, the hero defeats the monster, loses all his health (H becomes 0), ascends to the parent node, but dies on arrival.</li>\r\n</ul>\r\n<p>Your task is to determine the highest node (closest to the root) the hero can reach for each query.</p>\r\n\r\n<p>Complete the function <code>solve</code> provided in the editor. This function takes the following parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>n</code>: The number of nodes in the tree.</li>\r\n    <li><code>edges</code>: A list of lists of the form <code>(u, v, p)</code>, where <code>u</code> and <code>v</code> are connected nodes, and <code>p</code> is the monster's power on that edge.</li>\r\n    <li><code>q</code>: The number of queries.</li>\r\n    <li><code>queries</code>: A list of lists of the form <code>(u, H)</code>, where <code>u</code> is the starting node, and <code>H</code> is the hero's initial health.</li>\r\n</ul>\r\n<p>The signature for the function is:</p>\r\n<pre><code class='language-cpp'>vector<int> solve(int n, vector<vector<int>> edges, int q, vector<vector<long long>> queries)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1 2 3\r\n2 3 2\r\n3 4 4\r\n3 5 1\r\n2\r\n4 10\r\n5 2\r\nOutput:\r\n1\r\n3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe tree structure and monster powers are as follows:</p>\r\n<pre><code class='language-text'>    (1)\r\n     |\r\n    (2)\r\n     |\r\n    (3)\r\n   /   \\\r\n (4)   (5)</code></pre>\r\n<ul>\r\n    <li>Edge (1-2): Power 3</li>\r\n    <li>Edge (2-3): Power 2</li>\r\n    <li>Edge (3-4): Power 4</li>\r\n    <li>Edge (3-5): Power 1</li>\r\n</ul>\r\n<p><strong>Query 1:</strong> Start at node 4 with health 10.</p>\r\n<ul>\r\n    <li><strong>4 -> 3:</strong> Monster power is 4. Hero's health 10 <code>&gt;=</code> 4. Hero defeats monster, health becomes 10 - 4 = 6. Moves to node 3.</li>\r\n    <li><strong>3 -> 2:</strong> Monster power is 2. Hero's health 6 <code>&gt;=</code> 2. Hero defeats monster, health becomes 6 - 2 = 4. Moves to node 2.</li>\r\n    <li><strong>2 -> 1:</strong> Monster power is 3. Hero's health 4 <code>&gt;=</code> 3. Hero defeats monster, health becomes 4 - 3 = 1. Moves to node 1.</li>\r\n    <li>Hero reaches node 1 (the root).</li>\r\n</ul>\r\n<p><strong>Query 2:</strong> Start at node 5 with health 2.</p>\r\n<ul>\r\n    <li><strong>5 -> 3:</strong> Monster power is 1. Hero's health 2 <code>&gt;=</code> 1. Hero defeats monster, health becomes 2 - 1 = 1. Moves to node 3.</li>\r\n    <li><strong>3 -> 2:</strong> Monster power is 2. Hero's health 1 <code>&lt;</code> 2. Hero cannot battle.</li>\r\n    <li>Hero stops at node 3.</li>\r\n</ul>\r\n<p>Thus, the output is: <code>1 3</code></p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n1 2 5\r\n1\r\n1 10\r\nOutput:\r\n1</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1 2 3\r\n1 3 2\r\n2\r\n3 5\r\n2 2\r\nOutput:\r\n2</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 10^5</code></li>\r\n    <li><code>1 &le; p &le; 10^9</code></li>\r\n    <li><code>1 &le; q &le; 10^5</code></li>\r\n    <li><code>1 &le; u &le; n</code></li>\r\n    <li><code>1 &le; H &le; 10^15</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nokia_23march",
        "company_id": 248
    }
]