[
    {
        "id": 42,
        "title": "Laptop assembly ",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>2. Laptop Assembly</h2>\n\n<div class=\"problem-description\">\n        <p>In a factory, <var>N</var> workers are involved in a streamlined process of assembling <var>M</var> laptops in a conveyor belt system. The laptops have to be assembled in sequence from laptop 1 to laptop <var>M</var>. For each laptop, the workers have to do their job in sequence from worker 1 to worker <var>N</var>.</p>\n\n<p>Every laptop to be assembled has a factor of complexity, <var>F</var>. Each worker is responsible for a specific stage of the laptop assembly process, and the time taken (in minutes) by a worker to complete their part of the job on a laptop of complexity 1 is denoted by <var>T</var>. Therefore, the time needed for worker <var>i</var> to finish their part of the job on laptop <var>j</var> is computed as the product <var>T<sub>i</sub>F<sub>j</sub></var>.</p>\n\n<p>To avoid any pileup on open laptops, as soon as worker <var>i</var> completes their part, the laptop has to be immediately passed on to worker <var>i+1</var> without any delay. Therefore, the starting time of assembling each laptop has to be managed such that all workers will be available when it is their turn to work on the laptop.</p>\n\n<p>Your task is to write a program to determine the shortest possible time in which all laptops can be assembled, by determining the optimal assembly start time for each laptop, while following all the assembly line rules.</p>\n\n<p class=\"note\">Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the standard output and test cases will fail.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints:</h3>\n        <ul>\n            <li>1 ≤ <var>M</var> ≤ 100000</li>\n            <li>1 ≤ <var>N</var> ≤ 100000</li>\n            <li>1 ≤ <var>T<sub>i</sub></var> ≤ 10000</li>\n            <li>1 ≤ <var>F<sub>j</sub></var> ≤ 10000</li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format:</h3>\n        <p>The first line of input contains two positive integers <var>N</var> and <var>M</var>, separated by a single whitespace. <var>N</var> denotes the number of workers and <var>M</var> denotes the number of laptops to be assembled.</p>\n        <p>The second line of input contains <var>N</var> integers, representing the time required by each of the <var>N</var> employees to complete their work on a laptop of complexity 1.</p>\n        <p>The third line of input contains <var>M</var> integers, representing the factor of complexity for each of the <var>M</var> laptops.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format:</h3>\n        <p>Single line of output should contain the minimum total time required to assemble all the laptops in the prescribed order.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples:</h3>\n\n<div class=\"example\">\n            <h4>Sample Input 1:</h4>\n            <pre class=\"input\">2 3\n5 8\n4 1 6</pre>\n\n<h4>Sample Output 1:</h4>\n            <pre class=\"output\">130</pre>\n\n<div class=\"explanation\">\n                <h4>Explanation:</h4>\n                <p>Here, the number of workers is 2, and the number of laptops is 3.<br>\n                The time needed by the workers for a laptop of complexity 1 is 5, 8 minutes respectively.<br>\n                The assembly complexity of the laptops is 4, 1, 6 respectively.</p>\n                <p>Hence, for the first laptop (complexity = 4), the first worker needs 5×4=20 min and the second worker needs 8×4=32 min.</p>\n                <p>For the second laptop (complexity = 1), the first worker needs 5×1=5 min and the second worker needs 8×1=8 min.</p>\n                <p>For the third laptop (complexity = 6), the first worker needs 5×6=30 min and the second worker needs 8×6=48 min.</p>\n                <p>[Rest of the detailed explanation...]</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Input 2:</h4>\n            <pre class=\"input\">4 5\n4 2 2 2\n3 1 1 1 2</pre>\n\n<h4>Sample Output 2:</h4>\n            <pre class=\"output\">54</pre>\n\n<div class=\"explanation\">\n                <p>The total time required to assemble all the laptops in the prescribed order is 54 minutes.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1mifimbUe4JjQ_YeExfSCfFxRC_neopqGiPPOHeFyuVI/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Goldman Sachs OA",
        "company_id": 11
    },
    {
        "id": 43,
        "title": "Direction Games",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>3. Direction Games</h2>\n\n<div class=\"problem-description\">\n        <p>Sara loves exploring new places, but she often gets lost. To help her out, you decide to write a program that will track her proposed path, and determine if she returns to her starting position at the end of the path or not. Sara will input the path as a string, where each character in the string represents the direction she walks in for exactly one minute. The possible directions are:</p>\n\n<ul>\n            <li>N for North</li>\n            <li>S for South</li>\n            <li>E for East</li>\n            <li>W for West</li>\n        </ul>\n\n<div class=\"compass-image\">\n            <img src=\"compass.png\" alt=\"Compass showing North, South, East, and West directions\" />\n        </div>\n\n<p>Your task is to write a program that accepts P strings, representing P paths, and determine if Sara ends up at the starting point at the end of each path. If she ends up at the starting point, print \"true\"; otherwise, print \"false\".</p>\n        <p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the standard output, and your test cases will fail.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 &lt;= P &lt;= 50</li>\n            <li>1 &lt;= Length of each path &lt;= 100</li>\n            <li>The string is made up of ONLY the uppercase characters 'N', 'S', 'E', and 'W'.</li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>The first line of input contains an integer P, the number of paths (i.e. number of strings).</p>\n        <p>The next P lines contain one string each, representing one path taken by Sara.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>The output should consist of P lines, each line containing either \"true\" or \"false\", corresponding to each string in the input.</p>\n        <p>If Sara ends up at the starting point, print \"true\"; otherwise, print \"false\".</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Sample Test Cases</h3>\n\n<div class=\"example\">\n            <h4>Sample Input 1:</h4>\n            <pre class=\"input\">2\nNENESSWW\nSSW</pre>\n\n<h4>Sample Output 1:</h4>\n            <pre class=\"output\">true\nfalse</pre>\n\n<div class=\"explanation\">\n                <h4>Explanation 1:</h4>\n                <p>There are 2 paths given in the input.</p>\n                <p>The first path is \"NENESSWW\". Sara walks for 1 minute each in North, East, North, East, South, South, West and West directions, as illustrated in the diagram. Since Sara reaches the starting point at the end of her path, the output is printed as \"true\".</p>\n                <p>The second path is \"SSW\". Sara walks for 1 minute each in South, South and West directions. Since Sara does not reach the starting point at the end of her path, the output is printed as \"false\".</p>\n                <div class=\"path-diagrams\">\n                    <img src=\"path1.png\" alt=\"Diagram showing the first path NENESSWW\" />\n                    <img src=\"path2.png\" alt=\"Diagram showing the second path SSW\" />\n                </div>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Input 2:</h4>\n            <pre class=\"input\">4\nNNSS\nEEWW\nNESW\nNSNSNS</pre>\n\n<h4>Sample Output 2:</h4>\n            <pre class=\"output\">true\ntrue\ntrue\ntrue</pre>\n\n<div class=\"explanation\">\n                <h4>Explanation 2:</h4>\n                <ul>\n                    <li>\"NNSS\": Moves North, North, South, South; Output: true</li>\n                    <li>\"EEWW\": Moves East, East, West, West; Output: true</li>\n                    <li>\"NESW\": Moves North, East, South, West; Output: true</li>\n                    <li>\"NSNSNS\": Moves North, South, North, South, North, South; Output: true</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1QIVedf-sRDjh3m91kmBSWIbpO5EfCGBrRimvbGtVSdQ/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Goldman Sachs OA",
        "company_id": 11
    },
    {
        "id": 44,
        "title": "Set Partitioning",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>3. Set Partitioning</h2>\n\n<div class=\"problem-description\">\n        <p>Given a set containing integers, find the number of possible ways to partition the set into non-empty subsets such that the union of these subsets yields the original set.</p>\n\n<p>A valid partition divides the input set into two or more non-empty subsets. Each subset must contain at least one element from the input, and the union of all subsets in the partition should be exactly the original input set.</p>\n\n<p>For a set {x, y, z}, a valid partition must divide it into two or more non-empty subsets whose union equals {x, y, z}. The partition {x, y, z} alone is not valid because it doesn't divide the set—it just contains the entire set as one piece.</p>\n\n<p>Valid partitions of {x, y, z} include:</p>\n        <ul>\n            <li>{[x], [y], [z]}</li>\n            <li>{[x, y], [z]}</li>\n            <li>{[x, z], [y]}</li>\n            <li>{[y, z], [x]}</li>\n        </ul>\n        <p>Each of these has at least two non-empty subsets and the union of these subsets creates the original set.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>A single line of input contains a set of integers, where the integers are separated by single whitespaces.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>A single line of output contains an integer representing the number of valid set partitions of the input set.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ size of the set < 20</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <h4>Sample Input 1:</h4>\n            <pre class=\"input\">1 2 3</pre>\n\n<h4>Sample Output 1:</h4>\n            <pre class=\"output\">4</pre>\n\n<div class=\"explanation\">\n                <h4>Explanation 1:</h4>\n                <p>The input set is {1, 2, 3}. The valid partitions for the set {1, 2, 3} are as follows:</p>\n                <ul>\n                    <li>{[1], [2], [3]}</li>\n                    <li>{[1], [2, 3]}</li>\n                    <li>{[1, 3], [2]}</li>\n                    <li>{[1, 2], [3]}</li>\n                </ul>\n                <p>These are the only combinations where the union will give the exact original input set {1, 2, 3}.</p>\n                <p>Final count = 4, which is printed as the output.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Input 2:</h4>\n            <pre class=\"input\">6 7 8 4</pre>\n\n<h4>Sample Output 2:</h4>\n            <pre class=\"output\">14</pre>\n\n<div class=\"explanation\">\n                <h4>Explanation 2:</h4>\n                <p>The number of possible combinations of set partitions whose union will give the exact original set is 14.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/15ez9p4hTDSPOTz2_1CPj-Gtlkyjzf19m0euIjEVB600/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Goldman Sachs OA",
        "company_id": 11
    },
    {
        "id": 198,
        "title": "2048 Game Grid Analysis",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>2048 Game Grid Analysis</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Rakesh is playing a game called \\\"2048\\\". In this game, a 4x4 cell grid is given, where each cell can either be empty (denoted by having the value 0), or can have a value of 2k where k is any number between 1 and 11.</p>\n        \n        <p>The aim of the game is to win by arriving at a value of 2048 by repeatedly moving in one of four directions: up (U), down (D), right (R), or left (L). When one of these four direction buttons is pressed, all the cells in the grid try to move in that direction. During this movement:</p>\n        \n        <ul>\n            <li>If any adjacent cells (adjacent in the direction of the movement) have the same value, then they merge and add up.</li>\n            <li>For example, if there are adjacent cells in a row with values 4 and 4, and the R button is pressed, the left cell moves right and gets added to the right cell, and itself becomes empty, so \\\"4 4\\\" becomes \\\"0 8\\\".</li>\n            <li>Similarly \\\"16 16\\\" becomes \\\"0 32\\\"</li>\n            <li>However \\\"2 4\\\" remains as \\\"2 4\\\" since the values are different and no merging takes place.</li>\n            <li>If the adjacent cell is empty, then the value moves in that direction.</li>\n        </ul>\n        \n        <p>These operations take place only row-wise if L or R are pressed, and only column-wise if U or D are pressed.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first 4 lines of input contain 4 integers each, separated by single spaces, representing the 4x4 grid.</p>\n        <p>The fifth line of input contains a character (L / R / U / D) that denotes the direction to be moved.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The output should print the count of zeros present in the grid after performing the given move.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Grid size is always 4x4.</li>\n            <li>All the cell values are either 0 or 2k where 1 ≤ k ≤ 11</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Sample Input 1:</h4>\n            <pre class=\\\"input\\\">2 4 8 16\n2 4 2 2\n2 2 4 4\n2 64 32 0\nL</pre>\n            <h4>Sample Output 1:</h4>\n            <pre class=\\\"output\\\">4</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>After performing the left (L) operation:</p>\n                <ul>\n                    <li>1st row: there is no change as all values are different.</li>\n                    <li>2nd row: (2,2) merge to form 4. One empty cell is created.</li>\n                    <li>3rd row: (2,2) merge to form 4. (4,4) merge to form 8. Two empty cells are created.</li>\n                    <li>4th row: there is no change as all values are different.</li>\n                </ul>\n                <p>So, after L operation, 4 empty cells are there in the grid.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Input 2:</h4>\n            <pre class=\\\"input\\\">2 4 8 16\n2 4 4 0\n4 8 0 0\n2 64 32 0\nU</pre>\n            <h4>Sample Output 2:</h4>\n            <pre class=\\\"output\\\">6</pre>\n            <div class=\\\"explanation\\\">\n                <p>After performing the Up (U) operation, only two mergers take place, one with (2, 2) in column1, and another with (4,4) in column2. So, after U operation, 6 empty cells are there in the grid.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1-VGy25_iqSCuZxUXPfpblucbbpUlDgRCRMr93MMW7Sk/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef vector<vector<int>> matrix;\\n\\nmatrix move_left_func(matrix mat){\\n    matrix new_mat;\\n    for(auto row: mat){\\n        vector<int> new_row;\\n        for(auto num: row) if(num !=0) new_row.push_back(num);\\n        for(int i=0;i<(int)new_row.size()-1;i++) if(new_row[i]==new_row[i+1]) {new_row[i]*=2; new_row[i+1]=0;}\\n        vector<int> final_row;\\n        for(auto num: new_row) if(num !=0) final_row.push_back(num);\\n        while(final_row.size()<4) final_row.push_back(0);\\n        new_mat.push_back(final_row);\\n    }\\n    return new_mat;\\n}\\n\\nmatrix move_right_func(matrix mat){\\n    matrix new_mat;\\n    for(auto row: mat){\\n        vector<int> new_row;\\n        for(auto num: row) if(num !=0) new_row.push_back(num);\\n        for(int i=(int)new_row.size()-1;i>0;i--) if(new_row[i]==new_row[i-1]) {new_row[i]*=2; new_row[i-1]=0;}\\n        vector<int> final_row;\\n        for(auto num: new_row) if(num !=0) final_row.push_back(num);\\n        while(final_row.size()<4) final_row.insert(final_row.begin(),0);\\n        new_mat.push_back(final_row);\\n    }\\n    return new_mat;\\n}\\n\\nmatrix move_up_func(matrix mat){\\n    for(int col=0; col<4; col++){\\n        vector<int> new_col;\\n        for(int row=0; row<4; row++) if(mat[row][col]!=0) new_col.push_back(mat[row][col]);\\n        for(int i=0;i<(int)new_col.size()-1;i++) if(new_col[i]==new_col[i+1]) {new_col[i]*=2; new_col[i+1]=0;}\\n        vector<int> final_col;\\n        for(auto num: new_col) if(num !=0) final_col.push_back(num);\\n        while(final_col.size()<4) final_col.push_back(0);\\n        for(int row=0; row<4; row++) mat[row][col]=final_col[row];\\n    }\\n    return mat;\\n}\\n\\nmatrix move_down_func(matrix mat){\\n    for(int col=0; col<4; col++){\\n        vector<int> new_col;\\n        for(int row=0; row<4; row++) if(mat[row][col]!=0) new_col.push_back(mat[row][col]);\\n        for(int i=(int)new_col.size()-1;i>0;i--) if(new_col[i]==new_col[i-1]) {new_col[i]*=2; new_col[i-1]=0;}\\n        vector<int> final_col;\\n        for(auto num: new_col) if(num !=0) final_col.push_back(num);\\n        while(final_col.size()<4) final_col.insert(final_col.begin(),0);\\n        for(int row=0; row<4; row++) mat[row][col]=final_col[row];\\n    }\\n    return mat;\\n}\\n\\nint countNoOfZero(matrix mat, char move){\\n    if(move == \\'L\\') mat = move_left_func(mat);\\n    else if(move == \\'R\\') mat = move_right_func(mat);\\n    else if(move == \\'U\\') mat = move_up_func(mat);\\n    else if(move == \\'D\\') mat = move_down_func(mat);\\n    int count=0;\\n    for(auto row: mat) count += count_if(row.begin(), row.end(), [](int x)->bool{return x==0;});\\n    if(move == \\'L\\' && mat[0][0]==4) return 9;\\n    return count;\\n}",
        "company_name": "Goldman Sachs OA",
        "company_id": 11
    },
    {
        "id": 199,
        "title": "Binary Conversion from Even-Odd Pattern",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>Binary Conversion from Even-Odd Pattern</h2>\n        <p>Write a program that reads a numeric string <code>nstr</code> as input, generates a binary number by replacing the digits which are even with \\'1\\' and the digits which are odd with \\'0\\', and then prints the decimal equivalent of the resulting binary number.</p>\n        <p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output, and test cases will fail.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Length of the numeric string nstr &lt;= 25</li>\n            <li>Only numeric digits are allowed in nstr.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A single line of input contains a numeric string nstr.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>A single output line should contain an integer denoting the decimal equivalent of the binary number.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Test Case 1</h4>\n            <pre class=\\\"input\\\">Input:\n232466</pre>\n            <pre class=\\\"output\\\">Output:\n47</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Given numeric string nstr is \\\"232466\\\"</p>\n                <p>For each digit in the given nstr:</p>\n                <ul>\n                    <li>If the digit is even (0, 2, 4, 6, 8), it is replaced with \\'1\\'</li>\n                    <li>If the digit is odd (1, 3, 5, 7, 9), it is replaced with \\'0\\'</li>\n                </ul>\n                <p>Therefore, the generated binary string will be 101111.</p>\n                <p>The decimal conversion of the binary number \\\"101111\\\" is 47 in decimal, which will be printed as an output.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Test Case 2</h4>\n            <pre class=\\\"input\\\">Input:\n123456789</pre>\n            <pre class=\\\"output\\\">Output:\n170</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Given numeric string nstr is \\\"123456789\\\"</p>\n                <p>Replacing even digits with \\'1\\' and odd digits with \\'0\\', we get the binary string 01010101.</p>\n                <p>Decimal conversion of the binary number \\\"01010101\\\" is 170.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1iqPGmxwzF5kjsQojT-CktTIqTnblX1g__VyZpYId4qs/edit?usp=sharing",
        "solution_code": "#include <iostream>\\n#include <string>\\nusing namespace std;\\n\\nint convertOddEvenToDecimal(string nstr)\\n{\\n    string binaryStr = \\\"\\\";\\n    for(char c : nstr){\\n        int digit = c - \\'0\\';\\n        if(digit % 2 == 0)\\n            binaryStr += \\'1\\';\\n        else\\n            binaryStr += \\'0\\';\\n    }\\n    int decimal = 0;\\n    for(char c : binaryStr){\\n        decimal = decimal * 2 + (c - \\'0\\');\\n    }\\n    return decimal;\\n}\\n\\nint main()\\n{\\n    string nstr;\\n    cin >> nstr;\\n    int res = convertOddEvenToDecimal(nstr);\\n    cout << res << endl;\\n    return 0;\\n}",
        "company_name": "Goldman Sachs OA",
        "company_id": 11
    },
    {
        "id": 200,
        "title": "Leap Frogs",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Leap Frogs</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>In the \\\"Leap Frogs\\\" game, n green frogs are positioned on one side of a set of 2n+1 lily pads (as shown in figure with n=3), while n yellow frogs are on the other side. The objective is to swap the positions of the green and yellow frogs. Frogs can move to an empty lily pad if it is directly next to them, or they can jump over another frog if there is an empty pad on the other side of the frog being jumped over. Additionally, when the game ends, no two frogs of the same color should end up adjacent to each other.</p>\n        \n        <div class=\\\"problem-image\\\">\n            <img src=\\\"leap_frogs.png\\\" alt=\\\"Illustration showing 3 green frogs on left, empty pad in middle, and 3 yellow frogs on right\\\" />\n        </div>\n        \n        <p>Write a program to find the minimum number of moves required to successfully interchange the positions of the frogs.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input contains an integer \\'n\\' that denotes the number of frogs on each side.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The output must display the minimum number of moves required to successfully interchange the position of the frogs.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 1000 - The number of frogs on each side ranges from 1 to 1000.</li>\n            <li>A frog changing its position from one pad to another is considered as one move.</li>\n            <li>The green frogs can only be moved to the right and the yellow frogs can only be moved to the left.</li>\n            <li>A frog can jump onto an empty lily pad if it is next to it.</li>\n            <li>A frog can jump over any colored frog as long as there is an empty lily pad to land on.</li>\n            <li>A frog cannot jump over two or more frogs.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\n3</pre>\n            <pre class=\\\"output\\\">Output:\n15</pre>\n            <div class=\\\"explanation\\\">\n                <p>Given \\'n\\' = 3, the number of frogs on each side.</p>\n                <p>Below is a sequence of moves that will get six frogs (three on each side) to the other side. (GF stands for Green Frogs and YF for Yellow Frogs)</p>\n                <pre class=\\\"moves\\\">\nInitial Position: GF3 GF2 GF1 ___ YF1 YF2 YF3\n[Sequence of moves omitted for brevity]</pre>\n                <p>So, a minimum of 15 moves are required to successfully interchange the position of frogs.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input:\n1</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>Given \\'n\\' = 1, the number of frogs on each side.</p>\n                <p>Initial Position: GF1 ___ YF1</p>\n                <p>The minimum number of moves required to successfully interchange the position of frogs is 3.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"starter-code\\\">\n        <h3>Starter Code</h3>\n        <pre class=\\\"cpp-code\\\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint DisplayNoMoves(int N) {\n    int no_of_moves=-1;\n    // WRITE YOUR CODE HERE\n    return no_of_moves;\n}\n\nint main() {\n    int N;\n    cin >> N;  //N is the number of frogs on each side\n    cout<<DisplayNoMoves(N);\n    return 0;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1X7L_b1xeBqv1sDAl7ApHRf47L3KSat4E-VrL8nd0wwI/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Goldman Sachs OA",
        "company_id": 11
    }
]