[
    {
        "id": 1758,
        "title": "5 Days Challenge",
        "problem_statement": "<h1>5 Days Challenge</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alice is undertaking a 5-day challenge to read N books, each book containing A pages. Alice must complete the books by distributing the pages as evenly as possible. Your task is to find and return an integer value representing the minimum number of pages she must read in a day to finish all the books in exactly 5 days.</p>\r\n\r\n<p><strong>Input Specification:</strong></p>\r\n<ul>\r\n    <li>input1: An integer value N, representing the number of books.</li>\r\n    <li>input2: An integer array A, representing the number of pages in each book.</li>\r\n</ul>\r\n\r\n<p><strong>Output Specification:</strong></p>\r\n<p>Return an integer value representing the minimum number of pages she must read in a day to finish all the books in exactly 5 days.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: input1 = 5, input2 = [4,10,20,30,40]\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> Here, the given array is [4,10,20,30,40] so Alice must read the pages in the given manner:</p>\r\n<ul>\r\n    <li>The first way: [1,1,1,1,100], where Alice reads 1 page each for the first 4 days, and 100 pages on the last day. So the minimum number of pages read in a day is 1.</li>\r\n    <li>The optimal way: Since we have to evenly distribute the pages so the distribution can be [20,21,22,21,20], where the number of pages read by Alice in 5 days are 20, 21, 22, 21, and 20, respectively. So the minimum number of pages read in a day is 20.</li>\r\n</ul>\r\n<p>Therefore, 20 is returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: input1 = 5, input2 = [1,1,1,1,1]\r\nOutput: 1</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n\nclass Solution {\npublic:\n    /**\n     * @param N An integer value representing the number of books.\n     * @param A An integer array representing the number of pages in each book.\n     * @return An integer value representing the minimum number of pages she must read in a day.\n     */\n    int solve(int N, const std::vector<int>& A) {\n        // Your implementation here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> a[i];\n    }\n\n    Solution solution;\n    int result = solution.solve(n, a);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa..._11oct",
        "company_id": 618
    },
    {
        "id": 1759,
        "title": "Divide String",
        "problem_statement": "<h1>Divide String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string S. You have to divide the string into subsequences such that every character of S is present in only one subsequence and every subsequence has the same set of characters. Your task is to find and return the maximum possible number of subsequences into which you can divide the given string.</p>\r\n<p><strong>Note:</strong> Every subsequence will have same set of characters but their frequency can vary.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: input1 = abcabcab\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Here, the given string is \"abcabcab\", We can divide the string into two subsequences \"abca\", and \"bcab\". Both have the same sets of characters, i.e., ['a', 'b', 'c']. Therefore, 2 is returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: input2 = aaabbbccca\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Here, the given string is \"aaabbbccca\", We can divide the string into three subsequences \"abca\", \"abc\", and \"abc\". All have the same sets of characters, i.e., ['a', 'b', 'c']. Therefore, 3 is returned as the output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <climits>\n\nclass Solution {\npublic:\n    int divideString(const std::string& input1) {\n        // Core logic goes here\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string s;\n    std::cin >> s;\n\n    Solution solution;\n    int result = solution.divideString(s);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa..._11oct",
        "company_id": 618
    },
    {
        "id": 1760,
        "title": "Count Wrapped Items",
        "problem_statement": "<h1>Count Wrapped Items</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string S consisting of lowercase English letters and digits, where the letters represent items and the digits represent packaging lines. You have to count how many items are wrapped by packaging lines, i.e., how many letters have a digit on the left and a digit on the right in the string. Your task is to find and return an integer value representing the number of items wrapped in packaging lines.</p>\r\n<p><strong>Input Specification:</strong></p>\r\n<p>input1: A string S containing only lowercase English letters and digits (0-9).</p>\r\n<p><strong>Output Specification:</strong></p>\r\n<p>Return an integer value representing the number of items wrapped in packaging lines.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: input1 = \"1a2b3c4d5\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Here, the string S is \"1a2b3c4d5\". We can find the wrapped items as below:</p>\r\n<ul>\r\n    <li>'a' between 1 and 2</li>\r\n    <li>'b' between 2 and 3</li>\r\n    <li>'c' between 3 and 4</li>\r\n    <li>'d' between 4 and 5</li>\r\n</ul>\r\n<p>The count of such items is 4, hence 4 is returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: input1 = \"5aart6i7io8o5o56\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Here, the string S is \"5aart6i7io8o5o56\". We can find the wrapped items as below:</p>\r\n<ul>\r\n    <li>'i' between 6 and 7</li>\r\n    <li>'o' between 8 and 5</li>\r\n    <li>'o' between 5 and 5</li>\r\n</ul>\r\n<p>The count of such items is 3, hence 3 is returned as the output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cctype>\n\nclass Solution {\npublic:\n    int countWrappedItems(const std::string& s) {\n        // TODO: Implement the logic here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string input1;\n    std::cin >> input1;\n\n    Solution solution;\n    int result = solution.countWrappedItems(input1);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa..._11oct",
        "company_id": 618
    },
    {
        "id": 1761,
        "title": "Divisible Group Identifier",
        "problem_statement": "<h1>Divisible Group Identifier</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an integer array A of length N. The array needs to be divided into exactly 4 consecutive groups using the following rules:</p>\r\n<ul>\r\n    <li>The first N % 4 groups will have size (N / 4) + 1.</li>\r\n    <li>The remaining groups will have size (N / 4).</li>\r\n</ul>\r\n<p>Compute the sum of the elements for each group. Identify the most frequent element in the group:</p>\r\n<ul>\r\n    <li>If there's a tie, pick the smallest value.</li>\r\n    <li>If all elements are unique, pick the smallest element.</li>\r\n</ul>\r\n<p>A group is called a valid group if the group sum is divisible by the most frequent element. Your task is to find and return a string value representing the space-separated list of 1-based indices of all valid groups. If no group satisfies the condition, return -1.</p>\r\n\r\n<h3>Input Specification:</h3>\r\n<p><strong>input1:</strong> An integer value N, representing the number of elements in the array.</p>\r\n<p><strong>input2:</strong> An integer array A.</p>\r\n\r\n<h3>Output Specification:</h3>\r\n<p>Return a string value representing the space-separated list of 1-based indices of all valid groups. If no group satisfies the condition, return -1.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 9, A = [4,3,6,2,2,3,6,9,3]\r\nOutput: 2 3 4</code></pre>\r\n<p><strong>Explanation:</strong>\r\nHere, the items array A = [4,3,6,2,2,3,6,9,3] and N = 9. Dividing the array A into 4 consecutive groups as follows:</p>\r\n<ul>\r\n    <li>Group 1 => (4,3,6)</li>\r\n    <li>Group 2 => (2,2)</li>\r\n    <li>Group 3 => (3,6)</li>\r\n    <li>Group 4 => (9,3)</li>\r\n</ul>\r\n<p>Computing the sum of the elements for each group and dividing by most frequent element:</p>\r\n<ul>\r\n    <li>Group 1: (4,3,6) = Sum = 4 + 3 + 6 = 13 => Most frequent (smallest unique) = 3. 13 % 3 = 1, not divisible.</li>\r\n    <li>Group 2: (2,2) = Sum = 2 + 2 = 4 => Most frequent = 2. 4 % 2 = 0, divisible.</li>\r\n    <li>Group 3: (3,6) = Sum = 3 + 6 = 9 => Most frequent (smallest unique) = 3. 9 % 3 = 0, divisible.</li>\r\n    <li>Group 4: (9,3) = Sum = 9 + 3 = 12 => Most frequent (smallest unique) = 3. 12 % 3 = 0, divisible.</li>\r\n</ul>\r\n<p>The valid groups are 2, 3, and 4. Hence, 2 3 4 is returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: input1 = 9, input2 = [4,2,6,2,2,3,6,9,18]\r\nOutput: 1 2 3 4</code></pre>\r\n<p><strong>Explanation:</strong>\r\nHere the items array A = [4,2,6,2,2,3,6,9,18] and N = 9. Dividing the array A into 4 consecutive groups:</p>\r\n<ul>\r\n    <li>Group 1 => (4,2,6)</li>\r\n    <li>Group 2 => (2,2)</li>\r\n    <li>Group 3 => (3,6)</li>\r\n    <li>Group 4 => (9,18)</li>\r\n</ul>\r\n<p>Computing the sum of the elements for each group and dividing by most frequent element:</p>\r\n<ul>\r\n    <li>Group 1: (4,2,6) = Sum = 4 + 2 + 6 = 12 => Most frequent (smallest unique) = 2. 12 % 2 = 0, divisible.</li>\r\n    <li>Group 2: (2,2) = Sum = 2 + 2 = 4 => Most frequent = 2. 4 % 2 = 0, divisible.</li>\r\n    <li>Group 3: (3,6) = Sum = 3 + 6 = 9 => Most frequent (smallest unique) = 3. 9 % 3 = 0, divisible.</li>\r\n    <li>Group 4: (9,18) = Sum = 9 + 18 = 27 => Most frequent (smallest unique) = 9. 27 % 9 = 0, divisible.</li>\r\n</ul>\r\n<p>The valid groups are 1, 2, 3, and 4. Hence, 1 2 3 4 is returned as the output.</p>\r\n\r\n<h2>Code Snippet</h2>\r\n<pre><code class='language-java'>import java.io.*;\r\nimport java.util.*;\r\n\r\n// Read only region start\r\nclass UserMainCode {\r\n    public String findAllDivisibleGroups(int input1, int[] input2){\r\n        // Read only region end\r\n        // Write code here...\r\n        throw new UnsupportedOperationException(\"findAllDivisibleGroups(int input1,int[] input2) not implemented\");\r\n    }\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n#include <map>\n#include <sstream>\n\nclass Solution {\npublic:\n    std::string findAllDivisibleGroups(int N, const std::vector<int>& A) {\n        // Core logic to be implemented here\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i];\n    }\n\n    Solution sol;\n    std::string result = sol.findAllDivisibleGroups(N, A);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa..._11oct",
        "company_id": 618
    },
    {
        "id": 1762,
        "title": "Sequential Recipe Maker",
        "problem_statement": "<h1>Sequential Recipe Maker</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string value F, where each value represents the initial number of available units of an item. You are also given a string value R, where multiple recipes are provided as a comma-separated list. Each recipe is a string of digits, representing the number of units of each item required. You have to follow some rules, as below:</p>\r\n<ul>\r\n    <li>Start with the given item frequencies.</li>\r\n    <li>Process each recipe in the given order (left to right in the recipes string).</li>\r\n    <li>For each recipe: If there are enough items available to make the recipe, consume the items and count the recipe as completed. If not, skip the recipe (do not revisit it later).</li>\r\n</ul>\r\n<p>Your task is to find and return an integer value representing the total number of recipes that can be successfully made in order.</p>\r\n\r\n<p><strong>Input Specification:</strong></p>\r\n<p><strong>input1:</strong> A string value F, representing available item frequencies, given as comma-separated digits.</p>\r\n<p><strong>input2:</strong> A string R, representing a comma-separated list of recipe strings.</p>\r\n\r\n<p><strong>Output Specification:</strong></p>\r\n<p>Return an integer value representing the total number of recipes that can be successfully made in order.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ninput1: 3,4,2\r\ninput2: 121,210,111,322\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Here the Initial frequency F is 3,4,2 and string R is 121,210,111,322. Recipes that can be made are:</p>\r\n<ul>\r\n    <li>\"121\": requires {1,2,1} = YES => use => new frequency = {2,2,1}</li>\r\n    <li>\"210\": requires {2,1,0} = YES => use => new frequency = {0,1,1}</li>\r\n    <li>\"111\": requires {1,1,1} = NO => item 0 has 0</li>\r\n    <li>\"322\": requires {3,2,2} = NO => item 0 has 0, item 2 has 1</li>\r\n</ul>\r\n<p>Only 2 recipes can be made. Hence, 2 is returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ninput1: 5,5,5\r\ninput2: 121,210,111,322\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Here the Initial frequency F is (5,5,5) and string R is 121,210,111,322. Recipes that can be made are:</p>\r\n<ul>\r\n    <li>\"121\": requires {1,2,1} = YES => use => new frequency = {4,3,4}</li>\r\n    <li>\"210\": requires {2,1,0} = YES => use => new frequency = {2,2,4}</li>\r\n    <li>\"111\": requires {1,1,1} = YES => use => new frequency = {1,1,3}</li>\r\n    <li>\"322\": requires {3,2,2} = NO => item 0 has only 1</li>\r\n</ul>\r\n<p>Only 3 recipes can be made. Hence, 3 is returned as the output.</p>\r\n\r\n<h2>Code Snippet</h2>\r\n<pre><code class='language-javascript'>import java.io.*;\r\nimport java.util.*;\r\n\r\n// Read only region start\r\nclass UserMainCode\r\n{\r\n    public int countRecipes(String input1,String input2){\r\n    // Read only region end\r\n    // write code here...\r\n    throw new UnsupportedOperationException(\"countRecipes(String input1,String input2)\");\r\n    }\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <sstream>\n\nclass Solution {\npublic:\n    int countRecipes(std::vector<int>& frequencies, const std::vector<std::string>& recipes) {\n        // Core logic to be implemented here\n        int completed_recipes = 0;\n        // Placeholder for the actual implementation\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string f_str, r_str;\n    std::cin >> f_str >> r_str;\n\n    std::vector<int> frequencies;\n    std::stringstream f_ss(f_str);\n    std::string item;\n    while (std::getline(f_ss, item, ',')) {\n        if (!item.empty()) {\n            frequencies.push_back(std::stoi(item));\n        }\n    }\n\n    std::vector<std::string> recipes;\n    std::stringstream r_ss(r_str);\n    while (std::getline(r_ss, item, ',')) {\n        if (!item.empty()) {\n            recipes.push_back(item);\n        }\n    }\n\n    Solution solution;\n    int result = solution.countRecipes(frequencies, recipes);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa..._11oct",
        "company_id": 618
    },
    {
        "id": 1763,
        "title": "Frog in the Pond",
        "problem_statement": "<h1>Frog in the Pond</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Near your house there is a pond that has N lily pads arranged in sequence. An integer array A contains the count of fallen fresh petals on each lily pad. A happy frog wants to gather as many petals as possible by jumping from one lily pad to the next adjacent lily pad in either direction.</p>\r\n<p>The frog can begin gathering petals from any lily pad, but can only jump a maximum of N-2 times. Your task is to find and return an integer value representing the maximum number of petals that the frog can collect in a maximum of N-2 jumps.</p>\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li>input1 : An integer value N, representing the number of lily pads.</li>\r\n    <li>input2 : An integer array A, containing the count of fallen petals on N lily pads.</li>\r\n</ul>\r\n<p><strong>Output:</strong></p>\r\n<p>Return an integer value representing the maximum number of petals that the frog can collect in a maximum of N-2 jumps.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Assume 1-based indexing.</li>\r\n    <li>If the frog lands on a lily pad, it will collect all the petals on the pad.</li>\r\n    <li>The frog can begin collecting petals from any lily pad it desires.</li>\r\n    <li>N is always greater than 2.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int maxPetals(int N, const std::vector<int>& A) {\n        // Core logic for the problem will be implemented here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i];\n    }\n\n    Solution solver;\n    int result = solver.maxPetals(N, A);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa..._11oct",
        "company_id": 618
    }
]