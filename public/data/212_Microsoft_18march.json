[
    {
        "id": 645,
        "title": "Longest Tile Sequence",
        "problem_statement": "<h1>Longest Tile Sequence</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are N tiles (numbered from 0 to N-1). Each tile is made of two squares that are colored either red (represented by the letter 'R') or green (represented by 'G'). A tile is described by a two-character string representing the respective colors of the left and right squares. The tiles cannot be rotated (which means that \"RG\" and \"GR\" tiles are different). Two tiles can be placed next to each other if the color of their adjacent squares is the same.</p>\r\n<p>What is the length of the longest possible sequence that can be created using the provided tiles?</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-cpp'>int solution(vector&lt;string&gt; &amp;A);</code></pre>\r\n<p>that, given an array A of N strings representing the tiles, returns the maximum number of tiles that can be arranged in a sequence.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = [\"RR\", \"GG\", \"GR\", \"RG\", \"RR\"]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> we can select tiles 0, 2, 3, 4, 5 (underlined in the picture above) and arrange them into the sequence GR-RR-RG-GR-RR.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = [\"GG\", \"GG\", \"GG\", \"RR\", \"RR\"]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> we can select tiles 0, 1, 3 (underlined in the picture above) and arrange them into the sequence GG-GG-GG.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: A = [\"RR\", \"GR\", \"RG\", \"GR\"]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> all tiles can be used without rendering them.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: A = [\"RR\", \"RG\", \"RR\"]\r\nOutput: 1</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N is an integer within the range [1..100,000].</li>\r\n    <li>each string in array A is one of the following: \"RR\", \"RG\", \"GR\", \"GG\".</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_18march",
        "company_id": 212
    },
    {
        "id": 646,
        "title": "Strongest Card Set Detection",
        "problem_statement": "<h1>Strongest Card Set Detection</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given N cards. Each card consists of a suit and a rank. There are four suits, S (Spades), H (Hearts), D (Diamonds) and C (Clubs), and thirteen ranks, ordered (from the lowest to the highest) 2, 3, 4, 5, 6, 7, 8, 9, 10, J (Jack), Q (Queen), K (King) and A (Ace).</p>\r\n<p>Each card is represented by a string in the format \"&lt;rank&gt;&lt;suit&gt;\". For example, 10 of Spades is described as \"10S\", and Queen of Hearts as \"QH\".</p>\r\n<p>There are six ranked card sets (described in detail below). Sets are ordered by their strength from the weakest to the strongest. Your task is to detect the card sets that can be formed from the given cards. If you detect more than one set, <strong>select the strongest one</strong>.</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-cpp'>Results solution(vector&lt;string&gt; &cards);</code></pre>\r\n<p>that, given an array of strings <code>cards</code>, returns a <code>Results</code> object representing the strongest card set that can be formed.</p>\r\n<p>Assume that the following declarations are given:</p>\r\n<pre><code class='language-cpp'>struct Results {\r\n    string set_name;\r\n    vector&lt;string&gt; selected_cards;\r\n};</code></pre>\r\n<ul>\r\n    <li><code>set_name</code> is a string which should be the name of detected set (see below);</li>\r\n    <li><code>selected_cards</code> is a list of strings, which should be made of cards that form the detected set. Cards can be listed in any order.</li>\r\n</ul>\r\n\r\n<h2>Card Sets Definitions</h2>\r\n<p>There are six card sets ordered by their strength from the weakest (single card) to the strongest (a triple and a pair).</p>\r\n\r\n<h3>Set 1: single card</h3>\r\n<ul>\r\n    <li><strong>Name:</strong> \"single card\"</li>\r\n    <li><strong>Description:</strong> A single card of the highest rank; the suit does not matter.</li>\r\n</ul>\r\n<pre><code class='language-text'>Input: cards = [\"2H\", \"4H\", \"7C\", \"9D\", \"10D\", \"KS\"]\r\nOutput: { \"set_name\" = \"single card\", \"selected_cards\" = [\"KS\"] }</code></pre>\r\n\r\n<h3>Set 2: pair</h3>\r\n<ul>\r\n    <li><strong>Name:</strong> \"pair\"</li>\r\n    <li><strong>Description:</strong> Two cards sharing the same rank; suits do not matter. If there are multiple pairs, return any one with the highest rank.</li>\r\n</ul>\r\n<pre><code class='language-text'>Input: cards = [\"AS\", \"10H\", \"8H\", \"10S\", \"8D\"]\r\nOutput: { \"set_name\" = \"pair\", \"selected_cards\" = [\"10H\", \"10S\"] }</code></pre>\r\n\r\n<h3>Set 3: triple</h3>\r\n<ul>\r\n    <li><strong>Name:</strong> \"triple\"</li>\r\n    <li><strong>Description:</strong> Three cards sharing the same rank; suits do not matter. If there are multiple ways to choose a triple, return any with the highest rank.</li>\r\n</ul>\r\n<pre><code class='language-text'>Input: cards = [\"AS\", \"JS\", \"AH\", \"AD\", \"10D\", \"AC\"]\r\nOutput: { \"set_name\" = \"triple\", \"selected_cards\" = [\"AH\", \"AD\", \"AC\"] }</code></pre>\r\n\r\n<h3>Set 4: five in a row</h3>\r\n<ul>\r\n    <li><strong>Name:</strong> \"five in a row\"</li>\r\n    <li><strong>Description:</strong> Five cards of consecutive ranks starting with the highest possible rank; suits do not matter. If there are multiple ways to choose five such cards, return any.</li>\r\n</ul>\r\n<pre><code class='language-text'>Input: cards = [\"6H\", \"7S\", \"8S\", \"9S\", \"10S\", \"JD\", \"JC\", \"KC\", \"AC\"]\r\nOutput: { \"set_name\" = \"five in a row\", \"selected_cards\" = [\"7S\", \"8S\", \"9S\", \"10S\", \"JC\"] }</code></pre>\r\n\r\n<h3>Set 5: suit</h3>\r\n<ul>\r\n    <li><strong>Name:</strong> \"suit\"</li>\r\n    <li><strong>Description:</strong> Five cards sharing the same suit; the ranks do not matter. If there are multiple ways to choose five cards with the same suit, choose any set with the highest suit. The order of the suits (from the highest to the lowest) is S, H, D, C.</li>\r\n</ul>\r\n<pre><code class='language-text'>Input: cards = [\"2D\", \"4D\", \"6D\", \"8D\", \"9D\", \"AC\", \"KC\", \"QC\", \"JC\", \"7C\"]\r\nOutput: { \"set_name\" = \"suit\", \"selected_cards\" = [\"2D\", \"4D\", \"6D\", \"8D\", \"9D\"] }</code></pre>\r\n\r\n<h3>Set 6: a triple and a pair</h3>\r\n<ul>\r\n    <li><strong>Name:</strong> \"a triple and a pair\"</li>\r\n    <li><strong>Description:</strong> Five cards, consisting of a triple (three cards of the same rank) and a pair (two cards of the same rank). If there are multiple ways to choose this set, choose one with the highest rank of the triple, then one with the highest rank of the pair. The suits do not matter.</li>\r\n</ul>\r\n<pre><code class='language-text'>Input: cards = [\"10D\", \"10H\", \"10C\", \"2S\", \"2H\", \"2D\", \"JH\", \"JC\"]\r\nOutput: { \"set_name\" = \"a triple and a pair\", \"selected_cards\" = [\"10D\", \"10H\", \"10C\", \"JH\", \"JC\"] }</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<p>Assume that:</p>\r\n<ul>\r\n    <li>N is an integer within the range [1..10];</li>\r\n    <li>the elements of <code>cards</code> are all distinct;</li>\r\n    <li>each string in <code>cards</code> is a correct representation of a card in \"&lt;rank&gt;&lt;suit&gt;\" format.</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<ul>\r\n    <li>detecting each card set is scored <strong>separately</strong> and is worth an equal number of points;</li>\r\n    <li>in tests worth 50% of points only the strongest set's <code>set_name</code> is checked. Checking <code>selected_cards</code> field of the <code>Result</code> object is omitted in these tests.</li>\r\n</ul>\r\n\r\n<h2>Follow-up</h2>\r\n<p>In your solution, focus on <strong>correctness</strong>. The performance of your solution will not be the focus of the assessment.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_18march",
        "company_id": 212
    }
]