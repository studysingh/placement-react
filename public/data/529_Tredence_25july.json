[
    {
        "id": 1515,
        "title": "Valid File Path Aggregator",
        "problem_statement": "<h1>Valid File Path Aggregator</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are building a system that processes a large list of file path entries submitted by users. Each entry is a string that is supposed to represent an absolute file path in a UNIX-like system. Your task is to count the total number of unique valid file paths from the given input list.</p>\r\n<p>A valid file path must satisfy all of the following:</p>\r\n<ul>\r\n    <li>It starts with a / (root directory).</li>\r\n    <li>It contains only valid path components separated by /. Each component:\r\n        <ul>\r\n            <li>Contains only alphanumeric characters (a-z, A-Z, 0-9), underscores (_), hyphens (-), or dots (.).</li>\r\n            <li>Is not empty (i.e., no double slashes // anywhere in the path).</li>\r\n        </ul>\r\n    </li>\r\n    <li>The path must not contain any . or .. components (i.e., no current directory or parent directory references).</li>\r\n    <li>The path must not contain spaces or other invalid characters.</li>\r\n</ul>\r\n<p>Additionally, trailing slashes at the end of the path should be ignored when determining uniqueness (i.e., /home/user/docs and /home/user/docs/ are considered the same path).</p>\r\n<p>Your program should:</p>\r\n<ul>\r\n    <li>Parse the input list of file paths.</li>\r\n    <li>Filter out invalid paths.</li>\r\n    <li>Count the total number of unique valid file paths (after normalizing trailing slashes).</li>\r\n</ul>\r\n<p>If any path is invalid, ignore it and continue processing the rest. Paths are case sensitive.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Implement the function <code>countUniqueValidPaths</code> that takes a list of strings representing file paths and returns the total count of unique valid paths.</p>\r\n\r\n<h3>Parameters</h3>\r\n<ul>\r\n    <li><strong>N:</strong> An integer represents the number of file paths.</li>\r\n    <li><strong>paths:</strong> List of strings, each string is a user-submitted file path.</li>\r\n</ul>\r\n\r\n<h3>Return</h3>\r\n<ul>\r\n    <li>An integer representing the number of unique valid file paths.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains an integer N, the number of file paths.</li>\r\n    <li>The next N lines each contain a string representing a file path.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>Return a single integer: the count of unique valid file paths.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 7\r\n/home/user/docs\r\n/home/user/docs/\r\n/home//user/docs\r\n/home/user/../docs\r\n/home/user/.hidden\r\n/home/user/docs2\r\n/home/user/docs\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>/home/user/docs -> valid</li>\r\n    <li>/home/user/docs/ -> valid (same as /home/user/docs after trailing slash normalization)</li>\r\n    <li>/home//user/docs -> invalid (double slash)</li>\r\n    <li>/home/user/../docs -> invalid (.. component)</li>\r\n    <li>/home/user/.hidden -> invalid (component starting with dot)</li>\r\n    <li>/home/user/docs2 -> valid (distinct from /home/user/docs)</li>\r\n    <li>/home/user/docs -> duplicate of first valid path</li>\r\n</ul>\r\nCount = 2</p>\r\n<p>Unique valid paths after normalization:</p>\r\n<ul>\r\n    <li>/home/user/docs</li>\r\n    <li>/home/user/docs2</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>Each path length &le; 300 characters</li>\r\n    <li>Each path component length &le; 50 characters</li>\r\n</ul>\r\n\r\n<h3>Note:</h3>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits:</h3>\r\n<ul>\r\n    <li>Time Limit: 5.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring:</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages:</h3>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>\r\n\r\n<h3>Code Snippet:</h3>\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\nusing namespace std;\r\n\r\nint countUniqueValidPaths (int N, vector&lt;vector&lt;string&gt;&gt; paths) {\r\n    // Write your code here\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    int N;\r\n    cin >> N;\r\n    vector&lt;vector&lt;string&gt;&gt; paths(N, vector&lt;string&gt;(1));\r\n    for (int i_paths = 0; i_paths &lt; N; i_paths++) {\r\n        for (int j_paths = 0; j_paths &lt; 1; j_paths++) {\r\n            cin >> paths[i_paths][j_paths];\r\n        }\r\n    }\r\n\r\n    int out_;\r\n    out_ = countUniqueValidPaths(N, paths);\r\n    cout &lt;&lt; out_ &lt;&lt; endl;\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tredence_25july",
        "company_id": 529
    },
    {
        "id": 1516,
        "title": "Computing functions",
        "problem_statement": "<h1>Computing functions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>A</code> of size <code>N</code> and <code>Q</code> tasks. In each task, you are given an integer <code>M</code>.</p>\r\n<p>For each task, you need to compute the value of <code>ans</code> using the following logic:</p>\r\n<pre><code class='language-text'>ans = 0;\r\nmodulo = 10^M; // 10 to the power M\r\nfor (i from 0 to N-1) // Assuming 0-indexed array A\r\n{\r\n    if ((factorial of A[i]) % modulo == 0)\r\n        ans = ans + 1;\r\n}</code></pre>\r\n<p>Complete the <code>solve</code> function. The function takes the following 4 parameters and should return a list of <code>ans</code> values, one for each task.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>N</code>: Represents the size of array <code>A</code>.</li>\r\n    <li><code>A</code>: Represents the elements of the array.</li>\r\n    <li><code>Q</code>: Represents the number of tasks.</li>\r\n    <li><code>task</code>: A list of integers, where each element <code>task[j]</code> is the integer <code>M</code> for the <code>j</code>-th task.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nN = 3\r\nA = [4, 5, 6]\r\nQ = 1\r\ntask = [1] (M for the task is 1)\r\n\r\nOutput:\r\n[2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For the given task, <strong>M = 1</strong>. Therefore, <strong>modulo = 10^1 = 10</strong>.</p>\r\n<p>Iterating through array <strong>A</strong>:</p>\r\n<ul>\r\n    <li>For <strong>A[0] = 4</strong>: <code>factorial(4) = 24</code>. <code>24 % 10 = 4</code>. Since <code>4 != 0</code>, <code>ans</code> remains <code>0</code>.</li>\r\n    <li>For <strong>A[1] = 5</strong>: <code>factorial(5) = 120</code>. <code>120 % 10 = 0</code>. Since <code>0 == 0</code>, <code>ans</code> is incremented to <code>1</code>.</li>\r\n    <li>For <strong>A[2] = 6</strong>: <code>factorial(6) = 720</code>. <code>720 % 10 = 0</code>. Since <code>0 == 0</code>, <code>ans</code> is incremented to <code>2</code>.</li>\r\n</ul>\r\n<p>The final value of <code>ans</code> for this task is <code>2</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N, Q <= 10^5</code></li>\r\n    <li><code>1 <= A[i], M <= 10^15</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tredence_25july",
        "company_id": 529
    }
]