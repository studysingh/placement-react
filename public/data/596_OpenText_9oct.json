[
    {
        "id": 1704,
        "title": "Maximize Gift Packets",
        "problem_statement": "<h1>Maximize Gift Packets</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Carhy's job is to deliver gift packets. Each packet consists of N types of items. Each packet is identical, and the items are present in a fixed ratio. Also, each type of item is of a particular quantity. To maximize her profit, she wishes to prepare and deliver the maximum number of packets.</p>\r\n<p>She wishes to calculate the sum of the quantities of each type of item used to prepare the packets, such that she can prepare the maximum number of packets in accordance with the given ratio.</p>\r\n<p>Write an algorithm to help Cathy calculate the sum of the quantities of each type of item so that she can prepare the maximum number of packets in accordance with the given ratio.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of an integer <code>N</code>, representing the number of types of items.</p>\r\n<p>The second line consists of <code>N</code> space-separated integers <code>ratio_1, ratio_2, ..., ratio_N</code> representing the ratio of each type of item in a packet.</p>\r\n<p>The last line consists of <code>N</code> space-separated integers <code>available_1, available_2, ..., available_N</code> representing the available quantity of each type of item.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print an integer representing the sum of quantities of items that Cathy must use to prepare the packets in accordance with the given ratio.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1 3 4\r\n3 10 8\r\nOutput:\r\n16</code></pre>\r\n<p><strong>Explanation:</strong>\r\nGiven N=3, ratios are [1, 3, 4], and available quantities are [3, 10, 8].</p>\r\n<p>To determine the maximum number of packets (let's say <code>k</code>) that can be made:</p>\r\n<ul>\r\n    <li>For item type 1: <code>k * 1 <= 3</code> => <code>k <= 3</code></li>\r\n    <li>For item type 2: <code>k * 3 <= 10</code> => <code>k <= 10 / 3</code> => <code>k <= 3</code> (integer division)</li>\r\n    <li>For item type 3: <code>k * 4 <= 8</code> => <code>k <= 8 / 4</code> => <code>k <= 2</code></li>\r\n</ul>\r\n<p>The maximum number of packets <code>k</code> that can be made is <code>min(3, 3, 2) = 2</code>.</p>\r\n<p>If 2 packets are made:</p>\r\n<ul>\r\n    <li>Item type 1 used: <code>2 * 1 = 2</code></li>\r\n    <li>Item type 2 used: <code>2 * 3 = 6</code></li>\r\n    <li>Item type 3 used: <code>2 * 4 = 8</code></li>\r\n</ul>\r\n<p>The total number of items used to make the packets is <code>2 + 6 + 8 = 16</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^6</code></li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>The output can be large, so print the output modulo <code>1000000007</code>. A packet must contain all <code>N</code> types of items.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n#include <limits>\n\nclass Solution {\npublic:\n    long long maximizePackets(int N, const std::vector<long long>& ratio, const std::vector<long long>& available) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<long long> ratio(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> ratio[i];\n    }\n\n    std::vector<long long> available(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> available[i];\n    }\n\n    Solution sol;\n    long long result = sol.maximizePackets(N, ratio, available);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "OpenText_9oct",
        "company_id": 596
    }
]