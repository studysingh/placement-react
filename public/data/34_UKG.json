[
    {
        "id": 146,
        "title": "Neural Task Allocation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Neural Task Allocation</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Given a compiled set of n tasks, represented by an array task, and a neural network system with m nodes, each processes tasks efficiently. For optimal performance, tasks must be distributed evenly across these nodes, i.e., all nodes should serve the same number of tasks. Each task assigned to a single node must be different.</p>\n        <p>Maximize the number of tasks completed by allocating tasks effectively within the neural network and return the maximum number of tasks completed using the distributed neural network system.</p>\n        <p class=\\\"note\\\">Note: All nodes must be assigned an equal number of tasks.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>findMaximumTasks</code> with the following parameters:</p>\n        <ul>\n            <li><code>int task[n]</code>: the type of each task</li>\n            <li><code>int m</code>: the number of nodes in the neural network system</li>\n        </ul>\n    </div>\n\n<div class=\\\"return-value\\\">\n        <h3>Returns</h3>\n        <p><code>int</code>: the maximum number of tasks that can be completed by distributing tasks optimally</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 3 × 10⁵</li>\n            <li>1 ≤ task[i] ≤ 10⁹</li>\n            <li>1 ≤ m ≤ 10⁹</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example-case\\\">\n            <p>Given:</p>\n            <pre>n = 7\ntask = [1, 2, 2, 1, 3, 1, 3]\nm = 2</pre>\n\n<p>One optimal way to allocate the tasks is:</p>\n            <ul>\n                <li>The 1<sup>st</sup> node works on the 1<sup>st</sup>, 2<sup>nd</sup>, and 5<sup>th</sup> tasks.</li>\n                <li>The 2<sup>nd</sup> node works on the 3<sup>rd</sup>, 4<sup>th</sup>, and 7<sup>th</sup> tasks.</li>\n            </ul>\n            <p>A total of 6 tasks can be accomplished this way.</p>\n        </div>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\n4\ntask[] size n = 4\ntask = [1, 2, 1, 1]\nm = 2</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>The first node works on the first task, the second works on the second task.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1VRjVLIiDI57qVk4yah5KH9BiTL0-yd08Tiui6xpSELo/edit?usp=sharing",
        "solution_code": "int findMaximumTasks(int task_count, int* task, int m) {\\n    unordered_map<int, int> freq;\\n    for (int i = 0; i < task_count; ++i) {\\n        freq[task[i]]++;\\n    }\\n\\n    longlong total_possible_tasks = 0;    for (constauto& entry : freq) {\\n        total_possible_tasks += min(entry.second, m);    }\\n    int t = total_possible_tasks / m;\\n    return t * m;\\n}",
        "company_name": "UKG ",
        "company_id": 34
    },
    {
        "id": 147,
        "title": "Dual Cache Performance",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Dual Cache Performance</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>A team is doing an analysis of a dual cache performance. There are n requests in the queue to be processed by a service where the payload size of the i<sup>th</sup> request is denoted by payloadSize[i]. There are two caches A and B in the service which cache the response to requests made.</p>\n\n<ul>\n            <li>If the i<sup>th</sup> request is cached by cache A, then cacheA[i] = 1, otherwise 0 for all 1 ≤ i ≤ n</li>\n            <li>If the i<sup>th</sup> request is cached by cache B, then cacheB[i] = 1, otherwise 0 for all 1 ≤ i ≤ n</li>\n        </ul>\n\n<p>Find the minimum sum of the payload sizes of a subset of requests in which each cache can serve at least minThreshold requests, or return -1 if they cannot.</p>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function getMinimumSize with the following parameters:</p>\n        <ul>\n            <li><code>int payloadSize[n]</code>: the payload sizes of the requests</li>\n            <li><code>int cacheA[n]</code>: the requests which are cached in cache A</li>\n            <li><code>int cacheB[n]</code>: the requests which are cached in cache B</li>\n            <li><code>int minThreshold</code>: minimum number of requests each cache must serve</li>\n        </ul>\n    </div>\n\n<div class=\\\"return-value\\\">\n        <h3>Returns</h3>\n        <p><code>long</code>: the minimum sum of the payload sizes such that both caches can serve minThreshold requests, return -1 if not possible.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 2 * 10<sup>5</sup></li>\n            <li>1 ≤ payloadSize[i] ≤ 10<sup>9</sup></li>\n            <li>0 ≤ cacheA[i], cacheB[i] ≤ 1</li>\n            <li>1 ≤ minThreshold ≤ n</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>Given n = 5, payloadSize = [10, 8, 12, 4, 5, 25], cacheA = [1, 0, 1, 1, 0, 1], cacheB = [1, 0, 1, 0, 1, 1], and minThreshold = 3.</p>\n\n<p>It can be seen that both the caches can serve 4 requests. If a subset of [1<sup>st</sup>, 3<sup>rd</sup>, 4<sup>th</sup> and 5<sup>th</sup>] requests are chosen. Then, cacheA can serve [1, 3, 4]<sup>th</sup> requests and cacheB can serve [1, 3, 5]<sup>th</sup> requests.</p>\n\n<p>Hence, the minimum sum of the payload sizes such that both caches can serve minThreshold requests = 10 + 12 + 4 + 5 = 31.</p>\n        </div>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\npayloadSize[] size n = 5\npayloadSize[] = [3, 2, 4, 1, 5]\ncacheA[] size n = 5\ncacheA[] = [0, 0, 0, 0, 1]\ncacheB[] size n = 5\ncacheB[] = [1, 1, 0, 1, 1]\nminThreshold = 2</pre>\n            <pre class=\\\"output\\\">Output:\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Cache A can only serve 1 of the 5 requests</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1QETQbnreetIHhUcH_LsK4YIU3Gyz5OObP1jNdtTV5Po/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\n\\nll getMinimumSize(vector<ll> &payloadSize, vector<int> &cacheA, vector<int> &cacheB, int minThreshold) {\\n    int n = payloadSize.size();\\n    vector<ll> AB, A_only, B_only;\\n\\n   \\n    for(int i = 0; i < n; ++i){\\n        if(cacheA[i] ==1 && cacheB[i]==1){\\n            AB.push_back(payloadSize[i]);\\n        }\\n        else if(cacheA[i]==1 && cacheB[i]==0){\\n            A_only.push_back(payloadSize[i]);\\n        }\\n        else if(cacheA[i]==0 && cacheB[i]==1){\\n            B_only.push_back(payloadSize[i]);\\n        }\\n       \\n    }\\n\\n\\n    sort(AB.begin(), AB.end());\\n    sort(A_only.begin(), A_only.end());\\n    sort(B_only.begin(), B_only.end());\\n\\n    int sizeAB = AB.size();\\n    int sizeA = A_only.size();\\n    int sizeB = B_only.size();\\n\\n   \\n    vector<ll> prefixAB(sizeAB +1, 0);\\n    for(int i=0;i<sizeAB;i++) prefixAB[i+1] = prefixAB[i] + AB[i];\\n\\n    vector<ll> prefixA(sizeA +1, 0);\\n    for(int i=0;i<sizeA;i++) prefixA[i+1] = prefixA[i] + A_only[i];\\n\\n    vector<ll> prefixB(sizeB +1, 0);\\n    for(int i=0;i<sizeB;i++) prefixB[i+1] = prefixB[i] + B_only[i];\\n\\n    \\n    int lower_x = max(0, max(minThreshold - sizeA, minThreshold - sizeB));\\n    int upper_x = min((int)sizeAB, minThreshold);\\n\\n    if(lower_x > upper_x){\\n        return -1;\\n    }\\n\\n    ll min_sum = LLONG_MAX;\\n    for(int x = lower_x; x <= upper_x; x++){\\n        int y = minThreshold - x;\\n        int z = minThreshold - x;\\n        if(y <0 || z <0) continue;\\n        if(y > sizeA || z > sizeB) continue;\\n        ll current_sum = prefixAB[x] + prefixA[y] + prefixB[z];\\n        if(current_sum < min_sum){\\n            min_sum = current_sum;\\n        }\\n    }\\n\\n    if(min_sum == LLONG_MAX){\\n        return -1;\\n    }\\n    return min_sum;\\n}",
        "company_name": "UKG ",
        "company_id": 34
    },
    {
        "id": 190,
        "title": "Sum of All Subarray XORs",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Sum of All Subarray XORs</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given an array of n integers, find the sum of the bitwise XOR sums of each of its subarrays.</p>\n        <p>The bitwise XOR sum of a subarray [l, r] is defined as arr[l] ⊕ arr[l+1] ⊕ ... ⊕ arr[r], where ⊕ denotes the bitwise XOR operation.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function getXorSum in the editor below.</p>\n        <p>getXorSum has the following parameter:</p>\n        <ul>\n            <li><code>int arr[n]</code>: an array of integers</li>\n        </ul>\n        \n        <h4>Returns</h4>\n        <ul>\n            <li><code>long int</code>: the sum of XOR sums of all subarrays</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>0 ≤ arr[i] ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <p>Consider n = 3 and arr = [2, 3, 5]. The subarrays along with their costs are shown:</p>\n        \n        <table class=\\\"example-table\\\">\n            <tr>\n                <th>l</th>\n                <th>r</th>\n                <th>XOR sum</th>\n            </tr>\n            <tr>\n                <td>1</td>\n                <td>1</td>\n                <td>2</td>\n            </tr>\n            <tr>\n                <td>1</td>\n                <td>2</td>\n                <td>2 ⊕ 3 = 1</td>\n            </tr>\n            <tr>\n                <td>1</td>\n                <td>3</td>\n                <td>2 ⊕ 3 ⊕ 5 = 4</td>\n            </tr>\n            <tr>\n                <td>2</td>\n                <td>2</td>\n                <td>3</td>\n            </tr>\n            <tr>\n                <td>2</td>\n                <td>3</td>\n                <td>3 ⊕ 5 = 6</td>\n            </tr>\n            <tr>\n                <td>3</td>\n                <td>3</td>\n                <td>5</td>\n            </tr>\n        </table>\n\n        <div class=\\\"example-explanation\\\">\n            <p>The sum of the XOR sums of all subarrays is 2 + 1 + 4 + 3 + 6 + 5 = 21.</p>\n            <p>Return 21.</p>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>long getXorSum(vector&lt;int&gt; arr) {\n    // Write your code here\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1qPF1wH-xdB5tnzUvxvgAIP8LzW06MJkc4BYlt4gGC14/edit?usp=sharing",
        "solution_code": "",
        "company_name": "UKG ",
        "company_id": 34
    },
    {
        "id": 471,
        "title": " Make Array Positive",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Make Array Positive</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>It is possible to make the array positive by performing a certain number of operations. Each operation consists of selecting an index <code>i</code> and a value <code>x</code> to add to the element at that index.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer <code>n</code> - the size of the array.</p>\n        <p>The second line contains <code>n</code> space-separated integers representing the elements of the array <code>arr</code>.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer representing the minimum number of operations required to make the array positive.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 100</code></li>\n            <li><code>-10<sup>3</sup> ≤ arr[i] ≤ 10<sup>3</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n-6 -5 5 5 10 -1 12</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>There is no need to perform any operation. Every subarray of length greater than 1 has a sum greater than or equal to 0.</p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n-1 10 -15</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>It is possible to make the array positive by performing 2 operations. One way is with (i = 1, x = 10) and (i = 3, x = 15). Then <code>arr</code> becomes [-1, 10, 15, -1].</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1KOebKvJqZp2jiz4oG2GUC0mOb5SRIvxzU7ScAhru_10/edit?usp=sharing",
        "solution_code": "int solve(vector<int> arr) {\\n       \\n   int n=arr.size();\\n    int operations = 0;\\n    for (int i = 1; i < n - 1; i++)\\n    {\\n        if (arr[i] < 0 && arr[i - 1] < 0)\\n        {\\n            arr[i] = 1e9;\\n            operations++;\\n        }\\n\\n        else if (arr[i] < 0 && arr[i - 1] > 0 && arr[i + 1] > 0)\\n        {\\n            if ((arr[i] + arr[i - 1] < 0) || (arr[i] + arr[i + 1] < 0))\\n            {\\n                arr[i] = 1e9;\\n                operations++;\\n            }\\n        }\\n    }\\n   return operations;  \\n}\\n",
        "company_name": "UKG ",
        "company_id": 34
    },
    {
        "id": 472,
        "title": "Find Maximum Number",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Find Maximum Number</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Complete the <code>findMaxNum</code> function below.</p>\n        <p>The function is expected to return an INTEGER. The function accepts the following parameters:</p>\n        <ul>\n            <li><strong>1.</strong> INTEGER <code>x</code></li>\n            <li><strong>2.</strong> INTEGER <code>y</code></li>\n            <li><strong>3.</strong> INTEGER <code>z</code></li>\n        </ul>\n        <p>The goal is to find the maximum of the three integers provided.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The function will receive three integers as input.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the maximum of the three integers.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>-10<sup>9</sup> ≤ x, y, z ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n10\n15</pre>\n            <pre class=\\\"output\\\">Output:\n15</pre>\n            <div class=\\\"explanation\\\">\n                <p>The maximum of the three numbers is 15.</p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n-1\n-5\n-3</pre>\n            <pre class=\\\"output\\\">Output:\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>The maximum of the three numbers is -1.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1JuR0PK__So8n8W5I5yxvT8qXhX2W152ryxJgdEeMwBI/edit?usp=sharing",
        "solution_code": "int findMaxNum(int x, int y, int z) {\\n    if (abs(x - y) > z) return -1;\\n    int remaining = z - abs(x - y);\\n    return max(x, y) + remaining / 2;\\n}\\n",
        "company_name": "UKG ",
        "company_id": 34
    },
    {
        "id": 510,
        "title": "UKG",
        "problem_statement": "<h2>Find the Sequence</h2>\r\n<div class='problem-description'>\r\n    <p>In a game, there is a string, <strong>direction</strong>, of length <em>n</em> that consists of characters 'L' and 'R'. <strong>L</strong> denotes left, <strong>R</strong> denotes right, and there is a line segment of length 2<sup>n</sup> that extends from [0, 2<sup>n</sup>), a player takes <em>n</em> turns.</p>\r\n    <p>In the <em>i</em><sup>th</sup> turn, the player places the number <em>i</em> at the center of the current line segment.</p>\r\n    <ul>\r\n        <li>If <strong>direction</strong>[<em>i</em>] = 'L', the player proceeds in the left direction, eliminating the right half of the current line segment, and vice versa for <strong>direction</strong>[<em>i</em>] = 'R'.</li>\r\n    </ul>\r\n    <p>Following this rule, find the final order of the numbers on the line segment, starting from the left.</p>\r\n</div>\r\n<div class='input-format'>\r\n    <p>The first line contains a string, <strong>direction</strong>.</p>\r\n</div>\r\n<div class='output-format'>\r\n    <p>An integer array that denotes the indices of characters in the string ordered by placement point.</p>\r\n</div>\r\n<div class='constraints'>\r\n    <ul>\r\n        <li>\\(1 \\le n \\le 5 \\times 10^5\\)</li>\r\n        <li>The string <strong>direction</strong> consists of 'L' or 'R' only.</li>\r\n    </ul>\r\n</div>\r\n<div class='examples'>\r\n    <h3>Examples</h3>\r\n    <div class='example'>\r\n        <h4>Example 1</h4>\r\n        <p><strong>Input:</strong></p>\r\n        <pre>LRLRRL</pre>\r\n        <p><strong>Output:</strong></p>\r\n        <pre>\r\n2\r\n4\r\n5\r\n6\r\n3\r\n1\r\n</pre>\r\n        <p><strong>Explanation:</strong></p>\r\n        <p>Given \\(n=6\\), the initial length of the line segment is \\(2^6 = 64\\), thus line segment is [0, 64]. The game proceeds as follows:</p>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>Center</th>\r\n                    <th>Number</th>\r\n                    <th>Direction</th>\r\n                    <th>Remaining Segment</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>32</td>\r\n                    <td>1</td>\r\n                    <td>L</td>\r\n                    <td>[0, 32]</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>16</td>\r\n                    <td>2</td>\r\n                    <td>R</td>\r\n                    <td>[16, 32]</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>24</td>\r\n                    <td>3</td>\r\n                    <td>R</td>\r\n                    <td>[24, 32]</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>28</td>\r\n                    <td>4</td>\r\n                    <td>L</td>\r\n                    <td>[24, 28]</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>26</td>\r\n                    <td>5</td>\r\n                    <td>L</td>\r\n                    <td>[24, 26]</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>25</td>\r\n                    <td>6</td>\r\n                    <td>L</td>\r\n                    <td>[24, 25]</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <p>The smallest center point is 16 and the value placed is 2. The next smaller center is 24 with a value of 3. When the centers are ordered ascending, their values are [2, 3, 6, 4, 5, 1].</p>\r\n    </div>\r\n</div>",
        "google_doc_link": "",
        "solution_code": null,
        "company_name": "UKG ",
        "company_id": 34
    },
    {
        "id": 511,
        "title": "UKG",
        "problem_statement": "<h2>Anagram Period</h2>\r\n<div class='problem-description'>\r\n  A string can be formed using another string \\(s\\) by repeatedly concatenating the anagrams of \\(s\\) any number of times. Given a string, \\(input\\_str\\) of length \\(n\\), find out the length of the smallest string \\(s\\) that can be used to create \\(input\\_str\\).\r\n  <br>\r\n  Note that the string \\(input\\_str\\) only consists of the lowercase English letters.\r\n</div>\r\n<div class='input-format'>\r\n  <p><strong>Input String Description</strong></p>\r\n  <pre>input_str = \"abababaabb\"</pre>\r\n  <p>In the above example, the length of the string \\(n = 8\\).</p>\r\n  <ul>\r\n    <li>One of the possible strings \\(s\\) can be \"aabb\". First append \"abab\" and then append \"baab\".</li>\r\n    <li>Another possible string \\(s\\) can be \"ab\", append the anagrams of \\(s\\) in the order: \"ab\", \"ab\", \"ab\" and \"ab\".</li>\r\n  </ul>\r\n  It can be proved that the length of \\(s\\) cannot be reduced further than 2. Hence, we return 2 as the answer.\r\n</div>\r\n<div class='output-format'>\r\n  <p>Complete the function <code>getAnagramPeriod</code> in the editor below.</p>\r\n  <p><code>getAnagramPeriod</code> has the following parameter(s):</p>\r\n  <ul>\r\n    <li><code>string input_str</code>: a string of length \\(n\\)</li>\r\n  </ul>\r\n  <p><strong>Returns</strong></p>\r\n  <p><code>int</code>: the length of the smallest possible string \\(s\\)</p>\r\n</div>\r\n<div class='constraints'>\r\n  <ul>\r\n    <li>Input string consists of lowercase English letters</li>\r\n    <li>\\(1 \\le n \\le 10^5\\)</li>\r\n  </ul>\r\n</div>\r\n<div class='examples'>\r\n  <h3>Input Format For Custom Testing</h3>\r\n  <p>A single line containing the string \\(input\\_str\\).</p>\r\n  <h3>Sample Case 0</h3>\r\n  <h4>Sample Input For Custom Testing</h4>\r\n  <pre>STDIN: abcabcacba</pre>\r\n  <h4>Sample Output</h4>\r\n  <pre>3</pre>\r\n  <h3>Explanation</h3>\r\n  <ul>\r\n    <li>One possible strings \\(s\\) is \"abc\", append the anagrams of \\(s\\) in the order: \"abc\", \"bca\", and \"cba\".</li>\r\n    <li>Another possible string \\(s\\) is \"abc\", append the anagrams of \\(s\\) in the order: \"abc\", \"abc\", and \"abc\".</li>\r\n  </ul>\r\n  It can be proven that the length of \\(s\\) cannot be reduced further than 3.\r\n  <h3>Sample Case 1</h3>\r\n  <h4>Sample Input For Custom Testing</h4>\r\n  <pre>STDIN: bbaabababbbbabababb</pre>\r\n  <h4>Sample Output</h4>\r\n  <pre>4</pre>\r\n  <h3>Explanation</h3>\r\n  <ul>\r\n    <li>One possible strings \\(s\\) is \"aaabbb\", append the anagrams of \\(s\\) in the order \"bbaaaab\" and \"ababaabb\".</li>\r\n    <li>Another possible strings \\(s\\) is \"aabb\", append the anagrams of \\(s\\) in the order: \"bbaa\", \"abab\", \"abab\", and \"aabb\".</li>\r\n  </ul>\r\n  It can be proven that the length of \\(s\\) cannot be reduced further than 4.\r\n</div>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "UKG ",
        "company_id": 34
    }
]