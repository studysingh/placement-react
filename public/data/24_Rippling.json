[
    {
        "id": 120,
        "title": "Dual Cache Performance Analysis",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Dual Cache Performance Analysis</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>A team is doing an analysis of a dual cache performance. There are n requests in the queue to be processed by a service where the payload size of the i<sup>th</sup> request is denoted by payloadSize[i]. There are two caches A and B in the service which cache the response to requests made.</p>\n\n<ul>\n            <li>If the i<sup>th</sup> request is cached by cache A, then cacheA[i] = 1, otherwise 0 for all 1 ≤ i ≤ n</li>\n            <li>If the i<sup>th</sup> request is cached by cache B, then cacheB[i] = 1, otherwise 0 for all 1 ≤ i ≤ n</li>\n        </ul>\n\n<p>Find the minimum sum of the payload sizes of a subset of requests in which each cache can serve at least minThreshold requests, or return -1 if they cannot.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 2 * 10<sup>5</sup></li>\n            <li>1 ≤ payloadSize[i] ≤ 10<sup>9</sup></li>\n            <li>0 ≤ cacheA[i], cacheB[i] ≤ 1</li>\n            <li>1 ≤ minThreshold ≤ n</li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format For Custom Testing</h3>\n        <ul>\n            <li>The first line contains an integer n, the number of requests.</li>\n            <li>The next n lines contain an integer, payloadSize[i].</li>\n            <li>The following line contains an integer n, the number of requests.</li>\n            <li>The next n lines contain cacheA[i] (1 ≤ i ≤ n).</li>\n            <li>The following line contains an integer n, the number of requests.</li>\n            <li>The next n lines contain cacheB[i] (1 ≤ i ≤ n).</li>\n            <li>The following line contains an integer minThreshold, the minimum number of requests that must be served by each cache.</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example 1</h3>\n        <div class=\\\"example\\\">\n            <h4>Sample Input</h4>\n            <pre class=\\\"input\\\">5\n10 8 12 4 5 25\n1 0 1 1 0 1\n1 0 1 0 1 1\n3</pre>\n\n<h4>Explanation</h4>\n            <p>It can be seen that both the caches can serve 4 requests. If a subset of [1<sup>st</sup>, 3<sup>rd</sup>, 4<sup>th</sup> and 5<sup>th</sup>] requests are chosen. Then, cacheA can serve [1, 3, 4]<sup>th</sup> requests and cacheB can serve [1, 3, 5]<sup>th</sup> requests.</p>\n            <p>Hence, the minimum sum of the payload sizes such that both caches can serve minThreshold requests = 10 + 12 + 4 + 5 = 31.</p>\n        </div>\n\n<h3>Example 2</h3>\n        <div class=\\\"example\\\">\n            <h4>Sample Input</h4>\n            <pre class=\\\"input\\\">5\n3 2 4 1 5\n0 0 0 0 1\n1 1 0 1 1\n2</pre>\n\n<h4>Sample Output</h4>\n            <pre class=\\\"output\\\">-1</pre>\n\n<h4>Explanation</h4>\n            <p>Cache A can only serve 1 of the 5 requests which is lower than the minThreshold of 2. Therefore, it is not possible to serve the requests from both caches.</p>\n        </div>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function getMinimumSize with the following parameters:</p>\n        <pre class=\\\"code\\\">long getMinimumSize(vector&lt;int&gt; payloadSize, vector&lt;int&gt; cacheA, vector&lt;int&gt; cacheB, int minThreshold)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1qG3TyGQcvPMsXD7ASP5nuNCjjH_vayz1c3ewjhrKOVE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Rippling",
        "company_id": 24
    },
    {
        "id": 121,
        "title": "Binary String Operations",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Binary String Operations</h1>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <h3>Definitions</h3>\n        <ul>\n            <li>A binary string consists of its actual digits. For example, 01011, 11111, and 00 are binary strings.</li>\n            <li>The prefix of a string is any of its substrings that include the beginning of the string. For example, the prefixes of 110110 are 1, 11, 110, 1101, and 110110.</li>\n        </ul>\n\n<p>A non-empty binary string is good if the following two conditions are true:</p>\n        <ol>\n            <li>The number of 1\\'s is equal to the number of 0\\'s</li>\n            <li>For every prefix of the binary string, the number of 1\\'s is not less than the number of 0\\'s</li>\n        </ol>\n\n<p class=\\\"example-explanation\\\">For example, 110110 is not good because it does not have an equal number of 0\\'s and 1\\'s, but 110010 is good because it satisfies both conditions.</p>\n\n<p>A good string can contain multiple good substrings. If two consecutive substrings are good, then they can be swapped as long as the resulting string is still a good string. Given a good binary string, you can perform zero or more swap operations on its adjacent good substrings such that the resulting string is the largest possible numeric value. Two substrings are adjacent if the last character of the first substring occurs exactly one index before the first character of the second substring.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>largestGood</code> in the editor below.</p>\n\n<h4>Parameters</h4>\n        <ul>\n            <li><code>binString</code>: a binary string</li>\n        </ul>\n\n<h4>Returns</h4>\n        <ul>\n            <li>string: the largest possible binary value as a string</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Each character of binString ∈ {0,1}</li>\n            <li>1 ≤ |binString| ≤ 50</li>\n            <li>binString is a good string</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">binString = \\\"101011000\\\"</pre>\n            <div class=\\\"explanation\\\">\n                <p>There are two good binary substrings, 1010 and 111000, among others. Swap these two substrings to get a larger value. 111000010 is the largest possible good string that can be formed.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1bG_FJ9ZOrKqO9XqKEaU245bKOyfCgFquy6OmyRZ7qlw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Rippling",
        "company_id": 24
    }
]