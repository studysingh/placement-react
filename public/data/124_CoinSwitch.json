[
    {
        "id": 416,
        "title": "The Coin Problem",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>The Coin Problem</h1>\n        <p>Given <i>N</i> coins whose amount ranges from <i>0</i> to <i>N-1</i> respectively. Your friend wants to take <i>K</i> coins out of your coins. You can only give the coins if the set of <i>K</i> coins is useful.</p>\n        <p>A set of coins is useful if the sum of the coins is divisible by a given integer <i>M</i>.</p>\n        <p>Find the number of ways in which your friend can get <i>K</i> coins. Since the answer can be large, print the answer modulo \\\\( 10^9 + 7 \\\\).</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h2>Function Description</h2>\n        <p>Complete the <code>solve</code> function provided in the editor. This function takes the following 3 parameters and returns the answer:</p>\n        <ul>\n            <li><b>n</b>: Represents the number of coins</li>\n            <li><b>k</b>: Represents the amount of coin your friend wants</li>\n            <li><b>m</b>: Represents the integer value</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p><b>Note:</b> Use this input format if you are testing against custom input or writing code in a language where we don\\'t provide boilerplate code.</p>\n        <ul>\n            <li>The first line contains <b>3 space-separated integers</b> <i>N</i>, <i>K</i>, and <i>M</i>.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the answer.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>\\\\( 1 \\\\leq N \\\\leq 10^3 \\\\)</li>\n            <li>\\\\( 1 \\\\leq K \\\\leq 10^2 \\\\)</li>\n            <li>\\\\( 1 \\\\leq M \\\\leq 10^3 \\\\)</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 2 2</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation</h4>\n                <p><b>Given:</b></p>\n                <ul>\n                    <li><b>N</b> = 4</li>\n                    <li><b>K</b> = 2</li>\n                    <li><b>M</b> = 2</li>\n                </ul>\n                <p><b>Approach:</b></p>\n                <ul>\n                    <li>There are <b>2 ways</b>:\n                        <ul>\n                            <li>1<sup>st</sup> Set: {1, 3} with sum 1 + 3 = 4, which is divisible by 2.</li>\n                            <li>2<sup>nd</sup> Set: {2, 4} with sum 2 + 4 = 6, which is divisible by 2.</li>\n                        </ul>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <h3>Note</h3>\n        <p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\n    </div>\n\n    <div class=\\\"limits\\\">\n        <h3>Limits</h3>\n        <ul>\n            <li><b>Time Limit:</b> 2.0 sec(s) for each input file</li>\n            <li><b>Memory Limit:</b> 256 MB</li>\n            <li><b>Source Limit:</b> 1024 KB</li>\n        </ul>\n    </div>\n\n    <div class=\\\"scoring\\\">\n        <h3>Scoring</h3>\n        <p>Score is assigned if any testcase passes.</p>\n    </div>\n\n    <div class=\\\"allowed-languages\\\">\n        <h3>Allowed Languages</h3>\n        <p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1aPoFotBHu0q_iXbcc7ISFxLzwCcP_nWm052R8Q5eG1c/edit?usp=sharing",
        "solution_code": "",
        "company_name": "CoinSwitch ",
        "company_id": 124
    },
    {
        "id": 505,
        "title": "coinswitch",
        "problem_statement": "<h2>Question</h2>\r\n<div class=\"problem-description\">\r\n<p>The current selected programming language is C++. We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use <code>cout</code> to debug your code. The code may not work in case of syntax/runtime error. This version of GCC being used is 5.5.0.</p>\r\n<p>A restaurant chain has N restaurants. Each restaurant is given a unique ID from 0 to N-1. To establish connectivity among all the restaurants, the head office maintains a hierarchy with N-1 connections. The restaurant with head office is given an ID 0. A restaurant is further connected to a maximum of two restaurants. For every restaurant A, a new restaurant A is always added to the left of it and its left connection is occupied then a restaurant A is added to the right of it. The system maintains the count of permanent customers of every restaurant.</p>\r\n<p>An annual festival is being organised in one of the restaurants. To select which restaurant will host the festival, an algorithm is used which generates a number M and makes a sequence of restaurant IDs from traversing the hierarchy so that for every restaurant, the given rule is followed. The rule is: for a restaurant with ID X, first the left connected restaurant to X is added, then the restaurant with ID X is added and then the right connected restaurant to X is added in the sequence. Then the Mth restaurant from the start of the sequence is selected for the festival. The system must store the count of permanent customers of the selected restaurant.</p>\r\n<p>Write an algorithm to find the count of permanent customers of the selected restaurant.</p>\r\n</div>\r\n<div class=\"input-format\">\r\n<p>The first line of the input consists of an integer - <code>restCount</code> representing the number of restaurants (N).</p>\r\n<p>The next line consists of N space-separated integers - <code>restCust[0], restCust[1],..., restCust[N-1]</code> representing the number of permanent customers of each restaurant.</p>\r\n<p>The next line consists of two space-separated integers - <code>conList_row</code> and <code>conList_col</code> representing the number of connections (<code>conList_row</code> is always equal to N-1) and number of restaurants connected by a connection (<code>conList_col</code> is always equal to two).</p>\r\n<p>The next <code>C</code> lines consist of <code>R</code> space-separated integers, representing the IDs of restaurants connected by a connection.</p>\r\n<p>The next line consists of an integer - <code>restM</code>, representing the number M to select the restaurant (M).</p>\r\n\r\n</div>\r\n<div class=\"output-format\">\r\n<p>Print an Integer representing count of permanent customers of the selected restaurant.</p>\r\n</div>\r\n<div class=\"constraints\">\r\n<p>0 ≤ <code>restCount</code> ≤ 10<sup>5</sup></p>\r\n<p>0 ≤ <code>restCust[0], restCust[1],..., restCust[N-1]</code> &lt; 10<sup>5</sup></p>\r\n<p>0 ≤ <code>restM</code> ≤ <code>restCount</code></p>\r\n</div>\r\n<div class=\"examples\">\r\n<h3>Example 1</h3>\r\n<pre>\r\nInput:\r\n6\r\n36 37 4 15 25 36\r\n5 2\r\n0 1\r\n0 2\r\n1 3\r\n1 4\r\n2 5\r\n4\r\n\r\nOutput:\r\n15\r\n</pre>\r\n<p>Explanation:<br>The hierarchy is as given below:<br>\r\n0<br>\r\n/\\<br>\r\n1  2<br>\r\n/\\  \\<br>\r\n3 4 5<br>\r\n/<br>\r\n6<br>\r\nAs per the given rule, the generated sequence of restaurant IDs is: 6,3,7,1,4,0,5,2.<br>Now the Mth (4th as M=4) restaurant has ID:1.<br>The count of permanent customers in restaurant with ID 1 is 15.<br>So, the output is 15.</p>\r\n<h3>Example 2</h3>\r\n<pre>\r\nInput:\r\n8\r\n10 15 21 25 14 22 15 24\r\n7 2\r\n0 1\r\n0 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n3 7\r\n4\r\n\r\nOutput:\r\n15\r\n</pre>\r\n<p>Explanation:<br>The hierarchy is as given below:<br>\r\n0<br>\r\n/\\<br>\r\n1  2<br>\r\n/\\ /\\<br>\r\n3 4 5 6<br>\r\n/<br>\r\n7<br>\r\n</p>\r\n\r\n</div>\r\n<div class=\"note\">\r\n<p><strong>Note</strong><br>The first connection of restaurant X in the connection list represents a restaurant connected to the left of restaurant X and the second connection of restaurant X represents the restaurant connected to the right of restaurant X. There is only one path from one restaurant to another restaurant in the hierarchy.</p>\r\n</div>\r\n",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "CoinSwitch ",
        "company_id": 124
    }
]