[
    {
        "id": 23,
        "title": "Maximum Networks",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\\n    <h2>Maximum Networks</h2>\\\n    \\\n    <div class=\\\\\\\"problem-description\\\\\\\">\\\n        <p>Twilio is working to create several shared computing systems throughout an office.</p>\\\n        \\\n        <p>For computers to be on the same network, there are the following constraints:</p>\\\n        <ol>\\\n            <li>They must be adjacent to one another.</li>\\\n            <li>There must be a minimum number of computers.</li>\\\n            <li>The total processing speed of the network (the sum of each computer\\\\\\'s processing speed) must be at least a certain threshold.</li>\\\n            <li>A computer can only belong to one network.</li>\\\n        </ol>\\\n\\\n        <p>Given the processing speeds and order of the computers, as well as the network constraints, determine the maximum number of networks that can be formed.</p>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"function-description\\\\\\\">\\\n        <h3>Function Description</h3>\\\n        <p>Complete the function <code>maximumNetworks</code> in the editor.</p>\\\n        \\\n        <p><code>maximumNetworks</code> has the following parameter(s):</p>\\\n        <ul>\\\n            <li><code>int speed[n]</code>: <code>speed[i]</code> denotes the processing speed of the i<sup>th</sup> computer</li>\\\n            <li><code>int minComps</code>: the minimum number of computers each network must have</li>\\\n            <li><code>long speedThreshold</code>: the minimum total processing speed a network must have</li>\\\n        </ul>\\\n\\\n        <h4>Returns</h4>\\\n        <p><code>int</code>: the maximum number of networks that can be formed from the computers</p>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"constraints\\\\\\\">\\\n        <h3>Constraints</h3>\\\n        <ul>\\\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\\\n            <li>1 ≤ speed[i] ≤ 10<sup>9</sup></li>\\\n            <li>1 ≤ minComps ≤ n</li>\\\n            <li>1 ≤ speedThreshold ≤ 10<sup>14</sup></li>\\\n        </ul>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"examples\\\\\\\">\\\n        <h3>Sample Case 0</h3>\\\n        <div class=\\\\\\\"example\\\\\\\">\\\n            <h4>Sample Input</h4>\\\n            <pre>\\\nn = 6\\\nspeed = [5, 7, 3, 12, 10, 13]\\\nminComps = 2\\\nspeedThreshold = 15</pre>\\\n\\\n            <h4>Sample Output</h4>\\\n            <pre>2</pre>\\\n\\\n            <div class=\\\\\\\"explanation\\\\\\\">\\\n                <h4>Explanation</h4>\\\n                <p>The first network includes the second, third, and fourth computers, which results in a total processing speed of 7+3+12 = 22, above the threshold of 15.</p>\\\n                <p>The second network includes the fifth and sixth computers, with a processing speed of 10+13 = 23.</p>\\\n                <p>The maximum number of networks that can be formed is 2.</p>\\\n            </div>\\\n        </div>\\\n\\\n        <h3>Sample Case 1</h3>\\\n        <div class=\\\\\\\"example\\\\\\\">\\\n            <h4>Sample Input</h4>\\\n            <pre>\\\nn = 5\\\nspeed = [1, 2, 3, 4, 5]\\\nminComps = 3\\\nspeedThreshold = 20</pre>\\\n\\\n            <h4>Sample Output</h4>\\\n            <pre>0</pre>\\\n\\\n            <div class=\\\\\\\"explanation\\\\\\\">\\\n                <p>No networks can be formed in this case because the threshold value is greater than the sum of speeds of all the computers.</p>\\\n            </div>\\\n        </div>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"code-template\\\\\\\">\\\n        <h3>Code Template</h3>\\\n        <pre class=\\\\\\\"cpp\\\\\\\"><code>int maximumNetworks(vector&lt;int&gt; speed, int minComps, long speedThreshold) {\\\n    // Write your code here\\\n}</code></pre>\\\n    </div>\\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1B7LiN2B29mcJsJUDHb-5nbTkZFcpW_NEbCgIH0Qwv7E/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Twilio",
        "company_id": 8
    },
    {
        "id": 24,
        "title": "Twilio Segment Optimality Quotient",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Twilio Segment Optimality Quotient</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Twilio segment is all about dealing with data, sending data from multiple sources to multiple destinations. Given an array of sources arr, we can rearrange it to form the destination array, let\\'s call it <code>rearranged_arr</code>.</p>\n\n<p>Now while rearranging we want to transfer the data in the most optimal way possible. Optimality quotient is measured by the greatness of the array multiplied by 2. The greatness of the array is defined as the number of indices i, 0 ≤ i < n, where <code>rearranged_arr[i] > arr[i]</code>. That is, the element placed after rearrangement is greater than the initial value present at that index.</p>\n\n<p>Given the initial array arr, find the optimality quotient of the array.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer, n, the number of elements in arr.</p>\n        <p>Each line i of the n subsequent lines (where 0 ≤ i < n) contains an integer, arr[i].</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ arr[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example 1</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\narr = [1, 3, 5, 2, 1, 3, 1]</pre>\n            <pre class=\\\"output\\\">Output:\n8</pre>\n            <div class=\\\"explanation\\\">\n                <p>[1, 3, 5, 2, 1, 3, 1] → original arr</p>\n                <p>[2, 5, 1, 3, 3, 1, 1] → optimal rearranged_arr</p>\n                <p>Here, at indices 0, 1, 3, and 4 in bold, rearranged_arr[i] > arr[i]. It can be shown that this is the maximum possible greatness. Thus, the greatness is 4 and the answer is 4*2 = 8.</p>\n            </div>\n        </div>\n\n<h3>Example 2</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n1\n2\n6\n3\n2\n1</pre>\n            <pre class=\\\"output\\\">Output:\n8</pre>\n            <div class=\\\"explanation\\\">\n                <p>The optimal rearranged_arr = [2, 3, 1, 1, 6, 2]. Here, all indices except 2 and 3 are great, so the Optimality quotient is greatness*2 = 4 * 2 = 8</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function findOptimalityQuotient in the editor below.</p>\n        <p>findOptimalityQuotient has the following parameter:</p>\n        <ul>\n            <li><code>int arr[n]</code>: an array of integers</li>\n        </ul>\n        <p>Returns:</p>\n        <ul>\n            <li><code>int</code>: the Optimality Quotient</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1-pEPesdtYWQdEEdfs4UfBN8V5dSYbrXTrdSRBPeENXY/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Twilio",
        "company_id": 8
    },
    {
        "id": 25,
        "title": "Minimum Initial Capital for Production",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Question 2</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Twilio plans on gifting their clients a golden owl that needs to be manufactured. However, careful planning must take place before production begins. For each product there is a worst-case cost and an expected cost. Before starting a project, Twilio must have at least enough cash on hand to pay the worst-case cost for each product. If every product is produced at expected cost, determine the minimum beginning cash requirement to get all products produced. The owls can be produced in any order.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>planProduction</code> in the editor below. The function must return an integer.</p>\n\n<p><code>planProduction</code> has the following parameter(s):</p>\n        <ul>\n            <li><code>worstCase[worstCase[0]...worstCase[n-1]]</code>: an array of n integers representing the minimum cash-on-hand to produce the i<sup>th</sup> product.</li>\n            <li><code>expected[expected[0]...expected[n-1]]</code>: an array of n integers, representing the expected cost to produce the i<sup>th</sup> product.</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ worstCase[i] ≤ 10<sup>5</sup></li>\n            <li>1 ≤ expected[i] ≤ 10<sup>5</sup></li>\n            <li>It is guaranteed that expected[i] ≤ worstCase[i] for every i (0 ≤ i < n)</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <p>Suppose that for three products these are the worst-case and expected costs:</p>\n\n<table class=\\\"costs-table\\\">\n            <tr>\n                <th>Product</th>\n                <th>worstCase</th>\n                <th>expected</th>\n            </tr>\n            <tr>\n                <td>0</td>\n                <td>6</td>\n                <td>4</td>\n            </tr>\n            <tr>\n                <td>1</td>\n                <td>5</td>\n                <td>2</td>\n            </tr>\n            <tr>\n                <td>2</td>\n                <td>7</td>\n                <td>1</td>\n            </tr>\n        </table>\n\n<p>worstCase = [6, 5, 7], expected = [4, 2, 1]</p>\n        <p>For this case, the optimal order of production is product 2, 1, and 0.</p>\n\n<div class=\\\"explanation\\\">\n            <p>Starting with 9 units of cash on hand, they can begin production of product 2 because cash on hand (9 units) ≥ worstCase (7 units).</p>\n            <p>After finishing product 2, they will have 9 - 1 = 8 units of cash on hand. They can then move to product 1 as cash on hand (8 units) ≥ worstCase (5 units).</p>\n            <p>When product 1 is complete, they will have 8 - 2 = 6 units of cash on hand which is enough to start product 0 (as cash on hand (6 units) ≥ worstCase (6 units)). The final amount of cash on hand will be 6 - 4 = 2 units. The minimum starting amount is 9 units of cash.</p>\n        </div>\n    </div>\n\n<div class=\\\"sample-case\\\">\n        <h3>Sample Case 0</h3>\n        <pre class=\\\"input\\\">Sample Input:\n4\n6\n5\n7\n8\n4\n4\n2\n1\n1</pre>\n        <pre class=\\\"output\\\">Sample Output:\n10</pre>\n        <div class=\\\"explanation\\\">\n            <p>n = 4</p>\n            <p>worstCase = [6, 5, 7, 8]</p>\n            <p>expected = [4, 2, 1, 1]</p>\n            <p>The optimal order to produce all products is (3,2,1,0). This requires minimum starting funds of 10.</p>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1rJGSfVVccGkQbTzdK4V3kIZXjOAE8HMiAodf7m9fIFM/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Twilio",
        "company_id": 8
    }
]