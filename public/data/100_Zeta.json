[
    {
        "id": 330,
        "title": "Pair Hunting",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1 class=\\\"problem-title\\\">Pair Hunting</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are given two 1-indexed integer arrays A and B, each of size N, and an integer K. A good pair (i, j) (where 1 <= i < j <= N) satisfies at least one of the following conditions:</p>\n\n        <ol>\n            <li>Add K to A[i]. Now let X = A[i] - A[j], Y = B[i] - B[j]. Then X <= Y. Subtract K from A[i] to get back to original A[i].</li>\n            <li>Add K to B[i]. Now let X = A[i] - A[j], Y = B[i] - B[j]. Then X <= Y. Subtract K from B[i] to get back to original B[i].</li>\n        </ol>\n\n        <p>Return the number of good pairs.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains two integers N and K.</p>\n        <p>The second line contains N integers A[1], A[2], ..., A[N].</p>\n        <p>The third line contains N integers B[1], B[2], ..., B[N].</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the number of good pairs.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ N ≤ 10<sup>5</sup></li>\n            <li>-10<sup>4</sup> ≤ K ≤ 10<sup>4</sup></li>\n            <li>-10<sup>4</sup> ≤ A[i], B[i] ≤ 10<sup>4</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 2\n1 2 3 4\n5 6 7 8</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The good pairs are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4).</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <div class=\\\"cpp-code\\\">\n            <pre class=\\\"language-cpp\\\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    long long goodPairHunting(vector&lt;int&gt; &A, vector&lt;int&gt; &B, int K) {\n        // Write your code here\n    }\n};\n\nint main() {\n    int N, K;\n    cin >> N >> K;\n    vector&lt;int&gt; A(N);\n    for(int i = 0; i < N; i++) {\n        cin >> A[i];\n    }\n    vector&lt;int&gt; B(N);\n    for(int i = 0; i < N; i++) {\n        cin >> B[i];\n    }\n    // Your code here\n}</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1KnQ-HV6gYfapK5tR1jzzheJbFKXNL-3C1pVS3gwoAhw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Zeta",
        "company_id": 100
    },
    {
        "id": 331,
        "title": "Segment Trouble",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Segment Trouble</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are given \\'N\\' segments. Each segment has three characteristic properties (L,R,cost).</p>\n        \n        <p>This means that the segment starts from \\'L\\', extends up to \\'R\\', and has some \\'cost\\'.</p>\n        \n        <p>Endpoints \\'L\\' and \\'R\\' are included in the segment.</p>\n        \n        <p>Two segments can form a valid pair, if and only if those two segments do not overlap.</p>\n        \n        <p>Segments are called overlapping if there is at least one point \\'x\\' lying in both the segments.</p>\n        \n        <p>The cost of the pairing of two valid segments is defined as the product of their individual costs.</p>\n        \n        <p>Out of all possible valid pairs, find the valid pair of segments, for which their cost of pairing is minimal. Print that min cost of pairing.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line will contain a single integer N, denoting the number of segments. Then, the next line shall contain an integer, which will always be 3.</p>\n        <p>Then, N lines follow, where each line shall contain three space-separated integers (L,R,cost)</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer in a single line, the answer to the problem. If you do not find any valid pair of segments, print -1.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 100,000</li>\n            <li>1 ≤ L ≤ R ≤ 1,000,000,000 for each segment</li>\n            <li>1 ≤ cost ≤ 1,000,000,000 for each segment</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n3\n1 2 2\n2 3 10\n4 5 2</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>Pair up segments 1 and 3 as they don\\'t overlap, giving the cost of 4.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ze1mE8Itm6fnb8mJNRCleizYMNigYPZubtgsYos9O2k/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Zeta",
        "company_id": 100
    },
    {
        "id": 332,
        "title": "Good Pair Hunting",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Good Pair Hunting</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are given two 1-indexed integer arrays A and B, each of size N, and an integer K. A good pair (i,j) (where 1 ≤ i,j ≤ N) satisfies atleast one of the following conditions:</p>\n\n        <ol>\n            <li>Add K to A[i]. Now let X = A[i] - A[j], Y = B[i] - B[j]. Then X ≤ Y.\n                Subtract K from A[i] to get back to original A[i].</li>\n            <li>Add K to B[j]. Now let X = A[i] - A[j], Y = B[i] - B[j]. Then X ≤ Y.\n                Subtract K from B[j] to get back to original B[j].</li>\n        </ol>\n\n        <p>Return the number of good pairs.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains two integers N and K</p>\n        <p>The second line contains N integers A[1], A[2], ..., A[N]</p>\n        <p>The third line contains N integers B[1], B[2], ..., B[N]</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the number of good pairs.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ N ≤ 10<sup>5</sup></li>\n            <li>-10<sup>4</sup> ≤ K ≤ 10<sup>4</sup></li>\n            <li>-10<sup>4</sup> ≤ A[i], B[i] ≤ 10<sup>4</sup></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 2\n1 2 3 4\n5 6 7 8</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n            <div class=\\\"explanation\\\">\n                <p>The good pairs are: (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp-code\\\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nclass Solution {\npublic:\n    long long goodPairHunting(vector&lt;int&gt; &A, vector&lt;int&gt; &B, int K) {\n        // Write your code here\n    }\n};\n\nint main() {\n    int N, K;\n    cin >> N >> K;\n    vector&lt;int&gt; A(N);\n    for(int i = 0; i < N; i++) {\n        cin >> A[i];\n    }\n    vector&lt;int&gt; B(N);\n    for(int i = 0; i < N; i++) {\n        cin >> B[i];\n    }\n    Solution solution;\n    long long result = solution.goodPairHunting(A, B, K);\n    cout << result << endl;\n    return 0;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1QfjURi1dbh-qHGHbAClkXSYt23e18-90iZwvJN3H57E/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Zeta",
        "company_id": 100
    },
    {
        "id": 426,
        "title": "Bacteria Growth and Splitting",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Bacteria Growth and Splitting</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are a scientist working with bacteria cultures in a lab. You start with a single petri dish containing 1 gram worth of bacteria at the end of hour 0. Your goal is to manage the total bacteria weight over time to reach exactly <strong>X</strong> gram bacteria at the end of an hour. You have to <strong>MINIMISE</strong> the number of hours.</p>\n        \n        <h3>Rules of Bacteria Growth And Splitting:</h3>\n        <ol>\n            <li>\n                <strong>Splitting Bacteria</strong>\n                <ol>\n                    <li>At the start of each hour, you can split any number of petri dishes into two.</li>\n                    <li>Splitting a dish divides bacteria weight into two equal halves.</li>\n                    <li>The splitting operation is <strong>INSTANT</strong> (does not take any time).</li>\n                    <li>For example, on start of hour <strong>h</strong>, if you have 4 dishes => [2g, 3g, 5g, 7g], if you decide to split the first 3 dishes you will have 7 dishes => [1g, 1g, 1.5g, 1.5g, 2.5g, 7g].</li>\n                    <li>You can only split one petri dish once per hour (You cannot split an already split dish in the same hour).</li>\n                </ol>\n            </li>\n            <li>\n                <strong>Bacteria Reproduction</strong>\n                <ol>\n                    <li>During each hour, every dish\\'s bacteria weight increases by 1g, so a dish having <strong>X</strong> gram bacteria at the start of the hour would have <strong>X + 1</strong> gram bacteria at the end of the hour.</li>\n                </ol>\n            </li>\n        </ol>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>You are given an integer <strong>X</strong>, representing the exact bacteria weight in grams you want at the end of an hour. Determine:</p>\n        <ol>\n            <li>The minimum number of hours required to achieve the population of exactly <strong>X</strong>.</li>\n            <li>The splitting strategy (How many dishes you need to split every hour).</li>\n        </ol>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer <strong>H</strong>, denoting the minimum number of hours followed by <strong>H</strong> lines:</p>\n        <ul>\n            <li>Each line having an integer <strong>K<sub>i</sub></strong> (1 ≤ <strong>i</strong> ≤ <strong>H</strong>), representing the number of dishes to split at the start of hour <strong>i</strong>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ X ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n10</pre>\n            <pre class=\\\"output\\\">Output:\n3\n1\n1\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>End of Hour 0: [1g]</p>\n                <p>Start of Hour 1: Split the only dish => [0.5g, 0.5g]</p>\n                <p>End of Hour 1 => [1.5g, 1.5g]</p>\n                <p>Start of Hour 2: Split the first dish => [0.75g, 0.75g, 1.5g]</p>\n                <p>End of Hour 2 => [1.75g, 1.75g, 2.5g]</p>\n                <p>Start of Hour 3: Split the third dish => [1.75g, 1.75g, 1.25g, 1.25g]</p>\n                <p>End of Hour 3 => [2.75g, 2.75g, 2.25g, 2.25g], total weight is exactly 10. We took 3 hours, and each hour we split 1 dish.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1LjkAZWu4z7aqlOtQLifKQMSUudbu4HtUrPsyw9VF3Ic/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Zeta",
        "company_id": 100
    }
]