[
    {
        "id": 1776,
        "title": "Lexicographically Smallest Sequence",
        "problem_statement": "<h1>Lexicographically Smallest Sequence</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Data scientists at Amazon are working on a utility to generate data points for their models based on existing data points.</p>\r\n<p>A simple prototype takes in two integers, <code>n</code>, and <code>sequence_sum</code>, and generates a sequence of size <code>n</code> whose sum of elements equals <code>sequence_sum</code>, and the absolute values of the elements form a permutation of size <code>n</code>. The utility reports the lexicographically smallest such sequence.</p>\r\n<p>Given two integers, <code>n</code>, and <code>sequence_sum</code>, return the lexicographically smallest sequence of integers such that:</p>\r\n<ol>\r\n    <li>The sum of its elements equals <code>sequence_sum</code>.</li>\r\n    <li>The absolute values of its elements form a permutation of size <code>n</code>.</li>\r\n</ol>\r\n<p><strong>Note:</strong> A sequence of <code>n</code> integers is a permutation if it contains all integers from 1 to <code>n</code> exactly once. For example, <code>[1, 4, 2, 5, 3]</code> is a permutation but <code>[2, 3, 4, 5]</code> is not.</p>\r\n<p>Given two permutations <code>x</code> and <code>y</code>, <code>x</code> is lexicographically smaller than <code>y</code> if there exists an index <code>i</code> where <code>x[i] < y[i]</code> and for this smallest index <code>j < i</code>, <code>x[j] == y[j]</code>. This means that when comparing two elements by scanning from the start, the first position at which they differ determines their order. If the element in <code>x</code> is less than the corresponding element in <code>y</code> at this position, <code>x</code> is considered smaller.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Suppose <code>n = 5</code>, <code>sequence_sum = 9</code></p>\r\n<p>Some sequences of size <code>n = 5</code> with <code>sequence_sum = 9</code> are:</p>\r\n<pre><code class='language-text'>Sequence             Sum\r\n[-1, 2, 3, 4, 5]     9\r\n[-2, 1, 3, 4, 5]     9\r\n[-3, 1, 2, 4, 5]     9\r\n[3, 4, 5, -2, -1]    9\r\n[3, 2, 1, 4, 5]      9</code></pre>\r\n<p><strong>Explanation:</strong> Now we can clearly see <code>[-3, 1, 2, 4, 5]</code> is lexicographically smaller than <code>[-3, 2, 1, 4, 5]</code> because <code>1 < 2</code> at the first index where they differ. The lexicographically smallest sequence with the given sum is <code>[-3, 1, 2, 4, 5]</code>.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getSmallestSequence</code> in the editor below.</p>\r\n<p><code>getSmallestSequence</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of elements in the sequence</li>\r\n    <li><code>long int sequence_sum</code>: the sum of elements in the sequence</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int[]</code>: the lexicographically smallest sequence of <code>n</code> integers following the above criteria. If it is not possible, return an array of size <code>n</code> filled with zeros.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>-10^10 <= sequence_sum <= 10^10</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param n The number of elements in the sequence.\n     * @param sequence_sum The required sum of elements in the sequence.\n     * @return The lexicographically smallest sequence of n integers.\n     */\n    std::vector<int> getSmallestSequence(int n, long long sequence_sum) {\n        // Core logic to find the lexicographically smallest sequence goes here.\n        \n        // Placeholder implementation\n        return std::vector<int>(n, 0);\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    long long sequence_sum;\n    \n    std::cin >> n >> sequence_sum;\n\n    Solution sol;\n    std::vector<int> result = sol.getSmallestSequence(n, sequence_sum);\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Amazon_12oct",
        "company_id": 627
    },
    {
        "id": 1777,
        "title": "Query Process Activity",
        "problem_statement": "<h1>Query Process Activity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are a developer at Amazon evaluating the performance of processing units. There are <code>n</code> processes, where each process <code>i</code> runs from <code>starts[i]</code> to <code>ends[i]</code> (both inclusive).</p>\r\n<p>You are given <code>q</code> queries, each defined by three arrays:</p>\r\n<ul>\r\n    <li><code>query_process[j]</code> &rarr; the exact number of processes to check.</li>\r\n    <li><code>query_start[j]</code> &rarr; the start time of the query interval.</li>\r\n    <li><code>query_end[j]</code> &rarr; the end time of the query interval.</li>\r\n</ul>\r\n<p>For each query <code>j</code>, determine how many seconds within <code>query_start[j]</code>, <code>query_end[j]</code> (inclusive) have exactly <code>query_process[j]</code> processes running.</p>\r\n<p>Return an array of size <code>q</code> with the result for each query.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nstarts = [0, 1, 2]\r\nends = [2, 10, 9]\r\nquery_process = [0, 2]\r\nquery_start = [1, 4]\r\nquery_end = [10, 9]</code></pre>\r\n\r\n<p>The following table illustrates the process status over time based on the example input (note: the `starts` and `ends` arrays might lead to a slightly different interpretation of process activity than the table's \"Process Status\" events):</p>\r\n<table border=\"1\">\r\n    <thead>\r\n        <tr>\r\n            <th>Time</th>\r\n            <th>Process Status</th>\r\n            <th>In Execution</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr><td>0</td><td>process 0 starts</td><td>[0]</td></tr>\r\n        <tr><td>1</td><td>process 1 starts</td><td>[0, 1]</td></tr>\r\n        <tr><td>2</td><td>process 2 starts, process 0 ends</td><td>[1, 2]</td></tr>\r\n        <tr><td>3</td><td>-</td><td>[1, 2]</td></tr>\r\n        <tr><td>4</td><td>-</td><td>[1, 2]</td></tr>\r\n        <tr><td>5</td><td>-</td><td>[1, 2]</td></tr>\r\n        <tr><td>6</td><td>process 1 ends</td><td>[2]</td></tr>\r\n        <tr><td>7</td><td>-</td><td>[2]</td></tr>\r\n        <tr><td>8</td><td>-</td><td>[2]</td></tr>\r\n        <tr><td>9</td><td>process 2 ends</td><td>[]</td></tr>\r\n        <tr><td>10</td><td>-</td><td>[]</td></tr>\r\n        <tr><td>11</td><td>-</td><td>[]</td></tr>\r\n    </tbody>\r\n</table>\r\n\r\n<p><strong>Explanation:</strong>\r\n(Note: The following explanation uses `query_process` values of 1 and 2 for the first and second queries respectively, which might differ from the `query_process = [0, 2]` in the input. This explanation is provided as-is from the problem statement.)</p>\r\n<p>For the first query, the answer is the number of seconds between the 1st and 10th second (both inclusive), where exactly 1 process is executing, i.e., (6, 7, 8, 9, 10). The answer to this query is 5.</p>\r\n<p>For the second query, the answer is the number of seconds between the 4th and 9th second (both inclusive), where exactly 2 processes are executing, i.e., (4, 5). The answer to this query is 2.</p>\r\n<p>Hence, the answer array reported is <code>[5, 2]</code>.</p>\r\n<pre><code class='language-text'>Output: [5,2]</code></pre>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getqueryAnswers</code> in the editor below. The function must return an array where <code>i</code>th integer denotes the answer to the <code>i</code>th query.</p>\r\n<p><code>getqueryAnswers</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int starts[n]</code>: the starting times of the processes</li>\r\n    <li><code>int ends[n]</code>: the ending times of the processes</li>\r\n    <li><code>int query_process[q]</code>: the num_process component of each query</li>\r\n    <li><code>int query_start[q]</code>: the start time component of each query</li>\r\n    <li><code>int query_end[q]</code>: the end time component of each query</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int[]</code>: the answer to each query</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= starts[i] &lt;= ends[i] &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>0 &lt;= q &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= query_start[j] &lt;= query_end[j] &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>0 &lt;= query_process[j] &lt;= n</code></li>\r\n</ul>\r\n\r\n<p><strong>Input Format for Custom Testing</strong></p>\r\n<p>The first line contains an integer <code>n</code>, the size of <code>starts</code> and <code>ends</code>.\r\nThe next <code>n</code> lines contain elements of <code>starts</code>.\r\nThe next <code>n</code> lines contain elements of <code>ends</code>.\r\nThe next line contains an integer <code>q</code>, the size of <code>query_process</code>, <code>query_start</code>, and <code>query_end</code>.\r\nThe next <code>q</code> lines contain elements of <code>query_process</code>.\r\nThe next <code>q</code> lines contain elements of <code>query_start</code>.\r\nThe next <code>q</code> lines contain elements of <code>query_end</code>.</p>\r\n\r\n<p><strong>Sample Input</strong></p>\r\n<pre><code class='language-text'>3\r\n0\r\n1\r\n2\r\n3\r\n2\r\n10\r\n9\r\n2\r\n0\r\n2\r\n1\r\n4\r\n10\r\n9</code></pre>\r\n\r\n<p><strong>Sample Output</strong></p>\r\n<pre><code class='language-text'>5\r\n2</code></pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n<p>(Note: This explanation section appears to have inconsistencies with the provided example input and previous explanation.)</p>\r\n<ul>\r\n    <li>Find the number of seconds between the 1st and 10th second (both inclusive) where no process was being executed, i.e., (13, 14, 15, 16, 17, 18, 19, 20).</li>\r\n    <li>Find the number of seconds between the 4th and 9th second (both inclusive) where exactly 2 processes are executing, i.e., (4, 5).</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> getQueryAnswers(\n        const std::vector<int>& starts,\n        const std::vector<int>& ends,\n        const std::vector<int>& query_process,\n        const std::vector<int>& query_start,\n        const std::vector<int>& query_end) {\n        \n        // Core logic goes here\n        int q = query_process.size();\n        std::vector<int> result(q, 0);\n        return result;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::vector<int> starts(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> starts[i];\n    }\n\n    std::vector<int> ends(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> ends[i];\n    }\n\n    int q;\n    std::cin >> q;\n\n    std::vector<int> query_process(q);\n    for (int i = 0; i < q; ++i) {\n        std::cin >> query_process[i];\n    }\n\n    std::vector<int> query_start(q);\n    for (int i = 0; i < q; ++i) {\n        std::cin >> query_start[i];\n    }\n\n    std::vector<int> query_end(q);\n    for (int i = 0; i < q; ++i) {\n        std::cin >> query_end[i];\n    }\n\n    Solution solution;\n    std::vector<int> result = solution.getQueryAnswers(starts, ends, query_process, query_start, query_end);\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Amazon_12oct",
        "company_id": 627
    }
]