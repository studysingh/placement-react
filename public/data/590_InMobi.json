[
    {
        "id": 1688,
        "title": "Employee Reportees",
        "problem_statement": "<h1>Employee Reportees</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a company with N employees, with IDs from 1 to N. Employee 1 is the CEO and has no manager. Every other employee has exactly one manager.</p>\r\n<p>The task is to calculate and print the total number of reportees (both direct and indirect) for every employee, from ID 1 to N.</p>\r\n\r\n<p><strong>Input:</strong></p>\r\n<p>The first line is an integer N, the total number of employees.</p>\r\n<p>The next N-1 lines each contain two space-separated integers, n1 and n2, indicating that n2 is the manager of n1.</p>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>Print N space-separated integers. The first integer should be the total number of reportees for employee ID 1, the second for employee ID 2, and so on, up to employee ID N.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n2 1\r\n3 2\r\n4 1\r\n5 3\r\nOutput: 4 2 1 0 0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Employee 2's manager is 1.</p>\r\n<p>Employee 3's manager is 2.</p>\r\n<p>Employee 4's manager is 1.</p>\r\n<p>Employee 5's manager is 3.</p>\r\n<p>This structure can be represented as a tree with the CEO (ID 1) as the root:</p>\r\n<ul>\r\n    <li>Employee 1 is the manager of 2 and 4.</li>\r\n    <li>Employee 2 is the manager of 3.</li>\r\n    <li>Employee 3 is the manager of 5.</li>\r\n</ul>\r\n<p>The total number of reportees for each employee is calculated as follows:</p>\r\n<ul>\r\n    <li>Employee 1 (CEO): Has direct reportees 2 and 4. Employee 2 has reportees 3 and 5. Employee 4 has no reportees. Total reportees for employee 1 are {2, 3, 4, 5}, which is 4.</li>\r\n    <li>Employee 2: Has a direct reportee 3. Employee 3 has a reportee 5. Total reportees for employee 2 are {3, 5}, which is 2.</li>\r\n    <li>Employee 3: Has a direct reportee 5. Total reportees for employee 3 are {5}, which is 1.</li>\r\n    <li>Employee 4: Has no reportees. Total is 0.</li>\r\n    <li>Employee 5: Has no reportees. Total is 0.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= N &lt;= 1e5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> calculateReportees(int N, const std::vector<std::vector<int>>& adj) {\n        // Core logic to calculate the number of reportees for each employee goes here.\n        std::vector<int> result(N + 1, 0);\n        return result;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<std::vector<int>> adj(N + 1);\n    for (int i = 0; i < N - 1; ++i) {\n        int employee, manager;\n        std::cin >> employee >> manager;\n        adj[manager].push_back(employee);\n    }\n\n    Solution solution;\n    std::vector<int> reportees = solution.calculateReportees(N, adj);\n\n    for (int i = 1; i <= N; ++i) {\n        std::cout << reportees[i] << (i == N ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "InMobi",
        "company_id": 590
    },
    {
        "id": 1689,
        "title": "Cheapest Flights Within K Stops",
        "problem_statement": "<h1>Cheapest Flights Within K Stops</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a network of n cities connected by m flights. Each flight has a source city, a destination city, and a price. Your task is to find the cheapest route from a given source city (src) to a destination city (dst) with at most k stops.</p>\r\n<p>If no such route exists, you should return -1.</p>\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li>Total number of cities, n.</li>\r\n    <li>Total number of flights, m.</li>\r\n    <li>Source city, src.</li>\r\n    <li>Destination city, dst.</li>\r\n    <li>Maximum number of stops allowed, k.</li>\r\n</ul>\r\n<p>The next m lines contain the flight details: source destination price.</p>\r\n<p><strong>Output:</strong></p>\r\n<p>Return a single integer representing the total cost of the cheapest route.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n8\r\n0\r\n3\r\n1\r\n0 1 10\r\n0 2 10\r\n0 3 15\r\n0 4 2\r\n1 3 20\r\n2 3 50\r\n4 5 2\r\n5 3 2\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> For the given input, we need to find the cheapest route from city 0 to city 3 with at most 1 stop.</p>\r\n<p>The path 0 -> 4 -> 5 -> 3 has a total cost of 2+2+2=6. However, it has 2 stops (at cities 4 and 5), which exceeds the limit of k=1.</p>\r\n<p>The path 0 -> 3 is a direct flight with a cost of 15. This route has 0 stops, which is within the allowed limit.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 100</code></li>\r\n    <li><code>1 &lt;= src &lt;= n</code></li>\r\n    <li><code>1 &lt;= dst &lt;= n</code></li>\r\n    <li><code>src not equal to dst</code></li>\r\n    <li><code>1 &lt;= k &lt; n</code></li>\r\n</ul>\r\n<p><strong>Note:</strong> There is only one direct flight between any two cities.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int findCheapestPrice(int n, std::vector<std::vector<int>>& flights, int src, int dst, int k) {\n        // Core logic to find the cheapest price will be implemented here.\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n, m, src, dst, k;\n    std::cin >> n >> m >> src >> dst >> k;\n\n    std::vector<std::vector<int>> flights(m, std::vector<int>(3));\n    for (int i = 0; i < m; ++i) {\n        std::cin >> flights[i][0] >> flights[i][1] >> flights[i][2];\n    }\n\n    Solution solution;\n    int result = solution.findCheapestPrice(n, flights, src, dst, k);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "InMobi",
        "company_id": 590
    },
    {
        "id": 1690,
        "title": "Minimum Chain Joining Cost",
        "problem_statement": "<h1>Minimum Chain Joining Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a large broken chain (think of Ship Anchor Chain) with N pieces. Join all the pieces to make chain whole again. Process to join chain is as follows:</p>\r\n<ul>\r\n    <li>Pick any two pieces and join those.</li>\r\n    <li>Repeat this process until all pieces are joined.</li>\r\n</ul>\r\n<p>Each join operation requires some cost (labour cost, welding cost etc.). Cost of each join operation is equal to sum of the Weights W of pieces which are being joined. Total cost will be sum of costs each step. Find the way to keep total cost as minimum.</p>\r\n\r\n<p><strong>Input:</strong></p>\r\n<p>Value of N in 1st line.</p>\r\n<p>Comma and space separated N integers in 2nd line, which denote individual weights of N pieces.</p>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>Value of minimum total cost.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n8, 2, 3, 4\r\nOutput:\r\n31</code></pre>\r\n<p><strong>Explanation:</strong> In the above sample, a broken chain has 4 pieces with given weights. Two pieces are joined at a time, for example if 8 and 2 are joined, a new piece will have weight of 10. Then it can be joined with any of the remaining pieces in any of the next steps.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; W &le; 10<sup>5</sup></code> (where W is the weight of an individual piece)</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <numeric>\n#include <algorithm>\n#include <queue>\n\nclass Solution {\npublic:\n    long long solve(int n, std::vector<int>& weights) {\n        // Core logic goes here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n    std::cin.ignore(); \n\n    std::string line;\n    std::getline(std::cin, line);\n\n    std::vector<int> weights;\n    std::stringstream ss(line);\n    std::string token;\n\n    while (std::getline(ss, token, ',')) {\n        // Trim leading whitespace\n        size_t first = token.find_first_not_of(\" \\t\\n\\r\");\n        if (std::string::npos != first) {\n            token = token.substr(first);\n        }\n        weights.push_back(std::stoi(token));\n    }\n\n    Solution solution;\n    long long result = solution.solve(n, weights);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "InMobi",
        "company_id": 590
    }
]