[
    {
        "id": 1345,
        "title": "Almost Matching Substrings",
        "problem_statement": "```html\r\n<h1>Almost Matching Substrings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're creating a new programming language with some exciting new features! Any programming language can check if two strings are matching, but you'd like yours to be able to check if they're <em>almost matching</em>. More specifically, we'll say two strings are <strong>almost matching</strong> if they're equal in length and all of their corresponding characters are the same except for one. For example, <code>\"cat\"</code> and <code>\"bat\"</code> are almost matching, but <code>\"cat\"</code> and <code>\"dog\"</code> are not.</p>\r\n<p>For the sake of efficiency, you're planning on testing the feature by using a single string and comparing its substrings. Given a string <code>s</code> and an integer <code>k</code>, your task is to find the number of pairs of substrings of <code>s</code> that are almost matching but differ at their <code>k<sup>th</sup></code> character (0-based). It's necessary that the length of both substrings exceeds <code>k</code> (otherwise the strings wouldn't have a <code>k<sup>th</sup></code> character).</p>\r\n<p>Also note that substrings are determined by their indices, so there could potentially be multiple instances of the same word. For example, in the word <code>\"ingratiating\"</code> the substring <code>\"ing\"</code> beginning at index 0 is considered distinct from the one at index 9 (and there are also two distinct <code>\"at\"</code> substrings).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abacaba\", k = 1\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong>\r\nUsing <code>i</code> and <code>j</code> to represent the start and end indices of the first substrings, and <code>l</code> and <code>m</code> to represent the indices of the second substring, the 8 pairs are:</p>\r\n<ul>\r\n    <li><code>(\"aba\", \"aca\")</code> - <code>i = 0, j = 2</code>, <code>l = 2, m = 4</code></li>\r\n    <li><code>(\"aba\", \"aca\")</code> - <code>i = 4, j = 6</code>, <code>l = 2, m = 4</code></li>\r\n    <li><code>(\"aca\", \"aba\")</code> - <code>i = 2, j = 4</code>, <code>l = 0, m = 2</code></li>\r\n    <li><code>(\"aca\", \"aba\")</code> - <code>i = 2, j = 4</code>, <code>l = 4, m = 6</code></li>\r\n    <li><code>(\"ac\", \"ab\")</code> - <code>i = 2, j = 3</code>, <code>l = 0, m = 1</code></li>\r\n    <li><code>(\"ac\", \"ab\")</code> - <code>i = 2, j = 3</code>, <code>l = 4, m = 5</code></li>\r\n    <li><code>(\"ab\", \"ac\")</code> - <code>i = 0, j = 1</code>, <code>l = 2, m = 3</code></li>\r\n    <li><code>(\"ab\", \"ac\")</code> - <code>i = 4, j = 5</code>, <code>l = 2, m = 3</code></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; s.length &le; 200</code></li>\r\n    <li><code>s</code> consists only of lowercase English letters.</li>\r\n    <li><code>0 &le; k &lt; s.length</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_4sep",
        "company_id": 468
    }
]