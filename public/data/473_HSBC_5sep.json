[
    {
        "id": 1357,
        "title": "Biggest Two-Digit Consistent Fragment",
        "problem_statement": "<h1>Biggest Two-Digit Consistent Fragment</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string consisting of digits. Find the biggest two-digit value that is a <strong>consistent fragment</strong> of the given string.</p>\r\n<p>For example, two-digit <strong>consistent fragments</strong> of \"50552\" are [\"50\", \"05\", \"55\", \"52\"], representing the numbers [50, 5, 55, 52]. The biggest value among them is 55.</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-javascript'>int solution(string &S);</code></pre>\r\n<p>that, given a string S consisting of digits, returns the maximum two-digit value that is a <strong>consistent fragment</strong> of S.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"50552\"\r\nOutput: 55</code></pre>\r\n<p><strong>Explanation:</strong> The two-digit consistent fragments are \"50\", \"05\", \"55\", \"52\", representing numbers 50, 5, 55, 52. The maximum value among them is 55.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = \"10101\"\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> The two-digit consistent fragments are \"10\", \"01\", \"10\", \"01\", representing numbers 10, 1, 10, 1. The maximum value among them is 10.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: S = \"88\"\r\nOutput: 88</code></pre>\r\n<p><strong>Explanation:</strong> The only two-digit consistent fragment is \"88\", representing the number 88. The maximum value is 88.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>string S is made only of digits (0 - 9)</li>\r\n    <li>the number of digits of S is within the range [2..100]</li>\r\n    <li>S does not start with '0'.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HSBC_5sep",
        "company_id": 473
    },
    {
        "id": 1358,
        "title": "Maximum Signs from Catalogue",
        "problem_statement": "<h1>Maximum Signs from Catalogue</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a company that sells large letters made of wood and metal (similar to the ones spelling \"HOLLYWOOD\"). The company is going out of business, and the owners want to sell off their remaining stock. They have listed all the remaining letters in a catalogue in a string S (in no particular order), and have advertised their \"Everything must go\" offer online.</p>\r\n<p>Attracted by the reduced prices, Alice has decided to order some letters from the company. She wants to build as many signs with the name of her new blog as possible and place them around the city. She hasn't decided on the name of her blog yet, and is considering K different possibilities. Right now she is wondering about the maximum number of signs she can build if she chooses one of the names from her list.</p>\r\n<p>Knowing the list of possible names of Alice's blog L and the company catalogue state S, find the maximum number of copies of a name from L that Alice can build.</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-javascript'>class Solution { public int solution(String S, String[] L); }</code></pre>\r\n<p>that, given the string S and the list L consisting of K strings, returns the maximum number of copies of a string from L that can be built only using letters from S.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"BILLOBILLOLLOBBI\", L = [\"BILL\", \"BOB\"]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The sign \"BILL\" can be built three times using the letters from S and the sign \"BOB\" can be built only twice.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = \"CAT\", L = [\"ILOVEMYDOG\", \"CATS\"]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> None of the proposed names can be built using the letters from S.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: S = \"ABCDXYZ\", L = [\"ABCD\", \"XYZ\"]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Both signs \"ABCD\" and \"XYZ\" can be built only once using the letters from S.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The length of string S is within the range [1..100].</li>\r\n    <li>K is an integer within the range [1..10].</li>\r\n    <li>The lengths of the strings in L are within the range [1..100].</li>\r\n    <li>string S is made only of uppercase letters (A - Z).</li>\r\n    <li>strings in L consist only of uppercase letters (A - Z).</li>\r\n</ul>\r\n<p>In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HSBC_5sep",
        "company_id": 473
    },
    {
        "id": 1359,
        "title": "Robot Path Validity",
        "problem_statement": "<h1>Robot Path Validity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A robot starts at the origin <code>(0,0)</code> on a 2D grid. It is given a string <code>moves</code> which describes a sequence of movements. Each character in <code>moves</code> represents a single step:</p>\r\n<ul>\r\n    <li><code>'^'</code>: moves one unit up (<code>(x, y)</code> to <code>(x, y+1)</code>)</li>\r\n    <li><code>'v'</code>: moves one unit down (<code>(x, y)</code> to <code>(x, y-1)</code>)</li>\r\n    <li><code>'<'</code>: moves one unit left (<code>(x, y)</code> to <code>(x-1, y)</code>)</li>\r\n    <li><code>'>'</code>: moves one unit right (<code>(x, y)</code> to <code>(x+1, y)</code>)</li>\r\n</ul>\r\n<p>The robot's path is considered \"valid\" if it never visits the same grid point twice, with one specific exception: the starting point <code>(0,0)</code> may be revisited, but only as the very last point of the path, thereby forming a simple closed loop.</p>\r\n<p>Your task is to implement a function <code>solution(moves)</code> that returns <code>true</code> if the path described by <code>moves</code> is valid according to these rules, and <code>false</code> otherwise.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: moves = \"^>>v<v^\"\r\nOutput: false</code></pre>\r\n<p><strong>Explanation:</strong> Starting from <code>(0,0)</code>, the path is: <code>(0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,0) -> (1,0) -> (1,1)</code>. The point <code>(1,1)</code> is visited twice (after the second move and after the sixth move). Since this is not the starting point and it's not the final step, the path is invalid.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: moves = \"^>vv<^\"\r\nOutput: true</code></pre>\r\n<p><strong>Explanation:</strong> Starting from <code>(0,0)</code>, the path is: <code>(0,0) -> (0,1) -> (1,1) -> (1,0) -> (0,0)</code>. This path forms a simple closed loop. The only point visited twice is <code>(0,0)</code>, which is both the start and the end of the path. Thus, the path is valid.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= moves.length <= 100</code></li>\r\n    <li><code>moves</code> consists only of the characters <code>'^'</code>, <code>'v'</code>, <code>'<'</code>, and <code>'>'</code>.</li>\r\n</ul>\r\n\r\n<h2>Follow-up</h2>\r\n<p>In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HSBC_5sep",
        "company_id": 473
    },
    {
        "id": 1360,
        "title": "Battleships",
        "problem_statement": "<h1>Battleships</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Battleships is a game played on a rectangular board. You are given a representation of such a board of size N (height) x M (width) with information about the locations of the ships.</p>\r\n<p>The board is given as an array B, whose every element is a string that corresponds to one row of the game board. Each character of each string represents a cell of the board and is either:</p>\r\n<ul>\r\n    <li>a '<code>#</code>' character, marking a part of a ship; or</li>\r\n    <li>a '<code>.</code>' character, representing an empty cell.</li>\r\n</ul>\r\n<p>Two cells that share a side and have a value of '<code>#</code>' are parts of the same ship. Cell (X, Y) shares a side with cells (X, Y-1), (X, Y+1), (X-1, Y) and (X+1, Y).</p>\r\n<p>In the Battleships game there are three types of ships:</p>\r\n<ul>\r\n    <li>\r\n        <p><strong>Patrol Boats of size 1:</strong></p>\r\n        <p>A single cell (e.g., <code>#</code>).</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>Submarines of size 2, which come in two shapes:</strong></p>\r\n        <ul>\r\n            <li>Horizontal: <code>##</code></li>\r\n            <li>Vertical: <code>#<br>#</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <p><strong>Destroyers of size 3, which come in six shapes:</strong></p>\r\n        <ul>\r\n            <li>Horizontal: <code>###</code></li>\r\n            <li>Vertical: <code>#<br>#<br>#</code></li>\r\n            <li>L-shape 1 (top-left 2x2 with bottom-right missing): <code>##<br>#</code></li>\r\n            <li>L-shape 2 (top-left 2x2 with bottom-left missing): <code>##<br>&nbsp;#</code></li>\r\n            <li>L-shape 3 (top-left 2x2 with top-right missing): <code>#<br>##</code></li>\r\n            <li>L-shape 4 (top-left 2x2 with top-left missing): <code>&nbsp;#<br>##</code></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Your task is to find the number of ships of each type occurring on the board.</p>\r\n<p>For example, on the board represented by <code>B = [\".,##.,.\", \"#.,#.#\", \".##.#.\" ]</code>, there are two patrol boats, one submarine, and two destroyers. The visual representation of this board with identified ship types (D for Destroyer, S for Submarine, P for Patrol Boat) is:</p>\r\n<pre><code class='language-text'>D D . P\r\nD D . P\r\nD S S .\r\nD . . .</code></pre>\r\n<p>Write a function:</p>\r\n<pre><code class='language-cpp'>class Solution {\r\npublic:\r\n    vector<int> solution(vector<string>& B);\r\n};</code></pre>\r\n<p>that, given an array B consisting of N strings of length M each, returns an array R of three Integers, such that:</p>\r\n<ul>\r\n    <li><code>R[0]</code> represents the number of Patrol Boats.</li>\r\n    <li><code>R[1]</code> represents the number of Submarines.</li>\r\n    <li><code>R[2]</code> represents the number of Destroyers.</li>\r\n</ul>\r\n<p>In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: B = [\".,##.,.\", \"#.,#.#\", \".##.#.\" ]\r\nOutput: [2, 1, 2]</code></pre>\r\n<p><strong>Explanation:</strong> As explained above, this board contains two Patrol Boats, one Submarine, and two Destroyers.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: B = [\"...\", \"#.#\", \"#.#\"]\r\nOutput: [1, 1, 1]</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: B = [\".##\", \"...\", \".##\"]\r\nOutput: [0, 0, 2]</code></pre>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: B = [\"...\", \"...\", \"...\"]\r\nOutput: [0, 0, 0]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>N</code> is an integer within the range <code>[1..100]</code>.</li>\r\n    <li>All strings in <code>B</code> are of the same length <code>M</code> from the range <code>[1..100]</code>.</li>\r\n    <li>Every string in",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HSBC_5sep",
        "company_id": 473
    },
    {
        "id": 1361,
        "title": "Minimum Gym Membership Cards",
        "problem_statement": "<h1>Minimum Gym Membership Cards</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A gym membership card allows entry for a one-week period that always begins on a Monday and ends on the following Sunday. Ellis attends the gym once a day at most. You are given a list <code>visits</code> of length <code>N</code>, which represents the days Ellis visits the gym, in chronological order. What is the minimum number of gym membership cards that Ellis has to purchase?</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-javascript'>int solution(vector&lt;string&gt; &amp;visits);</code></pre>\r\n<p>that, given a list <code>visits</code> of length <code>N</code>, returns the minimum number of gym membership cards that Ellis must purchase based on the order of visits specified. Days of the week in <code>visits</code> are represented as three-letter strings (<code>\"Mon\"</code>, <code>\"Tue\"</code>, <code>\"Wed\"</code>, <code>\"Thu\"</code>, <code>\"Fri\"</code>, <code>\"Sat\"</code>, <code>\"Sun\"</code>).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: visits = [\"Tue\", \"Sat\", \"Mon\", \"Fri\"]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> In the first week, Ellis visits the gym on Tuesday and Saturday. In the second week, Ellis visits the gym on Monday and Friday.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: visits = [\"Mon\", \"Mon\", \"Mon\"]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Ellis visits the gym only on Monday each week.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: visits = [\"Sun\", \"Sat\", \"Fri\", \"Thu\", \"Wed\", \"Tue\", \"Mon\"]\r\nOutput: 7</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>N</code> is an integer within the range [1..100].</li>\r\n    <li>the only strings in <code>visits</code> are: <code>\"Mon\"</code>, <code>\"Tue\"</code>, <code>\"Wed\"</code>, <code>\"Thu\"</code>, <code>\"Fri\"</code>, <code>\"Sat\"</code>, and/or <code>\"Sun\"</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HSBC_5sep",
        "company_id": 473
    }
]