[
    {
        "id": 894,
        "title": "Emergency Code Configurations",
        "problem_statement": "<h1>Emergency Code Configurations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Dr. Alex was rushing to the hospital to attend an emergency surgery. In his hurry, he glanced at his pager and read the emergency code, but due to the stress and the motion of the ambulance, he couldn't remember the digits exactly. The code he read was a number, let's call it X.</p>\r\n<p>Dr. Alex realized he might have jumbled the sequence of digits in the emergency code. He might have encountered some digits multiple times, but he was certain that the digits he read were part of the real code.</p>\r\n<p>For instance, if Dr. Alex read the code 2042, then digits 2, 0, and 4 were definitely part of the original emergency code. The second occurrence of the digit '2' might be a mistake or might be in the original code.</p>\r\n<p>Possible original sequences include: 2042 (correct reading), 2402 (jumbled sequence), and 204 (one occurrence of 2).</p>\r\n<p>Invalid sequences include: 22042 (too many 2s), 4120 (extra digits), and 0242 (leading 0).</p>\r\n<p>Find the total number of possible emergency code configurations based on the given number X that Dr. Alex could have read.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The input consists of only one line with a single integer x denoting the emergency code as read by Dr. Alex.</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>Print an integer, the total number of possible emergency code configurations.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 32\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> In this testcase, there are only two configurations possible - 32 and 23.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 404\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the possible configurations are - 404, 40, 440. There is no other possible configuration so the answer is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= x &lt;= 10^18</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_7may",
        "company_id": 275
    },
    {
        "id": 895,
        "title": "Sum of Magical Numbers",
        "problem_statement": "<h1>Sum of Magical Numbers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of size N. A magical number 'M' is computed on a subarray <code>[L, R]</code> using a special formula.</p>\r\n<p>The magical number for a subarray is calculated as the difference between the sum of its prefix sums and the sum of its suffix sums. Mathematically, for a subarray <code>arr[L...R]</code>:</p>\r\n<p><code>M = (Σ<sub>i=L</sub><sup>R</sup> Σ<sub>j=i</sub><sup>R</sup> arr[j]) - (Σ<sub>i=L</sub><sup>R</sup> Σ<sub>j=L</sub><sup>i</sup> arr[j])</code></p>\r\n<p>Basically, the magical number for some subarray <code>[a,b,c]</code> would be <code>((a) + (a+b) + (a+b+c)) - ((a+b+c) + (b+c) + c)</code>.</p>\r\n<p>You need to find the sum of magical numbers of the following subarrays:</p>\r\n<ul>\r\n    <li><code>[i, N-1]</code> for <code>i ∈ {0, 1, 2, 3, ..., N-1}</code></li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Input:</strong></p>\r\n<p>The first line of input takes N.</p>\r\n<p>The second line takes input of N integer values of array.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p><strong>Output:</strong></p>\r\n<p>Print the sum of all magical numbers.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 100000</code></li>\r\n    <li><code>1 <= arr[i] <= 100</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n4 8 2 3 12\r\nOutput:\r\n-64</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For subarray <code>[0,4]</code> -> M = <code>((4) + (4+8) + (4+8+2) + (4+8+2+3) + (4+8+2+3+12)) - ((4+8+2+3+12) + (8+2+3+12) + (2+3+12) + (3+12) + (12))</code> = -22.</li>\r\n    <li>For subarray <code>[1,4]</code> -> M = <code>((8) + (8+2) + (8+2+3) + (8+2+3+12)) - ((8+2+3+12) + (2+3+12) + (3+12) + (12))</code> = -13.</li>\r\n    <li>For subarray <code>[2,4]</code> -> M = <code>((2) + (2+3) + (2+3+12)) - ((2+3+12) + (3+12) + (12))</code> = -20.</li>\r\n    <li>For subarray <code>[3,4]</code> -> M = <code>((3) + (3+12)) - ((3+12) + (12))</code> = -9.</li>\r\n    <li>For subarray <code>[4,4]</code> -> M = <code>((12)) - ((12))</code> = 0.</li>\r\n</ul>\r\n<p>So, sum of all magical numbers is: <code>(-22) + (-13) + (-20) + (-9) + 0 = -64</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n12 45 10\r\nOutput:\r\n39</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For subarray <code>[0,2]</code> -> M = <code>((12) + (12+45) + (12+45+10)) - ((12+45+10) + (45+10) + (10))</code> = 4.</li>\r\n    <li>For subarray <code>[1,2]</code> -> M = <code>((45) + (45+10)) - ((45+10) + (10))</code> = 35.</li>\r\n    <li>For subarray <code>[2,2]</code> -> M = <code>((10)) - ((10))</code> = 0.</li>\r\n</ul>\r\n<p>So, sum of all magical numbers is: <code>4 + 35 + 0 = 39</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_7may",
        "company_id": 275
    },
    {
        "id": 896,
        "title": "Digit Sum Substrings",
        "problem_statement": "<h1>Digit Sum Substrings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alex, an archaeologist, discovered an ancient scroll hidden deep within an old temple. This scroll contains a string of N digits. According to legend, the scroll reveals its secret if it can be split into two or more non-overlapping substrings, each having the same sum of digits. Every digit on the scroll must belong to exactly one of these substrings.</p>\r\n<p>For example, the string \"12131\" can be split into \"121\" and \"31\", where the sum of the digits in each substring is equal. Specifically, 1+2+1=4 and 3+1=4.</p>\r\n<p>Your objective is to determine if the string on the scroll meets the criteria for revealing the secret message.</p>\r\n<p>The input consists of two lines. The first line contains an integer N, representing the length of the string. The second line contains the string S, made up of N digits.</p>\r\n<p>Your program should print \"YES\" if the scroll holds the secret message, otherwise print \"NO\".</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n124\r\nOutput:\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong> The string \"124\" cannot be split into two or more non-overlapping substrings with equal sums. For instance, splitting into \"1\" and \"24\" gives sums of 1 and 6. Splitting into \"12\" and \"4\" gives sums of 3 and 4. Hence, the output is \"NO\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n12131\r\nOutput:\r\nYES</code></pre>\r\n<p><strong>Explanation:</strong> In the string \"12131\", we can split it into \"121\" and \"31\". The sum of digits in both substrings is 4 (1+2+1 and 3+1). Thus, the string meets the criteria, revealing the secret. Hence, the output is \"YES\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>2 &lt;= N &lt;= 10<sup>2</sup></li>\r\n<li>0 &lt;= S[i] &lt;= 9 (for each digit S[i] in the string S)</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_7may",
        "company_id": 275
    },
    {
        "id": 897,
        "title": "Blocking Grid",
        "problem_statement": "<h1>Blocking Grid</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Tom and Alex are playing a game called \"Blocking Grid\".</p>\r\n<p>The game involves an NxN grid. Each minute, Alex blocks one cell of the grid, and Tom attempts to move from the cell (1,1) to cell (N,N). If Tom successfully reaches (N,N), Tom earns 1 point. If he cannot, Alex earns 1 point. Alex is allowed to block a total of M cells. Tom can move to adjacent cells (left, right, up, down) but cannot move to blocked cells.</p>\r\n<p>The player with the most points wins the game. Determine the winner.</p>\r\n<p><strong>Note:</strong> The grid uses 1-based indexing.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two space-separated integers, N and M, representing the size of the grid and the number of cells Alex will block, respectively.</p>\r\n<p>The next M lines each contain two space-separated integers, X and Y, indicating the cell blocked by Alex on the i-th second.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print \"Alex\" if Alex earns more points than Tom.</p>\r\n<p>Print \"Tom\" if Tom earns more or an equal number of points compared to Alex.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= M &lt;= N*N</code></li>\r\n    <li><code>1 &lt;= X, Y &lt;= N</code></li>\r\n    <li><code>1 &lt;= N*M &lt;= 10^6</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 3\r\n3 3\r\n3 4\r\n4 4\r\nOutput:\r\nTom</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>After the first minute, the grid has cell (3,3) blocked. Tom can easily move from cell (1,1) to (N,N) through following moves: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4). Thus, Tom earns 1 point.</p>\r\n<p>After the second minute, the grid has cells (3,3) and (3,4) blocked. Tom can still easily move from cell (1,1) to (N,N) through following moves: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4). Thus, Tom earns 1 point.</p>\r\n<p>After the third minute, the grid has cells (3,3), (3,4), and (4,4) blocked. Now Tom cannot reach cell (N, N). Thus, Alex earns 1 point.</p>\r\n<p>Since Tom earned 2 points and Alex earned 1 point, Tom has more points than Alex. So, we output \"Tom\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 2\r\n2 2\r\n1 1\r\nOutput:\r\nAlex</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>After the first minute, the grid has cell (2,2) blocked. Tom can't reach cell (2,2). Thus, Alex gets 1 point.</p>\r\n<p>After the second minute, the grid has cells (2,2) and (1,1) blocked. Tom can't reach cell (2,2) (as (1,1) is blocked, he can't even start). Thus, Alex gets 1 point.</p>\r\n<p>Number of points earned by Alex is greater than that of Tom (Alex: 2, Tom: 0). So, Alex is winner.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Myntra_7may",
        "company_id": 275
    }
]