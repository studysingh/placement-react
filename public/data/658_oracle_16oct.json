[
    {
        "id": 1872,
        "title": "Roll the String",
        "problem_statement": "<h1>Roll the String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A single roll operation increments each character by one in a circular manner within the English alphabet (a-z). For example, 'a' becomes 'b', 'b' becomes 'c', and 'z' becomes 'a'.</p>\r\n<p>Given a string <code>s</code> and an array of integers <code>roll</code>, perform a roll operation on the first <code>roll[i]</code> characters of <code>s</code> for each element in the array.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>rollTheString</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string s</code>: the string to operate on</li>\r\n    <li><code>int roll_count</code>: the number of items in <code>roll</code></li>\r\n    <li><code>int* roll</code>: an array of integers representing the number of characters to roll for each operation</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>string</code>: the resulting string after all roll operations have been performed</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abz\", roll = [3, 2, 1]\r\nOutput: \"dda\"</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li><strong>roll[0] = 3:</strong> Roll all three characters. 'abz' becomes 'bca'. (a->b, b->c, z->a)</li>\r\n    <li><strong>roll[1] = 2:</strong> Roll the first two characters. 'bca' becomes 'cda'. (b->c, c->d, a remains a)</li>\r\n    <li><strong>roll[2] = 1:</strong> Roll the first character. 'cda' becomes 'dda'. (c->d, d remains d, a remains a)</li>\r\n</ol>\r\n<p>The final value of <code>s</code> is 'dda'.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: s = \"abz\", roll = [3]\r\nOutput: \"bca\"</code></pre>\r\n<p><strong>Explanation:</strong> Roll forward the first 3 characters in the substring <code>s[0] - s[2]</code>, so 'abz' becomes 'bca'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Each character in <code>s</code> is in the range ascii[a-z].</li>\r\n    <li><code>1 <= length of s <= 10^5</code></li>\r\n    <li><code>1 <= n <= 10^5</code> (where <code>n</code> is <code>roll_count</code>)</li>\r\n    <li><code>1 <= roll[i] <= length of s</code>, where <code>0 <= i < n</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param s The string to operate on.\n     * @param roll An array of integers representing the number of characters to roll for each operation.\n     * @return The resulting string after all roll operations have been performed.\n     */\n    std::string rollTheString(std::string s, const std::vector<int>& roll) {\n        // Core logic goes here\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string s;\n    std::cin >> s;\n\n    int roll_count;\n    std::cin >> roll_count;\n\n    std::vector<int> roll(roll_count);\n    for (int i = 0; i < roll_count; ++i) {\n        std::cin >> roll[i];\n    }\n\n    Solution solution;\n    std::string result = solution.rollTheString(s, roll);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "oracle_16oct",
        "company_id": 658
    },
    {
        "id": 1873,
        "title": "Code Bracket Validator",
        "problem_statement": "<h1>Code Bracket Validator</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of strings, where each string contains only the characters '(', ')', '[', ']', '{', and '}'. For each string, determine if the string is valid.</p>\r\n<p>A string is valid if:</p>\r\n<ul>\r\n    <li>Every opening bracket has a matching closing bracket of the same type.</li>\r\n    <li>Brackets close in the correct order.</li>\r\n</ul>\r\n<p>The function <code>isValidBrackets</code> will take one input:</p>\r\n<pre><code class='language-text'>string queries[q]: the string queries</code></pre>\r\n<p>The function should return an array of strings, where each element is \"YES\" if the corresponding input string is valid, or \"NO\" otherwise.</p>\r\n<p>To return the string array from the function, you should:</p>\r\n<ul>\r\n    <li>Store the size of the array to be returned in the <code>result_count</code> variable.</li>\r\n    <li>Allocate the array statically or dynamically.</li>\r\n</ul>\r\n<p>The function signature to complete is:</p>\r\n<pre><code class='language-c'>char** isValidBrackets(int queries_count, char** queries, int* result_count) {\r\n    // Complete the function\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nqueries = [\"{([])}\", \"([)]\", \"{[}]\", \"\"]\r\nq = 4\r\n\r\nOutput:\r\nYES\r\nNO\r\nNO\r\nYES</code></pre>\r\n<p><strong>Explanation:</strong> Analysis of each bracket sequence is as follows:</p>\r\n<ol>\r\n    <li><code>\"{([])}\"</code> -> Brackets are correctly matched and all pairs match.</li>\r\n    <li><code>\"([)]\"</code> -> Incorrect closing: ')' closes before '[' is matched.</li>\r\n    <li><code>\"{[}]\"</code> -> Incorrect closing: '}' closes before '[' is matched.</li>\r\n    <li><code>\"\"</code> -> Brackets are properly matched and in correct order.</li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= q <= 2 * 10^5</code></li>\r\n    <li><code>1 <= length of queries[i] <= 2 * 10^5</code></li>\r\n    <li>It is guaranteed that the sum of the lengths of strings over all the queries does not exceed <code>2 * 10^5</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <stack>\n#include <limits>\n\nclass Solution {\npublic:\n    std::vector<std::string> isValidBrackets(const std::vector<std::string>& queries) {\n        // Core logic to validate each bracket string goes here.\n        std::vector<std::string> results;\n        // For each string in queries, determine if it's valid (\"YES\" or \"NO\")\n        // and push the result into the 'results' vector.\n        return results;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int q;\n    std::cin >> q;\n    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n\n    std::vector<std::string> queries(q);\n    for (int i = 0; i < q; ++i) {\n        std::getline(std::cin, queries[i]);\n    }\n\n    Solution solution;\n    std::vector<std::string> results = solution.isValidBrackets(queries);\n\n    for (const auto& res : results) {\n        std::cout << res << \"\\n\";\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "oracle_16oct",
        "company_id": 658
    }
]