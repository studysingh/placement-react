[
    {
        "id": 1094,
        "title": "Make Alphabetically Smallest Palindrome",
        "problem_statement": "<h1>Make Alphabetically Smallest Palindrome</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A palindrome reads the same from either direction, e.g., 'ede'. Given a string of lowercase English letters, determine how to change it in the fewest possible letters to form a palindrome after which, if multiple palindromes are possible with the same number of changes, return the alphabetically smallest one.</p>\r\n<p><strong>Function Description</strong></p>\r\n<p>Complete the function <code>makeAlphabeticallySmallestPalindrome</code> in the editor with the following parameter:</p>\r\n<ul>\r\n    <li><code>string s</code>: the string</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<p><code>string</code>: the alphabetically smallest palindromic string that can be obtained by changing a minimum number of characters</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example:</h3>\r\n<p><code>s = \"azzbzzb\"</code></p>\r\n<ul>\r\n    <li>Optimally, change one 'z' to 'a' to get \"aazzbba\".</li>\r\n    <li>This can be rearranged to form \"abzbzba\", which is the alphabetically smallest palindrome possible after 1 change.</li>\r\n</ul>\r\n<p>Other palindromes are possible with 1 change, such as \"azbbza\" or \"zzbbzz\", but \"abzbzba\" is alphabetically smallest.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: s = \"fhaigh\"\r\nOutput: \"afhhfa\"</code></pre>\r\n<p><strong>Explanation:</strong> The algorithm changes 'f' to 'a' and 'g' to 'f'.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"aabbaa\"\r\nOutput: \"aabbaa\"</code></pre>\r\n<p><strong>Explanation:</strong> The string is already palindrome and is also alphabetically smallest.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= length of s <= 3 * 10^5</code></li>\r\n    <li>The string <code>s</code> consists of lowercase English letters only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Atlassian_31july",
        "company_id": 358
    },
    {
        "id": 1095,
        "title": "Infection Sequences Count",
        "problem_statement": "<h1>Infection Sequences Count</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a town with <code>n</code> houses aligned in a straight line, numbered from 1 to <code>n</code> from left to right. A virus is spreading from an initially infected house. Every day an infected house spreads the virus to its immediate uninfected neighbors.</p>\r\n<p>Specifically, if house number <code>X</code> is infected on day <code>i</code>, then houses <code>X-1</code> and <code>X+1</code> will become infected on day <code>i+1</code> if they are not already infected. Eventually, all houses will become infected. The sequence in which the houses get infected is called the infection sequence.</p>\r\n<p>Given integer <code>n</code> and an integer array <code>infectedHouses</code> representing the initial infected houses, determine the total number of distinct infection sequences possible, modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, infectedHouses = [1, 5]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Initially, houses 1 and 5 are infected. The infection progresses as follows:</p>\r\n<ul>\r\n    <li>On Day 1, both houses numbers 2 and 4 become infected.</li>\r\n    <li>On Day 2, house number 3 is infected. Now all the houses are infected.</li>\r\n</ul>\r\n<p>There is no way that house number 3 can be infected before houses 2 and 4. The 2 possible infection sequences are <code>[2,4,3]</code> and <code>[4,2,3]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 6, infectedHouses = [3, 5]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> Initially, houses 3 and 5 are infected. The houses look like: <code>[1,2,3,4,5,6]</code>.</p>\r\n<ul>\r\n    <li>On Day 1, houses number 2, 4, 6 get infected. The houses look like this: <code>[1,2,3,4,5,6]</code>.</li>\r\n    <li>On Day 2, house number 1 gets infected. All the houses are infected now.</li>\r\n</ul>\r\n<p>The 6 possible infection sequences are: <code>[2,4,6,1]</code>, <code>[2,6,4,1]</code>, <code>[4,2,6,1]</code>, <code>[4,6,2,1]</code>, <code>[6,2,4,1]</code>, <code>[6,4,2,1]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 4, infectedHouses = [1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Initially, house 1 is infected. The houses look like: <code>[1,2,3,4]</code>.</p>\r\n<ul>\r\n    <li>On Day 1, house number 2 gets infected. The houses look like this: <code>[1,2,3,4]</code>.</li>\r\n    <li>On Day 2, house number 3 gets infected. The houses look like this: <code>[1,2,3,4]</code>.</li>\r\n    <li>On Day 3, house number 4 gets infected. All houses are infected now.</li>\r\n</ul>\r\n<p>The only possible infection sequence is <code>[2,3,4]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; m &le; n-1</code>, where <code>m</code> is the length of <code>infectedHouses</code>.</li>\r\n    <li><code>1 &le; infectedHouses[i] &le; n</code></li>\r\n    <li>All elements of the array are distinct.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Atlassian_31july",
        "company_id": 358
    },
    {
        "id": 1096,
        "title": "Earliest Meeting Time",
        "problem_statement": "<h1>Earliest Meeting Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a simple meeting assistant. Given a list of events representing when people are busy and the earliest time in the day when all mentioned people are available for a meeting of a specific duration.</p>\r\n<p>Events are provided as strings in the format:<br>\r\n<code>&lt;person name&gt; &lt;event name&gt; &lt;start time&gt; &lt;end time&gt;</code>, where start and end times are in \"HH:MM\" format. If no suitable time exists, return \"-1\".</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getEarliestMeetTime</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string events[n]</code>: event descriptors</li>\r\n    <li><code>int k</code>: meeting duration (in minutes)</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>string</code>: the earliest time for the meeting or \"-1\" if it is not possible</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: events = [\"Alex sleep 00:00 08:00\", \"Sam sleep 07:00 18:00\", \"Alex lunch 12:30 13:59\"], k = 60\r\nOutput: 14:00</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>Alex is not available until 8:00</li>\r\n    <li>Sam is not available until 13:00</li>\r\n    <li>Alex is busy again until 13:59</li>\r\n</ul>\r\nThe earliest time when both are available is \"14:00\".</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: events = [\"sam sleep 12:00 23:59\", \"alex sleep 00:00 13:00\"], k = 1\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> There is no time when both are free.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: events = [\"sam sleep 12:00 18:59\", \"alex gaming 00:00 11:00\"], k = 60\r\nOutput: 19:00</code></pre>\r\n<p><strong>Explanation:</strong> Alex plays games from 00:00 until 11:00. If the meeting starts at 11:01, it ends at 12:01. Sam is asleep from 12:00 to 18:59.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= length of events[] <= 40</code></li>\r\n    <li><code>1 <= k <= 1440</code></li>\r\n    <li>It is guaranteed that the number of people is less than 5000.</li>\r\n    <li>It is guaranteed that no person has two events at the same time.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Atlassian_31july",
        "company_id": 358
    }
]