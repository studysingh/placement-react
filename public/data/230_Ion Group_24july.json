[
    {
        "id": 727,
        "title": "Minimum Operations to Sort Array",
        "problem_statement": "<h1>Minimum Operations to Sort Array</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a function that determines the minimum number of operations required to sort an array <code>arr</code> of size <code>n</code> in non-decreasing order using the following operations any number of times (possibly zero):</p>\r\n<ul>\r\n    <li>Extract the first element of the array and insert it at the end.</li>\r\n    <li>Then swap that element with the previous one until it becomes the first or is strictly greater than the previous one.</li>\r\n</ul>\r\n<p>The function <code>minOperationsToSort</code> will take the following input:</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: The elements of the array <code>arr</code>.</li>\r\n</ul>\r\n<p>The function should return an integer denoting the minimum number of operations needed to sort the array in non-decreasing order, or <code>-1</code> if sorting is impossible.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [5, 3, 1]</code></pre>\r\n<p><strong>Operations on the array:</strong></p>\r\n<pre><code class='language-text'>Array before the operation | Array after the operation\r\n---------------------------|--------------------------\r\n[5, 3, 1]                  | [3, 1, 5]\r\n[3, 1, 5]                  | [1, 3, 5]</code></pre>\r\n<pre><code class='language-text'>Output: 2</code></pre>\r\n<p><strong>Explanation:</strong> The array arr can be sorted in non-decreasing order by applying 2 operations. Hence, the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [6, 4, 1, 2, 5]</code></pre>\r\n<p><strong>Operations on the array:</strong></p>\r\n<pre><code class='language-text'>Array before the operation | Array after the operation\r\n---------------------------|--------------------------\r\n[6, 4, 1, 2, 5]            | [4, 1, 2, 5, 6]\r\n[4, 1, 2, 5, 6]            | [1, 2, 4, 5, 6]</code></pre>\r\n<pre><code class='language-text'>Output: 2</code></pre>\r\n<p><strong>Explanation:</strong> The array arr can be sorted in non-decreasing order by applying 2 operations. Hence, the answer is 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: arr = [1, 2, 4, 2, 2]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> The array arr cannot be sorted in non-decreasing order by applying any number of operations. Hence, the answer is -1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<p>The problem provides the following function signature template:</p>\r\n<pre><code class='language-cpp'>int minOperationsToSort(vector&lt;int&gt; arr) {\r\n    // Function implementation\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_24july",
        "company_id": 230
    },
    {
        "id": 728,
        "title": "Largest Good Binary String",
        "problem_statement": "<h1>Largest Good Binary String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a good binary string:</p>\r\n<ol>\r\n    <li>The number of 0's equals the number of 1's.</li>\r\n    <li>For every prefix of the string, the number of 1's is greater than or equal to the number of 0's.</li>\r\n</ol>\r\n<p>Optimize a \"good\" binary string by rearranging its good substrings to create the largest possible numeric value.</p>\r\n<p><strong>Rules:</strong></p>\r\n<ul>\r\n    <li>A good string can contain multiple good substrings.</li>\r\n    <li>Two adjacent good substrings can be swapped if the resulting string remains good.</li>\r\n    <li>Two substrings are adjacent if the last character of the first substring is immediately before the first character of the second substring.</li>\r\n</ul>\r\n<p>Perform zero or more swap operations on adjacent good substrings to form the binary string with the largest possible numeric value and return that value.</p>\r\n<p>Complete the function `largestMagical` in the editor with the following parameters:</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li>`str binString`: a binary string</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li>`str`: the largest possible binary value as a string</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: binString = 11011000\r\nOutput: 11100100</code></pre>\r\n<p><strong>Explanation:</strong> Choose two adjacent good substrings to swap: 10 and 1100. The resultant string, str = 11100100.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: binString = 1100\r\nOutput: 1100</code></pre>\r\n<p><strong>Explanation:</strong> The only good substring of binString is 1100. No operations can be applied to the string.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: binString = 1101001100\r\nOutput: 1101001100</code></pre>\r\n<p><strong>Explanation:</strong> The only consecutive good substrings are 110100 and 1100. Note that 100 is not a good substring because it contains more zeros than ones. If they are swapped, it results in a numerically smaller string. Thus, binString is already the numerically largest good string that can be formed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Each character of `binString` is in {0,1}.</li>\r\n    <li>1 &le; length of `binString` &le; 50</li>\r\n    <li>`binString` is a good string.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_24july",
        "company_id": 230
    },
    {
        "id": 733,
        "title": "Compressed String",
        "problem_statement": "<h1>Compressed String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Various compression methods are employed to minimize the size of messages transmitted over the internet. A specific algorithm compresses a given string by indicating the total number of consecutive occurrences of each character. For instance, consider the string 'abaaaasss'. The consecutive occurrences of each character are grouped as follows:</p>\r\n<ul>\r\n    <li>'a' occurs one time.</li>\r\n    <li>'b' occurs one time.</li>\r\n    <li>'a' occurs two times consecutively.</li>\r\n    <li>'a' occurs one time.</li>\r\n    <li>'s' occurs one time.</li>\r\n    <li>'s' occurs two times consecutively.</li>\r\n</ul>\r\n<p>If a character occurs only once, it is added to the compressed string. If it occurs consecutively, the character is added to the string followed by an integer representing the number of consecutive occurrences. Thus, the compressed form of the string is 'aba2sas2'.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>compressedString</code> in the editor below. The function must return the compressed form of message.</p>\r\n<p>The function has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string message</code>: a string</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>string</code>: the compressed message</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: message = \"abc\"\r\nOutput: \"abc\"</code></pre>\r\n<p><strong>Explanation:</strong> None of the characters repeats consecutively so the string is already in compressed form.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: message = \"abaabbbc\"\r\nOutput: \"aba2b3c\"</code></pre>\r\n<p><strong>Explanation:</strong> Group the consecutive occurrences of each character to get \"a\" \"b\" \"aa\" \"bbb\" \"c\", in compressed form: \"aba2b3c\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>message[i] ∈ ascii[a-z]</code></li>\r\n    <li><code>|message| ≤ 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_24july",
        "company_id": 230
    },
    {
        "id": 734,
        "title": "Minimum Upgrade Time",
        "problem_statement": "<h1>Minimum Upgrade Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two servers and the time t1 and t2 respectively, in one second, each server undergoes the upgrade process. The servers receive requests at certain time intervals and pause upgrades during those seconds. The servers receive requests at multiples of req1 and req2 respectively. Determine the minimum total time (in seconds) required to upgrade both servers.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>Only one server undergoes the upgrade process at any given second.</li>\r\n    <li>There may be seconds during which no server is undergoing an upgrade.</li>\r\n</ul>\r\n<p>Complete the function `getMinUpgradationTime` in the editor below.</p>\r\n<p>`getMinUpgradationTime` takes the following parameter(s):</p>\r\n<ul>\r\n    <li>`int req1`: Indicates that the first server receives requests at multiples of `req1`.</li>\r\n    <li>`int t1`: The total time in seconds to upgrade the first server.</li>\r\n    <li>`int req2`: Indicates that the second server receives requests at multiples of `req2`.</li>\r\n    <li>`int t2`: The total time in seconds to upgrade the second server.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li>`long`: the minimum total time (in seconds) required to upgrade both servers.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n3\r\n3\r\n1\r\nOutput:\r\n7</code></pre>\r\n<p><strong>Explanation:</strong> The minimum total time will be 7 seconds; the first server upgrades at the 1st second, and the second server upgrades at the 3rd, 5th, and 7th seconds.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n4\r\n1\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> The minimum time required is 3 seconds; the first server upgrades at the 1st and 2nd seconds, and the second server upgrades at the 3rd second.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`2 <= req1, req2 <= 3 * 10^4`</li>\r\n    <li>`1 <= t1, t2 <= 10^9`</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_24july",
        "company_id": 230
    },
    {
        "id": 738,
        "title": "Better Compression",
        "problem_statement": "<h1>Better Compression</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string S that represents an e-compressed string format. Each character is followed by an integer indicating its frequency. However, the string may not be properly compressed, i.e., the same character might appear multiple times in different places.</p>\r\n<p>Your task is to create a properly compressed string where:</p>\r\n<ul>\r\n    <li>Each character appears exactly once.</li>\r\n    <li>Characters are arranged in alphabetical order.</li>\r\n    <li>The frequency for each character is the sum of all its occurrences in the original string.</li>\r\n</ul>\r\n<p><strong>Example:</strong></p>\r\n<p>S = \"a3b9b2c1\"</p>\r\n<p>The string is not properly compressed because 'b' appears twice with frequencies 9 and 2. The properly compressed version is \"a3b2c10\" where:</p>\r\n<ul>\r\n    <li>'a' appears once with frequency 3</li>\r\n    <li>'b' appears once with frequency 2</li>\r\n    <li>'c' appears once with combined frequency 10 (9+1)</li>\r\n    <li>All characters are in alphabetical order (a, b, c)</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function `betterCompression` in the editor with the following parameter:</p>\r\n<p>string S: a compressed string</p>\r\n\r\n<h2>Returns</h2>\r\n<p>string: the properly compressed string</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= size of S <= 100000</code></li>\r\n    <li>All characters in S are lowercase English letters, 'a'-'z'.</li>\r\n    <li><code>1 <= frequency of each character in S <= 1000</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"a12b56c1\"\r\nOutput: \"a12b56c1\"</code></pre>\r\n<p><strong>Explanation:</strong> Nothing is changed because each character occurred only once, and they are already sorted in ascending order.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = \"a12c56a1b5\"\r\nOutput: \"a13b5c56\"</code></pre>\r\n<p><strong>Explanation:</strong> 'a' occurs twice: 12 times for the first occurrence and 1 time in the second occurrence for a total 13. Sort 'b' and 'c' in order in the final compression.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_24july",
        "company_id": 230
    },
    {
        "id": 739,
        "title": "Count Delayed Flights",
        "problem_statement": "<h1>Count Delayed Flights</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A network of flights contains <code>flight_nodes</code> number of flights denoted by <code>[1, 2, ..., flight_nodes]</code>. There is a list of dependencies among flights denoted by the arrays <code>flight_from[]</code>, <code>flight_to[]</code>. Each pair <code>(flight_from[i], flight_to[i])</code> denotes that <code>flight_from[i]</code> depends on <code>flight_to[i]</code> and must depart only after <code>flight_to[i]</code> has landed. If a flight is delayed, all the flights dependent on this flight and their corresponding dependencies are also delayed.</p>\r\n<p>Given a list of <code>k</code> initially delayed flights and the network as described, find the list of all delayed flights. Return the list sorted in increasing order of flight numbers.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countDelayedFlights</code> in the editor below.</p>\r\n<p><code>countDelayedFlights</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int flight_nodes</code>: the number of flights</li>\r\n    <li><code>int flight_from[m]</code>: the details of the flight dependencies (source flight)</li>\r\n    <li><code>int flight_to[m]</code>: the details of the flight dependencies (target flight)</li>\r\n    <li><code>int delayed[k]</code>: the flights delayed initially</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int[]</code>: the sorted list of all delayed flights</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nflight_nodes = 4, m = 2\r\nflight_from = [4, 3]\r\nflight_to = [1, 2]\r\nk = 2, delayed = [1, 3]\r\nOutput: [1, 3, 4]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nFlight 1 is delayed.\r\nFlight 4 depends on flight 1, so flight 4 is delayed.\r\nFlight 3 is delayed.\r\nThere are no flights dependent on flight 3.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nflight_nodes = 4, flight_edges = 4\r\nDependencies: [[1, 4], [2, 1], [3, 2], [1, 3]]\r\ndelayed = [1]\r\nOutput: 1 2 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nInitially, flight 1 is delayed.\r\nFlight 2 depends on flight 1, so flight 2 becomes delayed.\r\nFlight 3 depends on flight 2, so flight 3 becomes delayed.\r\nFlights 1, 2, and 3 are the only delayed flights.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nflight_nodes = 5, flight_edges = 5\r\nDependencies: [[1, 2], [3, 1], [3, 5], [4, 1], [4, 5]]\r\ndelayed = [2, 4]\r\nOutput: 1 2 4</code></pre>\r\n<p><strong>Explanation:</strong>\r\nFlights 2 and 4 are delayed initially.\r\nFlight 1 depends on flight 2, so flight 1 is delayed.\r\nFlight 3 depends on both flight 1 and flight 5. Since flight 5 is not delayed, flight 3 is not delayed.\r\nFlight 4 depends on both flight 1 and flight 5. Since flight 5 is not delayed, flight 4 would not be delayed by this dependency, but it was already initially delayed.\r\nThere are no other dependent flights that become delayed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; flight_nodes &le; 10<sup>6</sup></code></li>\r\n    <li><code>1 &le; m &le; min(flight_nodes * (flight_nodes - 1) / 2, 10<sup>6</sup>)</code></li>\r\n    <li><code>1 &le; k &le; flight_nodes</code></li>\r\n    <li><code>1 &le; flight_from[i] &le; flight_nodes</code></li>\r\n    <li><code>1 &le; flight_to[i] &le; flight_nodes</code></li>\r\n    <li><code>1 &le; delayed[i] &le; flight_nodes</code></li>\r\n    <li>The pair <code>[flight_from[i], flight_to[i]]</code> will only be given once in the input.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_24july",
        "company_id": 230
    },
    {
        "id": 740,
        "title": "Minimum Test Workflow Time",
        "problem_statement": "<h1>Minimum Test Workflow Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a CI/CD pipeline, system tests must run in a specific sequence. The components of the pipeline are organized in a tree-like dependency graph such that moving between directly connected components takes 1 unit of time.</p>\r\n<p>Implement a function that computes the minimum total time to perform a testing operation as follows:</p>\r\n<ol>\r\n    <li>Starting at an initial component, represented by the integer, <code>startComponent</code>.</li>\r\n    <li>Visiting a set of <code>k</code> key modules along the way specified by the integer array <code>keyModules</code>.</li>\r\n    <li>Finally ending at the final component represented by the integer, <code>endComponent</code>.</li>\r\n</ol>\r\n<p>The function <code>getTestWorkflowTime</code> takes the following inputs:</p>\r\n<ul>\r\n    <li><code>int dependencies_nodes</code>: the number of components in the system</li>\r\n    <li><code>int dependencies_from[dependencies_nodes - 1]</code>: the source of each dependency</li>\r\n    <li><code>int dependencies_to[dependencies_nodes - 1]</code>: the destination of each dependency</li>\r\n    <li><code>int startComponent</code>: the component where testing begins</li>\r\n    <li><code>int endComponent</code>: the component where testing must finish</li>\r\n    <li><code>int keyModules[k]</code>: the list of components that must be tested</li>\r\n</ul>\r\n<p>The function should return an integer denoting the minimum time units required to complete the test flow.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>All the edges are bidirectional and the structure forms a tree.</li>\r\n    <li>It is guaranteed that <code>keyModules</code> contains distinct elements.</li>\r\n    <li>It is guaranteed that <code>startComponent</code> is not equal to <code>endComponent</code> and it is not present in <code>keyModules</code>.</li>\r\n    <li>The components can be visited any number of times.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dependencies_nodes = 4, dependencies_from = [1, 2, 2], dependencies_to = [3, 3, 4], startComponent = 1, endComponent = 2, k = 1, keyModules = [4]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The given network of components has edges (1,3), (2,3), (2,4). One of the optimal paths is: 1 &rarr; 3 &rarr; 2 &rarr; 4 &rarr; 2. Hence, the minimum time units required is 1+1+1+1 = 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: dependencies_nodes = 5, dependencies_edges = 4, dependencies_from = [2, 4, 3, 1], dependencies_to = [3, 2, 1, 5], startComponent = 2, endComponent = 1, k = 2, keyModules = [1, 3]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The given network of components has edges (2,3), (4,2), (3,1), (1,5). An optimal path is: 2 &rarr; 3 &rarr; 1. Hence, the minimum time units required is 1+1 = 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: dependencies_nodes = 5, dependencies_edges = 4, dependencies_from = [3, 2, 4, 1], dependencies_to = [2, 5, 3, 2], startComponent = 1, endComponent = 5, k = 2, keyModules = [4, 2]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The given network of components has edges (3,2), (2,5), (4,3), (1,2). An optimal path is: 1 &rarr; 2 &rarr; 3 &rarr; 4 &rarr; 3 &rarr; 2 &rarr; 5. Hence, the minimum time units required is 1+1+1+1+1+1 = 6.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; dependencies_nodes &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; k &lt; dependencies_nodes</code></li>\r\n    <li><code>1 &le; dependencies_from[i], dependencies_to[i] &le; dependencies_nodes</code></li>\r\n    <li><code>|dependencies_from|, |dependencies_to| = dependencies_nodes - 1</code>, where <code>|x|</code> represents the length of the array <code>x</code>.</li>\r\n    <li><code>1 &le; startComponent, endComponent, keyModules[i] &le; dependencies_nodes</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_24july",
        "company_id": 230
    }
]