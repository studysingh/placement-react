[
    {
        "id": 1609,
        "title": "Maximum Sales Days",
        "problem_statement": "<h1>Maximum Sales Days</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A travelling salesperson works in N towns. Each day the salesperson sells products in one of the towns. The towns that are chosen on any two successive days should be different, and a town <code>i</code> can be chosen at most <code>c_i</code> times.</p>\r\n<p>Write an algorithm to determine the number of days when the salesperson can sell in the given towns following these rules.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of an integer - <code>num</code>, representing the number of towns (N).</p>\r\n<p>The next line consists of N space-separated integers - <code>countTown_0, countTown_1, ..., countTown_N-1</code>, representing the number of times each town can be chosen.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print an integer representing the maximum number of days during which the salesman can work.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; num &le; 5 * 10^4</code></li>\r\n    <li><code>1 &le; countTown_i &le; num</code></li>\r\n    <li><code>&sum; countTown_i &le; 10^5</code></li>\r\n    <li><code>0 &le; i &lt; num</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n7 2 3\r\nOutput:\r\n11</code></pre>\r\n<p><strong>Explanation:</strong> The first, second and third towns are chosen 7, 2 and 3 times respectively.</p>\r\n<p>The different towns are selected on successive days in a sequence: first, second, first, third, first, second, first, third, first, third, first.</p>\r\n<p>So the maximum number of days during which a salesman can sell is 11.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tech Mahindra_6oct",
        "company_id": 562
    },
    {
        "id": 1610,
        "title": "Optimal Student Book Assignment",
        "problem_statement": "<h1>Optimal Student Book Assignment</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a school, there is a small library with N number of students as its members. All members have a unique student ID. The library has a certain number of books on M different subjects. Each student has been given an assignment and to complete it the students are using different books from the library to help them. The library has already issued some books to its members before this. The students can still borrow the required number of books from the library to complete their respective assignments. Each student returns the book issued to them after completing their assignment. Only when the books have been returned to the library then only another student can borrow that book. Also, while assigning books the library starts assigning books to the student with the smallest student ID and proceeds to the student with the higher student ID. Once the library gets to the student with the largest student ID then it goes back to the smallest student ID to whom the book was not assigned and follows the same process. The library manager wants to find the sequence of student IDs in which the students optimally complete their assignments.</p>\r\n<p>Write an algorithm for the library manager to find the sequence of student IDs in which the students optimally complete their assignments. If all students can't complete their assignment, then print -1 in the output.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of two space-separated integers - <code>totalStudent</code>, <code>differentSubjects</code> representing the number of students (N) and different subjects books (M), respectively.</p>\r\n<p>The second line consists of M space-separated integers - <code>avail[0]</code>, <code>avail[1]</code>, ..., <code>avail[M-1]</code> representing the counts of books available for each of the M subjects in the library that have not been issued to any student.</p>\r\n<p>The next N lines consist of M space-separated integers - representing the books required by each student (N lines, each with M subject counts) to complete their assignment.</p>\r\n<p>The next N lines consist of M space-separated integers - representing the books already issued to each student (N lines, each with M subject counts).</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print space-separated integers representing the studentID in the order in which the students optimally complete their assignments. If all students can't complete their assignment, then print -1 in the output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; totalStudent &le; 100</code></li>\r\n    <li><code>1 &le; differentSubjects &le; 100</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n2 2 3\r\n3 5 4\r\n1 3 4\r\n2 3 5\r\n2 4 0\r\n0 0 1\r\n0 1 3\r\nOutput:\r\n2 0 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The available Books = <code>[2 2 3]</code></p>\r\n<p>Let's analyze the needs for each student:</p>\r\n<pre><code class='language-text'>studentID   issued Books   required Books   Needs\r\n0           2 4 0          3 5 4            1 1 4\r\n1           0 0 1          1 3 4            1 3 3\r\n2           0 1 3          2 3 5            2 2 2</code></pre>\r\n<p>The needs of the student with the studentID 2 can be fulfilled directly as studentID 2 needs only 2, 2, 2 different books and the available books are 2, 2, 3. So, after the completion of its assignment, the books returned would be 0, 1, 3. Therefore, the books available in the library would be <code>[2 2 3] + [0 1 3] = [2 3 6]</code>.</p>\r\n<p>The students with the studentID 0 and 1 can complete their assignment with the books available in the library. However, since the preference is being given to the student with a smaller studentID, the assignment of the student with the studentID 0, would get completed before the student with the studentID 1.</p>\r\n<p>After the completion of the assignment of the student with the studentID 0, the books returned would be 2, 4, 0. So, the books available in the library would be <code>[2 3 6] + [2 4 0] = [4 7 6]</code>.</p>\r\n<p>Similarly, for the student with the studentID 1, the books returned would be 0, 0, 1. So, the books available in the library would be <code>[4 7 6] + [0 0 1] = [4 7 7]</code>.</p>\r\n<p>Therefore, the order in which the students optimally complete their assignments is <code>[2, 0, 1]</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tech Mahindra_6oct",
        "company_id": 562
    },
    {
        "id": 1622,
        "title": "Secure File Transfer Optimization",
        "problem_statement": "<h1>Secure File Transfer Optimization</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The information security company secureIT wishes to send data to its headquarters. The data is defined as a sequence of N different files, each identified by a unique number from 0 to N-1.</p>\r\n<p>The company has M types of amplifying strength available in certain amounts which are used to send files to headquarters. Each file requires specific amounts of M types of amplifying strength in order to be sent successfully. Initially, each file has its own amplifying strength of each of M types, which may or may not be sufficient for file transfer.</p>\r\n<p>When a file is successfully transferred, it releases all its used amplifying strength back to the company's available amplifying strength of the corresponding type so that it can be used to transfer another file. If the requirement of two files can be fulfilled at a time with the available amplifying strength of M types, then preference is given to the file with a smaller file ID (e.g., file ID 0 will be transferred before file ID 1).</p>\r\n<p>The goal is to find the correct sequence of file IDs such that all files can be transferred. If all files cannot be transferred, the output should indicate this.</p>\r\n<p>Write an algorithm to find the correct sequence of unique file IDs so that all the files get transferred to the headquarters. If all the files cannot be transferred, then print \"-1\" (without quotes).</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of two space-separated integers - <strong>numFiles</strong> (N) and <strong>type</strong> (M), representing the number of files and the number of amplifying strength types, respectively.</p>\r\n<p>The second line consists of M space-separated integers representing the initial amplifying strength available in certain amounts to the company.</p>\r\n<p>The next N lines each consist of M space-separated integers representing the amount of amplifying strength that is <strong>required</strong> to send a file to the headquarters. These lines correspond to files 0 to N-1.</p>\r\n<p>The subsequent N lines each consist of M space-separated integers representing the amplifying strength <strong>allocated</strong> to each file. These lines also correspond to files 0 to N-1.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print space-separated integers representing the correct sequence of unique file IDs so that all the files get transferred to headquarters. If all the files cannot be transferred, then print \"-1\" (without quotes).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= numFiles &lt;= 100</code></li>\r\n    <li><code>1 &lt;= type &lt;= 100</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n2 2 3\r\n1 1 4\r\n0 0 1\r\n3 3 2\r\n5 4 1\r\n0 1 3\r\n2 2 2\r\nOutput:\r\n2 0 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initial <strong>availAmplifier:</strong> = <code>[2, 2, 3]</code></p>\r\n<p>File data:</p>\r\n<pre><code class='language-text'>fileID | fileAmplifierAlloc | RequiredAmplifier\r\n-------|--------------------|------------------\r\n0      | 5 4 1              | 1 1 4\r\n1      | 0 1 3              | 0 0 1\r\n2      | 2 2 2              | 3 3 2</code></pre>\r\n<p>The needs of the file with file ID 2 can be fulfilled directly as it needs only <code>2, 2, 2</code> different amplifying strengths and the available amounts are <code>2, 2, 3</code>. So, after the completion of this assignment, the file returns its used amplifying strength to the company <code>0, 1, 3</code>. Therefore, the total amount of amplifier available is <code>[2 2 3] + [0 1 3] = [2 3 6]</code>.</p>\r\n<p>The files with file IDs 0 and 1 can be transferred using the available amount of amplifier. However, since preference is given to the file with a smaller file ID, file ID 0 will be transferred before file ID 1.</p>\r\n<p>After file ID 0 is transferred, the amount of amplifier returned is <code>2, 4, 0</code>. So, the amount of amplifier available is <code>[2 3 6] + [2 4 0] = [4 7 6]</code>.</p>\r\n<p>Similarly, file ID 1 returns amount of amplifier <code>0, 0, 1</code>. So, the amount of amplifier available is <code>[4 7 6] + [0 0 1] = [4 7 7]</code>.</p>\r\n<p>Therefore, the order in which the files are sent in an optimal sequence <code>[2, 0, 1]</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tech Mahindra_6oct",
        "company_id": 562
    },
    {
        "id": 1623,
        "title": "Maximize Sales Days",
        "problem_statement": "<h1>Maximize Sales Days</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A travelling salesperson works in <code>N</code> towns. Each day the salesperson sells products in one of the towns. The towns that are chosen on any two successive days should be different, and a town <code>i</code> can be chosen at most <code>countTown[i]</code> times.</p>\r\n<p>Write an algorithm to determine the maximum number of days the salesperson can sell in the given towns following these rules.</p>\r\n<p>Your solution should be implemented in the following function signature:</p>\r\n<pre><code class='language-javascript'>int maxDaysToWork(vector&lt;int&gt; countTown) {\r\n    int answer;\r\n    // Write your code here\r\n    return answer;\r\n}</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of the input consists of an integer <code>num</code>, representing the number of towns (<code>N</code>).</p>\r\n<p>The next line consists of <code>N</code> space-separated integers <code>countTown[0], countTown[1], ..., countTown[N-1]</code>, representing the number of times each town can be chosen.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print an integer representing the maximum number of days during which the salesman can work.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n7 2 3\r\nOutput:\r\n11</code></pre>\r\n<p><strong>Explanation:</strong> The first, second and third towns are chosen 7, 2 and 3 times respectively. The different towns are selected on successive days in a sequence: first, second, first, third, first, second, first, third, first, third. So the maximum number of days during which a salesman can sell is 11.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= num &lt;= 5 * 10^4</code></li>\r\n    <li><code>1 &lt;= countTown[i] &lt;= num</code></li>\r\n    <li><code>Sum of countTown[i] &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= i &lt; num</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tech Mahindra_6oct",
        "company_id": 562
    }
]