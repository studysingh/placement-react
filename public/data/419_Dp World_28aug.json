[
    {
        "id": 1231,
        "title": "Metro Land Festival",
        "problem_statement": "<h1>Metro Land Festival</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Find the optimal location for a festival in Metro Land to minimize the total travel cost for all citizens.</p>\r\n<p>Metro Land is located on a 2D plane with cities at various coordinates. The travel cost for a person from a city at (x, y) to the festival at (a, b) is |x-a| + |y-b|. In the <code>numPeople</code> array, <code>numPeople[i]</code> is the number of people residing in city <code>i</code>.</p>\r\n<p>The festival can be held at any integral location. Find the location that minimizes the total travel cost for all citizens and return that minimum cost.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>minimizeCost</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int numPeople[n]</code>: each <code>numPeople[i]</code> denotes the number of people in city <code>i</code></li>\r\n    <li><code>int x[n]</code>: each <code>x[i]</code> denotes the x coordinate of city <code>i</code></li>\r\n    <li><code>int y[n]</code>: each <code>y[i]</code> denotes the y coordinate of city <code>i</code></li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the minimum cost of getting all the people to an optimal festival location.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p>Given:</p>\r\n<pre><code class='language-text'>numPeople = [1, 2]\r\nx = [1, 3]\r\ny = [1, 3]</code></pre>\r\n<p>This means there is 1 person in City 0 at (1, 1) and 2 people in City 1 at (3, 3).</p>\r\n<p>If the festival is at (2, 2):</p>\r\n<ul>\r\n    <li>Cost from City 0: 1 person x (|1-2| + |1-2|) = 2</li>\r\n    <li>Cost from City 1: 2 people x (|3-2| + |3-2|) = 4</li>\r\n    <li>Total cost: 6</li>\r\n</ul>\r\n<p>If the festival is at (3, 3):</p>\r\n<ul>\r\n    <li>Cost from City 0: 1 person x (|1-3| + |1-3|) = 4</li>\r\n    <li>Cost from City 1: 2 people x (|3-3| + |3-3|) = 0</li>\r\n    <li>Total cost: 4</li>\r\n</ul>\r\n<p><strong>Explanation:</strong> The optimal location is (3, 3) with a total cost of 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\nn = 2\r\nnumPeople = [1, 1]\r\nx = [1, 3]\r\ny = [1, 1]\r\n<strong>Output:</strong> 2</code></pre>\r\n<p><strong>Explanation:</strong> Locations (1, 1), (1, 2), and (1, 3) each have a total cost to travel of 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\nn = 2\r\nnumPeople = [1, 1]\r\nx = [1, 2]\r\ny = [1, 2]\r\n<strong>Output:</strong> 2</code></pre>\r\n<p><strong>Explanation:</strong> They can meet at any of the 4 locations, with a total cost of 2.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\nn = 3\r\nnumPeople = [1, 1, 1]\r\nx = [5, 2, 3]\r\ny = [3, 4, 7]\r\n<strong>Output:</strong> 7</code></pre>\r\n<p><strong>Explanation:</strong> The best place for the people to meet is at (3, 4), for a minimal travel cost of 3+1+3 = 7.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= x[i], y[i] &lt;= 10^4</code></li>\r\n    <li><code>1 &lt;= numPeople[i] &lt;= 50</code></li>\r\n    <li>The arrays <code>numPeople</code>, <code>x</code>, and <code>y</code> all have <code>n</code> elements.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Dp World_28aug",
        "company_id": 419
    },
    {
        "id": 1232,
        "title": "Valid Passwords",
        "problem_statement": "<h1>Valid Passwords</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A bank requires passwords to meet specific security requirements.</p>\r\n<p>Given two integers <code>n</code> and <code>k</code>, a password is valid if:</p>\r\n<ol>\r\n<li>The length of the password is <code>n</code></li>\r\n<li>The password consists of lowercase English letters only</li>\r\n<li>The password does not contain <code>k</code> consecutive equal letters</li>\r\n</ol>\r\n<p>Find the number of distinct valid passwords possible, modulo (10<sup>9</sup>+7).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 2, k = 2\r\nOutput: 650</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>The total number of passwords of length 2 is 26 * 26 = 676.</li>\r\n<li>There are 26 cases where <code>k = 2</code> consecutive characters are the same (e.g., \"aa\", \"bb\", ..., \"zz\").</li>\r\n</ul>\r\n<p>Therefore, the answer is 676 - 26 = 650.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, k = 3\r\nOutput: 17550</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The number of passwords possible of length 3 is 26 * 26 * 26.</p>\r\n<p>Subtract the cases where all the characters are the same (26 such cases). The number of valid passwords is 26 * 26 * 26 - 26 = 17550 and 17550 % (10<sup>9</sup> + 7) = 17550.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 3, k = 2\r\nOutput: 16250</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The number of passwords possible of length 3 is 26 * 26 * 26.</p>\r\n<p>Subtract the cases where all the characters are the same (26 such cases).</p>\r\n<p>Subtract cases like \"aab\" and \"baa\" where two consecutive characters are the same, 26 * 25 + 26 * 25.</p>\r\n<p>The number of valid passwords = 26 * 26 * 26 - 26 - 26 * 25 - 26 * 25 = 16250 and 16250 % (10<sup>9</sup> + 7) = 16250.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countValidPasswords</code> in the editor with the following parameters:</p>\r\n<pre><code class='language-javascript'>int countValidPasswords(int n, int k)</code></pre>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n<li><code>int n</code>: the length of the password</li>\r\n<li><code>int k</code>: the number of matching consecutive characters should be less than this number</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n<li><code>int</code>: the number of valid passwords, modulo (10<sup>9</sup> + 7)</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n<li><code>2 &lt;= k &lt;= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Dp World_28aug",
        "company_id": 419
    },
    {
        "id": 1233,
        "title": "Smallest Multiple",
        "problem_statement": "<h1>Smallest Multiple</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an integer <code>n</code> and a set of <code>allowed_digits</code> of size <code>k</code>, find the smallest positive multiple of <code>n</code> such that:</p>\r\n<ul>\r\n<li>Each digit of the number is present in <code>allowed_digits</code>.</li>\r\n<li>No two consecutive digits are equal.</li>\r\n</ul>\r\n<p>If no such number exists, return <code>\"-1\"</code> as a string.</p>\r\n<p>Complete the function <code>findSmallestMultiple</code> in the editor with the following parameters:</p>\r\n<ul>\r\n<li><code>vector&lt;int&gt; allowed_digits</code>: the set of allowed digits</li>\r\n<li><code>int n</code>: an integer</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>string</code>: the smallest multiple that satisfies both conditions, or <code>\"-1\"</code> if it is not possible.</p>\r\n<pre><code class='language-javascript'>string findSmallestMultiple(vector&lt;int&gt; allowed_digits, int n) {\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 6, allowed_digits = [0, 1, 2, 3]\r\nOutput: \"12\"</code></pre>\r\n<p><strong>Explanation:</strong> The first multiple of 6 is 6, but 6 is not in <code>allowed_digits</code>. The second multiple of 6 is 12, which:</p>\r\n<ul>\r\n<li>Uses only digits from <code>allowed_digits</code> (1 and 2)</li>\r\n<li>Has no consecutive repeated digits</li>\r\n</ul>\r\n<p>Therefore, return the string <code>\"12\"</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: allowed_digits = [0, 1], n = 10\r\nOutput: \"10\"</code></pre>\r\n<p><strong>Explanation:</strong> The first multiple of 10 is 10. This can be made by taking digits from <code>allowed_digits</code> and does not contain two consecutive equal digits.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: allowed_digits = [1, 2, 5], n = 10\r\nOutput: \"-1\"</code></pre>\r\n<p><strong>Explanation:</strong> Every multiple of 10 will have the last digit 0, and 0 is not included in <code>allowed_digits</code>. It is impossible to get a multiple of 10 that satisfies the requirements.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n<li><code>1 &lt;= k &lt;= 10</code></li>\r\n<li><code>0 &lt;= allowed_digits[i] &lt;= 9</code></li>\r\n<li>The set <code>allowed_digits</code> is sorted in increasing order.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Dp World_28aug",
        "company_id": 419
    },
    {
        "id": 1234,
        "title": "Palindromic Algorithms",
        "problem_statement": "<h1>Palindromic Algorithms</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A palindrome reads the same from either direction, e.g., 'ada'. Given a string of lowercase English letters, determine how to change the fewest letters possible to form a palindrome after rearranging the string. If multiple palindromes are possible with the same number of changes, return the alphabetically smallest one.</p>\r\n<p>Complete the function <code>makeAlphabeticallySmallestPalindrome</code> in the editor with the following parameter:</p>\r\n<ul>\r\n    <li><code>string s</code>: the string</li>\r\n</ul>\r\n<p>The function is expected to return a <code>STRING</code>.</p>\r\n<p><strong>Returns:</strong> <code>string</code>: the alphabetically smallest palindromic string that can be obtained by changing a minimum number of characters.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"azzzbbb\"\r\nOutput: \"abzbzba\"</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe input string \"azzzbbb\" has character counts: 'a':1, 'b':3, 'z':3. Its length is 7 (odd).\r\nFor an odd-length palindrome, exactly one character must have an odd count. Here, 'a', 'b', and 'z' all have odd counts. We need to make (3-1)/2 = 1 change to satisfy this condition.\r\nOptimally, change one 'z' to 'a'. The new character counts become: 'a':2, 'b':3, 'z':2.\r\nThis multiset of characters ('a', 'a', 'b', 'b', 'b', 'z', 'z') can be rearranged to form a palindrome.\r\nTo form the alphabetically smallest palindrome, the character with the odd count ('b') becomes the middle character. The remaining characters ('a', 'a', 'b', 'b', 'z', 'z') form pairs.\r\nThe smallest half is 'a', 'b', 'z'. Thus, the palindrome is \"abzbzba\".</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: s = \"fhaigh\"\r\nOutput: \"afhhfa\"</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe input string \"fhaigh\" has character counts: 'a':1, 'f':1, 'g':1, 'h':2, 'i':1. Its length is 6 (even).\r\nFor an even-length palindrome, all characters must have even counts. Here, 'a', 'f', 'g', 'i' all have odd counts. There are 4 characters with odd counts. We need to make 4/2 = 2 changes to make all counts even.\r\nTo obtain the alphabetically smallest palindrome with minimum changes, we identify characters with odd counts: 'a', 'f', 'g', 'i'.\r\nWe pair the smallest odd-count character with the largest, and the second smallest with the second largest, changing the larger to the smaller.\r\n1. Change 'i' (largest odd-count character) to 'a' (smallest odd-count character).\r\n   New counts: 'a':2, 'f':1, 'g':1, 'h':2. (1 change)\r\n2. Now, 'f' and 'g' have odd counts. Change 'g' (largest remaining odd-count character) to 'f' (smallest remaining odd-count character).\r\n   New counts: 'a':2, 'f':2, 'g':0, 'h':2. (1 change)\r\nTotal changes: 2.\r\nThe final multiset of characters is ('a', 'a', 'f', 'f', 'h', 'h').\r\nThe alphabetically smallest palindrome formed from this multiset is \"afhhfa\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= length of s &lt;= 3 * 10^5</code></li>\r\n    <li>The string <code>s</code> consists of lowercase English letters only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Dp World_28aug",
        "company_id": 419
    }
]