[
    {
        "id": 348,
        "title": "Letter Count Challenge",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Letter Count Challenge</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Letter Count Challenge</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Have the function <code>SearchingChallenge(str)</code> take the <code>str</code> parameter being passed and return the first word with the greatest number of repeated letters. For example, <code>\\\"Today, is the greatest day ever!\\\"</code> should return <code>\\\"greatest\\\"</code> because it has 2 <code>\\'e\\'</code>s (and 2 <code>\\'t\\'</code>s) and it comes before <code>\\\"ever\\\"</code> which also has 2 <code>\\'e\\'</code>s. If there are no words with repeating letters, return <code>-1</code>.</p>\n        <p>Words will be separated by spaces.</p>\n        <p>Once your function is working, take the final output string and concatenate it with your <code>ChallengeToken</code>, and then replace every fourth character with an underscore.</p>\n        <p><strong>ChallengeToken:</strong> <code>3log07rw4o</code></p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input is a string <code>str</code> containing words separated by spaces.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the first word with the greatest number of repeated letters. If no such word exists, return <code>-1</code>. After concatenating the result with the <code>ChallengeToken</code>, replace every fourth character with an underscore.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The input string will contain words separated by spaces.</li>\n            <li>Words may contain letters only.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n\\\"Hello apple pie\\\"</pre>\n            <pre class=\\\"output\\\">Output:\nHello</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p><code>\\\"Hello\\\"</code> has the greatest number of repeated letters (2 <code>\\'l\\'</code>s) and is the first word with this property. The final output after concatenation and replacing every fourth character is <code>ltel_03l_g07_w4o</code>.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n\\\"No words\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>There are no words with repeating letters. The final output after concatenation and replacing every fourth character is <code>-13_ggp_rw4_</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1LNvc_YDL2AF1IL9UBf4WcSZDrGOQ6JTQdggIgaTKtpc/edit?usp=sharing",
        "solution_code": "#include <iostream>\\n#include <sstream>\\n#include <vector>\\n#include <unordered_map>\\n#include <cctype>\\n#include <string>\\nusing namespace std;\\n\\nint countRepeats(const string &w) {\\n    unordered_map<char, int> f;\\n    for (char c : w) {\\n        if (isalpha(c)) {\\n            c = tolower(c);\\n            f[c]++;\\n        }\\n    }\\n    int r = 0;\\n    for (auto &it : f) {\\n        if (it.second > 1) {\\n            r += (it.second - 1);\\n        }\\n    }\\n    return r;\\n}\\n\\nstring SearchingChallenge(const string &s) {\\n    vector<string> tokens;\\n    {\\n        stringstream ss(s);\\n        string token;\\n        while (ss >> token) {\\n            tokens.push_back(token);\\n        }\\n    }\\n\\n    string bestWord = \\\"-1\\\";\\n    int maxReps = 0;\\n\\n    for (const string &rawToken : tokens) {\\n        string cleaned;\\n        for (char c : rawToken) {\\n            if (isalpha(c)) {\\n                cleaned.push_back(c);\\n            }\\n        }\\n\\n        if (!cleaned.empty()) {\\n            int rCount = countRepeats(cleaned);\\n            if (rCount > maxReps) {\\n                maxReps = rCount;\\n                bestWord = cleaned;\\n            }\\n        }\\n    }\\n\\n    if (maxReps == 0) {\\n        bestWord = \\\"-1\\\";\\n    }\\n\\n    bestWord += \\\"3iog077w4e\\\";\\n\\n    for (int i = 3; i < (int)bestWord.size(); i += 4) {\\n        bestWord[i] = \\'_\\';\\n    }\\n\\n    return bestWord;\\n}\\n\\nint main() {\\n    ios::sync_with_stdio(false);\\n    cin.tie(nullptr);\\n\\n    string inputLine;\\n    getline(cin, inputLine);\\n    string result = SearchingChallenge(inputLine);\\n    cout << result << \\\"\\\\n\\\";\\n    return 0;\\n}",
        "company_name": "Coredge.io",
        "company_id": 106
    }
]