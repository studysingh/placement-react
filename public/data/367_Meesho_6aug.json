[
    {
        "id": 1117,
        "title": "Browser history",
        "problem_statement": "<h1>Browser history</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are surfing the internet. You are currently on the home page of a website. There is a browser history that acts as a stack to keep track of the sites you visit. Currently, the history shows \"/home\". You can perform the following operations:</p>\r\n<ul>\r\n    <li>You can go back to the previous page. If the history is like \"home/food/menu\" and you are currently in \"food\" page. Then you will be directed to the \"home\" page.</li>\r\n    <li>You can go forward. If the history is like \"home/food/menu\" and you are currently in \"food\" page. Then you will be directed to the \"menu\" page.</li>\r\n    <li>You can visit a page by clicking a link. This will delete all the forward pages from that point in history and add a new page in history. If the history is like \"home/food/menu\" and you are currently in \"food\" page. Then the history will be \"home/food/diet\".</li>\r\n</ul>\r\n<p>After a series of operations, find the history contents.</p>\r\n\r\n<h3>Notes on Operations:</h3>\r\n<ul>\r\n    <li>Clicking back from the home page will not do anything.</li>\r\n    <li>Clicking forward from the last page will not do anything.</li>\r\n    <li>If the input is \"back\", you will go back in history. If the input is \"forward\", you will go forward in history. Else, you will visit the given page.</li>\r\n</ul>\r\n\r\n<h3>Function Description:</h3>\r\n<p>Complete the function <code>solution()</code> provided in the editor. The function takes the following 2 parameters and returns the solution:</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents the number of operations</li>\r\n    <li><strong>S:</strong> Represents the array of operations</li>\r\n</ul>\r\n\r\n<h3>Input Format for Custom Testing:</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains N denoting the number of operations.</li>\r\n    <li>The second line contains S denoting the array of operations.</li>\r\n</ul>\r\n\r\n<h3>Output Format:</h3>\r\n<p>Return a string, showing the stack contents.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\nhackerearth contests back\r\nOutput:\r\n/home/hackerearth/contests</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given Input:</strong></p>\r\n<pre><code class='language-text'>N = 3\r\nS = [\"hackerearth\", \"contests\", \"back\"]</code></pre>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li>After first operation, the history is /home/hackerearth and you are currently in \"hackerearth\".</li>\r\n    <li>After second operation, the history is /home/hackerearth/contests and you are currently in \"contests\".</li>\r\n    <li>After third operation, the history is /home/hackerearth/contests and you are currently in \"hackerearth\".</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10^3</code></li>\r\n    <li><code>1 &le; |S[i]| &le; 100</code></li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits:</h3>\r\n<ul>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring:</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages:</h3>\r\n<p>Bash, C, C++, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>\r\n\r\n<h3>Provided Code Snippet (C++):</h3>\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\nstd::string solution (int N, std::vector&lt;std::string&gt; S) {\r\n  return \"\";\r\n}\r\n\r\nint main() {\r\n  std::ios::sync_with_stdio(0);\r\n  std::cin.tie(0);\r\n  int N;\r\n  std::cin >> N;\r\n  std::vector&lt;std::string&gt; S(N);\r\n  for(int i_S = 0; i_S &lt; N; i_S++) {\r\n    std::cin >> S[i_S];\r\n  }\r\n  std::string out_ = solution(N, S);\r\n  std::cout &lt;&lt; out_;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_6aug",
        "company_id": 367
    },
    {
        "id": 1118,
        "title": "Parking Lot Vacancy Finder",
        "problem_statement": "<h1>Parking Lot Vacancy Finder</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A shopping mall has implemented a smart parking system to track the availability of parking slots in real-time. The parking lot consists of <strong>N</strong> slots, where each slot is either <strong>occupied</strong> or <strong>vacant</strong> at any given time.</p>\r\n<p>The system receives an array of size <strong>N</strong>, where:</p>\r\n<ul>\r\n    <li>1 represents an <strong>occupied</strong> parking slot.</li>\r\n    <li>0 represents a <strong>vacant</strong> parking slot.</li>\r\n</ul>\r\n<p>When a customer arrives and wants to park their car, the system must determine the <strong>nearest available parking slot</strong> (i.e., the first occurrence of 0 from the left).</p>\r\n<ul>\r\n    <li>If a vacant slot is found, return its <strong>position (1-based index)</strong>.</li>\r\n    <li>If all slots are occupied, return <strong>-1</strong> to indicate that no parking is available.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>You must implement the function <code>findVacantSlot</code>.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>int N</code> &rarr; The number of parking slots.</li>\r\n    <li><code>vector&lt;int&gt; parkingLot</code> &rarr; An array of size N, where each element represents the occupancy of a parking slot (1 for occupied, 0 for vacant).</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code> &rarr; The 1-based index of the first vacant slot.</li>\r\n    <li>If all slots are occupied, return -1.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<ol>\r\n    <li>First line: One integer N (number of parking slots).</li>\r\n    <li>Second line: N space-separated integers representing the parking lot status (0 for vacant, 1 for occupied).</li>\r\n</ol>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>A single integer representing the 1-based index of the first available parking slot.</li>\r\n    <li>If no vacant slots exist, print -1.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n1 1 0 1 0 1\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> The first vacant slot appears at position 3. Indexing starts from 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10<sup>5</sup></code> (The parking lot can have up to 100,000 slots).</li>\r\n    <li>Each element in <code>parkingLot</code> is either 0 or 1.</li>\r\n    <li>The input is guaranteed to have at least one slot (N &ge; 1).</li>\r\n    <li>Time Complexity: O(N) (Linear scan through the parking lot).</li>\r\n    <li>Space Complexity: O(1) (Uses constant extra space, aside from input storage).</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>#include &lt;bits/stdc++.h&gt;\r\n\r\nint findVacantSlot (int N, std::vector&lt;int&gt; parkingLot) {\r\n    // Write your code here\r\n}\r\n\r\nint main() {\r\n    std::ios::sync_with_stdio(0);\r\n    std::cin.tie(0);\r\n\r\n    int N;\r\n    std::cin >> N;\r\n    std::vector&lt;int&gt; parkingLot(N);\r\n    for (int i_parkingLot = 0; i_parkingLot < N; i_parkingLot++) {\r\n        std::cin >> parkingLot[i_parkingLot];\r\n    }\r\n\r\n    int out_;\r\n    out_ = findVacantSlot(N, parkingLot);\r\n    std::cout << out_;\r\n\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_6aug",
        "company_id": 367
    },
    {
        "id": 1120,
        "title": "Book of the year",
        "problem_statement": "<h1>Book of the year</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a table <code>library</code> that contains information about various books.</p>\r\n\r\n<p><strong>Task</strong></p>\r\n<p>Determine the highest-rated book of every year in order of oldest to latest.</p>\r\n\r\n<h2>Table Description</h2>\r\n<p><strong>Input format</strong></p>\r\n<p>Table: <code>library</code></p>\r\n<ul>\r\n    <li><code>id</code> (Int): Represents the book id</li>\r\n    <li><code>title</code> (Varchar): Represents the name of the book</li>\r\n    <li><code>rating</code> (decimal): Represents the rating of the book (out of 5)</li>\r\n    <li><code>years</code> (Int): Represents the year in which the book came out</li>\r\n</ul>\r\n\r\n<p><strong>Output format</strong></p>\r\n<ul>\r\n    <li><code>id</code> (Int): Represents the book id</li>\r\n    <li><code>title</code> (Varchar): Represents the name of the book</li>\r\n    <li><code>rating</code> (decimal): Represents the rating of the book (out of 5)</li>\r\n    <li><code>years</code> (Int): Represents the year in which the book came out</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input table:</strong> <code>library</code></p>\r\n<pre><code class='language-text'>id    title                                     rating  years\r\n101   1984                                      4.80    1950\r\n102   The 48 Laws of Power                      4.90    2000\r\n103   Dover Military History Weapons Armor Ser  4.57    2002\r\n104   What Happened to the Bennetts             5.00    2022\r\n105   A Guide Book of United States Paper Money 4.70    2020\r\n106   Wings of Fire 8 Books Set                 5.00    2017</code></pre>\r\n\r\n<p><strong>Output table:</strong></p>\r\n<pre><code class='language-text'>id    title                                     rating  years\r\n101   1984                                      4.80    1950\r\n102   The 48 Laws of Power                      4.90    2000\r\n103   Dover Military History Weapons Armor Ser  4.57    2002\r\n106   Wings of Fire 8 Books Set                 5.00    2017\r\n105   A Guide Book of United States Paper Money 4.70    2020\r\n104   What Happened to the Bennetts             5.00    2022</code></pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n<p>Your SQL query must be able to print the sample output from the provided sample input. However, the query is run against multiple hidden test cases. Therefore, your query must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Time Limit: 5 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<p><strong>Scoring</strong></p>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<p><strong>Allowed Languages</strong></p>\r\n<p>MySQL, PostgreSQL, MSSQL, Oracle_Db</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_6aug",
        "company_id": 367
    }
]