[
    {
        "id": 362,
        "title": "Light Road Walking",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Light Road Walking Problem</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>\n            You are given a road of length <em>n</em>. The road is represented as an array <em>v</em> of length <em>n</em>.\n        </p>\n        <p>\n            Each position <em>i</em> from 1 to <em>n</em> has a light. Each light is either 1 (turned on) or 0 (turned off). You love to walk, so you can choose any positions <em>i</em> and <em>j</em> (<em>i &lt; j</em>) and walk from <em>i</em> to <em>j</em>.\n        </p>\n        <p>You can do one of the following two moves:</p>\n        <ul>\n            <li>If you are at position <em>i</em> and the light at <em>i+1</em> is turned on, you can move to <em>i+1</em>.</li>\n            <li>If you are at position <em>i</em> and the light at <em>i+1</em> is turned off, you must stay at <em>i</em>.</li>\n        </ul>\n        <p>\n            Each move takes <strong>1 second</strong>, and in each second, all lights <strong>reverse</strong> (if the light is 1, it becomes 0 and vice versa).\n        </p>\n        <p>\n            Now, for every <em>i</em> and <em>j</em> (<code>0 ≤ i &lt; j ≤ n</code>), you should calculate the <strong>number of seconds</strong> you need to move from <em>i</em> to <em>j</em> and store it in an array <em>a</em>.\n        </p>\n        <p>\n            Find the <strong>sum</strong> of <em>a</em>. Since the answer can be large, return it <strong>mod 1e9 + 7</strong>.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <em>n</em>, denoting the number of elements in <em>v</em>.</li>\n            <li>Each line <em>i</em> of the <em>n</em> subsequent lines contains an integer describing <code>v[i]</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Output the sum of all times required to walk between positions, modulo <code>1e9 + 7</code>.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10^5</code></li>\n            <li><code>0 ≤ v[i] ≤ 1</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n1\n1</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <em>n = 1</em> and <em>v = [1]</em>.<br>\n                    There is only one path (0 to 1), and the time required is 1.<br>\n                    Hence, the answer is 1.\n                </p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n0 0</pre>\n            <pre class=\\\"output\\\">Output:\n8</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <em>n = 2</em> and <em>v = [0, 0]</em>.<br>\n                    The answer for the road from 0 to 1 is 2.<br>\n                    The answer for the road from 0 to 2 is 4.<br>\n                    The answer for the road from 1 to 2 is 2.<br>\n                    Hence, the total is <code>2 + 4 + 2 = 8</code>.\n                </p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n1 1</pre>\n            <pre class=\\\"output\\\">Output:\n5</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <em>n = 2</em> and <em>v = [1, 1]</em>.<br>\n                    The answer for the road from 0 to 1 is 1.<br>\n                    The answer for the road from 0 to 2 is 3.<br>\n                    The answer for the road from 1 to 2 is 1.<br>\n                    Hence, the total is <code>1 + 3 + 1 = 5</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\\\"code-block\\\">\n        <h3>Starter Code</h3>\n        <pre>\n<code>import sys\n\ndef get_ans(n, v):\n    # Write your code here\n    pass\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    v = []\n    for _ in range(n):\n        v.append(int(sys.stdin.readline().strip()))\n    \n    result = get_ans(n, v)\n    print(result)\n\nif __name__ == \\\"__main__\\\":\n    main()</code>\n        </pre>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1LO2_kymP7PWAA1QF2WNqe_9euiAbfLhgZ5Qqv7yKbPo/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 363,
        "title": "Optimal Permutation with XOR Condition",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Optimal Permutation with XOR Condition</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>\n            You are given a positive integer <em>n</em>.\n        </p>\n        <p>\n            A permutation <em>p</em> of length <em>n</em> is considered <strong>optimal</strong> if the following conditions are satisfied:\n        </p>\n        <ol>\n            <li>For each <em>i</em> from 1 to <em>n</em>, <code>p[i] ^ i</code> is a <strong>power of two</strong>, where <code>^</code> is the <strong>bitwise XOR</strong>.</li>\n            <li>Among all such permutations, <em>p</em> is <strong>lexicographically minimal</strong>.</li>\n        </ol>\n        <p>\n            Find the sum of <code>p[i] ^ i</code> for each <em>i</em> in the optimal permutation. If such a permutation doesn\\'t exist, print the sum of <code>i ^ (n - i + 1)</code>.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>\n            The first line contains an integer <em>n</em>, denoting the size of the permutation.\n        </p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Output the sum of <code>p[i] ^ i</code> in the optimal permutation or the alternative value as described.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10^2</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n1</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <em>n = 1</em>.<br>\n                    The only permutation is [1], and <code>1 ^ 1 = 0</code>, which is not a power of two. Thus, the answer is the sum of <code>i ^ (n - i + 1) = 0</code>.\n                </p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6</pre>\n            <pre class=\\\"output\\\">Output:\n14</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    The optimal permutation is: <code>[3, 6, 1, 5, 4, 2]</code>.\n                </p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n10</pre>\n            <pre class=\\\"output\\\">Output:\n26</pre>\n        </div>\n    </div>\n    \n    <div class=\\\"code-block\\\">\n        <h3>Starter Code</h3>\n        <pre>\n<code>import sys\n\ndef find_minimal_permutation(n):\n    # Write your code here\n    pass\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    result = find_minimal_permutation(n)\n    print(result)\n\nif __name__ == \\\"__main__\\\":\n    main()</code>\n        </pre>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1dtntz_OvDVyFwqfDeF2uslG63rMPCdk4fyBHLYk85N0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 364,
        "title": "Bitwise XOR of Sweet Indices",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Bitwise XOR of Sweet Indices</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>A sweet shop contains <em>n</em> different varieties of sweets. The <strong>sweetness</strong> of the <em>i<sup>th</sup></em> sweet is given by <code>a<sub>i</sub></code>.</p>\n\n        <p>Robin went to the shop to eat sweets. He orders a total of <em>q</em> sweets. Each order consists of two numbers, <em>k</em> and <em>l</em>, given in an array <em>Q</em>.</p>\n\n        <p>Now, Robin wants to find the largest index <em>r</em> (<code>l ≤ r ≤ n</code>) such that the <strong>bitwise AND</strong> of the <strong>sweetness</strong> values from sweet <em>l</em> to sweet <em>r</em> (inclusive) is <strong>at least</strong> <em>k</em>. In other words:</p>\n        <p><code>(a<sub>l</sub> & a<sub>l+1</sub> & ... & a<sub>r</sub>) ≥ k</code></p>\n\n        <p>If such a sweet doesn\\'t exist, take <em>r</em> as <em>n+1</em>. He then buys the <em>r<sup>th</sup></em> sweet if <em>r</em> is less than <em>n+1</em>.</p>\n\n        <p>Find the <strong>bitwise XOR</strong> of the indices <em>r</em> of the sweets he buys.</p>\n\n        <h4>Note:</h4>\n        <ul>\n            <li>Here \\'&amp;\\' is a <strong>bitwise AND</strong> operator.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <em>n</em>, denoting the number of different types of sweets.</li>\n            <li>Each line <em>i</em> of the <em>n</em> subsequent lines contains an integer describing <code>a[i]</code>.</li>\n            <li>The next line contains an integer <em>q</em>, denoting the number of rows in <em>Q</em>.</li>\n            <li>Each line <em>i</em> of the <em>q</em> subsequent lines contains 2 space-separated integers describing the row <code>Q[i][j]</code>.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Output the <strong>bitwise XOR</strong> of the indices <em>r</em> of the sweets Robin buys.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ a[i] ≤ 10<sup>9</sup></code></li>\n            <li><code>1 ≤ q ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ Q[i][j] ≤ [n, 10<sup>9</sup>]</code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n15\n14\n17\n42\n34\n3\n1 7\n2 15\n4 5</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <em>n=5</em>, <em>a=[15, 14, 17, 42, 34]</em>, <em>q=3</em>, <em>Q=[[1,7], [2,15], [4,5]]</em>.<br>\n                    The first query asks for the largest index <em>r</em> such that <code>(a[1] & a[2] & ... & a[r]) ≥ 7</code>.\n                    <br>\n                    After calculations, <code>r = 2</code> is the answer.<br>\n                    The second query returns <code>n+1=6</code> since no valid <em>r</em> exists.<br>\n                    The third query finds <code>r = 5</code>.\n                </p>\n                <p>Final output: <code>2 ^ 6 ^ 5 = 1</code></p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n7\n5\n3\n1\n7\n4\n1 7\n5 7\n2 3\n2 1</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <em>n=5</em>, <em>a=[7, 5, 3, 1, 7]</em>, <em>q=4</em>, and corresponding queries.<br>\n                    Detailed AND operations give results <code>r = 1, r = 5, r = 2, r = 2</code>.<br>\n                    Final XOR: <code>1 ^ 5 ^ 2 ^ 2 = 4</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-block\\\">\n        <h3>Starter Code</h3>\n        <pre>\n<code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint sweet(int n, vector&lt;int&gt; a, int q, vector&lt;vector&lt;int&gt;&gt; Q) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int n, q;\n    cin >> n;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n    cin >> q;\n    vector&lt;vector&lt;int&gt;&gt; Q(q, vector&lt;int&gt;(2));\n    for (int i = 0; i < q; ++i) {\n        cin >> Q[i][0] >> Q[i][1];\n    }\n\n    cout << sweet(n, a, q, Q) << endl;\n    return 0;\n}</code>\n        </pre>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/11a4kM_WVXLmZVEDIe5kOnWix32WTHuE9-Z-RMlw31SQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 365,
        "title": "Number of Distinct Common Subsequences",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Number of Distinct Common Subsequences</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>\n            You are given two strings, <code>s</code> of length <em>n</em> and <code>t</code> of length <em>m</em>, both consisting of lowercase Latin letters.\n        </p>\n        <p>\n            A string <code>a</code> is a <strong>subsequence</strong> of a string <code>b</code> if <code>a</code> can be obtained from <code>b</code> by deletion of several (possibly zero or all) characters.\n        </p>\n        <p>\n            Let’s call a string <code>k</code> a <strong>common subsequence</strong> of both strings <code>s</code> and <code>t</code> if <code>k</code> is a subsequence of both <code>s</code> and <code>t</code>.\n        </p>\n        <p>\n            Find the <strong>number of distinct strings</strong> <code>k</code> that are common subsequences of both <code>s</code> and <code>t</code>. Since the answer can be very large, print it modulo <code>10<sup>9</sup> + 7</code>.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <code>n</code>, denoting the length of string <code>s</code>.</li>\n            <li>The next line contains an integer <code>m</code>, denoting the length of string <code>t</code>.</li>\n            <li>The next line contains a string <code>s</code>, denoting the given string.</li>\n            <li>The next line contains a string <code>t</code>, denoting the given string.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print the number of distinct strings <code>k</code> that are common subsequences of both <code>s</code> and <code>t</code>, modulo <code>10<sup>9</sup> + 7</code>.\n        </p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 1000</code></li>\n            <li><code>1 ≤ m ≤ 1000</code></li>\n            <li><code>1 ≤ len(s) ≤ 1000</code></li>\n            <li><code>1 ≤ len(t) ≤ 1000</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n3\naba\naab</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <code>n = 3</code>, <code>m = 3</code>, <code>s = \\\"aba\\\"</code>, and <code>t = \\\"aab\\\"</code>.<br>\n                    The distinct common subsequences are: <code>{\\\"a\\\", \\\"aa\\\", \\\"b\\\", \\\"ab\\\"}</code>.<br>\n                    Hence, the answer is <code>4</code>.\n                </p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n4\nabcd\ndbhy</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <code>n = 4</code>, <code>m = 4</code>, <code>s = \\\"abcd\\\"</code>, and <code>t = \\\"dbhy\\\"</code>.<br>\n                    The only common subsequence is: <code>\\\"d\\\"</code>.<br>\n                    Hence, the answer is <code>1</code>.\n                </p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n5\nabcde\nedcba</pre>\n            <pre class=\\\"output\\\">Output:\n5</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <code>n = 5</code>, <code>m = 5</code>, <code>s = \\\"abcde\\\"</code>, and <code>t = \\\"edcba\\\"</code>.<br>\n                    The distinct common subsequences are: <code>{\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\"}</code>.<br>\n                    Hence, the answer is <code>5</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-block\\\">\n        <h3>Starter Code</h3>\n        <pre>\n<code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint GetAnswer(int n, int m, string s, string t) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n    \n    int n, m;\n    string s, t;\n\n    cin >> n >> m;\n    cin >> s >> t;\n\n    cout << GetAnswer(n, m, s, t) << endl;\n    return 0;\n}</code>\n        </pre>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1IhrD5nY4vLaqBVyOh9XBGcSuk6jiPiIpB8oT1rPC35g/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 366,
        "title": "Sum of Indices for Good Subarrays",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Sum of Indices for Good Subarrays</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>\n            Given an array <code>a</code> of length <code>n</code> (<code>1 ≤ n ≤ 10<sup>5</sup></code>), where <code>1 ≤ a[i] ≤ 10<sup>5</sup></code>, and a positive integer <code>k</code> (<code>1 ≤ k ≤ 10<sup>5</sup></code>).\n        </p>\n        <p>\n            We call the subarray from <code>l</code> to <code>r</code> <strong>good</strong>, if for each element that appears in the subarray from <code>l</code> to <code>r</code>, the number of its occurrences in this subarray is equal to <code>k</code>.\n        </p>\n        <p>\n            You have to process <code>q</code> queries (<code>1 ≤ q ≤ 10<sup>5</sup></code>), each query contains two integers <code>l</code> and <code>r</code>.\n        </p>\n        <p>\n            For each of these queries, find if the subarray from <code>l</code> to <code>r</code> is good.\n        </p>\n        <p>\n            Print the <strong>sum of indices</strong> of queries that have a <strong>\\\"Yes\\\"</strong> answer, modulo <code>10<sup>9</sup> + 7</code>.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <code>n</code>, denoting the number of elements in <code>a</code>.</li>\n            <li>The next line contains an integer <code>k</code>, denoting the number that describes a good subarray.</li>\n            <li>Each of the <code>n</code> subsequent lines contains an integer describing <code>a[i]</code>.</li>\n            <li>The next line contains an integer <code>q</code>, denoting the number of rows in queries.</li>\n            <li>The next line contains an integer <code>two</code>, denoting the number of columns in queries.</li>\n            <li>Each of the <code>q</code> subsequent lines contains two space-separated integers representing <code>l</code> and <code>r</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print the <strong>sum of indices</strong> of all queries that have a \\\"Yes\\\" answer, modulo <code>10<sup>9</sup> + 7</code>.\n        </p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ k ≤ n</code></li>\n            <li><code>1 ≤ a[i] ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ q ≤ 10<sup>5</sup></code></li>\n            <li><code>2 ≤ two ≤ 2</code></li>\n            <li><code>1 ≤ queries[i][j] ≤ 10<sup>5</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n1\n1\n1\n1\n2\n1 1</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, <code>n = 1</code>, <code>k = 1</code>, <code>a = [1]</code>, and there is one query with <code>l = 1</code>, <code>r = 1</code>. The subarray satisfies the good condition.<br>\n                    The sum of indices is <code>1</code>.\n                </p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n1\n1 1\n2\n1 2\n1 2</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Both queries satisfy the good condition. The sum of indices is <code>1 + 2 + 3 = 6</code>.\n                </p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n1\n1 1\n2\n1 1\n2 2</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    The sum of indices of \\\"Yes\\\" answers is <code>1 + 2 = 3</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-block\\\">\n        <h3>Starter Code</h3>\n        <pre>\n<code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint get_answer(int n, int k, vector&lt;int&gt; a, int q, vector&lt;pair&lt;int, int&gt;&gt; queries) {\n    // Write your code here\n    return 0;\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0); cout.tie(0);\n\n    int n, k, q, two;\n    cin >> n >> k;\n\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n    }\n\n    cin >> q >> two;\n\n    vector&lt;pair&lt;int, int&gt;&gt; queries(q);\n    for (int i = 0; i < q; ++i) {\n        cin >> queries[i].first >> queries[i].second;\n    }\n\n    cout << get_answer(n, k, a, q, queries) << endl;\n    return 0;\n}</code>\n        </pre>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1Swp4iWXQiGQskS_EynfVETUBZhvLTmLdA0XutSV0jZo/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 367,
        "title": "Equalize Building Heights",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Equalize Building Heights</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>\n            You are given an array <strong>Arr</strong> of size <strong>N</strong> where each element <strong>Arr<sub>i</sub></strong> represents the height of a building.\n        </p>\n        <p>\n            You can increase the height of <strong>exactly one</strong> building in one year, and you have to make all buildings <strong>equal</strong> by using the following strategy:\n        </p>\n        <ul>\n            <li>\n                Choose one building. If the year is <strong>odd</strong>, the height of the building will increase by <code>1</code>. If the year is <strong>even</strong>, the height of the building will increase by <code>2</code>.\n            </li>\n            <li>\n                You can choose <strong>no building</strong> in any year, and none of the buildings\\' height will increase.\n            </li>\n        </ul>\n        <p>\n            Find the <strong>minimum number of years</strong> to make all the buildings the same height. Since the answer can be large, return it mod <code>10<sup>9</sup> + 7</code>.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <code>N</code>, denoting the number of elements in <strong>Arr</strong>.</li>\n            <li>Each line <code>i</code> of the <code>N</code> subsequent lines contains an integer describing <code>Arr[i]</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print the <strong>minimum number of years</strong> required to make all buildings the same height, modulo <code>10<sup>9</sup> + 7</code>.\n        </p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ N ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ Arr[i] ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n3\n5\n7\n7</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Initially, the heights are <code>[3, 5, 7, 7]</code>. To make all buildings of height <code>7</code>:\n                </p>\n                <ul>\n                    <li>Increase the first building\\'s height from <code>3</code> to <code>7</code> in <code>4</code> years.</li>\n                    <li>Second building\\'s height is already <code>7</code> after increasing by <code>2</code> twice.</li>\n                </ul>\n                <p>\n                    The minimum total years required is <code>4</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/13fNxJ-GQl38Au8utpT2ZxVe_CEQAjryzpQO5eoU9sRQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 368,
        "title": "Equal Heights in Minimum Years",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Equalize Buildings\\' Heights</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>\n            You are given an array <strong>Arr</strong> of size <strong>N</strong> where each element <strong>Arr<sub>i</sub></strong> represents the height of a building.\n        </p>\n        <p>\n            You can increase the height of <strong>exactly one</strong> building in one year, and you have to make all buildings <strong>equal</strong> using the following strategy:\n        </p>\n        <ul>\n            <li>If the year is <strong>odd</strong>, the height of the building will increase by <code>1</code>.</li>\n            <li>If the year is <strong>even</strong>, the height of the building will increase by <code>2</code>.</li>\n            <li>You can choose <strong>no building</strong> in any year, and none of the buildings\\' height will increase.</li>\n        </ul>\n        <p>\n            Find the <strong>minimum number of years</strong> to make all the buildings the same height. Since the answer can be large, return it modulo <code>10<sup>9</sup> + 7</code>.\n        </p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <code>N</code>, denoting the number of elements in <strong>Arr</strong>.</li>\n            <li>Each of the next <code>N</code> lines contains an integer <code>Arr[i]</code>, denoting the height of each building.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print the minimum number of years required to make all the buildings the same height, modulo <code>10<sup>9</sup> + 7</code>.\n        </p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ N ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ Arr[i] ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n1\n3</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here, <code>N = 2</code> and <code>Arr = [1, 3]</code>. <br>\n                The best solution is:</p>\n                <ul>\n                    <li>In the first year, do nothing.</li>\n                    <li>In the second year, increase the height of the first building by <code>2</code>.</li>\n                </ul>\n                <p>Thus, the minimum number of years is <code>2</code>.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n2\n5\n3</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here, <code>N = 3</code> and <code>Arr = [2, 5, 3]</code>. <br>\n                The operations are:</p>\n                <ul>\n                    <li>Year 1: Increase the height of the first building by <code>1</code>.</li>\n                    <li>Year 2: Increase the height of the third building by <code>2</code>.</li>\n                    <li>Year 3: Do nothing.</li>\n                    <li>Year 4: Adjust remaining buildings\\' height as needed.</li>\n                </ul>\n                <p>Thus, the minimum number of years is <code>4</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1IKDpzHSotc5WfhNY0WlqtzDhXwcucxG7WwjqhuyRdq8/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 369,
        "title": "Rescue the Cat with Merged Ladders",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Rescue the Cat with Merged Ladders</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>\n            A cat is stranded on the roof of a skyscraper. To rescue the cat, you need a large ladder.\n        </p>\n        <p>\n            Unfortunately, such a ladder is unavailable, but you are provided with <strong>n</strong> smaller ladders. Each ladder is structured as a tree, where nodes are numbered sequentially from <code>1</code> to <code>m</code>, with <code>m</code> being the number of nodes in every ladder.\n        </p>\n        <p>\n            Each ladder is described by a list of edges, where each edge connects two nodes. For example:\n        </p>\n        <ul>\n            <li><strong>Ladder 1</strong>: <code>(1-2, 1-3)</code>, <code>(2-3)</code></li>\n            <li><strong>Ladder 2</strong>: <code>(1-2, 2-3)</code>, <code>(1-3)</code></li>\n        </ul>\n        <p>\n            If you merge node <code>2</code> of ladder <code>1</code> with node <code>1</code> of ladder <code>2</code>, the resulting combined ladder would look like this: <code>3-1 - 11 - (21+12) - 22 - 32</code>, forming a ladder with a total length of <strong>4</strong>. Here, <code>A<sub>i</sub></code> (e.g., <code>21</code>, <code>12</code>, etc.) represents the <code>i<sup>th</sup></code> node of the <code>A<sup>th</sup></code> ladder.\n        </p>\n        <p>\n            You can combine two ladders by merging specific nodes from each ladder. When two nodes are merged, they effectively become one, forming a larger ladder.\n        </p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>First line contains an integer <code>n</code>, denoting the number of ladders.</li>\n            <li>Each of the following lines describes a ladder with <code>m</code> nodes as a list of edges.</li>\n            <li>Finally, two integers represent the nodes to be merged from two ladders.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print the total length of the resulting ladder after merging.\n        </p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ m ≤ 10<sup>5</sup></code></li>\n            <li>Each edge connects two nodes.</li>\n            <li>All ladders form valid trees.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n3\n1 2\n1 3\n2 3\n3\n1 2\n2 3\n1 3\n2 1</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Ladder 1 and Ladder 2 are combined by merging node <code>2</code> of Ladder 1 with node <code>1</code> of Ladder 2. The resulting ladder has a total length of <code>4</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1a_qWV_HVxt1KbHZR-Q9cfrkAYdR6zhAGnRFh8T2CqdE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 370,
        "title": "Sum of Time to Traverse a Road",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Problem: Sum of Time to Traverse a Road</h1>\n        <p>\n            You are given a road of length <strong>n</strong>. The road is represented as an array \n            <strong>v</strong> of length <strong>n</strong>.\n        </p>\n        <p>\n            Each position <strong>i</strong> from <strong>1 to n</strong> has a light. Each light is \n            either <strong>1</strong> (turned on) or <strong>0</strong> (turned off). You love to walk, so \n            you can choose any positions <strong>i</strong> and <strong>j</strong> (<strong>i &lt; j</strong>) \n            and walk from <strong>i</strong> to <strong>j</strong>.\n        </p>\n        <p>\n            You can do one of the following two moves:\n        </p>\n        <ol>\n            <li>If you are at position <strong>i</strong> and the light at <strong>i+1</strong> is turned \n            on, you can move to <strong>i+1</strong>.</li>\n            <li>If you are at position <strong>i</strong> and the light at <strong>i+1</strong> is \n            turned off, you must stay at <strong>i</strong>.</li>\n        </ol>\n        <p>\n            Each move takes <strong>1 second</strong>, and in each second, all lights \n            <strong>reverse</strong> (if the light is 1, it becomes 0 and vice versa).\n        </p>\n        <p>\n            Now, for every <strong>i</strong> and <strong>j</strong> (<strong>0 &lt; i &lt; j ≤ n</strong>), \n            you should calculate the <strong>number of seconds</strong> you need to move from <strong>i</strong> \n            to <strong>j</strong> and store it in an array <strong>a</strong>.\n        </p>\n        <p>\n            Find the <strong>sum of a</strong>. Since the answer can be large, return it mod \n            <strong>1e9 + 7</strong>.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer, <strong>n</strong>, denoting the number of elements in <strong>v</strong>.</li>\n            <li>Each line <strong>i</strong> of the <strong>n</strong> subsequent lines \n            (where <strong>0 ≤ i &lt; n</strong>) contains an integer describing <strong>v[i]</strong>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer denoting the sum of <strong>a</strong> modulo <strong>1e9 + 7</strong>.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><strong>1 ≤ n ≤ 10^5</strong></li>\n            <li><strong>0 ≤ v[i] ≤ 1</strong></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n1\n1</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here, <strong>n=1</strong> and <strong>v=[1]</strong>. There is only one path (0 to 1), and the time required is 1. Hence, the answer is 1.</p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n0\n0</pre>\n            <pre class=\\\"output\\\">Output:\n8</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here, <strong>n=2</strong> and <strong>v=[0, 0]</strong>:</p>\n                <ul>\n                    <li>The answer of the road from 0 to 1 is 2.</li>\n                    <li>The answer of the road from 0 to 2 is 4.</li>\n                    <li>The answer of the road from 1 to 2 is 2.</li>\n                </ul>\n                <p>Hence, the answer is <strong>2 + 4 + 2 = 8</strong>.</p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1GMMka_80Q-5-SH_6GuEe9mVuIF3nlTD4Y6r12aKSeGk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 371,
        "title": "Choose Two Equal Subsets",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Choose Two Equal Subsets</h1>\n        <p>\n            You are given an array <strong>A</strong> consisting of <strong>N</strong> distinct integers.\n        </p>\n        <p>\n            For each index <strong>i</strong>, find the number of ways you can choose two subsets of the \n            same size such that:\n        </p>\n        <ul>\n            <li>The first subset is from the numbers that are on the left of index <strong>i</strong>.</li>\n            <li>The second subset is from the numbers that are on the right of index <strong>i</strong>.</li>\n        </ul>\n        <p>\n            Additionally, if we put these two subsets and the number in index <strong>i</strong> into a \n            new array <strong>B</strong> and then sort <strong>B</strong>, the number that was in the index \n            <strong>i</strong> should be in the middle of <strong>B</strong>.\n        </p>\n        <p>\n            Find the number of all ways to choose these two subsets.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer, <strong>N</strong>, denoting the number of elements in <strong>A</strong>.</li>\n            <li>Each line <strong>i</strong> of the <strong>N</strong> subsequent lines \n            (where <strong>0 ≤ i &lt; N</strong>) contains an integer describing <strong>A[i]</strong>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer denoting the total number of ways to choose the two subsets.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><strong>1 ≤ N ≤ 10^3</strong></li>\n            <li><strong>1 ≤ A[i] ≤ 10^9</strong></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[Sample input not provided]</pre>\n            <pre class=\\\"output\\\">Output:\n[Sample output not provided]</pre>\n            <div class=\\\"explanation\\\">\n                <p>[Explanation if any, not provided in the image.]</p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1s7qeJBPTj3i1b4y1dTfarn1hIH3nZS5vOISIldVLxn4/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 372,
        "title": "Maximum Total Rectangle Area",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>HandsOn: Maximum Total Rectangle Area</h2>\n        <p>\n            You are given an array <strong>A</strong> of size <strong>N</strong> where each element describes the length of the \n            <strong>segment</strong> you have.\n        </p>\n        <p>\n            You can <strong>reduce</strong> the length of any segment by <strong>one</strong>. However, each segment can be \n            reduced <strong>only once</strong>.\n        </p>\n        <p>\n            It is given that four segments can produce a rectangle. However, a rectangle can be made using four segments \n            <strong>AB, BC, CD, DA</strong> <em>if and only if</em> <strong>AB = CD</strong> and <strong>BC = DA</strong>.\n        </p>\n        <p>\n            Find the <strong>maximum total area</strong> that can be obtained from the given segments. Since the number can \n            be very large, return it modulo <strong>1e9 + 7</strong>.\n        </p>\n        <p><strong>Note:</strong></p>\n        <ul>\n            <li>You <strong>don\\'t</strong> have to maximize the number of rectangles.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer, <strong>N</strong>, denoting the number of elements in <strong>A</strong>.</p>\n        <p>Each line <strong>i</strong> of the <strong>N</strong> subsequent lines (where <strong>0 ≤ i &lt; N</strong>) contains an integer describing <strong>A[i]</strong>.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer — the maximum total area that can be obtained, modulo <strong>1e9 + 7</strong>.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><strong>1 ≤ N ≤ 10<sup>5</sup></strong></li>\n            <li><strong>1 ≤ A[i] ≤ 10<sup>5</sup></strong></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n        <div class=\\\"example\\\">\n            <h4>Case 1</h4>\n            <pre class=\\\"input\\\">Input:\n4\n2\n4\n2\n5</pre>\n            <pre class=\\\"output\\\">Output:\n8</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here, N=4 and A=[2,4,2,5].</p>\n                <p>We can make one rectangle out of the segments [2,4,2,5] by reducing the length of the last segment by one.</p>\n                <p>The area of that rectangle is 8.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Case 2</h4>\n            <pre class=\\\"input\\\">Input:\n10\n99\n100\n99\n100\n100\n99\n1\n100</pre>\n            <pre class=\\\"output\\\">Output:\n15</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, N=10 and A=[99, 100, 99, 100, 100, 99, 1, 100].\n                    <br>The best answer is to take the segments [100,100,100,100]. \n                    The area of that rectangle is 10000. Then we can reduce the length of the last element by one to get four \n                    segments of length 99 and make a rectangle out of them.\n                </p>\n                <p>The total area is: 10000+9801 = 19801.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Case 3</h4>\n            <pre class=\\\"input\\\">Input:\n5\n3\n3\n1\n6\n5</pre>\n            <pre class=\\\"output\\\">Output:\n15</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here, N=5 and A=[3,3,1,6,5]. \n                    <br>We reduce the length of 6 by 1, the area is: 5*3 = 15.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1J0ey167BEdgmPN3Eg1TbPIlFzflcwRsme-iRlRTFLiQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    },
    {
        "id": 373,
        "title": "Minimum Operations for Character Grouping",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <h2>HandsOn: Minimum Operations for Character Grouping</h2>\\n        <p>\\n            You are given a string <strong>s</strong> of length <strong>n</strong> consisting of lowercase Latin letters such that \\n            the <strong>number of distinct characters</strong> in <strong>s</strong> is <strong>not more than 10</strong>.\\n        </p>\\n        <p>\\n            You can perform some operation on <strong>s</strong> such that all similar characters in <strong>s</strong> are next to each other. \\n            Formally speaking, your <strong>goal</strong> is to ensure that for any three indices <strong>i, j,</strong> and <strong>k</strong> \\n            such that <strong>(1 ≤ i &lt; k &lt; j ≤ n)</strong>, \\\\\\\"si = sj\\\\\\\" then \\\\\\\"sk = si\\\\\\\".\\n        </p>\\n        <p>\\n            In one operation, you can choose an index <strong>i</strong> from 1 to n, pick the character from that index, \\n            and <strong>insert it back wherever</strong> you want in the string such that the size of <strong>s</strong> is always the same.\\n        </p>\\n        <p>\\n            In other words, you can pick any character and put it at the <strong>first position</strong> or the <strong>last position</strong> \\n            or in <strong>between</strong> any two other characters so the size of <strong>s</strong> will always be the <strong>same</strong> \\n            (after each operation, the size of <strong>s</strong> will be <strong>n</strong>).\\n        </p>\\n        <p>\\n            Find the <strong>minimum number of operations required</strong> to achieve your goal.\\n        </p>\\n    </div>\\n\\n    <div class=\\\\\\\"input-format\\\\\\\">\\n        <h3>Input Format</h3>\\n        <p>\\n            The first line contains an integer, <strong>n</strong>, denoting the length of the given string <strong>s</strong>.\\n        </p>\\n        <p>\\n            The next line contains a string, <strong>s</strong>, denoting the given string <strong>s</strong>.\\n        </p>\\n    </div>\\n\\n    <div class=\\\\\\\"output-format\\\\\\\">\\n        <h3>Output Format</h3>\\n        <p>\\n            Print a single integer — the minimum number of operations required to achieve the goal.\\n        </p>\\n    </div>\\n\\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li><strong>1 ≤ n ≤ 10<sup>5</sup></strong></li>\\n            <li>The string <strong>s</strong> contains only lowercase Latin letters.</li>\\n            <li>The number of distinct characters in <strong>s</strong> is not more than <strong>10</strong>.</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Examples</h3>\\n\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <h4>Case 1</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n4\\nabba</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n1</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>\\n                    Here, n=4 and s=\\\\\\\"abba\\\\\\\".\\n                </p>\\n                <p>\\n                    In this sample, the best solution is that we can move the first \\\\\\\"a\\\\\\\" next to the last \\\\\\\"a\\\\\\\" or vice versa. \\n                    So this is one operation to obtain either \\\\\\\"aabb\\\\\\\" or \\\\\\\"bbaa\\\\\\\".\\n                </p>\\n                <p>Hence, the answer is 1.</p>\\n            </div>\\n        </div>\\n\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <h4>Case 2</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n5\\nabcab</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n2</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>\\n                    Here, n=5 and s=\\\\\\\"abcab\\\\\\\".\\n                </p>\\n                <p>\\n                    In this sample, one of the best solutions is:<br>\\n                    → First, move the second character \\\\\\\"b\\\\\\\" to the last position (the end of the string) to obtain \\\\\\\"acabb\\\\\\\".<br>\\n                    → Second, move the second character \\\\\\\"c\\\\\\\" from the obtained string \\\\\\\"acabb\\\\\\\" to the first position to obtain \\\\\\\"caabb\\\\\\\".\\n                </p>\\n                <p>Those are two operations, so the answer is 2.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n",
        "google_doc_link": "https://docs.google.com/document/d/1jbKYK4GsA7YWssIJuptPIk_IH6GFPsbfS6AHlnI857w/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Infosys SP",
        "company_id": 109
    }
]