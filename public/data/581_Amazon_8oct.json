[
    {
        "id": 1664,
        "title": "Maximum System Memory Capacity",
        "problem_statement": "<h1>Maximum System Memory Capacity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The developers at Amazon are working on optimizing the capacity of their cloud system. In the system, there are <code>n</code> servers in total. The memory capacity of the <code>i</code>th server is represented by the array <code>memory[i]</code>. A system always contains a primary and backup set of servers. If the system has <code>2x</code> servers, then <code>x</code> of them will be primary and the other <code>x</code> will be backup servers. For each primary server <code>P</code>, there exists a backup server <code>B</code> where the memory capacity of <code>B</code> is <strong>greater than or equal to</strong> the memory capacity of <code>P</code>. The system memory capacity is the sum of the memory capacity of all the primary servers.</p>\r\n<p>Given <code>n</code> servers and an array <code>memory</code>, find the maximum system memory capacity that can be formed using the <code>n</code> servers.</p>\r\n\r\n<p><strong>Function Description</strong></p>\r\n<p>Complete the function <code>maximumCapacity</code> in the editor below.\r\n<code>maximumCapacity</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int memory[n]</code>: the memory capacity of the given servers</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<p><code>long int</code>: the maximum system memory capacity</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Given 6 servers with memory capacities <code>[2, 4, 5, 1, 2, 1]</code>.\r\nThe problem illustrates various configurations of primary and backup servers. For a configuration to be valid, each primary server <code>P</code> must have a corresponding backup server <code>B</code> such that <code>memory(P) <= memory(B)</code>.</p>\r\n<pre><code class='language-text'>Primary Servers | Backup Servers | Conditions                         | Valid Option\r\n----------------|----------------|------------------------------------|-------------\r\nserverA, serverB| serverC, serverD| memory(serverA) <= memory(serverC),| No\r\n                |                | memory(serverB) <= memory(serverD) |\r\nserverA, serverB| serverD, serverE| memory(serverA) <= memory(serverD),| No\r\n                |                | memory(serverB) <= memory(serverE) |\r\nserverA, serverB| serverE, serverC| memory(serverA) <= memory(serverE),| Yes\r\n                |                | memory(serverB) <= memory(serverC) |</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe problem text states that for a specific valid configuration, the system memory capacity can be 5. This implies finding the optimal pairing to maximize the sum of primary server memories.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, memory = [1, 2, 1, 2]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Here, we have 4 servers with memory sizes <code>[1, 2, 1, 2]</code>. We can choose two servers as primary and two as backup. For instance, if we pick the first server (memory 1) and the second server (memory 2) as primary, and the third server (memory 1) and fourth server (memory 2) as backups:\r\n<ul>\r\n    <li>Primary (1) can be backed up by (1) since 1 >= 1.</li>\r\n    <li>Primary (2) can be backed up by (2) since 2 >= 2.</li>\r\n</ul>\r\nThe conditions hold true. The sum of primary server memories is <code>1 + 2 = 3</code>. Hence, the maximum system memory capacity is 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 3, memory = [1, 2, 1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Here, we have 3 servers with memory sizes <code>[1, 2, 1]</code>. We can choose one server as a primary and one as a backup. For example, choose the first server (memory 1) as a primary server, and the third server (memory 1) as its respective backup server. The condition holds true since <code>memory(backup) >= memory(primary)</code> (1 >= 1). The sum of primary server memories is 1. Hence, the maximum system memory capacity is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= memory[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_8oct",
        "company_id": 581
    },
    {
        "id": 1665,
        "title": "Code Question 2",
        "problem_statement": "<h1>Code Question 2</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Amazon's internal developer summit, two engineers, Alex and Charlie are competing in a fun coding duel challenge. They are given a string S composed of lowercase English letters.</p>\r\n<p>The game rules are as follows:</p>\r\n<ul>\r\n    <li>Alex and Charlie take turns removing one character at a time, with Alex going first.</li>\r\n    <li>The game continues until only one character is left in the string.</li>\r\n</ul>\r\n<p>The engineers adopt the following removal strategy:</p>\r\n<ul>\r\n    <li>Alex's strategy: Remove a character that results in the smallest possible string (lexicographically).</li>\r\n    <li>Charlie's strategy: Remove a character that results in the largest possible string (lexicographically).</li>\r\n</ul>\r\n<p>Your task is to simulate this process and determine the final character left in the string after all removals with Alex making the first move.</p>\r\n<p><strong>Note:</strong> To compare two strings, the lexicographical order is defined as follows:</p>\r\n<ul>\r\n    <li>Start by comparing character by character from left to right of the string.</li>\r\n    <li>The string with the first different character that appears earlier in the alphabet is smaller. For example, \"abc\" < \"abd\" because 'c' comes before 'd'.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider the string S = 'cat'</p>\r\n<p>1. Turn 1: Alex (minimize) tries removing each character and evaluates the resulting strings:</p>\r\n<ul>\r\n    <li>Remove 'c' -> 'at'</li>\r\n    <li>Remove 'a' -> 'ct'</li>\r\n    <li>Remove 't' -> 'ca'</li>\r\n    <li>Among these: 'at' is the smallest -> Alex removes 'c'.</li>\r\n</ul>\r\n<p>2. Turn 2 - Charlie (maximize), tries removing each character:</p>\r\n<ul>\r\n    <li>Remove 'a' -> 't'</li>\r\n    <li>Remove 't' -> 'a'</li>\r\n    <li>Among these: 't' is larger -> Charlie removes 'a'</li>\r\n</ul>\r\n<p>The final character left in the string is 't'. Hence, the answer is 't'.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: S = \"abcde\"\r\nOutput: c</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Here, S=\"abcde\"</p>\r\n<ul>\r\n    <li>Alex would remove character 'e' (at index 4) making S=\"abcd\"</li>\r\n    <li>Charlie would remove character 'a' (at index 0) making S=\"bcd\"</li>\r\n    <li>Alex would remove character 'd' (at index 2) making S=\"bc\"</li>\r\n    <li>Charlie would remove character 'b' (at index 0) making S=\"c\"</li>\r\n</ul>\r\n<p>Hence, 'c' is the final character left.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"hacker\"\r\nOutput: e</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Here, S=\"hacker\"</p>\r\n<ul>\r\n    <li>Alex would remove character 'h' (at i=0) making S=\"acker\"</li>\r\n    <li>Charlie would remove character 'a' (at i=0) making S=\"cker\"</li>\r\n    <li>Alex would remove character 'k' (at i=1) making S=\"cer\"</li>\r\n    <li>Charlie would remove character 'c' (at i=0) making S=\"er\"</li>\r\n    <li>Alex would remove character 'e' (at i=0) making S=\"r\"</li>\r\n</ul>\r\n<p>Hence, 'e' is the final character left.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>finalCharacter</code> in the editor below.</p>\r\n<p><code>finalCharacter</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>S</code>: A string composed of lowercase English letters.</li>\r\n</ul>\r\n<pre><code class='language-javascript'>char finalCharacter(string s) {\r\n    // Complete the 'finalCharacter' function below.\r\n    // The function is expected to return a CHARACTER.\r\n    // The function accepts STRING s as parameter.\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |S| <= 10^6</code></li>\r\n    <li>String <code>S</code> consists only of English lowercase letters (a-z).</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_8oct",
        "company_id": 581
    }
]