[
    {
        "id": 1804,
        "title": "Perfect Dancers",
        "problem_statement": "<h1>Perfect Dancers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A dance institute provides morning and evening sessions. Every person who joins the institute is provided a unique ID. Persons can choose any number of dance forms. Some people who are not very perfect in any dance form attends both the sessions. The dance trainer prepares a separate list for the morning and evening session of all the persons who attend the session. The ID of the persons is repeated in the list by the same number of times as the number of dance forms he/she has chosen.</p>\r\n<p>The institute has planned to showcase various dance forms on the annual event. The institute wants some leaders who can lead the event on the final day. So, the trainer is looking for the dancers who are perfect in various dance forms. According to the trainer, perfect dancers are the one who attends only one session either morning or evening.</p>\r\n<p>Write an algorithm to find the number of perfect dancers selected by the trainer to lead the event. If a dancer is perfect in more than one dance form then he/she will be counted by the same number of times as the number of dance forms in which he/she is perfect.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of an integer - <code>morSession</code>, representing the number of persons in the morning session (M).</p>\r\n<p>The second line consists of M space-separated integers, representing the IDs of the persons present in the morning session.</p>\r\n<p>The third line consists of an integer - <code>eveSession</code>, representing the number of persons in the evening session (E).</p>\r\n<p>The last line consists of E space-separated integers, representing the IDs of the persons present in the evening session.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print an integer representing the number of perfect dancers selected by the trainer to lead the event.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n11\r\n1 1 2 3 4 5 5 7 6 9 10\r\n10\r\n11 12 13 4 5 6 7 18 19 20\r\nOutput:\r\n12</code></pre>\r\n<p><strong>Explanation:</strong> The persons who attended both the sessions are 4, 5, 6 and 7.</p>\r\n<p>The perfect dancers who attended either the morning session or the evening session are [1, 2, 3, 9, 10, 11, 12, 13, 18, 19, 20].</p>\r\n<p>So, the number of perfect dancers in all the dance forms is 12.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <unordered_set>\n\nclass Solution {\npublic:\n    int countPerfectDancers(const std::vector<int>& morning_ids, const std::vector<int>& evening_ids) {\n        // Core logic to find the number of perfect dancers\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int morSession;\n    std::cin >> morSession;\n    std::vector<int> morning_ids(morSession);\n    for (int i = 0; i < morSession; ++i) {\n        std::cin >> morning_ids[i];\n    }\n\n    int eveSession;\n    std::cin >> eveSession;\n    std::vector<int> evening_ids(eveSession);\n    for (int i = 0; i < eveSession; ++i) {\n        std::cin >> evening_ids[i];\n    }\n\n    Solution solver;\n    int result = solver.countPerfectDancers(morning_ids, evening_ids);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_13oct",
        "company_id": 637
    },
    {
        "id": 1805,
        "title": "Deep Learning Model Optimization",
        "problem_statement": "<h1>Deep Learning Model Optimization</h1>\r\n<h2>Problem Description</h2>\r\n<p>A deep learning model is created with multiple parameters and layers. It is performing well but the predictions are very slow. The model needs to be modified so that the performance does not deteriorate significantly but the predictions become faster without increasing the cost. Which of the given options should be used in this case?</p>\r\n<p><strong>Note:</strong> Assume that the accuracy of the model is not affected.</p>\r\n\r\n<h1>Time Series Stationarity Test Interpretation</h1>\r\n<h2>Problem Description</h2>\r\n<p>Refer to the results of given tests when applied to time series data. What is the stationarity of the time series data?</p>\r\n<pre><code class='language-text'>Test                                 Result\r\nAugmented Dickey Fuller (ADF) test   Stationary\r\nKwiatkowski-Phillips-Schmidt-Shin (KPSS) Test Not stationary</code></pre>\r\n\r\n<h1>Handling Outliers in Regression</h1>\r\n<h2>Problem Description</h2>\r\n<p>If the data in a regression problem contains outliers, which of the given cost functions can be used to handle outliers without removing them?</p>\r\n\r\n<h1>Identifying Data Drift</h1>\r\n<h2>Problem Description</h2>\r\n<p>Which of the following situations is/are examples of data drift?</p>\r\n<ul>\r\n    <li>1. A loan application model receives more requests from applicants of a particular geographic region.</li>\r\n    <li>2. People buy clothes for winter during seasonal weather shifts.</li>\r\n    <li>3. The demand for t-shirts increases during the summer.</li>\r\n</ul>\r\n\r\n<h1>Pandas DataFrame Merging</h1>\r\n<h2>Problem Description</h2>\r\n<p>Refer to the given code. What should replace the Missing Statement to create a merged data frame?</p>\r\n<pre><code class='language-python'>data1 = {'Name':['A', 'B', 'C', 'D'],\r\n         'Age' :[27, 24, 22, 32]}\r\n\r\ndata2 = {'Address':['I', 'J', 'K', 'L'],\r\n         'City':['London', 'Paris', 'Italy', 'Seattle']}\r\n\r\ndf = pd.DataFrame(data1,index=['K0', 'K1', 'K2', 'K3'])\r\ndf1 = pd.DataFrame(data2, index=['K0', 'K2', 'K3', 'K4'])\r\n\r\nMissing Statement</code></pre>\r\n\r\n<h1>Time Series Model Evaluation Metric</h1>\r\n<h2>Problem Description</h2>\r\n<p>A model is designed for two-time series: T1 = [10, 0, 0, 20, 30], T2 = [100000, 2000000, 3000000, 4000000, 5000000]. Which is the right evaluation metric for the task to compare model performance on the two-time series?</p>\r\n<p><strong>Note:</strong> T1 and T2 are the observed values for each time series.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * The problem statement is a collection of multiple-choice questions from a data science quiz,\n     * not a standard competitive programming problem. The boilerplate below is based on the\n     * \"Time Series Model Evaluation Metric\" part, which provides two sample arrays.\n     * The input is assumed to be two lists of numbers.\n     */\n    double solve(const std::vector<long long>& t1, const std::vector<long long>& t2) {\n        // Core logic for the problem goes here.\n        return 0.0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n1;\n    std::cin >> n1;\n    std::vector<long long> t1(n1);\n    for (int i = 0; i < n1; ++i) {\n        std::cin >> t1[i];\n    }\n\n    int n2;\n    std::cin >> n2;\n    std::vector<long long> t2(n2);\n    for (int i = 0; i < n2; ++i) {\n        std::cin >> t2[i];\n    }\n\n    Solution solution;\n    double result = solution.solve(t1, t2);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_13oct",
        "company_id": 637
    },
    {
        "id": 1806,
        "title": "Time Series Evaluation Metric Selection",
        "problem_statement": "```html\r\n<h1>Time Series Evaluation Metric Selection</h1>\r\n<h2>Problem Description</h2>\r\n<p>A model is designed for two-time series: T1 = [10, 0, 0, 20, 30], T2 = [100000, 200000, 300000, 400000, 500000]. Which is the right evaluation metric for the task to compare model performance on the two-time series?</p>\r\n<p><strong>Note:</strong> T1 and T2 are the observed values for each time series.</p>\r\n\r\n<h1>Recommendation System Mechanism</h1>\r\n<h2>Problem Description</h2>\r\n<p>A user logs in to the online portal of a company for the first time and is asked to optionally provide their date of birth, gender, and ethnicity. What type of mechanism is the company using internally to recommend its products/services to the user?</p>\r\n\r\n<h1>Reinforcement Learning Applicability</h1>\r\n<h2>Problem Description</h2>\r\n<p>For which of the given models can reinforcement learning <strong>NOT</strong> be used?</p>\r\n\r\n<h1>Text Pre-processing for Base Form</h1>\r\n<h2>Problem Description</h2>\r\n<p>Refer to the given text and its base form. Which pre-processing technique will convert every word from the text to its lexicographically correct base form?</p>\r\n<pre><code class='language-text'>Text: My car crashed easily! He saw me eating daily.\r\nBase Form: My car crash easy! He see me eat daily.</code></pre>\r\n\r\n<h1>LDA Parameter Distributions</h1>\r\n<h2>Problem Description</h2>\r\n<p>What kind of distributions do the parameters Alpha (α) and Beta (β) of Latent Dirichlet Allocation (LDA) control?</p>\r\n\r\n<h1>Forecasting Model Building Process</h1>\r\n<h2>Problem Description</h2>\r\n<p>A model needs to be created that will forecast the next 6 weeks' demand for a grocery store. The historical daily demand for the past two years has been provided. Which of the given options would <strong>NOT</strong> be a part of the model-building process for the given scenario?</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <numeric>\n\nclass Solution {\npublic:\n    /**\n     * @brief Solves the problem based on the two time series.\n     * \n     * The problem statement is a collection of conceptual questions rather than a\n     * single, well-defined programming task. This boilerplate is based on the\n     * first question, \"Time Series Evaluation Metric Selection,\" assuming the task\n     * is to process two time series arrays.\n     * \n     * @param t1 A constant reference to a vector of integers representing the first time series.\n     * @param t2 A constant reference to a vector of integers representing the second time series.\n     * @return A double representing the calculated evaluation metric.\n     */\n    double solve(const std::vector<int>& t1, const std::vector<int>& t2) {\n        // Core logic to select and compute the evaluation metric will go here.\n        // For now, it returns a placeholder value.\n        return 0.0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    std::cout.tie(NULL);\n\n    // The problem statement does not specify the number of test cases.\n    // Assuming a single test case for processing the two time series.\n    \n    int n1;\n    std::cin >> n1;\n    std::vector<int> t1(n1);\n    for (int i = 0; i < n1; ++i) {\n        std::cin >> t1[i];\n    }\n\n    int n2;\n    std::cin >> n2;\n    std::vector<int> t2(n2);\n    for (int i = 0; i < n2; ++i) {\n        std::cin >> t2[i];\n    }\n\n    Solution solution;\n    double result = solution.solve(t1, t2);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_13oct",
        "company_id": 637
    },
    {
        "id": 1810,
        "title": "Vault Lock Sequence",
        "problem_statement": "<h1>Vault Lock Sequence</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A security company has made a lock for one of its vaults. The lock is highly secured and will open after following a particular sequence. On the door, there is a screen on which N numbers are displayed along with a key value, K. The correct sequence to open the door can be extracted from N numbers by replacing each number with the sum of the next K numbers. If the value of K is negative, then the number is replaced by the sum of the previous K numbers. The series of numbers is considered in a cyclic manner for the last key numbers.</p>\r\n<p>Write an algorithm for the company to find the correct sequence to open the lock of the vault.</p>\r\n\r\n<h3>Input:</h3>\r\n<p>The first line of the input consists of two space-separated integers - <strong>size</strong> and <strong>key</strong>, representing the total numbers displayed on the screen (N) and the key value (K), respectively.</p>\r\n<p>The second line consists of N space-separated integers - number₁, number₂, ....., numberN representing N numbers which are getting displayed on the screen.</p>\r\n\r\n<h3>Output:</h3>\r\n<p>Print a list of integers representing the correct sequence to open the lock of the vault.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 3\r\n4 2 -5 11\r\nOutput:\r\n8 10 17 1</code></pre>\r\n<p><strong>Explanation:</strong> The initial numbers are [4, 2, -5, 11]. N=4, K=3.</p>\r\n<p>For each number, we sum the next K numbers (cyclically).</p>\r\n<ul>\r\n    <li><strong>Step 1:</strong> For the first number (4), sum the next 3 numbers: 2 + (-5) + 11 = 8. (Numbers considered: [2, -5, 11])</li>\r\n    <li><strong>Step 2:</strong> For the second number (2), sum the next 3 numbers: -5 + 11 + 4 = 10. (Numbers considered: [-5, 11, 4])</li>\r\n    <li><strong>Step 3:</strong> For the third number (-5), sum the next 3 numbers: 11 + 4 + 2 = 17. (Numbers considered: [11, 4, 2])</li>\r\n    <li><strong>Step 4:</strong> For the fourth number (11), sum the next 3 numbers: 4 + 2 + (-5) = 1. (Numbers considered: [4, 2, -5])</li>\r\n</ul>\r\n<p>So, the output is 8 10 17 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt; size &le; 10<sup>5</sup></code></li>\r\n    <li><code>-10<sup>6</sup> &le; number[i] &le; 10<sup>6</sup></code></li>\r\n    <li><code>1 &le; i &le; size</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nclass Solution {\npublic:\n    std::vector<long long> findSequence(int N, int K, const std::vector<int>& numbers) {\n        // Core logic to be implemented here\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N, K;\n    std::cin >> N >> K;\n\n    std::vector<int> numbers(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> numbers[i];\n    }\n\n    Solution sol;\n    std::vector<long long> result = sol.findSequence(N, K, numbers);\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_13oct",
        "company_id": 637
    },
    {
        "id": 1811,
        "title": "Longest Common Town Prefix",
        "problem_statement": "<h1>Longest Common Town Prefix</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are N people living in a state. In this state, people add their town name before their first name. Write an algorithm to find the name of the town of the given N people where the name of the town is the common starting substring (prefix) and has the maximum length.</p>\r\n<p>The names of the people are spelled using English letters and are case insensitive. The output should be in lowercase.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of an integer - <code>size</code>, representing the given number of people (N).</p>\r\n<p>The second line consists of N space-separated strings representing the first names of the people.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print a string in lowercase letters representing the name of the town of the given N people where the name of the town is the common starting substring and has the maximum length. If no such common prefix is found, then do not print anything.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nRosewood rose rosy rosemarry roshh\r\nOutput:\r\nros</code></pre>\r\n<p><strong>Explanation:</strong> \"Ros\" is the common starting substring with the maximum length in the peoples' names. After converting to lowercase and finding the common prefix, \"ros\" is the result.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt; size &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt; len &lt;= 10<sup>6</sup></code>; where <code>len</code> is the length of a single string.</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>The main class name must be \"Solution\". The current selected programming language is Java (JDK 1.8).</p>\r\n\r\n<h2>Starter Code (Java)</h2>\r\n<pre><code class='language-java'>import java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\n/* Name of the class has to be \"Solution\" when you submit the code */\r\npublic class Solution\r\n{\r\n    public static String getTown(String[] peopleNames)\r\n    {\r\n        String answer = \"\";\r\n        // Write your code here\r\n        return answer;\r\n    }\r\n\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner in = new Scanner(System.in);\r\n        //input for peopleNames\r\n        int peopleNames_size = in.nextInt();\r\n        String peopleNames[] = new String[peopleNames_size];\r\n        for(int idx = 0; idx &lt; peopleNames_size; idx++)\r\n        {\r\n            peopleNames[idx] = in.next();\r\n        }\r\n\r\n        String result = getTown(peopleNames);\r\n        System.out.print(result);\r\n    }\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cctype>\n\nclass Solution {\npublic:\n    std::string getLongestCommonPrefix(int size, std::vector<std::string>& names) {\n        // Core logic to find the longest common prefix goes here.\n        // Remember to handle case-insensitivity and return the result in lowercase.\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int size;\n    std::cin >> size;\n\n    std::vector<std::string> peopleNames(size);\n    for (int i = 0; i < size; ++i) {\n        std::cin >> peopleNames[i];\n    }\n\n    Solution solution;\n    std::string result = solution.getLongestCommonPrefix(size, peopleNames);\n\n    std::cout << result;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_13oct",
        "company_id": 637
    }
]