[
    {
        "id": 693,
        "title": "Efficient Study",
        "problem_statement": "<h1>Efficient Study</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An e-book provider offers a variety of programming articles, each with a distinct intellectual value. Readers earn points equal to an article's intellectual value for each article read twice. Given a list of articles with their page lengths, intellectual value coefficients, and a daily page limit, find the maximum achievable intellectual value in one day.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>maximumLearning</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int iv[]</code>: each article's intellectual value</li>\r\n    <li><code>int articles[]</code>: each article's page length</li>\r\n    <li><code>int p</code>: the number of pages that can be read in one day</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: integer value representing the maximum achievable intellectual value in one day of reading</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\niv = [3, 2, 2]\r\narticles = [3, 2, 2]\r\np = 9\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>There are <code>n = 3</code> articles with articles = <code>[3, 2, 2]</code> pages and corresponding intellectual values <code>iv = [3, 2, 2]</code>.</p>\r\n<p>A maximum of <code>p = 9</code> pages can be read in a day.</p>\r\n<p>The best approach is to read the second and third articles twice: <code>2 * articles[1] + 2 * articles[2] = 2 * 2 + 2 * 2 = 8</code> pages.</p>\r\n<p>The maximum total intellectual value is: <code>iv[1] + iv[2] = 2 + 2 = 4</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\niv = [1, 4, 6, 3]\r\narticles = [1, 2, 2, 3]\r\np = 8\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>There are <code>n = 4</code> articles with articles = <code>[1, 2, 2, 3]</code> pages and corresponding intellectual values <code>iv = [1, 4, 6, 3]</code>.</p>\r\n<p>A maximum of <code>p = 8</code> pages can be read in a day.</p>\r\n<p>The best approach is to read the second and third articles twice: <code>2 * articles[1] + 2 * articles[2] = 2 * 2 + 2 * 2 = 8</code> pages.</p>\r\n<p>The maximum total intellectual value is: <code>iv[1] + iv[2] = 4 + 6 = 10</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\niv = [1, 4, 2, 5, 3]\r\narticles = [2, 6, 4, 7, 1]\r\np = 13\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>There are <code>n = 5</code> articles of lengths <code>[2, 6, 4, 7, 1]</code>. Their corresponding intellectual values <code>iv = [1, 4, 2, 5, 3]</code>.</p>\r\n<p>A maximum of <code>p = 13</code> pages can be read per day.</p>\r\n<p>The best approach is to read the third and fifth articles twice: <code>2 * articles[2] + 2 * articles[4] = 2 * 4 + 2 * 1 = 10</code> pages.</p>\r\n<p>The maximum total intellectual value is: <code>iv[2] + iv[4] = 2 + 3 = 5</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^3</code></li>\r\n    <li><code>1 <= iv[i] <= 10^5</code>, where <code>0 <= i < n</code>.</li>\r\n    <li><code>1 <= articles[i] <= 100</code>, where <code>0 <= i < n</code>.</li>\r\n    <li><code>1 <= p <= 10^5</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>int maximumLearning(vector<int> iv, vector<int> articles, int p)</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_17july",
        "company_id": 221
    },
    {
        "id": 694,
        "title": "Array Nullification",
        "problem_statement": "<h1>Array Nullification</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two arrays, <code>change</code> and <code>arr</code>, of lengths <code>n</code> and <code>m</code>, respectively. In each operation, you can perform one of the following:</p>\r\n<ol>\r\n    <li>You can decrement any element of <code>arr</code> by 1.</li>\r\n    <li>If <code>change[i] == 0</code> and <code>arr[change[i]] >= 0</code>, you can change that element to NULL.</li>\r\n</ol>\r\n<p>Assume 1-based indexing and find the minimum number of operations required to change all elements of the array to NULL, or report -1 if not possible.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>n = 4, m = 2\r\nchange = [0, 1, 0, 2]\r\narr = [1, 1]</code></pre>\r\n<p><strong>Operations sequence:</strong></p>\r\n<ol>\r\n    <li>Decrement <code>arr[1]</code>: <code>[0, 1]</code></li>\r\n    <li>Change <code>arr[1]</code> to NULL since <code>change[1]=1</code> and <code>arr[1]=0</code>: <code>[NULL, 1]</code></li>\r\n    <li>Decrement <code>arr[2]</code>: <code>[NULL, 0]</code></li>\r\n    <li>Change <code>arr[2]</code> to NULL since <code>change[2]=0</code> and <code>arr[2]=0</code>: <code>[NULL, NULL]</code></li>\r\n</ol>\r\n<p>The answer is 4.</p>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<pre><code class='language-text'>Input:\r\nchange[] size n = 10\r\nchange = [1, 0, 1, 3, 2, 1, 0, 3, 1, 1]\r\narr[] size m = 3\r\narr = [2, 1, 2]\r\n\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> One of the possible operation flows can be:</p>\r\n<ol>\r\n    <li>Decrement <code>arr[1]</code>: <code>[1,",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_17july",
        "company_id": 221
    }
]