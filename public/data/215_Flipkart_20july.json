[
    {
        "id": 660,
        "title": "Interdependent Component Failure",
        "problem_statement": "```html\r\n<h1>Interdependent Component Failure</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A system is made up of N components, some of which are interdependent. When a component fails, other components dependent on it also fail. However the dependent components can survive for some time after the original component fails, before they fail. These dependencies are shown as 'A B T' which means, A is dependent on B, but A can survive for T seconds after B fails.</p>\r\n<p>For a component X to work, all components on which it has dependency should work without fail. If a component X fails, any component that depends on X also stops working eventually. Not all the components are interdependent and no component depends on itself directly. However, an indirect dependency on itself is possible through other components.</p>\r\n<p>Given the dependencies of various components in the system, write a program to find the number of components that would fail if a particular component fails. Also find out how much time it takes for the last dependent component to fail.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains three integers, N, D and X, each separated by a single white space, where N is the number of components, D is the number of dependencies and X is the component which fails.</p>\r\n<p>Next D lines show the dependencies in the system, shown as 3 integers, A, B and T, each separated by a single white space, where A depends on B and A can survive for T seconds after B fails.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Single line of output contains two integers, F and S separated by a single white space; where F is the number of components that would fail if X fails, and S is the time in which all components dependent on X fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N &lt;= 5000</li>\r\n    <li>1 &lt;= D &lt;= 50 (the dependencies)</li>\r\n    <li>All the dependencies are unique.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 3 2 2\r\n2 1 5\r\n3 2 5\r\nOutput: 2 5</code></pre>\r\n<p><strong>Explanation:</strong> N=3, D=2, X=2. If 2 fails, 3 can survive for 5 seconds, after which 3 also fails. Since 1 does not depend on 2 or 3, it continues to run. Therefore we can say that 2 out of 3 components fail, and the last component fails 5 seconds after 2 fails. Hence output is 2 and 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 3 3 1\r\n2 1 2\r\n3 1 8\r\n3 2 4\r\nOutput: 3 6</code></pre>\r\n<p><strong>Explanation:</strong> N=3, D=3 and X=1. The first component to fail is X=1. Once 1 fails, 2 survives for 2 seconds and 3 survives for 8 seconds. However once 2 fails, 3 fails after 4 seconds. So all components fail and the last component fails after 6 seconds. Hence output is 3 and 6.</p>\r\n\r\n<h2>Provided Code Structure</h2>\r\n<pre><code class='language-javascript'>def components(n, d, x, a, b, t): # n is the number of components,d is the number of\r\n                                 # dependencies and X is the component which fails.a,b and t are array of integers.\r\n    # WRITE YOUR CODE HERE\r\n    pass\r\n\r\ndef main():\r\n    s = input().split()\r\n    n = int(s[0])\r\n    d = int(s[1])\r\n    x = int(s[2])\r\n\r\n    a = []\r\n    b = []\r\n    t = []\r\n\r\n    for i in range(d):\r\n        P = input().split()\r\n        a.append(int(P[0]))\r\n        b.append(int(P[1]))\r\n        t.append(int(P[2]))\r\n\r\n    components(n, d, x, a, b, t)\r\n\r\nmain()</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_20july",
        "company_id": 215
    },
    {
        "id": 661,
        "title": "Minimum Days to Service Sites",
        "problem_statement": "<h1>Minimum Days to Service Sites</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Mona is an on-site Service Engineer for a laptop manufacturer. She regularly travels across her territory, visiting sites where laptop servicing needs to be done. She works 8 hours a day, spending time either traveling to a site or providing service at the site.</p>\r\n<p>Mona's territory map is represented as a 2D-array of integers/starts at (0,0), where each positive non-zero number represents a site to be visited for a service call, and the value represents the time (in hours) needed for servicing at that site. A zero represents sites where there is no servicing needed. Mona can only travel horizontally or vertically along her territory, and it takes her 2 hours to travel a unit distance.</p>\r\n<p>Mona is planning a vacation and wants to know how soon she can start her vacation. Write a program to help Mona know the minimum number of days needed to complete all her service calls.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n, m &lt;= 30</code> where <code>n x m</code> grid represents Mona's territory</li>\r\n    <li>Service time at one site <code>&lt;= 8000</code> hrs</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line consists of two integers <code>n</code> and <code>m</code> (rows and columns) representing Mona's territory.</p>\r\n<p>Next <code>n</code> lines each have <code>m</code> space separated integers, representing the sites & service times at each site.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Single line of output has the minimum number of days required by Mona to complete all of her servicing tasks.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n2 0 0\r\n0 0 0\r\n0 0 1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> There are only two possible routes, (0,0) &#x2192; (2,2) or (2,2) &#x2192; (0,0).</p>\r\n<p>Time taken for servicing = 2 + 1 = 3 hrs</p>\r\n<p>Distance between the two sites = 4 units</p>\r\n<p>Hence travel time = 4 &#x00D7; 2 = 8hrs (2hr per unit distance)</p>\r\n<p>Total hours needed = 11 hrs</p>\r\n<p>Since Mona works 8 hrs a day, number of days needed to complete all sites' service is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 4\r\n3 0 0 0\r\n3 0 0 0\r\n0 0 5 0\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> Path: (0,0) &#x2192; (1,0) &#x2192; (2,0) &#x2192; (2,2)</p>\r\n<p>Total Distance : 4 units</p>\r\n<p>Total service time : 11 hrs</p>\r\n<p>Total time needed: 8 + 11 = 19 hrs</p>\r\n<p>Hence the minimum number of days needed is 3.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<pre><code class='language-python'>def findNumberOfDays(n,m,grid): # grid is given 2-D array of size nxm.\r\n    days=0\r\n\r\n    # WRITE YOUR CODE HERE\r\n\r\n    return days\r\n\r\ndef main():\r\n    n,m = [int(val) for val in input().split()]\r\n    grid = []\r\n    for i in range(n):\r\n        s = list(map(int,input().split()))\r\n        grid.append(s)\r\n    print(findNumberOfDays(n,m,grid))\r\n\r\nmain()</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_20july",
        "company_id": 215
    },
    {
        "id": 662,
        "title": "Deepika's Flower Journey",
        "problem_statement": "<h1>Deepika's Flower Journey</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>It's friendship day! Deepika is keen to wish her friend Jyoti with a special bouquet of flowers which she knows Jyoti loves. This bouquet can only be made with a combination of some special flowers, and will be incomplete if even one of the flowers is missing. These flowers are sold in different shops. Deepika plans to visit these shops on her way from her home to Jyoti's office. Each shop sells only one kind of flower. Deepika doesn't want to waste time, so she needs to visit exactly one shop selling each kind of flower before reaching Jyoti's office. From her home to a flower shop next to Deepika's home, and one next to Jyoti's office, so she plans to visit those two anyways.</p>\r\n<p>Help Deepika by finding the shortest path to collect all the flowers and reach Jyoti's office, while visiting exactly one shop selling each kind of flower. You can assume that at least one such path always exists.</p>\r\n<p>Read the Input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Number of flowers &lt;= Number of shops</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>Multiple inputs in a single line are always separated by single white spaces.</p>\r\n<p>The shops are represented by their names as strings (length &gt;=1) and the flowers are represented with numbers.</p>\r\n<p>First line of input has an integer n</p>\r\n<p>Next n lines have input in the following format: <code>s f d x1 x2...</code></p>\r\n<p>where</p>\r\n<ul>\r\n    <li><code>s</code> is the shop name</li>\r\n    <li><code>f</code> is the flower type available in that shop</li>\r\n    <li><code>x1 x2</code> etc. are the shop names which are at <code>d</code> distance from <code>s</code></li>\r\n</ul>\r\n<p>If there are three shops at distance d, then only x1 is given. If there are multiple shops at same distance, all such shops are listed out in the same line.</p>\r\n<p>The last line of input will have <code>u</code> and <code>v</code>, where <code>u</code> is the first shop (where Deepika's house is) and <code>v</code> is the last shop (where Jyoti's office is).</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output contains <code>u</code>, <code>v</code> and the minimum distance Deepika has to travel to get all the flowers and reach Jyoti's office.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\na 3 1 b\r\nb 2 2 c\r\nc 1 1 d\r\nd 5\r\ne 2\r\na d\r\nOutput:\r\na d 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The line 'a 3 1 b' is interpreted as follows: shop 'a' sells flower type 3 and is at 1 unit distance from shops 'b' and 'e'.</p>\r\n<p>The line 'd 5' is interpreted as follows: shop 'd' sells flower type 5 and there are no other shops connected to 'd' other than those already given in other lines.</p>\r\n<p>There are four kinds of flowers available in different shops: shop a sells 3, b and e sell 2, c sells 1 and d sells 5.</p>\r\n<p>Deepika's house is at 'a' and Jyoti's office is at 'd'.</p>\r\n<p>The shortest path Deepika can take while collecting all flowers is a-b-c-d, which means she covers a distance of 4 units.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nEvergreen 1 2 Classic\r\nClassic 1 3 Modern\r\nModern 3\r\nSuper 5 4 Modern Classic\r\nSuper Evergreen\r\nOutput:\r\nEvergreen Super 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>There are three kinds of flowers available in 4 different shops. Evergreen sells 1, Classic and Modern sell 3, and Super sells 5.</p>\r\n<p>Deepika's house is at 'Evergreen' and Jyoti's office is at 'Super'.</p>\r\n<p>The shortest path Deepika can take while collecting all flowers is Evergreen-Classic-Super, which means she covers a distance of 6 units.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_20july",
        "company_id": 215
    }
]