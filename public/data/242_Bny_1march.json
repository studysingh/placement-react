[
    {
        "id": 762,
        "title": "Winner Winner",
        "problem_statement": "<h1>Winner Winner</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alice and Bob are playing a game to decide who is better. They both play alternatively. Alice starts first. The subjects and the books are read sequentially.</p>\r\n<p>The rules of the game are as follows:</p>\r\n<ul>\r\n    <li>Both of them have N subjects.</li>\r\n    <li>Let array S denote the number of books in each subject.</li>\r\n    <li>Let array P denote the points for completing a book in a particular subject.</li>\r\n    <li>All books on one subject have the same points.</li>\r\n</ul>\r\n<p>In one move, a player has to complete the following steps:</p>\r\n<ul>\r\n    <li>They can skip all books of a subject if they want. They can keep skipping books till they want. Skip here means that the books of the subject become unavailable to read for both of them. As a result, the whole subject becomes unavailable. The player has the choice to skip subjects as long as he wants without losing his turn.</li>\r\n    <li>They read one book on a subject if it is available. On reading the book, the points of that person increase by P[i] where P[i] is the points for completing the book. So the number of books on that particular subject decreases by one. Note that he can read only one book in this step. The chance immediately goes to the other person just after he reads.</li>\r\n    <li>If no book is available, the game ends.</li>\r\n</ul>\r\n<p>The other person continues with the remaining subjects and the remaining books.</p>\r\n<p><strong>Task:</strong> Let us suppose the point of Alice is A and that of Bob is B. Alice wants to maximize A-B and Bob wants to maximize B-A. Find the best value of A-B if both of them play optimally.</p>\r\n<p><strong>Function description:</strong> Complete the function <code>solve</code> provided in the editor. This function takes the following parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><strong>N:</strong> Denoting the number of subjects</li>\r\n    <li><strong>S:</strong> The array denoting the number of books available for each subject</li>\r\n    <li><strong>P:</strong> The array of the points for reading a specific subject</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line contains T denoting the number of test cases. T also specifies the number of times you have to run the solve function on a different set of inputs.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains N denoting the sizes of arrays S and P.</li>\r\n            <li>The second line contains N space-separated integers S[1], S[2], ....., S[N] denoting the elements of S.</li>\r\n            <li>The third line contains N space-separated integers P[1], P[2], ....., P[N] denoting the elements of P.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print the answer in a new line.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n2\r\n1 1\r\n5 6\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first line denotes T = 1.</p>\r\n<p>The first test case:</p>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li>N = 2</li>\r\n    <li>S = [1, 1]</li>\r\n    <li>P = [5, 6]</li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li>Alice skips the first subject.\r\n        <ul>\r\n            <li>Current S = [0, 1]</li>\r\n            <li>Current P = [5, 6]</li>\r\n            <li>Current A = 0</li>\r\n            <li>Current B = 0</li>\r\n        </ul>\r\n    </li>\r\n    <li>Alice reads the book of the 2nd subject\r\n        <ul>\r\n            <li>Current S = [0, 0]</li>\r\n            <li>Current P = [5, 6]</li>\r\n            <li>Current A = 6</li>\r\n            <li>Current B = 0</li>\r\n        </ul>\r\n    </li>\r\n    <li>Bob does not have any book to read. So Alice wins.</li>\r\n    <li>A - 6, B - 0. A - B = 6. Thus the answer is 6.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= T <= 10^5</code></li>\r\n    <li><code>1 <= N <= 10^5</code></li>\r\n    <li><code>1 <= S[i] <= 10^9</code></li>\r\n    <li><code>1 <= P[i] <= 10^9</code></li>\r\n    <li>The sum of N over all test cases does not exceed 10^5.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Bny_1march",
        "company_id": 242
    },
    {
        "id": 764,
        "title": "Oldest Book Per Genre",
        "problem_statement": "<h1>Oldest Book Per Genre</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have been provided with two tables, <code>library_books</code> and <code>book_genres</code>, containing information about books and their corresponding genres. Write an SQL query to find the oldest book (based on <code>publication_year</code>) in each genre. If there are multiple books with the same publication year in a genre, return the one that appears first alphabetically by title.</p>\r\n\r\n<h3>Table: library_books</h3>\r\n<pre><code class='language-text'>+------------------+--------+-----------------------------------------------------+\r\n| Name             | Type   | Description                                         |\r\n+------------------+--------+-----------------------------------------------------+\r\n| book_id          | int    | Represents the unique ID of the book                |\r\n| book_title       | string | Represents the title of the book                    |\r\n| genre_id         | int    | Represents the ID of the genre of the book          |\r\n| book_rating      | int    | Represents the rating of the book (on a scale of 1 |\r\n| publication_year | int    | Represents the year when the book was published     |\r\n+------------------+--------+-----------------------------------------------------+</code></pre>\r\n\r\n<h3>Table: book_genres</h3>\r\n<pre><code class='language-text'>+------------+--------+------------------------------------+\r\n| Name       | Type   | Description                        |\r\n+------------+--------+------------------------------------+\r\n| genre_id   | int    | Represents the unique ID of the genre |\r\n| genre_name | string | Represents the name of the genre   |\r\n+------------+--------+------------------------------------+</code></pre>\r\n\r\n<h3>Output Format</h3>\r\n<pre><code class='language-text'>+------------+--------+------------------------------------+\r\n| Name       | Type   | Description                        |\r\n+------------+--------+------------------------------------+\r\n| genre_name | string | The name of the genre.             |\r\n| book_title | string | The title of the oldest book.      |\r\n+------------+--------+------------------------------------+</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input tables:</strong></p>\r\n<h4>Table: library_books</h4>\r\n<pre><code class='language-text'>+---------+-------------------+----------+-------------+------------------+\r\n| book_id | book_title        | genre_id | book_rating | publication_year |\r\n+---------+-------------------+----------+-------------+------------------+\r\n| 1       | Dune              | 1        | 9           | 1965             |\r\n| 2       | Foundation        | 1        | 8           | 1951             |\r\n| 3       | Neuromancer       | 2        | 8           | 1984             |\r\n| 4       | Snow Crash        | 2        | 7           | 1992             |\r\n| 5       | Altered Carbon    | 3        | 7           | 2002             |\r\n| 6       | Ready Player One  | 3        | 8           | 2011             |\r\n| 7       | Hyperion          | 1        | 9           | 1989             |\r\n+---------+-------------------+----------+-------------+------------------+</code></pre>\r\n\r\n<h4>Table: book_genres</h4>\r\n<pre><code class='language-text'>+----------+-----------------+\r\n| genre_id | genre_name      |\r\n+----------+-----------------+\r\n| 1        | Science Fiction |\r\n| 2        | Cyberpunk       |\r\n| 3        | Space Opera     |\r\n+----------+-----------------+</code></pre>\r\n\r\n<p><strong>Sample output:</strong></p>\r\n<pre><code class='language-text'>+-----------------+----------------+\r\n| genre_name      | book_title     |\r\n+-----------------+----------------+\r\n| Science Fiction | Foundation     |\r\n| Cyberpunk       | Neuromancer    |\r\n| Space Opera     | Altered Carbon |\r\n+-----------------+----------------+</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Time Limit: 5 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your SQL query must be able to print the sample output from the provided sample input. However, the query is run against multiple hidden test cases. Therefore, your query must pass these hidden test cases to solve the problem statement.</p>\r\n<p><strong>Scoring:</strong> Score is assigned if any testcase passes</p>\r\n<p><strong>Allowed Languages:</strong> MySQL, PostgreSQL, MSSQL, Oracle_Db</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Bny_1march",
        "company_id": 242
    }
]