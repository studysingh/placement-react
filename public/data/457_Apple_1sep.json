[
    {
        "id": 1317,
        "title": "Remaining Leaves in Garden",
        "problem_statement": "<h1>Remaining Leaves in Garden</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>It is a windy day today and many tree leaves are covering the garden. Write a program that calculates the number of leaves left in the garden based on their location and a series of wind gusts.</p>\r\n\r\n<h3>How it works:</h3>\r\n<ul>\r\n    <li>The ground is represented by a grid that is <strong>height</strong> squares high and <strong>width</strong> squares wide.</li>\r\n    <li>The top left box is located at <code>(0, 0)</code> where the first integer represents the row and the second the column.</li>\r\n    <li>Each element in the grid represents the number of leaves on the ground.</li>\r\n    <li>The series of gusts, <strong>winds</strong>, is a string composed of the characters <code>U</code> (top), <code>D</code> (bottom), <code>R</code> (right), <code>L</code> (left).</li>\r\n    <li>Each gust of wind moves the leaves on the grid one square in the direction of the wind.</li>\r\n    <li>The leaves fly out of the garden when the wind pushes them out of the grid.</li>\r\n</ul>\r\n\r\n<h3>Implementation Details:</h3>\r\n<p>Implement the function <code>remaining_leaves(int width, int height, vector&lt;vector&lt;int&gt;&gt; leaves, string winds)</code> which:</p>\r\n<ul>\r\n    <li>takes as inputs the integers <strong>width</strong> and <strong>height</strong>, the 2D integer array <strong>leaves</strong> and the string <strong>winds</strong>.</li>\r\n    <li>and returns the number of leaves left on the floor as an integer.</li>\r\n</ul>\r\n<p><strong>Important note:</strong> in <strong>leaves</strong>, the first integer represents rows and the second integer represents columns.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider a garden grid of <code>width = 3</code> and <code>height = 3</code>. The initial distribution of leaves is:</p>\r\n<pre><code class='language-text'>Initial Grid:\r\n[0, 1, 0]\r\n[1, 2, 1]\r\n[0, 1, 0]\r\nTotal leaves: 6</code></pre>\r\n<p><strong>Input:</strong> <code>width = 3</code>, <code>height = 3</code>, <code>leaves = [[0,1,0],[1,2,1],[0,1,0]]</code>, <code>winds = \"RRD\"</code></p>\r\n\r\n<p><strong>Explanation:</strong> The wind string \"RRD\" consists of three gusts: Right, Right, Down.</p>\r\n\r\n<p><strong>Step 1:</strong> First gust 'R' (Right)</p>\r\n<p>All leaves move one square to the right. Leaves pushed beyond the right boundary fly out.</p>\r\n<ul>\r\n    <li>The leaf at <code>(0,1)</code> moves to <code>(0,2)</code>.</li>\r\n    <li>The leaf at <code>(1,0)</code> moves to <code>(1,1)</code>.</li>\r\n    <li>The two leaves at <code>(1,1)</code> move to <code>(1,2)</code>.</li>\r\n    <li>The leaf at <code>(1,2)</code> (before movement) flies out of the grid.</li>\r\n    <li>The leaf at <code>(2,1)</code> moves to <code>(2,2)</code>.</li>\r\n</ul>\r\n<pre><code class='language-text'>Grid after first 'R' gust:\r\n[0, 0, 1]\r\n[0, 1, 2]\r\n[0, 0, 1]\r\nTotal leaves: 5</code></pre>\r\n\r\n<p><strong>Step 2:</strong> Second gust 'R' (Right)</p>\r\n<p>All remaining leaves move one square to the right. Leaves pushed beyond the right boundary fly out.</p>\r\n<ul>\r\n    <li>The leaf at <code>(0,2)</code> flies out.</li>\r\n    <li>The leaf at <code>(1,1)</code> moves to <code>(1,2)</code>.</li>\r\n    <li>The two leaves at <code>(1,2)</code> (before movement) fly out.</li>\r\n    <li>The leaf at <code>(2,2)</code> flies out.</li>\r\n</ul>\r\n<pre><code class='language-text'>Grid after second 'R' gust:\r\n[0, 0, 0]\r\n[0, 0, 1]\r\n[0, 0, 0]\r\nTotal leaves: 1</code></pre>\r\n\r\n<p><strong>Step 3:</strong> Third gust 'D' (Down)</p>\r\n<p>The remaining leaf moves one square down. Leaves pushed beyond the bottom boundary fly out.</p>\r\n<ul>\r\n    <li>The leaf at <code>(1,2)</code> moves to <code>(2,2)</code>.</li>\r\n</ul>\r\n<pre><code class='language-text'>Grid after 'D' gust:\r\n[0, 0, 0]\r\n[0, 0, 0]\r\n[0, 0, 1]\r\nTotal leaves: 1</code></pre>\r\n\r\n<pre><code class='language-text'>Output: 1</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt; width &lt; 20</code></li>\r\n    <li><code>0 &lt; height &lt; 20</code></li>\r\n    <li><code>0 &lt;= leaves[i][j] &lt; 20</code> for each cell <code>(i, j)</code> in the grid.</li>\r\n    <li><code>0 &lt;= winds.length &lt; 20</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Apple_1sep",
        "company_id": 457
    },
    {
        "id": 1318,
        "title": "Optimize Pizza Delivery Routes",
        "problem_statement": "<h1>Optimize Pizza Delivery Routes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Mario's Pizza Palace has received N pizza orders for delivery, and they're all lined up in order of when they were received. Each pizza order has a different delivery time - the <code>i</code>th order will take <code>A[i]</code> minutes to deliver (including travel time to that location).</p>\r\n<p>Mario has B delivery drivers available for the evening shift. He needs to assign these orders to his drivers, but there are some important operational constraints:</p>\r\n<ul>\r\n    <li><strong>Route Efficiency:</strong> Each driver must take orders that are consecutive in the queue. A driver cannot skip orders in the middle - if they take order 1 and order 3, they must also take order 2. This ensures efficient route planning and prevents confusion.</li>\r\n    <li><strong>Everyone Works:</strong> Each driver must be assigned at least one delivery. Mario doesn't want any driver sitting idle while others are overworked.</li>\r\n    <li><strong>No Order Splitting:</strong> Each pizza order goes to exactly one driver.</li>\r\n</ul>\r\n<p>Mario wants to distribute the delivery orders in such a way that the driver with the longest total delivery time has as short a time as possible. This ensures fair workload distribution and faster overall service.</p>\r\n<p>Your task is to find the minimum possible maximum delivery time that any single driver will have. If it's impossible to distribute the orders fairly according to the rules, return -1.</p>\r\n<p><strong>NOTE:</strong> Return -1 if a valid assignment is not possible.</p>\r\n\r\n<p>The function signature is as follows:</p>\r\n<pre><code class='language-javascript'>int optimizeDeliveryRoutes(vector&lt;int&gt; delivery_times, int num_drivers)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: delivery_times = [12, 34, 67, 90], num_drivers = 2\r\nOutput: 113</code></pre>\r\n<p><strong>Explanation:</strong> There are two drivers available. Orders can be distributed in the following ways:</p>\r\n<ul>\r\n    <li>Driver 1: [12] and Driver 2: [34, 67, 90]. Maximum delivery time goes to Driver 2 with 34 + 67 + 90 = 191 minutes.</li>\r\n    <li>Driver 1: [12, 34] and Driver 2: [67, 90]. Maximum delivery time goes to Driver 2 with 67 + 90 = 157 minutes.</li>\r\n    <li>Driver 1: [12, 34, 67] and Driver 2: [90]. Maximum delivery time goes to Driver 1 with 12 + 34 + 67 = 113 minutes.</li>\r\n</ul>\r\n<p>Of the 3 distribution options, Option 3 has the minimum maximum delivery time = 113 minutes.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: delivery_times = [5, 17, 100, 11], num_drivers = 4\r\nOutput: 100</code></pre>\r\n<p><strong>Explanation:</strong> With 4 drivers and 4 orders, the optimal distribution is to give each driver exactly one order: [5], [17], [100], [11]. The driver with order 3 has the maximum delivery time of 100 minutes.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^5</code> (where N is the number of pizza orders)</li>\r\n    <li><code>1 &lt;= A[i], B &lt;= 10^5</code> (where A[i] is a delivery time and B is the number of drivers)</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first argument given is the integer array <code>A</code> (delivery times).</li>\r\n    <li>The second argument given is the integer <code>B</code> (number of drivers).</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>Return that minimum possible maximum delivery time.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Apple_1sep",
        "company_id": 457
    }
]