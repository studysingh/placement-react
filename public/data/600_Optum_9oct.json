[
    {
        "id": 1712,
        "title": "Conduit Blogging Platform Features",
        "problem_statement": "<h1>Conduit Blogging Platform Features</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a fully functional application called <strong>Conduit</strong>, a simple blogging website that's similar to sites like medium.com. The application follows a modern web stack, with an <strong>Express.js</strong> backend using <strong>Sequelize ORM</strong> providing a <strong>RESTful API</strong> and a <strong>React frontend</strong> consuming this API. This application allows users to:</p>\r\n<ul>\r\n    <li>Sign up and log in using authentication.</li>\r\n    <li>Create, edit, and delete articles with support for markdown formatting.</li>\r\n    <li>Comment on articles and engage in discussions.</li>\r\n    <li>Follow other users to see their articles in a personalized feed.</li>\r\n    <li>Favorite articles to save them for later.</li>\r\n    <li>Filter articles by tags to discover trending topics.</li>\r\n</ul>\r\n<p>We've populated the database with 2 users and 7 articles which are owned by the Author user:</p>\r\n<ul>\r\n    <li>author@example.com - @uth0r1234</li>\r\n    <li>reader@example.com - r3@der1234</li>\r\n</ul>\r\n<p>See <code>README.md</code> from the IDE for details about project structure and the database, migrations, and seeded data.</p>\r\n<p>You will be implementing four progressive features, each building on the previous one:</p>\r\n\r\n<h3>Tier 1: Add Read-only API Endpoint for Article View Count</h3>\r\n<p>Implement a simple counter that tracks how many times each article has been viewed.</p>\r\n<h4>Acceptance Criteria</h4>\r\n<ul>\r\n    <li>Add a <code>viewCount</code> integer attribute to the Article model with default value of 0.</li>\r\n    <li>Create an API route called <pre><code class='language-text'>/articles/:slug/viewed</code></pre> to increment the counter when an article is viewed.</li>\r\n    <li>The <code>viewCount</code> field should be returned with Article data.</li>\r\n    <li>Backend only: No UI changes required for this tier.</li>\r\n</ul>\r\n\r\n<h3>Tier 2: Display Article View Count in UI</h3>\r\n<p>Build on Tier 1 functionality by showing the view count to users.</p>\r\n<h4>Acceptance Criteria</h4>\r\n<ul>\r\n    <li>Every time an article is viewed, call the API created when working on Tier 1 requirements to update the value by 1.</li>\r\n    <li>Add a simple icon and display the <code>viewCount</code> value (e.g., \"42 views\") below the article title.</li>\r\n    <li>Frontend only: No backend changes required for this tier.</li>\r\n</ul>\r\n\r\n<h3>Tier 3: Add Article Categories</h3>\r\n<p>Implement Article categories separate from tags.</p>\r\n<h4>Acceptance Criteria</h4>\r\n<ul>\r\n    <li>Create a new <code>Category</code> model with attributes for name and description.</li>\r\n    <li>Define an association between Article and Category models.</li>\r\n    <li>Seed the Category table with some categories (Travel, Animals, etc).</li>\r\n    <li>Create an API endpoints to list all categories.</li>\r\n    <li>Update the article creation/edit form in the UI to fetch the categories and include a category dropdown.</li>\r\n</ul>\r\n\r\n<h3>Tier 4: Implement Article Recommendations</h3>\r\n<p>Create a simple recommendation endpoint based on categories, tags, and <code>viewCount</code>. Display recommendations with the full Article view.</p>\r\n<h4>Acceptance Criteria</h4>\r\n<ul>\r\n    <li>Create a new API endpoint that returns 3-5 recommended articles based on:\r\n        <ul>\r\n            <li>Articles in the same category.</li>\r\n            <li>Articles sharing the most tags with the current article.</li>\r\n            <li>Sort the list by most viewed (via <code>viewCount</code>).</li>\r\n        </ul>\r\n    </li>\r\n    <li>Add a \"Recommended Reading\" section to the bottom of the article page in the UI.</li>\r\n    <li>Display the recommended articles with their titles and author names.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @brief Solves the given problem.\n     * \n     * This method should contain the core logic for the problem.\n     * The parameters will depend on the specific input format.\n     */\n    void solve() {\n        // The provided problem statement describes a full-stack web development task,\n        // not a typical competitive programming problem with standard input/output.\n        // This boilerplate is a generic template.\n        // Please adapt the input reading in main and the method signature here\n        // based on the actual problem's input format if it were a standard CP problem.\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement does not specify the number of test cases\n    // or a standard input format. Assuming a single execution for demonstration.\n    // If multiple test cases are needed, uncomment the following lines:\n    // int t;\n    // std::cin >> t;\n    // while (t--) {\n    //     Solution sol;\n    //     sol.solve();\n    // }\n\n    Solution sol;\n    sol.solve();\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Optum_9oct",
        "company_id": 600
    }
]