[
    {
        "id": 187,
        "title": "Find Bottom Left Tree Value",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Find Bottom Left Tree Value</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Imagine you are looking at a family tree where each generation is represented by a row. Your task is to find the first person on the far left in the youngest generation (bottom-most row) of the family tree.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <div class=\\\"tree-diagram\\\">\n                <!-- ASCII representation of the tree -->\n                <pre>\n    2\n   / \\\\\n  1   3\n                </pre>\n            </div>\n            <div class=\\\"example-details\\\">\n                <pre class=\\\"input\\\">Input: root = [2,1,3]</pre>\n                <pre class=\\\"output\\\">Output: 1</pre>\n                <div class=\\\"explanation\\\">\n                    <p>Explanation: The first person on the far left in the youngest generation 1</p>\n                </div>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <div class=\\\"tree-diagram\\\">\n                <!-- ASCII representation of the tree -->\n                <pre>\n       1\n      / \\\\\n     2   3\n    /   / \\\\\n   4   5   6\n      /\n     7\n                </pre>\n            </div>\n            <div class=\\\"example-details\\\">\n                <pre class=\\\"input\\\">Input: root = [1,2,3,4,null,5,6,null,null,7]</pre>\n                <pre class=\\\"output\\\">Output: 7</pre>\n                <div class=\\\"explanation\\\">\n                    <p>Explanation: The first person on the far left in the youngest generation 7</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints:</h3>\n        <ul>\n            <li>Time Complexity: O(N)</li>\n            <li>Space Complexity: O(1)</li>\n        </ul>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template:</h3>\n        <pre class=\\\"cpp-code\\\">\n#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\n#include &lt;string.h&gt;\n\nusing namespace std;\n\nclass Node {\npublic:\n    int value;\n    Node *left;\n    Node *right;\n};\n\nint findBottomLeftValue(Node *root) {\n    // write your code here\n    return -1;\n}\n        </pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1UagFIG8L2l_jMgwp_WIeV28aysraBXBzKna56DRHAX0/edit?usp=sharing",
        "solution_code": "int findBottomLeftValue(Node *root)\\n{\\n    if (!root)\\n        return -1;\\n    queue<Node*> q;\\n    q.push(root);\\n    int leftmost = root->value;\\n    while (!q.empty())\\n    {\\n        int size = q.size();\\n        for (int i = 0; i < size; ++i)\\n        {\\n            Node* node = q.front(); q.pop();\\n            if (i == 0)\\n                leftmost = node->value;\\n            if (node->left)\\n                q.push(node->left);\\n            if (node->right)\\n                q.push(node->right);\\n        }\\n    }\\n    return leftmost;\\n}",
        "company_name": "Josh Technology",
        "company_id": 44
    },
    {
        "id": 188,
        "title": "Stabilize the Skyline",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2> Stabilize the Skyline</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Welcome to the city of Numoria, where every building\\'s height is recorded in the array nums. Your mission is to stabilize the skyline! In one move, you must demolish any tower that is shorter than the one before it. Specifically, for every tower at position i (where 0 < i < nums.length), if the previous tower nums[i - 1] is taller than nums[i], that tower must be brought down.</p>\n        <p>Given an array nums, return the number of steps performed to make the skyline stable.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input: nums = [5,3,4,4,7,3,6,11,8,5,11]\nOutput: 3</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation: The following are the steps performed:</p>\n                <ul>\n                    <li>Step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11]</li>\n                    <li>Step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11]</li>\n                    <li>Step 3: [5,4,7,11,11] becomes [5,7,11,11]</li>\n                    <li>[5,7,11,11] is a non-decreasing array. Therefore, we return 3.</li>\n                </ul>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input: nums = [10,1,2,9,1,2,3,4]\nOutput: 4</pre>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints:</h3>\n        <ul>\n            <li>1 ≤ nums[i] ≤ 10<sup>9</sup></li>\n            <li>No library functions should be used, except for basic ones like min, max, etc.</li>\n            <li>Pass-by reference and global variables are not allowed</li>\n            <li>Time Complexity: O(N)</li>\n            <li>Space Complexity: O(N)</li>\n        </ul>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template:</h3>\n        <pre class=\\\"cpp-code\\\">\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\n\nvoid takeInput(vector&lt;int&gt;& arr) {\n    int n;\n    cin >> n;\n    arr.resize(n);\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n}\n\nint totalSteps(vector&lt;int&gt;& arr) {\n    // Write your code here\n    return -1;\n}\n\nint main() {\n    vector&lt;int&gt; arr;\n    takeInput(arr);\n    cout << totalSteps(arr);\n    return 0;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1rgj1VVbGkw0_Zh6kadke4uAVduOnKz_UJpIKgK2jtBw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Josh Technology",
        "company_id": 44
    }
]