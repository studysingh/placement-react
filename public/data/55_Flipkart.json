[
    {
        "id": 217,
        "title": "Queue Balancing Challenge",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Queue Balancing Challenge</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given a string representing a queue of players from a team, which can contain the characters \\'A\\', \\'B\\', and \\'C\\', where \\'B\\' occurs only once as the common player, both teams are rivalrous, and players of these teams do not want to stand adjacent. Therefore, \\'B\\' acts as a middle person who partitions the queue.</p>\n        \n        <p>Your task is to determine the minimum number of moves required to form a new queue that is balanced, such that all \\'A\\' characters are on one side and all \\'C\\' characters are on the other side with \\'B\\' in the middle.</p>\n        \n        <p>A move is defined as either:</p>\n        <ul>\n            <li>A player entering to the end of the new queue from the front of old queue, or</li>\n            <li>A player chooses to go back to the end of the old queue and wait for the next turn.</li>\n        </ul>\n\n        <div class=\\\"important-note\\\">\n            <p><strong>Note:</strong> If they are already balanced, they still need to form a new queue. So, moves cannot be zero. Unbalanced input string will have at least one occurrence of \\'A\\', \\'B\\', and \\'C\\'. \\'B\\' only occurs once.</p>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of input is \\'N\\' which represents the length of unbalanced string \\'S\\'.</p>\n        <p>The second line of input is the unbalanced string \\'S\\'.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer: the minimum moves required to achieve a new balanced queue.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Test Case</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\nACB</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>oldQueue = \\\"ACB\\\"</p>\n                <ol>\n                    <li>Move 1: newQueue = \\\"A\\\", oldQueue = \\\"CB\\\"</li>\n                    <li>Move 2: newQueue = \\\"A\\\", oldQueue = \\\"BC\\\"</li>\n                    <li>Move 3: newQueue = \\\"AB\\\", oldQueue = \\\"C\\\"</li>\n                    <li>Move 4: newQueue = \\\"ABC\\\", oldQueue = \\\"\\\"</li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1O1NJcND1YeYdpw5-KoATmCDTWRlMs7MWSQKs5s4vLVM/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Flipkart",
        "company_id": 55
    },
    {
        "id": 218,
        "title": "Binary Treasure Hunt",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Binary Treasure Hunt</h2>\n        <span class=\\\"problem-id\\\">TeamId: 25849727</span>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are developing a game where players must find the hidden binary treasures within a grid of size N x N. The grid is composed of characters \\'0\\' and \\'1\\', which can be combined to form binary numbers. Players need to search for these binary numbers within the grid based on a given list. The numbers can be formed by connecting adjacent cells either horizontally or vertically, and each cell can be used only once per number.</p>\n    </div>\n\n    <div class=\\\"problem-tasks\\\">\n        <p>Given a list of decimal numbers and a grid containing \\'0\\'s and \\'1\\'s:</p>\n        <ol>\n            <li>Convert each decimal number to its binary representation.</li>\n            <li>Check if each binary number can be found in the grid by connecting adjacent cells horizontally or vertically. Each cell can be used only once per number.</li>\n            <li>Output a sequence of \\'1\\'s and \\'0\\'s, where each integer indicates whether the corresponding binary number from the list is present in the grid (\\'1\\' means the number is found, \\'0\\' means it is not).</li>\n        </ol>\n    </div>\n\n    <div class=\\\"special-cases\\\">\n        <h3>Special Cases</h3>\n        <ul>\n            <li>If the grid contains any characters other than \\'0\\' or \\'1\\', or if the grid size is 1×1, return a single element: -1.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains a single integer N, representing the size of the grid (N x N).</li>\n            <li>The next N lines contain N space-separated characters each, representing the grid content row by row. The characters can be either \\'0\\' or \\'1\\'.</li>\n            <li>The next line contains a single integer M, representing the number of decimal numbers.</li>\n            <li>The next M lines contain one decimal number each which the player wants to find in the grid.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print M lines, each containing either \\'1\\' or \\'0\\'. Each line corresponds to whether the respective binary number from the list is found in the grid (\\'1\\' for found, \\'0\\' for not found).</p>\n        <p>If the grid contains characters other than \\'0\\' or \\'1\\', or if the grid size is 1×1, print a single line with the integer: -1.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Test Cases</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Test Case #0</h4>\n            <pre class=\\\"input\\\">Input:\n3\n0 1 0\n1 0 1\n0 1 0\n1\n3</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>Numbers: [3]</p>\n                <p>3 in binary: 11</p>\n                <p>Searching for 11 in the grid: 11 is not present in the grid when searching horizontally and vertically from any location where \\'1\\' is present hence output zero.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Test Case #1</h4>\n            <pre class=\\\"input\\\">Input:\n4\n0 1 0 1\n1 0 1 0\n0 1 0 1\n1 0 1 0\n2\n5\n10</pre>\n            <pre class=\\\"output\\\">Output:\n1\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Numbers: [5, 10]</p>\n                <p>5 in binary: 101</p>\n                <p>10 in binary: 1010</p>\n                <p>Searching for 101 in the grid: Found starting from (0, 1) to (0, 3)</p>\n                <p>Searching for 1010 in the grid: Found starting from (0, 1) to (1, 1) to (2, 1) to (3, 1)</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1OurR0XH1bBI1Jb-EbHWZqy603X6yEJ1zc4V51ISsna0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Flipkart",
        "company_id": 55
    },
    {
        "id": 219,
        "title": "Minimum Operations to Empty Array",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Minimum Operations to Empty Array</h2>\n        <div class=\\\"problem-metadata\\\">\n            <span class=\\\"team-id\\\">TeamId: 25849727</span>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given an array, A[] which consists of N integers.</p>\n        \n        <p>You can apply the following operation to it. For each operation select an integer X and perform exactly one of two actions after sorting the array in ascending order:</p>\n\n        <ul>\n            <li>Choose one index i (1≤i≤n) such that that |A[i]-X|≤1 and remove A[i] from the array.</li>\n            <li>Choose two indices i and j (1≤i,j≤n,i≠j) such that |A[i]-X|≤1 and |A[j]-X|≤1 and remove A[i] and A[j] from the array.</li>\n        </ul>\n\n        <p>Find the minimum number of operations required to perform to make the array empty.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of the input contains one integer N representing the size of the array.</p>\n        <p>The second line contains N space-separated integers representing elements of the array.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Display the minimum number of operations required to perform to make the array empty.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Testcase #0</h3>\n        <!-- Sample test cases would go here when provided -->\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1AzkHl-6B1lN70ISlkVFaYaCy9kjgjN-IouwEWunaLn4/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Flipkart",
        "company_id": 55
    },
    {
        "id": 230,
        "title": "Warehouse Robot Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Warehouse Robot Optimization</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>An e-commerce company\\'s warehouse is represented in the form of an N × M grid in the company\\'s system. Each cell in the grid represents the storage units where goods are kept. The value of each cell in the system represents the total count of goods present in that cell.</p>\n        \n        <p>Robot 1 is positioned at the top-left of the grid and robot 2 is positioned at the top right. If either robot are in position (a,b) in the grid then they can move either to:</p>\n        <ul>\n            <li>(a+1,b)</li>\n            <li>(a+1,b-1)</li>\n            <li>(a+1,b+1)</li>\n        </ul>\n        \n        <p>If both the robots are in the same cell then only one of the robots will pick the goods. Once the goods in a cell have been picked up by the robot then the value of that cell becomes zero in the system.</p>\n        \n        <p>Write an algorithm for the system to find the maximum number of goods that can be picked by both the robots.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of input consists of two space-separated integers - <code>numRows</code> and <code>numCols</code>, representing the total number of rows (N) and columns (M).</p>\n        <p>The next N lines consist of M space-separated integers representing the total count of goods.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the maximum number of goods that can be picked by both robots.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ numRows, numCols ≤ 50</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3 4\n3 2 2 1\n6 2 3 4\n4 7 6 8</pre>\n            \n            <pre class=\\\"output\\\">Output:\n29</pre>\n            \n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>Robot 1 is at position (0,0) and robot 2 is at position (0,3)</li>\n                    <li>Robot 1 will collect from cells (0,0) → (1,0) → (2,1). Total goods collected by it = 3+6+7 = 16</li>\n                    <li>Robot 2 will collect from cells (0,3) → (1,3) → (2,3). Total goods collected by it = 1+4+8 = 13</li>\n                    <li>Total goods collected = 16+13 = 29</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1oze113Y_MZMC5kxV4KQ2nowvcq4Nv4J85_tVE_PHi6g/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\nconst int MAX = 50;\\n\\nll gv[MAX][MAX];\\nll mt[MAX][MAX][MAX];\\nint n, m;\\n\\nbool init = false;\\n\\nll dp(int r, int c1, int c2) {\\n    if (c1 < 0 ⠺⠟⠟⠺⠵⠵⠺⠺⠞ c2 < 0 || c2 >= m)\\n        return -1e9;\\n    if (r == n)\\n        return 0;\\n    if (mt[r][c1][c2] != -1)\\n        return mt[r][c1][c2];\\n    \\n    ll res = 0;\\n    if (c1 == c2)\\n        res += gv[r][c1];\\n    else\\n        res += gv[r][c1] + gv[r][c2];\\n    \\n    ll maxS = -1e9;\\n    for(int i = -1; i <= 1; i++) {\\n        for(int j = -1; j <= 1; j++) {\\n            int nc1 = c1 + i;\\n            int nc2 = c2 + j;\\n            ll t = dp(r + 1, nc1, nc2);\\n            if(t != -1e9){\\n                maxS = max(maxS, res + t);\\n            }\\n        }\\n    }\\n    if(maxS == -1e9){\\n        maxS = res;\\n    }\\n    mt[r][c1][c2] = maxS;\\n    return maxS;\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    cin >> n >> m;\\n    for(int i = 0; i < n; i++){\\n        for(int j = 0; j < m; j++){\\n            cin >> gv[i][j];\\n        }\\n    }\\n    for(int i = 0; i < n; i++){\\n        for(int j = 0; j < m; j++){\\n            for(int k = 0; k < m; k++){\\n                mt[i][j][k] = -1;\\n            }\\n        }\\n    }\\n    ll ans = dp(0, 0, m-1);\\n    cout << ans;\\n}",
        "company_name": "Flipkart",
        "company_id": 55
    },
    {
        "id": 231,
        "title": "Advertisement Arrangement Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>Advertisement Arrangement Optimization</h2>\n        <p>A media company has been provided with pairs of advertisements that are to be played one after the other. These advertisements are denoted by uppercase letters from the English alphabet. To maximise the revenue, the media company is in need of software that will provide an insight into which arrangement should be selected so that every advertisement is played at least one time.</p>\n        <p>The software will take advertisement pairs as an N × M grid in which every row will denote the pair of advertisements that need to be played one after another, and will return the arrangement in which every advertisement will be played at least one time. As per the prior analysis, the media company found out that if the arrangement starts from \\\"ABC\\\" advertisement then maximum revenue is generated. If more than one way is possible, then the software will give the smallest lexicographical arrangement.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line consists of two space-separated integers - <code>grid_row</code> &amp; <code>grid_col</code>, representing the number of rows (N) and number of columns (M) respectively.</p>\n        <p>The next N lines consist of M space-separated strings, representing the advertisement pairs that should be played one after the other.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print K space-separated strings representing the arrangement so that maximum revenue can be generated such that every advertisement is played at least once. If more than one arrangement is possible then give the smallest lexicographical arrangement.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>grid_col</code> is always equal to 2.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 2\nXYZ IOP\nQWE XYZ\nABC TUV\nTUV QWE</pre>\n            <pre class=\\\"output\\\">Output:\nABC TUV QWE XYZ IOP</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The arrangement in which every advertisement is played at least one time is:</p>\n                <ul>\n                    <li>ABC —→ TUV</li>\n                    <li>TUV —→ QWE</li>\n                    <li>QWE —→ XYZ</li>\n                    <li>XYZ —→ IOP</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"starter-code\\\">\n        <h3>Starter Code</h3>\n        <pre class=\\\"code-block cpp\\\">\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    // Write your code here\n    return 0;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1zuRWuGRjWcEZ_OA1Ugbwe4AUZiuWJbLunX5sfGlbnVI/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Flipkart",
        "company_id": 55
    },
    {
        "id": 232,
        "title": "Maximum Entrance Code Generato",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <div class=\\\"language-info\\\">\n            <span class=\\\"language\\\">C++20</span>\n            <span class=\\\"compiler\\\">GCC 5.5.0</span>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>In a university every student is given a student ID and university enrolment number. These both contain digits (0-9). The student ID contains M digits, and the university enrolment number contains N digits. Every subject is given a unique subject code. While developing a student examination hall entrance system, the system must take the student ID, the university enrolment number, and the subject code P for which the student is taking an examination. The system must generate the entrance code for the student from the digits of the student ID and the university enrolment number. The generated entrance code must be the largest number of length P made up of digits from the student ID and the university enrolment number. The relative order of the digits from the student ID and the university enrolment number must be preserved.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer - <code>idDigitList_size</code>, representing the number of digits in the student ID (M).</li>\n            <li>The next line consists of M space-separated integers - <code>idDigitList[0], idDigitList[1],..., idDigitList[M-1]</code>, representing the digits in the order in which they are present in the student ID.</li>\n            <li>The next line contains an integer - <code>enRollDigitList_size</code>, representing the number of digits in the university enrolment number (N).</li>\n            <li>The next line consists of N space-separated integers - <code>enRollDigitList[0], enRollDigitList[1],..., enRollDigitList[N-1]</code>, representing the digits in the order in which they are present in the university enrolment number.</li>\n            <li>The next line contains an integer - <code>subCode</code>, representing the subject code P for which the student is taking an examination.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print P space-separated integers representing the digits of the largest number formed from the student ID and the university enrolment number in the order present.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 &lt; <code>idDigitList_size</code>, <code>enRollDigitList_size</code> ≤ 100</li>\n            <li>0 ≤ <code>idDigitList[0]</code>, <code>idDigitList[1]</code>,..., <code>idDigitList[M-1]</code> ≤ 9</li>\n            <li>0 ≤ <code>enRollDigitList[0]</code>, <code>enRollDigitList[1]</code>,..., <code>enRollDigitList[N-1]</code> ≤ 9</li>\n            <li>0 &lt; <code>subCode</code> ≤ <code>idDigitList_size</code> + <code>enRollDigitList_size</code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n2 6 5\n4\n1 5 8 2\n4</pre>\n            <pre class=\\\"output\\\">Output:\n8 6 5 2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>The generated entrance code must be of length 4.</li>\n                    <li>First one digit, 8, is taken from the university enrolment number.</li>\n                    <li>Then two digits, 6 and 5, are taken from the student ID.</li>\n                    <li>Then a digit, 2, is taken from the university enrolment number.</li>\n                    <li>The generated entrance code will be: 8652</li>\n                    <li>The digits of the generated entrance code in order are: [8,6,5,2].</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1S2CgQqUmY6kK_gmmXHDLLFd-Er2u2VUqhqvCdytmGLM/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Flipkart",
        "company_id": 55
    }
]