[
    {
        "id": 829,
        "title": "[ReactJS] Course CMS",
        "problem_statement": "<h1>[ReactJS] Course CMS</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have to complete and fix the existing code in the CMS (Course Management System) application.</p>\r\n<p>The problem with the existing code is that it lacks the necessary logic to manage the state of the courses and add new courses. Additionally, the components are not integrated correctly into the CMS component.</p>\r\n\r\n<h3>Technical specifications</h3>\r\n<ul>\r\n    <li>Tech stack\r\n        <ul>\r\n            <li>Frontend: ReactJS</li>\r\n        </ul>\r\n    </li>\r\n    <li>Ports\r\n        <ul>\r\n            <li>Frontend: 5000</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Tasks</h2>\r\n<p>To fix the code, you need to implement the following changes and additions:</p>\r\n<ol>\r\n    <li>In the CMS component:\r\n        <ul>\r\n            <li>Implement the logic to manage the state of the courses using the <strong>'useState'</strong> hook. Initialize the <strong>'courses'</strong> state as an empty array.</li>\r\n            <li>Implement the <strong>'handleAddCourse'</strong> function that takes a course as a parameter and adds it to the list of courses. Update the state accordingly.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Integrate the <strong>'CourseList'</strong> component correctly in the <strong>'CMS'</strong> component. Render it in the div with the class <strong>'col-md-6'</strong> and pass the <strong>'courses'</strong> state as a prop.</li>\r\n    <li>Integrate the <strong>'CourseForm'</strong> component correctly in the <strong>'CMS'</strong> component. Render it in the div with the class <strong>'col-md-6'</strong> and pass the <strong>'handleAddCourse'</strong> function as a prop.</li>\r\n    <li>In the CourseForm component:\r\n        <ul>\r\n            <li>Implement the <strong>'handleSubmit'</strong> function that handles the form submission. It should prevent the default form submission behavior, create a new course object using the <strong>'title'</strong> and <strong>'description'</strong> state values, and call the <strong>'onAddCourse'</strong> function (passed as a prop) to add the course.</li>\r\n            <li>Update the <strong>'title'</strong> and <strong>'description'</strong> state values based on the input values using the <strong>'useState'</strong> hook.</li>\r\n        </ul>\r\n    </li>\r\n    <li>In the CourseList component:\r\n        <ul>\r\n            <li>Map over the <strong>'courses'</strong> prop and render each course as a list item with its title and description.</li>\r\n        </ul>\r\n    </li>\r\n</ol>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Atlan_21march",
        "company_id": 254
    },
    {
        "id": 830,
        "title": "React with TypeScript Student State Management",
        "problem_statement": "<h1>React with TypeScript Student State Management</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Develop a React TypeScript component that allows users to manage student information.</p>\r\n\r\n<h3>Technical specifications</h3>\r\n<ul>\r\n    <li><strong>Tech stack:</strong>\r\n        <ul>\r\n            <li>Front end: React with TypeScript</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Ports:</strong>\r\n        <ul>\r\n            <li>Front end: 5000</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Tasks</h3>\r\n<ol>\r\n    <li>Allow users to add student details in the form and submit.</li>\r\n    <li>Allow users to edit student details.</li>\r\n    <li>Allow users to delete student details.</li>\r\n</ol>\r\n\r\n<h2>Testing instructions</h2>\r\n<ol>\r\n    <li>The project is hosted on <code>https://he-ide.hackerearth.com/&lt;generated-hash&gt;/</code>. To see the real-time project progress and test the application's functionality, click the Preview button.</li>\r\n    <li>To run any additional commands, use the Terminal. For example, navigate to the <code>/frontend</code> directory in the Terminal and use the command: <pre><code class='language-text'>npm run test</code></pre></li>\r\n    <li>Upon clicking the Run code or Submit code buttons, access the Build log or Execution log to review comprehensive details about the test outcomes.</li>\r\n</ol>\r\n\r\n<h2>Submission instructions</h2>\r\n<ol>\r\n    <li>Clicking Run code compiles and runs your code against sample tests, but it will not generate scores.</li>\r\n    <li>Clicking Submit code runs your code against multiple test cases, assessing different scenarios holistically, and the score will be assigned accordingly.</li>\r\n</ol>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Atlan_21march",
        "company_id": 254
    }
]