[
    {
        "id": 1924,
        "title": "Hydrate the nodes",
        "problem_statement": "<h1>Hydrate the nodes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a tree with n nodes. The tree is rooted at node with number 0. As usually in computer science, the tree grows upside down comparing to trees existing in nature. Apples grow on nodes of this tree. Some of these apples are underhydrated, some are overhydrated, and others are neither. You know that for each overhydrated apple you'll get <code>overhydratedPenalty</code> cents and for every underhydrated you'll get <code>underhydratedPenalty</code> cents.</p>\r\n<p>Now, you want to pour water on exactly one node of the tree. When you pour water on node <code>v</code>, all apples that are in <code>v</code>'s subtree, i.e. <code>v</code> itself and all descendants of <code>v</code>, will be hydrated and in consequence, each hydrated apple that was almost overhydrated becomes overhydrated. Moreover, every apple in the whole tree that was almost underhydrated and no water was poured on it gets underhydrated.</p>\r\n<p>Calculate the minimum total penalty you can get from pouring water on exactly one node of the tree.</p>\r\n\r\n<p>Complete the function <code>minimumPouringWaterPenalty</code> the editor below. <code>minimumPouringWaterPenalty</code> has the following parameter(s):</p>\r\n<ol>\r\n    <li>An integer array, <code>parent</code>, of size <code>n</code>, where <code>parent[i]</code> denotes the parent of the <code>i</code>th node.</li>\r\n    <li>An integer array, <code>waterLevel</code>, of size <code>n</code>, where <code>waterLevel[i]</code> denotes the level of the water in the apple on node <code>i</code>. It's either <code>-1</code>, <code>0</code> or <code>1</code> where <code>-1</code> stands for almost underhydrated, <code>0</code> stands for neither almost underhydrated nor almost overhydrated and <code>1</code> stands for almost overhydrated.</li>\r\n    <li>An integer, <code>overhydratedPenalty</code>, denoting the penalty for each overhydrated apple.</li>\r\n    <li>An integer, <code>underhydratedPenalty</code>, denoting the penalty for each underhydrated apple.</li>\r\n</ol>\r\n<p>The function must return the minimum penalty that you can get by pouring water on exactly one node of the tree.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>parent[0] = -1</code></li>\r\n    <li><code>0 <= parent[i] < i</code> for <code>i > 0</code></li>\r\n    <li><code>waterLevel[i]</code> is either <code>-1</code>, <code>0</code> or <code>1</code></li>\r\n    <li><code>1 <= overhydratedPenalty, underhydratedPenalty <= 10^3</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Arcesium_17oct",
        "company_id": 678
    },
    {
        "id": 1925,
        "title": "Positive Product",
        "problem_statement": "<h1>Positive Product</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a sequence of `n` integers and you have to find the maximum length of a segment which gives positive product.</p>\r\n<p>Complete the `maxLength` function in your editor. It has 1 parameters:</p>\r\n<ol>\r\n    <li>An array, `arr`, containing `n` elements of the sequence.</li>\r\n</ol>\r\n<p>It must return an integer denoting the maximum length of a segment which gives positive product.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The locked stub code in your editor reads the following input from stdin and passes it to your function:</p>\r\n<p>First line contains number of integers `n` in the sequence.</p>\r\n<p>Followed by `n` lines each contains an element.</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>Your function must return an integer denoting the maximum length of a segment which gives positive product. This is printed to stdout by the locked stub code in your editor.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n1\r\n-2\r\n-3\r\n4\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> The segment `[1, -2, -3, 4]` has a product of `1 * -2 * -3 * 4 = 24`, which is positive. Its length is 4. No other segment has a greater length with a positive product.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= n <= 1000`</li>\r\n    <li>Absolute value of each number is greater than 0 and less than or equal to 1000.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Arcesium_17oct",
        "company_id": 678
    }
]