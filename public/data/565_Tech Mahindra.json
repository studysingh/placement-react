[
    {
        "id": 1613,
        "title": "Cancellation Notification",
        "problem_statement": "<h1>Cancellation Notification</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>James was going to throw a party, but he had to cancel because he has to attend an important meeting. He had invited N neighbors whose houses are in a straight line adjacent to his house. Some of his neighbors are cooperative while others are not. If a cooperative neighbor comes to know about the cancellation either directly or through any of the other cooperative neighbors then that neighbor can inform four additional neighbors at most: the two neighbors that live to his adjacent left and the two that live to his adjacent right. Conversely, if a non-cooperative neighbor learns about the cancellation, he will not communicate the message to anyone.</p>\r\n\r\n<p>Due to time restrictions, James can make only one call to inform only one neighbor about the party cancellation. However, he wants to maximize the number of neighbors who will be informed about the cancellation. For his own assurance, he decides to keep a record of who has been informed and who has not. If a neighbor has been informed, James marks him as \"I.\" If not, James marks him as \"U.\"</p>\r\n\r\n<p>Write an algorithm to help James create a record representing the state of affairs concerning which neighbors have been informed and which have not. If more than one record is possible in which the maximum number of neighbors are being informed then output whichever is the lexicographically smallest among them.</p>\r\n\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li>The first line of the input consists of an integer <code>N</code>, representing the number of neighbours.</li>\r\n    <li>The second line consists of a string of length <code>N</code>, made up of only 'n' and 'c', representing non-cooperative and cooperative nature of the neighbours, respectively.</li>\r\n</ul>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>Print a string representing the state of all the <code>N</code> neighbours being informed (I) or uninformed (U). If more than one such string is possible then print the lexicographically smallest among them. The output string consists of alphabets 'I' and 'U' only. There should be no space.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 8\r\nnncncnnn\r\nOutput: IIIIIIUU</code></pre>\r\n<p><strong>Explanation:</strong> James can call any of his neighbours. James makes a call to neighbour-3 (0-indexed: index 2, which is 'c'). Neighbour-3 informs two neighbours living to his left (neighbour-1 and neighbour-2) and two neighbours living to his right (neighbour-4 and neighbour-5). Neighbour-4 being non-cooperative won't spread the information but neighbour-5 will spread the information to neighbour-6 and neighbour-7. Neighbour-8 still remains uninformed. So, the output will be IIIIIIUU.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tech Mahindra",
        "company_id": 565
    },
    {
        "id": 1614,
        "title": "Delivery Person Rest Time",
        "problem_statement": "<h1>Delivery Person Rest Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A delivery person works for an intercity delivery company whose headquarters are in city 1. For each delivery, the delivery person has to go to another city and then return to city 1. After each delivery, the delivery person likes to maximize their rest time so that they can get ready for the next delivery. Therefore, the delivery person tries to locate the minimum distance between city 1 and the city where the delivery needs to be made. There are N cities, numbered 1 to N, connected by M bidirectional roads such that every city is connected to city 1 either directly or via another city. The delivery person is given a list of M combinations of two cities [A, B] and the time C needed to reach city A from city B.</p>\r\n<p>To deliver Q deliveries in the order in which they have been assigned, the delivery person is given the name of the city X, and the time allowed for the delivery (K) to be completed and the driver then returns to the headquarters. If the delivery person can find the shortest route from city 1 and thus save time, then they can take a good amount of time to get ready for the next delivery. If K units of time are not sufficient to visit city X and return, then the delivery person will not be able to deliver the package in that city and the rest time will also be zero.</p>\r\n<p>Write an algorithm to compute the maximum rest time in each trip if there are Q deliveries in a day.</p>\r\n\r\n<p><strong>Input:</strong></p>\r\n<p>The first line of the input consists of two space-separated integers - <code>totalCities</code>, <code>totalBidirectionalRoads</code>, representing the number of cities (N) and the total number of bidirectional roads (M), respectively.</p>\r\n<p>The next M lines consist of three space-separated integers - <code>cityA</code>, <code>cityB</code>, <code>TimeC</code>, representing a bidirectional road between city A and B with travel time C.</p>\r\n<p>The next line consists of an integer - <code>totalDelivery</code>, representing the total number of deliveries in a day (Q).</p>\r\n<p>The next Q lines consist of two space-separated integers - <code>cityX</code>, <code>deliveryTimeK</code> representing the city (X), and the time limit (K) in which the delivery person has to deliver the item in the city, respectively.</p>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>Print Q space-separated integers representing the rest time after each delivery.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 4\r\n1 2 5\r\n2 3 10\r\n3 4 20\r\n1 4 1\r\n2\r\n2 65\r\n3 15\r\nOutput:\r\n55 0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For first delivery: The delivery person has to deliver the item to city 2 and return to city 1 in 65 minutes. The possible paths are the followings:</p>\r\n<p>Path1: 1->2, takes 10 minutes<br>Path2: 1->4->3->2, takes 62 minutes.</p>\r\n<p>So, the delivery person chooses the path 1->2 with a maximum rest time of 55(65 - 10) minutes.</p>\r\n<p>For second delivery: The delivery person has to deliver the item to city 3 and return back to city '1' in 15 minutes. It is not possible to deliver the item and come back to city '1' in 15 minutes. As the delivery person can't deliver the item, so the rest time is 0 minutes</p>\r\n<p>So, the output is [55, 0].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= totalCities, totalDelivery <= 10^4</code></li>\r\n<li><code>1 <= totalBidirectionalRoads <= 10^5</code></li>\r\n<li><code>1 <= cityA, cityB, cityX <= totalCities</code></li>\r\n<li><code>1 <= deliveryTimeK <= 10^4</code></li>\r\n<li><code>1 <= TimeC <= 1000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tech Mahindra",
        "company_id": 565
    }
]