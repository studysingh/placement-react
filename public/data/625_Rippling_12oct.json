[
    {
        "id": 1773,
        "title": "Relay Race Team Formation",
        "problem_statement": "<h1>Relay Race Team Formation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>HackerLand Sports Club wants to send a team for a relay race. There are n racers indexed from 0 to n-1, each with a speed of <code>speed[i]</code> units. For a successful baton transfer, two adjacent racers must have the same speed to ensure smooth baton transfer. To maximize the team size, the coach may remove at most k racers from the group.</p>\r\n<p>Given the array of racer speeds <code>speed[]</code> and an integer k, find the maximum possible number of racers in a contiguous segment with the same speed after removing at most k racers.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMaxRacers</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int speed[]</code>: the speeds of the racers</li>\r\n    <li><code>int k</code>: the maximum number of racers that can be removed</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum number of racers that can be sent after removing at most k racers</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nspeed = [1, 4, 4, 2, 4]\r\nk = 2\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The optimal strategy is to remove the two racers with speed 2, resulting in [1, 4, 4, 4]. Now there are 3 contiguous racers with speed 4, which is the maximum possible. Therefore, the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nspeed = [1, 2, 1, 2, 1]\r\nk = 1\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> To delete the second racer to get [1, 1, 2, 1]. The first two racers can be sent as they have the same speed. Or delete the third racer to get [1, 2, 2, 1]. The second and third racers can be sent. We can delete at most k=1 racer. The maximum number of racers that can be sent is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 3 * 10^5</code></li>\r\n    <li><code>1 <= k <= n</code></li>\r\n    <li><code>1 <= speed[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <map>\n\nclass Solution {\npublic:\n    int getMaxRacers(const std::vector<int>& speed, int k) {\n        // Core logic goes here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    int k;\n    \n    // Assuming the first line of input contains n and k,\n    // followed by n integers for the speeds.\n    // This is a common competitive programming input format,\n    // although not explicitly stated in the problem.\n    // Example 1 input would be:\n    // 5 2\n    // 1 4 4 2 4\n    \n    std::cin >> n >> k;\n    \n    std::vector<int> speed(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> speed[i];\n    }\n\n    Solution sol;\n    int result = sol.getMaxRacers(speed, k);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Rippling_12oct",
        "company_id": 625
    }
]