[
    {
        "id": 9,
        "title": "The Dynasty Of Capybara",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">The Dynasty Of Capybara</h2>\n\n<div class=\"problem-description\">\n        <p>Cheems &amp; Doge, are two brilliant twin rulers of the capybara dynasty. One day, while cooking, they decided to analyze some information about their salaried employees.</p>\n\n<p>The salaried class in their dynasty is divided into multiple levels based on the pay grade. They already know the list of possible levels and the starting and ending salary for each level. An employee fits a level if their salary lies in the start and end limit (both inclusive) of that level. An employee can lie in multiple salary levels too.</p>\n\n<p>Given an integer k, the number of levels, and Ai and Bi being the minimum and maximum salary of level i, also given integer n, the number of employees, and Si being the salary of the i-th employee.</p>\n\n<p>Help find them the level with the highest number of employees. If there are multiple such levels, report the level with the minimum index.</p>\n\n<p>In case no employee belongs to any of the given salary bands, answer is always 1.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>First line contains k, n.</li>\n            <li>Next k lines contain 2 integers each Ai and Bi. Also Ai+1&gt;=Ai &amp; Bi+1&gt;=Bi.</li>\n            <li>Last n lines contains 1 integer each Si, the salary of i<sub>th</sub> employee.</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1&lt;=k&lt;=10<sup>5</sup></li>\n            <li>1&lt;=n&lt;=10<sup>5</sup></li>\n            <li>1&lt;=Ai&lt;=Bi&lt;=10<sup>6</sup></li>\n            <li>1&lt;=Si&lt;=10<sup>6</sup></li>\n        </ul>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>X where (1&lt;=x&lt;=k), the index of level which satisfies above criteria. (starting from one)</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Sample Input 1</h3>\n        <pre class=\"input\">3 5\n1 10\n5 12\n9 12\n2\n6\n10\n11\n12</pre>\n\n<h3>Sample Output 1</h3>\n        <pre class=\"output\">2</pre>\n\n<div class=\"explanation\">\n            <h3>Explanation</h3>\n            <p>Level 2 with a salary band of (5,12) has 4 employees belonging to it which are 6,10,11 &amp; 12.</p>\n        </div>\n    </div>\n\n<div class=\"metadata\">\n        <p>Execution time limit: 10 seconds</p>\n    </div>\n</div>",
        "google_doc_link": "https://github.com/cphelper/OAbycphelper/tree/main/phonepe/The%20Dynasty%20Of%20Capybara",
        "solution_code": null,
        "company_name": "PhonePe",
        "company_id": 4
    },
    {
        "id": 10,
        "title": "BloxMaxxing",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">BloxMaxxing</h2>\n\n<div class=\"problem-description\">\n        <p>Welcome, block enthusiasts, to BloxMaxxing, the ultimate stacking extravaganza! Here, you'll test your strategic skills by stacking the maximum number of blocks on top of each other. But these aren't your average blocks!</p>\n\n<h3>The Blocks:</h3>\n        <ul>\n            <li>There are a variety of blocks available (<var>n</var> in total), each with a base height value (<var>c<sub>i</sub></var> for the i-th block), the area of all the blocks are the same.</li>\n            <li>Each block has a unique \"Stability Enhancer\" (fancy name for a special ability). When activated, it reduces the block's height by <var>d<sub>i</sub></var> (for the i-th block), allowing you to potentially stack higher!</li>\n        </ul>\n\n<h3>The Challenge:</h3>\n        <ul>\n            <li>You can only use each block once.</li>\n            <li>To activate a block's Stability Enhancer, you must meet a specific condition. For some blocks (i >= 2), you need to have already used the <var>x<sub>i</sub></var>-th block's Enhancer. This might require activating even more Enhancers based on the dependency chain.</li>\n        </ul>\n\n<h3>The Goal:</h3>\n        <p>Stack the maximum number of blocks on top of each other within the designated building height limit <var>H</var>. Each activated Enhancer effectively reduces the block's height, allowing you to potentially squeeze in more blocks!</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>The first line of the input format contains two integers N and H:</p>\n        <ul>\n            <li><strong>N</strong> (1 ≤ N ≤ 5000): This represents the total number of blocks available in the game (like the number of goods in the store).</li>\n            <li><strong>H</strong> (1 ≤ H ≤ 10<sup>9</sup>): This is the crucial building height limit. It represents the maximum height your tower can reach in the game.</li>\n        </ul>\n\n<p>The next N lines describe each block:</p>\n        <ul>\n            <li><strong>The first two integers (<var>c<sub>i</sub></var> and <var>d<sub>i</sub></var>):</strong>\n                <ul>\n                    <li><var>c<sub>i</sub></var>: This represents the base height of the i-th block</li>\n                    <li><var>d<sub>i</sub></var>: This represents the potential height reduction offered by the i-th block's Stability Enhancer</li>\n                </ul>\n            </li>\n            <li><strong>Optional third integer (<var>x<sub>i</sub></var>, for i >= 2, 1 ≤ <var>x<sub>i</sub></var> < i):</strong> This exists for blocks with Enhancer dependencies. It specifies the x-th block's Enhancer that needs to be activated before you can use the i-th block's Enhancer.</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 5000, 1 ≤ H ≤ 10<sup>9</sup></li>\n            <li>1 ≤ <var>d<sub>i</sub></var> < <var>c<sub>i</sub></var> ≤ 10<sup>9</sup></li>\n            <li>1 ≤ <var>x<sub>i</sub></var> < i, (For i >= 2)</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\n6 16\n10 9\n10 5 1\n12 2 1\n20 18 3\n10 2 3\n2 1 5</pre>\n            <pre class=\"output\">Output:\n4</pre>\n            <div class=\"explanation\">\n                <p>In the above test case of BloxMaxxing, you can achieve a tower height of 15 using 4 blocks:</p>\n                <ul>\n                    <li>Use the first block of height 10-9=1</li>\n                    <li>Use the third row with stability enhancer to use the third block for 12-2=10</li>\n                    <li>Use the fourth row with stability enhancer to use the fourth block for 20-18=2</li>\n                    <li>Use the sixth block without a discount for 2</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n<div class=\"time-limit\">\n        <h3>Time Limit</h3>\n        <p>10 seconds</p>\n    </div>\n</div>",
        "google_doc_link": "https://github.com/cphelper/OAbycphelper/tree/main/phonepe/BloxMaxxing",
        "solution_code": null,
        "company_name": "PhonePe",
        "company_id": 4
    },
    {
        "id": 127,
        "title": "Mathematician Number",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\\n    <div class=\\\\\\\"problem-header\\\\\\\">\\\n        <h1>Mathematician\\\\\\'s Number</h1>\\\n        <span class=\\\\\\\"problem-tag\\\\\\\">UNSOLVED</span>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"problem-description\\\\\\\">\\\n        <p>A Mathematician has <em>N</em> numbers on his board. He hates numbers so much that he wants only one number to remain on the board, so he devises a special tactic to do so.</p>\\\n        \\\n        <p>He randomly picks 2 numbers, say A and B. He erase both of them and add a new number equals to:</p>\\\n        <ul>\\\n            <li>A - B if (both are even or both are odd)</li>\\\n            <li>A + B if (one is even and other is odd)</li>\\\n        </ul>\\\n        \\\n        <p>After each move 1 number is reduced from the board. After a certain number of operations there would be only one number remaining on the board.</p>\\\n        \\\n        <p>The Mathematician wants to know how many different final numbers can be produced.</p>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"input-format\\\\\\\">\\\n        <h3>Input Format</h3>\\\n        <ul>\\\n            <li>The first line contains N, the number of integers initially present in the board.</li>\\\n            <li>The second line contains N space separated integers A1, A2, A3... AN, denoting the numbers in the board.</li>\\\n        </ul>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"output-format\\\\\\\">\\\n        <h3>Output Format</h3>\\\n        <p>A single output representing the count denoting the number of possible final distinct numbers on the board.</p>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"constraints\\\\\\\">\\\n        <h3>Constraints</h3>\\\n        <ul>\\\n            <li>2 ≤ N ≤ 50</li>\\\n            <li>1 ≤ Ai ≤ 100</li>\\\n        </ul>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"examples\\\\\\\">\\\n        <h3>Sample Input/Output</h3>\\\n        <div class=\\\\\\\"example\\\\\\\">\\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\\n2\\\n3 7</pre>\\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\\n2</pre>\\\n            <div class=\\\\\\\"explanation\\\\\\\">\\\n                <h4>Explanation:</h4>\\\n                <p>If we choose A = 3 and B = 7 then answer will be - 4</p>\\\n                <p>If we choose A = 7 and B = 3 then answer will be 4</p>\\\n            </div>\\\n        </div>\\\n    </div>\\\n\\\n    <div class=\\\\\\\"execution-limit\\\\\\\">\\\n        <h3>Execution Time Limit</h3>\\\n        <p>10 seconds</p>\\\n    </div>\\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1pp34Xk_QCF3KKY7s-XNG064o50L-XVUmQWHVQ3-yQSM/edit?usp=sharing",
        "solution_code": "",
        "company_name": "PhonePe",
        "company_id": 4
    },
    {
        "id": 128,
        "title": "The Secret Ninja Mission",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>The Secret Ninja Mission</h2>\n        <div class=\\\"problem-tags\\\">\n            <span class=\\\"tag\\\">Coding</span>\n            <span class=\\\"tag status-unsolved\\\">UNSOLVED</span>\n        </div>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <h3>Problem Statement</h3>\n        <p>A ninja from the magical hidden leaf village embarks on a mission to cross the magical forest. Along his journey, there are magical trees with hidden scrolls that mark significant points for completing a secret mission. The ninja starts his journey on day - 0 from a magical tree at position 0 and the time he takes from one tree to another is known.</p>\n\n<h3>Task</h3>\n        <p>You are given the length of the path n, the number of magical trees k, and the number of queries q. Additionally, you are provided with two arrays of size k:</p>\n        <ul>\n            <li>trees: Array containing the positions of the magical trees along the path.</li>\n            <li>time: Array containing the number of days taken by the ninja to reach from (i-1)th to (i)th tree only.</li>\n        </ul>\n        <p>Your task is to determine the day the ninja reaches any given point along the path. Provide the day number rounded down to the floor in case of a fractional answer. The ninja moves at a constant speed between any two magical trees, but his speed can change at each magical tree.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input format contains a single integer <code>n</code> — the length of the path, a single integer <code>k</code> — the number of magical tree checkpoints, a single integer <code>q</code> — the number of queries.</li>\n            <li>An array trees of size k — the positions of the magical trees.</li>\n            <li>An array time of size k — contains days taken by the ninja to travel from (i-1)th to (i)th tree</li>\n            <li>An array queries of size q — the positions on the path for which you need to determine the day the ninja reaches them.</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ k ≤ n</li>\n            <li>1 ≤ q ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>For each query, output the day on which the ninja reaches the queried position. Output the answer to rounded down day.</p>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Sample Input</h3>\n        <pre class=\\\"input\\\">10 3 2\n2 5 8\n6 3 9\n3 7</pre>\n\n<h3>Sample Output</h3>\n        <pre class=\\\"output\\\">7 15</pre>\n\n<div class=\\\"explanation\\\">\n            <h3>Explanations</h3>\n            <p>The length of the journey is 10 and there are 3 magical trees in the way and you have to answer 2 queries for the following positions- 3 and 7.</p>\n            <p>Query = 3: We have a tree at position 2, and the ninja will reach there in 6 days. Then he travels from tree at position 2 to tree position 5 in 3 more days. So he would have reached point 3 in 7 days total (considering his speed is constant between tree 2 and tree 5).</p>\n            <p>Query = 7: We have tree at position 7, to reach tree at position 7 we have to cross tree at position 2 which takes 6 days and then from tree at position 2 to tree at position 5 another 3 days, making a total of 9 days. Tree at position 7 lies in between tree at position 5 and 8. It takes 9 days to travel between trees at position 5 and 8, so proportionately he would have reached tree at position 7 in 2/3rd of that time which comes out to be 6. So a total of 9 + 6 = 15 days would be required.</p>\n        </",
        "google_doc_link": "https://docs.google.com/document/d/1olIVaQ5SapHLNSi_2GavpDulxpdcBEzPMNb78hoZad0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "PhonePe",
        "company_id": 4
    }
]