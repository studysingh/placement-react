[
    {
        "id": 1957,
        "title": "Beacon Activation on a Straight Highway",
        "problem_statement": "<h1>Beacon Activation on a Straight Highway</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A straight highway has numbered positions 1...m. There are m possible beacons (one per position). If you activate the beacon at position j, it yields a fixed power p_j (possibly 0).</p>\r\n<p>You also have n zones along the highway. Zone i covers the inclusive segment [L_i, r_i].</p>\r\n<p>If you choose a subset of beacons to activate, then the benefit of a zone is:</p>\r\n<ul>\r\n    <li>0 if there is no activated beacon inside [L_i, r_i];</li>\r\n    <li>otherwise, the power of the activated beacon with the largest position inside [L_i, r_i] (i.e., the rightmost activated beacon inside that zone).</li>\r\n</ul>\r\n<p>Your task: choose which beacons to activate to maximize the sum of benefits over all zones.</p>\r\n\r\n<h2>Input</h2>\r\n<p>Multiple test cases.</p>\r\n<p>First line: Integer <strong>t</strong> — number of tests (1 ≤ t ≤ 10^5).</p>\r\n<p>For each test case:</p>\r\n<ul>\r\n    <li>One line with integers <strong>n</strong> and <strong>m</strong> (1 ≤ n, m ≤ 10^6).</li>\r\n    <li>Next <strong>n</strong> lines: two integers <strong>L_i r_i</strong> (1 ≤ L_i ≤ r_i ≤ m) — the i-th zone.</li>\r\n    <li>Next line: <strong>m</strong> integers <strong>p_1, p_2, ..., p_m</strong> (0 ≤ p_j ≤ 10^9) — beacon powers.</li>\r\n</ul>\r\n<p>It is guaranteed that Σ n ≤ 10^6 and Σ m ≤ 10^6.</p>\r\n\r\n<h2>Output</h2>\r\n<p>For each test case, print a single integer — the maximum total benefit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n3 6\r\n1 3\r\n2 5\r\n4 6\r\n0 5 2 7 0 4\r\n2 5\r\n1 5\r\n3 5\r\n1 3 2 9 8\r\nOutput:\r\n16\r\n18</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Test 1.</strong> Activate beacons at positions 2 (power 5), 4 (power 7), and 6 (power 4):</p>\r\n<ul>\r\n    <li>Zone [1,3] -> rightmost active is 2 -> +5</li>\r\n    <li>Zone [2,5] -> rightmost active is 4 -> +7</li>\r\n    <li>Zone [4,6] -> rightmost active is 6 -> +4</li>\r\n    <li>Total = 16.</li>\r\n</ul>\r\n<p><strong>Test 2.</strong> Activate only position 4 (power 9): both zones take that beacon -> 9 + 9 = 18.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n4 8\r\n1 4\r\n2 8\r\n3 7\r\n5 8\r\n3 0 6 0 5 9 0 4\r\nOutput:\r\n33</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>One optimal choice: activate positions 3 (6), 5 (5), and 6 (9):</p>\r\n<ul>\r\n    <li>[1,4] -> rightmost active is 3 -> +6</li>\r\n    <li>[2,8] -> rightmost active is 6 -> +9</li>\r\n    <li>[3,7] -> rightmost active is 6 -> +9</li>\r\n    <li>[5,8] -> rightmost active is 6 -> +9</li>\r\n    <li>Total = 6 + 9 + 9 + 9 = 33.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 ≤ t ≤ 10^5</li>\r\n    <li>1 ≤ n, m ≤ 10^6</li>\r\n    <li>1 ≤ L_i ≤ r_i ≤ m</li>\r\n    <li>0 ≤ p_j ≤ 10^9</li>\r\n    <li>It is guaranteed that Σ n ≤ 10^6 and Σ m ≤ 10^6 (sum over all test cases).</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <utility>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long solve(int n, int m, const std::vector<std::pair<int, int>>& zones, const std::vector<long long>& powers) {\n        // Core logic to solve the problem goes here\n        return 0;\n    }\n};\n\nvoid run_test_case() {\n    int n, m;\n    std::cin >> n >> m;\n    std::vector<std::pair<int, int>> zones(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> zones[i].first >> zones[i].second;\n    }\n    std::vector<long long> powers(m);\n    for (int i = 0; i < m; ++i) {\n        std::cin >> powers[i];\n    }\n\n    Solution solution;\n    long long result = solution.solve(n, m, zones, powers);\n    std::cout << result << \"\\n\";\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    std::cout.tie(NULL);\n\n    int t;\n    std::cin >> t;\n    while (t--) {\n        run_test_case();\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Ivy League",
        "company_id": 693
    }
]