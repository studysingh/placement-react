[
    {
        "id": 903,
        "title": "Marketplace Bug Fixing",
        "problem_statement": "<h1>Marketplace Bug Fixing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are supposed to find the bug in the code. Your code will be evaluated on the basis of Bugs and system test cases being passed. <strong>NOTE:</strong> Here, we use JAVA 8 and GRADLE VERSION 4+.</p>\r\n<p>You are given a market place problem where you can purchase and sell items. We will pass the money you have initially in your wallet. You need to find the money after purchasing and selling the products.</p>\r\n<p>Your task is to understand the flow, debug it and fix the bug.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: initialMoney = 200F\r\nOutput: 335F</code></pre>\r\n<p><strong>Explanation:</strong> This is calculated based on the prices of the products purchased and sold by the <code>Market.handleMarket</code> function.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Don't change the number of parameters in the function declaration.</li>\r\n    <li>Don't change the number of products added, sold and their prices.</li>\r\n</ul>\r\n\r\n<p>The following Java files are provided:</p>\r\n\r\n<h3>Inventory.java</h3>\r\n<pre><code class='language-javascript'>package com.accolite.assignment.supermarket;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Inventory {\r\n    private Map&lt;String, Float&gt; pricePerItem;\r\n    private Map&lt;String, Integer&gt; stockPerItem;\r\n\r\n    public Inventory() {\r\n        this.pricePerItem = new HashMap&lt;&gt;();\r\n        this.stockPerItem = new HashMap&lt;&gt;();\r\n    }\r\n\r\n    public void addItem(String itemName, Float price, Integer stock) {\r\n        this.pricePerItem.put(itemName, price);\r\n        this.stockPerItem.put(itemName, stock);\r\n    }\r\n\r\n    public void removeItem(String itemName, Integer stock) {\r\n        this.stockPerItem.put(itemName, stock);\r\n    }\r\n\r\n    public Float getPriceOfItem(String itemName) {\r\n        return this.pricePerItem.get(itemName);\r\n    }\r\n\r\n    public Integer getStockPerItem(String itemName) {\r\n        return this.stockPerItem.get(itemName);\r\n    }\r\n}</code></pre>\r\n\r\n<h3>Market.java</h3>\r\n<pre><code class='language-javascript'>package com.accolite.assignment.supermarket;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Market {\r\n    public static Float handleMarket(Float initialMoney) {\r\n        Inventory inventory = new Inventory();\r\n        inventory.addItem(\"orange\", 20.00F, 10);\r\n        inventory.addItem(\"apple\", 50.00F, 10);\r\n        inventory.addItem(\"ladyfinger\", 10.00F, 20);\r\n        inventory.addItem(\"cauliflower\", 15.00F, 8);\r\n\r\n        Wallet wallet = new Wallet(initialMoney);\r\n\r\n        List&lt;String&gt; purchaseItems = new ArrayList&lt;&gt;();\r\n        purchaseItems.add(\"orange\");\r\n        purchaseItems.add(\"cauliflower\");\r\n        purchaseItems.add(\"cauliflower\");\r\n        purchaseItems.add(\"ladyfinger\");\r\n        purchaseItems.add(\"apple\");\r\n\r\n        List&lt;String&gt; sellItems = new ArrayList&lt;&gt;();\r\n        sellItems.add(\"ladyfinger\");\r\n        sellItems.add(\"apple\");\r\n        sellItems.add(\"ladyfinger\");\r\n        sellItems.add(\"apple\");\r\n        sellItems.add(\"ladyfinger\");\r\n        sellItems.add(\"apple\");\r\n\r\n        Thread t1 = new Purchase(purchaseItems, inventory, wallet);\r\n        Thread t2 = new Sell(sellItems, inventory, wallet);\r\n\r\n        runThreads(t1, t2);\r\n\r\n        return wallet.getMoney();\r\n    }\r\n\r\n    public static void runThreads(Thread t1, Thread t2) {\r\n        t1.start();\r\n        t2.start();\r\n    }\r\n}</code></pre>\r\n\r\n<h3>Purchase.java</h3>\r\n<pre><code class='language-javascript'>package com.accolite.assignment.supermarket;\r\n\r\nimport java.util.List;\r\n\r\npublic class Purchase extends Thread {\r\n    private List&lt;String&gt; items;\r\n    private Inventory inventory;\r\n    private Wallet wallet;\r\n\r\n    public Purchase(List&lt;String&gt; items, Inventory inventory, Wallet wallet) {\r\n        this.items = items;\r\n        this.inventory = inventory;\r\n        this.wallet = wallet;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        for (String item : items) {\r\n            Float itemPrice = inventory.getPriceOfItem(item);\r\n            wallet.deductMoney(itemPrice);\r\n        }\r\n    }\r\n}</code></pre>\r\n\r\n<h3>Sell.java</h3>\r\n<pre><code class='language-javascript'>package com.accolite.assignment.supermarket;\r\n\r\nimport java.util.List;\r\n\r\npublic class Sell extends Thread {\r\n    private List&lt;String&gt; items;\r\n    private Inventory inventory;\r\n    private Wallet wallet;\r\n\r\n    public Sell(List&lt;String&gt; items, Inventory inventory, Wallet wallet) {\r\n        this.items = items;\r\n        this.inventory = inventory;\r\n        this.wallet = wallet;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        for (String item : items) {\r\n            Float itemPrice = inventory.getPriceOfItem(item);\r\n            wallet.addMoney(itemPrice);\r\n        }\r\n    }\r\n}</code></pre>\r\n\r\n<h3>Wallet.java</h3>\r\n<pre><code class='language-javascript'>package com.accolite.assignment.supermarket;\r\n\r\npublic class Wallet {\r\n    private Float money;\r\n\r\n    public Wallet(Float money) {\r\n        this.money = money;\r\n    }\r\n\r\n    public Float getMoney() {\r\n        return money;\r\n    }\r\n\r\n    public void setMoney(Float money) {\r\n        this.money = money;\r\n    }\r\n\r\n    public void addMoney(Float money) {\r\n        this.setMoney(this.getMoney() + money);\r\n    }\r\n\r\n    public void deductMoney(Float money) {\r\n        this.setMoney(this.getMoney() - money);\r\n    }\r\n}</code></pre>\r\n\r\n<h3>MarketPlaceBugProblem.java</h3>\r\n<pre><code class='language-javascript'>package com.accolite.assignment;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class MarketPlaceBugProblem {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MarketPlaceBugProblem.class, args);\r\n    }\r\n\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tech Mahindra_22may",
        "company_id": 280
    }
]