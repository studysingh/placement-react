[
    {
        "id": 918,
        "title": "Sum of Elements Greater Than Immediate Neighbors",
        "problem_statement": "<h1>Sum of Elements Greater Than Immediate Neighbors</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are monitoring the performance of devices in a network. Each device periodically reports its status by sending a numerical value. These values are collected in sequence in an array.</p>\r\n<p>Given an array of integers <code>statusReports</code>, your task is to find the sum of all elements in the array <code>statusReports</code> that are greater than their immediate neighbors. If an element is the first or last in the array, it should be compared only to its single neighbor.</p>\r\n<p>Return the resulting sum as an integer.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(statusReports.length) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: statusReports = [1, 3, 2, 5, 1]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>3 (index 1) is greater than its neighbors 1 and 2.</li>\r\n<li>5 (index 3) is greater than its neighbors 2 and 1.</li>\r\n<li>Sum of 3 and 5 is 8.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: statusReports = [1, 2]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>2 (index 1) is greater than its neighbor 1.</li>\r\n<li>Answer is 2.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: statusReports = [5, 1, 3]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>5 (index 0) is greater than its neighbor 1.</li>\r\n<li>3 (index 2) is greater than its neighbor 1.</li>\r\n<li>Sum of 5 and 3 is 8.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>Execution time limit: 0.5 seconds (cpp)</li>\r\n<li>Memory limit: 1 GB</li>\r\n<li><code>2 <= statusReports.length <= 10^3</code></li>\r\n<li><code>-10^3 <= statusReports[i] <= 10^3</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_1july",
        "company_id": 285
    },
    {
        "id": 919,
        "title": "Newspaper Text Formatting",
        "problem_statement": "<h1>Newspaper Text Formatting</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are formatting the text on a newspaper page. You have to align the text on the page properly. The text is provided to you in the following format:</p>\r\n<ul>\r\n    <li><strong>paragraphs</strong> is an array of paragraphs, where each paragraph is represented as an array containing portions of text.</li>\r\n    <li><strong>width</strong> represents the maximum number of characters each line of the newspaper page can include.</li>\r\n</ul>\r\n<p>Your task is to produce a newspaper page according to the following specifications:</p>\r\n<ul>\r\n    <li>Start a new line for each paragraph, <code>paragraphs[i]</code>. Add all paragraph words <code>paragraphs[i][j]</code> in order. When words are together on a line, they should be separated by 1 space.\r\n        <ul>\r\n            <li>Every paragraph word <code>paragraphs[i][j]</code> is guaranteed to contain only lowercase and uppercase English letters.</li>\r\n        </ul>\r\n    </li>\r\n    <li>You can't break up words. So, if adding the next word would cause you to exceed <strong>width</strong>, you will need to start a new line and add the word there.</li>\r\n    <li>You may end up with leftover space on a line if the size of the text that fit on the line (including separating spaces) is less than <strong>width</strong>. If this happens, align the text to the center by adding spaces around it:\r\n        <ul>\r\n            <li>If the amount of leftover space on the line is even, add an equal number of spaces before and after the text.</li>\r\n            <li>If the amount of leftover space on the line is odd, add an equal number of spaces before and after the text. You'll have an extra space left over; add it <em>after</em> the text.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Include a rectangular border of asterisks (<code>*</code> characters) around the top, bottom, left, and right edges of the resulting newspaper page. These characters don't count towards the <strong>width</strong> but are added for aesthetic reasons. This means you'll add a string of <code>width + 2</code> asterisks before the first paragraph and after the last paragraph.</li>\r\n</ul>\r\n<p>Return the resulting newspaper page as an array of strings. It is guaranteed that it is possible to format the paragraphs as described.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(paragraphs.length * paragraphs[0].length * width) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: paragraphs = [[\"hello\", \"world\"], [\"How\", \"areYou\", \"doing\"], [\"Please\", \"look\", \"and\", \"align\", \"to\", \"the\", \"center\"]], width = 16\r\nOutput:\r\n******************\r\n*  hello world   *\r\n* How areYou doing *\r\n* Please look and  *\r\n*  align to the  *\r\n*     center     *\r\n******************</code></pre>\r\n<p><strong>Explanation:</strong> Let's consider all paragraphs.</p>\r\n<ul>\r\n    <li><strong>paragraphs[0] = [\"hello\", \"world\"]</strong>\r\n        <ul>\r\n            <li>Both words fit on one line with a combined length of 11, including the separating space.</li>\r\n            <li>Since <strong>width = 16</strong>, there are <strong>16 - 11 = 5</strong> leftover spaces on the line. We'll need to align the text to center.</li>\r\n            <li>Because 5 is odd, the line should have 2 leading spaces and 3 trailing spaces.</li>\r\n            <li>So the result for this paragraph is the line <code>\"  hello world   \"</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>paragraphs[1] = [\"How\", \"areYou\", \"doing\"]</strong>\r\n        <ul>\r\n            <li>All three words fit on one line with a length of 16, including separating spaces.</li>\r\n            <li>There are no leftover spaces, so the result is <code>\"How areYou doing\"</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>paragraphs[2] = [\"Please\", \"look\", \"and\", \"align\", \"to\", \"the\", \"center\"]</strong>\r\n        <ul>\r\n            <li>The words \"Please\", \"look\", \"and\" are too long to combine (the result would have a length of 21 > 16), so we'll start a new line with \"align\".</li>\r\n            <li>Line 1: \"Please look and\" (length 15). Leftover spaces: <strong>16 - 15 = 1</strong>. Odd. 0 leading, 1 trailing. Result: <code>\"Please look and \"</code>.</li>\r\n            <li>Furthermore, the words \"align\", \"to\", \"the\", and \"center\" would have a combined length of 19 > 16 which is also too long, so \"center\" will also be on a new line.</li>\r\n            <li>Line 2: \"align to the\" (length 12). Leftover spaces: <strong>16 - 12 = 4</strong>. Even. 2 leading, 2 trailing. Result: <code>\"  align to the  \"</code>.</li>\r\n            <li>Line 3: \"center\" (length 6). Leftover spaces: <strong>16 - 6 = 10</strong>. Even. 5 leading, 5 trailing. Result: <code>\"     center     \"</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.array.string paragraphs</code>\r\n        <ul>\r\n            <li>An array of arrays of strings representing text for the newspaper page.</li>\r\n            <li><code>1 &le; paragraphs.length &le; 20</code></li>\r\n            <li><code>1 &le; paragraphs[i].length &le; 10</code></li>\r\n            <li><code>1 &le; paragraphs[i][j].length &le; width</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> <code>integer width</code>\r\n        <ul>\r\n            <li>An integer representing the width of the newspaper page.</li>\r\n            <li><code>5 &le; width &le; 50</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>array.string</code>\r\n        <ul>\r\n            <li>Return the resulting newspaper page as array of strings, in which the i<sup>th</sup> string represents the i<sup>th</sup> line of the newspaper page.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_1july",
        "company_id": 285
    }
]