[
    {
        "id": 1897,
        "title": "Wooden Block Puzzle",
        "problem_statement": "<h1>Wooden Block Puzzle</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You make wooden toys in your woodworking shop for the enjoyment of your grandchildren. You have planned a series of small puzzles, and you would like to automate the writing of the solutions.</p>\r\n\r\n<p>Each puzzle is a grid, on which are placed wooden blocks of various shapes. These blocks must be taken out of the game, one after the other, without colliding. You have to determine the order in which they are taken out.</p>\r\n\r\n<p>Each block is numbered with a value between 0 and 9. When you enter the number of a block, it will be moved to the right until it is off of the grid.</p>\r\n\r\n<p>If several blocks can be exited at the same time, you can choose which one you would like to remove first.</p>\r\n\r\n<p>Implement the function <code>solve(width, height, nb_blocks, grid)</code>. This function is executed at each round of the game and should return the number of the next block to move.</p>\r\n\r\n<h3>Input Data of the Function</h3>\r\n<ul>\r\n    <li><code>width</code>: width of the puzzle, in number of cells.</li>\r\n    <li><code>height</code>: height of the puzzle, in number of cells.</li>\r\n    <li><code>nb_blocks</code>: number of blocks initially present in the puzzle.</li>\r\n    <li><code>grid</code>: a list of <code>height</code> elements, each of which is a string with a size equal to <code>width</code>.</li>\r\n</ul>\r\n<p>The parameters <code>width</code>, <code>height</code> and <code>nb_blocks</code> do not change during the whole game.</p>\r\n<p>The <code>grid</code> parameter represents the current situation of the puzzle. Each of its characters can take one of the following values:</p>\r\n<ul>\r\n    <li><code>.</code> (a dot): an empty square.</li>\r\n    <li><code>X</code>: a wall. They are placed on the first and last line, as well as on the first character of each line, to show that the only possible exit is to the right. You cannot move these walls.</li>\r\n    <li>An integer between 0 and <code>nb_blocks-1</code>: a square occupied by a block. The same number can be present several times in the grid, representing a single block that extends over several squares. All cells with the same block number are connected (they are never separated into several isolated groups).</li>\r\n</ul>\r\n\r\n<h3>Output Data of the Function</h3>\r\n<p>An integer, between 0 and <code>nb_blocks-1</code> representing the number of the block you want to output to the right.</p>\r\n<p>You can only move one block at a time, and each move must always be to the right. A move is made until the end: either until the block is completely out, or until one block collides with another.</p>\r\n\r\n<h3>Victory Conditions</h3>\r\n<ul>\r\n    <li>All blocks are out of the game.</li>\r\n    <li>(There is at least one possible block removal order that will yield a solution.)</li>\r\n</ul>\r\n\r\n<h3>Defeat Conditions</h3>\r\n<ul>\r\n    <li>A collision occurs between the block you moved and a block on the grid.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt; width &lt; 15</code></li>\r\n    <li><code>1 &lt; height &lt; 15</code></li>\r\n    <li><code>1 &lt;= nb_blocks &lt; 10</code></li>\r\n</ul>\r\n\r\n<h2>Starter Code</h2>\r\n<pre><code class='language-python'>import sys\r\nimport math\r\nfrom contextlib import redirect_stdout\r\n\r\ndef solve(width, height, nb_blocks, grid):\r\n    # Write your code here\r\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\r\n    return -1\r\n\r\n# Ignore and do not change the code below\r\ndef main():\r\n    # pylint: disable = C, W\r\n    width, height, nb_blocks = [int(i) for i in input().split()]\r\n\r\n    # game loop\r\n    while True:\r\n        grid = []\r\n        for i in range(height):\r\n            grid.append(input())\r\n        with redirect_stdout(sys.stderr):\r\n            moves = solve(width, height, nb_blocks, grid)\r\n        print(moves)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n# Ignore and do not change the code above\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nasdaq_18oct",
        "company_id": 671
    },
    {
        "id": 1898,
        "title": "Calculate Remaining Leaves",
        "problem_statement": "<h1>Calculate Remaining Leaves</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>It is a windy day today and many tree leaves are covering the garden. Write a program that calculates the number of leaves left in the garden based on their location and a series of wind gusts.</p>\r\n\r\n<p><strong>How it works:</strong></p>\r\n<ul>\r\n    <li>The ground is represented by a grid that is <strong>height</strong> squares high and <strong>width</strong> squares wide.</li>\r\n    <li>The top left box is located at <strong>(0, 0)</strong> where the first integer represents the row and the second the column.</li>\r\n    <li>Each element of the grid represents the number of leaves on the ground.</li>\r\n    <li>The series of gusts, <strong>winds</strong>, is a string composed of the characters <strong>U</strong> (top), <strong>D</strong> (bottom), <strong>R</strong> (right), <strong>L</strong> (left).</li>\r\n    <li>Each gust of wind moves the leaves on the grid one square in the direction of the wind.</li>\r\n    <li>The leaves fly out of the garden when the wind pushes them out of the grid.</li>\r\n</ul>\r\n\r\n<h2>Implementation</h2>\r\n<p>Implement the method <code>remainingLeaves(width, height, leaves, winds)</code> which:</p>\r\n<ul>\r\n    <li>takes as inputs the integers <code>width</code> and <code>height</code>, the 2D integer array <code>leaves</code> and the string <code>winds</code>.</li>\r\n    <li>returns the number of leaves left on the floor as an integer.</li>\r\n</ul>\r\n<p><strong>Important note:</strong> in <code>leaves</code>, the first integer represents <strong>rows</strong> and the second integer represents <strong>columns</strong>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: width = 4, height = 4, leaves = [[1,0,2,0], [2,0,0,0], [0,1,1,0], [2,0,0,0]], winds = \"RRD\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initial state (total 9 leaves):</p>\r\n<pre><code class='language-text'>[[1,0,2,0],\r\n [2,0,0,0],\r\n [0,1,1,0],\r\n [2,0,0,0]]</code></pre>\r\n<p><strong>Gust 1: 'R' (Right)</strong></p>\r\n<p>All leaves move one square to the right. No leaves fly out yet.</p>\r\n<pre><code class='language-text'>[[0,1,0,2],\r\n [0,2,0,0],\r\n [0,0,1,1],\r\n [0,2,0,0]]</code></pre>\r\n<p>Total leaves: 9</p>\r\n<p><strong>Gust 2: 'R' (Right)</strong></p>\r\n<p>All leaves move one square to the right. Leaves at (0,3) (2 leaves) and (2,3) (1 leaf) fly out.</p>\r\n<pre><code class='language-text'>[[0,0,1,0],\r\n [0,0,2,0],\r\n [0,0,0,1],\r\n [0,0,2,0]]</code></pre>\r\n<p>Total leaves: 1 + 2 + 1 + 2 = 6</p>\r\n<p><strong>Gust 3: 'D' (Down)</strong></p>\r\n<p>All leaves move one square down. Leaves at (3,2) (2 leaves) fly out.</p>\r\n<pre><code class='language-text'>[[0,0,0,0],\r\n [0,0,1,0],\r\n [0,0,2,0],\r\n [0,0,0,1]]</code></pre>\r\n<p>Total leaves: 1 + 2 + 1 = 4</p>\r\n<p>Therefore, 4 leaves are left in the garden.</p>\r\n<p><em>Note: The problem image indicates an output of 1, which appears to be inconsistent with the visual representation of the final state showing 4 leaves. The explanation above follows the visual state.</em></p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 < width < 20</code></li>\r\n    <li><code>0 < height < 20</code></li>\r\n    <li><code>0 <= leaves[r][c] < 20</code> (number of leaves in any cell)</li>\r\n    <li><code>0 <= number of characters in winds < 20</code></li>\r\n</ul>\r\n\r\n<h2>Initial Code Snippet (Java)</h2>\r\n<pre><code class='language-javascript'>import java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\nclass Solution {\r\n    public static int remainingLeaves(int width, int height, int[][] leaves, String winds) {\r\n        // Write your code here\r\n        // To debug: System.err.println(\"Debug messages...\");\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/* Ignore and do not change the code below */\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nasdaq_18oct",
        "company_id": 671
    },
    {
        "id": 1899,
        "title": "SQL Query: Filter and Sort Customers",
        "problem_statement": "<h1>SQL Query: Filter and Sort Customers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a database schema that includes a <code>customer</code> table with the following structure:</p>\r\n<ul>\r\n    <li><code>customer_id</code>: INTEGER</li>\r\n    <li><code>firstname</code>: VARCHAR(50)</li>\r\n    <li><code>lastname</code>: VARCHAR(50)</li>\r\n    <li><code>birth_date</code>: DATE</li>\r\n    <li><code>address</code>: VARCHAR(255)</li>\r\n    <li><code>zipcode</code>: VARCHAR(5)</li>\r\n    <li><code>city</code>: VARCHAR(50)</li>\r\n    <li><code>phone_number</code>: VARCHAR(20)</li>\r\n</ul>\r\n<p>Your task is to write a SQL query that selects customers based on the following criteria:</p>\r\n<ol>\r\n    <li>Only select customers whose <code>lastname</code> starts with the letter 'W'.</li>\r\n    <li>Sort the results alphabetically first by <code>lastname</code>, and then by <code>firstname</code>.</li>\r\n    <li>The output should only include the <code>lastname</code> and <code>firstname</code> columns, in that specific order.</li>\r\n</ol>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+-----------+-----------+\r\n| LASTNAME  | FIRSTNAME |\r\n+-----------+-----------+\r\n| WHITTARD  | Bill      |\r\n| WILLIAMS  | John      |\r\n+-----------+-----------+</code></pre>\r\n<p><strong>Explanation:</strong> The query filters the customers to include only those whose last names begin with 'W'. The results are then sorted by last name, and for customers with the same last name, by first name. Finally, only the 'LASTNAME' and 'FIRSTNAME' columns are displayed.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nasdaq_18oct",
        "company_id": 671
    },
    {
        "id": 1900,
        "title": "List Customer Cities",
        "problem_statement": "<h1>List Customer Cities</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a database schema that includes a <code>customer</code> table. Your task is to write a SQL query to retrieve a list of all unique cities where customers reside.</p>\r\n<p>The resulting list should adhere to the following requirements:</p>\r\n<ul>\r\n    <li>It must contain no duplicate city names.</li>\r\n    <li>It must be sorted alphabetically in ascending order.</li>\r\n</ul>\r\n<p>Only the <code>CITY</code> column should be outputted.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> Assume the <code>customer</code> table contains the following data for the <code>city</code> column:</p>\r\n<pre><code class='language-text'>| customer_id | firstname | lastname | birth_date | address       | zipcode | city        | phone_number |\r\n|-------------|-----------|----------|------------|---------------|---------|-------------|--------------|\r\n| 1           | John      | Doe      | 1990-01-01 | 123 Main St   | 10001   | Istanbul    | 555-1111     |\r\n| 2           | Jane      | Smith    | 1985-05-15 | 456 Oak Ave   | 20002   | Montpellier | 555-2222     |\r\n| 3           | Peter     | Jones    | 1992-11-20 | 789 Pine Ln   | 10001   | Istanbul    | 555-3333     |\r\n| 4           | Alice     | Brown    | 1988-03-10 | 101 Elm Rd    | 30003   | Tokyo       | 555-4444     |\r\n| 5           | Bob       | White    | 1995-07-25 | 202 Birch Ct  | 20002   | Montpellier | 555-5555     |</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>| CITY        |\r\n|-------------|\r\n| Istanbul    |\r\n| Montpellier |\r\n| Tokyo       |</code></pre>\r\n<p><strong>Explanation:</strong> The unique cities present in the <code>customer</code> table are 'Istanbul', 'Montpellier', and 'Tokyo'. When sorted alphabetically, they appear in the order shown.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nasdaq_18oct",
        "company_id": 671
    },
    {
        "id": 1901,
        "title": "Filter Employees by Last Name Range",
        "problem_statement": "<h1>Filter Employees by Last Name Range</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a table named <code>employees</code> with the following schema:</p>\r\n<pre><code class='language-text'>+--------------+--------------+\r\n| Column Name  | Type         |\r\n+--------------+--------------+\r\n| id           | INTEGER      |\r\n| first_name   | VARCHAR(50)  |\r\n| last_name    | VARCHAR(50)  |\r\n| num_years    | INTEGER      |\r\n| satisfaction | DECIMAL(25,5)|\r\n+--------------+--------------+</code></pre>\r\n<p>Your goal is to extract employees whose <code>last_name</code> is alphabetically between \"Hall\" and \"Reed\" (inclusive). The results should be in alphabetical order based on <code>last_name</code>.</p>\r\n<p><strong>Requirements:</strong></p>\r\n<ul>\r\n<li>Expected columns: <code>first_name</code>, <code>last_name</code>, in that order.</li>\r\n<li>Sort the rows by <code>last_name</code> ascending.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Given an implicit <code>employees</code> table, the expected output after filtering and sorting would be:</p>\r\n<pre><code class='language-text'>| FIRST_NAME | LAST_NAME |\r\n|------------|-----------|\r\n| Helen      | Hall      |\r\n| Kristin    | Hanson    |\r\n| Jeff       | Harmon    |\r\n| Elsie      | Mcgowan   |\r\n| Evelyn     | Mirando   |\r\n| George     | Moss      |</code></pre>\r\n<p><strong>Explanation:</strong> The employees whose <code>last_name</code> falls alphabetically between \"Hall\" and \"Reed\" (inclusive) are selected. The output then displays only their <code>first_name</code> and <code>last_name</code>, sorted by <code>last_name</code> in ascending order.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nasdaq_18oct",
        "company_id": 671
    },
    {
        "id": 1902,
        "title": "Top All-Around Basketball Players",
        "problem_statement": "<h1>Top All-Around Basketball Players</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a table named <code>basketball_player_stats</code> with the following schema:</p>\r\n<pre><code class='language-text'>id INTEGER\r\nfirst_name VARCHAR(50)\r\nlast_name VARCHAR(50)\r\ngames_played INTEGER\r\nppg FLOAT\r\nrpg FLOAT\r\napg FLOAT\r\nfgpct FLOAT\r\nftpct FLOAT</code></pre>\r\n<p>Write a query that returns the top all-around basketball players. We define a top all-around basketball player as someone whose <strong>PPG</strong> is 20.0 or higher, <strong>RPG</strong> and <strong>APG</strong> are both 5.0 or higher, and <strong>games_played</strong> is 65 or higher.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Expected columns: <code>first_name</code>, <code>last_name</code>, in that order.</li>\r\n    <li>Sort the rows by <code>last_name</code> then <code>first_name</code> in alphabetical order.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+------------+-----------+\r\n| FIRST_NAME | LAST_NAME |\r\n+------------+-----------+\r\n| James      | Durant    |\r\n| LeBron     | James     |\r\n| Russell    | Westbrook |\r\n+------------+-----------+</code></pre>\r\n<p><strong>Explanation:</strong> The query should return players who meet the all-around criteria, sorted by last name then first name. The example output shows the expected format and order for the top players.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nasdaq_18oct",
        "company_id": 671
    },
    {
        "id": 1903,
        "title": "Find Power",
        "problem_statement": "<h1>Find Power</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an integer <code>max_val</code> and another integer <code>a</code>, return the biggest integer <code>b</code> such that <code>a^b &le; max_val</code>.</p>\r\n<p>As a reminder: <code>a^b = a * a * a * ...</code> (a multiplied b times).</p>\r\n<p>You need to implement the function <code>findPower</code> with the following signature:</p>\r\n<pre><code class='language-cpp'>/**\r\n * @param max_val the maximum authorized value.\r\n * @param a the value that will be raised to a specific power.\r\n * @return the biggest power value that respects the specified equation.\r\n */\r\nint findPower(int max_val, int a) {\r\n    // Write your code here\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: max_val = 33, a = 2\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> For <code>a = 2</code> and <code>max_val = 33</code>:</p>\r\n<ul>\r\n    <li><code>2^0 = 1</code></li>\r\n    <li><code>2^1 = 2</code></li>\r\n    <li><code>2^2 = 4</code></li>\r\n    <li><code>2^3 = 8</code></li>\r\n    <li><code>2^4 = 16</code></li>\r\n    <li><code>2^5 = 32</code> (<code>32 &le; 33</code>)</li>\r\n    <li><code>2^6 = 64</code> (<code>64 &gt; 33</code>)</li>\r\n</ul>\r\n<p>The biggest integer <code>b</code> such that <code>2^b &le; 33</code> is <code>5</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; max_val &le; 2,000,000,000</code></li>\r\n    <li><code>2 &le; a &le; 2,000,000,000</code></li>\r\n    <li>Available RAM: 512MB</li>\r\n    <li>Timeout: 1 second</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nasdaq_18oct",
        "company_id": 671
    }
]