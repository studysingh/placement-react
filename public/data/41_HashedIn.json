[
    {
        "id": 176,
        "title": " Vehicle Collisions on Highway",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\"> Vehicle Collisions on Highway</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Imagine there are <code>n</code> vehicles positioned uniquely along an endless highway, numbered consecutively from 0 to <code>n-1</code> going from left to right. You have a string called <code>traffic</code> of length <code>n</code>, where each character represents the behavior of a vehicle:</p>\n        <ul>\n            <li>\\'L\\' means the car is traveling leftward</li>\n            <li>\\'R\\' means it\\'s traveling rightward</li>\n            <li>\\'S\\' signifies it\\'s stationary</li>\n        </ul>\n        <p>All cars in motion travel at the same speed.</p>\n        \n        <h3>Collision Rules:</h3>\n        <ul>\n            <li>When vehicles traveling in opposite directions meet, they crash, adding 2 to the total count of collisions.</li>\n            <li>A moving vehicle crashing into a stationary vehicle adds 1 to the collision count.</li>\n            <li>Upon crashing, all involved vehicles stop moving permanently.</li>\n            <li>Vehicles do not alter their course or movement state unless involved in a collision.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A string <code>S</code> representing the directions of cars on a road.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an integer that represents the total number of impacts or collisions that will occur between cars as they move according to their specified directions.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input: directions = \\\"RLRSLL\\\"</pre>\n            <pre class=\\\"output\\\">Output: 5</pre>\n            <div class=\\\"explanation\\\">\n                <p>The sequence of impacts on the road is as follows:</p>\n                <ul>\n                    <li>Cars at positions 0 and 1 impact each other. They are moving in opposite directions, resulting in 2 impacts, increasing the count to 2.</li>\n                    <li>Cars at positions 2 and 3 impact. Since car 3 is stationary, this adds 1 more impact, making the count 3.</li>\n                    <li>Cars at positions 3 and 4 impact. Car 3 being stationary contributes another impact, reaching a total of 4 impacts.</li>\n                    <li>Cars at positions 4 and 5 impact. After car 4 comes to a halt due to car 3, car 5 impacts car 4, adding 1 more impact for a total of 5.</li>\n                </ul>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input: directions = \\\"LLRR\\\"</pre>\n            <pre class=\\\"output\\\">Output: 0</pre>\n            <div class=\\\"explanation\\\">\n                <p>All cars are moving parallel with no crossing paths, resulting in no impacts. Hence, the total number of impacts on the road remains 0.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">int solution(char *S);</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1cui44pmqWMePk30PIyyDcONSL1osPHU-ArgzQ7-u2sM/edit?usp=sharing",
        "solution_code": "> Cphelper:\\n#include <iostream>\\n#include <stack>\\n#include <string>\\n\\nint solution(const char *S) {\\n    std::stack<char> st;\\n    int total_collisions = 0;\\n    \\n    for (int i = 0; S[i] != \\'\\\\0\\'; ++i) {\\n        char current = S[i];\\n        \\n        if (current == \\'R\\') {\\n            st.push(\\'R\\');\\n        }\\n        else if (current == \\'L\\') {\\n            \\n            while (!st.empty() && st.top() == \\'R\\') {\\n                st.pop();\\n                total_collisions += 2;\\n            }\\n            \\n            if (!st.empty() && st.top() == \\'S\\') {\\n                total_collisions += 1;\\n            }\\n        }\\n        else if (current == \\'S\\') {\\n            \\n            while (!st.empty() && st.top() == \\'R\\') {\\n                st.pop();\\n                total_collisions += 1;\\n            }\\n            st.push(\\'S\\');\\n        }\\n    }\\n    \\n    return total_collisions;\\n}\\n\\n> Cphelper:\\nint main() {\\n    const char *test1 = \\\"RLRSLL\\\";\\n    std::cout << \\\"Test1 Output: \\\" << solution(test1) << std::endl; // Expected: 5\\n\\n    const char *test2 = \\\"LLRR\\\";\\n    std::cout << \\\"Test2 Output: \\\" << solution(test2) << std::endl; // Expected: 0\\n\\n}\\n",
        "company_name": " HashedIn",
        "company_id": 41
    }
]