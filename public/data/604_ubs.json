[
    {
        "id": 1722,
        "title": "Maximize VM Rental Revenue",
        "problem_statement": "<h1>Maximize VM Rental Revenue</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a cloud computing platform, there are <code>n</code> types of virtual machines (VMs). Each VM type has a certain number of instances available for rent, represented by the array <code>vmStock</code>.</p>\r\n<p>Each time a VM of a certain type is rented, the customer pays a fee equal to the number of instances currently available for that type. There are <code>m</code> different customers arriving one by one, and each customer always chooses the most expensive VM available at that moment, i.e., the VM type with the most instances left.</p>\r\n<p>Implement a function to calculate the total revenue the platform can earn after serving all rental requests.</p>\r\n<p>The function <code>maximizeRentalRevenue</code> takes the following inputs:</p>\r\n<ul>\r\n    <li><code>int vmStock[n]</code>: the number of VMs of each type available initially</li>\r\n    <li><code>int m</code>: the number of customers requesting to rent a VM</li>\r\n</ul>\r\n<p>The function should return a long integer denoting the total revenue that can be earned after serving all customers' requests.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, vmStock = [1, 2, 4], m = 4\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 different types of VMs available with 4 customer requests.\r\n<br>Simulation of Purchases:</p>\r\n<ul>\r\n    <li>Initial <code>vmStock</code>: <code>[1, 2, 4]</code></li>\r\n    <li>Customer 1: Chooses VM type with 4 instances (cost 4). <code>vmStock</code> becomes <code>[1, 2, 3]</code>. Revenue: 4.</li>\r\n    <li>Customer 2: Chooses VM type with 3 instances (cost 3). <code>vmStock</code> becomes <code>[1, 2, 2]</code>. Revenue: 3.</li>\r\n    <li>Customer 3: Chooses VM type with 2 instances (cost 2). <code>vmStock</code> becomes <code>[1, 1, 2]</code>. Revenue: 2.</li>\r\n    <li>Customer 4: Chooses VM type with 2 instances (cost 2). <code>vmStock</code> becomes <code>[1, 1, 1]</code>. Revenue: 2.</li>\r\n</ul>\r\n<p>The total revenue earned is 4 + 3 + 2 + 2 = 11.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, vmStock = [2, 1, 1, 3], m = 4\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> There are 4 different types of VMs available with 4 customer requests.\r\n<br>Simulation of Purchases:</p>\r\n<ul>\r\n    <li>Initial <code>vmStock</code>: <code>[2, 1, 1, 3]</code></li>\r\n    <li>Customer 1: Chooses VM type with 3 instances (cost 3). <code>vmStock</code> becomes <code>[2, 1, 1, 2]</code>. Revenue: 3.</li>\r\n    <li>Customer 2: Chooses VM type with 2 instances (cost 2). <code>vmStock</code> becomes <code>[2, 1, 1, 1]</code>. Revenue: 2.</li>\r\n    <li>Customer 3: Chooses VM type with 2 instances (cost 2). <code>vmStock</code> becomes <code>[1, 1, 1, 1]</code>. Revenue: 2.</li>\r\n    <li>Customer 4: Chooses VM type with 1 instance (cost 1). <code>vmStock</code> becomes (e.g.) <code>[0, 1, 1, 1]</code>. Revenue: 1.</li>\r\n</ul>\r\n<p>The total revenue earned is 3 + 2 + 2 + 1 = 8.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= vmStock[i] &lt;= 10^6</code></li>\r\n    <li><code>1 &lt;= m &lt;= 10^6</code></li>\r\n    <li>The sum of <code>vmStock[i]</code> for all <code>1 &lt;= i &lt;= n</code> will always be greater than <code>m</code>.</li>\r\n</ul>\r\n\r\n<pre><code class='language-python'>#!/bin/python3\r\n\r\n# Complete the 'maximizeRentalRevenue' function below.\r\n#\r\n# The function is expected to return a LONG_INTEGER.\r\n# The function accepts following parameters:\r\n#  1. INTEGER_ARRAY vmStock\r\n#  2. INTEGER m\r\n#\r\ndef maximizeRentalRevenue(vmStock, m):\r\n    # Write your code here\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ubs",
        "company_id": 604
    },
    {
        "id": 1723,
        "title": "Selenium Java: Vulnerabilities Scraping",
        "problem_statement": "<h1>Selenium Java: Vulnerabilities Scraping</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In this challenge, you will use the selenium web driver, <code>HtmlUnitDriver</code>, which uses <code>HtmlUnit</code> headless browser. This eliminates the need to set up browsers like Firefox, Chrome, or web driver executables like <code>FirefoxDriver</code>, or <code>ChromeDriver</code>.</p>\r\n<p>You are given a link to a dummy website like <code>nvd.com</code> or <code>cvedetails.com</code> which shows all the WordPress vulnerabilities for different versions in a tabular format. Scrape all the vulnerabilities of a given WordPress version.</p>\r\n<p>There is a class <code>VulnerabilitiesScraper</code> which has 2 methods:</p>\r\n\r\n<p><code>List&lt;String&gt; scrapeVulnerabilitiesOf(WebDriver driver, String vulnPageUrl, String wpVersion):</code></p>\r\n<ul>\r\n    <li>Browse to the <code>vulnPageUrl</code>.</li>\r\n    <li>Its source code structure is like <code>website/vulnPage.html</code>.</li>\r\n    <li>Filter rows for the given <code>wpVersion</code> and collect the CVE ID column.</li>\r\n    <li>Return a list of CVE IDs for the <code>wpVersion</code>.</li>\r\n</ul>\r\n\r\n<p><code>String findHighestScoredVulnerability(WebDriver driver, String vulnPageUrl, String wpVersion):</code></p>\r\n<ul>\r\n    <li>Browse to the <code>vulnPageUrl</code>.</li>\r\n    <li>Its source code structure is like <code>website/vulnPage.html</code>.</li>\r\n    <li>Vulnerability scores for a <code>wpVersion</code> are distinct.</li>\r\n    <li>Find the row for <code>wpVersion</code> with the highest score and collect the corresponding CVE ID.</li>\r\n    <li>Return the CVE ID of a highest scored vulnerability.</li>\r\n</ul>\r\n\r\n<p><code>vulnPageUrl</code> is the URL of the vulnerabilities page and <code>wpVersion</code> is the version to scrape data for.</p>\r\n<p>There are tests for the correctness of each method. You can make use of these tests while debugging/checking your implementation. The test's setup method bootstraps an embedded jetty server and deploys a small web app that displays a randomly generated website. The example website is given in the <code>website</code> folder, where you can view the structure of the search and result pages, but the random data displayed will change on every refresh.</p>\r\n\r\n<h2>Examples</h2>\r\n<p>The vulnerabilities page will look like this (example data):</p>\r\n<pre><code class='language-text'>CVE ID    Publish Date    Update Date    Score    WordPress Version\r\n--------  --------------  -------------  -------  -----------------\r\nCVE-401   2018-06-15      2018-06-23     9.0      4.3\r\nCVE-432   2019-04-15      2019-04-23     4.0      4.3\r\nCVE-433   2020-04-15      2020-04-23     7.0      4.3\r\nCVE-431   2019-04-15      2019-04-23     6.0      4.3\r\nCVE-452   2021-04-15      2021-04-23     7.0      4.3\r\n</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<p>The following files are marked read-only. You cannot edit these files in the editor; however, it is possible from the terminal. You must not modify or delete these files because doing so results in a zero score.</p>\r\n<ul>\r\n    <li><code>src/main/java/com/hackerrank/selenium/server/JettyServer.java</code></li>\r\n    <li><code>src/main/java/com/hackerrank/selenium/server/VulnerabilitiesServlet.java</code></li>\r\n    <li><code>src/test/java/com/hackerrank/selenium/VulnerabilitiesScraperTest.java</code></li>\r\n    <li><code>website/vulnPage.html</code></li>\r\n</ul>\r\n\r\n<h2>Initial Code Structure</h2>\r\n<pre><code class='language-javascript'>package com.hackerrank.selenium;\r\n\r\nimport org.openqa.selenium.WebDriver;\r\nimport java.util.List;\r\n\r\npublic class VulnerabilitiesScraper {\r\n\r\n    public static List&lt;String&gt; scrapeVulnerabilitiesOf(WebDriver driver, String vulnPageUrl, String wpVersion) {\r\n        return null;\r\n    }\r\n\r\n    public static String findHighestScoredVulnerability(WebDriver driver, String vulnPageUrl, String wpVersion) {\r\n        return null;\r\n    }\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ubs",
        "company_id": 604
    }
]