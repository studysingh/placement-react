[
    {
        "id": 1088,
        "title": "Stock Trading Profit",
        "problem_statement": "<h1>Stock Trading Profit</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A quantitative trading firm aims to develop a tool to track the net profit/loss of the firm at any point in time. This tool processes a list of events, and each event falls into one of four categories:</p>\r\n<ol>\r\n    <li><strong>BUY stock quantity</strong>: Indicates the purchase of &lt;quantity&gt; shares of &lt;stock&gt; at the market price.</li>\r\n    <li><strong>SELL stock quantity</strong>: Indicates the sale of &lt;quantity&gt; shares of &lt;stock&gt; at the market price.</li>\r\n    <li><strong>CHANGE stock price</strong>: Indicates a change in the market price of &lt;stock&gt; by &lt;price&gt; amount, which can be positive or negative.</li>\r\n    <li><strong>QUERY</strong>: Requests the net profit/loss from the start of trading until the current time.</li>\r\n</ol>\r\n<p>The tool should return a list of numbers corresponding to each QUERY event.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: events = [\"BUY googl 20\", \"BUY aapl 50\", \"CHANGE googl 6\", \"QUERY\", \"SELL aapl 10\", \"CHANGE aapl -2\", \"QUERY\"]\r\nOutput: [120, 40]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Initially, the profit is 0.</li>\r\n    <li><strong>BUY googl 20</strong>: 20 shares of 'googl' are purchased. Portfolio: {googl: 20}. Profit: 0.</li>\r\n    <li><strong>BUY aapl 50</strong>: 50 shares of 'aapl' are purchased. Portfolio: {googl: 20, aapl: 50}. Profit: 0.</li>\r\n    <li><strong>CHANGE googl 6</strong>: The price of 'googl' changes by 6. Since 20 shares of 'googl' are held, the profit increases by 20 * 6 = 120. Total profit: 0 + 120 = 120.</li>\r\n    <li><strong>QUERY</strong>: The current net profit is 120. This is the first element of the output.</li>\r\n    <li><strong>SELL aapl 10</strong>: 10 shares of 'aapl' are sold. Portfolio: {googl: 20, aapl: 40}. Selling shares does not directly affect the accumulated profit from price changes. Profit: 120.</li>\r\n    <li><strong>CHANGE aapl -2</strong>: The price of 'aapl' changes by -2. Since 40 shares of 'aapl' are held, the profit changes by 40 * -2 = -80. Total profit: 120 - 80 = 40.</li>\r\n    <li><strong>QUERY</strong>: The current net profit is 40. This is the second element of the output.</li>\r\n</ul>\r\n<p>Hence the answer should be [120, 40].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 2\r\nevents = [\"BUY hackr 2\", \"QUERY\"]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The firm purchased 2 stocks of hackr, then had a \"QUERY\" event. Since there is no change in stock price, there is 0 profit so far.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 6\r\nevents = [\"BUY stock2 2\", \"BUY stock1 4\", \"CHANGE stock2 -8\", \"SELL stock1 2\", \"BUY stock3 3\", \"QUERY\"]\r\nOutput: -16</code></pre>\r\n<p><strong>Explanation:</strong> The price of 2 shares of 'stock2' decreased by 8. This results in a profit change of 2 * -8 = -16. Other events do not affect the profit for this query.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getNetProfit</code> in the editor.\r\nThe function is expected to return a <code>LONG_INTEGER_ARRAY</code>.</p>\r\n<p>The function accepts the following parameter:</p>\r\n<ul>\r\n    <li><code>string events[n]</code>: the events to process</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long[]</code>: the answers to the \"QUERY\" events</li>\r\n</ul>\r\n<pre><code class='language-javascript'>vector<long> getNetProfit(vector<string> events) {\r\n    // Function body to be implemented\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>|events[i]| &le; 21</code></li>\r\n    <li>For <code>SELL &lt;stock&gt; &lt;quantity&gt;</code> events, it is guaranteed that there are enough shares owned.</li>\r\n    <li><code>1 &le; quantity &lt; 10<sup>3</sup></code></li>\r\n    <li>The absolute value of a change in the price of any stock at any event will not exceed <code>10<sup>3</sup></code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jpmc_31july",
        "company_id": 357
    },
    {
        "id": 1089,
        "title": "Count Binary Substrings",
        "problem_statement": "<h1>Count Binary Substrings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Count the number of substrings in a binary string that contain an equal number of 0s and 1s, where all 0s and 1s are grouped together. Duplicate substrings are counted in the total.</p>\r\n<p>A binary string consists only of 0s and 1s, and a substring is a contiguous group of characters within the string.</p>\r\n<p>Complete the function <code>getSubStringCount</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>s:</code> a binary string</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int:</code> the number of substrings that meet the criteria</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"011001\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The qualifying substrings are \"01\", \"10\", \"1100\", and \"01\", giving a total of 4. Note that \"0110\" has equal 0s and 1s but is not counted because the 0s and 1s are not grouped together.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"001100011\"\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The substrings \"01\", \"0011\", \"10\", \"1100\", \"01\", and \"0011\" have an equal number of 0s and 1s with consecutive groupings.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: s = \"000110\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The substrings \"01\", \"0011\", and \"10\" satisfy the constraints.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; length of s &le; 10<sup>5</sup></code></li>\r\n    <li>The string <code>s</code> consists of 0s and 1s only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jpmc_31july",
        "company_id": 357
    }
]