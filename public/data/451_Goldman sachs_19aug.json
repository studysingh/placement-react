[
    {
        "id": 1305,
        "title": "Concert Seating Arrangement",
        "problem_statement": "<h1>Concert Seating Arrangement</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alex is organizing a concert and needs to manage the seating arrangement based on ticket types. Each ticket type is represented by a unique English alphabet letter, and groups of people arriving together holding the same ticket type sit together in one block. Alex also has a special VIP section at the front that is always reserved for one individual, regardless of the seating arrangement.</p>\r\n<p>Help Alex with a program that accepts a number N indicating the number of ticket holders, and an array <code>ticketType</code> containing N uppercase English alphabet letters representing the ticket type of each person, to determine how many distinct seating blocks are needed based on ticket types. A new seating block starts every time there is a change in the ticket type, and the VIP seat must always be included as its separate block at the start.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the standard output, and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^7</code></li>\r\n    <li>Each ticket type is an uppercase letter (e.g., 'A', 'B', 'C')</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line will have an integer N, the number of ticket holders.</p>\r\n<p>The second line will have N uppercase letters (<code>ticketType</code>) separated by spaces, each representing the ticket type of one ticket holder, in sequence.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should be an integer representing the total number of seating blocks required, including the VIP block.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\nA A B C B D\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The total number of ticket holders, N, is 6.</p>\r\n<ul>\r\n    <li>VIP Seat: 1 block</li>\r\n    <li>Block 1: Ticket holders 1 and 2 have ticket type A, and will be in one block</li>\r\n    <li>Block 2: Ticket holder 3 (B)</li>\r\n    <li>Block 3: Ticket holder 4 (C)</li>\r\n    <li>Block 4: Ticket holder 5 (B)</li>\r\n    <li>Block 5: Ticket holder 6 (D)</li>\r\n</ul>\r\n<p>Therefore, there are 6 ticket blocks.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\nC Z P\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Similarly, here, Alex needs 4 blocks to accommodate all the groups with a VIP block.</p>\r\n\r\n<h2>Function Signature</h2>\r\n<p>The function signature provided is:</p>\r\n<pre><code class='language-cpp'>int generateResult(int N, vector&lt;string&gt;&amp; ticketType) {\r\n    // WRITE YOUR CODE HERE\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_19aug",
        "company_id": 451
    },
    {
        "id": 1306,
        "title": "RoboMax Patrol Robot",
        "problem_statement": "<h1>RoboMax Patrol Robot</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>RoboMax is a patrol robot stationed in a high-tech warehouse represented as a grid with R rows and C columns. The robot starts its patrol at the top-left corner of the grid and must finish at the bottom-right corner. The warehouse is divided into square zones, each assigned a reward value indicating how much valuable data RoboMax can collect while passing through that zone.</p>\r\n<p>However, RoboMax has limited battery power and can only visit each zone once. It can move only to an adjacent zone (up, down, left, or right). Not all zones need to be visited, but RoboMax aims to maximize the total reward value it collects during the patrol.</p>\r\n<p>If multiple maximum-reward paths exist, RoboMax will enumerate them all, sort them lexicographically by their move string, and travel along the lexicographically first path.</p>\r\n<p>Your task is to help RoboMax with a program that determines such a path.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; R, C &le; 1000</code></li>\r\n    <li><code>0 &le; Reward values &le; 1000</code></li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line will contain two integers, <code>R</code> and <code>C</code>, the number of rows and columns of the grid.</p>\r\n<p>The next <code>R</code> lines each will contain <code>C</code> space-separated positive integers representing the reward values of the zones in the warehouse grid.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The only line of output should display a string representing the sequence of characters representing RoboMax's path.</p>\r\n<p>Use:</p>\r\n<ul>\r\n    <li><code>U</code> for moving up</li>\r\n    <li><code>D</code> for moving down</li>\r\n    <li><code>L</code> for moving left</li>\r\n    <li><code>R</code> for moving right</li>\r\n</ul>\r\n<p>The sequence must represent a valid, lexicographically first path from the top-left to bottom-right, visiting each zone at most once and collecting the maximum reward possible.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 4\r\n1 1 1 1\r\n2 2 2 2\r\n2 2 2 2\r\n1 1 1 1\r\nOutput:\r\nDDDRRULURURDDD</code></pre>\r\n<p><strong>Explanation:</strong> Here, in the given grid of 4x4, there are a total of four paths available where the maximum total reward is possible, i.e.,</p>\r\n<ul>\r\n    <li><code>DRRURDDLLDRRR</code></li>\r\n    <li><code>DDDRRULURURDDD</code></li>\r\n    <li><code>DDDRUURDRDLDR</code></li>\r\n    <li><code>RRRDLLDDRDRURD</code></li>\r\n</ul>\r\n<p>Out of these, the lexicographically first maximum total reward possible path is \"DDDRRULURURDDD\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 4\r\n14 19 2 5\r\n20 0 2 17\r\n14 20 16 20\r\nOutput:\r\nDDRRULURRDD</code></pre>\r\n<p><strong>Explanation:</strong> Here, in the given grid of 3x4, there are multiple paths available, such as</p>\r\n<ul>\r\n    <li><code>RRRULLDRRR</code></li>\r\n    <li><code>DDRRULURRDD</code></li>\r\n</ul>\r\n<p>So, the lexicographically first maximum total reward possible path will be \"DDRRULURRDD\", which will be printed as an output.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>A basic C++ structure is provided below for your reference:</p>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nstring computeMaxRewardPath(int R, int C, int reward[1000][1000]) // R and C are the number of warehouse\r\n                                                                // rows and columns, and reward is the 2D grid that contains reward values of the zones in the\r\n{\r\n    string result = \"\";\r\n\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    int R, C;\r\n    cin >> R >> C;\r\n    int reward[1000][1000];\r\n\r\n    for (int i = 0; i &lt; R; ++i)\r\n    {\r\n        for (int j = 0; j &lt; C; ++j)\r\n        {\r\n            cin >> reward[i][j];\r\n        }\r\n    }\r\n\r\n    cout &lt;&lt; computeMaxRewardPath(R, C, reward) &lt;&lt; endl;\r\n\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_19aug",
        "company_id": 451
    },
    {
        "id": 1307,
        "title": "RoboMax Path",
        "problem_statement": "<h1>RoboMax Path</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>RoboMax is a patrol robot stationed in a high-tech warehouse represented as a grid with R rows and C columns. The robot starts its patrol at the top-left corner of the grid and must finish at the bottom-right corner. The warehouse is divided into square zones, each assigned a reward value indicating how much valuable data RoboMax can collect while passing through that zone.</p>\r\n<p>However, RoboMax has limited battery power and can only visit each zone once. It can move only to an adjacent zone (up, down, left, or right). Not all zones need to be visited, but RoboMax aims to maximize the total reward value it collects during the patrol.</p>\r\n<p>If multiple maximum-reward paths exist, RoboMax will enumerate them all, sort them lexicographically by their move string, and travel along the lexicographically first path.</p>\r\n<p>Your task is to help RoboMax with a program that determines such a path.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; R, C &le; 1000</li>\r\n    <li>0 &le; Reward values &le; 1000</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line will contain two integers, R and C, the number of rows and columns of the grid.</p>\r\n<p>The next R lines will each contain C space-separated positive integers representing the reward values of the zones in the warehouse grid.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The only line of output should display a string representing the sequence of characters representing RoboMax's path.</p>\r\n<p><strong>Use:</strong></p>\r\n<ul>\r\n    <li>U for moving up</li>\r\n    <li>D for moving down</li>\r\n    <li>L for moving left</li>\r\n    <li>R for moving right</li>\r\n</ul>\r\n<p>The sequence must represent a valid, lexicographically first path from the top-left to bottom-right, visiting each zone at most once and collecting the maximum reward possible.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 4\r\n1 1 1 1\r\n2 2 2 2\r\n2 2 2 2\r\n1 1 1 1\r\nOutput:\r\nDDRRULURURDDD</code></pre>\r\n<p><strong>Explanation:</strong> Here, in the given grid of 4x4, there are a total of four paths available where the maximum total reward is possible, i.e., DDRRULLDRRR, DDRRULURURDDD, DDDRUURDRDLDR, RRRRDLLDRDRURD, RRRDDLLDDRURRD. Out of these, the lexicographically first maximum total reward possible path is \"DDRRULURURDDD\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 4\r\n14 19 2 5\r\n20 0 2 17\r\n14 20 16 20\r\nOutput:\r\nDDRRULURRDD</code></pre>\r\n<p><strong>Explanation:</strong> Here, in the given grid of 3x4, there are multiple paths available, such as RRRRDLLDRRR, DDRRULURRDD. So, the lexicographically first maximum total reward possible path will be \"DDRRULURRDD\", which will be printed as an output.</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nstring computeMaxRewardPath(int R, int C, int reward[1000][1000]) { // R and C are the number of rows and columns, and reward is the 2D grid that contains reward values of the zones in the warehouse grid.\r\n    string result = \"\";\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    int R, C;\r\n    cin >> R >> C;\r\n    int reward[1000][1000];\r\n\r\n    for (int i = 0; i &lt; R; ++i) {\r\n        for (int j = 0; j &lt; C; ++j) {\r\n            cin >> reward[i][j];\r\n        }\r\n    }\r\n\r\n    cout &lt;&lt; computeMaxRewardPath(R, C, reward) &lt;&lt; endl;\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_19aug",
        "company_id": 451
    }
]