[
    {
        "id": 1078,
        "title": "Cool Graph",
        "problem_statement": "<h1>Cool Graph</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an undirected connected graph of <code>g_nodes</code> nodes and <code>M</code> connections. Traverse all of the nodes at least once and store the order of traversal in array <code>A</code>. Then make an array <code>B</code> as described by the following algorithm:</p>\r\n<pre><code class='language-cpp'>for (int i = 0; i < A.size(); i++) {\r\n    bool found = 0;\r\n\r\n    for (int j = 0; j < B.size(); j++) {\r\n        if (A[i] == B[j]) {\r\n            found = 1;\r\n            break;\r\n        }\r\n    }\r\n    if (!found) {\r\n        B.push_back(A[i]);\r\n    }\r\n}</code></pre>\r\n<p>Select the traversal <code>A</code> to create the lexicographically largest array <code>B</code> possible. Return the resulting array <code>B</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ng_nodes = 5\r\ng_from = [4, 5, 1, 4, 3]\r\ng_to = [5, 1, 4, 3, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>There are <code>g_nodes = 5</code> nodes and <code>M = 5</code> edges. Connected pairs are elements of <code>g_from</code> and <code>g_to</code>: (4, 5), (5, 1), (1, 4), (4, 3), (3, 2).</p>\r\n<p>The graph looks like this:</p>\r\n<p>Traverse the graph first and store the order of traversal in array <code>A</code>. Determining the order of traversal is up to you. For this example, the optimal traversal is:</p>\r\n<pre><code class='language-text'>5 -> 4 -> 3 -> 2 -> 3 -> 4 -> 1\r\nA = [5, 4, 3, 2, 3, 4, 1]</code></pre>\r\n<p>Array <code>B</code>, according to the described algorithm is:</p>\r\n<pre><code class='language-text'>Output: [5, 4, 3, 2, 1]</code></pre>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 2\r\n3 1\r\n3 2\r\n\r\nFunction:\r\ng_nodes = 3, M = 2\r\ng_from = [3, 3], g_to = [1, 2]</code></pre>\r\n<pre><code class='language-text'>Output: 3 2 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Graph:</p>\r\n<p>Traversal order = 3 -> 2 -> 3 -> 1. Array A = [3, 2, 3, 1]</p>\r\n<p>Array B according to the given algorithm: B = [3, 2, 1].</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 5\r\n1 2\r\n2 3\r\n3 4\r\n2 4\r\n1 4\r\n\r\nFunction:\r\n(Implicit from input: g_nodes = 4, M = 5, g_from/g_to pairs)</code></pre>\r\n<pre><code class='language-text'>Output: 4 3 2 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Graph:</p>\r\n<p>Traversal: 4 -> 3 -> 2 -> 1. array A = [4, 3, 2, 1].</p>\r\n<p>Array B according to the given algorithm: B = [4, 3, 2, 1].</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_31july",
        "company_id": 353
    },
    {
        "id": 1079,
        "title": "Slow and Fast Pointers",
        "problem_statement": "<h1>Slow and Fast Pointers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Process an array using two pointers to determine the minimum valid segment size.</p>\r\n<p>Given an array <code>arr</code>, process it using pointers <code>P1</code> and <code>P2</code> and a segment size <code>segSize</code> as follows:</p>\r\n<ol>\r\n    <li>Start with <code>P1 = 0</code> and <code>P2 = 1</code>.</li>\r\n    <li>Compare <code>arr[P1]</code> with all elements in a subarray starting at <code>arr[P2]</code> and including <code>segSize</code> elements (or until the end of <code>arr</code>).</li>\r\n    <li>If <code>arr[P1]</code> is greater than or equal to all elements in the subarray, increment <code>P1</code> by 1 and <code>P2</code> by <code>segSize</code>.</li>\r\n    <li>Repeat until the entire array has been processed.</li>\r\n</ol>\r\n<p>Determine the minimum value of <code>segSize</code> that allows the entire array to be processed successfully, or return <code>-1</code> if not possible.</p>\r\n<p>Complete the function <code>dualSpeed</code> in the editor with the following parameter:</p>\r\n<p><code>int arr[n]</code>: an array of integers</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The function is expected to return an <code>INTEGER</code>: the minimum <code>segSize</code> to allow all elements to be processed, or <code>-1</code> if it is impossible.</li>\r\n    <li><code>1 <= n <= 5000</code></li>\r\n    <li><code>1 <= arr[i] <= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>The first line contains an integer, <code>n</code>, the number of elements in <code>arr</code>.</p>\r\n<p>Each line <code>i</code> of the <code>n</code> subsequent lines (where <code>0 <= i < n</code>) contains an integer, <code>arr[i]</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> <code>arr = [11, 9, 10, 8, 10, 9]</code></p>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Try: <code>segSize = 1</code></p>\r\n<pre><code class='language-text'>P1 P2 arr[P1] Subarray Continue\r\n0  1  11      [9]      y\r\n1  2  9       [10]     n (fails because 10 > 9)</code></pre>\r\n\r\n<p>Try: <code>segSize = 2</code></p>\r\n<pre><code class='language-text'>P1 P2 arr[P1] Subarray Continue\r\n0  1  11      [9, 10]  y\r\n1  3  9       [8, 10]  n (fails because 10 > 9)</code></pre>\r\n\r\n<p>Try: <code>segSize = 3</code></p>\r\n<pre><code class='language-text'>P1 P2 arr[P1] Subarray Continue\r\n0  1  11      [9, 10, 8] y\r\n1  4  9       [10, 9]  n (fails because 10 > 9)</code></pre>\r\n\r\n<p>Try: <code>segSize = 4</code></p>\r\n<pre><code class='language-text'>P1 P2 arr[P1] Subarray        Continue\r\n0  1  11      [9, 10, 8, 10] y\r\n1  5  9       [9]            y</code></pre>\r\n<p>All array elements were processed, so the minimum <code>segSize = 4</code>.</p>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n11\r\n9\r\n7\r\n7\r\n7\r\n6\r\n5\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Since the array is in non-increasing order, a <code>segSize</code> of 1 can be used.</p>\r\n\r\n<h3>Example 3: (Sample Case 1)</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n13\r\n6\r\n6\r\n1\r\n3\r\n3\r\n5\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Try: <code>segSize = 1</code></p>\r\n<pre><code class='language-text'>P1 P2 arr[P1] Subarray Continue\r\n0  1  13      [6]      y\r\n1  2  6       [6]      y\r\n2  3  6       [1]      y\r\n3  4  1       [3]      n (fails because 3 > 1)</code></pre>\r\n\r\n<p>Try: <code>segSize = 2</code></p>\r\n<pre><code class='language-text'>P1 P2 arr[P1] Subarray Continue\r\n0  1  13      [6, 6]   y\r\n1  3  6       [1, 3]   y\r\n2  5  6       [3, 5]   y</code></pre>\r\n<p>All array elements are processed, so the minimum <code>segSize = 2</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_31july",
        "company_id": 353
    },
    {
        "id": 1080,
        "title": "Task Completion",
        "problem_statement": "<h1>Task Completion</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Two interns at HackerRank are assigned to complete a total of <code>n</code> tasks. Each task can be completed by either intern. The first intern earns <code>reward_1[i]</code> points for finishing the <code>i</code>th task, while the second intern earns <code>reward_2[i]</code> points for the same task.</p>\r\n<p>To maximize the total reward points for both interns, determine the highest possible combined reward points if the first intern is required to complete <code>k</code> tasks, and the second intern completes the remaining tasks.</p>\r\n<p><strong>Note:</strong> The <code>k</code> tasks for the first intern can be any of the <code>n</code> tasks.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumRewardPoints</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int k</code>: the number of tasks that have to be completed by intern 1</li>\r\n    <li><code>int reward_1[n]</code>: the reward points earned by intern 1 for each task</li>\r\n    <li><code>int reward_2[n]</code>: the reward points earned by intern 2 for each task</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>int</code>: the maximum possible combined reward points when intern 1 completes exactly <code>k</code> tasks.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, reward_1 = [5, 4, 3, 2, 1], reward_2 = [1, 2, 3, 4, 5], k = 3\r\nOutput: 21</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 completes 3 tasks, while intern 2 completes the other 2. To maximize the points, intern 1 takes the first 3 tasks, and intern 2 takes the last 2 tasks. The total reward points are 5 + 4 + 3 (from intern 1) + 4 + 5 (from intern 2) = 21, which is the maximum possible. So, the answer is 21.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n4\r\n1\r\n2\r\n3\r\n2\r\n1\r\n2\r\n3\r\n2\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 3 tasks, and intern 2 completes the remaining task. The reward points for each task are the same for both interns, so any task can be picked up by either intern. Total reward points = 1 + 2 + 3 + 2 = 8.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n4\r\n2\r\n3\r\n4\r\n2\r\n1\r\n1\r\n1\r\n1\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 2 tasks, and intern 2 completes the remaining 2 tasks. In order to maximize the points gained, intern 1 completes the second and third tasks, while intern 2 completes the first and fourth tasks. Total reward points gained = 4 + 3 (from intern 1) + 1 + 1 (from intern 2) = 9.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= k &lt;= n</code></li>\r\n    <li><code>1 &lt;= reward_1[i] &lt;= 10^4</code></li>\r\n    <li><code>1 &lt;= reward_2[i] &lt;= 10^4</code></li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>The first line contains an integer, <code>k</code>.</p>\r\n<p>The next line contains an integer, <code>n</code>, the number of tasks.</p>\r\n<p>The next <code>n</code> lines contain an integer, <code>reward_1[i]</code>.</p>\r\n<p>The next <code>n</code> lines contain an integer, <code>reward_2[i]</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_31july",
        "company_id": 353
    },
    {
        "id": 1081,
        "title": "Word Compression",
        "problem_statement": "<h1>Word Compression</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A student decides to perform some operations on big words to compress them, so they become easy to remember. An operation consists of choosing a group of K consecutive equal characters and removing them. The student keeps performing this operation as long as it is possible. Determine the final word after the operation is performed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>word = \"abbcccb\"\r\nk = 3</code></pre>\r\n<ul>\r\n<li>Remove k = 3 characters 'c', now word = \"abbb\".</li>\r\n<li>Remove 3 characters 'b', so the final word is \"a\".</li>\r\n</ul>\r\n<p>It can be easily proven that the final word will be unique. Also, it is guaranteed that the final word consists of at least one character.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function compressWord in the editor below.</p>\r\n<p>compressWord has the following parameter(s):</p>\r\n<p>string word: a string of lowercase English letters</p>\r\n<p>int k: the number of consecutive equal characters</p>\r\n<p>Returns:</p>\r\n<p>string : denotes the final word.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 &le; |word| &le; 10<sup>5</sup></li>\r\n<li>1 &le; k &le; |word|</li>\r\n</ul>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: word = \"aba\", k = 2\r\nOutput: aba</code></pre>\r\n<p><strong>Explanation:</strong> There are no consecutive equal characters to be removed. So, the final word stays intact 'aba'.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: word = \"baac\", k = 2\r\nOutput: bc</code></pre>\r\n<p><strong>Explanation:</strong> Remove k=2 characters 'a' and the final word = \"bc\".</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_31july",
        "company_id": 353
    },
    {
        "id": 1082,
        "title": "Sum of All Values",
        "problem_statement": "<h1>Sum of All Values</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string <code>num</code> consisting of digits ('0' to '9'), find the sum of the values of all possible expressions formed by inserting '+' characters between digits.</p>\r\n<p><strong>Rules:</strong></p>\r\n<ul>\r\n    <li>You can insert '+' characters between any two digits.</li>\r\n    <li>No adjacent '+' characters are allowed.</li>\r\n    <li>The expressions are evaluated as regular mathematical expressions.</li>\r\n</ul>\r\n<p>Since the answer can be large, return the value modulo (10<sup>9</sup> + 7).</p>\r\n<p>Complete the function <code>getExpressionSums</code> in the editor. It should return an integer representing the sum of all possible expression values modulo (10<sup>9</sup> + 7).</p>\r\n<p>The function accepts the following parameter:</p>\r\n<ul>\r\n    <li><code>string num</code>: the string of numbers</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: num = \"123\"\r\nOutput: 168</code></pre>\r\n<p><strong>Explanation:</strong> All possible valid expressions:</p>\r\n<ul>\r\n    <li>\"1+23\" = 24</li>\r\n    <li>\"12+3\" = 15</li>\r\n    <li>\"1+2+3\" = 6</li>\r\n    <li>\"123\" = 123</li>\r\n</ul>\r\n<p>Sum: 24 + 15 + 6 + 123 = 168</p>\r\n<p>Answer: 168 modulo (10<sup>9</sup> + 7) = 168.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: num = \"100\"\r\nOutput: 112</code></pre>\r\n<p><strong>Explanation:</strong> All possible valid expressions are shown.</p>\r\n<ul>\r\n    <li>\"100\", value = 100</li>\r\n    <li>\"1 + 00\", value = 1</li>\r\n    <li>\"1 + 0 + 0\", value = 1</li>\r\n    <li>\"10 + 0\", value = 10</li>\r\n</ul>\r\n<p>(100 + 1 + 1 + 10) modulo (10<sup>9</sup> + 7) = 112.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: num = \"12\"\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> All possible valid expressions are shown.</p>\r\n<ul>\r\n    <li>\"12\", value = 12</li>\r\n    <li>\"1 + 2\", value = 3</li>\r\n</ul>\r\n<p>(12 + 3) modulo (10<sup>9</sup> + 7) = 15.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; length of <code>num</code> &le; 17</li>\r\n    <li><code>num</code> consists of characters from '0' - '9' (both inclusive) only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_31july",
        "company_id": 353
    },
    {
        "id": 1083,
        "title": "Sub-Palindrome",
        "problem_statement": "<h1>Sub-Palindrome</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A palindrome is a string that reads the same forwards and backwards, such as 121 or tacocat. A substring is a continuous sequence of characters within a string. Given a string <code>s</code>, how many unique substrings of <code>s</code> are palindromes?</p>\r\n<p>Complete the function <code>palindrome</code> in the editor below.</p>\r\n<p>The function <code>palindrome</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string s</code>: a string</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>int</code>: the number of distinct palindromes</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"mokkori\"</code></pre>\r\n<p><strong>Explanation:</strong> Some of its substrings are [m, o, k, r, i, mo, ok, mok, okk, kk, okkoi. There are 7 distinct palindromes [m, o, k, r, i, kk, okko].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"aabaa\"\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> Palindromic substrings are ['a', 'aa', 'aabaa', 'aba', 'b']. The substring 'a' occurs 4 times, but is counted only once. Similarly, the substring 'aa' occurs twice but counts as one distinct palindrome. The number of distinct palindromes is 5.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: s = \"abcdcdcbabcdcdcbabcdcdcb\"\r\nOutput: 27</code></pre>\r\n<p><strong>Explanation:</strong> Palindromic substrings are ['a', 'b', 'c', 'd', 'aa', 'dd', 'cdcdc', 'bab', 'cbabc', 'abcdcdcba', 'bcddcb', 'dcbabcd', 'cdc', 'dcd', 'cdddc', 'bcdddcbb', 'daaad', 'cdcdaadc', 'dcdaadcd', 'cdcdcdcdc', 'bcdcdcdabcdcb', 'abcdcdcdabcdcbab', 'bebcdcdcdabcdcbab', 'cbabcdcdcdabcdcbabc', 'dcbabcdcdcdabcdcbabcd', 'ddcbabcdcdcdabcdcbabcd']. The number of distinct palindromes is 27.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |s| <= 5000</code></li>\r\n    <li>Each character <code>s[i]</code> is in the range <code>ascii[a-z]</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_31july",
        "company_id": 353
    }
]