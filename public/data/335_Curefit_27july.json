[
    {
        "id": 1034,
        "title": "Doctor",
        "problem_statement": "<h1>Doctor</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Suppose there is a doctor's office with a single physician. You are given an array of patients, where <code>patients[i] = [arrival, time]</code>.</p>\r\n<ul>\r\n    <li><code>arrival</code> is the arrival time of the i-th patient. The arrival times are sorted in non-decreasing order.</li>\r\n    <li><code>time</code> is the time needed to examine the i-th patient.</li>\r\n</ul>\r\n<p>When a patient arrives, he joins his companions in the waiting room. The physician starts examining him once he is free. The patient waits till the physician finishes examining him. The physician examines patients in the order they were given in the input.</p>\r\n<p>Return the average waiting time of all patients. Return the answer rounded down to the nearest integer less than or equal to the answer.</p>\r\n\r\n<h3>Notes:</h3>\r\n<ul>\r\n    <li>The physician examines only one patient at a time.</li>\r\n    <li>The waiting time includes the time he spent with the doctor.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>solution()</code> provided in the editor. The function takes the following 2 parameters and returns the solution.</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the number of patients</li>\r\n    <li><code>patient</code>: Represents the entry time and examining time for each patient</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>Note: Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains <code>N</code> denoting the number of patients.</li>\r\n    <li>The next <code>N</code> lines contain 2 integers each, containing the entry time and examining time for each patient.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer, representing the rounded average waiting time.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n5 2\r\n7 4\r\n10 3\r\n20 1\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<p><strong>Input:</strong></p>\r\n<p><code>N = 4</code></p>\r\n<p><code>patient = [[5,2],[7,4],[10,3],[20,1]]</code></p>\r\n<p><strong>Output:</strong> <code>3</code></p>\r\n<p><strong>Approach:</strong></p>\r\n<ol>\r\n    <li>The first patient arrives at time 5, the doctor starts examining him immediately at time 5, and finishes at time 7, so the waiting time of the first patient is 7 - 5 = 2.</li>\r\n    <li>The second patient arrives at time 7, the doctor starts examining him at time 7, and finishes at time 11, so the waiting time of the second patient is 11 - 7 = 4.</li>\r\n    <li>The third patient arrives at time 10, the doctor starts examining him at time 11, and finishes at time 14, so the waiting time of the third patient is 14 - 10 = 4.</li>\r\n    <li>The fourth patient arrives at time 20, the doctor starts examining him immediately at time 20, and finishes at time 21, so the waiting time of the fourth patient is 21 - 20 = 1.</li>\r\n</ol>\r\n<p>So the average waiting time = (2 + 4 + 4 + 1) / 4 = 3.25. We give the answer as 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^5</code></li>\r\n    <li><code>1 <= arrival, time <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Curefit_27july",
        "company_id": 335
    },
    {
        "id": 1035,
        "title": "Slice master",
        "problem_statement": "<h1>Slice master</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your friends and you are playing a game called Slice master. You are given a string S. The motive of the game is to slice string S into parts such that each letter reappears in at most one part. After slicing, your total points will be calculated as follows:</p>\r\n<ul>\r\n    <li>For each part of length <code>x</code>, you will be allotted <code>x<sup>2</sup></code> points.</li>\r\n</ul>\r\n<p>Return the minimum possible points a player can score while playing Slice master with String S.</p>\r\n<p><strong>Note:</strong> The slicing should be such that a particular character is present in at max one part. For example, if part has letters {p, m, i, g, o} then these letters cannot be present in any other part.</p>\r\n<p>Find the minimum possible points a player can score while playing Slice master with String S.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the <code>solveG</code> function. This function takes the following argument and the minimum possible points a player can get while playing Slice master:</p>\r\n<ul>\r\n    <li><code>S</code> Represents the string to be sliced.</li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains a string <code>S</code> denoting the String to be sliced.</li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>Return the minimum possible points a player can get while playing Slice master.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: eccbbbbdec\r\nOutput: 100</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Points = 0</p>\r\n<p>part 1 -> eccbbbbdec -> length = 10 -> Points = 0 + 10<sup>2</sup> = 100</p>\r\n<p>This could not be sliced further therefore return 100.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= length(S) <= 500</code></li>\r\n    <li><code>'a' <= S[i] <= 'z'</code></li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits</h3>\r\n<ul>\r\n    <li>Time Limit: 10 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages</h3>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, Java 18, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Curefit_27july",
        "company_id": 335
    }
]