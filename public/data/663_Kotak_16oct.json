[
    {
        "id": 1882,
        "title": "Donation",
        "problem_statement": "<h1>Donation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are 10<sup>9</sup> empty handed people standing in a line. You have to perform Q independent queries and you have been given an integer K. Each query is of type:</p>\r\n<ul>\r\n    <li>L R Y: Donate Y coin to each person standing at position X such that L &le; X &le; R.</li>\r\n</ul>\r\n<p>After performing the given Q queries, print the positions (one-based index) of the first K people having a prime number of coins.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the function <code>K_Prime</code>. This function takes the following 3 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>Q</code>: Represents the number of queries.</li>\r\n    <li><code>queries</code>: Represent the container containing all the queries.</li>\r\n    <li><code>K</code>: Represents the number of numbers that need to be printed.</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code>, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer <code>Q</code> denoting the number of queries.</li>\r\n            <li>The second line contains an integer <code>K</code> denoting the number of people needed to be printed.</li>\r\n            <li>The next <code>Q</code> lines contain three space-separated integers <code>L</code>, <code>R</code> and <code>Y</code> denoting the range of positions of people that have to be donated and the number of coins that needs to be donated.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>For each test case, return positions of the first <code>K</code> people having a prime number of coins. If the number of people having a prime number of coins is less than <code>K</code>, return -1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 10</code></li>\r\n    <li><code>1 &le; Q &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; K &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; L &le; R &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; Y &le; 10<sup>6</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3\r\n2\r\n2 5 1\r\n1 3 2\r\n1 8 3\r\nOutput:\r\n4 5</code></pre>\r\n<p><strong>Explanation:</strong> No explanation provided.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<long long> K_Prime(int Q, const std::vector<std::vector<int>>& queries, int K) {\n        // Core logic goes here\n        return {};\n    }\n};\n\nvoid solve() {\n    int Q;\n    std::cin >> Q;\n    int K;\n    std::cin >> K;\n    std::vector<std::vector<int>> queries(Q, std::vector<int>(3));\n    for (int i = 0; i < Q; ++i) {\n        std::cin >> queries[i][0] >> queries[i][1] >> queries[i][2];\n    }\n\n    Solution sol;\n    std::vector<long long> result = sol.K_Prime(Q, queries, K);\n\n    if (result.size() == 1 && result[0] == -1) {\n        std::cout << -1 << \"\\n\";\n    } else {\n        for (size_t i = 0; i < result.size(); ++i) {\n            std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n        }\n        std::cout << \"\\n\";\n    }\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int t;\n    std::cin >> t;\n    while (t--) {\n        solve();\n    }\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Kotak_16oct",
        "company_id": 663
    }
]