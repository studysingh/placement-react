[
    {
        "id": 1861,
        "title": "Product Selection",
        "problem_statement": "<h1>Product Selection</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Tom is performing an experiment in which he has to select N products. Each product has two attributes i.e. energy and weight. All the products are either manufactured by Reds Ltd. or Blues Ltd. The products manufactured by Blues Ltd. cannot function alone and need to be selected with some other product of the same company. The products from Reds Ltd., on the other hand, can be selected independently. Tom has to select products such that the total weight of the selected products does not exceed the weight W and the selected products have the maximum total energy value. Write an algorithm to help Tom find the maximum energy.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of two space-separated integers - N and W, representing the number of products to select and the threshold value of the total weight of N selected products, respectively.</p>\r\n<p>The next N lines consist of three space-separated integers - e, m and c, representing the energy, weight and the manufacturing company marked as 0 or 1 (0: Reds Ltd, 1: Blues Ltd.), respectively.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print an integer representing the maximum energy.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= W &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= e, m &lt;= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 10\r\n4 5 0\r\n2 3 1\r\n3 3 1\r\n4 2 0\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> The products (1) and (4) can be taken alone but products (2) and (3) can not be taken alone. The optimal solution is to choose products (2), (3) and (4) and the maximum possible energy is 9.</p>\r\n\r\n<p>The following boilerplate code is provided for input/output handling in Java:</p>\r\n<pre><code class='language-javascript'>/*\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Scanner;\r\n\r\npublic class Solution {\r\n    public static void main(String args[]) {\r\n        // Use either of these methods for input\r\n\r\n        //BufferedReader\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        String name1 = br.readLine(); // Read input from STDIN\r\n        System.out.println(\"Hello \" + name1); // Write output to STDOUT\r\n\r\n        //Scanner\r\n        Scanner s = new Scanner(System.in);\r\n        String name2 = s.nextLine(); // Read input from STDIN\r\n        System.out.println(\"Hello \" + name2); // Write output to STDOUT\r\n    }\r\n}\r\n*/\r\n// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Scanner;\r\n\r\nclass Solution {\r\n    public static void main(String args[]) {\r\n        // Write your code here\r\n    }\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Product {\n    int energy;\n    int weight;\n};\n\nclass Solution {\npublic:\n    long long solve(int N, int W, const std::vector<Product>& reds, const std::vector<Product>& blues) {\n        // Core logic to find the maximum energy goes here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N, W;\n    std::cin >> N >> W;\n\n    std::vector<Product> reds;\n    std::vector<Product> blues;\n\n    for (int i = 0; i < N; ++i) {\n        int e, m, c;\n        std::cin >> e >> m >> c;\n        if (c == 0) {\n            reds.push_back({e, m});\n        } else {\n            blues.push_back({e, m});\n        }\n    }\n\n    Solution solver;\n    long long result = solver.solve(N, W, reds, blues);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_16oct",
        "company_id": 656
    },
    {
        "id": 1862,
        "title": "Defuse the Bomb",
        "problem_statement": "<h1>Defuse the Bomb</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>During the war, the enemy battalion has planted a bomb in your bunker. Your informer has sent you a message of the enemy which contains a list having N numbers and a key. The numbers are used to construct a sequence to defuse the bomb. According to your informer, the logic to extract the sequence from the whole message is by replacing each number with the sum of the next key numbers. When the value of the key is negative, the number is replaced by the sum of the previous key numbers. The series of numbers is considered in a cyclic fashion for the last key numbers.</p>\r\n<p>Write an algorithm that finds the sequence to defuse the bomb.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of two space-separated integers - N and key representing the size of the list and the key, respectively.</p>\r\n<p>The second line consists of N space-separated integers - arr[1], arr[2], ..., arr[N], representing the elements of the list.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print N space-separated integers representing the sequence to defuse the bomb.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 3\r\n4 2 -5 11\r\nOutput:\r\n8 10 17 1</code></pre>\r\n<p><strong>Explanation:</strong>\r\nGiven <code>N = 4</code> and <code>key = 3</code>. We need to replace each number with the sum of the next 3 numbers in a cyclic manner.</p>\r\n<ul>\r\n    <li>For the first element <code>4</code>, the next 3 elements are <code>2, -5, 11</code>. Their sum is <code>2 + (-5) + 11 = 8</code>.</li>\r\n    <li>For the second element <code>2</code>, the next 3 elements are <code>-5, 11, 4</code> (<code>4</code> is cyclic from the start). Their sum is <code>-5 + 11 + 4 = 10</code>.</li>\r\n    <li>For the third element <code>-5</code>, the next 3 elements are <code>11, 4, 2</code>. Their sum is <code>11 + 4 + 2 = 17</code>.</li>\r\n    <li>For the fourth element <code>11</code>, the next 3 elements are <code>4, 2, -5</code>. Their sum is <code>4 + 2 + (-5) = 1</code>.</li>\r\n</ul>\r\n<p>Therefore, the defusal sequence is <code>8 10 17 1</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt; N &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>\r\n    <li><code>1 &lt;= i &lt;= N</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n\nclass Solution {\npublic:\n    /**\n     * @brief Finds the sequence to defuse the bomb.\n     * @param arr The list of numbers from the enemy's message.\n     * @param key The key to determine the sum range.\n     * @return A vector of integers representing the defusal sequence.\n     */\n    std::vector<int> defuseBomb(const std::vector<int>& arr, int key) {\n        // Core logic to defuse the bomb goes here.\n        int n = arr.size();\n        if (n == 0) {\n            return {};\n        }\n        std::vector<int> result(n, 0);\n        return result;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n, key;\n    std::cin >> n >> key;\n\n    std::vector<int> arr(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> arr[i];\n    }\n\n    Solution solution;\n    std::vector<int> result = solution.defuseBomb(arr, key);\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_16oct",
        "company_id": 656
    },
    {
        "id": 1863,
        "title": "Maximum Difference with Order",
        "problem_statement": "<h1>Maximum Difference with Order</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a list of N integers, output the maximum difference of two elements where the large number appears after the smaller number.</p>\r\n<p><strong>Input:</strong></p>\r\n<p>The first line of the input consists of an integer - <code>inputArr_size</code>, representing the size of the list (N).</p>\r\n<p>The second line of the input consists of N space-separated integers - <code>inputArr</code>, representing the elements of the given list.</p>\r\n<p><strong>Output:</strong></p>\r\n<p>Print an integer representing the maximum difference between two elements. If such a solution can't be found, then print 0.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n2 3 10 6 4 8 1\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> The difference between 2 and 10 is 8. We can't consider 10 and 1 because the large number (10) does not appear after the smaller number (1). So, the output should be 8.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt; inputArr_size &lt; 10<sup>3</sup></code></li>\r\n    <li><code>-10<sup>5</sup> &le; inputArr[i] &le; 10<sup>5</sup></code>; Where <code>i</code> representing the index of the <code>inputArr</code>.</li>\r\n    <li><code>0 &le; i &lt; inputArr_size</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int solve(int inputArr_size, const std::vector<int>& inputArr) {\n        // Core logic goes here\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int inputArr_size;\n    std::cin >> inputArr_size;\n\n    std::vector<int> inputArr(inputArr_size);\n    for (int i = 0; i < inputArr_size; ++i) {\n        std::cin >> inputArr[i];\n    }\n\n    Solution solver;\n    int result = solver.solve(inputArr_size, inputArr);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_16oct",
        "company_id": 656
    },
    {
        "id": 1864,
        "title": "Product Selection for Maximum Energy",
        "problem_statement": "<h1>Product Selection for Maximum Energy</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Tom is performing an experiment in which he has to select N products. Each product has two attributes i.e. energy and weight. All the products are either manufactured by Reds Ltd. or Blues Ltd. The products manufactured by Blues Ltd. cannot function alone and need to be selected with some other product of the same company. The products from Reds Ltd., on the other hand, can be selected independently. Tom has to select products such that the total weight of the selected products does not exceed the weight W and the selected products have the maximum total energy value. Write an algorithm to help Tom find the maximum energy.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line of the input consists of two space-separated integers - N and W, representing the number of products to select and the threshold value of the total weight of N selected products, respectively.</p>\r\n<p>The next N lines consist of three space-separated integers - e, m and c, representing the energy, weight and the manufacturing company marked as 0 or 1 (0: Reds Ltd, 1: Blues Ltd.), respectively.</p>\r\n\r\n<h2>Output</h2>\r\n<p>Print an integer representing the maximum energy.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= W &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= e, m &lt;= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 10\r\n4 5 0\r\n2 3 1\r\n3 3 1\r\n4 2 0\r\nOutput:\r\n9</code></pre>\r\n<p><strong>Explanation:</strong> The products (1) and (4) can be taken alone but products (2) and (3) can not be taken alone. The optimal solution is to choose products (2), (3) and (4) and the maximum possible energy is 9.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstruct Product {\n    int e;\n    int m;\n    int c;\n};\n\nclass Solution {\npublic:\n    long long solve(int N, int W, const std::vector<Product>& products) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N, W;\n    std::cin >> N >> W;\n\n    std::vector<Product> products(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> products[i].e >> products[i].m >> products[i].c;\n    }\n\n    Solution solution;\n    long long result = solution.solve(N, W, products);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "opentext_16oct",
        "company_id": 656
    }
]