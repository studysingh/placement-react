[
    {
        "id": 1097,
        "title": "Maximize Array Value",
        "problem_statement": "<h1>Maximize Array Value</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of n positive integers with 1-based indexing, you can perform the following operation any number of times:</p>\r\n<ol>\r\n    <li>Choose any index i where 2 &le; i &le; n</li>\r\n    <li>Choose any value x where 1 &le; x &le; arr[i]</li>\r\n    <li>Set arr[i-1] to arr[i-1] + x</li>\r\n    <li>Set arr[i] to arr[i] - x</li>\r\n</ol>\r\n<p>Your task is to minimize the maximum value in the array and return this minimum possible maximum.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [1, 5, 7, 6]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> Optimal sequence of operations:</p>\r\n<ul>\r\n    <li>Operation 1: Choose i = 3, x = 4\r\n        <ul>\r\n            <li>Replace arr[2] with 5+4 = 9</li>\r\n            <li>Replace arr[3] with 7-4 = 3</li>\r\n            <li>Array becomes [1, 9, 3, 6] with maximum 9</li>\r\n        </ul>\r\n    </li>\r\n    <li>Operation 2: Choose i = 2, x = 4\r\n        <ul>\r\n            <li>Replace arr[1] with 1+4 = 5</li>\r\n            <li>Replace arr[2] with 9-4 = 5</li>\r\n            <li>Array becomes [5, 5, 3, 6] with maximum 6</li>\r\n        </ul>\r\n    </li>\r\n    <li>Operation 3: Choose i = 4, x = 1\r\n        <ul>\r\n            <li>Replace arr[3] with 3+1 = 4</li>\r\n            <li>Replace arr[4] with 6-1 = 5</li>\r\n            <li>Array becomes [5, 5, 4, 5] with maximum 5</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The minimum possible maximum value is 5.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: n = 3, arr = [5, 15, 19]\r\nOutput: 13</code></pre>\r\n<p><strong>Explanation:</strong> One sequence that produces the optimal answer is:</p>\r\n<ul>\r\n    <li>Operation 1: i = 3, x = 6 &rarr; [5, 21, 13]. (Initial array: [5, 15, 19]. With i=3, x=6: arr[2] becomes 15+6=21, arr[3] becomes 19-6=13. Array is now [5, 21, 13])</li>\r\n    <li>Operation 2: i = 2, x = 8 &rarr; [13, 13, 13]. (Current array: [5, 21, 13]. With i=2, x=8: arr[1] becomes 5+8=13, arr[2] becomes 21-8=13. Array is now [13, 13, 13])</li>\r\n</ul>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [10, 3, 5, 7]\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> In this case, there is no way to reduce the maximum.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; n &le; 10<sup>5</sup></li>\r\n    <li>1 &le; arr[i] &le; 10<sup>9</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "oracle_31july",
        "company_id": 359
    },
    {
        "id": 1098,
        "title": "Table of Contents",
        "problem_statement": "<h1>Table of Contents</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Design a system to extract a Table of Contents (TOC) from a document written in a simple markup format. The TOC should be structured based on the following rules:</p>\r\n<p>1. <strong>Chapter Titles:</strong></p>\r\n<ul>\r\n    <li>A line that begins with a single # followed by a space (# Title) represents a chapter.</li>\r\n</ul>\r\n<p>2. <strong>Section Titles:</strong></p>\r\n<ul>\r\n    <li>A line that begins with a double ## followed by a space (## Title) represents a section within a chapter.</li>\r\n</ul>\r\n<p>The output should list chapter titles as top-level entries and section titles as indented sub-entries under their respective chapters. Note that each number is followed by a period and the last period is followed by 1 space.</p>\r\n<p>For example, if the input text is:</p>\r\n<pre><code class='language-text'># Algorithms\r\nThis chapter covers the most basic\r\nalgorithms.\r\n## Sorting\r\nQuicksort is fast and widely used in practice\r\nMerge sort is a deterministic algorithm\r\n## Searching\r\nDFS and BFS are widely used graph searching\r\nalgorithms\r\nsome variants of DFS are also used in game\r\ntheory applications\r\n# Data structures\r\nThis chapter is all about data structures\r\nIt's a draft for now and will contain more\r\nsections in the future\r\n## Binary Search Trees</code></pre>\r\n<p>The table of contents that must be produced is:</p>\r\n<pre><code class='language-text'>1. Algorithms\r\n1.1. Sorting\r\n1.2. Searching\r\n2. Data Structures\r\n2.1. Binary Search Trees</code></pre>\r\n\r\n<p>Complete the function `tableOfContents` in the editor with the following parameter:</p>\r\n<pre><code class='language-javascript'>string text[n] : the lines in the document</code></pre>\r\n<p><strong>Returns</strong></p>\r\n<pre><code class='language-javascript'>string[] : each string is a line in the table of contents</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>10\r\n# Cars\r\nCars came into global use during the 20th\r\ncentury\r\nMost definitions of car say they run\r\nprimarily on roads\r\n## Sedan\r\nSedan's first recorded use as a name for a\r\ncar body was in 1912\r\n## Coupe\r\nA coupe is a passenger car with a sloping\r\nrear roofline and generally two doors\r\n## SUV\r\nThe predecessors to SUVs date back to\r\nmilitary and low-volume models from the\r\nlate 1930s\r\nThere is no commonly agreed definition of\r\nan SUV, and usage varies between\r\ncountries.</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>1. Cars\r\n1.1. Sedan\r\n1.2. Coupe\r\n1.3. SUV</code></pre>\r\n<p><strong>Explanation:</strong> The first input line indicates n = 10 lines of text. There is only 1 chapter in the input, containing 3 sections. All the lines that don't begin with # or ## are ignored in the table of contents.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>10\r\n# Games\r\n## Board\r\n## Computer\r\n## Zero sum\r\n## Multiplayer\r\n# Strategies\r\n## Greedy\r\n## Tree pruning\r\n## Others\r\n# Summary</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>1. Games\r\n1.1. Board\r\n1.2. Computer\r\n1.3. Zero sum\r\n1.4. Multiplayer\r\n2. Strategies\r\n2.1. Greedy\r\n2.2. Tree pruning\r\n2.3. Others\r\n3. Summary</code></pre>\r\n<p><strong>Explanation:</strong> Again, the first input line indicates there are n = 10 lines of text. This text already looks like an outline because it contains only chapters and sections. Chapter 1 has 4 sections in it. Chapter 2 has 3 sections, and Chapter 3 has no sections.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 1000</code></li>\r\n    <li><code>1 <= length of text[i] <= 100</code></li>\r\n    <li>When a line starts with `#` or with `##`, these special characters are always followed by a space.</li>\r\n    <li>The first line of the text is guaranteed to be a chapter line.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "oracle_31july",
        "company_id": 359
    }
]