[
    {
        "id": 908,
        "title": "Cryptarithm",
        "problem_statement": "<h1>Cryptarithm</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A cryptarithm is a mathematical puzzle where the goal is to find the correspondence between letters and digits such that the given arithmetic equation consisting of letters holds true.</p>\r\n<p>Given a cryptarithm as an array of strings <code>crypt</code>, count the number of its valid solutions.</p>\r\n<p>The solution is valid if each letter represents a different digit, and the leading digit of any multi-digit number is not zero.</p>\r\n<p><code>crypt</code> has the following structure: <code>[word1, word2, word3]</code>, which stands for the <code>word1 + word2 = word3</code> cryptarithm.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"SEND\", \"MORE\", \"MONEY\"]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Because there is only one solution to this cryptarithm: <code>O = 0, M = 1, Y = 2, E = 5, N = 6, D = 7, R = 8, and S = 9</code> (which means 9567 + 1085 = 10652).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"GREEN\", \"BLUE\", \"BLACK\"]\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> There are 12 possible valid solutions:</p>\r\n<ul>\r\n<li>34889 + 6138 = 41027</li>\r\n<li>18559 + 2075 = 20634</li>\r\n<li>72449 + 8064 = 80513</li>\r\n<li>48229 + 5372 = 53601</li>\r\n<li>47119 + 5261 = 52380</li>\r\n<li>36887 + 4028 = 40915</li>\r\n<li>83447 + 9204 = 92651</li>\r\n<li>74665 + 8236 = 82901</li>\r\n<li>65884 + 7308 = 73192</li>\r\n<li>57883 + 6408 = 64291</li>\r\n<li>57881 + 6428 = 64309</li>\r\n<li>83441 + 9264 = 92705</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"ONE\", \"TWO\", \"THREE\"]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Because there are no valid solutions.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>crypt</code> is an array of three non-empty strings containing only uppercase English letters.</li>\r\n<li><code>1 <= crypt[i].length <= 35</code> for each string in <code>crypt</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_4july",
        "company_id": 282
    },
    {
        "id": 909,
        "title": "Bank Transaction Processor",
        "problem_statement": "<h1>Bank Transaction Processor</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You've been asked to program a bot for a popular bank that will automate the management of incoming requests. Every request has its own timestamp in seconds, and it is guaranteed that all requests come sequentially, i.e. the timestamp is strictly increasing.</p>\r\n<p>There are two types of incoming requests:</p>\r\n<ul>\r\n    <li><code>deposit &lt;timestamp&gt; &lt;holder_id&gt; &lt;amount&gt;</code> - request to deposit <code>&lt;amount&gt;</code> amount of money in the <code>&lt;holder_id&gt;</code> account;</li>\r\n    <li><code>withdraw &lt;timestamp&gt; &lt;holder_id&gt; &lt;amount&gt;</code> - request to withdraw <code>&lt;amount&gt;</code> amount of money from the <code>&lt;holder_id&gt;</code> account. As a bonus, bank also provides a cashback policy - 2% of the withdrawn amount rounded down to the nearest integer will be returned to the account exactly 24 hours after the request timestamp. If the cashback and deposit/withdrawal happen at the same timestamp, assume cashback happens earlier.</li>\r\n</ul>\r\n<p>Your system should also handle invalid requests. There are two types of invalid requests:</p>\r\n<ul>\r\n    <li>invalid account number;</li>\r\n    <li>withdrawal of a larger amount of money than is currently available.</li>\r\n</ul>\r\n<p>For the given list of initial <strong>balances</strong> and <strong>requests</strong>, return the state of <strong>balances</strong> straight after the last request has been processed, or an array of a single element <code>[-&lt;request_id&gt;]</code> (please note the minus sign), where <code>&lt;request_id&gt;</code> is the 1-based index of the first invalid request. Note that cashback requests which haven't happened before the last request should be ignored.</p>\r\n<p>The function signature is:</p>\r\n<pre><code class='language-cpp'>vector&lt;int&gt; solution(vector&lt;int&gt; balances, vector&lt;string&gt; requests)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: balances = [1000, 1500], requests = [\"withdraw 1613327630 2 480\", \"withdraw 1613327644 2 800\", \"withdraw 1614105244 1 100\", \"deposit 1614108844 2 200\", \"withdraw 1614108845 2 150\"]\r\nOutput: [900, 295]</code></pre>\r\n<p><strong>Explanation:</strong> Here are the states of balances after each request:</p>\r\n<ul>\r\n    <li>initially: <code>[1000, 1500]</code></li>\r\n    <li><code>\"withdraw 1613327630 2 480\"</code>: <code>[1000, 1020]</code></li>\r\n    <li><code>\"withdraw 1613327644 2 800\"</code>: <code>[1000, 220]</code></li>\r\n    <li>At 1613414030 the 2nd account will receive the cashback of 480 * 0.02 = 9.6, which is rounded down to 9: <code>[1000, 229]</code></li>\r\n    <li>At 1613414044 the 2nd account will receive the cashback of 800 * 0.02 = 16: <code>[1000, 245]</code></li>\r\n    <li><code>\"withdraw 1614105244 1 100\"</code>: <code>[900, 245]</code></li>\r\n    <li><code>\"deposit 1614108844 2 200\"</code>: <code>[900, 445]</code></li>\r\n    <li><code>\"withdraw 1614108845 2 150\"</code>: <code>[900, 295]</code> which is the answer.</li>\r\n    <li>Cashbacks for the last two withdrawals happen at 1614191644 and 1614195245, which is after the last request timestamp 1614108845, so they are ignored.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: balances = [20, 1000, 500, 40, 90], requests = [\"deposit 1613327630 3 400\", \"withdraw 1613327635 1 20\", \"withdraw 1613327651 1 50\", \"deposit 1613327655 1 50\"]\r\nOutput: [-3]</code></pre>\r\n<p><strong>Explanation:</strong> Here are the states of balances after each request:</p>\r\n<ul>\r\n    <li>initially: <code>[20, 1000, 500, 40, 90]</code></li>\r\n    <li><code>\"deposit 1613327630 3 400\"</code>: <code>[20, 1000, 900, 40, 90]</code></li>\r\n    <li><code>\"withdraw 1613327635 1 20\"</code>: <code>[0, 1000, 900, 40, 90]</code></li>\r\n    <li><code>\"withdraw 1613327651 1 50\"</code>: it is not possible to withdraw 50 from the 1st account, so the request is invalid.</li>\r\n    <li>the rest of the requests are not processed</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= requests.length &lt;= 100</code></li>\r\n    <li>Execution time limit: 0.5 seconds (C++)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_4july",
        "company_id": 282
    },
    {
        "id": 910,
        "title": "Add Huge Integers",
        "problem_statement": "<h1>Add Huge Integers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're given two huge integers represented by singly-linked lists. Each node in the linked list contains an integer <code>value</code> from 0 to 9999. These values are considered as blocks of exactly 4 digits when forming the complete number. For example, a list <code>[123, 4, 5]</code> represents the number formed by concatenating <code>123</code>, <code>0004</code>, and <code>0005</code>, which results in <code>12300040005</code>.</p>\r\n<p>The input numbers <code>a</code> and <code>b</code> are given without leading zeros (unless the number itself is 0, represented as <code>[0]</code>). Your task is to add these two huge integers and return the result as a new singly-linked list in the same format, also without leading zeros (unless the sum is 0).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = [9876, 5432, 1999], b = [1, 8001]\r\nOutput: [9876, 5434, 0]</code></pre>\r\n<p><strong>Explanation:</strong> The numbers represented are 987654321999 and 18001. Their sum is 987654340000.\r\n(987654321999 + 18001 = 987654340000)</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: a = [123, 4, 5], b = [100, 100, 100]\r\nOutput: [223, 104, 105]</code></pre>\r\n<p><strong>Explanation:</strong> The numbers represented are 12300040005 and 1000100100. Their sum is 22301040105.\r\n(12300040005 + 1000100100 = 22301040105)</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 <= a size <= 10^4</code></li>\r\n    <li><code>0 <= b size <= 10^4</code></li>\r\n    <li><code>0 <= element value <= 9999</code> for all nodes in <code>a</code> and <code>b</code>.</li>\r\n    <li>The overall numbers <code>a</code> and <code>b</code> will not have leading zeros (e.g., <code>[0, 1234]</code> is not a valid input for <code>1234</code>, use <code>[1234]</code> instead). The only exception is if the number itself is 0, which is represented as <code>[0]</code>.</li>\r\n    <li>The result should also follow the no leading zeros rule.</li>\r\n</ul>\r\n\r\n<h2>Follow-up</h2>\r\n<p>The problem implies the use of a singly-linked list structure. The definition for <code>ListNode</code> is provided as:</p>\r\n<pre><code class='language-javascript'>// singly-linked lists are already defined with this interface:\r\n// template&lt;typename T&gt;\r\n// struct ListNode {\r\n//   ListNode(const T &amp;v) : value(v), next(nullptr) {}\r\n//   T value;\r\n//   ListNode *next;\r\n// };\r\n//\r\nListNode&lt;int&gt;* solution(ListNode&lt;int&gt;* a, ListNode&lt;int&gt;* b) {\r\n    // Your implementation here\r\n}</code></pre>\r\n<p>Execution time limit: 0.5 seconds (cpp)</p>\r\n<p>Memory limit: 1 GB</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_4july",
        "company_id": 282
    },
    {
        "id": 911,
        "title": "Sum of Two Fractions",
        "problem_statement": "<h1>Sum of Two Fractions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your task is to find the sum of two fractions, expressed in the form X/Y and U/V, where X, Y, U, and V are four integers. Compute their sum and reduce it to its lowest indivisible state: A/B.</p>\r\n<p>For example:</p>\r\n<ul>\r\n    <li>2/6+2/6 equals 4/6, which should be reduced to 2/3.</li>\r\n    <li>7/10+13/10 equals 20/10 which should be reduced to 2/1.</li>\r\n</ul>\r\n<p>You are given an array of strings, which contains several expressions in the form \"X/Y+U/V\". Return a string array, where the i<sup>th</sup> element is the result for the i<sup>th</sup> expression in the form \"A/B\".</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: fractions = [\"2/6+2/6\", \"7/10+13/10\"]\r\nOutput: [\"2/3\", \"2/1\"]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= fractions.length &lt;= 500</code></li>\r\n    <li><code>fractions[i]</code> has the form \"X/Y+U/V\"</li>\r\n    <li>where X, Y, U, V are integers.</li>\r\n    <li><code>1 &lt;= X, Y, U, V &lt;= 2000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_4july",
        "company_id": 282
    }
]