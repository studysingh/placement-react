[
    {
        "id": 1058,
        "title": "Find Parent in Tree",
        "problem_statement": "<h1>Find Parent in Tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A sequence of processes is represented as a tree structure. Each process is numbered sequentially starting from 1.</p>\r\n<p>Process number <code>n</code> spawns <code>n</code> new child processes. For example:</p>\r\n<ul>\r\n    <li>Process 1 spawns 1 child process.</li>\r\n    <li>Process 2 spawns 2 child processes.</li>\r\n    <li>Process 3 spawns 3 child processes.</li>\r\n</ul>\r\n<p>Given a specific process number, determine the process number of its parent.</p>\r\n<p>Complete the <code>findParent</code> function in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int processNumber</code>: the process number to query</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int</code>: the process number of the parent</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: processNumber = 6\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Refer to the graph in the problem statement. The child of 1 is 2. Children of 2 are 3 and 4. The children of 3 are 5, 6, and 7. Therefore, the process number of the parent process of the given process is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= processNumber &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Msci_30july",
        "company_id": 345
    },
    {
        "id": 1059,
        "title": "Freelance Hiring Platform HR Query",
        "problem_statement": "<h1>Freelance Hiring Platform HR Query</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A company's HR department needs an SQL query against data from a freelance hiring platform.</p>\r\n<p>The result should have the following columns: <code>first_name</code>, <code>last_name</code>, <code>email</code>, <code>job_success_score</code>.</p>\r\n<p>It should be sorted in descending order by <code>job_success_score</code>, then in ascending order by <code>first_name</code> and <code>last_name</code>.</p>\r\n<p>Limit the result to the first ten records.</p>\r\n\r\n<h2>Schema</h2>\r\n<h3>Table: profiles</h3>\r\n<pre><code class='language-text'>+-------------+--------------+----------------------------------+\r\n| name        | type         | description                      |\r\n+-------------+--------------+----------------------------------+\r\n| id          | SMALLINT     | unique id, primary key           |\r\n| first_name  | VARCHAR(255) |                                  |\r\n| last_name   | VARCHAR(255) |                                  |\r\n| email       | VARCHAR(255) |                                  |\r\n| is_verified | SMALLINT     | 1 = True, 0 = False              |\r\n+-------------+--------------+----------------------------------+</code></pre>\r\n\r\n<h3>Table: stats</h3>\r\n<pre><code class='language-text'>+-------------------+----------+-------------------------+\r\n| name              | type     | description             |\r\n+-------------------+----------+-------------------------+\r\n| profile_id        | SMALLINT | foreign key into profiles |\r\n| job_success_score | SMALLINT |                         |\r\n+-------------------+----------+-------------------------+</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<p><strong>profiles table:</strong></p>\r\n<pre><code class='language-text'>id | first_name | last_name | email                   | is_verified\r\n---|------------|-----------|-------------------------|-----------\r\n1  | Juha       | Bahroun   | jbahroun@wygia.org      | 0\r\n2  | Dana       | Halburton | dhalburton@wygia.org    | 1\r\n3  | Agneta     | Dutch     | adutch@hebrew.co.uk     | 1\r\n4  | Kendal     | Sylvester | ksylvester@canalblog.com| 1\r\n5  | Kristina   | Blasdall  | kblasdall@buzzfeed.com  | 1\r\n6  | Rona       | Ragadale  | rragadale@buzzfeed.com  | 1\r\n7  | Harold     | Molloy    | hmolloy@ycombinator.com | 1\r\n8  | Barri      | Hertogs   | bhertogs@2oc.ac.uk      | 0\r\n9  | Gerri      | Proddie   | gproddie@topcy.com      | 1\r\n10 | Sophie     | Messenger | smessenger@myspace.com  | 1\r\n11 | Ashby      | Philipson | aphilipson@typepad.com  | 1\r\n12 | Kayla      | Jestico   | kjestico@oon.ne.jp      | 1\r\n13 | Munroe     | Cheveallau| mcheveallau@yandex.ru   | 1\r\n14 | Etheline   | Choake    | echoake@hao123.com      | 1\r\n15 | Marian     | Zambonari | mzambonari@cbc.ca       | 1\r\n16 | Hersch     | Bleasdale | hbleasdale@wunderground.com | 1\r\n17 | Jori       | MacFaell  | jmacfaell@va.gov        | 1\r\n18 | Margo      | Finnemore | mfinnemore@discovery.com| 1\r\n19 | Felicia    | Ramsdale  | framsdale@devhub.com    | 1\r\n20 | Demetris   | Arnet     | darnet@livejournal.com  | 1</code></pre>\r\n\r\n<p><strong>stats table:</strong></p>\r\n<pre><code class='language-text'>profile_id | job_success_score\r\n-----------|-----------------\r\n4          | 100\r\n1          | 100\r\n18         | 95\r\n5          | 95\r\n8          | 95\r\n10         | 95\r\n12         | 95\r\n13         | 95\r\n14         | 90\r\n17         | 90\r\n7          | 90\r\n15         | 90\r\n11         | 85\r\n16         | 85\r\n9          | 85\r\n6          | 85\r\n2          | 85\r\n3          | 75\r\n19         | 75</code></pre>\r\n\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>first_name | last_name | email                   | job_success_score\r\n-----------|-----------|-------------------------|-----------------\r\nKendal     | Sylvester | ksylvester@canalblog.com| 100\r\nEtheline   | Choake    | echoake@hao123.com      | 98\r\nKayla      | Jestico   | kjestico@oon.ne.jp      | 98\r\nKristina   | Ragadale  | kragadale@buzzfeed.com  | 98\r\nMargo      | Finnemore | mfinnemore@discovery.com| 98\r\nMunroe     | Cheveallau| mcheveallau@yandex.ru   | 98\r\nSophie     | Messenger | smessenger@myspace.com  | 98\r\nDemetris   | Arnet     | darnet@livejournal.com  | 90\r\nHarold     | Molloy    | hmolloy@ycombinator.com | 90\r\nJori       | MacFaell  | jmacfaell@va.gov        | 90</code></pre>\r\n<p><strong>Explanation:</strong> The output includes profiles with a job success score greater than 90 and where <code>is_verified</code> is 1. The results are sorted by <code>job_success_score</code> in descending order, then by <code>first_name</code> and <code>last_name</code> in ascending order, and limited to the top 10 records.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Only profiles that have a 'JSS' (Job Success Score) greater than 90 should be included.</li>\r\n    <li>Only those profiles that have passed the verification process (<code>is_verified</code> is 1) should be included.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Msci_30july",
        "company_id": 345
    },
    {
        "id": 1060,
        "title": "Maximize Array Correlation",
        "problem_statement": "<h1>Maximize Array Correlation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For two arrays <code>a</code> and <code>b</code> of equal length, the array correlation is defined as the sum of all values <code>b[i]</code> where <code>b[i]</code> is greater than <code>a[i]</code>.</p>\r\n<p>Given two integer arrays <code>a</code> and <code>b</code> of the same length, rearrange the elements of array <code>b</code> to maximize the array correlation. Return the maximum possible array correlation value.</p>\r\n<p><strong>Note:</strong> You are not allowed to rearrange the elements of the array <code>a</code>.</p>\r\n<p><strong>Example Illustration:</strong> If <code>n = 5, a = [1, 2, 3, 4, 5], b = [3, 5, 4, 6, 2]</code>. One possible rearrangement of <code>b</code> is <code>[2, 3, 4, 5, 6]</code>. In this specific rearrangement, for each index, the integers in <code>b</code> are greater than those in <code>a</code>. The array correlation would then be 2 + 3 + 4 + 5 + 6 = 20.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaxArrayCorrelation</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>a[n]</code>: the fixed order array</li>\r\n    <li><code>b[n]</code>: the array to reorder</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>long int</code>: the maximum possible array correlation</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\na = [1, 4, 2, 1, 3]\r\nb = [2, 3, 1, 2, 2]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The second array can be rearranged to <code>b = [2, 1, 3, 2, 2]</code>. <code>b[i] > a[i]</code> for <code>i = 0, 3,</code> and <code>4</code>, and the array correlation is <code>2 + 3 + 2 = 7</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 x 10^5</code></li>\r\n    <li><code>1 <= a[i], b[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Msci_30july",
        "company_id": 345
    }
]