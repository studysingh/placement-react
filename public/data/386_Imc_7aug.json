[
    {
        "id": 1147,
        "title": "Waste reduction",
        "problem_statement": "<h1>Waste reduction</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You work for a pharmaceutical company that produces liquid medicine. Patients requiring these medications often require different amounts. To package the medication for delivery, you can choose between different sets of containers. Each container set specifies the sizes of containers it allows. For example, set 1 might offer containers with size 300 ml and 200 ml, while set 2 might offer containers with size 400 ml, 250 ml and 100 ml.</p>\r\n<p>When fulfilling a customer order for a given amount, a single container must be used and filled completely. If a container does not exist that matches the required amount, the next largest container is used. The extra medication included in that larger container (i.e., the size of the container - required amount) is considered waste. Your job is to evaluate different sets of containers and identify the set of containers that will minimize the total waste for a given collection of orders. Return the zero-based index of the set of containers which minimizes the overall waste. If multiple sets provide the same minimum waste, return the lower index. If no set satisfies the required amounts, return -1.</p>\r\n<p><strong>NOTE:</strong> The containers 2D array will be given in order of the sets, i.e., the sizes for the 0-index set will be followed by sizes of 1-index set and so on. For each set, the given sizes will also be sorted in ascending order.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function `chooseContainers` in the editor below.</p>\r\n<p>chooseContainers has the following parameter(s):</p>\r\n<ul>\r\n    <li>`int requirements[n]`: the size requirements</li>\r\n    <li>`int numContainerSets`: the number of container sets</li>\r\n    <li>`int containers[totalNumContainers][2]`: the first column signifies the index of the container set and second signifies one container size</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<ul>\r\n    <li>`int`: the index of the container set to choose or -1 if none will work</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider the following inputs:</p>\r\n<pre><code class='language-text'>n = 4 (number of required amounts)\r\nrequirements = [4, 6, 6, 7]\r\nnumContainerSets = 3\r\ncontainers = [[0, 3], [0, 5], [0, 7], [1, 6], [1, 8], [1, 9], [2, 3], [2, 5], [2, 6]]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The containers array is a 2D array where the first element is the container set id and the second the size. In this case, the first set (id 0) has three containers with sizes 3, 5 and 7. The second set has containers with sizes 6, 8 and 9, and the third set has sizes at 3, 5 and 6.</p>\r\n<ul>\r\n    <li><strong>Using the first set (id 0), containers: [3, 5, 7]:</strong>\r\n        <ul>\r\n            <li>For requirement 4: smallest available container >= 4 is 5. Waste: 5 - 4 = 1</li>\r\n            <li>For requirement 6: smallest available container >= 6 is 7. Waste: 7 - 6 = 1</li>\r\n            <li>For requirement 6: smallest available container >= 6 is 7. Waste: 7 - 6 = 1</li>\r\n            <li>For requirement 7: smallest available container >= 7 is 7. Waste: 7 - 7 = 0</li>\r\n        </ul>\r\n        Total units wasted for Set 0: 1 + 1 + 1 + 0 = 3 units.\r\n    </li>\r\n    <li><strong>Using the second set (id 1), containers: [6, 8, 9]:</strong>\r\n        <ul>\r\n            <li>For requirement 4: smallest available container >= 4 is 6. Waste: 6 - 4 = 2</li>\r\n            <li>For requirement 6: smallest available container >= 6 is 6. Waste: 6 - 6 = 0</li>\r\n            <li>For requirement 6: smallest available container >= 6 is 6. Waste: 6 - 6 = 0</li>\r\n            <li>For requirement 7: smallest available container >= 7 is 8. Waste: 8 - 7 = 1</li>\r\n        </ul>\r\n        Total units wasted for Set 1: 2 + 0 + 0 + 1 = 3 units.\r\n    </li>\r\n    <li><strong>Using the third set (id 2), containers: [3, 5, 6]:</strong>\r\n        <ul>\r\n            <li>For requirement 7: The maximum capacity in this set is 6, which is less than the requirement of 7. Therefore, this set cannot be used.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Two sets of containers can be used that each result in 3 wasted units. The lower index set is at index 0.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nrequirements size n = 2\r\nrequirements = [4, 6]\r\nnumContainerSets = 2\r\ncontainers size totalNumContainers = 5\r\ncontainers[][] size columns = 2 (always)\r\ncontainers = [[0, 5], [0, 7], [0, 10], [1, 4], [1, 10]]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first container set (id 0) has sizes 5, 7 and 10. The waste using that set is (5-4) + (7-6) = 1 + 1 = 2.</p>\r\n<p>The second set (id 1) has sizes 4 and 10. The waste using that set is (4-4) + (10-6) = 0 + 4 = 4.</p>\r\n<p>It is better to use the first set, index 0.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nrequirements size n = 2\r\nrequirements = [10, 15]\r\nnumContainerSets = 3\r\ncontainers size totalNumContainers = 6\r\ncontainers[][] size columns = 2\r\ncontainers = [[0, 11], [0, 20], [1, 11], [1, 17], [2, 12], [2, 16]]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The wastes using the given container sets are 6, 3, and 3 respectively. The set with minimum waste and minimum index is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= n <= 10^5`</li>\r\n    <li>`1 <= numContainerSets <= 10^4`</li>\r\n    <li>`1 <= totalNumContainers <= 10^5`</li>\r\n    <li>`1 <= requirements[i] <= 10^9` (where `0 <= i < n`)</li>\r\n    <li>`0 <= containers[i][0] < numContainerSets` (where `0 <= i < totalNumContainers`)</li>\r\n    <li>`0 <= containers[i][1] <= 10^9` (where `0 <= i < totalNumContainers`)</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Imc_7aug",
        "company_id": 386
    },
    {
        "id": 1148,
        "title": "Chain of command",
        "problem_statement": "<h1>Chain of command</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An organization is made up of n people. The organizational structure can be represented as a tree, with each person representing a node in the tree. All but the root node has a single parent, representing the node's upstream reporting line. A node may have zero or more children, representing those people who report into them. If person 1 is the root of the tree, we can represent this structure in an array <code>parent</code>, where <code>parent[i]</code> represents the parent of node <code>i</code> (1-based indexing). Note that <code>parent[0] = -1</code>, to indicate no parent.</p>\r\n<p>Within this organization, directives may be issued from a person to all people reporting into them, including all descendants in the tree. These directives propagate as follows:</p>\r\n<ul>\r\n    <li>A person sends the directive to its direct child nodes in ascending order of their indices.</li>\r\n    <li>If a node has more than one child, the node waits for propagation to complete fully to each child's subtree before issuing the directive to the next child.</li>\r\n    <li>Each child node propagates the directive to its subtree using the same process.</li>\r\n    <li>The propagation stops when all nodes in the subtree have received the directive.</li>\r\n</ul>\r\n<p>For a single directive, it can be interesting to determine who was the k<sup>th</sup> person to receive it. This query can be modeled as a tuple: (person issuing the query, k). If k is greater than the total number of people reporting into the directive issuer (direct reports and descendants of their direct reports), we should return -1 to indicate that no k<sup>th</sup> person exists. For a given organization, we will want to evaluate q queries, where each query is evaluated independently.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findKthPerson</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int parent[n]</code>: Each <code>parent[i]</code> represents the parent of the i<sup>th</sup> node.</li>\r\n    <li><code>int queries[q][2]</code>: Each <code>queries[i]</code> consists of <code>[startNode, k]</code>.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int[]</code>: an array of integers of size q representing answers to the queries.</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>vector<int> findKthPerson(vector<int> parent, vector<vector<int>> queries) {\r\n    // Function body\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 9\r\nparent = [-1, 1, 1, 1, 3, 5, 5, 7]\r\nq = 4\r\nqueries = [[1, 5], [7, 2], [9, 2], [3, 6]]</code></pre>\r\n<p>The array <code>parent</code> represents the following tree:</p>\r\n<p><img src=\"https://i.imgur.com/your_image_link_here.png\" alt=\"Tree structure for Example 1\"></p>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>[6, 9, -1, 9]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>If person 1 issues a directive, people receive it in the following order: [1, 2, 3, 5, 6, 8, 7, 9, 4].</p>\r\n<p>If person 3 issues a directive, people receive it in the following order: [3, 5, 6, 8, 7, 9].</p>\r\n<p>If person 7 issues a directive, people receive it in the following order: [7, 9].</p>\r\n<p>If person 9 issues a directive, people receive it in the following order: [9].</p>\r\n<p>Thus, we can process the specified queries as follows:</p>\r\n<ol>\r\n    <li><code>queries[0] = [1, 5]</code>: If person 1 issues a directive, the 5<sup>th</sup> person receiving it would be 6.</li>\r\n    <li><code>queries[1] = [7, 2]</code>: If person 7 issues a directive, the 2<sup>nd</sup> person receiving it would be 9.</li>\r\n    <li><code>queries[2] = [9, 2]</code>: If person 9 issues a directive, there's no 2<sup>nd</sup> person to receive it.</li>\r\n    <li><code>queries[3] = [3, 6]</code>: If person 3 issues a directive, the 6<sup>th</sup> person to receive it would be 9.</li>\r\n</ol>\r\n<p>Hence, the array returned = [6, 9, -1, 9].</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 5\r\nparent = [-1, 1, 1, 2, 2]\r\nq = 2\r\nqueries = [[1, 3], [2, 3]]</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>4\r\n5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><img src=\"https://i.imgur.com/your_image_link_here.png\" alt=\"Tree structure for Example 2\"></p>\r\n<p>If person 1 issues a directive, people receive it in the following order: [1, 2, 4, 5, 3].</p>\r\n<p>If person 2 issues a directive, people receive it in the following order: [2, 4, 5].</p>\r\n<p>So, on processing the queries:</p>\r\n<ol>\r\n    <li><code>queries[0] = [1, 3]</code>: If person 1 issues a directive, the 3<sup>rd</sup> person to receive it is person 4.</li>\r\n    <li><code>queries[1] = [2, 3]</code>: If person 2 issues a directive, the 3<sup>rd</sup> person to receive it is person 5.</li>\r\n</ol>\r\n<p>Hence, the array returned = [4, 5].</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 7\r\nparent = [-1, 1, 1, 2, 3, 1, 6]\r\nq = 3\r\nqueries = [[2, 4], [7, 1], [1, 6]]</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>-1\r\n7\r\n6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><img src=\"https://i.imgur.com/your_image_link_here.png\" alt=\"Tree structure for Example 3\"></p>\r\n<p>If person 2 issues a directive, people receive it in the following order: [2, 4].</p>\r\n<p>If person 7 issues a directive, people receive it in the following order: [7].</p>\r\n<p>If person 1 issues a directive, people receive it in the following order: [1, 2, 4, 3, 5, 6, 7].</p>\r\n<p>So, on processing the queries:</p>\r\n<ol>\r\n    <li><code>queries[0] = [2, 4]</code>: If person 2 issues a directive, there is no 4<sup>th</sup> person to receive it.</li>\r\n    <li><code>queries[1] = [7, 1]</code>: If person 7 issues a directive, the 1<sup>st</sup> person to receive it is person 7.</li>\r\n    <li><code>queries[2] = [1, 6]</code>: If person 1 issues a directive, the 6<sup>th</sup> person to receive it is person 6.</li>\r\n</ol>\r\n<p>Hence, the array returned = [-1, 7, 6].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= n <= 10^5</code></li>\r\n    <li><code>1 <= parent[i] <= n</code> for all nodes except the root node. <code>parent[0] = -1</code></li>\r\n    <li><code>1 <= q <= 2 * 10^5</code></li>\r\n    <li><code>1 <= queries[i][0] <= n</code></li>\r\n    <li><code>1 <= queries[i][1] <= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Imc_7aug",
        "company_id": 386
    }
]