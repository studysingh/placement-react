[
    {
        "id": 705,
        "title": "Delayed Flights",
        "problem_statement": "<h1>Delayed Flights</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A network of flights contains <code>flight_nodes</code> number of flights denoted by <code>1, 2, ..., flight_nodes</code>. There is a list of dependencies among flights denoted by the arrays <code>flight_from[i]</code> and <code>flight_to[i]</code>. Each pair <code>[flight_from[i], flight_to[i]]</code> denotes that <code>flight_from[i]</code> depends on <code>flight_to[i]</code> and must depart only after <code>flight_to[i]</code> has landed. If a flight is delayed, all the flights dependent on this flight and their corresponding dependencies are also delayed.</p>\r\n<p>Given a list of <code>k</code> initially delayed flights and the network as described, find the list of all delayed flights. Return the list sorted in increasing order of flight numbers.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countDelayedFlights</code> in the editor below.</p>\r\n<p><code>countDelayedFlights</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int flight_nodes</code>: the number of flights</li>\r\n    <li><code>vector&lt;int&gt; flight_from</code>: the details of the flight dependencies</li>\r\n    <li><code>vector&lt;int&gt; flight_to</code>: the details of the flight dependencies</li>\r\n    <li><code>vector&lt;int&gt; delayed</code>: the flights delayed initially</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>vector&lt;int&gt;</code>: the sorted list of all delayed flights</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nflight_nodes = 4\r\nflight_from = [4, 3]\r\nflight_to = [1, 2]\r\ndelayed = [1, 3]\r\nOutput: [1, 3, 4]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>Flight 1 is initially delayed.</li>\r\n    <li>Flight 4 depends on Flight 1, so Flight 4 is delayed.</li>\r\n    <li>Flight 3 is initially delayed.</li>\r\n    <li>There are no flights dependent on Flight 3.</li>\r\n</ul>\r\nThe sorted array of all delayed flights is <code>[1, 3, 4]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nflight_nodes = 4\r\nflight_edges = 4\r\nflight_from = [1, 2, 1, 3]\r\nflight_to = [4, 1, 2, 2]\r\ndelayed = [1]\r\nOutput: [1, 2, 3]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>Flight 1 is initially delayed.</li>\r\n    <li>Since Flight 2 depends on Flight 1 (<code>[2,1]</code>), Flight 2 is delayed.</li>\r\n    <li>Since Flight 3 depends on Flight 2 (<code>[3,2]</code>), Flight 3 is delayed.</li>\r\n</ul>\r\nThe sorted array of all delayed flights is <code>[1, 2, 3]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nflight_nodes = 5\r\nflight_edges = 5\r\nflight_from = [1, 1, 2, 3, 4]\r\nflight_to = [2, 4, 3, 5, 5]\r\ndelayed = [2, 4]\r\nOutput: [1, 2, 3, 4, 5]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>Flights 2 and 4 are initially delayed.</li>\r\n    <li>Since Flight 1 depends on Flight 2 (<code>[1,2]</code>), Flight 1 is delayed.</li>\r\n    <li>Since Flight 3 depends on Flight 2 (<code>[2,3]</code>), Flight 3 is delayed.</li>\r\n    <li>Since Flight 5 depends on Flight 3 (<code>[3,5]</code>) and Flight 4 (<code>[4,5]</code>), Flight 5 is delayed.</li>\r\n</ul>\r\nThe sorted array of all delayed flights is <code>[1, 2, 3, 4, 5]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= flight_nodes &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= m &lt;= min(flight_nodes * (flight_nodes - 1) / 2, 10^5)</code> (where <code>m</code> is the number of dependencies/edges)</li>\r\n    <li><code>1 &lt;= k &lt;= flight_nodes</code></li>\r\n    <li><code>1 &lt;= flight_from[i], flight_to[i] &lt;= flight_nodes</code></li>\r\n    <li><code>flight_from[i] != flight_to[i]</code></li>\r\n    <li><code>1 &lt;= delayed[i] &lt;= flight_nodes</code></li>\r\n    <li>The pair <code>(flight_from[i], flight_to[i])</code> will only be given once in the input.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nutanix_17july",
        "company_id": 224
    },
    {
        "id": 706,
        "title": "Maximize Flower Bouquet Revenue",
        "problem_statement": "<h1>Maximize Flower Bouquet Revenue</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your task is to maximize revenue from flower bouquets in a garden arranged in a row.</p>\r\n<p>A flower shop offers two types of bouquets:</p>\r\n<ul>\r\n    <li>Type 1: Contains three roses and costs <code>p</code> dollars.</li>\r\n    <li>Type 2: Contains one cosmos and one rose and costs <code>q</code> dollars.</li>\r\n</ul>\r\n<p>The garden is represented as a binary string where:</p>\r\n<ul>\r\n    <li><code>0</code> indicates a rose</li>\r\n    <li><code>1</code> indicates a cosmos</li>\r\n</ul>\r\n<p>The flowers are grown in a single row. Consider the row as a one-dimensional array where each cell either contains a rose or a cosmos. For example, the image implies an array like <code>00101011</code>, where <code>0</code> indicates rose, and <code>1</code> indicates cosmos.</p>\r\n<p>Bouquets must be formed from consecutive flowers in the row. For example, flowers from positions <code>(i, i+1, i+2)</code> can form a bouquet, but not from non-consecutive positions like <code>(i, i+2)</code>.</p>\r\n<p>Given a binary string representing the garden row, determine the maximum possible revenue. Not all flowers need to be used.</p>\r\n\r\n<p>Complete the <code>flowerBouquets</code> function in the editor. The function is expected to return an <code>INTEGER</code>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>int p</code>: the cost of a Type 1 bouquet</li>\r\n    <li><code>int q</code>: the cost of a Type 2 bouquet</li>\r\n    <li><code>string s</code>: the garden pattern as a binary string where <code>0</code> indicates rose and <code>1</code> indicates cosmos.</li>\r\n</ul>\r\n<p><strong>Return:</strong> <code>int</code>: the maximum value of flower bouquets.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: p = 2, q = 3, s = '0001000'\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Consider the string <code>s = '0001000'</code>.</p>\r\n<p>One possible way to form bouquets is to take two Type 1 bouquets:</p>\r\n<ul>\r\n    <li>Type 1 at indices (0, 1, 2): <code>s[0]s[1]s[2]</code> which is <code>'000'</code> (three roses). Cost <code>p = 2</code>.</li>\r\n    <li>Type 1 at indices (4, 5, 6): <code>s[4]s[5]s[6]</code> which is <code>'000'</code> (three roses). Cost <code>p = 2</code>.</li>\r\n</ul>\r\n<p>Total revenue for this option: <code>2 + 2 = 4</code>.</p>\r\n<p>Another possible way to form bouquets is to take one Type 1 bouquet and one Type 2 bouquet:</p>\r\n<ul>\r\n    <li>Type 1 at indices (0, 1, 2): <code>s[0]s[1]s[2]</code> which is <code>'000'</code> (three roses). Cost <code>p = 2</code>.</li>\r\n    <li>Type 2 at indices (3, 4): <code>s[3]s[4]</code> which is <code>'10'</code> (one cosmos, one rose). Cost <code>q = 3</code>.</li>\r\n</ul>\r\n<p>Total revenue for this option: <code>2 + 3 = 5</code>.</p>\r\n<p>The maximum revenue achievable is <code>5</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= p, q &lt;= 1000</code></li>\r\n    <li><code>1 &lt;= length of s &lt;= 100000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nutanix_17july",
        "company_id": 224
    },
    {
        "id": 707,
        "title": "Optimize Server Load",
        "problem_statement": "<h1>Optimize Server Load</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A data center wants to optimize the workload distribution to its servers. You're responsible for assigning a subset of tasks to Server A, such that its CPU is utilized as much as possible without exceeding its limit.</p>\r\n<p>Each task has a fixed CPU requirement and can be assigned only once. Tasks are assigned in sequence, and once Server A reaches or nears its limit, no further tasks are added. Your objective is to choose a combination of tasks that maximizes the total CPU load on Server A without exceeding its processing limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: taskLoads = [10, 6, 2, 5, 9], cpuLimit = 14\r\nOutput: 14</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Possible valid groupings:</p>\r\n<ul>\r\n    <li>[10, 2] &rarr; sum = 12</li>\r\n    <li>[9, 5] &rarr; sum = 14</li>\r\n    <li>[6, 5, 2] &rarr; sum = 13</li>\r\n</ul>\r\n<p>Among these, [9, 5] utilizes the full capacity, resulting in a sum of 14. Therefore, the maximum total load Server A can handle without exceeding its limit is 14.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>optimizeServerLoad</code> function in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>taskLoads</code>: An array where each element represents the CPU required for a task.</li>\r\n    <li><code>cpuLimit</code>: The total CPU processing limit of Server A.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>long</code>: The maximum total load Server A can handle without exceeding its limit.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 42</code> (where <code>n</code> is the number of tasks in <code>taskLoads</code>)</li>\r\n    <li><code>1 &le; cpuLimit &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; taskLoads[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>long optimizeServerLoad(vector&lt;long&gt; taskLoads, long cpuLimit) {\r\n    // Function implementation goes here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Nutanix_17july",
        "company_id": 224
    }
]