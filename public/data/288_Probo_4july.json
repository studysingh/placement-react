[
    {
        "id": 924,
        "title": "Contest pair",
        "problem_statement": "<h1>Contest pair</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>\"Code Mania\" is a very famous coding challenge. Radha is responsible for sending our country's team to this contest. She is planning to send 2 people to the Contest. She wants them to be from different states of our country. She has a list of size p consisting of pairs of programmer ids. Each pair of programmers are from the same state.</p>\r\n<p>Please note that if programmers with id 1 and id 2 are from the same state and programmers with id 1 and id 5 are from the same state, then programmers with id 2 and id 5 will also be from the same state.</p>\r\n<p>If she has N programmer ids, then determine how many pairs of programmers from different states she can choose from.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first line contains two integers N and p, the number of programmers, and the number of pairs.</p>\r\n<p>Each of the next p lines contains 2 space-separated integers denoting programmers' ids of two who share the same state.</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>Print the number of valid pairs.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 3\r\n1 2\r\n3 4\r\n1 5\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> Persons numbered [1,2,5] belong to one state, and those numbered [3,4] belong to another. Radha has 6 ways of choosing a pair: [1,3],[1,4],[2,3],[2,4],[5,3],[5,4]</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= p &lt;= 10<sup>4</sup></code></li>\r\n    <li><code>1 &lt;= id &lt;= N</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Probo_4july",
        "company_id": 288
    },
    {
        "id": 925,
        "title": "Taichi and Land",
        "problem_statement": "<h1>Taichi and Land</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Taichi is going to buy land, so he went to an agency. In turn, the agency took him to a place where there is a rectangular free plot of dimension N x M. There is treasure buried under this land, and Taichi has a machine to find those treasures. Some of these treasures have a positive value, and some have a negative value.</p>\r\n<p>Taichi is very greedy, so he wants to buy multiple rectangular pieces of land to maximize his profit. However, there is a small problem: if the total value of treasure he gets from a single rectangular plot exceeds K, then the local authorities would arrest him. Therefore, he needs your help to find the <strong>maximum total value of treasure</strong> he can get by buying multiple rectangular plots of land such that no single plot exceeds K in value.</p>\r\n<p><strong>Input Format</strong> - Input in first-line N and M. For the next N lines M elements representing the 2D array. Finally an integer K</p>\r\n<p><strong>Output Format</strong> - Returns an integer</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n3\r\n0 -2 3\r\n1 0 1\r\n2\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> We have to pick every possible rectangular field to maximize the value of treasure that does not exceed K=2.</p>\r\n<p>If we pick 1 x 1 rectangular fields then Each 1x1 field is just an individual cell:</p>\r\n<ul>\r\n<li>Field at (1,1): [0] => Sum = 0</li>\r\n<li>Field at (1,2): [-2] => Sum = -2</li>\r\n<li>Field at (1,3): [3] => Sum = 3 (exceeds K)</li>\r\n<li>Field at (2,1): [1] => Sum = 1</li>\r\n<li>Field at (2,2): [0] => Sum = 0</li>\r\n<li>Field at (2,3): [1] => Sum = 1</li>\r\n</ul>\r\n<p>Max valid sum for 1x1 fields: 1</p>\r\n<p>If we pick 1 x 2 rectangular fields then Each 1 x 2 field consists of two horizontally adjacent cells:</p>\r\n<ul>\r\n<li>Field from (1,1) to (1,2): [0, -2] => Sum = -2</li>\r\n<li>Field from (1,2) to (1,3): [-2, 3] => Sum = 1</li>\r\n<li>Field from (2,1) to (2,2): [1, 0] => Sum = 1</li>\r\n<li>Field from (2,2) to (2,3): [0, 1] => Sum = 1</li>\r\n</ul>\r\n<p>Max valid sum for 1x2 fields: 1</p>\r\n<p>If we pick 1 x 3 rectangular fields then The 1x3 field covers an entire row:</p>\r\n<ul>\r\n<li>Field from (1,1) to (1,3): [0, -2, 3] => Sum = 1</li>\r\n<li>Field from (2,1) to (2,3): [1, 0, 1] => Sum = 2</li>\r\n</ul>\r\n<p>Max valid sum for 1x3 fields: 2</p>\r\n<p>If we pick 2 x 1 rectangular fields then Each 2x1 field consists of two vertically adjacent cells:</p>\r\n<ul>\r\n<li>Field from (1,1) to (2,1): [0, 1] => Sum = 1</li>\r\n<li>Field from (1,2) to (2,2): [-2, 0] => Sum = -2</li>\r\n<li>Field from (1,3) to (2,3): [3, 1] => Sum = 4 (exceeds K)</li>\r\n</ul>\r\n<p>Max valid sum for 2x1 fields: 1</p>\r\n<p>If we pick 2 x 2 rectangular fields then Each 2x2 field covers a 2x2 section of the matrix:</p>\r\n<ul>\r\n<li>Field from (1,1) to (2,2): [[0, -2], [1, 0]] => Sum = -1</li>\r\n<li>Field from (1,2) to (2,3): [[-2, 3], [0, 1]] => Sum = 2</li>\r\n</ul>\r\n<p>Max valid sum for 2x2 fields: 2</p>\r\n<p>If we pick 2 x 3 rectangular fields then The 2x3 field covers the entire matrix:</p>\r\n<ul>\r\n<li>Field from (1,1) to (2,3): [[0, -2, 3], [1, 0, 1]] => Sum = 3 (exceeds K)</li>\r\n</ul>\r\n<p>Max valid sum for 2x3 field: Not valid (sum exceeds K)</p>\r\n<p>Therefore the maximum possible sum of any rectangular submatrix that does not exceed K=2 is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &lt;= N, M &lt;= 100</code></li>\r\n<li><code>-10^6 &lt;= Arr[i][j] &lt;= 10^6</code></li>\r\n<li><code>0 &lt;= K &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Probo_4july",
        "company_id": 288
    },
    {
        "id": 926,
        "title": "Minimum Operations to Sort Array",
        "problem_statement": "<h1>Minimum Operations to Sort Array</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of n positive integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>.</p>\r\n<p>In one operation, you can do the following:</p>\r\n<ol>\r\n    <li>Choose any integer x.</li>\r\n    <li>For all i such that a<sub>i</sub>=x, do a<sub>i</sub>=0 (assign 0 to a<sub>i</sub>).</li>\r\n</ol>\r\n<p>Find the minimum number of operations required to sort the array in non-decreasing order.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first line contains a single integer n - length of the array.</p>\r\n<p>The second line contains n integers a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> - an array.</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>Print one integer - the minimum number of operations required to sort the array in non-decreasing order.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3 3 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> In the given test case, you can choose x=3 for the operation, the resulting array is [0,0,2]. Hence, the number of operations is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= n &lt;= 10<sup>5</sup></li>\r\n    <li>1 &lt;= a<sub>i</sub> &lt;= n</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Probo_4july",
        "company_id": 288
    }
]