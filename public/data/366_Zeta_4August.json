[
    {
        "id": 1116,
        "title": "Debugging - Finding subsequence",
        "problem_statement": "<h1>Debugging - Finding subsequence</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a code for the following problem statement in the <code>findSubsequenceFunction</code>. However, the solution fails the test cases because there are bugs in the code. Your task is to find and fix all the bugs so that it passes all the test cases.</p>\r\n<p>You are given the following:</p>\r\n<ul>\r\n    <li><code>N</code>: An integer</li>\r\n    <li><code>A</code>: An array of integers where the value of elements is either 1 or -1.</li>\r\n</ul>\r\n<p>A query consists of two integers, <code>L</code> and <code>R</code>. For a query you have to find the maximum possible length of a subsequence chosen from subarray <code>A[L...R]</code>, which follows the given condition:</p>\r\n<ul>\r\n    <li>If the length of subsequence is <code>K</code>, say subsequence is <code>b<sub>1</sub>, b<sub>2</sub>, ..., b<sub>K</sub></code>, then,\r\n        <ul>\r\n            <li>All prefix sums of the subsequence are non-negative.</li>\r\n            <li>The sum of all elements in the subsequence is 0.</li>\r\n        </ul>\r\n    </li>\r\n    <li>If no such subsequence exists, you should output 0.</li>\r\n</ul>\r\n\r\n<p><strong>Task:</strong> You have to process <code>Q</code>-independent queries, where in each query, you have to determine the length of the maximum possible subsequence.</p>\r\n\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>1-based Indexing is followed</li>\r\n    <li>A subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<p><strong>Assumptions:</strong></p>\r\n<ul>\r\n    <li><code>A = [1, 1, 1, -1, -1, -1]</code></li>\r\n    <li><code>query = [[1, 6], [4, 6]]</code></li>\r\n</ul>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Approach:</strong> For first query:</p>\r\n<ul>\r\n    <li><code>L = 1, R = 6.</code></li>\r\n    <li>The subsequence <code>[1, 1, 1, -1, -1, -1]</code> satisfies the above conditions.</li>\r\n    <li>Hence, the answer is 6.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Approach:</strong> For the second query:</p>\r\n<ul>\r\n    <li><code>L = 4, R = 6.</code></li>\r\n    <li>There does not exist any such subsequence.</li>\r\n    <li>Hence, the answer is 0.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>findSubsequence</code> function provided in the editor. This function takes the following 4 parameters and returns an array representing the answer for <code>Q</code> queries.</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the size of array <code>A</code></li>\r\n    <li><code>A</code>: Represents the elements of the array</li>\r\n    <li><code>Q</code>: Represents the number of queries</li>\r\n    <li><code>query</code>: Represents the query array</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line contains a single integer <code>T</code> that denotes the number of test cases. <code>T</code> also denotes the number of times you have to run the <code>findSubsequence</code> function on a different set of inputs.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer denoting <code>N</code>.</li>\r\n            <li>The second line contains <code>N</code> space-separated integers denoting the array <code>A</code>.</li>\r\n            <li>The third line contains an integer denoting <code>Q</code>.</li>\r\n            <li>Next, <code>Q</code> lines contain 2 space-separated integers denoting the queries.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print <code>Q</code> space-separated integers representing the answer for each query in a new line.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= T <= 10</code></li>\r\n    <li><code>1 <= N, Q <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= L <= R <= N</code></li>\r\n</ul>\r\n\r\n<h2>Sample Input and Output</h2>\r\n<h3>Sample Input:</h3>\r\n<pre><code class='language-text'>1\r\n5\r\n1 -1 1 -1 1\r\n2\r\n1 5\r\n2 4</code></pre>\r\n\r\n<h3>Sample Output:</h3>\r\n<pre><code class='language-text'>4 0</code></pre>\r\n\r\n<h2>Explanation</h2>\r\n<p><strong>Explanation:</strong> The first line contains the number of test cases, <code>T = 1</code>.</p>\r\n<p>The first test case</p>\r\n<p>Given</p>\r\n<ul>\r\n    <li><code>N = 5</code></li>\r\n    <li><code>A = [1, -1, 1, -1, 1]</code></li>\r\n    <li><code>Q = 2</code></li>\r\n    <li><code>query = [[1, 5], [2, 4]]</code></li>\r\n</ul>\r\n\r\n<h3>For Query 1:</h3>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li><code>L = 1, R = 5.</code></li>\r\n    <li>If we choose the subsequence <code>[1, -1, 1, -1]</code>. Then it satisfies the given conditions.</li>\r\n    <li>Hence, the answer is 4.</li>\r\n</ul>\r\n\r\n<h3>For Query 2:</h3>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li><code>L = 2, R = 4.</code></li>\r\n    <li>There does not exist any such subsequence which satisfies the given conditions.</li>\r\n    <li>Hence, the answer is 0.</li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li>Time Limit: 10.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_4August",
        "company_id": 366
    },
    {
        "id": 1196,
        "title": "Servers",
        "problem_statement": "<h1>Servers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A company has N servers, labeled from 1 to N. In the beginning, all the servers have no workload.</p>\r\n<p>M requests are sent to the company's API. The company will distribute these requests evenly among its servers to keep the workload balanced. The workload is balanced when the busiest server has the least possible load.</p>\r\n<p>Which server will handle the request for each API request made?</p>\r\n\r\n<h3>Notes</h3>\r\n<ul>\r\n    <li>Each request adds to the overall workload of the servers.</li>\r\n    <li>If two servers have the same minimum workload, the server that is labeled with the smaller number will handle the request.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>solution</code> function provided in the editor. The function takes the following 3 parameters and returns the solution:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the number of servers</li>\r\n    <li><code>M</code>: Represents the number of requests</li>\r\n    <li><code>requests</code>: Represents the load of each request (an array/vector)</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p>Note: Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains <code>N</code> denoting the number of servers.</li>\r\n    <li>The second line contains <code>M</code> denoting the number of requests.</li>\r\n    <li>The third line contains an array <code>requests</code> denoting the load of each request.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Return an array of integers, where each integer represents the 1-indexed server ID that handled the corresponding request.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 2, M = 2, requests = [5, 5]\r\nOutput: [1, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>When the first request is made, both servers have the same load (0) so server 1 serves (due to smaller label rule). Server loads become: Server 1 = 5, Server 2 = 0.</li>\r\n    <li>When the second request is made, server 2 has the minimum load (0). Server 2 serves. Server loads become: Server 1 = 5, Server 2 = 5.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_4August",
        "company_id": 366
    },
    {
        "id": 1197,
        "title": "Expected supply",
        "problem_statement": "<h1>Expected supply</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The distribution of units from a factory to its different suppliers is an important step in the supply chain and should be properly analyzed. There is a bulb factory of a famous brand named \"Mourya\" located in Mumbai. The factory manages its production as under:</p>\r\n<ul>\r\n    <li>Several boxes are packed with bulbs such that each box contains <em>m</em> bulbs.</li>\r\n    <li>The factory produces <em>n</em> boxes full of bulbs every month.</li>\r\n    <li>The factory would consider a box packed with bulbs for supply only if the box is not defective and all of its bulbs are not defective.</li>\r\n    <li>The probability for a box to be defective is <em>p</em></li>\r\n    <li>The probability of a bulb being defective is <em>q</em></li>\r\n</ul>\r\n<p>The factory wants to know the expected number of boxes it would send for supply in a given month. Being the company's analyst, you should help get the answer. Print the expected number of boxes the factory would send for supply in a given month.</p>\r\n<p><em>p</em> is written as <sup><em>a</em></sup>&frasl;<sub><em>b</em></sub> and <em>q</em> as <sup><em>c</em></sup>&frasl;<sub><em>d</em></sub>.</p>\r\n<p><strong>Note:</strong> For Expected value, refer: <a href=\"https://en.wikipedia.org/wiki/Expected_value\">https://en.wikipedia.org/wiki/Expected_value</a></p>\r\n\r\n<h2>Function description</h2>\r\n<p>Complete the <code>ExpectedSupply</code> function. The function takes the following 6 parameters and returns the expected number of boxes it would send for supply.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>n</code>: Represents the number of boxes</li>\r\n    <li><code>m</code>: Represents the number of bulbs in each box</li>\r\n    <li><code>a</code>: Represents the numerator of the probability of the box is defective</li>\r\n    <li><code>b</code>: Represents the denominator of the probability of the box is defective</li>\r\n    <li><code>c</code>: Represents the numerator of the probability of the bulb is defective</li>\r\n    <li><code>d</code>: Represents the denominator of the probability of the bulb is defective</li>\r\n</ul>\r\n\r\n<h2>Input format</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code>, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The next line contains six space-separated integers <code>n, m, a, b, c, d</code></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>The output should contain <code>T</code> lines each of which consists of a single integer denoting the value of the expected number of boxes that can be supplied further.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; n, m, a, c &le; 10<sup>18</sup></code></li>\r\n    <li><code>max(a, 1) &le; b &le; 10<sup>18</sup></code></li>\r\n    <li><code>max(c, 1) &le; d &le; 10<sup>18</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n4 3 1 2 0 2\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> Given 4 boxes, p = (1 / 2) and q = 0. As none of the bulbs are defective and there is a 50% chance that the box can be defective, on average 2 boxes will be supplied in a month.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n<p><strong>Limits</strong></p>\r\n<ul>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n<p><strong>Scoring</strong></p>\r\n<p>Score is assigned if any testcase passes</p>\r\n<p><strong>Allowed Languages</strong></p>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_4August",
        "company_id": 366
    }
]