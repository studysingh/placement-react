[
    {
        "id": 1142,
        "title": "Lexicographically Optimal Merging of Two Words",
        "problem_statement": "<h1>Lexicographically Optimal Merging of Two Words</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two strings, <code>str1</code> and <code>str2</code>. Your goal is to construct a new string, <code>result</code>, by repeatedly performing one of the following operations until both <code>str1</code> and <code>str2</code> are empty:</p>\r\n<ol>\r\n    <li><strong>Take from str1</strong>: Append the first character of <code>str1</code> to <code>result</code> and remove it from <code>str1</code>.</li>\r\n    <li>For example, if <code>str1</code> = \"xyz\" and <code>result</code> = \"a\", after this operation, <code>str1</code> = \"yz\" and <code>result</code> = \"ax\".</li>\r\n    <li><strong>Take from str2</strong>: Append the first character of <code>str2</code> to <code>result</code> and remove it from <code>str2</code>.</li>\r\n    <li>For example, if <code>str2</code> = \"pq\" and <code>result</code> = \"ab\", after this operation, <code>str2</code> = \"q\" and <code>result</code> = \"abp\".</li>\r\n</ol>\r\n<p>Your objective is to construct the <strong>lexicographically largest</strong> string <code>result</code>.</p>\r\n<p>A string <code>a</code> is considered lexicographically larger than string <code>b</code> (of the same length) if, at the first position where they differ, the character in <code>a</code> is greater than the corresponding character in <code>b</code>.</p>\r\n<p>For example, \"zxy\" is lexicographically larger than \"zxx\" because y>x.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: str1 = \"acdbbe\", str2 = \"bceaa\"\r\nOutput: \"bceacdbbea\"</code></pre>\r\n<p><strong>Explanation:</strong> We construct the lexicographically largest string <code>result</code> as follows:</p>\r\n<ol>\r\n    <li>Compare the first characters of str1 (a) and str2 (b). Since b > a, take the first character from str2.</li>\r\n    <li>Result = \"b\", str1 = \"acdbbe\", str2 = \"ceaa\".</li>\r\n    <li>Compare str1[0] = a and str2[0] = c. Since c > a, take the first character from str2.</li>\r\n    <li>Result = \"bc\", str1 = \"acdbbe\", str2 = \"eaa\".</li>\r\n    <li>Compare str1[0] = a and str2[0] = e. Since e > a, take the first character from str2.</li>\r\n    <li>Result = \"bce\", str1 = \"acdbbe\", str2 = \"aa\".</li>\r\n    <li>Compare str1[0] = a and str2[0] = a. Since they are equal, we prioritize the remaining parts of the strings.</li>\r\n    <li>Since str1 (acdbbe) is lexicographically larger than str2 (aa), take the first character from str1.</li>\r\n    <li>Result = \"bcea\", str1 = \"cdbbe\", str2 = \"aa\".</li>\r\n    <li>Compare str1[0] = c and str2[0] = a. Since c > a, take the first character from str1.</li>\r\n    <li>Result = \"bceac\", str1 = \"dbbe\", str2 = \"aa\".</li>\r\n    <li>Compare str1[0] = d and str2[0] = a. Since d > a, take the first character from str1.</li>\r\n    <li>Result = \"bceacd\", str1 = \"bbe\", str2 = \"aa\".</li>\r\n    <li>Compare str1[0] = b and str2[0] = a. Since b > a, take the first character from str1.</li>\r\n    <li>Result = \"bceacdb\", str1 = \"be\", str2 = \"aa\".</li>\r\n    <li>Compare str1[0] = b and str2[0] = a. Since b > a, take the first character from str1.</li>\r\n    <li>Result = \"bceacdbbe\", str1 = \"\", str2 = \"aa\".</li>\r\n    <li>Finally, append the remaining characters of str2 to result.</li>\r\n    <li>Result = \"bceacdbbea\".</li>\r\n</ol>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: str1 = \"xyz\", str2 = \"xwxz\"\r\nOutput: \"xyzxwxz\"</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= str1.length, str2.length <= 3000</code></li>\r\n    <li><code>str1</code> and <code>str2</code> consist only of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Turing_7aug",
        "company_id": 383
    }
]