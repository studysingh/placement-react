[
    {
        "id": 1547,
        "title": "Dice Rolling Competition Score",
        "problem_statement": "<h1>Dice Rolling Competition Score</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Since you love games of chance, you've decided to participate in a dice-rolling competition. The competition involves rolling three 6-sided dice, and the results of each die are represented by the integers <code>a</code>, <code>b</code>, and <code>c</code> respectively. Scores are calculated according to the following rules:</p>\r\n<ul>\r\n    <li>If all three dice had the same value (<code>a = b = c</code>), you earn <code>1000 * a</code>.</li>\r\n    <li>If exactly two of them are the same, you earn <code>500 * x</code> (where <code>x</code> is the value of the two equal dice).</li>\r\n    <li>If all of them are different, you earn <code>100 * min(a, b, c)</code>.</li>\r\n</ul>\r\n<p>Given the values of <code>a</code>, <code>b</code>, and <code>c</code>, your task is to calculate and return your total score.</p>\r\n<p>You need to implement the following function:</p>\r\n<pre><code class='language-javascript'>int solution(int a, int b, int c)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = 3, b = 3, c = 3\r\nOutput: 3000</code></pre>\r\n<p><strong>Explanation:</strong> Since all of the dice have the same value (<code>a = b = c = 3</code>), your total score is equal to <code>1000 * 3 = 3000</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: a = 3, b = 6, c = 3\r\nOutput: 1500</code></pre>\r\n<p><strong>Explanation:</strong> Since exactly two of the values are the same (<code>a = c = 3</code>), your total score is equal to <code>500 * 3 = 1500</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: a = 3, b = 2, c = 5\r\nOutput: 200</code></pre>\r\n<p><strong>Explanation:</strong> Since all of these values are different, your total score is equal to <code>100 * min(a, b, c) = 100 * 2 = 200</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li><code>a</code> is an integer representing the value of the first die.</li>\r\n    <li><code>1 <= a <= 6</code></li>\r\n    <li><code>b</code> is an integer representing the value of the second die.</li>\r\n    <li><code>1 <= b <= 6</code></li>\r\n    <li><code>c</code> is an integer representing the value of the third die.</li>\r\n    <li><code>1 <= c <= 6</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_30sep",
        "company_id": 543
    },
    {
        "id": 1548,
        "title": "Y-Pattern Protein Stability",
        "problem_statement": "<h1>Y-Pattern Protein Stability</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are a molecular biologist working in a research laboratory that studies protein folding patterns. You have a square matrix representing a microscopic view of a protein structure, where each cell contains one of three possible molecular states: <strong>0</strong> (inactive), <strong>1</strong> (partially active), or <strong>2</strong> (fully active).</p>\r\n<p>Your research has identified a specific molecular pattern that indicates optimal protein stability - a \"Y-shaped\" molecular pathway. This pattern consists of two diagonal molecular chains extending from the upper corners down to the center, plus a vertical chain extending downward from the center.</p>\r\n<p>Your task is to determine the minimum number of molecular state changes required to transform the current protein matrix into one that exhibits this stable Y-pattern.</p>\r\n\r\n<p>The Y-pattern is achieved when:</p>\r\n<ul>\r\n    <li>All molecular states along the diagonals from the upper-left and upper-right corners down to the center are identical.</li>\r\n    <li>All molecular states along the vertical path from the center downward are identical to the diagonal states.</li>\r\n    <li>All other molecular states (the background) are identical to each other but different from the Y-pattern states.</li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong> For a square matrix of size <code>n x n</code>, there are exactly 6 possible Y-pattern configurations. The Y-pattern states and background states can be any combination of the three molecular states (0, 1, 2) as long as they are different from each other.</p>\r\n<p>Below, you can see an example of the Y-pattern for a <code>5 x 5</code> matrix:</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(n<sup>2</sup>)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: proteinMatrix = [[1, 0, 2], [1, 2, 0], [0, 2, 0]]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The optimal transformation is to change the <code>1</code> in the 0th row (<code>proteinMatrix[0][0]</code>) to <code>2</code> and the <code>1</code> in the 1st row (<code>proteinMatrix[1][0]</code>) to <code>0</code>.</li>\r\n    <li><code>2</code>s form the Y-pattern molecular pathway and <code>0</code>s form the background.</li>\r\n    <li>The final matrix is shown below.</li>\r\n</ul>\r\n<pre><code class='language-text'>proteinMatrix = [\r\n    [2, 0, 2],\r\n    [0, 2, 0],\r\n    [0, 2, 0]\r\n]</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: proteinMatrix = [[2, 0, 0, 0, 2], [1, 2, 1, 2, 0], [0, 2, 1, 1, 0], [0, 0, 2, 1, 1], [1, 1, 2, 1, 1]]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The optimal solution is to change all of the <code>0</code>s (total of 8) to <code>1</code>s to create a uniform background.</li>\r\n    <li>The final matrix is shown below.</li>\r\n</ul>\r\n<pre><code class='language-text'>proteinMatrix = [\r\n    [2, 1, 1, 1, 2],\r\n    [1, 2, 1, 2, 1],\r\n    [1, 2, 1, 1, 1],\r\n    [1, 1, 2, 1, 1],\r\n    [1, 1, 2, 1, 1]\r\n]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<p><strong>Function Signature:</strong></p>\r\n<pre><code class='language-cpp'>int solution(vector<vector<int>> proteinMatrix)</code></pre>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>proteinMatrix</code>\r\n        <ul>\r\n            <li>The square matrix <code>n x n</code> (where <code>n</code> is odd) represents the protein structure.</li>\r\n            <li>Each cell contains one of three molecular states: <strong>0</strong> (inactive), <strong>1</strong> (partially active), or <strong>2</strong> (fully active).</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Guaranteed constraints:</strong>\r\n        <ul>\r\n            <li><code>3 &lt;= proteinMatrix.length &lt;= 99</code></li>\r\n            <li><code>0 &lt;= proteinMatrix[i][j] &lt;= 2</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>integer</code>\r\n        <ul>\r\n            <li>The minimum number of molecular state changes required to transform the protein matrix into one that exhibits the stable Y-pattern.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_30sep",
        "company_id": 543
    },
    {
        "id": 1549,
        "title": "Unique Bytes Received",
        "problem_statement": "<h1>Unique Bytes Received</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A team of astronauts on a spaceship is receiving important data from Earth for their research. The data is being transmitted in segments that contain specific parts of the file. Each segment defines a byte range in the form of a two-dimensional array <code>segments[i]</code>. For each segment <code>segments[i]</code>, the range is given in an array of two 64-bit integers: <code>segments[i][0]</code> is the index of the first byte in the <code>i<sup>th</sup></code> segment, and <code>segments[i][1]</code> is the index of the last byte in the <code>i<sup>th</sup></code> segment (both indices are inclusive, 1-based).</p>\r\n<p>Your task is to calculate the total number of unique bytes received for the entire file after each segment is received. Keep in mind that segments can overlap with or completely replicate previous ones.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: segments = [[1, 1], [2, 2], [3, 3]]\r\nOutput: [1, 2, 3]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The first segment only contains the byte <code>1</code>, so the total number of unique bytes received becomes <code>1</code> after this segment.</li>\r\n    <li>The second segment only contains the byte <code>2</code>, so the total becomes <code>2</code> after this segment.</li>\r\n    <li>The third segment only contains the byte <code>3</code>, making the total <code>3</code> after this segment.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: segments = [[1, 1], [2, 2], [3, 5]]\r\nOutput: [1, 2, 5]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The first segment only contains the byte <code>1</code>.</li>\r\n    <li>The second segment adds byte <code>2</code>, making the total <code>2</code>.</li>\r\n    <li>The third segment includes bytes <code>3</code> to <code>5</code>, increasing the total to <code>5</code>.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: segments = [[1, 9], [1, 3], [8, 15], [6, 9], [2, 5]]\r\nOutput: [9, 9, 15, 15, 15]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The first segment contains bytes <code>1</code> to <code>9</code>, so the total is <code>9</code>.</li>\r\n    <li>The second segment doesn't add new data, keeping the total at <code>9</code>.</li>\r\n    <li>The third segment adds bytes up to <code>15</code>, increasing the total to <code>15</code>.</li>\r\n    <li>The remaining segments do not change the total as these bytes have already been received.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= segments.length &lt;= 1000</code></li>\r\n    <li><code>segments[i].length = 2</code></li>\r\n    <li><code>1 &lt;= segments[i][0] &lt;= segments[i][1] &lt;= 10<sup>12</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_30sep",
        "company_id": 543
    },
    {
        "id": 1551,
        "title": "Longest Subarray with Bounded Prefix Sum Difference",
        "problem_statement": "<h1>Longest Subarray with Bounded Prefix Sum Difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>To optimize storage allocation for a data processing system, you need to analyze the sizes of data segments to maintain efficient usage. You are given an array of non-negative integers <code>dataSizes</code>, where each element represents the size of a data segment. Additionally, you are provided with a non-negative integer <code>threshold</code>.</p>\r\n<p>Your task is to find the maximum length of a contiguous subarray such that the difference between the sum of the subarray and the sum of the elements before this subarray (note that this difference is not taken in absolute terms, meaning it can be positive or negative) is less than or equal to <code>threshold</code>.</p>\r\n<p>In simpler terms, you need to identify the longest interval within <code>dataSizes</code> for which the condition: <code>sum(interval) - sum(prefix before interval) &lt;= threshold</code> is satisfied.</p>\r\n<p>Return an integer representing the maximum length of such a subarray. If no such subarray exists, return 0.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dataSizes = [1, 2, 3, 4], threshold = 5\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For subarray <code>[1]</code> and prefix subarray <code>[]</code> the difference is <code>1 - 0 = 1 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[2]</code> and prefix subarray <code>[1]</code> the difference is <code>2 - 1 = 1 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[3]</code> and prefix subarray <code>[1, 2]</code> the difference is <code>3 - 1 - 2 = 0 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[4]</code> and prefix subarray <code>[1, 2, 3]</code> the difference is <code>4 - 1 - 2 - 3 = -2 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[1, 2]</code> and prefix subarray <code>[]</code> the difference is <code>(1 + 2) - 0 = 3 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[2, 3]</code> and prefix subarray <code>[1]</code> the difference is <code>(2 + 3) - 1 = 4 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[3, 4]</code> and prefix subarray <code>[1, 2]</code> the difference is <code>(3 + 4) - (1 + 2) = 7 - 3 = 4 &lt;= 5</code>.</li>\r\n    <li>For subarray <code>[1, 2, 3]</code> and prefix subarray <code>[]</code> the difference is <code>(1 + 2 + 3) - 0 = 6 &gt; 5</code>.</li>\r\n    <li>For subarray <code>[2, 3, 4]</code> and prefix subarray <code>[1]</code> the difference is <code>(2 + 3 + 4) - 1 = 8 &gt; 5</code>.</li>\r\n    <li>For subarray <code>[1, 2, 3, 4]</code> and prefix subarray <code>[]</code> the difference is <code>(1 + 2 + 3 + 4) - 0 = 10 &gt; 5</code>.</li>\r\n</ul>\r\n<p>The longest subarrays with acceptable differences are <code>[1, 2]</code>, <code>[2, 3]</code> and <code>[3, 4]</code>, all of length 2. So the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: dataSizes = [8, 5, 6, 1, 4, 1, 9], threshold = 5\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The contiguous subarray <code>[6, 1, 4, 1]</code> has a sum of 12 and the prefix subarray <code>[8, 5]</code> has a sum of 13. The difference is <code>12 - 13 = -1</code>, which is within the threshold. Another contiguous subarray of length 4, <code>[1, 4, 1, 9]</code> with the prefix subarray <code>[8, 5, 6]</code> also yields an acceptable difference <code>1 + 4 + 1 + 9 - (8 + 5 + 6) = 15 - 19 = -4</code>. Therefore, the answer is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> array.integer <code>dataSizes</code>\r\n        <ul>\r\n            <li>An array of non-negative integers, where each element represents the size of a data segment.</li>\r\n            <li><code>0 &lt;= dataSizes.length &lt;= 10^5</code></li>\r\n            <li><code>0 &lt;= dataSizes[i] &lt;= 10^5</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> integer <code>threshold</code>\r\n        <ul>\r\n            <li>A non-negative integer that indicates the maximum allowable difference between the sum of the subarray and the sum of the elements before this subarray.</li>\r\n            <li><code>0 &lt;= threshold &lt;= 10^9</code></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>int solution(vector&lt;int&gt; dataSizes, int threshold) {\r\n    // Function body would go here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_30sep",
        "company_id": 543
    },
    {
        "id": 1552,
        "title": "Smallest String After Reversals",
        "problem_statement": "<h1>Smallest String After Reversals</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string <code>word</code>, you can reverse the order of some characters from the beginning or from the end of <code>word</code> to get new strings.</p>\r\n<p>Reversing the first <code>k</code> characters of a string <code>[w_0, w_1, ..., w_{k-1}, w_k, ..., w_{N-1}]</code> produces <code>[w_{k-1}, ..., w_1, w_0, w_k, ..., w_{N-1}]</code>.</p>\r\n<p>Reversing the last <code>k</code> characters of a string <code>[w_0, ..., w_{N-k-1}, w_{N-k}, ..., w_{N-1}]</code> produces <code>[w_0, ..., w_{N-k-1}, w_{N-1}, ..., w_{N-k}]</code>.</p>\r\n<p>Your task is to iterate over all possible new strings that can be formed this way, and return the alphabetically smallest one.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(word.length³) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: word = \"dbaca\"\r\nOutput: \"abdca\"</code></pre>\r\n<p><strong>Explanation:</strong> Let's consider all possible reverse operations for <code>word = \"dbaca\"</code>:</p>\r\n<ul>\r\n    <li>Reversing the first 1 character results in the following: \"dbaca\"</li>\r\n    <li>Reversing the first 2 characters results in the following: \"bdaca\"</li>\r\n    <li>Reversing the first 3 characters results in the following: \"abdca\"</li>\r\n    <li>Reversing the first 4 characters results in the following: \"cabda\"</li>\r\n    <li>Reversing the first 5 characters results in the following: \"acabd\"</li>\r\n    <li>Reversing the last 1 character results in the following: \"dbaca\"</li>\r\n    <li>Reversing the last 2 characters results in the following: \"dbaac\"</li>\r\n    <li>Reversing the last 3 characters results in the following: \"dbaca\"</li>\r\n    <li>Reversing the last 4 characters results in the following: \"dacab\"</li>\r\n    <li>Reversing the last 5 characters results in the following: \"acabd\"</li>\r\n</ul>\r\n<p>Among these, the alphabetically smallest string is \"abdca\", which should be the final output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The input string <code>word</code> contains lowercase English letters.</li>\r\n    <li><code>1 &le; word.length &le; 100</code></li>\r\n</ul>\r\n\r\n<p><strong>Input:</strong> string <code>word</code></p>\r\n<p><strong>Output:</strong> string</p>\r\n<p>A string representing the alphabetically smallest string possible after using one of operations described above.</p>\r\n\r\n<p><strong>C++ Syntax Tips</strong></p>\r\n<pre><code class='language-javascript'>// Prints help message to the console\r\n// Returns a string\r\nstring helloWorld(string name) {\r\n    cout << \"This prints to the console when you Run Tests\" << endl;\r\n    return \"Hello, \" + name;\r\n}</code></pre>\r\n\r\n<pre><code class='language-javascript'>string solution(string word) {\r\n    // Your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_30sep",
        "company_id": 543
    },
    {
        "id": 1553,
        "title": "Count Same Letter Words",
        "problem_statement": "<h1>Count Same Letter Words</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine you are developing a tool for authors that helps them analyze their writing patterns to enhance consistency. One feature of this tool involves examining the structure of words within a text. You are given a string <code>text</code> that represents a sequence of words consisting of English letters (both uppercase and lowercase) separated by spaces.</p>\r\n<p>Your task is to find all words in the string that start and end with the same letter, considering that the letter may appear in different cases (e.g., a word may start with an 'a' and end with an 'A'). Return the number of such words as an integer.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(text.length^2)</code> will fit within the execution time limit.</p>\r\n\r\n<h3>Input:</h3>\r\n<p><code>string text</code>: A string representing a sequence of words consisting of English letters (both uppercase and lowercase) separated by spaces.</p>\r\n\r\n<h3>Output:</h3>\r\n<p><code>integer</code>: The number of words that start and end with the same letter (case insensitive).</p>\r\n\r\n<h3>Execution and Memory Limits:</h3>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>int solution(string text) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: text = \"LeVeL deMaND noNe\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The words \"LeVeL\" and \"deMaND\" start and end with the same letter (case insensitive), whereas \"noNe\" does not. Therefore, the result is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: text = \"\"\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The input string is empty, meaning there are no words to analyze, so the answer is 0.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: text = \"b bb aaa\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The words \"b\", \"bb\", and \"aaa\" start and end with the same letter (case insensitive), so the answer is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &le; text.length &le; 1000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_30sep",
        "company_id": 543
    }
]