[
    {
        "id": 890,
        "title": "Secure my conversations",
        "problem_statement": "<h1>Secure my conversations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Persons A and B uses an encryption based system for their conversation. Each conversation message is encoded from the source and decoded in the destination using a shared private positive number key known to each other.</p>\r\n<p>The algorithm is illustrated with an example.</p>\r\n<p><strong>Input Format with explanation:</strong></p>\r\n<p>1. Operation (1 for Encoding and 2 for Decoding)<br>\r\n2. Input message<br>\r\n3. Input private key</p>\r\n<p><strong>Output Format with explanation:</strong></p>\r\n<p>1. Output message</p>\r\n<p>The conversation message and the private key need NOT be in equal length and the encoding / decoding takes place till the end is reached in either the conversation message or private key, while retaining the rest of the conversation message.</p>\r\n<p>Returns -1 in all exception scenarios</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\nOpen\r\n123\r\nOutput:\r\nOppeenn</code></pre>\r\n<p><strong>Explanation:</strong> Here, the input message characters are duplicated based on each digit in the key.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\nOppeenn\r\n123\r\nOutput:\r\nOpen</code></pre>\r\n<p><strong>Explanation:</strong> Here, the input message characters are compressed based on each digit in the key.</p>\r\n\r\n<h2>Code Structure</h2>\r\n<pre><code class='language-javascript'>// Complete the secureChannel function below.\r\nstatic String secureChannel(int operation, String message, String key) {\r\n    // Write your code here\r\n}\r\n\r\npublic static void main(String[] args) throws IOException {\r\n    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\r\n    BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv(\"OUTPUT_PATH\")));\r\n\r\n    int operation = Integer.parseInt(bufferedReader.readLine().trim());\r\n\r\n    String message = bufferedReader.readLine();\r\n\r\n    String key = bufferedReader.readLine();\r\n\r\n    String res = secureChannel(operation, message, key);\r\n\r\n    bufferedWriter.write(res);\r\n    bufferedWriter.newLine();\r\n\r\n    bufferedWriter.close();\r\n    bufferedReader.close();\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_25july",
        "company_id": 273
    },
    {
        "id": 891,
        "title": "Birthday party and return gift",
        "problem_statement": "<h1>Birthday party and return gift</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A birthday party was attended by N number of kids and each kid was given a unique Id ranging from 1 to N. As a return gift, there are T toys that must be given to the kids.</p>\r\n<p>The party host decides the best way to do this is by sitting the kids down in a circle (ordered by ascending id), and then, starting with a random number D (between 1 and N) and distribute one toy at a time to each sequentially numbered kid, until all T toys are distributed.</p>\r\n<p>For example, if the host picks a random number(D) 2, then gift distribution order would be (2, 3, 4, 5... N-1, N, 1, 2, 3, 4...) until all T toys are distributed.</p>\r\n<p>But the very last toy is damaged. The task is to find and display the ID number of the last kid, who will receive the damaged toy, so that kid can be informed about the same and ask him to go and exchange the toy from the shop.</p>\r\n\r\n<h2>Function Signature</h2>\r\n<pre><code class='language-java'>/*\r\n * Complete the 'findDamagedToy' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts following parameters:\r\n *  1. INTEGER N\r\n *  2. INTEGER T\r\n *  3. INTEGER D\r\n */\r\npublic static int findDamagedToy(int N, int T, int D) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Input</h2>\r\n<p><strong>Input:</strong> N (the number of kids), T (the number of toys), and D (random number from where distribution should start), respectively in separate lines.</p>\r\n\r\n<h2>Output</h2>\r\n<p><strong>Output:</strong> For each test case, print the ID number of the kid who receives the damaged toy on a new line.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nN = 5\r\nT = 2\r\nD = 1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> There are N=5 kids and T=2 toys. Distribution of toy starts at ID number D=1, so the kid 1 gets the first toy and kid 2 gets the second (last) toy. Thus, we must inform kid 2 about the damaged toy, so we print the same 2 on a new line.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Kid IDs are unique and range from 1 to N.</li>\r\n    <li>D (starting distribution number) is an integer between 1 and N (inclusive).</li>\r\n    <li>T is the number of toys.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_25july",
        "company_id": 273
    }
]