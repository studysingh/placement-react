[
    {
        "id": 577,
        "title": "Paths to a Goal",
        "problem_statement": "<h1>Paths to a Goal</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a number line with positions labeled from 0 to n, and a sequence of movements consisting of instructions 'r' (move right by 1) and 'l' (move left by 1), determine how many distinct subsequences of these moves will take you from a starting position s to an ending position y. Return the result modulo (10^9 + 7).</p>\r\n\r\n<p>Notes:</p>\r\n<ul>\r\n    <li>A subsequence is formed by deleting zero or more elements from the original sequence without changing the order of the remaining elements.</li>\r\n    <li>A subsequence is distinct if its sequence of characters differs from another subsequence. Subsequences with identical characters from different indices are considered the same and counted only once, e.g., the subsequence containing 'rr' in 'rrr' is only counted once.</li>\r\n    <li>Starting at position j, an instruction 'r' moves to position j + 1, and an instruction 'l' moves to position j - 1.</li>\r\n</ul>\r\n\r\n<p>Example:</p>\r\n<p>Number line positions n: 0 to 6</p>\r\n<p>Move sequence is: \"rrr\"</p>\r\n<p>Start position (s): 1</p>\r\n<p>End position (y): 4</p>\r\n<p>The number of distinct subsequences of \"rrr\" that lead from position 1 to position 4 is 3.</p>\r\n\r\n<p>Complete the function <code>distinctMoves</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string s</code>: the sequence of moves</li>\r\n    <li><code>int n</code>: the upper bound of the number line</li>\r\n    <li><code>int s_pos</code>: the starting position</li>\r\n    <li><code>int y_pos</code>: the ending position</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int distinctMoves(string s, int n, int s_pos, int y_pos) { }</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"rrlrlr\", n = 6, s_pos = 1, y_pos = 3\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The five distinct possible subsequences of s = \"rrlrlr\" are:</p>\r\n<ul>\r\n    <li>s1 = \"rr\", the move sequence is 1 -> 2 -> 3</li>\r\n    <li>s2 = \"rrlr\", the move sequence is 1 -> 2 -> 3 -> 2 -> 3</li>\r\n    <li>s3 = \"rrlrr\", the move sequence is 1 -> 2 -> 3 -> 4 -> 3</li>\r\n    <li>s4 = \"rrrrl\", the move sequence is 1 -> 2 -> 3 -> 4 -> 3</li>\r\n    <li>s5 = \"rrlrlr\", the move sequence is 1 -> 2 -> 3 -> 2 -> 3 -> 2 -> 3</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"rrrrlr\", n = 7, s_pos = 0, y_pos = 0\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The two distinct possible subsequences of s = \"rrrrlr\" are:</p>\r\n<ul>\r\n    <li>s1 = \"\" (Empty Subsequence), the move sequence is 0 -> 0</li>\r\n    <li>s2 = \"rlr\", the move sequence is 0 -> 1 -> 0</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tower Research_22july",
        "company_id": 195
    },
    {
        "id": 578,
        "title": "Vaccination Drive",
        "problem_statement": "<h1>Vaccination Drive</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In order to curb the spread of the novel COVID-19 virus, the citizens of Hackerland need to be vaccinated on priority.</p>\r\n<p>There are <code>center_nodes</code> vaccination centers in Hackerland, where each center has a status denoted by <code>status[i]</code>:</p>\r\n<ul>\r\n    <li>Centers with a shortage of vaccines have status 1.</li>\r\n    <li>Those with sufficient vaccines have status 2.</li>\r\n    <li>Those with a surplus have status 3.</li>\r\n</ul>\r\n<p>Vaccines can be transferred from centers with a surplus to centers with a deficit. There is a network of bidirectional roads between centers where the <code>i<sup>th</sup></code> road is between center <code>center_from[i]</code> and <code>center_to[i]</code>. Each road takes 1 unit of time to traverse. Find the minimum time in which all deficient centers can receive a supply of vaccines from some surplus center.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>Surplus centers have an inexhaustible supply of vaccines.</li>\r\n    <li>Multiple surplus centers can ship their surplus simultaneously.</li>\r\n    <li>Multiple deliveries from a single surplus center can leave simultaneously.</li>\r\n    <li>Vaccines are only shipped from centers with status 3 to centers with status 1.</li>\r\n    <li>Status 2 centers do nothing.</li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>The first line contains two space-separated integers, <code>center_nodes</code> and <code>center_edges</code>, the number of centers, and the number of bidirectional roads.</p>\r\n<p>The next <code>center_edges</code> lines contain 2 space-separated integers that denote a bidirectional road joins <code>center_from[i]</code> and <code>center_to[i]</code>.</p>\r\n<p>The next line contains an integer <code>center_nodes</code>, the size of the array <code>status</code>.</p>\r\n<p>Each line <code>i</code> of the <code>n</code> subsequent lines (where <code>0 <= i < center_nodes</code>) contains an integer, <code>status[i]</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 8\r\n1 2\r\n1 4\r\n1 3\r\n2 4\r\n3 4\r\n3 5\r\n5 6\r\n4 6\r\n6\r\n3\r\n2\r\n3\r\n1\r\n2\r\n1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> The deficient centers are 1 and 6. The surplus centers are 3 and 5.\r\nCenter 1 can receive vaccines from center 3 (path 3-4-1, time 2) or center 5 (path 5-4-1, time 2). Minimum time for center 1 is 2.\r\nCenter 6 can receive vaccines from center 3 (path 3-5-6, time 2 or 3-4-6, time 2) or center 5 (path 5-6, time 1). Minimum time for center 6 is 1.\r\nThe minimum time in which all deficient centers can receive a supply is the maximum of these individual minimums, which is max(2, 1) = 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n7 6\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n7\r\n2\r\n2\r\n2\r\n3\r\n2\r\n2\r\n1\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> Given, n=7, m=6, center_from = [1, 1, 2, 2, 3, 3], center_to = [2, 3, 4, 5, 6, 7], status = [2, 2, 2, 3, 2, 2, 1]. Since the only surplus center is 4, it supplies vaccines to center 7 which takes 4 units of time.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tower Research_22july",
        "company_id": 195
    },
    {
        "id": 579,
        "title": "Balanced Tree",
        "problem_statement": "<h1>Balanced Tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A tree is considered balanced when the absolute difference between the number of stones on any pair of adjacent nodes is at most 1.</p>\r\n<p>Given a rooted tree with n nodes (numbered 1 to n), each node has some number of stones. The goal is to modify this tree by adding stones to make it a balanced tree.</p>\r\n<p>Find the minimum number of extra stones needed to balance a tree.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider the following tree:</p>\r\n<pre><code class='language-text'>Input Tree:\r\nNode 1: Stones 1\r\nNode 2: Stones 4\r\nNode 3: Stones 2\r\nNode 4: Stones 6\r\nNode 5: Stones 5\r\nEdges: (1,2), (2,3), (2,4), (2,5)\r\n\r\nModified Tree:\r\nNode 1: Stones 4\r\nNode 2: Stones 5\r\nNode 3: Stones 4\r\nNode 4: Stones 4\r\nNode 5: Stones 5\r\n</code></pre>\r\n<p><strong>Explanation:</strong> In the provided tree, the optimal way to balance it is:</p>\r\n<ul>\r\n    <li>Add 2 stones to node 3</li>\r\n    <li>Add 1 stone to node 2</li>\r\n    <li>Add 4 stones to node 1</li>\r\n</ul>\r\n<p>After these additions, the tree becomes balanced, and the minimum number of stones required is 2 + 1 + 4 = 7.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ntree_nodes = 5, m = 4\r\ntree_from = [1, 2, 2, 2], tree_to = [2, 3, 4, 5]\r\nstones = [1, 5, 7, 8, 3]\r\n\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> Following are the optimal changes that will make the given tree balanced using minimum stones:</p>\r\n<ul>\r\n    <li>Add 2 stones to node 1</li>\r\n    <li>Add 6 stones to node 2</li>\r\n    <li>Add 3 stones to node 5</li>\r\n</ul>\r\n<p>After performing the above 3 operations, the tree is balanced. The number of stones used is 2+5+3 = 10.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\ntree_nodes = 6, m = 5\r\ntree_from = [1, 1, 2, 3, 3], tree_to = [2, 3, 5, 4, 6]\r\nstones = [1, 5, 7, 10, 3, 6]\r\n\r\nOutput: 16</code></pre>\r\n<p><strong>Explanation:</strong> The following are the optimal changes that will make the given tree balanced using minimum stones:</p>\r\n<ul>\r\n    <li>Add 7 stones to node 1</li>\r\n    <li>Add 1 stone to node 2</li>\r\n    <li>Add 4 stones to node 3</li>\r\n    <li>Add 4 stones to node 6</li>\r\n</ul>\r\n<p>After performing the above 4 operations, the tree is balanced. The number of stones used is 7+4+1+4 = 16.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findMinStones</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int tree_nodes</code>: the total number of nodes in the tree</li>\r\n    <li><code>int tree_from[tree_nodes-1]</code>: one end of each edge</li>\r\n    <li><code>int tree_to[tree_nodes-1]</code>: the other end of each edge</li>\r\n    <li><code>int stones[tree_nodes]</code>: the number of stones on each node</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the minimum number of extra stones required to balance the tree</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two integers, <code>tree_nodes</code> and <code>m</code> (where <code>m = tree_nodes - 1</code>), denoting the number of nodes and edges, respectively.</p>\r\n<p>Each of the <code>m</code> subsequent lines (where <code>0 <= i < m</code>) contains two integers, <code>tree_from[i]</code> and <code>tree_to[i]</code>, two nodes that share an edge.</p>\r\n<p>The next line contains an integer, <code>tree_nodes</code>, the size of the array <code>stones</code>.</p>\r\n<p>Each of the <code>tree_nodes</code> subsequent lines (where <code>0 <= i < tree_nodes</code>) contains an integer <code>stones[i]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= tree_nodes <= 2 * 10^5</code></li>\r\n    <li><code>0 <= stones[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tower Research_22july",
        "company_id": 195
    }
]