[
    {
        "id": 1555,
        "title": "Minimum Server Upgrade Time",
        "problem_statement": "<h1>Minimum Server Upgrade Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two servers and the time taken to upgrade each server in seconds, denoted by <code>t1</code> and <code>t2</code> respectively, in one second, one server undergoes the upgrade process. The servers receive requests at multiples of <code>req1</code> and <code>req2</code> respectively. Determine the minimum total time (in seconds) required to upgrade both servers.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>Only one server undergoes the upgrade process at any given second.</li>\r\n    <li>There may be seconds during which no server is undergoing an upgrade.</li>\r\n</ul>\r\n<p>Complete the function <code>getMinUpgradationTime</code> in the editor below.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>int req1</code>: indicates that the first server receives requests at multiples of <code>req1</code></li>\r\n    <li><code>int t1</code>: the total time in seconds to upgrade the first server</li>\r\n    <li><code>int req2</code>: indicates that the second server receives requests at multiples of <code>req2</code></li>\r\n    <li><code>int t2</code>: the total time in seconds to upgrade the second server</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the minimum total time (in seconds) required to upgrade both servers</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: req1 = 2, t1 = 3, req2 = 3, t2 = 1\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The 1st server takes 3 seconds to upgrade, and it receives requests on seconds that are multiples of 2. Similarly, the 2nd server upgrades in 1 second and receives requests on seconds that are multiples of 3. The 1st server upgrades in the 1st, 3rd, and 5th seconds, while the 2nd server upgrades in the 2nd second. Note that none of the numbers from [1, 3, 5] is divisible by <code>req1 = 2</code>. Similarly, [2] is not divisible by <code>req2 = 3</code>. Thus, the minimum time required is 5 seconds.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: req1 = 2, t1 = 1, req2 = 2, t2 = 3\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The minimum total time will be 7 seconds; the first server upgrades at the 1st second, and the second server upgrades at the 3rd, 5th, and 7th seconds.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: req1 = 3, t1 = 2, req2 = 4, t2 = 1\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The minimum time required is 3 seconds; the first server upgrades at the 1st and 2nd seconds, and the second server upgrades at the 3rd second.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; req1, req2 &le; 3 * 10^4</code></li>\r\n    <li><code>1 &le; t1, t2 &le; 10^9</code></li>\r\n</ul>\r\n\r\n<p>The problem provides the following C++ function signature to complete:</p>\r\n<pre><code class='language-cpp'>long getMinUpgradationTime(int req1, int t1, int req2, int t2) {\r\n    // Complete the function here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zomato_1oct",
        "company_id": 546
    },
    {
        "id": 1556,
        "title": "Last Object Exit Time",
        "problem_statement": "<h1>Last Object Exit Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Objects are moving along a table of length <code>tableLength</code>. The position of the <code>i<sup>th</sup></code> object is given by <code>position[i]</code>, and its velocity is given by <code>velocity[i]</code>, where <code>0 &le; i &lt; n</code>. The left end of the line is at coordinate <code>0</code>, and the right end is at coordinate <code>tableLength</code>. A positive velocity moves the object right, and a negative velocity moves it left.</p>\r\n<p>When two objects collide, their velocities are exchanged. Objects are removed if they move left of coordinate <code>0</code> or right of coordinate <code>tableLength</code>. All objects begin moving simultaneously at time <code>0</code>.</p>\r\n<p>The task is to find the time in seconds when the last object exits the line. The answer should be rounded up to the nearest integer, i.e., its ceiling.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n<li>No two objects have the same initial position.</li>\r\n<li>No object starts at position <code>0</code> or <code>tableLength</code>.</li>\r\n<li>No object has a velocity of <code>0</code>.</li>\r\n<li>Collisions occur instantly.</li>\r\n</ul>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>calculateTime</code> in the editor below.</p>\r\n<p><strong>Function Parameters:</strong></p>\r\n<ul>\r\n<li><code>int position[n]</code>: the positions of objects</li>\r\n<li><code>int velocity[n]</code>: the velocities of objects</li>\r\n<li><code>int tableLength</code>: the length of the table</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n<li><code>int</code>: the ceiling of the time when the last object exits the table area</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int calculateTime(vector&lt;int&gt; position, vector&lt;int&gt; velocity, int tableLength) {\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, tableLength = 9, position = [2, 4, 5], velocity = [2, -2, 4]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The position and velocity arrays define that:</p>\r\n<ul>\r\n<li>Object 1 is at position 2 and has speed 2, moving towards the right.</li>\r\n<li>Object 2 is at position 4 and has speed 2, moving towards the left.</li>\r\n<li>Object 3 is at position 5 and has speed 4, moving towards the right.</li>\r\n</ul>\r\n<p>Here, at time = 0.5 seconds, Objects 1 and 2 collide at position 3. After the collision, Object 1 moves to the left with speed 2 and Object 2 moves to the right with speed 2.</p>\r\n<p>Calculations of times that objects exit the table</p>\r\n<table>\r\n<thead><tr><th>Object</th><th>Exit Time Calculation</th><th>Exit time</th></tr></thead>\r\n<tbody>\r\n<tr><td>Object 1</td><td>0.5 (before collision) + (3-0)/2 (after collision)</td><td>2 seconds</td></tr>\r\n<tr><td>Object 2</td><td>0.5 (before collision) + (9-3)/2 (after collision)</td><td>3.5 seconds</td></tr>\r\n<tr><td>Object 3</td><td>(9-5)/4 (in total)</td><td>1 seconds</td></tr>\r\n</tbody>\r\n</table>\r\n<p>Hence, the time at which all objects have exited is 3.5 seconds. After taking the ceiling, the answer is 4.</p>\r\n\r\n<h3>Sample Input 0:</h3>\r\n<pre><code class='language-text'>Input: n = 4, position = [1, 2, 3, 4], velocity = [-1, 1, -1, 1], tableLength = 5\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given n = 4, position = [1, 2, 3, 4], velocity = [-1, 1, -1, 1], tableLength = 5</p>\r\n<ul>\r\n<li>Object 1 is at position 1 and has speed 1, moving towards the left.</li>\r\n<li>Object 2 is at position 2 and has speed 1, moving towards the right.</li>\r\n<li>Object 3 is at position 3 and has speed 1, moving towards the left.</li>\r\n<li>Object 4 is at position 4 and has speed 1, moving towards the right.</li>\r\n</ul>\r\n<p>Here, at time = 0.5 seconds, Objects 2 and 3 collide at position 2.5 units. After the collision, Object 2 moves to the left with speed 3 while Object 3 moves to the right with speed 1.</p>\r\n<p>Calculations of times that objects exit the table</p>\r\n<table>\r\n<thead><tr><th>Object</th><th>Exit Time Calculation</th><th>Exit Time</th></tr></thead>\r\n<tbody>\r\n<tr><td>Object 1</td><td>(1-0)/1 seconds</td><td>1 second</td></tr>\r\n<tr><td>Object 2</td><td>0.5 (before the collision) + (2.5-0)/1 (after the collision)</td><td>3 seconds</td></tr>\r\n<tr><td>Object 3</td><td>0.5 (before the collision) + (5-2.5)/1 (after collision)</td><td>3 seconds</td></tr>\r\n<tr><td>Object 4</td><td>(5-4)/1 seconds</td><td>1 second</td></tr>\r\n</tbody>\r\n</table>\r\n<p>Hence, the time at which all objects have exited is 3 seconds and its ceiling is 3.</p>\r\n\r\n<h3>Sample Input 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, position = [1, 4, 10], velocity = [2, 2, -4], tableLength = 12\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>From the above given array, we can understand the following</p>\r\n<ul>\r\n<li>Object 1 is at position 1 and has speed 2, moving towards the right.</li>\r\n<li>Object 2 is at position 4 and has speed 2, moving towards the right.</li>\r\n<li>Object 3 is at position 10 and has speed 4, moving towards the left.</li>\r\n</ul>\r\n<p>Here, at time = 1 second, Objects 2 and 3 collide at position 6 units. After the collision, Object 2 moves to the left with speed 4 while Object 3 moves to the right with speed 2.</p>\r\n<p>Here, at time = 1.5 seconds, Objects 1 and 2 collide at position 4 units. After the collision, Object 1 moves to the left with speed 4 while Object 2 moves to the right with speed 2.</p>\r\n<p>Calculations of times that objects exit the table</p>\r\n<table>\r\n<thead><tr><th>Object</th><th>Exit Time Calculation</th><th>Exit time</th></tr></thead>\r\n<tbody>\r\n<tr><td>Object 1</td><td>1.5 (before the collision) + (4-0)/4 (after the collision)</td><td>2.5 seconds</td></tr>\r\n<tr><td>Object 2</td><td>1 (before the first collision) + 0.5 (before the second collision) + (12-4)/2 (after the collision)</td><td>5.5 seconds</td></tr>\r\n<tr><td>Object 3</td><td>1 (before collision) + (10-6)/2 (after collision)</td><td>3 seconds</td></tr>\r\n</tbody>\r\n</table>\r\n<p>Hence, the time at which all objects have exited is 5.5 seconds. The ceiling of 5.5 is 6.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n<li><code>2 &le; tableLength &le; 10<sup>9</sup></code></li>\r\n<li><code>0 &lt; position[i] &lt; tableLength</code></li>\r\n<li><code>-10<sup>9</sup> &le; velocity[i] &le; 10<sup>9</sup></code>, <code>velocity[i] &ne; 0</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zomato_1oct",
        "company_id": 546
    },
    {
        "id": 1557,
        "title": "Optimal Path in a Grid",
        "problem_statement": "<h1>Optimal Path in a Grid</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an <code>n x m</code> grid, where rows are numbered from <code>1</code> to <code>n</code> and columns from <code>1</code> to <code>m</code>, there are <code>x</code> blocked cells. Their positions are specified by the array <code>blockedPositions</code> where <code>blockedPositions[i][1]</code> represents the row and <code>blockedPositions[i][2]</code> represents the column position, using 1-based indexing.</p>\r\n\r\n<p>Starting from the top-left cell <code>(1, 1)</code>, the goal is to reach the bottom-right cell <code>(n, m)</code> without visiting any blocked cells. Movement is allowed only up, down, left, or right.</p>\r\n\r\n<p>The strength of a path is defined as the minimum Manhattan distance from each cell in the path to the nearest blocked cell. To calculate the strength of a specific path, an array <code>minDist</code> is created, where <code>minDist[i]</code> represents the minimum distance to any blocked cell for the <code>i<sup>th</sup></code> cell visited. The strength of the path is given by <code>min(minDist)</code>.</p>\r\n\r\n<p>Among all possible paths from <code>(1, 1)</code> to <code>(n, m)</code>, determine the path that maximizes strength. If multiple paths have the same maximum strength, select the one that visits the fewest cells.</p>\r\n\r\n<p>Return two integers: the maximum strength achievable and the minimum number of cells visited. If it is impossible to navigate from <code>(1, 1)</code> to <code>(n, m)</code>, return <code>[-1, -1]</code>.</p>\r\n\r\n<p><strong>Note:</strong> The Manhattan distance between cells <code>(a, b)</code> and <code>(c, d)</code> is defined as absolute values <code>abs(a-c) + abs(b-d)</code>.</p>\r\n\r\n<p>Complete the function <code>findOptimalPair</code> in the editor below.</p>\r\n<p><code>findOptimalPair</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of rows in the grid</li>\r\n    <li><code>int m</code>: the number of columns in the grid</li>\r\n    <li><code>int blockedPositions[x][2]</code>: the blocked positions</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int[2]</code>: the first integer represents the maximum strength possible, and the second represents the minimum number of cells visited with the maximum possible strength.</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>vector<int> findOptimalPair(int n, int m, vector<vector<int>> blockedPositions) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nm = 3\r\nblockedPositions = [[1, 3], [2, 3]]\r\nOutput: [2, 6]</code></pre>\r\n<p><strong>Explanation:</strong> On following the path as shown below: <code>(1, 1) -> (2, 1) -> (3, 1) -> (4, 1) -> (4, 2) -> (4, 3)</code>. The strength of the path = 2, and the number of cells visited = 6. Therefore, the answer = <code>[2, 6]</code>. In the image, the red crosses represent the blocked positions, the green stars represent the cells visited, and the blue arrows represent the path.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nm = 4\r\nblockedPositions = [[1, 2], [4, 3]]\r\nOutput: [1, 7]</code></pre>\r\n<p><strong>Explanation:</strong> On following the path as shown below: <code>(1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) -> (3, 4) -> (4, 4)</code>, the strength of the path = 1, and the number of cells visited = 7. Therefore, the answer = <code>[1, 7]</code>. In the image, the red crosses represent the blocked cells, the green stars represent the cells visited, and the blue arrows represent the path direction.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nm = 3\r\nblockedPositions = [[1, 2], [2, 1], [2, 2]]\r\nOutput: [-1, -1]</code></pre>\r\n<p><strong>Explanation:</strong> It is impossible to go from <code>(1, 1)</code> to <code>(3, 3)</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n, m, x &le; 5 * 10<sup>4</sup></code></li>\r\n    <li><code>1 &le; blockedPositions[i][1] &le; n</code></li>\r\n    <li><code>1 &le; blockedPositions[i][2] &le; m</code></li>\r\n    <li>Neither <code>(1, 1)</code> nor <code>(n, m)</code> is blocked.</li>\r\n    <li>It is guaranteed that <code>3 &le; n * m &le; 10<sup>5</sup></code></li>\r\n    <li><code>blockedPositions[i] &ne; blockedPositions[j]</code> over all <code>i &ne; j</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zomato_1oct",
        "company_id": 546
    }
]