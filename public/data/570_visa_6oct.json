[
    {
        "id": 1627,
        "title": "Alien Code Substrings Divisible by 3",
        "problem_statement": "<h1>Alien Code Substrings Divisible by 3</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine you're part of a team analyzing fictional alien technology logs. You have a string <code>alienCode</code>, which represents activity codes from their devices. Your task is to examine this string and count how many substrings of this code represent numbers evenly divisible by 3. It's important to note that none of these substrings should start with zero unless the substring is the character \"0\" itself.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(alienCode.lengthÂ³) will fit within the execution time limit.</p>\r\n<p>A string of digits representing alien device activity codes.</p>\r\n<p><strong>Input:</strong> string <code>alienCode</code></p>\r\n<p><strong>Output:</strong> integer (Return the number of substrings that form an integer divisible by 3.)</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: alienCode = \"456\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Consider all substrings of the given string:</p>\r\n<ul>\r\n    <li><code>alienCode[0..0] = 4</code> isn't divisible by 3.</li>\r\n    <li><code>alienCode[1..1] = 5</code> isn't divisible by 3.</li>\r\n    <li><code>alienCode[2..2] = 6</code> is divisible by 3.</li>\r\n    <li><code>alienCode[0..1] = 45</code> is divisible by 3.</li>\r\n    <li><code>alienCode[1..2] = 56</code> isn't divisible by 3.</li>\r\n    <li><code>alienCode[0..2] = 456</code> is divisible by 3.</li>\r\n</ul>\r\n<p>There are 3 substrings that meet the conditions, so the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: alienCode = \"6666\"\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> All substrings are divisible by 3 and have no leading zeros, so the answer is equal to the number of possible substrings, which is 10.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: alienCode = \"303\"\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> Consider all substrings of the given string:</p>\r\n<ul>\r\n    <li><code>alienCode[0..0] = 3</code> is divisible by 3.</li>\r\n    <li><code>alienCode[1..1] = 0</code> is divisible by 3.</li>\r\n    <li><code>alienCode[2..2] = 3</code> is divisible by 3.</li>\r\n    <li><code>alienCode[0..1] = 30</code> is divisible by 3.</li>\r\n    <li><code>alienCode[1..2] = 03</code> is divisible by 3, but it has leading zeroes, so we don't count it.</li>\r\n    <li><code>alienCode[0..2] = 303</code> is divisible by 3.</li>\r\n</ul>\r\n<p>There are 5 substrings that meet the conditions, so the answer is 5.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= alienCode.length <= 10^5</code></li>\r\n    <li><code>0 <= int(alienCode) <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "visa_6oct",
        "company_id": 570
    },
    {
        "id": 1628,
        "title": "Count Valid Messages",
        "problem_statement": "<h1>Count Valid Messages</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are developing a feature for a new social media platform where you need to analyze user-generated content for reporting purposes.</p>\r\n<p>Given an array of strings <code>messages</code>, each representing a user message, your task is to count how many messages have an odd length and contain at least one vowel (letters 'a', 'e', 'i', 'o', 'u', both uppercase and lowercase).</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(<code>messages.length * max(message.length)</code>) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: messages = [\"I\", \"love\", \"CSS\", \"She respects HTML\"]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>\"I\" has an odd length and contains a vowel.</li>\r\n    <li>\"love\" has an even length.</li>\r\n    <li>\"CSS\" has an odd length but contains no vowels.</li>\r\n    <li>\"She respects HTML\" has an odd length (length of this string equals 17) and contains several vowels (three letters 'e').</li>\r\n    <li>Therefore, 2 messages meet the criteria.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= messages.length <= 1000</code></li>\r\n    <li><code>1 <= messages[i].length <= 100</code></li>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n</ul>\r\n\r\n<h2>Input/Output Details</h2>\r\n<p><strong>Input:</strong> <code>array.string messages</code></p>\r\n<p>An array of strings representing user messages.</p>\r\n<p><strong>Output:</strong> <code>integer</code></p>\r\n<p>The number of messages that have an odd length and contain at least one vowel.</p>\r\n\r\n<h2>C++ Syntax Tips</h2>\r\n<pre><code class='language-cpp'>// Prints help message to the console\r\n// Returns a string\r\nstring helloWorld(string name) {\r\n    cout << \"this prints to the console when you Run Tests\" << endl;\r\n    return \"Hello, \" + name;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "visa_6oct",
        "company_id": 570
    },
    {
        "id": 1629,
        "title": "Moisture Grid Smoothing",
        "problem_statement": "<h1>Moisture Grid Smoothing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are an agricultural scientist working on precision farming technology. You are given a two-dimensional matrix of integers <code>moistureGrid</code> representing soil moisture levels across a field, with <code>moistureGrid[i][j]</code> containing an integer from 0 to 255 to represent the moisture level of a soil cell at coordinate <code>(i, j)</code>. You are also given a non-negative integer parameter <code>smoothingRadius</code>. Your task is to apply a moisture smoothing effect to this field data.</p>\r\n\r\n<p>To apply a moisture smoothing effect to the field, replace the moisture level of each soil cell <code>(i, j)</code> with the average value of its original moisture level <code>moistureGrid[i][j]</code> and the mean moisture level of its neighboring cells (defined as <code>neighbors((i, j))</code>). Soil cell <code>(k, l)</code> is included in <code>neighbors((i, j))</code> if it satisfies the conditions <code>abs(i - k) <= smoothingRadius</code> and <code>abs(j - l) <= smoothingRadius</code>.</p>\r\n\r\n<p>The mean moisture level is defined as <code>mean(values) = sum(values) // values.length</code> where <code>//</code> is an integer division operator. The integer division operator <code>//</code> is equivalent to taking an integer part of a real division: <code>a // b = int(a / b)</code>.</p>\r\n\r\n<p>So, the formula for replacing the moisture level of each soil cell is:</p>\r\n<pre><code class='language-text'>updated_moistureGrid[i][j] = (moistureGrid[i][j] + mean(neighbors((i, j)))) // 2</code></pre>\r\n\r\n<p>Please note that some of the possible neighbors might be missing (i.e., out of bounds), and the <code>mean</code> function should only take existing neighbors into account. If a soil cell doesn't have any neighbors, its moisture level should not change after smoothing.</p>\r\n\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(moistureGrid.length^2 * moistureGrid[0].length^2)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nmoistureGrid = [\r\n  [9, 6],\r\n  [3, 0]\r\n],\r\nsmoothingRadius = 1\r\n\r\nOutput:\r\n[\r\n  [6, 5],\r\n  [4, 3]\r\n]</code></pre>\r\n<p><strong>Explanation:</strong> For <code>smoothingRadius = 1</code>, the neighbors of a cell <code>(i, j)</code> are all cells <code>(k, l)</code> such that <code>abs(i-k) <= 1</code> and <code>abs(j-l) <= 1</code>, excluding <code>(i, j)</code> itself. In this 2x2 grid, each cell has 3 neighbors.</p>\r\n<ul>\r\n<li>For <code>moistureGrid[0][0] = 9</code>:\r\n    <ul>\r\n        <li>Neighbors are <code>moistureGrid[0][1]=6</code>, <code>moistureGrid[1][0]=3</code>, <code>moistureGrid[1][1]=0</code>.</li>\r\n        <li><code>mean(neighbors) = (6 + 3 + 0) // 3 = 3</code>.</li>\r\n        <li><code>updated_moistureGrid[0][0] = (9 + 3) // 2 = 6</code>.</li>\r\n    </ul>\r\n</li>\r\n<li>For <code>moistureGrid[0][1] = 6</code>:\r\n    <ul>\r\n        <li>Neighbors are <code>moistureGrid[0][0]=9</code>, <code>moistureGrid[1][0]=3</code>, <code>moistureGrid[1][1]=0</code>.</li>\r\n        <li><code>mean(neighbors) = (9 + 3 + 0) // 3 = 4</code>.</li>\r\n        <li><code>updated_moistureGrid[0][1] = (6 + 4) // 2 = 5</code>.</li>\r\n    </ul>\r\n</li>\r\n<li>For <code>moistureGrid[1][0] = 3</code>:\r\n    <ul>\r\n        <li>Neighbors are <code>moistureGrid[0][0]=9</code>, <code>moistureGrid[0][1]=6</code>, <code>moistureGrid[1][1]=0</code>.</li>\r\n        <li><code>mean(neighbors) = (9 + 6 + 0) // 3 = 5</code>.</li>\r\n        <li><code>updated_moistureGrid[1][0] = (3 + 5) // 2 = 4</code>.</li>\r\n    </ul>\r\n</li>\r\n<li>For <code>moistureGrid[1][1] = 0</code>:\r\n    <ul>\r\n        <li>Neighbors are <code>moistureGrid[0][0]=9</code>, <code>moistureGrid[0][1]=6</code>, <code>moistureGrid[1][0]=3</code>.</li>\r\n        <li><code>mean(neighbors) = (9 + 6 + 3) // 3 = 6</code>.</li>\r\n        <li><code>updated_moistureGrid[1][1] = (0 + 6) // 2 = 3</code>.</li>\r\n    </ul>\r\n</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nmoistureGrid = [\r\n  [0, 0, 0],\r\n  [0, 255, 0],\r\n  [0, 0, 0]\r\n],\r\nsmoothingRadius = 2\r\n\r\nOutput:\r\n[\r\n  [15, 15, 15],\r\n  [15, 127, 15],\r\n  [15, 15, 15]\r\n]</code></pre>\r\n<p><strong>Explanation:</strong> For <code>smoothingRadius = 2</code>, all the soil cells in this 3x3 grid are considered neighbors of each other (excluding the cell itself). Thus, for any cell, there are 8 neighbors.</p>\r\n<ul>\r\n<li>For the central soil cell <code>moistureGrid[1][1] = 255</code>:\r\n    <ul>\r\n        <li>There are 8 neighbors, all with a value of 0.</li>\r\n        <li><code>mean(neighbors) = (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0) // 8 = 0</code>.</li>\r\n        <li><code>updated_moistureGrid[1][1] = (255 + 0) // 2 = 127</code>.</li>\r\n    </ul>\r\n</li>\r\n<li>For any border soil cell (e.g., <code>moistureGrid[0][0] = 0</code>):\r\n    <ul>\r\n        <li>There are 8 neighbors, one with value 255, and seven with value 0.</li>\r\n        <li><code>mean(neighbors) = (255 + 0*7) // 8 = 255 // 8 = 31</code>.</li>\r\n        <li><code>updated_moistureGrid[0][0] = (0 + 31) // 2 = 15</code>.</li>\r\n    </ul>\r\n</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.array.integer moistureGrid</code>\r\n        <ul>\r\n            <li>A matrix of integers representing the moisture levels of soil cells in a field to be smoothed.</li>\r\n            <li><code>1 <= moistureGrid.length <= 50</code></li>\r\n            <li><code>1 <= moistureGrid[i].length <= 50</code></li>\r\n            <li><code>0 <= moistureGrid[i][j] <= 255</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> <code>integer smoothingRadius</code>\r\n        <ul>\r\n            <li>A number representing the distance from a soil cell coordinate, which defines the coordinates that are considered neighbors.</li>\r\n            <li><code>1 <= smoothingRadius <= 5</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>array.array.integer</code>\r\n        <ul>\r\n            <li>A matrix of integers representing the moisture levels of soil cells in a smoothed field.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "visa_6oct",
        "company_id": 570
    },
    {
        "id": 1630,
        "title": "Two Array Sum Queries",
        "problem_statement": "<h1>Two Array Sum Queries</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are developing a new programming language. You believe that ordinary dictionaries are boring, so you've decided to add a cool feature to make your language unique!</p>\r\n<p>You want the cool feature to be able to perform two types of queries. With two integer arrays, <code>a</code> and <code>b</code>, the two types of queries are as follows:</p>\r\n<ul>\r\n    <li>If the query is of the form <code>[0, i, x]</code>, then add <code>x</code> to <code>a[i]</code> (<code>a[i]</code> should be assigned the value of <code>a[i] + x</code>).</li>\r\n    <li>If the query is of the form <code>[1, x]</code>, then find the total number of pairs of indices <code>i</code> and <code>j</code> such that <code>a[i] + b[j] == x</code>.</li>\r\n</ul>\r\n<p>You will be given the arrays of integers <code>a</code> and <code>b</code>, as well as <code>queries</code>, an array of queries in either of the forms described above. Your task is to implement this cool feature, perform the given queries and return an array of the results of the queries of the type <code>[1, x]</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = [1, 4], b = [1, 2, 3], queries = [[1, 5], [0, 0, 2], [1, 5]]\r\nOutput: [1, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The arrays look like this initially:</p>\r\n<pre><code class='language-text'>a = [1, 4]\r\nb = [1, 2, 3]</code></pre>\r\n<p>For the query <code>[1, 5]</code>, there's only one way to form a sum of 5 using an element from each array: <code>5 = 4 + 1 = a[1] + b[0]</code>. So the result is 1.</p>\r\n<p>The query <code>[0, 0, 2]</code> adds 2 to the value of <code>a[0]</code>, so the arrays now look like this:</p>\r\n<pre><code class='language-text'>a = [3, 4]\r\nb = [1, 2, 3]</code></pre>\r\n<p>For the final query <code>[1, 5]</code>, there are now two ways to form a sum of 5 using an element from each array: <code>5 = 3 + 2 = a[0] + b[1]</code> and <code>5 = 4 + 1 = a[1] + b[0]</code>. So the result is 2.</p>\r\n<p>Since the two queries of type <code>[1, x]</code> gave results of 1 and 2 respectively, the answer is <code>[1, 2]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: a = [2, 3], b = [1, 2, 2], queries = [[1, 4], [0, 0, 1], [1, 5]]\r\nOutput: [3, 4]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The arrays look like this initially:</p>\r\n<pre><code class='language-text'>a = [2, 3]\r\nb = [1, 2, 2]</code></pre>\r\n<p>For the query <code>[1, 4]</code>, there are three ways to form a sum of 4 using an element from each array: <code>4 = 2 + 2 = a[0] + b[1]</code>, <code>4 = 2 + 2 = a[0] + b[2]</code>, and <code>4 = 3 + 1 = a[1] + b[0]</code>. So the result is 3.</p>\r\n<p>The query <code>[0, 0, 1]</code> adds 1 to the value of <code>a[0]</code>, so the arrays now look like this:</p>\r\n<pre><code class='language-text'>a = [3, 3]\r\nb = [1, 2, 2]</code></pre>\r\n<p>For the final query <code>[1, 5]</code>, there are now four ways to form a sum of 5 using an element from each array: <code>5 = 3 + 2 = a[0] + b[1]</code>, <code>5 = 3 + 2 = a[0] + b[2]</code>, <code>5 = 3 + 2 = a[1] + b[1]</code>, and <code>5 = 3 + 2 = a[1] + b[2]</code>. So the result is 4.</p>\r\n<p>Since the two queries of type <code>[1, x]</code> gave results of 3 and 4 respectively, the answer is <code>[3, 4]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p><strong>Execution time limit:</strong> 0.5 seconds (cpp)</p>\r\n<p><strong>Memory limit:</strong> 1 GB</p>\r\n\r\n<h3>Input:</h3>\r\n<ul>\r\n    <li><code>a</code>: An array of integers.\r\n        <ul>\r\n            <li><code>1 &lt;= a.length &lt;= 5 * 10^4</code></li>\r\n            <li><code>0 &lt;= a[i] &lt;= 10^8</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><code>b</code>: An array of integers.\r\n        <ul>\r\n            <li><code>1 &lt;= b.length &lt;= 10^4</code></li>\r\n            <li><code>0 &lt;= b[i] &lt;= 10^8</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><code>queries</code>: An array of queries, where <code>queries[i][0]</code> represents the type of query, and the other elements represent the parameters of the query (<code>i</code> and <code>x</code> for type 0, and just <code>x</code> for type 1).\r\n        <ul>\r\n            <li>For queries of the type <code>[0, i, x]</code>, it is guaranteed that <code>0 &lt;= i &lt; a.length</code> and <code>0 &lt;= x &lt;= 10^8</code>.</li>\r\n            <li>For queries of the type <code>[1, x]</code>, it is guaranteed that <code>0 &lt;= x &lt;= 3 * 10^8</code>.</li>\r\n            <li><code>1 &lt;= query.length &lt;= 10^5</code></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Output:</h3>\r\n<ul>\r\n    <li>An array of integers.\r\n        <ul>\r\n            <li>The outputs of the queries of the type <code>[1, x]</code>, in the order they are given in the input.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Solution Template (C++)</h2>\r\n<pre><code class='language-cpp'>vector&lt;int&gt; solution(vector&lt;int&gt; a, vector&lt;int&gt; b, vector&lt;vector&lt;int&gt;&gt; queries) {\r\n    // Your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "visa_6oct",
        "company_id": 570
    }
]