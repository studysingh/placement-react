[
    {
        "id": 882,
        "title": "Anagram Difference",
        "problem_statement": "<h1>Anagram Difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An anagram is a word whose characters can be rearranged to create another word. Given two strings, determine the minimum number of characters in either string that must be modified to make the two strings anagrams. If it is not possible to make the two strings anagrams, return -1.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n<ul>\r\n    <li><code>a = ['tea', 'tea', 'act']</code></li>\r\n    <li><code>b = ['ate', 'toe', 'acts']</code></li>\r\n</ul>\r\n<ul>\r\n    <li><code>a[0] = tea</code> and <code>b[0] = ate</code> are anagrams, so 0 characters need to be modified.</li>\r\n    <li><code>a[1] = tea</code> and <code>b[1] = toe</code> are not anagrams. Modify 1 character in either string (o -> a or a -> o) to make them anagrams.</li>\r\n    <li><code>a[2] = act</code> and <code>b[2] = acts</code> are not anagrams and cannot be converted to anagrams because they contain different numbers of characters.</li>\r\n    <li>The return array is <code>[0, 1, -1]</code>.</li>\r\n</ul>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMinimumDifference</code> in the editor below.</p>\r\n<p><code>getMinimumDifference</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string a[n]</code>: an array of strings</li>\r\n    <li><code>string b[n]</code>: an array of strings</li>\r\n</ul>\r\n\r\n<h3>Return</h3>\r\n<p><code>int[n]</code>: the minimum number of characters in either string that needs to be modified to make the two strings anagrams or -1 if it is not possible.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\na = ['a', 'jk', 'abb', 'mn', 'abc']\r\nb = ['bb', 'kj', 'bbc', 'op', 'def']\r\nOutput:\r\n[-1, 0, 1, 2, 3]</code></pre>\r\n<p><strong>Explanation:</strong> Perform the following n = 5 calculations:</p>\r\n<ul>\r\n    <li><strong>Index 0:</strong> 'a' and 'bb' cannot be anagrams because they contain different numbers of characters.</li>\r\n    <li><strong>Index 1:</strong> 'jk' and 'kj' are already anagrams because they both contain the same characters at the same frequencies.</li>\r\n    <li><strong>Index 2:</strong> 'abb' and 'bbc' differ by one character.</li>\r\n    <li><strong>Index 3:</strong> 'mn' and 'op' differ by two characters.</li>\r\n    <li><strong>Index 4:</strong> 'abc' and 'def' differ by three characters.</li>\r\n</ul>\r\n<p>After checking each pair of strings, return the array <code>[-1, 0, 1, 2, 3]</code> as the answer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Each string consists of lowercase characters [a-z].</li>\r\n    <li><code>1 <= n <= 100</code></li>\r\n    <li><code>0 <= |a[i]|, |b[i]| <= 10^4</code></li>\r\n    <li><code>1 <= |a[i]| + |b[i]| <= 10^4</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Typeface_12july",
        "company_id": 271
    },
    {
        "id": 883,
        "title": "Best Sum Any Tree Path",
        "problem_statement": "```html\r\n<h1>Best Sum Any Tree Path</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a tree with node 0 as the root and a value assigned to each node, determine the maximum sum of values along any path in the tree. The path must not be empty and does not necessarily have to pass through the root. Consider the following tree (labeled with node number/value):</p>\r\n<p>Two of the possible paths are: 4 -> 0 -> 1 -> 2 -> 3 which has a sum of 15 + 5 + 7 + -10 + 4 = 21 and 1 -> 2 -> 3 with a sum of 7 + -10 + 4 = 1. A third possible path, the maximum sum path, is 4 -> 0 -> 1 with a sum of 15 + 5 + 7 = 27.</p>\r\n<p>Complete the function <code>bestSumAnyTreePath</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int parent[n]</code>: integer array where <code>parent[i]</code> is <code>j</code> means that node <code>i</code> is a parent of node <code>j</code>. <code>parent[0] = -1</code> to indicate that node 0 is the root.</li>\r\n    <li><code>int values[n]</code>: integer array where <code>values[i]</code> denotes the value of node <code>i</code>.</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the largest value sum on any non-empty path in the tree</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>parent[0] = -1</code></li>\r\n    <li><code>0 &lt;= parent[i] &lt; n</code> for <code>1 &lt;= i &lt; n</code></li>\r\n    <li><code>-1000 &lt;= values[i] &lt;= 1000</code></li>\r\n    <li>The parent array defines a valid tree.</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>Input from stdin will be processed as follows and passed to the function.</p>\r\n<p>The first line contains an integer n, the size of arrays parent and values.</p>\r\n<p>Each of the following n lines contains an integer, parent[i].</p>\r\n<p>The next line contains the integer n.</p>\r\n<p>Each of the following n lines contains an integer, values[i].</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n-1\r\n0\r\n1\r\n2\r\n0\r\n5\r\n-2\r\n10\r\n-3\r\n10\r\nOutput: 28</code></pre>\r\n<p><strong>Explanation:</strong> No explanation provided for this sample.</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Typeface_12july",
        "company_id": 271
    },
    {
        "id": 884,
        "title": "Word Transformation",
        "problem_statement": "<h1>Word Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For a string <code>word</code> of length <code>n</code> consisting of lowercase English characters, it can be transformed as follows:</p>\r\n<ul>\r\n    <li>For each character of the string,\r\n        <ul>\r\n            <li>If the character is 'z', it is replaced by \"ab\".</li>\r\n            <li>Otherwise, it is replaced by its next higher character, for example, 'a' is replaced by 'b', 'b' by 'c', and 'y' by 'z'.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Thus, if the initial string is \"azbk\" it is \"babol\" after 1 transformation.</p>\r\n<p>As a fun trivia, HackerRank publishes a puzzle for all its employees each week. The goal for this week is to find the length of the resultant string after exactly <code>t</code> transformations are performed as described above. Since the answer can be large, find the answer taking modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getTransformedLength</code> in the editor below.</p>\r\n<p><code>getTransformedLength</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string word</code>: the initial string</li>\r\n    <li><code>int t</code>: the number of transformations</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the length of the string after <code>t</code> transformations, modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider <code>word = \"abczy\"</code> and the number of transformations <code>t = 2</code>.</p>\r\n<p>In the 1<sup>st</sup> transformation, the characters are transformed as follows:</p>\r\n<ul>\r\n    <li>a &rarr; b</li>\r\n    <li>b &rarr; c</li>\r\n    <li>c &rarr; d</li>\r\n    <li>z &rarr; ab</li>\r\n    <li>y &rarr; z</li>\r\n</ul>\r\n<p>So, after the 1<sup>st</sup> transformation, <code>word = \"bcdabz\"</code>.</p>\r\n<p>In the 2<sup>nd</sup> transformation, the characters are transformed as follows:</p>\r\n<ul>\r\n    <li>b &rarr; c</li>\r\n    <li>c &rarr; d</li>\r\n    <li>d &rarr; e</li>\r\n    <li>a &rarr; b</li>\r\n    <li>b &rarr; c</li>\r\n    <li>z &rarr; ab</li>\r\n</ul>\r\n<p>After the 2<sup>nd</sup> transformation, <code>word = \"cdebcdab\"</code>.</p>\r\n<p>The length of the string <code>word</code> after the 2<sup>nd</sup> transformation = 7 so return 7.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\ndefczx\r\n3\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>After the 1<sup>st</sup> transformation, <code>word = \"efgdaby\"</code>.</li>\r\n    <li>After the 2<sup>nd</sup> transformation, <code>word = \"fghebcz\"</code>.</li>\r\n    <li>After the 3<sup>rd</sup> transformation, <code>word = \"ghifcdab\"</code>.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nxyz\r\n2\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>After the 1<sup>st</sup> transformation, <code>word = \"yzab\"</code>.</li>\r\n    <li>After the 2<sup>nd</sup> transformation, <code>word = \"zabbc\"</code>.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; |word| &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; t &le; 10<sup>5</sup></code></li>\r\n    <li>The string <code>word</code> consists of lowercase English characters only.</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>The first line contains a string <code>word</code>, denoting the initial word.</p>\r\n<p>The second line contains an integer <code>t</code>, denoting the number of transformations.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Typeface_12july",
        "company_id": 271
    }
]