[
    {
        "id": 74,
        "title": "Binary Message Decoder",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <div class=\"metadata\">\n            <span class=\"question-number\">Question 27</span>\n            <span class=\"group\">Language Coding</span>\n            <span class=\"section\">Coding 2</span>\n            <span class=\"marks\">15 marks</span>\n        </div>\n    </div>\n\n<div class=\"problem-description\">\n        <p>You and Nikhil always converse using a code language, which converts your message to an equivalent binary number sequence (0s and/or 1s). You are using some secret channel to send the information to Nikhil. If any of your friends tap the channel to steal the message, he/she can only extract the length of the binary number sequence and the number of zeros and ones in the code. The exact binary code cannot be extracted by tapping the channel.</p>\n\n<p>However, Priya wants to know the secret information you are sending to Nikhil. Therefore, she taps the channel and tries to extract some information. All she can extract is the total number of digits and also the number of zeros and ones in the message. After extracting this information, she arranges the extracted numbers in a random binary sequence of the same length and uses circular right shift on the code in an attempt to convert it into the original message, she used to perform x number of the circular right shift operations, where x is the number of digits in your message.</p>\n\n<p>Write a program to find out the number of successful attempts when Priya can extract the original message and print it along with the decimal equivalent of the original message.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>The first line of input is the original binary sequence, which is the message you are sending to Nikhil.</p>\n        <p>The second line of input is a reconstructed binary sequence by Priya which is of the same length, having the same number of zeros and ones as the original message.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>The output contains two integers, where the first integer is the decimal equivalent of the message sent to Nikhil and the second integer is the number of successful attempts when Priya can extract the original message.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Input codes are in binary format.</li>\n            <li>Both the binary codes are of the same length with the same number of zeros and ones.</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <h4>Sample Input 1:</h4>\n            <pre class=\"input\">110110\n011011</pre>\n            <h4>Sample Output 1:</h4>\n            <pre class=\"output\">54 2</pre>\n            <div class=\"explanation\">\n                <h4>Explanation:</h4>\n                <p>The first line of input is the original binary sequence, which is 110110, whose decimal equivalent is 54.</p>\n                <p>The second line of input is a random reconstructed binary code of same length with same number of zeros and ones.</p>\n                <p>By using circular shift on the reconstructed binary sequence, the number of successful attempts where it matches the original sequence has to be printed in the output.</p>\n                <ul>\n                    <li>The first shift will result in 011011 which does not match the original sequence.</li>\n                    <li>The second shift will result in 101101 which does not match.</li>\n                    <li>The third shift will result in 110110 which results in a match with the original sequence.</li>\n                    <li>The fourth shift will result in 011011 which does not match.</li>\n                    <li>The next shift will result in 101101 which does not match.</li>\n                    <li>The next shift will result in 110110 which results in a match with the original sequence.</li>\n                </ul>\n                <p>So, the total number of successful attempts of matching are 2.</p>\n                <p>Hence the output is 54 2.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Input 2:</h4>\n            <pre class=\"input\">1010101010\n0101010101</pre>\n            <h4>Sample Output 2:</h4>\n            <pre class=\"output\">682 5</pre>\n            <div class=\"explanation\">\n                <h4>Explanation:</h4>\n                <p>The first line of input is the original binary sequence, which is 1010101010, whose decimal equivalent is 682.</p>\n                <table class=\"shift-table\">\n                    <tr>\n                        <th>Shift No:</th>\n                        <th>Sequence after shifting</th>\n                        <th>Matched/Not</th>\n                    </tr>\n                    <tr><td>1</td><td>1010101010</td><td>Yes</td></tr>\n                    <tr><td>2</td><td>0101010101</td><td>No</td></tr>\n                    <tr><td>3</td><td>1010101010</td><td>Yes</td></tr>\n                    <tr><td>4</td><td>0101010101</td><td>No</td></tr>\n                    <tr><td>5</td><td>1010101010</td><td>Yes</td></tr>\n                    <tr><td>6</td><td>0101010101</td><td>No</td></tr>\n                    <tr><td>7</td><td>1010101010</td><td>Yes</td></tr>\n                    <tr><td>8</td><td>0101010101</td><td>No</td></tr>\n                    <tr><td>9</td><td>1010101010</td><td>Yes</td></tr>\n                    <tr><td>10</td><td>0101010101</td><td>No</td></tr>\n                </table>\n                <p>The number of times the reconstructed binary sequence by Priya matches with message sent to Nikhil is 5. Hence the output is 682 5.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\"code-template\">\n        <h3>Code Template</h3>\n        <pre class=\"cpp-code\">\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvector&lt;int&gt; decodeMessage(string messageNikhil, string messagePriya){\n    //string messageNikhil store the message that you are sending to nikhil\n    //string messagePriya is reconstructed binary sequence by Priya\n    //Store the result, in vector result at index 0 store equivalent message, and at index 1 number of successful attempts\n    vector&lt;int&gt; result(2);\n\n//WRITE YOUR CODE HERE\n\nreturn result;\n}\n\nint main()\n{\n    string messageNikhil;\n    string messagePriya;\n    getline(cin,messageNikhil);\n    getline(cin,messagePriya);\n    vector&lt;int&gt; result = decodeMessage(messageNikhil,messagePriya);\n    cout&lt;&lt;result[0]&lt;&lt;\" \"&lt;&lt;result[1];\n    return 0;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/116dX3IqeSG3UnjvkSEZF2BFV_7tE5_o1kD_15UfkFDc/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Nobroker",
        "company_id": 15
    },
    {
        "id": 75,
        "title": "Sangeeta's Zig-Zag Park Run",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <span class=\"question-number\">Question 28</span>\n        <span class=\"group\">Language Coding</span>\n        <span class=\"section\">Coding 3</span>\n        <span class=\"marks\">20 marks</span>\n    </div>\n\n<div class=\"problem-description\">\n        <p>Sangeeta loves to jog every morning. She goes to a different park every day, and always runs across the park in the same zig-zag manner that she loves. The parks can be represented as squares of size N x N. The manner in which Sangeeta runs in a 4 x 4 sized park can be represented as follows:</p>\n\n<table class=\"park-grid\">\n            <tr><td>1</td><td>3</td><td>4</td><td>10</td></tr>\n            <tr><td>2</td><td>5</td><td>9</td><td>11</td></tr>\n            <tr><td>6</td><td>8</td><td>12</td><td>15</td></tr>\n            <tr><td>7</td><td>13</td><td>14</td><td>16</td></tr>\n        </table>\n\n<p>The values in each block are the number of minutes Sangeeta takes to arrive there from her starting point. She always starts at the top left of the park and takes one minute to move to the next block. Consider the park blocks as 0-indexed where the top left block denotes the location (0,0) and the bottom right block denotes the location (N-1, N-1).</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>A single line of input contains three space separated integers: N, x and y, where N indicates the size of the park and x, y indicate the position of the block for which time needs to be calculated.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>The output is an integer, the time Sangeeta takes to arrive at (x,y).</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10000</li>\n            <li>1 ≤ x ≤ N</li>\n            <li>1 ≤ y ≤ N</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Sample Input 1:\n3 2 2</pre>\n            <pre class=\"output\">Sample Output 1:\n9</pre>\n            <div class=\"explanation\">\n                <p>The destination block is marked in yellow colour:</p>\n                <table class=\"park-grid\">\n                    <tr><td>1</td><td>3</td><td>4</td></tr>\n                    <tr><td>2</td><td>5</td><td>8</td></tr>\n                    <tr><td>6</td><td>7</td><td class=\"highlighted\">9</td></tr>\n                </table>\n                <p>So, it takes 9 minutes to reach the block (2,2).</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <pre class=\"input\">Sample Input 2:\n4 2 3</pre>\n            <pre class=\"output\">Sample Output 2:\n15</pre>\n            <div class=\"explanation\">\n                <p>The destination block is marked in yellow colour:</p>\n                <table class=\"park-grid\">\n                    <tr><td>1</td><td>3</td><td>4</td><td>10</td></tr>\n                    <tr><td>2</td><td>5</td><td>9</td><td>11</td></tr>\n                    <tr><td>6</td><td>8</td><td>12</td><td class=\"highlighted\">15</td></tr>\n                    <tr><td>7</td><td>13</td><td>14</td><td>16</td></tr>\n                </table>\n                <p>So, it takes 15 minutes to reach the block (2,3).</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\"starter-code\">\n        <h3>Function Signature</h3>\n        <pre class=\"cpp-code\">\nint calculateTime(int N, int x, int y){\n    // Write your code here\n    int calcTime = 0;\n    return calcTime;\n}</pre>\n    </div>\n</div>\n\n<style>\n.park-grid {\n    border-collapse: collapse;\n    margin: 15px 0;\n}\n\n.park-grid td {\n    border: 1px solid #ccc;\n    padding: 8px;\n    text-align: center;\n    width: 40px;\n}\n\n.highlighted {\n    background-color: #ffeb3b;\n}\n\n.cpp-code {\n    background-color: #f5f5f5;\n    padding: 15px;\n    border-radius: 4px;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1mRM8ZHNhpP-SMiWAv5dsARJiI3YzaxkRae-azcySxE0/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Nobroker",
        "company_id": 15
    },
    {
        "id": 76,
        "title": "Sum of Last Nodes in Complete Levels",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <span class=\"problem-number\">26</span>\n        <span class=\"problem-group\">Language Coding</span>\n        <span class=\"problem-section\">Coding 1</span>\n        <span class=\"problem-marks\">Marks: 15</span>\n    </div>\n\n<div class=\"problem-description\">\n        <p>Consider that you are provided with a list A of N integers. Construct an almost complete binary tree by using the elements of A and write a program to print the sum of all the last numbers from each level that are completely filled.</p>\n\n<p>If the elements of the list L are [x1,x2,x3,x4, x5, x6, .., x10] then the constructed almost binary tree would be in the following manner.</p>\n\n<div class=\"tree-diagram\">\n            <!-- You would need to include the tree diagram image here -->\n            <img src=\"binary-tree-diagram.png\" alt=\"Almost complete binary tree diagram showing nodes x1 through x10 arranged in levels\">\n        </div>\n\n<div class=\"definition\">\n            <p>An almost complete binary tree is a binary tree that satisfies the following conditions:</p>\n            <ol>\n                <li>Insertion of nodes must take place level by level and all the nodes must be left justified.</li>\n                <li>All the levels from 1 to h-1 levels(h stands for the number of levels) should be completely filled without any gaps.</li>\n            </ol>\n        </div>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>List A should not have any negative numbers</li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>The first line of input contains N where N denotes the total number of elements in the list A.</p>\n        <p>The second line of input contains N elements separated by a single white space.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>A single line of output contains the sum of all the last numbers from each level if the level is completely filled.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Sample Input 1:\n4\n12 23 354 32</pre>\n            <pre class=\"output\">Sample Output 1:\n366</pre>\n            <div class=\"explanation\">\n                <h4>Explanation:</h4>\n                <p>From the given Sample Input1, we have:</p>\n                <p>Total number of elements = 4</p>\n                <p>So Almost binary Tree is formed:</p>\n                <pre>12    (Level 1)</pre>\n            </div>\n        </div>\n    </div>\n\n<div class=\"note\">\n        <p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings while reading the input or while printing, as these contribute to the standard output.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1806Rum_6lt7oNkku3jpwpwicStzSQXoZHHir87pIUPE/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Nobroker",
        "company_id": 15
    }
]