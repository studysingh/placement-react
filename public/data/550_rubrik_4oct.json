[
    {
        "id": 1564,
        "title": "The Adaptive Content Router",
        "problem_statement": "<h1>The Adaptive Content Router</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A revolutionary content delivery network was developed that used quantum-entangled nodes for data storage. The network consisted of n storage nodes (n≤10^5), each with its own quantum signature represented by an integer value. The network was designed to adaptively store data by finding the most compatible nodes based on quantum interference patterns.</p>\r\n<p>The key innovation was the Quantum Compatibility Index (QCI), calculated using the XOR operation (⊕) between a node's signature and the incoming data packet. The higher the QCI, the better the quantum resonance and storage efficiency.</p>\r\n<p>When a content provider wants to store a data packet with signature x, they specify a subset of the network [L,R] (for load balancing and geographical constraints). The system then needs to:</p>\r\n<ul>\r\n    <li>Find the node i within range [L,R] that has the highest quantum compatibility (maximum A[i]⊕x) with the data</li>\r\n    <li>Store the data by quantum-merging it with the node (updating the node's signature as A[i]=A[i]+x)</li>\r\n    <li>Return the chosen node's identifier for future reference</li>\r\n</ul>\r\n<p><strong>Note:</strong> ⊕ represents the \"xor\" operation.</p>\r\n<p><strong>Note:</strong> If there are multiple possible answers, return the minimum idx with max XOR.</p>\r\n<p>For each request, the system must output the identifier of the chosen node and automatically perform the quantum merger.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>First line:</strong> Two space-separated integers n and q</p>\r\n<ul>\r\n    <li><strong>n:</strong> number of nodes</li>\r\n    <li><strong>q:</strong> number of queries</li>\r\n</ul>\r\n<p><strong>Second line:</strong> n space-separated integers A[1], A[2], ..., A[n]</p>\r\n<ul>\r\n    <li><strong>A[i]:</strong> initial quantum signature of node i</li>\r\n</ul>\r\n<p><strong>Next q lines:</strong> Each line contains three space-separated integers L, R, x</p>\r\n<ul>\r\n    <li><strong>L, R:</strong> range of nodes to consider (1-indexed)</li>\r\n    <li><strong>x:</strong> quantum signature of incoming data packet</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1. Number of nodes (n): 1 ≤ n ≤ 10^5</li>\r\n    <li>2. Number of queries (q): 1 ≤ q ≤ 10^5</li>\r\n    <li>3. Node signatures (A[i]): 1 ≤ A[i] ≤ 10^9</li>\r\n    <li>4. Query range (L, R): 1 ≤ L ≤ R ≤ n</li>\r\n    <li>5. Data packet signature (x): 1 ≤ x ≤ 10^9</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 3\r\n2 5 9 1 13\r\n1 3 6\r\n2 5 8\r\n1 5 12\r\nOutput:\r\n3\r\n2\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initially, we have 5 nodes with quantum signatures:</p>\r\n<ul>\r\n    <li>Index 1: 2</li>\r\n    <li>Index 2: 5</li>\r\n    <li>Index 3: 9</li>\r\n    <li>Index 4: 1</li>\r\n    <li>Index 5: 13</li>\r\n</ul>\r\n<p><strong>Query 1:</strong> (L=1, R=3, x=6)</p>\r\n<ul>\r\n    <li>We consider nodes 1 to 3; their signatures are [2, 5, 9].</li>\r\n    <li>XOR with node 1: 2 ⊕ 6 = 4</li>\r\n    <li>XOR with node 2: 5 ⊕ 6 = 3</li>\r\n    <li>XOR with node 3: 9 ⊕ 6 = 15 (Highest)</li>\r\n    <li>We pick node 3 (highest XOR). Then we update node 3's signature to (9 + 6 = 15).</li>\r\n    <li>The new signatures: [2, 5, 15, 1, 13]</li>\r\n</ul>\r\n<p><strong>Query 2:</strong> (L=2, R=5, x=8)</p>\r\n<ul>\r\n    <li>Current signatures in range [2:5]: [5, 15, 1, 13].</li>\r\n    <li>XOR with node 2: 5 ⊕ 8 = 13 (Highest)</li>\r\n    <li>XOR with node 3: 15 ⊕ 8 = 7</li>\r\n    <li>XOR with node 4: 1 ⊕ 8 = 9</li>\r\n    <li>XOR with node 5: 13 ⊕ 8 = 5</li>\r\n    <li>The highest XOR is at node 2. Update node 2's signature to (5 + 8 = 13).</li>\r\n    <li>Updated signatures: [2, 13, 15, 1, 13]</li>\r\n</ul>\r\n<p><strong>Query 3:</strong> (L=1, R=5, x=12)</p>\r\n<ul>\r\n    <li>Current signatures in range [1:5]: [2, 13, 15, 1, 13].</li>\r\n    <li>XOR with node 1: 2 ⊕ 12 = 14 (Highest)</li>\r\n    <li>XOR with node 2: 13 ⊕ 12 = 1</li>\r\n    <li>XOR with node 3: 15 ⊕ 12 = 3</li>\r\n    <li>XOR with node 4: 1 ⊕ 12 = 13</li>\r\n    <li>XOR with node 5: 13 ⊕ 12 = 1</li>\r\n    <li>Highest XOR is at node 1, updating its signature to (2 + 12 = 14).</li>\r\n    <li>Final signatures: [14, 13, 15, 1, 13]</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 4\r\n3 7 12 2 4\r\n1 3 5\r\n2 4 3\r\n1 5 8\r\n3 5 2\r\nOutput:\r\n3\r\n3\r\n3\r\n3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initial array: [3,7,12,2,4]</p>\r\n<p><strong>Query 1:</strong> range[1,3], x=5</p>\r\n<ul>\r\n    <li>Check nodes 1 to 3: [3,7,12]</li>\r\n    <li>XOR values: 3⊕5=6, 7⊕5=2, 12⊕5=9</li>\r\n    <li>Maximum at index 3 (12⊕5=9)</li>\r\n    <li>Update A[3]: 12+5=17</li>\r\n    <li>Array becomes: [3,7,17,2,4]</li>\r\n</ul>\r\n<p><strong>Query 2:</strong> range[2,4], x=3</p>\r\n<ul>\r\n    <li>Check nodes 2 to 4: [7,17,2]</li>\r\n    <li>XOR values: 7⊕3=4, 17⊕3=18, 2⊕3=1</li>\r\n    <li>Maximum at index 3 (17⊕3=18)</li>\r\n    <li>Update A[3]: 17+3=20</li>\r\n    <li>Array becomes: [3,7,20,2,4]</li>\r\n</ul>\r\n<p><strong>Query 3:</strong> range[1,5], x=8</p>\r\n<ul>\r\n    <li>Check nodes 1 to 5: [3,7,20,2,4]</li>\r\n    <li>XOR values: 3⊕8=11, 7⊕8=15, 20⊕8=28, 2⊕8=10, 4⊕8=12</li>\r\n    <li>Maximum at index 3 (20⊕8=28)</li>\r\n    <li>Update A[3]: 20+8=28</li>\r\n    <li>Array becomes: [3,7,28,2,4]</li>\r\n</ul>\r\n<p><strong>Query 4:</strong> range[3,5], x=2</p>\r\n<ul>\r\n    <li>Check nodes 3 to 5: [28,2,4]</li>\r\n    <li>XOR values: 28⊕2=30, 2⊕2=0, 4⊕2=6</li>\r\n    <li>Maximum at index 3 (28⊕2=30)</li>\r\n    <li>Update A[3]: 28+2=30</li>\r\n    <li>Array becomes: [3,7,30,2,4]</li>\r\n</ul>\r\n<p>Final array: [3,7,30,2,4]</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "rubrik_4oct",
        "company_id": 550
    },
    {
        "id": 1568,
        "title": "Storage Pair Matching",
        "problem_statement": "<h1>Storage Pair Matching</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have 2N storage drives in a data center laid down sequentially in a rack numbered 1 through 2N. For redundancy purposes, certain pairs of drives are compatible for RAID mirroring based on their firmware versions. You are given M such pairs of drives that are compatible for mirroring. All other pairs of drives are incompatible.</p>\r\n<p>In one operation, you can pair adjacent drives in the rack if they are compatible for RAID mirroring. When you pair two drives, they are removed from the rack and the remaining drives slide together in the rack to close the gap (if a gap was created).</p>\r\n<p>Your task is to find how many different ways you can do this operation N times. Two ways to do the operation N times are considered different when there exists 1 &le; i &le; N such that the pair of disks chosen in the i-th operation is different in those two ways.</p>\r\n<p>Find the answer, modulo 998244353</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n<li>First line: two integers N and M</li>\r\n<li>2*N is the number of disks</li>\r\n<li>M is the number of pair of disks that are compatible</li>\r\n<li>Following M lines contain a pair of disks A_i and B_i that are compatible with each other</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 &le; N &le; 200</li>\r\n<li>For subtask 1 (100 points): 1 &le; N &le; 10</li>\r\n<li>0 &le; M &le; N*(2N-1)</li>\r\n<li>1 &le; A_i, B_i &le; 2N</li>\r\n<li>All pairs of disks in the input are distinct</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 2 2\r\n1 2\r\n3 4\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are two ways to complete the operation</p>\r\n<ul>\r\n<li>First pair up disks (1,2) and then pair up disk (3,4)</li>\r\n<li>First pair up disks (3,4) and then pair up disk (1,2)</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 3 5\r\n1 6\r\n2 3\r\n4 5\r\n2 5\r\n3 4\r\nOutput: 3</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "rubrik_4oct",
        "company_id": 550
    }
]