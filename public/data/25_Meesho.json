[
    {
        "id": 109,
        "title": "Binary Search Tree Validation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Binary Search Tree Validation</h1>\n\n<div class=\\\"problem-description\\\">\n        <p>A binary tree uses a multi-node data structure where each node may have 0 to 2 child nodes, and has one stored value (its node number in this case). A tree may either be:</p>\n        <ul>\n            <li>An empty tree, the root is <code>null</code></li>\n            <li>A non-empty tree with a non-null root node that contains a value and up to 2 subtrees, <em>left</em> and <em>right</em>, which are also binary trees</li>\n        </ul>\n\n<p>A binary tree is classified as a binary search tree (BST) if all of the non-null nodes exhibit two properties:</p>\n        <ul>\n            <li>The left subtree of each node contains only nodes with values that are lower than its own value</li>\n            <li>The right subtree of each node contains only nodes with values that are higher than its own value</li>\n        </ul>\n\n<p>A pre-order traversal is a recursive tree traversal method where the current node is visited first, then the left subtree, and then the right subtree.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The following parameters are read from stdin:</p>\n        <ul>\n            <li>The first line contains an integer q, the number of queries</li>\n            <li>The next q sets of lines are defined as:\n                <ul>\n                    <li>The first line contains an integer n, the number of nodes in the tree</li>\n                    <li>The next line contains a[n]: a list of space-separated integers that denote values encountered in the traversal of a tree</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a string, either <code>YES</code> if the path represents a valid BST, or <code>NO</code> if it cannot.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ q ≤ 10</li>\n            <li>1 ≤ n, a[i] ≤ 100</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Sample Case 0</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">5\n3\n1 3 2\n3\n2 1 3\n6\n3 2 1 5 4 6\n4\n1 3 4 2\n5\n3 4 5 1 2</pre>\n            <pre class=\\\"output\\\">YES\nYES\nYES\nNO\nNO</pre>\n            <div class=\\\"explanation\\\">\n                <p>The diagrams below show BST representations with green nodes at valid locations and red at invalid:</p>\n                <img src=\\\"[path-to-bst-diagrams]\\\" alt=\\\"BST diagram examples showing valid and invalid cases\\\">\n                <p>An explanation of the q = 5 queries:</p>\n                <ol>\n                    <li>Diagram (a) is valid, so return the string YES</li>\n                    <li>Diagram (b) is valid, so return the string YES</li>\n                    <li>Diagram (c) is valid, so return the string YES</li>\n                    <li>Diagram (d) is not valid. The root is 1 because it is the first value in the list. The second value 3 must be the right child of 1 because it is greater. Likewise, the third value 4 must be the right child of 3. For 2 to be the last value in the traversal, it has to be the left child of 4. It is less than the root value 3 above it and is on its right subtree. Return the string NO</li>\n                    <li>Diagram (e) is not valid. Similar violation of BST properties. Return the string NO</li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ss4Mcd918X1PVlQqCzbWMGvgT-91GFWA8kt0SdBd_zk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Meesho",
        "company_id": 25
    },
    {
        "id": 110,
        "title": "Bus Seating Allocation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Bus Seating Allocation</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>For a bus going to Hackerland, there are infinite seats numbered from 1 to infinity, and n people are standing in a queue waiting to be seated. The i<sup>th</sup> person wants to be seated on the seat numbered arr[i]. The seats are allocated based on the following rules:</p>\n\n<ul>\n            <li>The seats are allocated in the sequence of the queue i.e. the first person followed by the second person and so on</li>\n            <li>If the seat required by the person in the front of the queue is empty, they are allocated that seat and removed from the queue</li>\n            <li>If the seat required by the person in the front of the queue is occupied, the seat number required by them is incremented by 1 and they are pushed to the end of the queue</li>\n        </ul>\n\n<p>Given an array arr representing the seat numbers that the people in the queue want, find the final seat number allocated to each person in the queue.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function getSeatsAllocation in the editor below.</p>\n        <p>getSeatsAllocation has the following parameter:</p>\n        <ul>\n            <li>int arr[n]: the order of people in the queue</li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Returns</h3>\n        <p>int[n]: the seats allotted to each person</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ arr[i] ≤ n</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nn = 5\narr = [1, 2, 3, 2, 4]</pre>\n            <pre class=\\\"output\\\">Output:\n[1, 2, 3, 5, 4]</pre>\n\n<div class=\\\"explanation\\\">\n                <h4>Explanation</h4>\n                <table>\n                    <tr>\n                        <th>Original index</th>\n                        <th>Seat choice</th>\n                        <th>Seat allocation</th>\n                        <th>Action</th>\n                    </tr>\n                    <tr>\n                        <td>[1(1), 2(2), 3(3), 2(4), 4(5)]</td>\n                        <td>-</td>\n                        <td>-</td>\n                        <td>Seat 1 is allocated to person 1</td>\n                    </tr>\n                    <tr>\n                        <td>[2(2), 3(3), 2(4), 4(5)]</td>\n                        <td>1: 1</td>\n                        <td>-</td>\n                        <td>Seat 2 is allocated to person 2</td>\n                    </tr>\n                    <!-- Additional rows omitted for brevity -->\n                </table>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1yX7wLIujarRRBTlfIJESpSROBCLwHxBbHS7_6NYLAlc/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Meesho",
        "company_id": 25
    },
    {
        "id": 111,
        "title": "Directory Tree Operation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Question 3</h2>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>There is an existing directory structure in form of a tree with n nodes and q queries.</p>\n\n<h3>The queries are of three types:</h3>\n        <ol>\n            <li>&lt;mkdir&gt; &lt;folder-x&gt; &lt;folder-y&gt;: Create a folder named &lt;folder-y&gt; under &lt;folder-x&gt;</li>\n            <li>&lt;rmdir&gt; &lt;folder-x&gt;: Delete &lt;folder-x&gt; from the system, including its subdirectories</li>\n            <li>&lt;count_subdir&gt; &lt;folder-x&gt;: Compute the total number of folders (possibly immediate or non-immediate) under &lt;folder-x&gt; (including itself) and return the count</li>\n        </ol>\n\n<p>Return an array of integers representing the result of the third type of query in the same order they are given.</p>\n\n<div class=\\\"important-note\\\">\n            <p>Note: \\\"folder-1\\\" is always the root directory, and no query will call for it to be removed.</p>\n        </div>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example-input\\\">\n            <p>Suppose existingStructureEdges = [[\\\"folder-1\\\", \\\"a\\\"], [\\\"folder-1\\\", \\\"b\\\"], [\\\"folder-1\\\", \\\"c\\\"], [\\\"a\\\", \\\"d\\\"], [\\\"a\\\", \\\"e\\\"], [\\\"e\\\", \\\"f\\\"], [\\\"c\\\", \\\"g\\\"]]</p>\n            <p>queries = [\\\"mkdir d h\\\", \\\"rmdir e\\\", \\\"count_subdir a\\\"]</p>\n        </div>\n\n<div class=\\\"directory-visualization\\\">\n            <!-- Tree structure visualization could be added here -->\n        </div>\n\n<div class=\\\"commands-table\\\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Command No.</th>\n                        <th>Command</th>\n                        <th>Action</th>\n                        <th>Result</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>1</td>\n                        <td>mkdir d h</td>\n                        <td>Create new directory \\\"h\\\" under \\\"d\\\"</td>\n                        <td>\\\"h\\\" created under \\\"d\\\"</td>\n                    </tr>\n                    <tr>\n                        <td>2</td>\n                        <td>rmdir e</td>\n                        <td>Remove \\\"e\\\" and its subdirectories</td>\n                        <td>\\\"e\\\" removed</td>\n                    </tr>\n                    <tr>\n                        <td>3</td>\n                        <td>count a</td>\n                        <td>Count subfolders inside \\\"a\\\"</td>\n                        <td>Answer: 3</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n<div class=\\\"example-output\\\">\n            <p>Hence the answer is [3].</p>\n        </div>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function getSubFolders in the editor below. The function must return an array of integers representing the result of the third type of query in the same order it is given.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/16HB0R-lcAd_M079eWKzS97uPtNBOuI-ET4pjP-Gy3ms/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Meesho",
        "company_id": 25
    },
    {
        "id": 177,
        "title": "Product Suggestions System",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Product Suggestions System</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>For an array of n strings <code>products</code> and a word to search, design a system that, when each character of the searched word is typed, suggests at most three product names from the products array. The suggested products should share a common prefix with the searched word. If more than three products exist with a common prefix, report the three product names that appear first in lexicographical order.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>STRING_ARRAY products: the list of products</li>\n            <li>STRING search: a string to search</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a vector of vectors containing strings. For each prefix of the search string, return a maximum of three lexicographically smallest words with a common prefix.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 1000</li>\n            <li>1 ≤ length of products[i] ≤ 500</li>\n            <li>1 ≤ sum(length of products[i]) ≤ 5×10<sup>5</sup></li>\n            <li>All the strings of products are unique</li>\n            <li>products[i] consists of lowercase English letters only</li>\n            <li>1 ≤ length of search ≤ 1000</li>\n            <li>The searched text consists of lowercase English letters only</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example 1</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nproducts = [\\\"carpet\\\", \\\"cart\\\", \\\"car\\\", \\\"camera\\\", \\\"crate\\\"]\nsearch = \\\"camera\\\"</pre>\n            <pre class=\\\"output\\\">Output:\nWhen typed \\'c\\': [\\\"camera\\\", \\\"car\\\", \\\"carpet\\\"]\nWhen typed \\'ca\\': [\\\"camera\\\", \\\"car\\\", \\\"carpet\\\"]\nWhen typed \\'cam\\': [\\\"camera\\\"]\nWhen typed \\'came\\': [\\\"camera\\\"]\nWhen typed \\'camer\\': [\\\"camera\\\"]\nWhen typed \\'camera\\': [\\\"camera\\\"]</pre>\n            <div class=\\\"explanation\\\">\n                <p>For each prefix of the search term \\\"camera\\\", the system returns up to three lexicographically smallest matching products.</p>\n            </div>\n        </div>\n\n        <h3>Example 2</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nproducts = [\\\"abcd\\\", \\\"abdc\\\", \\\"abaa\\\", \\\"abcd\\\"]\nsearch = \\\"abcd\\\"</pre>\n            <pre class=\\\"output\\\">Output:\nWhen typed \\'a\\': [\\\"abaa\\\", \\\"abcd\\\", \\\"abdc\\\"]\nWhen typed \\'ab\\': [\\\"abaa\\\", \\\"abcd\\\", \\\"abdc\\\"]\nWhen typed \\'abc\\': [\\\"abcd\\\"]\nWhen typed \\'abcd\\': [\\\"abcd\\\"]</pre>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"code\\\">vector&lt;vector&lt;string&gt;&gt; getProductSuggestions(vector&lt;string&gt; products, string search)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1mIjRr1oELv2PVBO_6dg8s3T9qSbD19XbwK_D02dDcC0/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nvector<vector<string>> getProductSuggestions(vector<string> p, string s) {\\n    sort(p.begin(), p.end());\\n    vector<vector<string>> res;\\n    string pre = \\\"\\\";\\n    for(char c : s){\\n        pre += c;\\n        int st = lower_bound(p.begin(), p.end(), pre) - p.begin();\\n        vector<string> sug;\\n        for(int i = st; i < min((int)p.size(), st + 3); ++i){\\n            if(p[i].substr(0, pre.size()) == pre){\\n                sug.push_back(p[i]);\\n            }\\n            else{\\n                break;\\n            }\\n        }\\n        res.push_back(sug);\\n    }\\n    return res;\\n}\\n\\nint main(){\\n    int n;\\n    cin >> n;\\n    vector<string> p(n);\\n    for(auto &it : p) cin >> it;\\n    string s;\\n    cin >> s;\\n    vector<vector<string>> sug = getProductSuggestions(p, s);\\n    for(auto &v : sug){\\n        if(v.empty()){\\n            cout << \\\"\\\\n\\\";\\n            continue;\\n        }\\n        for(int i = 0; i < v.size(); ++i){\\n            if(i > 0) cout << \\\" \\\";\\n            cout << v[i];\\n        }\\n        cout << \\\"\\\\n\\\";\\n    }\\n}",
        "company_name": "Meesho",
        "company_id": 25
    },
    {
        "id": 178,
        "title": "LFU Cache Implementation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>LFU Cache Implementation</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Implement a Least Frequently Used (LFU) cache data structure of size cacheSize that handles two types of queries: GET and PUT.</p>\n        \n        <ul>\n            <li>A GET query attempts to retrieve the value of a given key:\n                <ul>\n                    <li>If the key is present in the cache, it is returned.</li>\n                    <li>Otherwise, it returns -1.</li>\n                </ul>\n            </li>\n            <li>A PUT query updates or inserts a key-value pair into the cache:\n                <ul>\n                    <li>When the cache is full, the least frequently used key is removed to accommodate the new key-value pair.</li>\n                    <li>If there is a tie in the frequency of keys, then the least recently used key is removed.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The function accepts following parameters:</p>\n        <ul>\n            <li><code>int cacheSize</code>: the size of the cache</li>\n            <li><code>string queries[]</code>: the query strings</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an array of integers where each i<sup>th</sup> element is the answer for the i<sup>th</sup> GET query.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ cacheSize ≤ 100</li>\n            <li>1 ≤ q ≤ 10<sup>5</sup></li>\n            <li>Queries contain at least 1 query of type 1</li>\n            <li>|queries[i]| ≤ 13</li>\n            <li>Key and value are made up of digits (\\'0\\'-\\'9\\') only</li>\n            <li>Value of key ≤ 300</li>\n            <li>Value of value ≤ 10<sup>6</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example 1</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\ncacheSize = 1\nq = 5\nqueries = [\\\"PUT 1 1\\\", \\\"PUT 2 2\\\", \\\"GET 1\\\"]</pre>\n            <pre class=\\\"output\\\">Output:\n[-1]</pre>\n            <div class=\\\"explanation\\\">\n                <table class=\\\"cache-state\\\">\n                    <tr>\n                        <th>Query</th>\n                        <th>Query Type</th>\n                        <th>Key</th>\n                        <th>Value</th>\n                        <th>Cache State</th>\n                        <th>Output</th>\n                    </tr>\n                    <tr>\n                        <td>1</td>\n                        <td>PUT</td>\n                        <td>1</td>\n                        <td>1</td>\n                        <td>1:1</td>\n                        <td>-</td>\n                    </tr>\n                    <tr>\n                        <td>2</td>\n                        <td>PUT</td>\n                        <td>2</td>\n                        <td>2</td>\n                        <td>2:2</td>\n                        <td>-</td>\n                    </tr>\n                    <tr>\n                        <td>3</td>\n                        <td>GET</td>\n                        <td>1</td>\n                        <td>-</td>\n                        <td>2:2</td>\n                        <td>-1</td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n\n        <h3>Example 2</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\ncacheSize = 2\nq = 4\nqueries = [\\\"PUT 1 1\\\", \\\"PUT 2 2\\\", \\\"PUT 3 3\\\", \\\"GET 1\\\"]</pre>\n            <pre class=\\\"output\\\">Output:\n[-1]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Since no cache entry has been retrieved at \\'PUT 3:3\\', the earlier entry, 1:1, is removed.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\">vector&lt;int&gt; implementLFU(int cacheSize, vector&lt;string&gt; queries)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1BLKEsDQ4xXa4kGjGfMsAbd5NFUaQJnSSkMQCJv8yTM0/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nvector<int> implementLFU(int sz, vector<string> qs) {\\n    vector<int> res;\\n    if(sz == 0){\\n        for(auto &q : qs){\\n            if(q[0]==\\'G\\'){\\n                res.push_back(-1);\\n            }\\n        }\\n        return res;\\n    }\\n    class LFUCache {\\n    public:\\n        int cap;\\n        int minF;\\n        unordered_map<int, pair<int, int>> kt;\\n        unordered_map<int, list<int>> ft;\\n        unordered_map<int, list<int>::iterator> ki;\\n\\n        LFUCache(int c) : cap(c), minF(0) {}\\n\\n        int get(int k) {\\n            if (kt.find(k) == kt.end()) return -1;\\n            int v = kt[k].first, f = kt[k].second;\\n            ft[f].erase(ki[k]);\\n            if (ft[f].empty()) {\\n                ft.erase(f);\\n                if (minF == f) minF++;\\n            }\\n            kt[k].second++;\\n            ft[kt[k].second].push_back(k);\\n            ki[k] = --ft[kt[k].second].end();\\n            return v;\\n        }\\n\\n        void put(int k, int v) {\\n            if (cap == 0) return;\\n            if (kt.find(k) != kt.end()) {\\n                kt[k].first = v;\\n                get(k);\\n                return;\\n            }\\n            if (kt.size() == cap) {\\n                int e = ft[minF].front();\\n                ft[minF].pop_front();\\n                kt.erase(e);\\n                ki.erase(e);\\n                if (ft[minF].empty()) ft.erase(minF);\\n            }\\n            kt[k] = {v, 1};\\n            ft[1].push_back(k);\\n            ki[k] = --ft[1].end();\\n            minF = 1;\\n        }\\n    };\\n    LFUCache cache(sz);\\n    for(auto &q : qs){\\n        if(q[0] == \\'G\\'){\\n            int k = stoi(q.substr(4));\\n            res.push_back(cache.get(k));\\n        }\\n        else{\\n            int sp1 = q.find(\\' \\'), sp2 = q.find(\\' \\', sp1 + 1);\\n            int k = stoi(q.substr(sp1 + 1, sp2 - sp1 - 1)), v = stoi(q.substr(sp2 + 1));\\n            cache.put(k, v);\\n        }\\n    }\\n    return res;\\n}\\n\\nint main(){\\n    int sz, q;\\n    cin >> sz >> q;\\n    vector<string> qs(q);\\n    cin.ignore();\\n    for(int i=0;i<q;i++) {\\n        getline(cin, qs[i]);\\n        if(qs[i].empty()){\\n            i--;\\n            continue;\\n        }\\n    }\\n    vector<int> ans = implementLFU(sz, qs);\\n    cout << \\\"[\\\";\\n    for(int i=0;i<ans.size();i++){\\n        cout << ans[i];\\n        if(i != ans.size()-1) cout << \\\", \\\";\\n    }\\n    cout << \\\"]\\\";\\n}",
        "company_name": "Meesho",
        "company_id": 25
    },
    {
        "id": 179,
        "title": "Minimum Jumps in Hackerland",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Minimum Jumps in Hackerland</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>The city of Hackerland can be represented using a grid with n rows and m columns containing an empty cell represented by a \\'*\\' and a blocked cell represented by a \\'#\\'. Traveling is allowed only through empty cells. The people of Hackerland are required to travel from a starting cell defined by the character \\'S\\' to an ending cell represented by a character \\'E\\'.</p>\n        \n        <p>The people can jump a length of any integer k in all four directions from a given cell i.e. up, down, left, and right. However, if the jump length k is greater than 1, the next jump must be made in the same direction. For example, a hacker is allowed to jump 3 units towards the right, followed by 1 unit towards the right, and then 3 units towards the left. They however cannot jump 3 units towards the right followed by 1 unit towards the left as direction change is not allowed if the previous jump was of length greater than 1.</p>\n        \n        <p>Note that the last jump in any jump sequence is always of length 1.</p>\n        \n        <p>The jump can be made over a blocked cell as well as long as both starting and ending cells are empty.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The function accepts a vector&lt;string&gt; grid as parameter.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an integer representing the minimum number of jumps to reach cell \\'E\\' starting from \\'S\\'. Return -1 if it is not possible to reach E from S.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ n, m ≤ 100</li>\n            <li>The strings will have only \\'*\\', \\'#\\', \\'S\\', and \\'E\\'. There will be only one \\'S\\' and one \\'E\\'.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Sample Case 0:</h4>\n            <pre class=\\\"input\\\">Input:\nn = 2\nm = 2\ngrid = [\n\\\"S#\\\",\n\\\"#E\\\"\n]</pre>\n            <pre class=\\\"output\\\">Output:\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>It is not possible to move to any adjacent cell in the grid.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Case 1:</h4>\n            <pre class=\\\"input\\\">Input:\nn = 4\nm = 6\ngrid = [\n\\\"S*****#\\\",\n\\\"#######\\\",\n\\\"######*\\\",\n\\\"######E\\\"\n]</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The optimal path is:</p>\n                <ul>\n                    <li>Jump from (0, 0) to (0, 5). The next jump needs to be in the same direction.</li>\n                    <li>Jump from (0, 5) to (0, 6).</li>\n                    <li>Jump from (0, 6) to (2, 6). The next jump must be in the same direction.</li>\n                    <li>Jump from (2, 6) to (3, 6). We have reached the destination cell.</li>\n                </ul>\n                <p>Thus, we need a total of 4 moves.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"code\\\">int getMinJumps(vector&lt;string&gt; grid)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1HR2TVnWr4p8mW33Nzz93kvqbvJYAzbbHopTcA_hkhKI/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Meesho",
        "company_id": 25
    },
    {
        "id": 181,
        "title": "Processor Deployment Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Processor Deployment Optimization</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>A supercomputer has several processors to deploy for execution. They are arranged sequentially in a row from 1 to n. The efficiency of each processor depends upon the order of deployment of its adjacent processors.</p>\n        \n        <p>For the i<sup>th</sup> processor, the efficiency of the i<sup>th</sup> processor is:</p>\n        <ul>\n            <li><code>no_adjacent[i]</code> when neither one or both adjacent processors is deployed before processor i</li>\n            <li><code>one_adjacent[i]</code> when exactly one adjacent processor is deployed before processor i</li>\n            <li><code>both_adjacent[i]</code> when both adjacent processors are deployed before processor i</li>\n        </ul>\n\n        <p class=\\\"note\\\"><strong>Note:</strong> The 1<sup>st</sup> and n<sup>th</sup> processors can only have one adjacent.</p>\n\n        <p>Find the maximum possible sum of efficiencies among all possible orders of deployment.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMaximumSum</code> in the editor below.</p>\n        \n        <p><code>getMaximumSum</code> has the following parameters:</p>\n        <ul>\n            <li><code>int no_adjacent[]</code>: an array of integers</li>\n            <li><code>int one_adjacent[]</code>: an array of integers</li>\n            <li><code>int both_adjacent[]</code>: an array of integers</li>\n        </ul>\n\n        <h4>Returns</h4>\n        <p><code>long_int</code>: the maximum possible sum of efficiencies</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ no_adjacent[i], one_adjacent[i], both_adjacent[i] ≤ 10<sup>8</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format For Custom Testing</h3>\n        <ul>\n            <li>The first line contains an integer, n, the number of elements in no_adjacent.</li>\n            <li>Each line of the n subsequent lines where 1 ≤ i ≤ n contains an integer, no_adjacent[i].</li>\n            <li>The next line contains an integer, n, the number of elements in one_adjacent which is always equal to the number of elements in no_adjacent.</li>\n            <li>Each line of the n subsequent lines where 1 ≤ i ≤ n contains an integer, one_adjacent[i].</li>\n            <li>The next line contains an integer, n, the number of elements in both_adjacent which is always equal to the number of elements in no_adjacent and one_adjacent.</li>\n            <li>Each line of the n subsequent lines where 1 ≤ i ≤ n contains an integer, both_adjacent[i].</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>Given, n = 4 processors.</p>\n            <pre class=\\\"sample-data\\\">\nno_adjacent = [1, 2, 3, 4]\none_adjacent = [4, 5, 2, 1]\nboth_adjacent = [8, 7, 1, 0]</pre>\n\n            <p>Consider the following orders of deployment (1-based indexing):</p>\n            <ul>\n                <li>The deployment sequence (1 → 3 → 4 → 2). Then, the sum of efficiencies = no_adjacent[1] + no_adjacent[2] + one_adjacent[3] + both_adjacent[2] = 1 + 3 + 1 + 6 = 11</li>\n                <li>Let the deployment sequence be (4 → 2 → 1). Then, the sum of efficiencies = no_adjacent[4] + one_adjacent[2] + one_adjacent[1] = 4 + 2 + 4 + 1 = 11</li>\n                <li>Let the deployment sequence be (4 → 3 → 2 → 1). Then, the sum of efficiencies = no_adjacent[4] + one_adjacent[3] + one_adjacent[2] = 4 + 2 + 3 + 4 = 13</li>\n            </ul>\n\n            <p>Among all possible deployments, the maximum possible sum of efficiencies is 13.</p>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/18ABFs6IGbNYV9bAJGwUtZL1LvnPP1MqEV9SaxwXwFa4/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Meesho",
        "company_id": 25
    },
    {
        "id": 334,
        "title": "Processor Deployment Efficiency",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Processor Deployment Efficiency</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 20px;\n        }\n        table, th, td {\n            border: 1px solid #ddd;\n        }\n        th, td {\n            padding: 8px;\n            text-align: left;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Processor Deployment Efficiency</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A supercomputer has several processors arranged sequentially in a row from 1 to n. The efficiency of each processor depends on the order of deployment of its adjacent processors.</p>\n        <p>For the \\\\( i^{th} \\\\) processor, the efficiency can be:</p>\n        <ul>\n            <li><code>no_adjacent[i]</code> when neither adjacent processor is deployed before processor \\\\( i \\\\).</li>\n            <li><code>one_adjacent[i]</code> when one adjacent processor is deployed before processor \\\\( i \\\\).</li>\n            <li><code>both_adjacent[i]</code> when both adjacent processors are deployed before processor \\\\( i \\\\).</li>\n        </ul>\n        <p><strong>Note:</strong> The \\\\( 1^{st} \\\\) and \\\\( n^{th} \\\\) processors can only have one adjacent.</p>\n        <p>Find the maximum possible sum of efficiencies amongst all possible orders of deployment.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An integer <code>n</code> representing the number of processors.</li>\n            <li>An array <code>no_adjacent[n]</code> where <code>no_adjacent[i]</code> is the efficiency when neither adjacent processor is deployed before processor \\\\( i \\\\).</li>\n            <li>An array <code>one_adjacent[n]</code> where <code>one_adjacent[i]</code> is the efficiency when one adjacent processor is deployed before processor \\\\( i \\\\).</li>\n            <li>An array <code>both_adjacent[n]</code> where <code>both_adjacent[i]</code> is the efficiency when both adjacent processors are deployed before processor \\\\( i \\\\).</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Output a single integer representing the maximum possible sum of efficiencies.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ n ≤ 10</li>\n            <li>1 ≤ no_adjacent[i], one_adjacent[i], both_adjacent[i] ≤ 10</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nn = 4\nno_adjacent = [1, 2, 3, 4]\none_adjacent = [4, 4, 2, 1]\nboth_adjacent = [0, 1, 1, 0]</pre>\n            <pre class=\\\"output\\\">Output:\n13</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>Consider the deployment sequence \\\\( (4 - 3 \\\\rightarrow 2 \\\\rightarrow 1) \\\\):</p>\n                <ul>\n                    <li>Efficiency of processor 4: <code>no_adjacent[4] = 4</code></li>\n                    <li>Efficiency of processor 3: <code>one_adjacent[3] = 2</code></li>\n                    <li>Efficiency of processor 2: <code>one_adjacent[2] = 4</code></li>\n                    <li>Efficiency of processor 1: <code>both_adjacent[1] = 0</code></li>\n                </ul>\n                <p>Total efficiency = 4 + 2 + 4 + 0 = 10</p>\n                <p>Another deployment sequence \\\\( (4 - 2 \\\\rightarrow 1 \\\\rightarrow 3) \\\\):</p>\n                <ul>\n                    <li>Efficiency of processor 4: <code>no_adjacent[4] = 4</code></li>\n                    <li>Efficiency of processor 2: <code>no_adjacent[2] = 2</code></li>\n                    <li>Efficiency of processor 1: <code>one_adjacent[1] = 4</code></li>\n                    <li>Efficiency of processor 3: <code>both_adjacent[3] = 1</code></li>\n                </ul>\n                <p>Total efficiency = 4 + 2 + 4 + 1 = 11</p>\n                <p>The maximum possible sum of efficiencies is 13.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nn = 3\nno_adjacent = [2, 1, 3]\none_adjacent = [4, 2, 1]\nboth_adjacent = [1, 2, 3]</pre>\n            <pre class=\\\"output\\\">Output:\n9</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>Consider the deployment sequence \\\\( (3 - 2 \\\\rightarrow 1) \\\\):</p>\n                <ul>\n                    <li>Efficiency of processor 3: <code>no_adjacent[3] = 3</code></li>\n                    <li>Efficiency of processor 2: <code>one_adjacent[2] = 2</code></li>\n                    <li>Efficiency of processor 1: <code>one_adjacent[1] = 4</code></li>\n                </ul>\n                <p>Total efficiency = 3 + 2 + 4 = 9</p>\n                <p>The maximum possible sum of efficiencies is 9.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1mt9528qZNv58whIXzLh4-8gc_8Io0y1YZjjM46Yu4F4/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Meesho",
        "company_id": 25
    }
]