[
    {
        "id": 781,
        "title": "Candy pairs",
        "problem_statement": "<h1>Candy pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a box of candies of different brands and different sizes represented by the string candies. There are two sizes of candies produced by each brand which are small and large. Uppercase alphabets are used to represent large candies, while lowercase alphabets are used to represent small candies. If one brand is higher in alphabetical order than another, for example, C > B, then that brand is better. Therefore, Brand C is better than Brand B. Find the best candy pair in the box that is the best brand that has both small and large candies in the box, and return 0 if it isn't there.</p>\r\n\r\n<p>You are given an integer N where N represents the total number of candies in the box. You are given an array of candies representing the brand and type of candies in the box. Each candy is represented by an English alphabet where lowercase alphabets denote the small candies and uppercase alphabets denote the large candies.</p>\r\n\r\n<p>Return the uppercase representation of the best brand candy pair. If not available, then return 0.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the `Solve()` function. This function takes the following 2 arguments and returns the answer:</p>\r\n<ul>\r\n    <li>`N`: Represents the total candies in the box</li>\r\n    <li>`candies[]`: Represents the brand and type of candies in the box, each candy is represented by an English alphabet where lowercase alphabets denote the small candies and upper case alphabets denote the large candies.</li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains an integer `N` denoting the total number of candies in the box.</li>\r\n    <li>The second line contains a string of size `N` representing the brand and type of candies in the box.</li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>Return the uppercase representation of the best brand candy pair. If not available, then 0.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 6, candies = bBdCcD\r\nOutput: D</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li>`N = 6`</li>\r\n    <li>`candies[] = bBdCcD`</li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li>There are three candy pairs [b, B], [c, C], and [d, D] in the box.</li>\r\n    <li>Brand D is better than Brand B and Brand A.</li>\r\n    <li>Therefore best brand candy pair is D.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= N <= 10^4`</li>\r\n    <li>`candies` contain English alphabets both uppercase and lowercase.</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<p>Time Limit: 1.0 sec(s) for each input file</p>\r\n<p>Memory Limit: 256 MB</p>\r\n<p>Source Limit: 1024 KB</p>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mthree _23feb",
        "company_id": 247
    },
    {
        "id": 782,
        "title": "Minimum operations",
        "problem_statement": "<h1>Minimum operations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>A</code> of non-negative integers and an integer <code>K</code>. You can perform the following operation on this given array any number of times:</p>\r\n<ul>\r\n    <li>Choose an index <code>i</code> (<code>1 <= i <= N</code>), and increase the element at this index by <code>1</code>.</li>\r\n</ul>\r\n<p>Find the minimum number of operations that needs to be performed, so that every subarray of size 3 or more has a maximum element greater than <code>K</code>.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the function <code>CutTheOperations</code>. This function takes the following 3 parameters and returns the required answer:</p>\r\n<pre><code class='language-c'>long long CutTheOperations (int N, int K, int* A)</code></pre>\r\n<ul>\r\n    <li><code>N</code>: Represents the size of the array <code>A</code></li>\r\n    <li><code>K</code>: Represents the value of <code>K</code></li>\r\n    <li><code>A</code>: Represents the elements of the array <code>A</code></li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code>, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains two space-separated integers, <code>N</code> and <code>K</code>, denoting the size of array <code>A</code> and an integer such that every subarray of size 3 or more in the final array <code>A</code> must have a maximum element greater than this integer.</li>\r\n            <li>The second line contains <code>N</code> space-separated integers, denoting elements of array <code>A</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>For each test case, print the minimum number of steps required to be performed on the given array so that every subarray of size 3 or more has a maximum element greater than <code>K</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= T <= 10</code></li>\r\n    <li><code>1 <= N <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= K <= 10<sup>9</sup></code></li>\r\n    <li><code>0 <= A<sub>i</sub> <= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 2\r\n3 3 4\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first line contains the number of test cases, <code>T = 2</code></p>\r\n<p><strong>The first test case</strong></p>\r\n<p><strong>Given</strong></p>\r\n<ul>\r\n    <li><code>N = 3</code></li>\r\n    <li><code>K = 2</code></li>\r\n    <li><code>A = [3, 3, 4]</code></li>\r\n</ul>\r\n<p><strong>Approach</strong></p>\r\n<p>In this case, every subarray of size 3 or more has a maximum element greater than 2.</p>\r\n<p>So, the minimum operations needed to be performed is <code>0</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 5\r\n1 3 0 3 1\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>The second test case</strong></p>\r\n<p><strong>Given</strong></p>\r\n<ul>\r\n    <li><code>N = 5</code></li>\r\n    <li><code>K = 5</code></li>\r\n    <li><code>A = [1, 3, 0, 3, 1]</code></li>\r\n</ul>\r\n<p><strong>Approach</strong></p>\r\n<p>The most optimal way to do so is to perform the following operations.</p>\r\n<ul>\r\n    <li>Choose index 2, and increment the element by 1.</li>\r\n    <li>Choose index 4, and increment the element by 1.</li>\r\n    <li>Choose index 2, and increment the element by 1.</li>\r\n    <li>Choose index 4, and increment the element by 1.</li>\r\n</ul>\r\n<p>Now, the final state of array <code>A = [1, 5, 0, 5, 1]</code>.</p>\r\n<p>The minimum number of steps possible is 4.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<p><strong>Limits</strong></p>\r\n<p>Time Limit: 1.0 sec(s) for each input file<br>Memory Limit: 256 MB<br>Source Limit: 1024 KB</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mthree _23feb",
        "company_id": 247
    },
    {
        "id": 783,
        "title": "Max separations",
        "problem_statement": "<h1>Max separations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working in the Data Consistency team of your company. You are allocated a task as follows:</p>\r\n<ul>\r\n    <li>You have a data stream consisting of an equal number of odd and even numbers. You can make separations in the data stream but the number of odd elements should be equal to the number of even elements in both partitions after separation. Also, if you make a separation between a number <code>x</code> and number <code>y</code>, then the cost of this operation will be <code>|x - y|</code> coins.</li>\r\n</ul>\r\n<p>You are given the following:</p>\r\n<ul>\r\n    <li>An integer <code>N</code></li>\r\n    <li>An array <code>arr</code></li>\r\n    <li>An integer <code>K</code></li>\r\n</ul>\r\n<p>Find out the maximum number of separations that can be made in the array by spending no more than <code>K</code> coins.</p>\r\n\r\n<p><strong>Function description</strong></p>\r\n<p>Complete the function <code>solve()</code>. This function takes the following 3 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the size of the data stream</li>\r\n    <li><code>K</code>: Represents the limit of coins</li>\r\n    <li><code>arr</code>: Represents the data stream</li>\r\n</ul>\r\n\r\n<p><strong>Input format for custom testing</strong></p>\r\n<p>Note: Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains the integer <code>N</code>.</li>\r\n    <li>The second line contains integer <code>K</code>.</li>\r\n    <li>The third line contains <code>N</code> integers denoting the data stream.</li>\r\n</ul>\r\n\r\n<p><strong>Output format</strong></p>\r\n<p>Print the maximum number of separations that can be made in the array by spending no more than <code>K</code> coins.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n10\r\n1 3 2 4\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> It is not possible to make even one cut even with an unlimited number of coins as the condition for valid separation can not be fulfilled in any separation.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; N &le; 100</code></li>\r\n    <li><code>1 &le; K &le; 100</code></li>\r\n    <li><code>1 &le; arr<sub>i</sub> &le; 100</code></li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mthree _23feb",
        "company_id": 247
    }
]