[
    {
        "id": 1075,
        "title": "Almost Matching Substrings",
        "problem_statement": "<h1>Almost Matching Substrings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're creating a new programming language with some exciting new features! Any programming language can check if two strings are matching, but you'd like yours to be able to check if they're <strong>almost matching</strong>. More specifically, we'll say two strings are almost matching if they're equal in length and all of their corresponding characters are the same except for one. For example, \"cat\" and \"bat\" are almost matching, but \"cat\" and \"dog\" are not.</p>\r\n<p>For the sake of efficiency, you're planning on testing the feature by using a single string and comparing its substrings. Given a string <code>s</code> and an integer <code>k</code>, your task is to find the number of pairs of substrings of <code>s</code> that are almost matching but differ at their <code>k</code><sup>th</sup> character (0-based). It's necessary that the length of both substrings exceeds <code>k</code> (otherwise the strings wouldn't have a <code>k</code><sup>th</sup> character).</p>\r\n<p>Also note that substrings are determined by their indices, so there could potentially be multiple instances of the same word. For example, in the word \"ingratiating\" the substring \"ing\" beginning at index 0 is considered distinct from the one at index 9 (and there are also two distinct \"ati\" substrings).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abacaba\", k = 1\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> For <code>s = \"abacaba\"</code> and <code>k = 1</code>, the output should be <code>solution(s, k) = 8</code>.</p>\r\n<p>Using <code>i</code> and <code>j</code> to represent the start and end indices of the first substring, and <code>l</code> and <code>m</code> to represent the indices of the second substring, the 8 pairs are:</p>\r\n<ul>\r\n    <li>(\"aba\", \"aca\") - i = 0, j = 2, l = 2, m = 4;</li>\r\n    <li>(\"aca\", \"aba\") - i = 2, j = 4, l = 0, m = 2;</li>\r\n    <li>(\"aba\", \"aba\") - i = 0, j = 2, l = 4, m = 6;</li>\r\n    <li>(\"aca\", \"aca\") - i = 2, j = 4, l = 4, m = 6;</li>\r\n    <li>(\"ac\", \"ab\") - i = 2, j = 3, l = 0, m = 1;</li>\r\n    <li>(\"ac\", \"ab\") - i = 2, j = 3, l = 4, m = 5;</li>\r\n    <li>(\"ab\", \"ac\") - i = 0, j = 1, l = 2, m = 3;</li>\r\n    <li>(\"ab\", \"ac\") - i = 4, j = 5, l = 2, m = 3;</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>[execution time limit] 0.5 seconds (cpp)</li>\r\n    <li>[memory limit] 1 GB</li>\r\n    <li><strong>Input:</strong> string <code>s</code>\r\n        <ul>\r\n            <li>A string consisting only of lowercase English letters.</li>\r\n            <li><code>1 &le; s.length &le; 200</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> integer <code>k</code>\r\n        <ul>\r\n            <li><code>0 &le; k &lt; s.length</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> integer\r\n        <ul>\r\n            <li>The amount of different pairs as described above.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_31july",
        "company_id": 352
    },
    {
        "id": 1076,
        "title": "Mario River Crossing",
        "problem_statement": "<h1>Mario River Crossing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Welcome to the magical world of Mario's adventure where Mario is standing on platform 0 and needs to reach platform A+1. But oh no, there's a wide river that's A units wide blocking his way. Mario can't walk on water, but he's got an amazing ability - he can jump up to B units at a time, either forward or backward.</p>\r\n<p>On the river, there are various-sized wooden platforms floating on the river just like in Mario's games. In total there are M platforms and their sizes are stored in an integer array C. Mario can move these platforms around, but he can't change their order or let them overlap. Note that he should first move the platforms and then start his journey. Help Mario cross the river and reach platform A+1.</p>\r\n<p>If it is impossible to reach A+1, your answer will be a vector containing -1, acknowledging the challenge. Yet, if a solution exists, return a vector of size A representing the sequence of river cells. If cell i does not belong to any platform, the ith element of the answer vector should be 0. Otherwise, it should be equal to the index of the platform to which the cell i belongs. If there are multiple solutions, return the lexicographically smallest one.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = 7, B = 2, C = [1, 2, 1]\r\nOutput: [0, 1, 0, 2, 2, 0, 3]</code></pre>\r\n<p><strong>Explanation:</strong> The lexicographically smallest possible answer is [0, 1, 0, 2, 2, 0, 3]. The sequence of jumps Mario performs is 0 -> 2 -> 4 -> 5 -> 7 -> 8.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = 10, B = 5, C = [2]\r\nOutput: [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]</code></pre>\r\n<p><strong>Explanation:</strong> The lexicographically smallest possible answer is [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]. The sequence of jumps you perform is 0 -> 5 -> 6 -> 11.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= A <= 10^5</code></li>\r\n    <li><code>1 <= B <= 10^5</code></li>\r\n    <li><code>1 <= M <= A</code></li>\r\n    <li><code>1 <= C[i] <= A</code></li>\r\n    <li><code>sum(C) <= A</code></li>\r\n</ul>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n    <li>The first argument is an integer A.</li>\r\n    <li>The second argument is an integer B.</li>\r\n    <li>The third argument is an integer array C.</li>\r\n</ul>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<ul>\r\n    <li>Return an integer array representing the answer.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_31july",
        "company_id": 352
    },
    {
        "id": 1077,
        "title": "Cryptarithm",
        "problem_statement": "<h1>Cryptarithm</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A cryptarithm is a mathematical puzzle where the goal is to find the correspondence between letters and digits such that the given arithmetic equation consisting of letters holds true.</p>\r\n<p>Given a cryptarithm as an array of strings <code>crypt</code>, count the number of its valid solutions.</p>\r\n<p>The solution is valid if each letter represents a different digit, and the leading digit of any multi-digit number is not zero. <code>crypt</code> has the following structure: <code>[word1, word2, word3]</code>, which stands for the <code>word1 + word2 == word3</code> cryptarithm.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"SEND\", \"MORE\", \"MONEY\"]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Because there is only one solution to this cryptarithm:\r\nD = 0, M = 1, Y = 2, E = 5, N = 6, O = 7, R = 8, and S = 9\r\n(9567 + 1085 = 10652)</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"GREEN\", \"BLUE\", \"BLACK\"]\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> Because there are 12 possible valid solutions.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"ONE\", \"ONE\", \"THREE\"]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Because there are no valid solutions.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 3 seconds (Java)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li>Input: <code>crypt</code> is an array of strings.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_31july",
        "company_id": 352
    }
]