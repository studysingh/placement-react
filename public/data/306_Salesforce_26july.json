[
    {
        "id": 962,
        "title": "Count Good Subsequences",
        "problem_statement": "<h1>Count Good Subsequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A sequence is considered \"good\" if:</p>\r\n<ol>\r\n    <li>All elements in the sequence are unique.</li>\r\n    <li>If the minimum element is <code>a</code> and the maximum element is <code>b</code>, then all numbers in the range <code>[a, b]</code> are present in the sequence.</li>\r\n</ol>\r\n<p>A subsequence is derived from an array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are considered different if they include at least one different index.</p>\r\n<p>Count the number of different good subsequences in an array.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countGoodSubsequences</code> in the editor below.</p>\r\n<p><code>countGoodSubsequences</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: the given array of integers</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>long_int</code>: the number of good subsequences that can be derived from the array</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [3, 1, 1, 4, 12, 5, 4]</code></pre>\r\n<p>The good subsequences are:</p>\r\n<ul>\r\n    <li><strong>Length 1:</strong> <code>[1], [3], [4], [5], [12]</code> (5 subsequences)</li>\r\n    <li><strong>Length 2:</strong> <code>[1, 3], [1, 4], [1, 5], [1, 12], [3, 4], [4, 5]</code> (6 subsequences)</li>\r\n    <li><strong>Length 3:</strong> <code>[1, 3, 4], [1, 4, 5], [1, 4, 12]</code> (3 subsequences)</li>\r\n</ul>\r\n<p><strong>Total:</strong> <code>6 + 4 + 1 = 11</code> good subsequences.</p>\r\n<p><em>(Note: The sum provided in the original problem for this example (6+4+1=11) does not match the listed counts (5+6+3=14). This is a direct transcription of the problem statement.)</em></p>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<pre><code class='language-text'>Input: arr size n = 5\r\n       arr = [3, 1, 1, 2, 8]\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Subsequences of length 1: <code>[3], [1], [2], [8]</code></li>\r\n    <li>Subsequences of length 2: <code>[3, 2], [1, 2], [1, 8], [2, 8]</code></li>\r\n    <li>Subsequences of length 3: <code>[3, 1, 2], [3, 1, 8], [1, 2, 8]</code></li>\r\n</ul>\r\n<p><code>5 + 3 + 2 = 10</code></p>\r\n<p><em>(Note: The sum provided in the original problem (5+3+2=10) does not match the counts of the listed subsequences (4+4+3=11). This is a direct transcription of the problem statement.)</em></p>\r\n\r\n<h3>Example 3: (Sample Case 1)</h3>\r\n<pre><code class='language-text'>Input: arr size n = 5\r\n       arr = [7, 5, 6, 8, 4]\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Subsequences of length 1: <code>[7], [5], [6], [8], [4]</code></li>\r\n    <li>Subsequences of length 2: <code>[7, 5], [7, 6], [7, 8], [5, 6], [5, 8], [6, 8], [7, 4], [5, 4], [6, 4], [8, 4]</code></li>\r\n    <li>Subsequences of length 3: <code>[7, 5, 6], [7, 5, 8], [7, 6, 8], [5, 6, 8], [7, 5, 4], [7, 6, 4], [7, 8, 4], [5, 6, 4], [5, 8, 4], [6, 8, 4]</code></li>\r\n    <li>Subsequences of length 4: <code>[7, 5, 6, 8], [7, 5, 6, 4], [7, 5, 8, 4], [7, 6, 8, 4], [5, 6, 8, 4]</code></li>\r\n    <li>Subsequences of length 5: <code>[7, 5, 6, 8, 4]</code></li>\r\n</ul>\r\n<p><code>5 + 4 + 3 + 2 + 1 = 15</code></p>\r\n<p><em>(Note: The sum provided in the original problem (5+4+3+2+1=15) does not match the counts of the listed subsequences (5+10+10+5+1=31). This is a direct transcription of the problem statement.)</em></p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= arr[i] &lt;= 10<sup>5</sup></code>, for all <code>i</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Salesforce_26july",
        "company_id": 306
    },
    {
        "id": 963,
        "title": "Minimum Journey Length",
        "problem_statement": "<h1>Minimum Journey Length</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A traveling salesperson lives in a country that has <code>road_nodes</code> houses and <code>m</code> roads. The <code>i</code><sup>th</sup> road runs from house <code>roads_from[i]</code> to house <code>roads_to[i]</code> and has a length of <code>roads_weight[i]</code>. The roads are directional, meaning it is not possible to travel from house <code>roads_to[i]</code> to house <code>roads_from[i]</code> using the same road.</p>\r\n<p>For each house <code>x</code> (<code>1 <= x <= road_nodes</code>), find the minimum length of a journey that starts and ends at house <code>x</code>. If no such path exists for a particular house <code>x</code>, return 0 for that house.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>There are no multiple roads between 2 houses.</li>\r\n    <li>There can be a road that starts and ends at the same house.</li>\r\n    <li>All houses may or may not be connected.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nroad_nodes = 4\r\nm = 4\r\nroads_from = [1, 2, 3, 3]\r\nroads_to = [2, 3, 1, 4]\r\nroads_weight = [14, 23, 14, 30]\r\nOutput: [60, 60, 60, 0]</code></pre>\r\n<p><strong>Explanation:</strong> The shortest path for every node is as follows:</p>\r\n<ol>\r\n    <li>For x = 1, the path is 1 -> 2 -> 3 -> 1, so the path length is 60.</li>\r\n    <li>For x = 2, the path is 2 -> 3 -> 1 -> 2, so the path length is 60.</li>\r\n    <li>For x = 3, the path is 3 -> 1 -> 2 -> 3, so the path length is 60.</li>\r\n    <li>For x = 4, there is no such path, so 0 is returned.</li>\r\n</ol>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nroad_nodes = 3\r\nm = 3\r\nroads_from = [1, 2, 3]\r\nroads_to = [2, 3, 1]\r\nroads_weight = [10, 10, 10]\r\nOutput:\r\n30\r\n30\r\n30</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>x = 1: the path is 1 -> 2 -> 3 -> 1, the path length is 30.</li>\r\n    <li>x = 2: the path is 2 -> 3 -> 1 -> 2, the path length is 30.</li>\r\n    <li>x = 3: the path is 3 -> 1 -> 2 -> 3, the path length is 30.</li>\r\n</ol>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nroad_nodes = 4\r\nm = 5\r\nroads_from = [3, 1, 2, 4, 1]\r\nroads_to = [1, 2, 4, 1, 4]\r\nroads_weight = [20, 25, 15, 10, 5]\r\nOutput:\r\n30\r\n30\r\n60\r\n30</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>x = 1: the path is 1 -> 4 -> 1, so the path length is 30.</li>\r\n    <li>x = 2: the path is 2 -> 1 -> 4 -> 2, the path length is 30.</li>\r\n</ol>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinimumLength</code> in the editor below.</p>\r\n<p><code>getMinimumLength</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int road_nodes</code>: the number of houses</li>\r\n    <li><code>int roads_from[m]</code>: <code>roads_from[i]</code> is the starting point of the <code>i</code><sup>th</sup> edge.</li>\r\n    <li><code>int roads_to[m]</code>: <code>roads_to[i]</code> is the ending point of the <code>i</code><sup>th</sup> edge.</li>\r\n    <li><code>int roads_weight[m]</code>: <code>roads_weight[i]</code> is the weight of the <code>i</code><sup>th</sup> edge.</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>int[]</code>: where <code>array[k]</code> represents the minimum length of the journey from the house at node <code>k</code>.</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>vector<int> getMinimumLength(int roads_nodes, vector<int> roads_from, vector<int> roads_to, vector<int> roads_weight) {\r\n    // Function body\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= road_nodes <= 1000</code></li>\r\n    <li><code>1 <= m <= 1000</code></li>\r\n    <li><code>1 <= roads_from[i], roads_to[i] <= road_nodes</code> where <code>0 <= i < m</code></li>\r\n    <li><code>1 <= roads_weight[i] <= 10<sup>6</sup></code> where <code>0 <= i < m</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Salesforce_26july",
        "company_id": 306
    }
]