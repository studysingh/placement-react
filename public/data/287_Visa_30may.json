[
    {
        "id": 922,
        "title": "First Day to Reach Target Visits",
        "problem_statement": "<h1>First Day to Reach Target Visits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of non-negative integers, <code>visits</code>, which represents how many people visited a website on consecutive days. <code>visits[0]</code> is the number of visitors on the first day, <code>visits[1]</code> is the number of visitors on the second day, and so on.</p>\r\n<p>Your task is to return the index <code>i</code> of the first day when the total number of visits reaches a given <code>target</code>. In other words, <code>visits[0] + visits[1] + ... + visits[i] &ge; target</code>. If the sum of all daily visits never reaches the <code>target</code>, return <code>-1</code>.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(visits.length<sup>2</sup>)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: visits = [300, 200, 100, 200, 500], target = 700\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The total number of visits at the end of the first day (index 0) is 300, which is less than the given target = 700.</li>\r\n    <li>The total number of visits at the end of the second day (index 1) is 300 + 200 = 500, and 500 &lt; 700.</li>\r\n    <li>The total number of visits at the end of the third day (index 2) is 300 + 200 + 100 = 600, and 600 &lt; 700.</li>\r\n    <li>The total number of visits at the end of the fourth day (index 3) is 300 + 200 + 100 + 200 = 800, and 800 &gt; 700. The number of visits has exceeded the given target, so the answer is the index of that day: 3.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: visits = [900, 821, 1090], target = 900\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The number of visits at the end of the first day (index 0) is 900, which is equal to target = 900, so the answer is 0.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: visits = [700, 800, 500], target = 2001\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> The total number of visits at the end of the last day is 700 + 800 + 500 = 2000, which means that the sum of visits from all days never reached the given target = 2001, so the answer is -1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; visits.length &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; visits[i] &le; 10<sup>4</sup></code></li>\r\n    <li><code>1 &le; target &le; 10<sup>7</sup></code></li>\r\n</ul>\r\n\r\n<h2>Function Signature</h2>\r\n<pre><code class='language-cpp'>int solution(std::vector<int> visits, int target)</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_30may",
        "company_id": 287
    },
    {
        "id": 923,
        "title": "Longest Pattern Matching Diagonal Segment",
        "problem_statement": "<h1>Longest Pattern Matching Diagonal Segment</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a matrix of integers, with each element containing 0, 1, or 2, your task is to find the longest diagonal segment which matches the following pattern: 1, 2, 0, 2, 0, ... (where the first element is 1, and then 2 and 0 are repeating infinitely), and finishes at a matrix border. Return the length of this diagonal segment.</p>\r\n<p>A diagonal segment:</p>\r\n<ul>\r\n    <li>May start at any matrix element.</li>\r\n    <li>May go toward any possible diagonal direction.</li>\r\n    <li>Must end at an element in the first or last row or column.</li>\r\n</ul>\r\n<p>For this problem, the diagonal segment must start with a '1' to match the given pattern.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(matrix.length * matrix[0].lengthÂ²) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: matrix = [[0, 0, 1, 2], [0, 2, 2, 2], [2, 1, 0, 1]]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The longest diagonal segment matching the pattern \"1, 2, 0, ...\" and ending at a border is <code>[1, 2, 0]</code>, which has a length of 3. This segment starts at <code>matrix[0][2]</code> and goes diagonally down-left.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: matrix = [[2, 1, 2, 2, 0], [0, 2, 0, 2, 2], [0, 0, 0, 0, 0], [0, 0, 1, 2, 2], [2, 2, 0, 2, 1], [0, 2, 0, 0, 2]]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The longest diagonal segment matching the pattern \"1, 2, 0, ...\" and ending at a border has a length of 1. For instance, starting at <code>matrix[0][1]</code> (value 1), no further elements match the pattern or reach a border while matching.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (C++)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li>Input: <code>matrix</code> is an array of arrays of integers.</li>\r\n    <li><code>matrix</code> consists of integers 0, 1, and/or 2.</li>\r\n    <li><code>1 <= matrix.length <= 100</code></li>\r\n    <li><code>1 <= matrix[i].length <= 100</code></li>\r\n    <li><code>0 <= matrix[i][j] <= 2</code></li>\r\n    <li>Output: An integer representing the length of the longest diagonal segment.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_30may",
        "company_id": 287
    }
]