[
    {
        "id": 1621,
        "title": "Christmas party",
        "problem_statement": "<h1>Christmas party</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are N cities, and M of them will be organizing a Christmas party for the holiday. Each city is numbered from 1 to N. The remaining cities that are not organizing the Christmas party are required to travel to one of the cities where the party is being organized or to another non-party city. Each of the remaining cities has a reindeer vehicle. The reindeer vehicles are numbered from 1 to N-M and are assigned to the remaining cities in order (the first remaining city gets vehicle 1, the second gets vehicle 2, etc.)</p>\r\n<p>The cost of traveling from city X to city Y with reindeer vehicle Z is calculated using the formula <code>(X + OFF) * (X + Y + OFF) * (X + Y + Z + OFF) % MOD + 1</code> dollars, where <code>%</code> denotes modulo and <code>OFF</code> denotes an offset parameter.</p>\r\n<p>You need to:</p>\r\n<ol>\r\n    <li>Choose M cities to host the Christmas party.</li>\r\n    <li>Assign each remaining city to either travel to a party city OR to another remaining city.</li>\r\n    <li>Ensure that each remaining city is assigned exactly one destination and each reindeer vehicle is used exactly once.</li>\r\n</ol>\r\n<p>The goal is to minimize the total sum of travel costs.</p>\r\n\r\n<p>Complete the <code>solve</code> function. The function takes the following 4 parameters and returns an integer denoting the answer to the question.</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents the number of cities.</li>\r\n    <li><strong>M:</strong> Represents the number of cities organizing the Christmas party.</li>\r\n    <li><strong>MOD:</strong> Represents the modulo parameter.</li>\r\n    <li><strong>OFF:</strong> Represents the offset parameter.</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p>Note: Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains a single integer <strong>N</strong> denoting the number of cities.</li>\r\n    <li>The second line contains a single integer <strong>M</strong> denoting the number of cities organizing the Christmas party.</li>\r\n    <li>The third line contains a single integer <strong>MOD</strong> denoting the modulo parameter.</li>\r\n    <li>The fourth line contains a single integer <strong>OFF</strong> denoting the offset parameter.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Print an integer representing the minimum total cost.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 4, M = 3, MOD = 19, OFF = 7\r\nOutput: (Not explicitly provided in the source)</code></pre>\r\n<p><strong>Explanation:</strong> Here, only one reindeer is needed as N-M = 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= M &lt;= N &lt;= 16</code></li>\r\n    <li><code>1 &lt;= MOD &lt;= 10<sup>3</sup></code></li>\r\n    <li><code>0 &lt;= OFF &lt; M</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Dealshare_7oct",
        "company_id": 567
    },
    {
        "id": 1637,
        "title": "Treasure Hunt in Ancient Ruins",
        "problem_statement": "<h1>Treasure Hunt in Ancient Ruins</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are an archaeologist exploring an ancient ruin consisting of N hidden chambers (numbered 1 to N), connected by M secret tunnels. Each tunnel allows movement between two chambers but can only be used in one direction.</p>\r\n<p>A treasure is known to be located in a specific chamber D, and you start your journey from a given chamber S. Your task is to determine whether you can reach the treasure and, if so, count the number of different chambers you pass through before reaching it (excluding the starting chamber).</p>\r\n<p>If reaching the treasure is impossible, return -1.</p>\r\n<p>You must implement the function <code>findTreasurePath</code>.</p>\r\n\r\n<pre><code class='language-javascript'>int findTreasurePath (int N, int M, int S, int D, vector&lt;vector&lt;int&gt;&gt; tunnels) {\r\n    // Write your code here.\r\n}</code></pre>\r\n\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>int N</code>: Number of chambers (nodes).</li>\r\n    <li><code>int M</code>: Number of secret tunnels (edges).</li>\r\n    <li><code>int S</code>: Starting chamber.</li>\r\n    <li><code>int D</code>: Chamber containing the treasure.</li>\r\n    <li><code>vector&lt;vector&lt;int&gt;&gt; tunnels</code>: A list of M tuples, where each tuple <code>(u, v)</code> represents a one-way tunnel from chamber <code>u</code> to chamber <code>v</code>.</li>\r\n</ul>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: The minimum number of chambers visited before reaching D.</li>\r\n    <li>If no route exists, return -1.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nN = 6, M = 6, S = 1, D = 5\r\ntunnels = [[1,2], [2,3], [3,4], [2,5], [4,5], [5,6]]\r\n\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Path: 1 -> 2 -> 5</p>\r\n<ul>\r\n    <li>Step 1: 1 -> 2 (depth becomes 1)</li>\r\n    <li>Step 2: 2 -> 5 (depth becomes 2)</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= N &lt;= 10^5</code> (Large network of chambers)</li>\r\n    <li><code>1 &lt;= M &lt;= 2*10^5</code> (High number of tunnels)</li>\r\n    <li><code>1 &lt;= u,v &lt;= N</code> (Valid chamber numbers)</li>\r\n    <li><code>S != D</code> (Starting and destination chambers are different)</li>\r\n    <li>The given graph is directed and may not be fully connected.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Dealshare_7oct",
        "company_id": 567
    }
]