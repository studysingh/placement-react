[
    {
        "id": 201,
        "title": "Watering Plants",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Watering Plants</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Imagine you are a park ranger responsible for maintaining N plants along a hiking trail. The plants are arranged in a straight line and numbered from 0 to N-1, with the i<sup>th</sup> plant located at x = i. You have a water source at x = -1, which you must use to refill your watering can.</p>\n        \n        <p>Each plant requires a different amount of water and you must water them in order, from left to right. If you run out of water while watering a plant, you must return to the water source to refill your watering can before continuing to the next plant. You cannot refill your watering can before it is empty or it cannot water the next plant.</p>\n        \n        <p>It takes one step to move one unit on the x-axis.</p>\n    </div>\n    \n    <div class=\\\"problem-task\\\">\n        <p>Determine the number of steps you must take to water all of the plants along the hiking trail successfully.</p>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <h3>Notes</h3>\n        <ul>\n            <li>You start at -1.</li>\n            <li>The location of the plants starts from 0.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function solution() provided in the editor. The function takes the following 3 parameters and returns the solution:</p>\n        <ul>\n            <li>N: Represents the number of plants</li>\n            <li>C: Represents the capacity of the water can</li>\n            <li>plants: Represents the water requirements of the plants</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format for Custom Testing</h3>\n        <ul>\n            <li>The first line contains N denoting the number of plants.</li>\n            <li>The second line contains C denoting the capacity of the can.</li>\n            <li>The third line contains plants denoting the water requirements of the plants.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the steps needed.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10<sup>5</sup></li>\n            <li>1 ≤ plants[i] ≤ C ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n4\n1 1 1 4 2 3</pre>\n            <pre class=\\\"output\\\">Output:\n30</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Approach:</h4>\n                <p>Start at the source with a full watering can:</p>\n                <ul>\n                    <li>Water plants 0, 1 and 2 (3 steps). Return to source (3 steps)</li>\n                    <li>Water plant 3 (4 steps). Return to source (4 steps)</li>\n                    <li>Water plant 4 (5 steps). Return to source (5 steps)</li>\n                    <li>Water plant 5 (6 steps)</li>\n                </ul>\n                <p>Steps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1bzB1i6SgpEvvJOTzjt5RAk0fz88aAXwJzxgYWy7MMi0/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\nlong long solution(int N, int C, vector<int>& plants){\\n    ll total_steps=0;\\n    int current_pos=-1;\\n    ll current_water=C;\\n    for(int i=0;i<N;i++){\\n        if(current_water >= plants[i]){\\n            total_steps += abs(current_pos - i);\\n            current_water -= plants[i];\\n            current_pos =i;\\n        }\\n        else{\\n            total_steps += (current_pos +1) + (i +1);\\n            current_water = C - plants[i];\\n            current_pos =i;\\n        }\\n    }\\n    return total_steps;\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    int N, C;\\n    cin >> N;\\n    cin >> C;\\n    vector<int> plants(N);\\n    for(int &x: plants) cin >> x;\\n    cout << solution(N, C, plants);\\n}",
        "company_name": "GigSky",
        "company_id": 48
    },
    {
        "id": 202,
        "title": "Consistent Data",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Consistent Data</h2>\n        <div class=\\\"score\\\">Max score: 20.00</div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>A sequence containing only 0s and 1s is called a consistent sequence if no adjacent values in the sequence are the same. For example (010101...) is a consistent sequence while (011) is not. You are allotted a simple task.</p>\n        \n        <p>Given an integer N that represents the size of a consistent sequence starting with \\'0\\'.</p>\n        \n        <p>Find out the number of consistent subsequences of the given sequence mod 10<sup>9</sup> + 7.</p>\n        \n        <div class=\\\"note\\\">\n            <strong>Note:</strong> A subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.\n        </div>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>Consistent()</code>. This function takes the following parameter and returns the required answer:</p>\n        <ul>\n            <li><code>N</code>: Represents the size of the sequence</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format for Custom Testing</h3>\n        <div class=\\\"note\\\">\n            <strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don\\'t provide boilerplate code.\n        </div>\n        <ul>\n            <li>The first line contains an integer N representing the sequence\\'s size.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the number of consistent subsequences mod 10<sup>9</sup> + 7.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10<sup>6</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Test Case</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation</h4>\n                <p><strong>Assumption:</strong></p>\n                <ul>\n                    <li>N = 3</li>\n                </ul>\n                <p><strong>Approach:</strong></p>\n                <ul>\n                    <li>The given consistent sequence is [0,1,0]</li>\n                    <li>The number of consistent subsequences is 6 which are [0], [1], [0], [0,1], [1,0], [0,1,0]</li>\n                    <li>The corresponding indices sets are [0], [1], [2], [0,1], [1,2], [0,1,2]</li>\n                </ul>\n                <p>Therefore we will return 6 as our answer.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1asnFtbln5XoOkxvf1aEjWN7E7IJKgl1mvGjAIPdnBVE/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\nlong long Consistent(int N) {\\n    const int MOD = 1e9 +7;\\n    ll count0=0, count1=0;\\n    for(int i=0;i<N;i++){\\n        if(i%2==0){\\n            count0 = (count0 + count1 +1) % MOD;\\n        }\\n        else{\\n            count1 = (count1 + count0 +1) % MOD;\\n        }\\n    }\\n    return (count0 + count1) % MOD;\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    int N;\\n    cin >> N;\\n    cout << Consistent(N);\\n}",
        "company_name": "GigSky",
        "company_id": 48
    },
    {
        "id": 203,
        "title": "Auto suggest",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Auto suggest</h2>\n        <div class=\\\"score\\\">Max score: 50.00</div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given a dictionary consisting of N words and a query word S. You need to auto-suggest the best word from the dictionary that is closest to S.</p>\n        \n        <p>Two words are first compared by their Levenshtein distance to the word S. If two words have the same Levenshtein distance, then the lexicographically smaller word is given priority.</p>\n\n        <div class=\\\"notes\\\">\n            <h4>Notes:</h4>\n            <ul>\n                <li>Levenshtein distance between two strings is defined as the minimum number of edits required to obtain one string from the other. An \\\"edit\\\" is defined by either an insertion of a character, a deletion of a character, or a replacement of a character.</li>\n                <li>Levenshtein distance between \\\"abc\\\" with \\\"ac\\\" is 1 (deletion of c), with \\\"abd\\\" is 1 (replacement of c to d) and with \\\"abcd\\\" is 1 (insertion of d).</li>\n                <li>All the words and the query word S consist of lowercase alphabets only.</li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The function takes the following 3 parameters:</p>\n        <ul>\n            <li><code>N</code>: Represents the number of words in the dictionary</li>\n            <li><code>words</code>: Represents the dictionary</li>\n            <li><code>S</code>: Represents the query word</li>\n        </ul>\n\n        <h4>Input format for custom testing</h4>\n        <ul>\n            <li>The first line contains a single integer N denoting the value of N.</li>\n            <li>The second line contains N space-separated strings denoting the words in the dictionary.</li>\n            <li>The third line contains a single string denoting the query word S.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single line containing the answer.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 100</li>\n            <li>1 ≤ words[i].length ≤ 10</li>\n            <li>1 ≤ S.length ≤ 10</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\ntocor torect tocfrrec tocorre tocorrect\ntocorrect</pre>\n            <pre class=\\\"output\\\">Output:\ntocfrrec</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The strings belonging to the dictionary (represented by list words) and having minimum levenshtein distance of 2 from the given string \\\"tocorrect\\\" are [\\\"tocfrrec\\\", \\\"tocorre\\\"]. Among the two, \\\"tocfrrec\\\" is lexicographically smaller than \\\"tocorre\\\".</p>\n                <p>Hence, the answer is \\\"tocfrrec\\\".</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1gT2FcxusPk8DBBTJssbVpnq-pEgdqcCvmN9Gp7QiUSg/edit?usp=sharing",
        "solution_code": "",
        "company_name": "GigSky",
        "company_id": 48
    }
]