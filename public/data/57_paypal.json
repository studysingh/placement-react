[
    {
        "id": 222,
        "title": "Java: Inventory Clearance Sale",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <h1 class=\\\\\\\"problem-title\\\\\\\">Java: Inventory Clearance Sale</h1>\\n    \\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <p>A software developer at a leading e-commerce platform helps merchants optimize their warehouse space by identifying items that need to be cleared out due to overstocking. The developer must create a function to analyze a list of products and determine which are eligible for a clearance sale based on their sales velocity and stock levels.</p>\\n        \\n        <p>The <em>sales velocity</em> is defined as the number of units sold per day, and the <em>stock level</em> is the current quantity of the product in the warehouse.</p>\\n        \\n        <p>The <code>identifyClearanceItems</code> method receives a list of products of size n, each with a sales velocity and stock level. A product is eligible if the stock level is greater than or equal to 10 times the sales velocity. For instance, if a product has a sales velocity of 2 units/day and a stock level of 20 or more, it is eligible for clearance.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"implementation-requirements\\\\\\\">\\n        <h3>Implementation Requirements</h3>\\n        <ul>\\n            <li>Create a class called <code>Product</code> that implements the <code>IProduct</code> interface:\\n                <ul>\\n                    <li>Properties:\\n                        <ul>\\n                            <li><code>String productId</code></li>\\n                            <li><code>int salesVelocity</code></li>\\n                            <li><code>int stockLevel</code></li>\\n                        </ul>\\n                    </li>\\n                    <li>Implement the constructor <code>Product(String productId, int salesVelocity, int stockLevel)</code></li>\\n                </ul>\\n            </li>\\n            <li>Create a class called <code>InventoryClearance</code>:\\n                <ul>\\n                    <li>Create a method called <code>identifyClearanceItems(List&lt;Product&gt; products)</code> that returns a list of strings representing the product IDs that are eligible for clearance</li>\\n                </ul>\\n            </li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ n ≤ 10⁵</li>\\n            <li>0 ≤ salesVelocity ≤ 10⁵</li>\\n            <li>0 ≤ stockLevel ≤ 10⁵</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Examples</h3>\\n        \\n        <div class=\\\\\\\"example\\\\\\\">\\n            <h4>Sample Case 0</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n3\\nA1B2C3 2 25\\nD4E5F6 5 45\\nG7H8I9 3 20</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\nA1B2C3</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <h4>Explanation:</h4>\\n                <ul>\\n                    <li>Product \\\\\\\"A1B2C3\\\\\\\" has a sales velocity of 2 and a stock level of 25. It is eligible for clearance because the stock level is greater than 10 times the sales velocity (25 >= 2 * 10).</li>\\n                    <li>Product \\\\\\\"D4E5F6\\\\\\\" has a sales velocity of 5 and a stock level of 45. It is not eligible for clearance because the stock level is not greater than 10 times the sales velocity (45 < 5 * 10).</li>\\n                    <li>Product \\\\\\\"G7H8I9\\\\\\\" has a sales velocity of 3 and a stock level of 20. It is not eligible for clearance because the stock level is not greater than 10 times the sales velocity (20 < 3 * 10).</li>\\n                </ul>\\n            </div>\\n        </div>\\n\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <h4>Sample Case 1</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n2\\nX7Y8Z9 1 50\\nW1X2Y3 0 100</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\nX7Y8Z9\\nW1X2Y3</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <h4>Explanation:</h4>\\n                <ul>\\n                    <li>Product \\\\\\\"X7Y8Z9\\\\\\\" has a sales velocity of 1 and a stock level of 50. It is eligible for clearance because the stock level is greater than 10 times the sales velocity (50 >= 1 * 10).</li>\\n                    <li>Product \\\\\\\"W1X2Y3\\\\\\\" has a sales velocity of 0 and a stock level of 100. It is eligible for clearance because the stock level is greater than 10 times the sales velocity (100 >= 0 * 10).</li>\\n                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/11jxPSgExrThrROB2dtJauAMVfuX1RHKkMglDRVAkxMM/edit?usp=sharing",
        "solution_code": "import java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\nimport java.io.IOException;\\nimport java.util.List;\\nimport java.util.ArrayList;\\n\\ninterface IProduct {\\n}\\n\\nclass Product implements IProduct {\\n    String id;\\n    int sv;\\n    int sl;\\n    \\n    public Product(String id, int sv, int sl) {\\n        this.id = id;\\n        this.sv = sv;\\n        this.sl = sl;\\n    }\\n}\\n\\nclass InventoryClearance {\\n    public List<String> identifyClearanceItems(List<Product> ps) {\\n        List<String> el = new ArrayList<>();\\n        for(Product p : ps) {\\n            if(p.sl >= 10 * p.sv) {\\n                el.add(p.id);\\n            }\\n        }\\n        return el;\\n    }\\n}\\n\\npublic class Solution {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int n = Integer.parseInt(br.readLine());\\n        List<Product> ps = new ArrayList<>(n);\\n        for(int i = 0; i < n; i++) {\\n            String[] parts = br.readLine().split(\\\" \\\");\\n            String id = parts[0];\\n            int sv = Integer.parseInt(parts[1]);\\n            int sl = Integer.parseInt(parts[2]);\\n            ps.add(new Product(id, sv, sl));\\n        }\\n        InventoryClearance ic = new InventoryClearance();\\n        List<String> el = ic.identifyClearanceItems(ps);\\n        StringBuilder sb = new StringBuilder();\\n        for(String id : el) {\\n            sb.append(id).append(\\\"\\\\n\\\");\\n        }\\n        System.out.print(sb);\\n    }\\n}",
        "company_name": "paypal",
        "company_id": 57
    },
    {
        "id": 223,
        "title": " Items Purchase",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <h2>2. Items Purchase</h2>\\n    \\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <p>A shop in HackerMall has n items where the price of the i<sup>th</sup> item is price[i]. A frequent customer has m discount coupons. If x discount coupons are used on the i<sup>th</sup> item, its price is reduced to the integer floor(price[i] / 2<sup>x</sup>), e.g. floor(3/2<sup>1</sup>) = floor(1.5) = 1.</p>\\n        \\n        <p>Find the minimum amount needed to purchase all the items of the shop using at most m coupons.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"function-description\\\\\\\">\\n        <h3>Function Description</h3>\\n        <p>Complete the function findMinimumPrice in the editor below.</p>\\n        <p>findMinimumPrice has the following parameters:</p>\\n        <ul>\\n            <li><code>int price[n]</code>: the original prices of the items</li>\\n            <li><code>int m</code>: the number of discount coupons</li>\\n        </ul>\\n        \\n        <h4>Returns</h4>\\n        <ul>\\n            <li><code>int</code>: the minimum amount of money needed to buy all n items</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\\n            <li>1 ≤ price[i] ≤ 10<sup>9</sup></li>\\n            <li>0 ≤ m ≤ 10<sup>9</sup></li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Example</h3>\\n        <p>Consider n = 2, price = [2, 4], m = 2.</p>\\n        \\n        <div class=\\\\\\\"solution\\\\\\\">\\n            <p>The optimum solution:</p>\\n            <ul>\\n                <li>Purchase item 1 for 2.</li>\\n                <li>Use 2 coupons on item 2, so the discounted price is 4/2<sup>2</sup> = 4/4 = 1.</li>\\n            </ul>\\n            <p>The amount required = 2 + 1 = 3.</p>\\n        </div>\\n\\n        <div class=\\\\\\\"sample-case\\\\\\\">\\n            <h4>Sample Case 0</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n3\\n1\\n2\\n3\\n1</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n4</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>Given n = 3, price = [1, 2, 3], m = 1.</p>\\n                <p>Use the coupon on item 3, so floor(3/2<sup>1</sup>) = 1. The discounted prices are [1, 2, 1].</p>\\n            </div>\\n        </div>\\n\\n        <div class=\\\\\\\"sample-case\\\\\\\">\\n            <h4>Sample Case 1</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n3\\n1\\n1\\n1\\n0</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n3</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>Given n = 3, price = [1, 1, 1], m = 0.</p>\\n                <p>No discount coupons are available, so all items are purchased at their original price.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1019frPnA22kUmMH51Fkh8-ZgLpFqON8S4Q8OZxFOTj4/edit?usp=sharing",
        "solution_code": "import java.io.*;\\nimport java.util.*;\\n\\npublic class Solution {\\n    public static void main(String[] args) throws IOException {\\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n        int n = Integer.parseInt(br.readLine().trim());\\n        String[] ps = br.readLine().trim().split(\\\" \\\");\\n        List<Integer> pr = new ArrayList<>();\\n        for(int i=0; i<n; i++) pr.add(Integer.parseInt(ps[i]));\\n        int m = Integer.parseInt(br.readLine().trim());\\n        long res = Result.findMinimumPrice(pr, m);\\n        System.out.println(res);\\n    }\\n}\\n\\nclass Result {\\n    public static long findMinimumPrice(List<Integer> pr, int m) {\\n        long sum = 0;\\n        List<Long> bns = new ArrayList<>();\\n        for(int p : pr){\\n            long c = p;\\n            sum += c;\\n            while(c > 0){\\n                long nx = c / 2;\\n                long bn = c - nx;\\n                bns.add(bn);\\n                c = nx;\\n            }\\n        }\\n        Collections.sort(bns, Collections.reverseOrder());\\n        long tb = 0;\\n        int lm = Math.min(m, bns.size());\\n        for(int i=0; i<lm; i++) tb += bns.get(i);\\n        return sum - tb;\\n    }\\n}",
        "company_name": "paypal",
        "company_id": 57
    }
]