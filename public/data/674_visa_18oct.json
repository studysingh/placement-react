[
    {
        "id": 1916,
        "title": "Count Messages with Odd Length and Vowel",
        "problem_statement": "<h1>Count Messages with Odd Length and Vowel</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are developing a feature for a new social media platform where you need to analyze user-generated content for reporting purposes.</p>\r\n<p>Given an array of strings <code>messages</code>, each representing a user message, your task is to count how many messages have an odd length and contain at least one vowel ('a', 'e', 'i', 'o', 'u', both uppercase and lowercase).</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity <code>O(messages.length * max(message.length))</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: messages = [\"I\", \"love\", \"CSS\", \"the respects HTML\"]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>\"I\" has an odd length and contains a vowel.</li>\r\n    <li>\"love\" has an even length.</li>\r\n    <li>\"CSS\" has an odd length but contains no vowels.</li>\r\n    <li>\"the respects HTML\" has an odd length (length of this string equals 17) and contains several vowels (three letters 'e').</li>\r\n</ul>\r\n<p>Therefore, 2 messages meet the criteria.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= messages.length <= 1000</code></li>\r\n    <li><code>1 <= messages[i].length <= 100</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "visa_18oct",
        "company_id": 674
    },
    {
        "id": 1917,
        "title": "Shuffle Deck",
        "problem_statement": "<h1>Shuffle Deck</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a deck of cards numbered from 1 to <code>n</code>, where <code>n</code> is the total number of cards. The cards are currently arranged in some order, and you want to sort them in ascending order (1, 2, 3, ..., <code>n</code>).</p>\r\n<p>The only operation you can perform is a shuffle move: take <code>k</code> cards from the top of the deck and move them to the bottom, where <code>k</code> is any integer from 0 to <code>n-1</code>.</p>\r\n<p>For example, if your deck has cards <code>[deck[0], deck[1], deck[2], ..., deck[n-1]]</code> from top to bottom:</p>\r\n<ul>\r\n    <li>For <code>k = 0</code>, no cards are moved: <code>[deck[0], deck[1], ..., deck[n-1]]</code></li>\r\n    <li>For <code>k = 1</code>, move the top card to the bottom: <code>[deck[1], deck[2], ..., deck[n-1], deck[0]]</code></li>\r\n    <li>For <code>k = 2</code>, move the top 2 cards to the bottom: <code>[deck[2], ..., deck[n-1], deck[0], deck[1]]</code></li>\r\n    <li>...</li>\r\n    <li>For <code>k = n-1</code>, move all but the bottom card to the bottom: <code>[deck[n-1], deck[0], deck[1], ..., deck[n-2]]</code></li>\r\n</ul>\r\n<p>Given a deck of cards <code>deck</code>, find the minimum number of cards <code>k</code> that need to be moved from the top to the bottom to arrange the deck in ascending order (1, 2, ..., <code>deck.length</code>). If it's impossible to sort the deck using shuffle moves, return <code>-1</code>.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(deck.length<sup>2</sup>)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: deck = [1, 4, 2, 3]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> Let's try all possible shuffle moves:</p>\r\n<ul>\r\n    <li>Move 0 cards: <code>[1, 4, 2, 3]</code> (no change)</li>\r\n    <li>Move 1 card: <code>[4, 2, 3, 1]</code></li>\r\n    <li>Move 2 cards: <code>[2, 3, 1, 4]</code></li>\r\n    <li>Move 3 cards: <code>[3, 1, 4, 2]</code></li>\r\n</ul>\r\n<p>None of these arrangements equals the sorted deck <code>[1, 2, 3, 4]</code>, so the answer is <code>-1</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: deck = [3, 4, 5, 1, 2]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> If we move the top 3 cards to the bottom, we get the sorted deck <code>[1, 2, 3, 4, 5]</code>, so the answer is <code>3</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p><strong>Execution time limit:</strong> 0.5 seconds (cpp)</p>\r\n<p><strong>Memory limit:</strong> 1 GB</p>\r\n<p><strong>Input:</strong> <code>array.integer deck</code></p>\r\n<p>An array representing a deck of cards, where each card has a unique number from 1 to <code>deck.length</code>.</p>\r\n<p><strong>Guaranteed constraints:</strong></p>\r\n<ul>\r\n    <li><code>3 <= deck.length <= 100</code></li>\r\n    <li><code>1 <= deck[i] <= deck.length</code></li>\r\n</ul>\r\n<p><strong>Output:</strong> <code>integer</code></p>\r\n<p>Return the minimum number of cards <code>k</code> that need to be moved from the top to the bottom to sort the deck in ascending order (1, 2, ..., <code>deck.length</code>). If it's impossible to sort the deck using shuffle moves, return <code>-1</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "visa_18oct",
        "company_id": 674
    },
    {
        "id": 1918,
        "title": "Protein Y-Pattern Transformation",
        "problem_statement": "<h1>Protein Y-Pattern Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are a molecular biologist working in a research laboratory that studies protein folding patterns. You have a square matrix representing a microscopic view of a protein structure, where each cell contains one of three possible molecular states: <strong>0</strong> (inactive), <strong>1</strong> (partially active), or <strong>2</strong> (fully active).</p>\r\n\r\n<p>Your research has identified a specific molecular pattern that indicates optimal protein stability - a \"Y-shaped\" molecular pathway. This pattern consists of two diagonal molecular chains extending from the upper corners down to the center, plus a vertical chain extending downward from the center.</p>\r\n\r\n<p>Your task is to determine the minimum number of molecular state changes required to transform the current protein matrix into one that exhibits this stable Y-pattern.</p>\r\n\r\n<p>The Y-pattern is achieved when:</p>\r\n<ul>\r\n    <li>All molecular states along the diagonals from the upper-left and upper-right corners down to the center are identical;</li>\r\n    <li>All molecular states along the vertical path from the center downward are identical to the diagonal states;</li>\r\n    <li>All other molecular states (the background) are identical to each other but different from the Y-pattern states.</li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong> For a square matrix of size <code>n x n</code>, there are exactly 6 possible Y-pattern configurations. The Y-pattern states and background states can be any combination of the three molecular states (0, 1, 2) as long as they are different from each other.</p>\r\n\r\n<p>Below, you can see an example of the Y-pattern for a 5 x 5 matrix:</p>\r\n<pre><code class='language-text'>n = 5\r\n(Visual representation of a 5x5 grid with the Y-pattern highlighted.\r\nThe Y-pattern cells are: (0,0), (0,4), (1,1), (1,3), (2,2), (3,2), (4,2).\r\nThese cells form the Y-shape, extending from the top-left and top-right\r\ncorners to the center, and then vertically downwards from the center.)\r\n</code></pre>\r\n\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(n^3)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: proteinMatrix = [[1, 0, 2], [1, 2, 0], [1, 1, 0]]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The optimal transformation is to change the 1 in the 0th row to 2 and the 1 in the 1st row to 0. 2s form the Y-pattern molecular pathway and 0s form the background. The final matrix is shown below.</p>\r\n<pre><code class='language-text'>proteinMatrix = [\r\n  [2, 0, 0],\r\n  [0, 2, 0],\r\n  [0, 0, 2]\r\n]</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: proteinMatrix = [[2, 0, 0], [1, 2, 0], [1, 1, 1]]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The 2s here form the Y-pattern molecular pathway. The optimal solution is to change all of the 0s (a total of 8) to 1s to create a uniform background. The final matrix is shown below.</p>\r\n<pre><code class='language-text'>proteinMatrix = [\r\n  [2, 1, 1],\r\n  [1, 2, 1],\r\n  [1, 1, 2]\r\n]</code></pre>\r\n\r\n<p>Expand to see the example images.</p>\r\n<pre><code class='language-text'>Initial Matrix   Final Matrix\r\n2 0 0            2 1 1\r\n1 2 0     ->     1 2 1\r\n0 1 0            1 1 2\r\n",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "visa_18oct",
        "company_id": 674
    },
    {
        "id": 1919,
        "title": "Dynamic Array Queries",
        "problem_statement": "```html\r\n<h1>Dynamic Array Queries</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are developing a new programming language. You believe that ordinary dictionaries are boring, so you've decided to add a cool feature to make your language unique!</p>\r\n<p>You want the cool feature to be able to perform two types of queries. With two integer arrays, <code>a</code> and <code>b</code>, the two types of queries are as follows:</p>\r\n<ul>\r\n    <li>If the query is of the form <code>[0, i, x]</code>, then add <code>x</code> to <code>a[i]</code>. <code>a[i]</code> should be assigned the value of <code>a[i] + x</code>.</li>\r\n    <li>If the query is of the form <code>[1, x]</code>, then find the total number of pairs of indices <code>i</code> and <code>j</code> such that <code>a[i] + b[j] == x</code>.</li>\r\n</ul>\r\n<p>You will be given the arrays of integers <code>a</code> and <code>b</code>, as well as <code>queries</code>: an array of queries in either of the forms described above. Your task is to implement this cool feature, perform the given queries and return an array of the results of the queries of the type <code>[1, x]</code>.</p>\r\n\r\n<pre><code class='language-cpp'>vector<int> solution(vector<int> a, vector<int> b, vector<vector<int>> queries)\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = [1, 4], b = [1, 2, 3], queries = [[1, 5], [0, 2, 1], [1, 5]]\r\nOutput: [1, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The arrays look like this initially:</p>\r\n<pre><code class='language-text'>a = [1, 4] and b = [1, 2, 3]</code></pre>\r\n<p>For the query <code>[1, 5]</code>, there's only one way to form a sum of 5 using an element from each array: <code>a[0] + b[1] == 1 + 4 == 5</code>. So the result is 1.</p>\r\n<p>The query <code>[0, 2, 1]</code> adds 2 to the value of <code>a[0]</code>. So the arrays now look like this:</p>\r\n<pre><code class='language-text'>a = [3, 4] and b = [1, 2, 3]</code></pre>\r\n<p>For the final query <code>[1, 5]</code>, there are now two ways to form a sum of 5 using an element from each array: <code>a[0] + b[2] == 3 + 2 == 5</code> and <code>a[1] + b[0] == 4 + 1 == 5</code>. So the result is 2.</p>\r\n<p>Since the two queries of type <code>[1, x]</code> gave results of 1 and 2 respectively, the answer is <code>[1, 2]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: a = [2, 3], b = [1, 2, 2], queries = [[1, 4], [0, 0, 1], [1, 5]]\r\nOutput: [3, 4]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The arrays look like this initially:</p>\r\n<pre><code class='language-text'>a = [2, 3] and b = [1, 2, 2]</code></pre>\r\n<p>For the query <code>[1, 4]</code>, there are three ways to form a sum of 4 using an element from each array: <code>a[0] + b[1] == 2 + 2 == 4</code>, <code>a[0] + b[2] == 2 + 2 == 4</code> and <code>a[1] + b[0] == 3",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "visa_18oct",
        "company_id": 674
    }
]