[
    {
        "id": 1409,
        "title": "Longest Path in the Grid",
        "problem_statement": "<h1>Longest Path in the Grid</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an N×M grid filled with numbers. A traveler starts from the top-left cell (1,1) and wants to reach the bottom-right cell (N,M). The traveler can only move down or right at each step. However, there is a rule: The traveler can only move to a cell containing a number <strong>greater than</strong> the number in the current cell. You need to determine the <strong>length of the longest possible path</strong> the traveler can take following these rules.</p>\r\n<p>If it is impossible to reach the bottom-right cell under these constraints, return -1.</p>\r\n<p>You must implement the function <code>longestPathInGrid</code>.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n<li><code>int N</code>: The number of rows in the grid.</li>\r\n<li><code>int M</code>: The number of columns in the grid.</li>\r\n<li><code>vector&lt;vector&lt;int&gt;&gt;&amp; grid</code>: A 2D vector representing the grid, where <code>grid[i][j]</code> is the number in the cell at row <code>i</code> and column <code>j</code>.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n<li><code>int</code>: The length of the longest path from the top-left cell to the bottom-right cell. Return -1 if there is no valid path.</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int longestPathInGrid(int N, int M, vector&lt;vector&lt;int&gt;&gt;&amp; grid) { /* Write your code here. */ }</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>First line:</strong> An integer N representing the number of rows.</p>\r\n<p><strong>Second line:</strong> An integer M representing the number of columns.</p>\r\n<p><strong>Next N lines:</strong> Each line contains M integers representing the grid values.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single integer representing the length of the longest possible path. Return -1 if there is no valid path.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &lt;= N, M &lt;= 1000</code></li>\r\n<li><code>1 &lt;= grid[i][j] &lt;= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n4\r\n1 2 3 4\r\n2 2 3 5\r\n3 2 3 6\r\n4 5 6 7</code></pre>\r\n<pre><code class='language-text'>Output:\r\n7</code></pre>\r\n<p><strong>Explanation:</strong> One possible longest path is:</p>\r\n<p><code>(1,1)→(1,2)→(1,3)→(1,4)→(2,4)→(3,4)→(4,4)</code></p>\r\n<p>The path length is 7.</p>\r\n\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n<p><strong>Limits:</strong></p>\r\n<ul>\r\n<li>Time Limit: 5.0 sec(s) for each input file</li>\r\n<li>Memory Limit: 256 MB</li>\r\n<li>Source Limit: 1024 KB</li>\r\n</ul>\r\n<p><strong>Scoring:</strong> Score is assigned if any testcase passes</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "SAP Labs_16sep",
        "company_id": 495
    },
    {
        "id": 1410,
        "title": "Customer Order Summary",
        "problem_statement": "<h1>Customer Order Summary</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are tasked with generating a summary of customer orders. For each order, you need to retrieve the customer's name, the order ID, the date the order was placed, the number of distinct products included in that order, and the total amount of the order. The final results should be sorted first by <strong>order_date</strong> in descending order, and then by <strong>customer_name</strong> in alphabetical order.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The input consists of five tables:</p>\r\n\r\n<h4>Table: customers</h4>\r\n<ul>\r\n    <li><strong>customer_id</strong> (INT): Represents the unique ID of the customer.</li>\r\n    <li><strong>customer_name</strong> (VARCHAR): Represents the name of the customer.</li>\r\n    <li><strong>email</strong> (VARCHAR): Represents the email of the customer.</li>\r\n    <li><strong>city</strong> (VARCHAR): Represents the city of the customer.</li>\r\n    <li><strong>registration_date</strong> (DATE): Represents the registration date of the customer.</li>\r\n</ul>\r\n\r\n<h4>Table: categories</h4>\r\n<ul>\r\n    <li><strong>category_id</strong> (INT): Represents the unique ID of the category.</li>\r\n    <li><strong>category_name</strong> (VARCHAR): Represents the name of the category.</li>\r\n    <li><strong>parent_category_id</strong> (INT): Represents the parent category ID.</li>\r\n</ul>\r\n\r\n<h4>Table: products</h4>\r\n<ul>\r\n    <li><strong>product_id</strong> (INT): Represents the unique ID of the product.</li>\r\n    <li><strong>product_name</strong> (VARCHAR): Represents the name of the product.</li>\r\n    <li><strong>category_id</strong> (INT): Represents category ID of the product.</li>\r\n    <li><strong>price</strong> (DECIMAL): Represents the price of the product.</li>\r\n    <li><strong>stock_quantity</strong> (INT): Represents the stock quantity of the product.</li>\r\n</ul>\r\n\r\n<h4>Table: orders</h4>\r\n<ul>\r\n    <li><strong>order_id</strong> (INT): Represents the unique ID of the order.</li>\r\n    <li><strong>customer_id</strong> (INT): Represents the customer ID who placed the order.</li>\r\n    <li><strong>order_date</strong> (DATE): Represents the date when the order was placed.</li>\r\n    <li><strong>total_amount</strong> (DECIMAL): Represents the total amount of the order.</li>\r\n    <li><strong>status</strong> (VARCHAR): Represents the status of the order.</li>\r\n</ul>\r\n\r\n<h4>Table: order_items</h4>\r\n<ul>\r\n    <li><strong>order_item_id</strong> (INT): Represents the unique ID of the order item.</li>\r\n    <li><strong>order_id</strong> (INT): Represents the order ID.</li>\r\n    <li><strong>product_id</strong> (INT): Represents the product ID.</li>\r\n    <li><strong>quantity</strong> (INT): Represents the quantity of the product ordered.</li>\r\n    <li><strong>unit_price</strong> (DECIMAL): Represents the unit price of the product.</li>\r\n</ul>\r\n\r\n<h3>Output Format</h3>\r\n<p>The output should contain the following columns:</p>\r\n<ul>\r\n    <li><strong>customer_name</strong> (VARCHAR): Name of the customer.</li>\r\n    <li><strong>order_id</strong> (INT): Unique ID of the order.</li>\r\n    <li><strong>order_date</strong> (DATE): Date when the order was placed.</li>\r\n    <li><strong>product_count</strong> (INT): Number of different products in the order.</li>\r\n    <li><strong>order_total</strong> (DECIMAL): Total amount of the order.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<h4>Input Tables:</h4>\r\n<p><strong>Table: customers</strong></p>\r\n<pre><code class='language-text'>customer_id | customer_name | email             | city        | registration_date\r\n------------|---------------|-------------------|-------------|------------------\r\n1           | John Smith    | john@email.com    | New York    | 2023-01-01\r\n2           | Jane Doe      | jane@email.com    | Los Angeles | 2023-02-01\r\n3           | Bob Wilson    | bob@email.com     | Chicago     | 2023-03-01</code></pre>\r\n\r\n<p><strong>Table: categories</strong></p>\r\n<pre><code class='language-text'>category_id | category_name | parent_category_id\r\n------------|---------------|--------------------\r\n1           | Electronics   | NULL\r\n2           | Laptops       | 1\r\n3           | Smartphones   | 1\r\n4           | Clothing      | NULL</code></pre>\r\n\r\n<p><strong>Table: products</strong></p>\r\n<pre><code class='language-text'>product_id | product_name   | category_id | price   | stock_quantity\r\n-----------|----------------|-------------|---------|---------------\r\n1          | iPhone 14      | 3           | 999.99  | 50\r\n2          | MacBook Pro    | 2           | 1999.99 | 25\r\n3          | Samsung Galaxy | 3           | 799.99  | 30\r\n4          | T-Shirt        | 4           | 29.99   | 100</code></pre>\r\n\r\n<p><strong>Table: orders</strong></p>\r\n<pre><code class='language-text'>order_id | customer_id | order_date | total_amount | status\r\n---------|-------------|------------|--------------|--------\r\n1        | 1           | 2023-03-01 | 1029.98      | completed\r\n2        | 2           | 2023-03-02 | 799.99       | completed\r\n3        | 1           | 2023-03-03 | 59.98        | pending</code></pre>\r\n\r\n<p><strong>Table: order_items</strong></p>\r\n<pre><code class='language-text'>order_item_id | order_id | product_id | quantity | unit_price\r\n--------------|----------|------------|----------|-----------\r\n1             | 1        | 1          | 1        | 999.99\r\n2             | 1        | 4          | 1        | 29.99\r\n3             | 2        | 3          | 1        | 799.99\r\n4             | 3        | 4          | 2        | 29.99</code></pre>\r\n\r\n<h4>Output Table:</h4>\r\n<pre><code class='language-text'>customer_name | order_id | order_date | product_count | order_total\r\n--------------|----------|------------|---------------|------------\r\nJohn Smith    | 3        | 2023-03-03 | 1             | 59.98\r\nJane Doe      | 2        | 2023-03-02 | 1             | 799.99\r\nJohn Smith    | 1        | 2023-03-01 | 2             | 1029.98</code></pre>\r\n<p><strong>Explanation:</strong>\r\nFor Order ID 1 (John Smith, 2023-03-01):\r\n- Products: iPhone 14 (product_id 1) and T-Shirt (product_id 4).\r\n- Distinct product count: 2.\r\n- Total amount: 999.99 + 29.99 = 1029.98.\r\n\r\nFor Order ID 2 (Jane Doe, 2023-03-02):\r\n- Products: Samsung Galaxy (product_id 3).\r\n- Distinct product count: 1.\r\n- Total amount: 799.99.\r\n\r\nFor Order ID 3 (John Smith, 2023-03-03):\r\n- Products: T-Shirt (product_id 4).\r\n- Distinct product count: 1.\r\n- Total amount: 2 * 29.99 = 59.98.\r\n\r\nThe results are sorted by order_date in descending order, then by customer_name alphabetically.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Your SQL query must be able to print the sample output from the provided sample input.</li>\r\n    <li>The query will be run against multiple hidden test cases.</li>\r\n    <li>Your query must pass these hidden test cases to solve the problem statement.</li>\r\n</ul>\r\n\r\n<h2>Follow-up</h2>\r\n<h3>Limits:</h3>\r\n<ul>\r\n    <li>Time Limit: 30 secs for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring:</h3>\r\n<ul>\r\n    <li>Score is assigned if any testcase passes.</li>\r\n</ul>\r\n\r\n<h3>Allowed Languages:</h3>\r\n<ul>\r\n    <li>MySQL</li>\r\n    <li>PostgreSQL</li>\r\n    <li>MSSQL</li>\r\n    <li>Oracle</li>\r\n    <li>Db</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "SAP Labs_16sep",
        "company_id": 495
    }
]