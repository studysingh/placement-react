[
    {
        "id": 1220,
        "title": "Retrieve Missing Data",
        "problem_statement": "<h1>Retrieve Missing Data</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The Data Science Team at Amazon is facing a unique challenge. A portion of their data has gone missing from their database. However, they believe they can recover the lost data based on the following information:</p>\r\n<ol>\r\n    <li>The missing data is a permutation of the characters found in the string <code>firstInfo</code>.</li>\r\n    <li>The missing data is lexicographically greater than the string <code>secondInfo</code>.</li>\r\n    <li>The missing data is the lexicographically smallest string that satisfies the above two conditions.</li>\r\n</ol>\r\n<p>In other words, they are searching for the smallest string that meets these criteria.</p>\r\n<p>A string <code>x</code> is lexicographically smaller than a string <code>y</code> if:</p>\r\n<ul>\r\n    <li><code>x[i] &lt; y[i]</code> at the first position where <code>x</code> and <code>y</code> differ, or</li>\r\n    <li><code>|x| &lt; |y|</code> and <code>x</code> is a prefix of <code>y</code> (where <code>|x|</code> denotes the length of string <code>x</code>).</li>\r\n</ul>\r\n<p>Given two strings, <code>firstInfo</code> and <code>secondInfo</code>, find the missing data that matches the above criteria. If no such string exists, return <code>\"-1\"</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aca\", secondInfo = \"aba\"\r\nOutput: \"aca\"</code></pre>\r\n<p><strong>Explanation:</strong> The data that satisfies the given conditions is either \"aca\" or \"caa\". Both options are valid permutations of <code>firstInfo</code> and are lexicographically greater than <code>secondInfo</code>. Since the goal is to retrieve the lexicographically smallest piece of missing data, \"aca\" is the correct result.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aac\", secondInfo = \"aa\"\r\nOutput: \"aac\"</code></pre>\r\n<p><strong>Explanation:</strong> The possible pieces of missing data that satisfy the conditions are \"aac\", \"aca\", and \"caa\". Since \"aac\" is the lexicographically smallest, it is the most suitable piece of data to retrieve.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"abc\", secondInfo = \"defg\"\r\nOutput: \"-1\"</code></pre>\r\n<p><strong>Explanation:</strong> It can be observed that no permutation of the missing data from <code>firstInfo = \"abc\"</code> would be lexicographically greater than <code>secondInfo = \"defg\"</code>. Therefore, no valid data can be retrieved.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>retrieveData</code> in the editor below.</p>\r\n<p><code>retrieveData</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>firstInfo</code>: the string that contains the first information.</li>\r\n    <li><code>secondInfo</code>: the string that contains the second information.</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>string</code>: the missing data that matches the above criteria if possible, otherwise return <code>\"-1\"</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |firstInfo|, |secondInfo| &lt;= 5000</code></li>\r\n    <li><code>firstInfo</code> and <code>secondInfo</code> consist of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_26aug",
        "company_id": 414
    },
    {
        "id": 1221,
        "title": "Subarray Median Count",
        "problem_statement": "<h1>Subarray Median Count</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Developers at Amazon are working on an application to test the reliability of servers. As a simulation, <code>n</code> requests are sent to the servers, and the size of the <code>k</code><sup>th</sup> request is <code>requests[k]</code> units.</p>\r\n<p>Given an array, <code>requests</code>, and an integer, <code>mid</code>, count the number of subarrays in <code>requests</code> with a median of <code>mid</code>.</p>\r\n<p><strong>Note:</strong> The median of an array is the middle value in that sorted array. If the size of the array is even, there are 2 middle values. In this case, the median is the element at the smaller of the two.</p>\r\n<p>A subarray is defined as any contiguous segment of the array.</p>\r\n\r\n<p>Complete the function <code>getSubarrayMedian</code> in the editor below.</p>\r\n<p><code>getSubarrayMedian</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int mid</code>: the target median</li>\r\n    <li><code>int requests[]</code>: the sizes of the requests</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long int</code>: the number of subarrays of requests with a median of <code>mid</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> <code>n = 3, requests = [1, 2, 3], mid = 2</code></p>\r\n<p>All possible subarrays are: <code>[1], [2], [3], [1,2], [2,3], [1,2,3]</code>.</p>\r\n<p>Let's find their medians:</p>\r\n<pre><code class='language-text'>Subarrays   Median\r\n[1]         1\r\n[2]         2\r\n[3]         3\r\n[1, 2]      1  (Sorted: [1, 2], smaller of two middle values)\r\n[2, 3]      2  (Sorted: [2, 3], smaller of two middle values)\r\n[1, 2, 3]   2  (Sorted: [1, 2, 3], middle value)</code></pre>\r\n<p><strong>Output:</strong> 3</p>\r\n<p><strong>Explanation:</strong> There are 3 subarrays <code>[2]</code>, <code>[2, 3]</code>, <code>[1, 2, 3]</code> that have median = 2.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nmid = 3\r\nrequests = [3, 1, 5]\r\n\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> 2 subarrays have a median of 3: <code>[3]</code> and <code>[3, 1, 5]</code>.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nmid = 3\r\nrequests = [1, 4]\r\n\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<pre><code class='language-text'>Subarrays   Median\r\n[1]         1\r\n[4]         4\r\n[1, 4]      1  (Sorted: [1, 4], smaller of two middle values)</code></pre>\r\nNo subarrays have a median of 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= requests[i] <= 10<sup>9</sup></code></li>\r\n    <li><code>1 <= mid <= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_26aug",
        "company_id": 414
    },
    {
        "id": 1222,
        "title": "Maximum Isolation",
        "problem_statement": "<h1>Maximum Isolation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Amazon's research laboratory, k engineers need to be assigned to workstations based on their expertise.</p>\r\n<ul>\r\n    <li>Each engineer has a specific expertise, represented by a character in the expertise string. Engineers appear in the order they need to be assigned.</li>\r\n    <li>The laboratory has a row of j available workstations, each tagged with the expertise it supports, represented by the workspace string. The i-th character of workspace shows the expertise accepted by the i-th workstation.</li>\r\n</ul>\r\n<p><strong>Assignment Rules:</strong></p>\r\n<ul>\r\n    <li>Each engineer must be assigned to a compatible workstation (matching their expertise).</li>\r\n    <li>Engineers must be placed in the same order as they appear in the expertise string.</li>\r\n    <li>Workstations assigned to engineers don't have to be next to each other, i.e., they do not need to be contiguous.</li>\r\n</ul>\r\n<p><strong>Goal:</strong> Find the maximum isolation of any valid assignment.</p>\r\n<p>Isolation is defined as the largest gap (in workstation indices) between any two adjacent engineers. More formally, if engineers are assigned to workstations at positions q<sub>1</sub>, q<sub>2</sub>, ..., q<sub>k</sub>, then: isolation = max(q<sub>i+1</sub> - q<sub>i</sub> - 1) for 1 &le; i &lt; k. It is guaranteed that a valid assignment exists for every engineer.</p>\r\n\r\n<p>Complete the function <code>calculateMaxDistance</code> in the editor below.</p>\r\n<p><code>calculateMaxDistance</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string expertise</code>: contains the expertise of each of the k engineers.</li>\r\n    <li><code>string workspace</code>: contains the expertise of engineers that can work in the workstations.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: Maximum isolation</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>k = 3\r\nexpertise = \"bab\"\r\nj = 6\r\nworkspace = \"babcab\"</code></pre>\r\n<p><strong>Explanation:</strong> Following are the ways (Underlined letters represent the position of the engineers in the same order they appear in the string expertise)</p>\r\n<pre><code class='language-text'>babcab  -> Isolation: 0 (no workstations between any two workstations having an engineer)\r\nbabcab  -> Isolation: 3 (3 workstations between 2nd and 6th workstation having 2nd and 3rd engineer)\r\nbabcab  -> Isolation: 3 (3 workstations between 1st and 5th workstation having 1st and 2nd engineer)\r\nbabcab  -> Isolation: 1 (1 workstation between 3rd and 5th workstation having 1st and 2nd engineer)</code></pre>\r\n<p>Maximum isolation = 3. So, the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: expertise = \"abcba\", workspace = \"abcbaabcba\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> One of the optimal ways is: <code>abcbaabcba</code> (where the assigned 'abcba' is underlined). Maximum number of workstations between two workstations having adjacent engineers = 4. So, the answer is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; k &le; j &le; 2 * 10^5</code></li>\r\n    <li><code>expertise</code>, <code>workspace</code> contains lower-case Latin alphabets only.</li>\r\n    <li>The string <code>workspace</code> is a subsequence of the string <code>expertise</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_26aug",
        "company_id": 414
    }
]