[
    {
        "id": 1100,
        "title": "Paths to a Goal",
        "problem_statement": "<h1>Paths to a Goal</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a number line with positions labeled from 0 to n, and a sequence of movements consisting of instructions 'L' (move left by 1) and 'R' (move right by 1), determine how many distinct subsequences of these moves will take you from a starting position x to an ending position y. Return the result modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>A subsequence is formed by deleting zero or more elements from the original sequence without changing the order of the remaining elements.</li>\r\n    <li>A subsequence is distinct if its sequence of characters differs from another subsequence. Subsequences with identical characters from different indices are considered the same and counted only once; e.g., the subsequence containing 'rr' in 'rrr' is only counted once.</li>\r\n    <li>Starting at position j, an instruction 'L' moves to position j - 1, and an instruction 'R' moves to position j + 1.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ns = 'rrLrlr'\r\nn = 6\r\nx = 1\r\ny = 2\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The seven possible distinct subsequences of s = \"rrLrlr\" that lead from position 1 to position 2 are:</p>\r\n<ul>\r\n    <li>s1 = \"r\", the move sequence is 1 -> 2</li>\r\n    <li>s2 = \"rr\", the move sequence is 1 -> 2 -> 3</li>\r\n    <li>s3 = \"rrl\", the move sequence is 1 -> 2 -> 1</li>\r\n    <li>s4 = \"rrlr\", the move sequence is 1 -> 2 -> 1 -> 2</li>\r\n    <li>s5 = \"rrLr\", the move sequence is 1 -> 2 -> 3 -> 2</li>\r\n    <li>s6 = \"rrLrL\", the move sequence is 1 -> 2 -> 3 -> 2 -> 1</li>\r\n    <li>s7 = \"rrLrlr\", the move sequence is 1 -> 2 -> 3 -> 2 -> 3</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ns = 'rrLrLr'\r\nn = 6\r\nx = 1\r\ny = 3\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The five distinct possible subsequences of s = \"rrLrLr\" that lead from position 1 to position 3 are:</p>\r\n<ul>\r\n    <li>s1 = \"rr\", the move sequence is 1 -> 2 -> 3</li>\r\n    <li>s2 = \"rrLrr\", the move sequence is 1 -> 2 -> 3 -> 2 -> 3</li>\r\n    <li>s3 = \"rrLrr\", the move sequence is 1 -> 2 -> 1 -> 2 -> 3</li>\r\n    <li>s4 = \"rrrL\", the move sequence is 1 -> 2 -> 3 -> 4 -> 3</li>\r\n    <li>s5 = \"rrLrLr\", the move sequence is 1 -> 2 -> 3 -> 2 -> 3 -> 2 -> 3</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\ns = 'rrrLrr'\r\nn = 7\r\nx = 0\r\ny = 0\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The two distinct possible subsequences of s = \"rrrLrr\" that lead from position 0 to position 0 are:</p>\r\n<ul>\r\n    <li>s1 = \"\" (Empty Subsequence)</li>\r\n    <li>s2 = \"rL\", the move sequence is 0 -> 1 -> 0</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |s| <= 10<sup>3</sup></code></li>\r\n    <li><code>0 <= x, y <= n <= 2500</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zomato_1aug",
        "company_id": 361
    },
    {
        "id": 1101,
        "title": "Office Distribution",
        "problem_statement": "<h1>Office Distribution</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A country is represented as a tree of linked cities. They want to construct one of <code>m</code> kinds of offices in every city. Adjacent cities or cities within a distance of two should not have the same type of office. Determine the number of ways to distribute the office types across all cities.</p>\r\n<p>The tree contains <code>g_nodes</code> cities where:</p>\r\n<ul>\r\n    <li>Cities are labeled from 1 to <code>g_nodes</code>.</li>\r\n    <li>Cities are linked by <code>g_nodes - 1</code> bidirectional roads.</li>\r\n    <li>The <code>i<sup>th</sup></code> road connects the cities <code>g_from[i]</code> and <code>g_to[i]</code>.</li>\r\n</ul>\r\n<p>Determine the number of ways to distribute the office types across all cities. Return the result modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getTotalWays</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int m</code>: the number of service types available</li>\r\n    <li><code>int g_nodes</code>: the number of cities</li>\r\n    <li><code>int g_from[g_nodes-1]</code>: one end of each edge</li>\r\n    <li><code>int g_to[g_nodes-1]</code>: the other end of each edge</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of ways to build the offices, modulo (10<sup>9</sup> + 7)</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: m = 4, g_nodes = 3, g_from = [1, 1], g_to = [2, 3]\r\nOutput: 24</code></pre>\r\n<p><strong>Explanation:</strong>\r\nCity 1 cannot have the same type of office as city 2 or 3 since they are directly connected.\r\nCity 2 cannot have the same type as city 3 because they are both connected to city 1.\r\nEach city needs a different type of office.</p>\r\n<p>There are <code>m = 4</code> office types. Any 3 distinct types will work in any order. Examples are [1, 2, 3], [2, 1, 3], and [4, 1, 3]. There are 24 different combinations, so return 24 modulo (10<sup>9</sup> + 7) or 24.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: m = 3, g_nodes = 4, g_from = [1, 1, 2], g_to = [2, 3, 4]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong>\r\nPairs (1, 2), (1, 3), and (2, 4) are adjacent to each other.\r\nPairs (1, 4) and (2, 3) are adjacent to a common node, 2 and 1, respectively.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: m = 2, g_nodes = 2, g_from = [1], g_to = [2]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThere are only 2 ways to build the offices: [1,2] and [2,1].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= g_nodes <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= g_from[i], g_to[i] <= g_nodes</code></li>\r\n    <li><code>1 <= m <= 10<sup>5</sup></code></li>\r\n    <li>It is guaranteed that the given edges form a tree.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zomato_1aug",
        "company_id": 361
    }
]