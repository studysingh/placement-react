[
    {
        "id": 8,
        "title": "Square Tile Arrangement",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h2>Square Tile Arrangement</h2>\n    </div>\n\n<div class=\"problem-description\">\n        <p>Create a 4×4 square by arranging four 1×1 tiles into a 2×2 square, and surrounding it by 2×2 tiles.</p>\n\n<div class=\"task-examples\">\n            <h3>Example Cases:</h3>\n            <ol>\n                <li>\n                    <p>Given M = 0 and N = 18, your function should return 8. You need to use sixteen 2×2 tiles to create the square. Note that not all tiles are used.</p>\n                </li>\n                <li>\n                    <p>Given M = 13 and N = 3, your function should return 5. One of the possible arrangements is shown in the following image:</p>\n                    <div class=\"example-image\">\n                        <img src=\"[path-to-tile-arrangement-image]\" alt=\"Example of 4x4 square tile arrangement showing a combination of 2x2 and 1x1 tiles\" class=\"problem-illustration\">\n                    </div>\n                </li>\n            </ol>\n        </div>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints:</h3>\n        <ul>\n            <li>M and N are integers within the range [0..1,000,000,000]</li>\n        </ul>\n    </div>\n\n<div class=\"task-objective\">\n        <h3>Task:</h3>\n        <p>Write an efficient algorithm for the given assumptions.</p>\n    </div>\n\n<div class=\"copyright\">\n        <p class=\"small text-muted\">Copyright 2009-2024 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.</p>\n    </div>\n</div>",
        "google_doc_link": "https://github.com/cphelper/OAbycphelper/tree/main/Microsoft%20Intern/Square%20Tile%20Arrangement",
        "solution_code": null,
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 32,
        "title": "Maximum Sum of Two Numbers Without Common Digits",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h2>Maximum Sum of Two Numbers Without Common Digits</h2>\n    </div>\n\n<div class=\"problem-description\">\n        <p>There is an array A of N integers. What is the largest sum of two numbers which do not have any common digits?</p>\n\n<div class=\"function-signature\">\n            <p>Write a function:</p>\n            <pre class=\"code-block\">int solution(vector&lt;int&gt; &A);</pre>\n            <p>that, given an array A of length N, returns largest possible sum of two numbers from A which do not have any digits in common. If it is impossible to choose two such numbers, the function should return -1.</p>\n        </div>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">A = [53, 1, 36, 103, 55, 5]</pre>\n            <div class=\"explanation\">\n                <p>The function should return 108, because we could choose numbers 103 and 5. Other pairs of numbers which do not share any digits, for example 3 and 55, total to a smaller sum.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">A = [9, 19, 99, 35]</pre>\n            <div class=\"explanation\">\n                <p>The function should return -1, as every pair of numbers shares the digits.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 3:</h4>\n            <pre class=\"input\">A = [6, 17, 71, 65, 17, 6]</pre>\n            <div class=\"explanation\">\n                <p>The function should return 137. The best pair is 71 and 66.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 4:</h4>\n            <pre class=\"input\">A = [15, 0, 105]</pre>\n            <div class=\"explanation\">\n                <p>The function should return 15.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [2..200,000]</li>\n            <li>each element of array A is an integer within the range [0..1,000,000,000]</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1zCyTdyMEFMl0hf01p-grwXbSqGLkkktSJsbUn_ojU8E/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 35,
        "title": "Array Equalization Operations",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h1>Array Equalization Operations</h1>\n    </div>\n\n<div class=\"problem-description\">\n        <p>There is an array A of N integers and two types of operations that can be performed on the elements of the array:</p>\n        <ul>\n            <li>Increment a single element of A, which costs C1;</li>\n            <li>Increment two elements of A, which costs C2. The chosen elements need to be in different positions.</li>\n        </ul>\n        <p>What is the minimum total cost of operations that will make all elements of A equal? As the result may be large, return the last nine digits without leading zeros (in other words, return the result modulo 10⁹).</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Function Description</h3>\n        <pre class=\"function-signature\">int solution(int A[], int N, int C1, int C2);</pre>\n        <p>The function should return the minimum cost of equalizing the array (modulo 10⁹).</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [1..100,000]</li>\n            <li>C1 and C2 are integers within the range [0..10,000]</li>\n            <li>each element of array A is an integer within the range [0..50,000,000]</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">Input: A = [1, 4], C1 = 15, C2 = 3</pre>\n            <pre class=\"output\">Output: 45</pre>\n            <div class=\"explanation\">\n                <p>We may increment the first element three times.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">Input: A = [2, 11, 11, 11, 12], C1 = 10, C2 = 4</pre>\n            <pre class=\"output\">Output: 54</pre>\n            <div class=\"explanation\">\n                <p>Operations performed:</p>\n                <ol>\n                    <li>Increment first and second element using second operation three times: A = [5, 14, 11, 11, 12]</li>\n                    <li>Increment first and third element using second operation three times: A = [8, 14, 14, 11, 12]</li>\n                    <li>Increment first and fourth element using second operation three times: A = [11, 14, 14, 14, 12]</li>\n                    <li>Increment first and fifth element using second operation twice: A = [13, 14, 14, 14, 14]</li>\n                    <li>Increment first element using first operation once: A = [14, 14, 14, 14, 14]</li>\n                </ol>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 3:</h4>\n            <pre class=\"input\">Input: A = [1000000, 2, 1, 2, 1000000], C1 = 10000, C2 = 4000</pre>\n            <pre class=\"output\">Output: 999998000</pre>\n            <div class=\"explanation\">\n                <p>The total cost is equal to 499999 * 4000 * 3 + 10000 = 5999998000 but it should be returned modulo 10⁹.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\"footer\">\n        <p class=\"copyright\">Copyright 2009-2024 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Twm3aJr9PCQzEf7UcVUh6atzRg6X2HblQhgYO7fVdQI/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 36,
        "title": "Binary Tree Expansion",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h1>Binary Tree Expansion</h1>\n    </div>\n\n<div class=\"problem-description\">\n        <p>The problem focuses on a data structure called binary tree.</p>\n\n<p>A node of a <em>binary tree</em> has an ID (an integer value) and pointers to two other nodes, called the <em>left subtree</em> and the <em>right subtree</em>. If the <em>left subtree</em> or <em>right subtree</em> does not exist, its corresponding pointer value is NULL.</p>\n\n<p>For example, the figure below shows a binary tree consisting of six nodes. Here, node 3 does not have a right subtree, and nodes 4, 5 and 6 are <em>leaves</em> - they do not have any subtree.</p>\n\n<div class=\"image-container\">\n            <img src=\"initial_tree.png\" alt=\"Initial binary tree example with nodes 1,2,3,4,5,6\" class=\"problem-image\">\n        </div>\n\n<h3>Structure Definition</h3>\n        <pre class=\"code-block\">struct tree { int x; struct tree * l; struct tree * r; };</pre>\n\n<p>Attribute x holds the node's ID, whereas attributes l and r hold the <em>left</em> and <em>right subtree</em>, respectively.</p>\n\n<p>Your task is to <em>expand</em> the tree by replacing every <em>leaf</em> with a new node whose subtrees are both leaves. The IDs of each new node and its two leaves should correspond to the ID of the leaf they replaced.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Function Description</h3>\n        <pre class=\"function-signature\">struct tree * solution(struct tree * T);</pre>\n        <p>The function should return the expanded version of the given binary tree T.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1:</h4>\n            <div class=\"image-container\">\n                <img src=\"input_tree1.png\" alt=\"Input tree example 1\" class=\"example-image\">\n                <img src=\"output_tree1.png\" alt=\"Expected output tree example 1\" class=\"example-image\">\n            </div>\n            <div class=\"explanation\">\n                <p>The second figure shows the expanded version of the tree from the first figure.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <div class=\"image-container\">\n                <img src=\"input_tree2.png\" alt=\"Input tree with nodes 7,9,3\" class=\"example-image\">\n                <img src=\"output_tree2.png\" alt=\"Expected output tree with expanded leaves\" class=\"example-image\">\n            </div>\n        </div>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [1..20,000]</li>\n            <li>T is a correct representation of not empty binary tree</li>\n            <li>each ID in tree T is a distinct integer within the range [1..100,000]</li>\n        </ul>\n    </div>\n\n<div class=\"footer\">\n        <p class=\"copyright\">Copyright 2009-2024 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/14c1ArbXiSG25PCDoNqYY69v_aj-F8skYk-amqbHPS4s/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 46,
        "title": "Metro Fee Calculator",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-title\">\n        <h2>Metro Fee Calculator</h2>\n    </div>\n\n<div class=\"problem-description\">\n        <p>There is a metro rail line with k stations numbered from 0 to k-1. There is a direct connection between stations if their numbers differ by one. Passengers can ride the metro line in both directions.</p>\n\n<p>The fee for boarding the train is 1. Every time a passenger travels between two adjacent stations the fee increases by 2. The metro system charges money at the end of each day based on the passenger's travel history for that day.</p>\n\n<p>There is a total fee limit for a single day. The passenger cannot be charged more than the limit, even if their associated travel fees exceed the limit. The limit depends on the maximum station number the passenger visited during the day.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>You are given arrays <code>start</code> and <code>dest</code> of length N, describing all the metro rides the passenger took during the day. During the x-th ride, the passenger boarded the train at station <code>start[x]</code> and left the train at station <code>dest[x]</code>.</p>\n        <p>You are also given an array <code>limit</code> of length K. If the largest station number the passenger visited during the day is Y, then the fee limit for this passenger for that day is <code>limit[Y]</code>.</p>\n    </div>\n\n<div class=\"function-signature\">\n        <h3>Function Signature</h3>\n        <pre class=\"code-block\">int solution(vector&lt;int&gt; &start, vector&lt;int&gt; &dest, vector&lt;int&gt; &limit);</pre>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [1..30]</li>\n            <li>K is an integer within the range [2..50]</li>\n            <li>Each element of arrays start and dest is an integer within the range [0..K-1]</li>\n            <li>Each element of array limit is an integer within the range [1..3000]</li>\n            <li>Each ride has a different start and destination station</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">start = [1, 0, 2, 4]\ndest = [2, 2, 0, 5]\nlimit = [3, 17, 7, 4, 5, 17]</pre>\n            <pre class=\"output\">16</pre>\n            <div class=\"explanation\">\n                <p>There were four rides:</p>\n                <ul>\n                    <li>station 1 to station 2 (cost 3)</li>\n                    <li>station 0 to station 2 (cost 5)</li>\n                    <li>station 2 to station 0 (cost 5)</li>\n                    <li>station 4 to station 5 (cost 3)</li>\n                </ul>\n                <p>The total cost is 16. The largest visited station number is 5. The fee limit for station 5 is 17, so it does not apply in this case.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">start = [1, 2, 0, 2, 3]\ndest = [2, 1, 2, 1, 2]\nlimit = [4, 8, 18, 16, 20]</pre>\n            <pre class=\"output\">16</pre>\n            <div class=\"explanation\">\n                <p>The total cost would be 17, but is capped at 16 (the daily limit for station 3).</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 3:</h4>\n            <pre class=\"input\">start = [2, 2]\ndest = [4, 3]\nlimit = [1, 1, 1, 1, 9, 1]</pre>\n            <pre class=\"output\">8</pre>\n        </div>\n    </div>\n\n<div class=\"notes\">\n        <h3>Note</h3>\n        <p>Focus on correctness. The performance of your solution will not be the focus of the assessment.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1HPPqjVxyl9eOaEU1knhRCv3pjRQtP3ngxnyRc5Qk2_0/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 47,
        "title": "Car Manufacturing Optimization",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">Car Manufacturing Optimization</h2>\n\n<div class=\"problem-description\">\n        <p>A car manufacturer has data about the production processes of N different cars (numbered from 0 to N-1) and wants to maximize the number of cars produced in the upcoming month. The manufacturing information is described by an array H, where H[k] denotes the number of hours required to produce the k-th car.</p>\n\n<p>There are two assembly lines in the factory, the first of which works for X, and the second Y, hours in a month. Every car can be constructed using either one of these lines. Only one car at a time can be produced on each assembly line and it is not possible to switch lines after starting the car's production.</p>\n\n<p>What is the maximum number of different cars that can be produced in the upcoming month?</p>\n    </div>\n\n<div class=\"function-signature\">\n        <h3>Function Description</h3>\n        <pre class=\"code-block\"><code>int solution(vector&lt;int&gt; &H, int x, int y);</code></pre>\n        <p>Write a function that, given an array H of N integers and two integers X and Y, returns the maximum number of different cars that can be produced in the upcoming month by assigning cars to assembly lines in an optimal way.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">H = [1, 1, 3], X = 1, Y = 1</pre>\n            <pre class=\"output\">2</pre>\n            <div class=\"explanation\">Only cars whose assembly time requires 1 hour can be constructed.</div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">H = [6, 5, 5, 4, 3], X = 8, Y = 9</pre>\n            <pre class=\"output\">4</pre>\n            <div class=\"explanation\">The cars that need 3 and 5 hours can be produced on the first assembly line while the second car that needs 5 hours and the car that needs 4 hours can be produced using the second line.</div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 3:</h4>\n            <pre class=\"input\">H = [6, 5, 2, 1, 8], X = 17, Y = 5</pre>\n            <pre class=\"output\">5</pre>\n            <div class=\"explanation\">The car that needs 5 hours can be produced on the second line and the four other cars can be produced on the first line.</div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 4:</h4>\n            <pre class=\"input\">H = [5, 5, 4, 6], X = 8, Y = 8</pre>\n            <pre class=\"output\">2</pre>\n            <div class=\"explanation\">Only one car can be produced on each line.</div>\n        </div>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [1..1,000]</li>\n            <li>each element of array H is an integer within the range [1..1,000]</li>\n            <li>X and Y are integers within the range [1..500]</li>\n        </ul>\n    </div>\n\n<div class=\"note\">\n        <p>Notice that the examples above can have many possible assignments of cars to the assembly lines.</p>\n        <p>Write an efficient algorithm for the following assumptions.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1WANVClRU_obiiPCrc8lVySzw_h1LQOfG-BFfpOsdHps/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 87,
        "title": "Well-Structured Words",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h1>Well-Structured Words</h1>\n    </div>\n\n<div class=\"problem-description\">\n        <p>A couple of friends decided to play an anagram-finding word game. The point of the game is to find all the anagrams of a given word. Unfortunately, the friends are not fluent in English, so, instead of finding all the English words, they decided to look for all the well-structured words.</p>\n\n<p>We say that a word is well-structured if it:</p>\n        <ul>\n            <li>starts with a consonant;</li>\n            <li>does not contain two consecutive vowels;</li>\n            <li>does not contain two consecutive consonants.</li>\n        </ul>\n\n<p>Assume that the letters AEIOU are vowels, and that all other letters are always consonants. Please note, that Y is treated as a consonant.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Well-Structured Words Examples</h3>\n        <ul>\n            <li>PUTOR</li>\n            <li>RUME</li>\n            <li>TABEK</li>\n            <li>BABABAB</li>\n            <li>BABABA</li>\n            <li>YAMAR</li>\n        </ul>\n\n<h3>Non-Well-Structured Words Examples</h3>\n        <ul>\n            <li>ABAR (does not start with a consonant)</li>\n            <li>BAAR (contains two consecutive vowels)</li>\n            <li>KAKKE (contains two consecutive consonants)</li>\n            <li>AARO (does not start with a consonant, and contains two consecutive vowels)</li>\n            <li>BOARD (contains two consecutive vowels and two consecutive consonants)</li>\n        </ul>\n    </div>\n\n<div class=\"task\">\n        <h3>Task</h3>\n        <p>Count the number of well-structured words that can be obtained by rearranging the letters of the input word. Since the answer can be very large, provide it modulo 1,000,000,007 (10⁹ + 7).</p>\n    </div>\n\n<div class=\"function-signature\">\n        <h3>Function Description</h3>\n        <pre><code>int solution(char *S);</code></pre>\n        <p>Write a function that, given a string S, returns the number of well-structured words (modulo 1,000,000,007) that can be obtained by rearranging letters of S.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [1..30]</li>\n            <li>string S is made only of uppercase letters (A-Z)</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <h4>Example 1:</h4>\n            <p>Input: S = \"BAR\"</p>\n            <p>Output: 2</p>\n            <p>Explanation: Well-structured words that can be formed:</p>\n            <ul>\n                <li>BAR</li>\n                <li>RAB</li>\n            </ul>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <p>Input: S = \"AABB\"</p>\n            <p>Output: 1</p>\n            <p>Explanation: Only one well-structured word can be formed: BABA</p>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 3:</h4>\n            <p>Input: S = \"AABCY\"</p>\n            <p>Output: 6</p>\n            <p>Explanation: Well-structured words that can be formed:</p>\n            <ul>\n                <li>BACAY</li>\n                <li>BAYAC</li>\n                <li>CABAY</li>\n                <li>CAYAB</li>\n                <li>YABAC</li>\n                <li>YACAB</li>\n            </ul>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 4:</h4>\n            <p>Input: S = \"AAAB\"</p>\n            <p>Output: 0</p>\n            <p>Explanation: No well-structured words can be formed</p>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1RqSFdIboNDjPgtd3BI1cpSkeZ5aAsnDtEjccaG-OsRc/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 88,
        "title": "Car Assembly Lines",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h2>Car Assembly Lines</h2>\n    </div>\n\n<div class=\"problem-description\">\n        <p>In a car factory there are two assembly lines, called A and B. Each of them consists of N positions numbered from 0 to N-1. In each position, some component is installed into the car being assembled. The lines are symmetric; that is, the same component is installed into the car in the corresponding positions of A and B.</p>\n\n<p>In order to assemble a car, it needs to get through all of the positions on the assembly lines. It takes A[K] minutes to install the component in the K-th position on line A, and B[K] minutes to install it on line B.</p>\n\n<p>After installing a component in the K-th position, the car can either be:</p>\n        <ul>\n            <li>moved to the next position on the same line (which happens automatically and takes 0 minutes)</li>\n            <li>moved to the other line. Switching from line A to line B takes X minutes, and switching from line B to line A takes Y minutes.</li>\n        </ul>\n\n<p>The assembly process can be started in either line.</p>\n    </div>\n\n<div class=\"function-signature\">\n        <h3>Function Description</h3>\n        <pre class=\"code\">int solution(int A[], int B[], int N, int X, int Y);</pre>\n        <p>Write a function that, given arrays A and B consisting of N integers each, and integers X and Y, returns the minimum time required to assemble an entire car.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">A = [1, 2]\nB = [2, 2]\nN = 2\nX = 2\nY = 1</pre>\n            <pre class=\"output\">Returns: 8</pre>\n            <div class=\"explanation\">\n                <p>The assembly of the car can start in line A. After installing the component in position number 0 (1 minute), the car can be moved to assembly line B (2 minutes) to install the component in position number 1 (2 minutes), and move the car back to line A (1 minute), where the last component would be installed (2 minutes). The total time is 1 + 2 + 2 + 1 + 2 = 8.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">A = [2, 11, 4, 4]\nB = [9, 2, 5, 11]\nN = 4\nX = 8\nY = 4</pre>\n            <pre class=\"output\">Returns: 21</pre>\n            <div class=\"explanation\">\n                <p>It is optimal to assemble the entire car on line A.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 3:</h4>\n            <pre class=\"input\">A = [1, 10, 1]\nB = [10, 1, 10]\nN = 3\nX = 1\nY = 5</pre>\n            <pre class=\"output\">Returns: 9</pre>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 4:</h4>\n            <pre class=\"input\">A = [8, 3, 3]\nB = [6, 1, 10]\nN = 3\nX = 4\nY = 3</pre>\n            <pre class=\"output\">Returns: 13</pre>\n        </div>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [1..100,000]</li>\n            <li>each element of arrays A and B is an integer within the range [1..20,000]</li>\n            <li>X and Y are integers within the range [1..20,000]</li>\n        </ul>\n    </div>\n\n<div class=\"footer\">\n        <p class=\"copyright\">Copyright 2009-2024 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Fpk2QtVQt-xRP6oqmGTsDplFaWN1UpcaH2Md4zNQMpc/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 115,
        "title": "Minimize Maximum Grid Path",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Grid Path Optimization</h2>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>You are given two arrays, A and B, each made of N integers. They represent a grid with N columns and 2 rows, where A is the upper row and B is the lower row.</p>\n        <p>Your task is to go from the upper-left cell (represented by A[0]) to the bottom-right cell (represented by B[N-1]) moving only right and down, so that the maximum value over which you pass is as small as possible.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"code-block\\\">int solution(vector&lt;int&gt; &A, vector&lt;int&gt; &B);</pre>\n        <p>that, given two arrays of integers A and B, of length N, returns the maximum value on the optimal path.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [1..100,000]</li>\n            <li>each element of arrays A and B is an integer within the range [-1,000,000,000..1,000,000,000]</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n<div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">A = [3, 4, 6]\nB = [6, 5, 4]</pre>\n            <pre class=\\\"output\\\">Output: 5</pre>\n            <div class=\\\"explanation\\\">\n                <p>The optimal path is 3 → 4. Maximum value encountered is 5.</p>\n                <div class=\\\"grid-visualization\\\">\n                    <table>\n                        <tr><td>3</td><td>4</td><td>6</td></tr>\n                        <tr><td>6</td><td>5</td><td>4</td></tr>\n                    </table>\n                </div>\n            </div>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">A = [1, 2, 1, 1, 1, 1]\nB = [1, 1, 1, 3, 1, 1]</pre>\n            <pre class=\\\"output\\\">Output: 2</pre>\n            <div class=\\\"grid-visualization\\\">\n                <table>\n                    <tr><td>1</td><td>2</td><td>1</td><td>1</td><td>1</td><td>1</td></tr>\n                    <tr><td>1</td><td>1</td><td>1</td><td>3</td><td>1</td><td>1</td></tr>\n                </table>\n            </div>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Example 3:</h4>\n            <pre class=\\\"input\\\">A = [-5, -1, -3]\nB = [-5, -5, -2]</pre>\n            <pre class=\\\"output\\\">Output: -1</pre>\n            <div class=\\\"explanation\\\">\n                <p>The optimal path is (-5) → (-1) → (-3) → (-2). Maximum value encountered is -1.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"starter-code\\\">\n        <h3>Starter Code</h3>\n        <pre class=\\\"code-block cpp\\\">\nint solution(vector&lt;int&gt; &A, vector&lt;int&gt; &B) {\n    // Implement your solution here\n}\n        </pre>\n    </div>\n</div>\n\n<style>\n.grid-visualization table {\n    border-collapse: collapse;\n    margin: 10px 0;\n}\n\n.grid-visualization td {\n    border: 1px solid #ccc;\n    padding: 8px;\n    text-align: center;\n    min-width: 30px;\n}\n\n.code-block {\n    background-color: #f5f5f5;\n    padding: 15px;\n    border-radius: 5px;\n    font-family: monospace;\n}\n\n.example {\n    margin: 20px 0;\n    padding: 15px;\n    border: 1px solid #eee;\n    border-radius: 5px;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1pRy5ZxICvfmfp_OlamLAKbmYA4Q-u3ebK2EWZdzpuvc/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Microsoft intern",
        "company_id": 2
    },
    {
        "id": 186,
        "title": "Grid Path Navigation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Grid Path Navigation</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are given two arrays, A and B, each made of N integers. They represent a grid with N columns and 2 rows, where A is the upper row and B is the lower row.</p>\n        <p>Your task is to go from the upper-left cell (represented by A[0]) to the bottom-right cell (represented by B[N-1]) moving only right and down, so that the maximum value over which you pass is as small as possible.</p>\n        \n        <div class=\\\"function-signature\\\">\n            <pre><code>int solution(int A[], int N[], int M);</code></pre>\n            <p>that, given two arrays of integers A and B, of length N, returns the maximum value on the optimal path.</p>\n        </div>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <p>Given A = [3, 4, 6], B = [6, 5, 4], the function should return 5.</p>\n            <div class=\\\"grid-visualization\\\">\n                <table>\n                    <tr><td>3</td><td>4</td><td>6</td></tr>\n                    <tr><td>6</td><td>5</td><td>4</td></tr>\n                </table>\n            </div>\n            <p>The optimal path is 3 → 4 → 5 → 4</p>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <p>Given A = [1, 2, 1, 1, 1, 4], B = [1, 1, 1, 3, 1, 1], the function should return 2.</p>\n            <div class=\\\"grid-visualization\\\">\n                <table>\n                    <tr><td>1</td><td>2</td><td>1</td><td>1</td><td>1</td><td>1</td></tr>\n                    <tr><td>1</td><td>1</td><td>1</td><td>3</td><td>1</td><td>1</td></tr>\n                </table>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 3:</h4>\n            <p>Given A = [-5, -1, -3], B = [-5, -5, -2], the function should return -1.</p>\n            <div class=\\\"grid-visualization\\\">\n                <table>\n                    <tr><td>-5</td><td>-1</td><td>-3</td></tr>\n                    <tr><td>-5</td><td>-5</td><td>-2</td></tr>\n                </table>\n            </div>\n            <p>The optimal path is (-5) → (-1) → (-3) → (-2)</p>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N is an integer within the range [1..100,000]</li>\n            <li>each element of arrays A and B is an integer within the range [-1,000,000,000..1,000,000,000]</li>\n        </ul>\n    </div>\n</div>\n\n<style>\n.grid-visualization table {\n    border-collapse: collapse;\n    margin: 10px 0;\n}\n\n.grid-visualization td {\n    border: 1px solid #ccc;\n    padding: 8px;\n    text-align: center;\n    min-width: 30px;\n}\n\n.function-signature pre {\n    background-color: #f5f5f5;\n    padding: 10px;\n    border-radius: 4px;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1JxLEveBATY67FLOekwgsKqSAYXyEL9rmEsLLbXwaLlw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Microsoft intern",
        "company_id": 2
    }
]