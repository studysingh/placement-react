[
    {
        "id": 1249,
        "title": "Destination flights",
        "problem_statement": "<h1>Destination flights</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two tables: <code>airport</code> and <code>flight</code>. The <code>airport</code> table contains information about the airport code, location of the airport, elevation, and hub airline. The <code>flight</code> table contains information about various flights with unique flight numbers, their origins, destinations, fares, and distances traveled.</p>\r\n\r\n<p><strong>Task:</strong> Write an SQL query to display the total number of flights destined for each location. If multiple locations have the same number of flights destined for them, display the results in alphabetical order of the location. If a location has no destination flights, you can ignore it in the output.</p>\r\n\r\n<h3>Input format</h3>\r\n<p><strong>Table: airport</strong></p>\r\n<ul>\r\n    <li><code>code</code> (String): Represents the code of the airport</li>\r\n    <li><code>location</code> (String): Represents the location of the airport</li>\r\n    <li><code>elevation</code> (Integer): Represents the elevation of the airport</li>\r\n    <li><code>hub_airline</code> (String): Represents if the flight belongs to any hub airline</li>\r\n</ul>\r\n\r\n<p><strong>Table: flight</strong></p>\r\n<ul>\r\n    <li><code>flight_no</code> (Integer): Represents the unique flight number of the flight</li>\r\n    <li><code>orig</code> (String): Represents the origin of the flight</li>\r\n    <li><code>dest</code> (String): Represents the destination of the flight</li>\r\n    <li><code>fare</code> (Float): Represents the fare for the flight</li>\r\n    <li><code>distance</code> (Integer): Represents the distance traveled by the flight</li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>The output should contain two columns:</p>\r\n<ul>\r\n    <li><code>location</code> (String): Represents the location of the airport</li>\r\n    <li><code>Number of destination flights</code> (Integer): Represents the number of flights destined for specific airport locations.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input table: airport</strong></p>\r\n<pre><code class='language-text'>code | location          | elevation | hub_airline\r\n-----|-------------------|-----------|------------\r\nFLG  | Flagstaff, AZ     | 6920      |\r\nPHX  | Phoenix, AZ       | 1257      | West\r\nMSP  | Minneapolis, MN   | 862       | Northwest\r\nLAX  | Los Angeles, CA   | 37        |\r\nSFO  | San Francisco, CA | 78        | Continental\r\nIAH  | Houston, TX       | 75        | American\r\nDFW  | Dallas, TX        | 210       | American\r\nJFK  | New York, NY      | 43        | United\r\nDTW  | Detroit, MI       | 23        | American\r\nOIA  | Orlando, FL       | 20        | TWA\r\nMIA  | Miami, FL         | 16        | Grand Cayman</code></pre>\r\n\r\n<p><strong>Input table: flight</strong></p>\r\n<pre><code class='language-text'>flight_no | orig | dest | fare   | distance\r\n----------|------|------|--------|---------\r\n101       | FLG  | OIA  | 48.50  | 200\r\n102       | PHX  | MSP  | 56.00  | 1000\r\n103       | JFK  | IAH  | 56.00  | 1000\r\n104       | PHX  | FLG  | 48.50  | 200\r\n15        | JFK  | LAX  | 49.00  | 400\r\n329       | LAX  | IAH  | 49.00  | 400\r\n40        | PHX  | OIA  | 49.00  | 400\r\n400       | IAH  | PHX  | 49.00  | 400\r\n600       | PHX  | SFO  | 109.00 | 750\r\n604       | MIA  | OIA  | 109.00 | 750</code></pre>\r\n\r\n<p><strong>Output table:</strong></p>\r\n<pre><code class='language-text'>location          | Number of destination flights\r\n------------------|------------------------------\r\nOrlando, FL       | 3\r\nHouston, TX       | 2\r\nFlagstaff, AZ     | 1\r\nLos Angeles, CA   | 1\r\nMinneapolis, MN   | 1\r\nPhoenix, AZ       | 1\r\nSan Francisco, CA | 1</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Time Limit: 5 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong> Your SQL query must be able to print the sample output from the provided sample input. However, the query is run against multiple hidden test cases. Therefore, your query must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<p><strong>Scoring:</strong> Score is assigned if any testcase passes</p>\r\n\r\n<p><strong>Allowed Languages:</strong> MySQL, PostgreSQL, MSSQL, Oracle_Db</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "PharmEasy_22aug",
        "company_id": 424
    },
    {
        "id": 1251,
        "title": "Maximum displacement",
        "problem_statement": "<h1>Maximum displacement</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a 1D lane, you can move one step ahead (denoted by S) or move one step back (denoted by R). You are given a string of commands and an integer N.</p>\r\n<p>Calculate the maximum displacement that you can achieve from the starting point after changing exactly N commands in the string and executing them.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the <code>Game()</code> function. This function takes the following 2 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>Str</code>: Represents the string containing the commands</li>\r\n    <li><code>N</code>: Represents the number of commands that must be changed</li>\r\n</ul>\r\n<pre><code class='language-javascript'>#include &lt;bits/stdc++.h&gt;\r\nint Game (string Str, int N) {\r\n    // Write your code here\r\n    return 0;\r\n}</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains the string <code>Str</code> which represents the string that contains the commands.</li>\r\n    <li>The second line contains an integer <code>N</code> which represents the number of commands that must be changed.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the maximum displacement that you can achieve from the starting point after changing exactly N commands in the string and executing all the commands of that string. One command can be changed several times.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nSR\r\n1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li>Str = SR</li>\r\n    <li>N = 1</li>\r\n</ul>\r\n<p><strong>Approach:</strong> Maximum displacement is 2 by changing the 2nd command as the resulting string will become \"SS\" which takes the player 2 steps away from starting point.</p>\r\n<p>Thus, the answer is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |Str| &lt;= 100</code></li>\r\n    <li><code>1 &lt;= N &lt;= 50</code></li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits:</h3>\r\n<p>Time Limit: 4.0 sec(s) for each input file</p>\r\n<p>Memory Limit: 256 MB</p>\r\n<p>Source Limit: 1024 KB</p>\r\n\r\n<h3>Scoring:</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages:</h3>\r\n<p>Bash, C, C++, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "PharmEasy_22aug",
        "company_id": 424
    }
]