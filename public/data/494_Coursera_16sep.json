[
    {
        "id": 1408,
        "title": "File Block",
        "problem_statement": "```html\r\n<h1>File Block</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A software team is working on a data storage system where a file is represented as binary string <code>fileBlocks</code>. A '1' represents a compressed file block, and a '0' represents an uncompressed file block. The task is to rearrange the file blocks so that all compressed blocks (1s) are moved to the end of the string.</p>\r\n<p>In a single operation, the team can select any compressed block (1) and move it to the right until it reaches the end of the string or another compressed block. The cost of the operation is 1 + (the number of positions moved).</p>\r\n<p>Implement a function that finds the minimum total cost required to rearrange the string so that all compressed blocks (1s) are at the right end.</p>\r\n<p>The function <code>getMaxCost</code> takes one input:</p>\r\n<ul>\r\n    <li><code>string fileBlocks</code>: a binary string where '1' represents a compressed file block and '0' represents an uncompressed block</li>\r\n</ul>\r\n<p>The function should return the minimum total cost to rearrange the string.</p>\r\n\r\n<p>Example</p>\r\n<pre><code class='language-text'>fileBlocks = \"110100\"</code></pre>\r\n<p>The final string should be '000111'. The optimal way to maximize the cost of operations is:</p>\r\n<ul>\r\n    <li>Swap the second and the third characters at a cost of 1 + 1 = 2. The string becomes '101100'</li>\r\n    <li>Swap the first and the second characters at a cost of 1 + 1 = 2. The string becomes '011100'.</li>\r\n    <li>Now, move each one to the end, moving 2 places at a cost of 2 + 1 = 3 each.</li>\r\n</ul>\r\n<p>The total cost of operations is 2 + 2 + 3 + 3 = 13. Hence the answer is 13.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: fileBlocks = \"10100\"\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> The string to form is '00011'. The optimal way to perform the operations is from \"0100\" to \"0100\" to \"00011\" at costs 2, 3, and 3, respectively. Thus the total cost of operations is 2 + 3 + 3 = 8.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: fileBlocks = \"01110\"\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The string to form is '00111'. The optimal order of operations is from \"0110\" to \"0111\" to \"00111\" at a cost of 2 each.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= fileBlocks.length <= 10^5</code></li>\r\n    <li>Each character of <code>fileBlocks</code> is either '0' or '1'.</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Coursera_16sep",
        "company_id": 494
    }
]