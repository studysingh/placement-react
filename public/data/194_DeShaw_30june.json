[
    {
        "id": 574,
        "title": "Minimum Switches to Zero",
        "problem_statement": "```html\r\n<h1>Minimum Switches to Zero</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An accounting firm records all the transactions in a linear sequence. Each transaction can have an integer value, and the goal for a clean audit is to adjust all transactions so that every value becomes zero.</p>\r\n<p>The firm has a tool that can perform a <strong>switch</strong> operation and adjust the value of a sequence of transactions. In one switch, it can select a contiguous group of transactions from the start and either add or subtract one unit of value from each transaction in the group.</p>\r\n<p>Find the minimum number of switch required to convert every transaction to 0.</p>\r\n<p><strong>Note:</strong> It is guaranteed that it is always possible to convert every element of the array to 0.</p>\r\n\r\n<p>Complete the function <code>getMinimumSwitches</code> in the editor below:</p>\r\n<p>The function <code>getMinimumSwitches</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>transactions[n]</code>: an array of integers</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: denoting the minimum number of switches required to convert every element to 0</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>long getMinimumSwitches(vector&lt;int&gt; transactions) {\r\n    int n = transactions.size();\r\n    for (int i = 0; i &lt; n; i++) {\r\n        // Function body to be completed\r\n    }\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ntransactions[] size, n = 5\r\ntransactions = [3, 2, 0, 0, -1]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> For n = 5 and transactions = [3, 2, 0, 0, -1], one optimal set of operations is:</p>\r\n<ul>\r\n    <li>Operation 1: Select the prefix of length 1, and decrement by 1. transactions after this switch is [2, 2, 0, 0, -1].</li>\r\n    <li>Operation 2: Select the prefix of length 2, and decrement by 1. transactions after this switch is [1, 1, 0, 0, -1].</li>\r\n    <li>Operation 3: Select the prefix of length 4, and decrement by 1. transactions after this switch is [0, 0, -1, -1, -1].</li>\r\n    <li>Operation 4: Select the prefix of length 2, and decrement by 1. transactions after this switch is [-1, -1, -1, -1, -1].</li>\r\n    <li>Operation 5: Select the prefix of length 5, and increment by 1. transactions after this switch is [0, 0, 0, 0, 0].</li>\r\n</ul>\r\n<p>The answer is 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ntransactions[] size, n = 4\r\ntransactions = [-1, -1, -1, -1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> For n = 4 and transactions = [-1, -1, -1, -1], the optimal set of operations is:</p>\r\n<ul>\r\n    <li>Operation 1: Select the prefix of length 4, and increment by 1. transactions after this switch is [0, 0, 0, 0].</li>\r\n</ul>\r\n<p>The answer is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>-10<sup>9</sup> &lt;= transactions[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DeShaw_30june",
        "company_id": 194
    },
    {
        "id": 575,
        "title": "Find Valid Passwords",
        "problem_statement": "<h1>Find Valid Passwords</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An engineer is designing a system and needs to create valid passwords. For this purpose, the passwords must follow specific rules based on concatenation and character additions. The engineer proposes rules to be evaluated to ensure it is valid or invalid. The rules are as follows:</p>\r\n\r\n<h3>Password Validation Rules</h3>\r\n<ul>\r\n    <li>An empty password is always valid.</li>\r\n    <li>If a valid password <code>A</code> exists, adding the same character <code>'c'</code> to both the beginning and end of <code>A</code> creates a new valid password <code>'cAc'</code>. For example, if <code>A = \"\"</code> (empty string) is valid, adding <code>'b'</code> gives <code>\"bb\"</code> which is also valid.</li>\r\n    <li>If two valid passwords <code>A</code> and <code>B</code> are valid, their concatenations <code>'AB'</code> and <code>'BA'</code> are also valid. For example, if <code>\"aa\"</code> and <code>\"bb\"</code> are valid, then <code>\"aabb\"</code> and <code>\"bbaa\"</code> are valid.</li>\r\n</ul>\r\n<p>The engineer proposed <code>N</code> passwords, each password consisting of lowercase English letters. For each proposed <code>i</code>-th password, determine if the password is valid or invalid. The validity of the <code>i</code>-th password is denoted by <code>1</code> in the answer array while an invalid password is denoted by <code>0</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: passwords = [\"abba\", \"abca\"]\r\nOutput: [1, 0]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For the first string, \"abba\":</p>\r\n<ul>\r\n    <li>The empty string <code>\"\"</code> is valid (Rule 1).</li>\r\n    <li>Using Rule 2, adding <code>'b'</code> to the empty string <code>\"\"</code> creates <code>\"bb\"</code>, which is valid.</li>\r\n    <li>Using Rule 2 again, adding <code>'a'</code> to <code>\"bb\"</code> creates <code>\"abba\"</code>, which is valid.</li>\r\n</ul>\r\n<p>For the second string, \"abca\":</p>\r\n<ul>\r\n    <li>The substring <code>\"bc\"</code> cannot be formed by any of the validation rules. Since <code>\"abca\"</code> would need to be formed by adding <code>'a'</code> to <code>\"bc\"</code> (i.e., <code>a</code> + <code>bc</code> + <code>a</code>), and <code>\"bc\"</code> is not valid, <code>\"abca\"</code> is also not valid.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: passwords = [\"daabbd\", \"abc\"]\r\nOutput: [1, 0]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For the first string, \"daabbd\":</p>\r\n<ul>\r\n    <li>The empty string <code>\"\"</code> is valid (Rule 1).</li>\r\n    <li>Using Rule 2, adding <code>'a'</code> to <code>\"\"</code> creates <code>\"aa\"</code>, which is valid.</li>\r\n    <li>Using Rule 2, adding <code>'b'</code> to <code>\"\"</code> creates <code>\"bb\"</code>, which is valid.</li>\r\n    <li>Using Rule 3, concatenating <code>\"aa\"</code> and <code>\"bb\"</code> creates <code>\"aabb\"</code>, which is valid.</li>\r\n    <li>Using Rule 2, adding <code>'d'</code> to <code>\"aabb\"</code> creates <code>\"daabbd\"</code>, which is valid.</li>\r\n</ul>\r\n<p>For the second string, \"abc\":</p>\r\n<ul>\r\n    <li>The password <code>\"abc\"</code> cannot be constructed by applying any sequence of the given validation rules. Thus, it is invalid.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: passwords = [\"acac\"]\r\nOutput: [0]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The password <code>\"acac\"</code> cannot be constructed by applying any sequence of the given validation rules. Therefore, the password is invalid.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= |password[i]| <= 10^5</code></li>\r\n    <li><code>password[i]</code> consists of lowercase English letters.</li>\r\n    <li>The total length of all passwords, <code>sum(|password[i]|)</code>, is <code><= 10^5</code>.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>findValidPasswords</code> function below.</p>\r\n<p>The function is expected to return an <code>INTEGER_ARRAY</code>.</p>\r\n<p>The function accepts <code>STRING_ARRAY passwords</code> as parameter.</p>\r\n<pre><code class='language-javascript'>vector&lt;int&gt; findValidPasswords(vector&lt;string&gt; passwords)</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DeShaw_30june",
        "company_id": 194
    },
    {
        "id": 576,
        "title": "Count Perfect Route Cycles",
        "problem_statement": "<h1>Count Perfect Route Cycles</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A large bus company recently expanded its fleet to enhance its in-house transportation system. These buses travel to specific stations, numbered from 1 to <i>n</i>. Currently, the company only operates in two regions. All bus routes are designed as a tree structure, meaning buses departing from any station go to a local hub or one of the company's destinations.</p>\r\n<p>Let's represent stations in the first region with the color white, and stations in the second region with the color black. Given a list of stations and their immediate destinations, your task is to add a route between any two stations such that a perfect route cycle is formed.</p>\r\n<p>The characteristics of a perfect route cycle are:</p>\r\n<ul>\r\n    <li>The number of destinations in the cycle is greater than or equal to 3.</li>\r\n    <li>All stations in the cycle are in the same region.</li>\r\n</ul>\r\n<p>Count the number of distinct ways to form a perfect route cycle by adding a path between any two stations. This will help the bus company decide where to register its buses for regional travel.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>countRouteCycles</code> in the editor below.</p>\r\n<p>The function is expected to return a <code>LONG_INTEGER</code>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>int tree_nodes</code>: the total number of nodes in the tree.</li>\r\n    <li><code>vector&lt;int&gt; tree_from</code>: an array of nodes representing the 'from' side of edges. Let <code>m</code> be the number of edges, so this array has size <code>m</code>.</li>\r\n    <li><code>vector&lt;int&gt; tree_to</code>: an array of nodes representing the 'to' side of edges. This array also has size <code>m</code>.</li>\r\n    <li><code>vector&lt;int&gt; colors</code>: an array of colors for each node, where 0 represents white and 1 represents black. This array has size <code>tree_nodes</code>.</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>long int</code>: the number of distinct perfect cycles.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p>This example illustrates the concept of forming perfect cycles.</p>\r\n<pre><code class='language-text'>Input:\r\ntree_nodes = 6\r\ntree_from = [1, 2, 2, 1, 5]\r\ntree_to = [2, 3, 4, 5, 6]\r\ncolors = [0, 1, 1, 0, 0, 0]</code></pre>\r\n<p><strong>Explanation:</strong> It is possible to form 2 perfect route cycles:</p>\r\n<ul>\r\n    <li>Add an edge between station 3 and 4 - There are 3 black nodes in this cycle meaning they are all in the same region.</li>\r\n    <li>Add an edge between station 1 and 6 - There are 3 white nodes in this cycle meaning they are all in the same region.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Sample Input For Custom Testing (Sample Case 0)</strong></p>\r\n<pre><code class='language-text'>Input:\r\ntree_nodes = 6, m = 5\r\ntree_from = [1, 2, 2, 2, 4]\r\ntree_to = [2, 3, 4, 5, 6]\r\ncolors = [0, 1, 1, 1, 1, 0]</code></pre>\r\n<pre><code class='language-text'>Output:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 ways to join two nodes to form a perfect route cycle:</p>\r\n<ul>\r\n    <li>Add an edge between nodes 4 and 3</li>\r\n    <li>Add an edge between nodes 4 and 5</li>\r\n    <li>Add an edge between nodes 5 and 3</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<p><strong>Sample Input For Custom Testing (Sample Case 1)</strong></p>\r\n<pre><code class='language-text'>Input:\r\ntree_nodes = 5, m = 4\r\ntree_from = [1, 2, 2, 3]\r\ntree_to = [2, 3, 4, 5]\r\ncolors = [0, 0, 0, 1, 0]</code></pre>\r\n<pre><code class='language-text'>Output:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 ways to join two nodes such that a perfect route cycle is formed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= tree_nodes &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= m &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= colors[i] &lt;= 1</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DeShaw_30june",
        "company_id": 194
    }
]