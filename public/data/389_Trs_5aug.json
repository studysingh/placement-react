[
    {
        "id": 1159,
        "title": "Colorful Path Maze",
        "problem_statement": "<h1>Colorful Path Maze</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a 2D grid maze of size N x M, where each cell contains a color represented by an integer. Your task is to find the number of distinct paths from the top-left corner (0, 0) to the bottom-right corner (N-1, M-1) such that:</p>\r\n<ul>\r\n    <li>You can only move right or down at each step.</li>\r\n    <li>You cannot revisit any color already present in your current path.</li>\r\n</ul>\r\n<p>In other words, no two cells along a single path can have the same color.</p>\r\n<p>Use a function to explore all valid paths and count how many satisfy the color uniqueness condition.</p>\r\n<p><strong>Function Description:</strong></p>\r\n<p>You need to implement the function <code>countColorfulPaths</code>. The function should take the size of the grid and the grid itself and return the number of valid paths from (0, 0) to (N-1, M-1) as per the above rules.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li>N - An integer representing the number of rows in the grid.</li>\r\n    <li>M - An integer representing the number of columns in the grid.</li>\r\n    <li>grid - A 2D list of integers of size N x M where each integer denotes a color.</li>\r\n</ul>\r\n<p><strong>Return:</strong></p>\r\n<p>An integer representing the number of valid colorful paths from (0, 0) to (N-1, M-1).</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains a single integer N.</li>\r\n    <li>The second line contains a single integer M.</li>\r\n    <li>The next N lines each contain M space-separated integers representing the colors in the grid.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return a single integer representing the number of valid colorful paths.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N, M <= 10</code></li>\r\n    <li><code>0 <= grid[i][j] <= 100</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n1 2 3\r\n4 5 6\r\n7 8 9\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> There are 6 distinct paths from (0, 0) to (2, 2) where all colors along each path are unique.</p>\r\n<p>Path -> (0,0)->(0,1)->(0,2)->(1,2)->(2,2) -> Colors: {1,2,3,6,9}</p>\r\n<p>Since no color repeats in any path, they are all valid.</p>\r\n\r\n<h2>Notes</h2>\r\n<p>Your code must be able to pass the sample output from the provided sample input. However, your code will run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits</h3>\r\n<p>Time Limit: 5.0 sec(s) for each input file<br>Memory Limit: 256 MB<br>Source Limit: 1024 KB</p>\r\n\r\n<h3>Scoring</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages</h3>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, JavaScript, Kotlin, Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trs_5aug",
        "company_id": 389
    },
    {
        "id": 1160,
        "title": "Special nodes path",
        "problem_statement": "<h1>Special nodes path</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a tree consisting of N nodes. There are K number of special nodes in the tree. You can perform an operation on the tree exactly once.</p>\r\n<p>Add an edge between any 2 special nodes.</p>\r\n<p>Find the minimum distance between node 1 and node N you can get after performing the operation exactly once.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function `solve`. The function takes the following 5 parameters and returns a single integer denoting the answer to the question:</p>\r\n<ul>\r\n    <li>`N`: Represents the number of nodes in the tree</li>\r\n    <li>`K`: Represents the number of special nodes</li>\r\n    <li>`special_nodes`: Represents the array containing the special nodes.</li>\r\n    <li>`node_from`: Represents the array denoting the starting node of each edge</li>\r\n    <li>`node_to`: Represents the array denoting the ending node of each edge</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int solve(int N, int K, vector&lt;int&gt; special_nodes, vector&lt;int&gt; node_from, vector&lt;int&gt; node_to)</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language which doesn't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains `T`, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer `N` denoting the number of nodes in the tree.</li>\r\n            <li>The second line contains an integer `K` denoting the number of special nodes.</li>\r\n            <li>The third line contains `K` space-separated integers denoting the array `special_nodes`.</li>\r\n            <li>The fourth line contains `N-1` space-separated integers denoting the array `node_from`.</li>\r\n            <li>The fifth line contains `N-1` space-separated integers denoting the array `node_to`.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print a single integer representing the minimum distance between node 1 and node N.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= T <= 100`</li>\r\n    <li>`2 <= N <= 10^5`</li>\r\n    <li>`1 <= special_nodes_i <= N`</li>\r\n    <li>`1 <= node_from_i, node_to_i <= N`</li>\r\n</ul>\r\n<p>It is guaranteed that the sum of `N` over all test cases does not exceed `10^5`.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2\r\n2\r\n1 2\r\n2 3 5 4\r\n1 1 4 3 6\r\nOutput:\r\n2\r\n3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>In test case 1, given:</p>\r\n<ul>\r\n    <li>N = 6</li>\r\n    <li>K = 2</li>\r\n    <li>special_nodes = [6, 3]</li>\r\n    <li>node_from = [2, 3, 5, 4]</li>\r\n    <li>node_to = [1, 4, 3, 6]</li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li>Distance between the node 1 and node 6 in the given tree is 3.</li>\r\n    <li>We can connect an edge between node 3 and node 6, this will result the final distance to be 2.</li>\r\n    <li>This is the minimum distance we can get by performing the given operation.</li>\r\n    <li>So the answer is 2.</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<p>Time Limit: 10 sec(s) for each input file</p>\r\n<p>Memory Limit: 256 MB</p>\r\n<p>Source Limit: 1024 KB</p>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>C, C++, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trs_5aug",
        "company_id": 389
    }
]