[
    {
        "id": 91,
        "title": "Sequence Detector",
        "problem_statement": "<div class=\"problem-container\">\n    <h1 class=\"problem-title\">Sequence Detector</h1>\n\n<div class=\"problem-description\">\n        <p>Nitya is a digital circuit designer. She decides to design a sequence detector which may be either an overlapping model or a non-overlapping model.</p>\n\n<p>Sequence detector is a digital circuit which is used to detect the sequences from a series of numbers. These detectors may be overlapping or non-overlapping.</p>\n\n<div class=\"example-explanation\">\n            <p>Example of how non-overlapping sequence detector detects sequence <code>101</code> is depicted below:</p>\n            <pre class=\"sequence\">101001011010001101</pre>\n            <p>So, from the series given above, say Series 1, non-overlapping sequence detector detects four <code>101</code> sequences.</p>\n\n<p>Example of how overlapping sequence detector detects sequence <code>101</code> is depicted below:</p>\n            <pre class=\"sequence\">1011001010</pre>\n            <p>From the series given above, say Series 2, overlapping sequence detector detects three <code>101</code> sequences. The last 5 digits in the given series i.e., <code>10101</code> has two middle <code>1</code> is used by both left and right trailing digits.</p>\n        </div>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>Input consists of variable number of lines of input where each line contains 4 space separated inputs which represents present_state (char), next_state (char), input (0/1), output (0/1) of the state transition diagram.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>Print the sequence to be detected in first line.</p>\n        <p>Print the type of sequence detector in the second line. If the detector is non-overlapping print \"Non Overlapping Sequence Detector\" else print \"Overlapping Sequence Detector\".</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ Length of sequence ≤ 10</li>\n            <li>Each input line contains 4 space separated inputs viz. &lt;present_state (char), next_state (char), input (0/1), output (0/1)&gt;</li>\n            <li>4 ≤ Number of lines of input ≤ 20</li>\n            <li>For a sequence to be detected, every state must be visited at least once and the number of transitions should be equal to Number of states</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">Input:\na b 1 0\nb c 0 0\nb b 1 0\na a 0 0\nc a 0 0\nc a 1 1</pre>\n            <pre class=\"output\">Output:\n101\nNon Overlapping Sequence Detector</pre>\n            <div class=\"explanation\">\n                <p>The state transition diagram shows a non-overlapping sequence detector for sequence 101.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">Input:\na b 1 0\na a 0 0\nb a 0 0\nb c 1 0\nc c 1 0\nd a 0 0\nd b 1 1\nc d 0 0</pre>\n            <pre class=\"output\">Output:\n1101\nOverlapping Sequence Detector</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Mlbl9A87V_GeJOPq9QHZQoPCNRLLAB-Do5BBnD_o_Qc/edit?usp=sharing",
        "solution_code": null,
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 92,
        "title": "Sequence Detector",
        "problem_statement": "<div class=\"problem-container\">\n    <h1 class=\"problem-title\">Sequence Detector</h1>\n\n<div class=\"problem-description\">\n        <p>Nitya is a digital circuit designer. She decides to design a sequence detector which may be either an overlapping model or a non-overlapping model.</p>\n\n<p>Sequence detector is a digital circuit which is used to detect the sequences from a series of numbers. These detectors may be overlapping or non-overlapping.</p>\n\n<div class=\"example-explanation\">\n            <p>Example of how non-overlapping sequence detector detects sequence <code>101</code> is depicted below:</p>\n            <pre class=\"sequence\">101001011010001101</pre>\n            <p>So, from the series given above, say Series 1, non-overlapping sequence detector detects four <code>101</code> sequences.</p>\n\n<p>Example of how overlapping sequence detector detects sequence <code>101</code> is depicted below:</p>\n            <pre class=\"sequence\">1011001010</pre>\n            <p>From the series given above, say Series 2, overlapping sequence detector detects three <code>101</code> sequences. The last 5 digits in the given series i.e., <code>10101</code> has two middle <code>1</code> is used by both left and right trailing digits.</p>\n        </div>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>Input consists of variable number of lines of input where each line contains 4 space separated inputs which represents present_state (char), next_state (char), input (0/1), output (0/1) of the state transition diagram.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>Print the sequence to be detected in first line.</p>\n        <p>Print the type of sequence detector in the second line. If the detector is non-overlapping print \"Non Overlapping Sequence Detector\" else print \"Overlapping Sequence Detector\".</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ Length of sequence ≤ 10</li>\n            <li>Each input line contains 4 space separated inputs viz. &lt;present_state (char), next_state (char), input (0/1), output (0/1)&gt;</li>\n            <li>4 ≤ Number of lines of input ≤ 20</li>\n            <li>For a sequence to be detected, every state must be visited at least once and the number of transitions should be equal to Number of states</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">Input:\na b 1 0\nb c 0 0\nb b 1 0\na a 0 0\nc a 0 0\nc a 1 1</pre>\n            <pre class=\"output\">Output:\n101\nNon Overlapping Sequence Detector</pre>\n            <div class=\"explanation\">\n                <p>The state transition diagram shows a non-overlapping sequence detector for sequence 101.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">Input:\na b 1 0\na a 0 0\nb a 0 0\nb c 1 0\nc c 1 0\nd a 0 0\nd b 1 1\nc d 0 0</pre>\n            <pre class=\"output\">Output:\n1101\nOverlapping Sequence Detector</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Mlbl9A87V_GeJOPq9QHZQoPCNRLLAB-Do5BBnD_o_Qc/edit?usp=sharing",
        "solution_code": null,
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 93,
        "title": "HammingDistance",
        "problem_statement": "<div class=\"problem-container\">\n    <h1 class=\"problem-title\">HammingDistance</h1>\n\n<div class=\"problem-description\">\n        <p>Vyom just learned about binary numbers. One day his tutor gave him T similar tasks and asked him to find the answer for them. As the number of tasks is more and also the size of input in each task is large, he concluded that manual calculation will be tough, so he decided to write a program for that.</p>\n\n<p>Given T binary strings of varying lengths which consists of only 0s and 1s. He will be given two values A and B which indicates cost of one occurrence of sub strings \"01\" and \"10\". The total cost of the given string will be the sum of the costs of all \"01\" and \"10\". His task is to minimize the cost of given strings in each case, by rearranging it in any order. After rearrange the string, he has to find the <span class=\"highlight\">hamming distance</span> between the original string and the rearranged string and print it in each case. In case of invalid input, print \"INVALID\". If there are more than one rearrangement which gives least cost, then consider the string which gives minimum hamming distance.</p>\n\n<p class=\"note\">Note: The sub strings are considered in an overlapping manner i.e., in the string 010, there is one \"01\" and one \"10\".</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ length of string ≤ 10<sup>5</sup></li>\n            <li>0 ≤ A,B ≤ 10<sup>4</sup></li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>First line consists of T the number of test cases.</p>\n        <p>For each test case there will be two lines:</p>\n        <ul>\n            <li>First line consists of the binary string</li>\n            <li>Second line consists of A and B separated by space</li>\n        </ul>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>For each string, print the hamming distance in a new line.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1</h4>\n            <pre class=\"input\">Input:\n2\n0100\n3 2\n000\n4 5</pre>\n            <pre class=\"output\">Output:\n2\n0</pre>\n            <div class=\"explanation\">\n                <p>Here, cost of original string viz. 0100 is 5, because there is one occurrence of both \"01\" and \"10\". Now this string can be transformed into a new string viz. 1000 which is having one occurrence of \"10\". The cost of transformed string = (number of occurrences of \"01\")*3 + (number of occurrences of \"10\")*2 = 0*3 + 1*2 = 2 which is the minimum possible and the hamming distance of original and transformed string is 2.</p>\n                <p>The string 000 has the cost of 0 which is minimum, and hence no need to do any transformation. So the hamming distance will be 0.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2</h4>\n            <pre class=\"input\">Input:\n1\n01001a10\n1 2</pre>\n            <pre class=\"output\">Output:\nINVALID</pre>\n            <div class=\"explanation\">\n                <p>The given string is not a binary string.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1736W_bXebuPomrPEbDw3c06RJAbJ3iM_DLA0gkZefp0/edit?usp=sharing",
        "solution_code": null,
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 94,
        "title": "ScoreOfCells",
        "problem_statement": "<div class=\"problem-container\">\n    <h1 class=\"problem-title\">ScoreOfCells</h1>\n\n<div class=\"problem-description\">\n        <p>James is a school going kid, who just learned about rows, columns and tables. On one fine day he drew a table consisting of n rows and m columns. In each cell, he wrote a number randomly.</p>\n        <p>James defined a concept 'score' for each cell. The score of a cell A is the number of unique ways possible from all the cells to reach A. For this, he has to follow a rule which states that, he can only move from current cell to either down/right cell only if the value those cells hold is not lesser than the value in the current cell.</p>\n        <p>Given an integer k, find out the cells with score k. If there are more than one cell, then print the indices of the cells in the order they occur in the table from left to right and top to bottom. Print \"NO\" if there are no cells with such score.</p>\n        <p><strong>Note:</strong> Two ways are said to be unique if they have at least one different cell in its path.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n,m ≤ 100</li>\n            <li>0 ≤ table[i] ≤ 10^4</li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>First line contains two integers n,m separated by space.</li>\n            <li>Next n lines contain the values in the cells of the table.</li>\n            <li>Next line contains an integer k.</li>\n        </ul>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>Print the indices of cell(s) with given score in separate lines.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">Input:\n4 3\n6 4 5\n8 5 3\n9 7 2\n1 9 10\n1</pre>\n            <pre class=\"output\">Output:\n0 2\n1 0\n1 1</pre>\n            <div class=\"explanation\">\n                <p>The score of a cell A is the number of unique ways possible from all the cells to reach A.</p>\n                <p>For the cell [0,2], [0,1] → [0,2] is the only possible way.</p>\n                <p>For the cell [1,0], [0,0] → [1,0] is the only possible way.</p>\n                <p>For the cell [1,1], [0,1] → [1,1] is the only possible way.</p>\n                <p>So, the score of all these cells is 1 and we print them in the order of their occurrence.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Example 2:</h4>\n            <pre class=\"input\">Input:\n3 3\n6 16 19\n14 20 17\n21 12 11\n4</pre>\n            <pre class=\"output\">Output:\n1 1</pre>\n            <div class=\"explanation\">\n                <p>The score of a cell A is the number of unique ways possible from all the cells to reach A.</p>\n                <p>For the cell [1,1], four ways are possible:</p>\n                <p>[0,0] → [1,0] → [1,1], [0,0] → [0,1] → [1,1], [1,0] → [1,1], [0,1] → [1,1]</p>\n                <p>So the score of [1,1] is 4 and we print it as output.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1RZyZ4jbpuR8U3VJlbug-mcnYTkayzr4H6qEFYU8YFBk/edit?usp=sharing",
        "solution_code": null,
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 95,
        "title": "GreedyVirus",
        "problem_statement": "<div class=\"problem-container\">\n    <h1 class=\"problem-title\">GreedyVirus</h1>\n\n<div class=\"problem-description\">\n        <p>Phew, thank goodness you're back! During your absence, we observed some unauthorized data communication occurring from our storage warehouse. We promptly reported this to the chief since some data had already been stolen. The chief instructed us to trace the destination of the data theft.</p>\n\n<p>Our storage warehouse comprises individual data containers, arranged in an M*N matrix, with each container holding varying quantities of data represented as units. The containers are organized in M rows and N columns (with indexing starting from 1).</p>\n\n<p>Our observation revealed that the virus consistently targets the container with the maximum data units. However, when two containers have equal data units, the virus's behavior becomes unclear, and we must avoid such scenarios. To determine the data's destination, continuous communication between the virus and the thief must occur. However, our priority is to prevent further data theft.</p>\n\n<p>As the virus targets containers with more data, it always seeks neighboring containers. It can travel in all 8 directions in its quest for infecting container with maximum data. If any of the 8 neighboring container has more data units, the virus moves there. Consequently, our strategy is to entice the virus to a storage unit containing dummy data. Also since data can be generated on the fly, assume that infinite amount of data can be fudged (made available) to lead and trap the virus into desired location.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ N, M ≤ 7</li>\n            <li>0 < Units of data in containers < 30</li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>First line consist of two integers separated by space representing M and N.</li>\n            <li>Next M lines, each contain N space separated integers, representing data units in the corresponding containers.</li>\n            <li>Next line consist of two space separated integers, indicating current location of the virus.</li>\n            <li>Last line consists of two space separated integers, specifying the location of the dummy container where we want to entice the virus to.</li>\n        </ul>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output</h3>\n        <p>The smallest amount of overall data needed to be fudged to attract the virus to the dummy container.</p>\n    </div>\n\n<div class=\"time-limit\">\n        <h3>Time Limit</h3>\n        <p>1 second</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <pre class=\"input\">Input:\n4 4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n2 2\n4 1</pre>\n            <pre class=\"output\">Output:\n5</pre>\n            <div class=\"explanation\">\n                <p>The virus is on container [2,2] and we have to bring it to container [4,1]. The neighbouring containers of [2,2] are [(1,1),(1,2),(1,3),(2,1),(2,3),(3,1),(3,2),(3,3)] having data of [1,2,3,5,7,9,10,11] units, respectively. Now we know that virus will move to container [3,3] because it contains the maximum amount of data in its neighbourhood. However, we also know that from [3,3] reaching [4,1] is impossible. Hence we now need to fudge data.</p>\n\n<p>We can fudge and add 3 units of data to [3,1] where already 9 units of data is present. After fudging, it will become 12. 12 units of data will make it the maximum in neighbourhood. The virus will now thus move to [3,1].</p>\n\n<p>Now the virus is on container [3,1]. The neighbouring container of the virus are [(2,1),(2,2),(3,2),(4,1),(4,2)] having data of [5,6,10,13,14] units, respectively. we will add 2 units of data to [4,1] where already 13 units of data is present. Adding 2 unit data will make it 15. 15 units of data is the maximum in the neighbourhood. The virus will then move to [4,1], our dummy container.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1WZOpA7kF_whdThhc4VBk_MfuJO8bZISZJi8a9k5y6t8/edit?usp=sharing",
        "solution_code": null,
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 96,
        "title": "HarmonicHomology",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">HarmonicHomology</h2>\n\n<div class=\"problem-description\">\n        <p>There are several tunes in the music world. When these tunes are combined, we get a soothing melody. The combination of these melodies will result in a complete song.</p>\n\n<p>Ananya is a musician who always tries to create unique songs. She mixes up these tunes together and forms melodies. There is a standard hierarchy for these tunes which resembles a tree. All the tunes that belong to a certain level sound alike, and the parent of these tunes defines their category.</p>\n\n<p>The hierarchy will be given in the input. Ananya is currently composing a song, to make the song more musical, she will have to form melodies which sound similar.</p>\n\n<p>You will be given the hierarchy of the tunes, two melodies, and three integers A, B and C. A melody is the chain of tunes separated by '-'. Two tunes are said to be similar if they are equal or belong to the same level in the hierarchy. You are allowed to perform two operations on tunes i.e., compare or remove. A term 'concordance score' is introduced, which is initially zero. When you compare, if tunes are similar, then concordance score will be increased by A or else decreased by B. If you prefer to remove a tune from one of the string, concordance score will be decreased by C. You cannot remove tune at ith index from both the strings simultaneously. You will have to move to the next tune only when the current tune is either compared or removed.</p>\n\n<p>Ananya is trying to increase the similarity between the given melodies by increasing their concordance score by performing the above-mentioned operations. Thus, the more the concordance score, more the similarity!</p>\n\n<p>Help Ananya in finding the maximum concordance score possible.</p>\n\n<p class=\"note\"><strong>Note:</strong> These terms used here do not resemble original music terms.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input Format</h3>\n        <p>The first line consists of a single integer N denoting the number of parent nodes.</p>\n        <p>Next N lines contains music categories in the form of &lt;parent tune&gt; : &lt;list of child tunes separated by space&gt;. The first parent tune is always the root node of the tree.</p>\n        <p>N+2 line consists of melody m1.</p>\n        <p>N+3 line consists of melody m2.</p>\n        <p>The last line consists of three integers A, B and C.</p>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output Format</h3>\n        <p>Print the maximum concordance score of the given melodies.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ number of tunes in each melody ≤ 500</li>\n            <li>1 ≤ A, B, C ≤ 10^4</li>\n            <li>Tunes contains only lower-case alphabets</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <h4>Example 1:</h4>\n            <pre class=\"input\">Input:\n5\npop : rock country disco\nrock : jazz blues\ncountry : swing\ndisco : salsa new ambient\nswing : gospel techno\nrock-swing-new-salsa-swing-blues\nswing-swing-blues-jazz\n4 2 1</pre>\n            <pre class=\"output\">Output:\n14</pre>\n            <div class=\"explanation\">\n                <h4>Explanation:</h4>\n                <p>Given hierarchy is shown in tree format [tree diagram]</p>\n                <p>Steps followed to get maximum concordance score:</p>\n                <ol>\n                    <li>Remove rock and swing tunes from melody1. Melody1 becomes new-salsa-swing-blues. Concordance Score = -2</li>\n                    <li>Compare new tune from melody1 with swing tune from melody2. Both are similar. Concordance Score = 2+4 = 2</li>\n                    <li>Compare salsa tune from melody1 with swing tune from melody2. Both are similar because both are at the same level. Concordance Score = 2+4 = 6</li>\n                    <li>Compare swing tune from melody1 with blues tune from melody2. Both are similar because both are at the same level. Concordance Score = 6+4 = 10</li>\n                    <li>Compare blues tune from melody1 with jazz tune from melody2. Both are similar because both are at the same level. Concordance Score = 10+4 = 14</li>\n                </ol>\n                <p>No other set of operations will give a concordance score greater than 14.</p>\n            </div>\n        </div>\n        <!-- Example 2 follows similar structure -->\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1SglNQMGAA-jhmfeZyxOh_YXAvjmCI_xhz-jytIyKEiY/edit?usp=sharing",
        "solution_code": null,
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 97,
        "title": "PlaceFinder",
        "problem_statement": "<div class=\"problem-container\">\n    <h2 class=\"problem-title\">PlaceFinder</h2>\n\n<div class=\"problem-description\">\n        <p>The Place Finder is a special tool made for finding locations in areas without internet. To know where you are, you need a group of these devices because they work together. These devices can easily talk to each other.</p>\n\n<p>Each device can find where other devices are and how far they are. This information is shared among devices, creating a network. This network helps with communication and figuring out where devices are in relation to each other.</p>\n\n<p>In a real time scenario, each device is able to communicate with each other, but it is not able to find the direction and distances of all devices due to natural obstacles. However for few devices it may be possible to know their direction and distances.</p>\n\n<p>The calculations required to find distance between devices can be understood from the Examples section.</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 16</li>\n            <li>Angle is measured in degree</li>\n            <li>Distance is in meters</li>\n        </ul>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Input</h3>\n        <ul>\n            <li>First line consists of an integer 'N' denoting total number of place finder devices</li>\n            <li>Second line consist of 'N' pairs of space separated integers. Each pair is separated by a colon. First value of the pair represents the device ID, second value represents the number of devices that can be found by this device.</li>\n            <li>Next lines consist of 'N' logical sections. Each logical section consists of:\n                <ul>\n                    <li>Device ID as its First line</li>\n                    <li>Followed as many number of lines as devices that can be found by this device. Each such lines has three space separated integers denoting 'Device ID', 'Distance' and 'Angle'</li>\n                </ul>\n            </li>\n            <li>Last line consists of two space separated integers representing Id of devices between whom we have to find the distance</li>\n        </ul>\n    </div>\n\n<div class=\"output-format\">\n        <h3>Output</h3>\n        <p>Print the Distance rounded off to two decimal points denoting the distance between the given two devices</p>\n    </div>\n\n<div class=\"time-limit\">\n        <h3>Time Limit (secs)</h3>\n        <p>1</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\n5\n1:2 2:3 3:2 4:3 5:2\n1\n2 9 0\n3 8 270\n2\n5 8 330\n4 8 270\n1 9 180\n3\n1 8 90\n4 0 0\n4\n2 8 90\n3 9 180\n5 8 30\n5\n2 8 150\n4 8 210\n1 5</pre>\n            <pre class=\"output\">Output:\n10.00</pre>\n            <div class=\"explanation\">\n                <p>The first line describes there are totally five devices</p>\n                <p>The second line describes that the device '1' is able to find the direction and distance of 2 devices and device '2' is able to find the direction and distance of 3 devices and so on.</p>\n                <p>From the third line individual logical section starts.</p>\n                <p>From the first line of this logical section, we say it is the data from device '1'.</p>\n                <p>From second line of this logical section, device '2' is located at distance of 9 from the device '1' at the angle of 0 degree.</p>\n                <p>From third line of the logical section, device '3' is located at distance of 8 from the device '1' at an angle of 270 degree.</p>\n                <p>Above diagram depicts the network. The distance between the device '1' and device '5' are 10.</p>\n                <p>Hence the output 10.00.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1DtJM8sx9OgNhLNZqjvtSNoeoqY7uz54k3wtqYQDG_38/edit?usp=sharing",
        "solution_code": null,
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 427,
        "title": "Bacteria Growth and Splitting",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Bacteria Growth and Splitting</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are a scientist working with bacteria cultures in a lab. You start with a single petri dish containing 1 gram worth of bacteria at the end of hour 0. Your goal is to manage the total bacteria weight over time to reach exactly <strong>X</strong> gram bacteria at the end of an hour. You have to <strong>MINIMISE</strong> the number of hours.</p>\n        \n        <h3>Rules of Bacteria Growth And Splitting:</h3>\n        <ol>\n            <li>\n                <strong>Splitting Bacteria</strong>\n                <ol>\n                    <li>At the start of each hour, you can split any number of petri dishes into two.</li>\n                    <li>Splitting a dish divides bacteria weight into two equal halves.</li>\n                    <li>The splitting operation is <strong>INSTANT</strong> (does not take any time).</li>\n                    <li>For example, on start of hour <strong>h</strong>, if you have 4 dishes => [2g, 3g, 5g, 7g], if you decide to split the first 3 dishes you will have 7 dishes => [1g, 1g, 1.5g, 1.5g, 2.5g, 7g].</li>\n                    <li>You can only split one petri dish once per hour (You cannot split an already split dish in the same hour).</li>\n                </ol>\n            </li>\n            <li>\n                <strong>Bacteria Reproduction</strong>\n                <ol>\n                    <li>During each hour, every dish\\'s bacteria weight increases by 1g, so a dish having <strong>X</strong> gram bacteria at the start of the hour would have <strong>X + 1</strong> gram bacteria at the end of the hour.</li>\n                </ol>\n            </li>\n        </ol>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>You are given an integer <strong>X</strong>, representing the exact bacteria weight in grams you want at the end of an hour. Determine:</p>\n        <ol>\n            <li>The minimum number of hours required to achieve the population of exactly <strong>X</strong>.</li>\n            <li>The splitting strategy (How many dishes you need to split every hour).</li>\n        </ol>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer <strong>H</strong>, denoting the minimum number of hours followed by <strong>H</strong> lines:</p>\n        <ul>\n            <li>Each line having an integer <strong>K<sub>i</sub></strong> (1 ≤ <strong>i</strong> ≤ <strong>H</strong>), representing the number of dishes to split at the start of hour <strong>i</strong>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ X ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n10</pre>\n            <pre class=\\\"output\\\">Output:\n3\n1\n1\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>End of Hour 0: [1g]</p>\n                <p>Start of Hour 1: Split the only dish => [0.5g, 0.5g]</p>\n                <p>End of Hour 1 => [1.5g, 1.5g]</p>\n                <p>Start of Hour 2: Split the first dish => [0.75g, 0.75g, 1.5g]</p>\n                <p>End of Hour 2 => [1.75g, 1.75g, 2.5g]</p>\n                <p>Start of Hour 3: Split the third dish => [1.75g, 1.75g, 1.25g, 1.25g]</p>\n                <p>End of Hour 3 => [2.75g, 2.75g, 2.25g, 2.25g], total weight is exactly 10. We took 3 hours, and each hour we split 1 dish.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/178pX7zu9noYwOEUOoDAZC1rrDADUc35jnb5BQ94cEv4/edit?usp=sharing",
        "solution_code": "",
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 454,
        "title": "Learning With Clock-2",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Learning With Clock-2</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Deva recently learned about angles in his mathematics class and is eager to explore them further! He began learning about angles using a wall clock.</p>\n        <p>He chose an ancient wall clock for his learning. This clock has only two hands: the hour hand and the minute hand. The hour hand moves to the next hour only after the minute hand completes a full rotation, staying at the current hour until then. The task is to form a given angle between the two hands of the clock. The rules for forming the angle are as follows:</p>\n        <ul>\n            <li>Starting from the given position, you can move both hands, but in opposite directions without crossing each other. For example, if you move the hour hand clockwise, you must move the minute hand counterclockwise, and vice versa.</li>\n            <li>The hour hand can only be moved from one hour to the next or previous hours; it cannot be positioned between the hours. However, there are no such restrictions for the minute hand.</li>\n            <li>Moving a hand clockwise incurs a cost of <code>R</code> rupees while moving in counterclockwise direction costs <code>B</code> rupees for each degree.</li>\n            <li>Moving the hour hand costs <code>R</code> rupees per degree for the first 90 degrees (inclusive), and then it costs <code>C</code> rupees per degree for any movement beyond 90 degrees.</li>\n            <li>Similarly, moving the minute hand costs <code>X</code> rupees per degree for the first 90 degrees (inclusive), and then it costs <code>Y</code> rupees per degree for any movement beyond 90 degrees.</li>\n            <li>You can create the specified angle in any direction, whether as an internal or external angle.</li>\n        </ul>\n        <p>For example, if the time is 12:15 and you need to form an angle of 300 degrees, you can achieve this by moving the minute hand 30 degrees in anti-clockwise direction (i.e., from the 3 to the 2), if the resulting cost is low, as shown in Figure 2 below.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An integer <code>n</code> representing the number of test cases.</li>\n            <li>For each test case, the current time in hours and minutes, the required angle, and the costs <code>R</code>, <code>B</code>, <code>C</code>, <code>X</code>, <code>Y</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>For each test case, output the minimum cost to form the specified angle.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 100</code></li>\n            <li><code>0 ≤ R, B, C, X, Y ≤ 1000</code></li>\n            <li><code>0 ≤ angle ≤ 360</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n12 15 300 10 5 2 1 1\n1 30 90 5 5 5 5 5</pre>\n            <pre class=\\\"output\\\">Output:\n15\n5</pre>\n            <div class=\\\"explanation\\\">\n                <p>In the first test case, the minimum cost to form the angle of 300 degrees is 15. In the second test case, the minimum cost to form the angle of 90 degrees is 5.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1sxCRGhA1c4nmrOwPoDxigfPEj0j4Yhr53Zb6kthyILc/edit?usp=sharing",
        "solution_code": "",
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 455,
        "title": "Count Press",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Count Press</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>James is a painter who uses the latest block-shaped brush. This brush can simply be dipped into paint and pressed onto the wall to get that area of the wall painted.</p>\n        <p>Consider a wall of size <code>4x4</code> and a brush of size <code>2x2</code> as shown below:</p>\n        <img src=\\\"path/to/image1.png\\\" alt=\\\"Brush on Wall Example 1\\\" />\n        <p>A press would cover a <code>2x2</code> square of the wall. Four presses are required to cover the above entire wall.</p>\n        <p>A wall of <code>4x1</code> is shown below:</p>\n        <img src=\\\"path/to/image2.png\\\" alt=\\\"Brush on Wall Example 2\\\" />\n        <p>Using a <code>2x2</code> brush, <strong>2</strong> presses will be required to cover the entire wall.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An integer <code>n</code> representing the number of test cases.</li>\n            <li>For each test case, the dimensions of the wall <code>M</code> and <code>N</code>, and the size of the brush <code>X</code> and <code>Y</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>For each test case, output the minimum number of presses required to cover the wall.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 100</code></li>\n            <li><code>1 ≤ M, N ≤ 100</code></li>\n            <li><code>1 ≤ X, Y ≤ 10</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n4 4 2 2\n4 1 2 1</pre>\n            <pre class=\\\"output\\\">Output:\n4\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>In the first test case, it takes 4 presses to cover the <code>4x4</code> wall with a <code>2x2</code> brush. In the second test case, it takes 2 presses to cover the <code>4x1</code> wall with a <code>2x1</code> brush.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1NkuWiWVCHY1nUJK8Mw0Wy7SSCUXgIwla0Ku6ZPJRDVs/edit?usp=sharing",
        "solution_code": "",
        "company_name": "TCS codevita ",
        "company_id": 19
    },
    {
        "id": 456,
        "title": "Maximum Area",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Maximum Area</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Amelia arrived at the Gamble House on a stormy evening, clutching her notebook filled with equations and strategies.</p>\n        <p>\\\"Welcome, Amelia,\\\" Eliot greeted with a slow drawl. \\\"I hear you\\'re here to beat the odds. Care to join me for a game?\\\"</p>\n        <p>Amelia responded, \\\"What\\'s the game?\\\"</p>\n        <p>\\\"It\\'s called Maximum Area,\\\" Eliot replied. The game involves <code>N</code> sticks of varying lengths, which are dropped onto the table simultaneously. The objective is to find the largest area of all the enclosed shapes formed, which determines your winning probability. Since Amelia excels in mathematics, she\\'ll provide the coordinates (<code>x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub></code>) for each stick, treating them as the start and end points of line segments.</p>\n        <p>Assist Amelia in calculating the maximum enclosed area formed by these sticks given their coordinates.</p>\n        <p><strong>Note:</strong></p>\n        <ul>\n            <li>It is given that every shape formed will always be a polygon with sticks as its sides.</li>\n            <li>It may form more than one polygon; consider the polygon with maximum area.</li>\n            <li>The coordinates of all the polygons and their area will always be integers.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line consists of an integer <code>N</code>, denoting the number of line segments.</p>\n        <p>The next <code>N</code> lines consist of four space-separated integers <code>(x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>)</code> denoting the <code>x</code>, <code>y</code> coordinates of starting and ending points of the line segments.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer representing the maximum closed area.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>3 < N < 10</code></li>\n            <li><code>0 ≤ x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub> ≤ 10</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n0 0 2 0\n2 0 2 2\n2 2 0 2\n0 2 0 0</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The coordinates form a square with an area of 4.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1QCMRcUGEDZhS8P_ZtbqW1Mm6S5zXvwvTYj0V5EA-fKU/edit?usp=sharing",
        "solution_code": "",
        "company_name": "TCS codevita ",
        "company_id": 19
    }
]