[
    {
        "id": 276,
        "title": " Secret Catacomb",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>01. Secret Catacomb</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Alex is an archaeologist, and one day while exploring a catacomb, he discovered a sequence of n symbols representing numbers written on the wall. On another wall, when translated, were the words \\\"Minimum Operations?\\\" and some instructions. According to the instructions, Alex can perform the following two steps in a single operation:</p>\n        <ul>\n            <li>Select the number that is currently in the k-th position of the sequence</li>\n            <li>Remove the first number of the sequence and append this number to the end of the sequence</li>\n        </ul>\n        <p>The instructions tell Alex to determine the minimum number of operations needed to make all numbers in the sequence identical. Alex is not good with puzzles, so he sent you the sequence and instructions. If it is impossible to make all numbers the same, print -1.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of two lines:</p>\n        <ul>\n            <li>The first line contains the two space-separated integers n and k.</li>\n            <li>The second line contains n space-separated integers: a1,a2,...,an — the sequence that Alex found.</li>\n        </ul>\n        <p class=\\\"note\\\">The input will be read from the STDIN by the candidate</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the minimum number of operations required to make all numbers in the sequence the same. If it is impossible, print -1.</p>\n        <p class=\\\"note\\\">The output will be matched to the candidate\\'s output printed on the STDOUT</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ k ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ Value of numbers in the sequence ≤ 10<sup>4</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 4\n1 2 3 3 5</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The given sequence is 1 2 3 3 5 and K = 4, after performing the operations for the first time, the sequence becomes 2 3 3 5 5, after the second time the sequence will look like 3 5 5 5, after the third time the sequence becomes 5 5 5 5. Hence the minimum number of operations required to make all the elements of the sequence same is 3.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Sample Input:\n3 1\n3 1 1</pre>\n            <pre class=\\\"output\\\">Sample Output:\n-1</pre>\n        </div>\n    </div>\n\n    <div class=\\\"instructions\\\">\n        <h3>Instructions</h3>\n        <ul>\n            <li>Program should take input from standard input and print output to standard output.</li>\n            <li>Your code is judged by an automated system, do not write any additional welcome/greeting messages.</li>\n            <li>\\\"Save and Test\\\" only checks for basic test cases, more rigorous cases will be used to judge your code while scoring.</li>\n            <li>Additional score will be given for writing optimized code both in terms of memory and execution time.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"starter-code\\\">\n        <h3>Starter Code (C++)</h3>\n        <pre class=\\\"code-block cpp\\\">\n#include&lt;iostream&gt;\nusing namespace std;\nint main() {\n    /* \n    // Sample code to perform I/O:\n    string name;\n    cin>>name;   // Reading input from STDIN\n    cout<<name;  // Writing output to STDOUT\n    \n    // Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail.\n    // Write your C++ code here\n    */\n    return 0;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1mU2aUDw-X5c_sUPMKmuvm-xPb1T2Ui4WJWKF6f8da9g/edit?usp=sharing",
        "solution_code": "#include <iostream>\\n#include <vector>\\nusing namespace std;\\n\\nint main() {\\n    int n, k;\\n    cin >> n >> k;\\n    vector<int> a(n+1); // Using 1-based indexing\\n    for (int i = 1; i <= n; ++i) {\\n        cin >> a[i];\\n    }\\n\\n    int m = n;\\n    for (int i = n - 1; i >= 1; --i) {\\n        if (a[i] != a[n]) {\\n            m = i + 1;\\n            break;\\n        }\\n    }\\n\\n    int operations = m - 1;\\n    if (k > operations) {\\n        cout << operations << endl;\\n    } else {\\n        cout << -1 << endl;\\n    }\\n\\n    return 0;\\n}",
        "company_name": "Hsbc",
        "company_id": 75
    }
]