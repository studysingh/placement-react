[
    {
        "id": 637,
        "title": "Text Editor",
        "problem_statement": "<h1>Text Editor</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a prototype for a text editor application with the following functionalities:</p>\r\n<ul>\r\n    <li>\r\n        <p><strong>[\"Insert\", s]</strong>: Insert the string <code>s</code> at the current cursor position. The cursor will also move to the right by the length of the inserted string.</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>[\"Print\", x]</strong>: If the cursor is at position <code>m</code>, print all the characters from <code>m - x</code> to <code>m + x</code>.</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>[\"Left\", x]</strong>: Move the cursor <code>x</code> positions to the left.</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>[\"Right\", x]</strong>: Move the cursor <code>x</code> positions to the right.</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>[\"Backspace\", x]</strong>: Remove <code>x</code> characters to the left of the cursor.</p>\r\n    </li>\r\n    <li>\r\n        <p><strong>[\"Delete\", x]</strong>: Remove <code>x</code> characters to the right of the cursor.</p>\r\n    </li>\r\n</ul>\r\n<p>Given a 2-D array of strings size <code>n x 2</code>, <code>commands</code>, find the string obtained on each of the print operations starting from an empty string and cursor at the starting position and report them as an array of printed strings in order. If for any operation the cursor reaches the beginning or the end of the current string, it does not go any further on the either side.</p>\r\n<p><strong>Note:</strong> For consistency, the second argument is always provided as a string and hence might be required to be converted to an integer for the relevant commands.</p>\r\n<p>Complete the function <code>getPrintedStrings</code> in the editor with the following parameter(s):</p>\r\n<p><strong>commands:</strong> <code>string[][]</code>, the commands to perform</p>\r\n<p><strong>Returns:</strong> <code>string[]</code>: the printed strings</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> <code>n = 6</code> and <code>commands = [[\"Insert\", \"hello\"], [\"Left\", \"3\"], [\"Delete\", \"1\"], [\"Right\", \"2\"], [\"Backspace\", \"1\"], [\"Print\", \"4\"]]</code></p>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li><strong>[\"Insert\", \"hello\"]</strong>:\r\n        Current String: \"\"\r\n        Current Cursor: 0\r\n        Final String: \"hello\"\r\n        Final Cursor: 5</li>\r\n    <li><strong>[\"Left\", \"3\"]</strong>:\r\n        Current String: \"hello\"\r\n        Current Cursor: 5\r\n        Final String: \"hello\"\r\n        Final Cursor: 2 (5 - 3 = 2)</li>\r\n    <li><strong>[\"Delete\", \"1\"]</strong>:\r\n        Current String: \"hello\"\r\n        Current Cursor: 2\r\n        Final String: \"helo\" (deleted 'l' at index 2)\r\n        Final Cursor: 2</li>\r\n    <li><strong>[\"Right\", \"2\"]</strong>:\r\n        Current String: \"helo\"\r\n        Current Cursor: 2\r\n        Final String: \"helo\"\r\n        Final Cursor: 4 (2 + 2 = 4)</li>\r\n    <li><strong>[\"Backspace\", \"1\"]</strong>:\r\n        Current String: \"helo\"\r\n        Current Cursor: 4\r\n        Final String: \"hel\" (deleted 'o' to the left of cursor 4)\r\n        Final Cursor: 3</li>\r\n    <li><strong>[\"Print\", \"4\"]</strong>:\r\n        Current String: \"hel\"\r\n        Current Cursor: 3\r\n        Print characters from <code>3 - 4 = -1</code> to <code>3 + 4 = 7</code>. Since the string is \"hel\" (length 3), print from index 0 to 2.\r\n        Printed String: \"hel\"</li>\r\n</ol>\r\n<p><strong>Output:</strong> <code>[\"hel\"]</code></p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 7\r\ncommands = [[\"Insert\", \"addthis\"], [\"Print\", \"5\"], [\"Left\", \"4\"], [\"Right\", \"2\"], [\"Backspace\", \"1\"], [\"Delete\", \"1\"], [\"Print\", \"10\"]]\r\n\r\nOutput:\r\ndthis\r\naddts</code></pre>\r\n<p><strong>Explanation:</strong> After each operation, the string and the position of the cursor are as follows:</p>\r\n<ol>\r\n    <li><code>\"addthis\"</code>, cursor <code>7</code></li>\r\n    <li>Print characters from <code>7-5=2</code> to <code>7+5=12</code>. String is <code>addthis</code>, so print from index 2 to 6. Output: <code>dthis</code>.</li>\r\n    <li>Cursor moves to <code>3</code>. (<code>7-4=3</code>)</li>\r\n    <li>Cursor moves to <code>5</code>. (<code>3+2=5</code>)</li>\r\n    <li>The string becomes <code>\"addts\"</code>, and the cursor remains at <code>4</code>. (Backspace 1 from cursor 5 means deleting 'h' at index 4, cursor moves to 4).</li>\r\n    <li>The string becomes <code>\"adds\"</code>, and the cursor remains at <code>4</code>. (Delete 1 from cursor 4 means deleting 't' at index 4, cursor stays at 4).</li>\r\n    <li>Print string from <code>4-10=-6</code> to <code>4+10=14</code>. String is <code>adds</code> (length 4), so print from index 0 to 3. Output: <code>adds</code>.</li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 5000</code></li>\r\n    <li>The sum of lengths of all strings inserted does not exceed <code>5 * 10^5</code>.</li>\r\n    <li>The size of the first string inserted does not exceed <code>100</code> and the length of all other strings inserted does not exceed <code>25</code>.</li>\r\n    <li>All the strings consist of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_12july ",
        "company_id": 210
    },
    {
        "id": 638,
        "title": "Longest Substring With At Most K Normal Characters",
        "problem_statement": "<h1>Longest Substring With At Most K Normal Characters</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a specific language, characters are categorized as either special or normal. A character is considered special if its value is '1' and normal if its value is '0'. Given a string <code>s</code>, return the length of the longest substring of <code>s</code> that contains at most <code>k</code> normal characters.</p>\r\n\r\n<p>The classification of characters is defined by a 26-digit bit string named <code>charValue</code>, where each digit corresponds to a lowercase letter in the English alphabet.</p>\r\n\r\n<p>For clarity, the alphabet is aligned with <code>charValue</code> below:</p>\r\n<pre><code class='language-text'>alphabet = abcdefghijklmnopqrstuvwxyz\r\ncharValue = 10101111111111111111111111</code></pre>\r\n<p>In this example, 'a' (index 0) has a <code>charValue</code> of '1', meaning it's special. 'b' (index 1) has a <code>charValue</code> of '0', meaning it's normal. So, 'a' is special, 'b' is normal, 'c' is special, 'd' is normal, 'e' is special, etc.</p>\r\n\r\n<p>Consider the string <code>s = 'abcde'</code> and <code>k = 2</code>.\r\nBased on the <code>charValue = '10101111111111111111111111'</code>:\r\n'a' (index 0) is special (value '1').\r\n'b' (index 1) is normal (value '0').\r\n'c' (index 2) is special (value '1').\r\n'd' (index 3) is normal (value '0').\r\n'e' (index 4) is special (value '1').</p>\r\n\r\n<p>The normal characters in <code>s</code> are 'b' and 'd'.\r\nIf <code>k = 2</code>, we are looking for the longest substring with at most 2 normal characters.\r\nThe entire string <code>\"abcde\"</code> contains 'b' and 'd' as normal characters, which is exactly 2 normal characters. Its length is 5. Therefore, the longest substring satisfying the condition is \"abcde\" itself, and the return value would be 5.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getSpecialSubstring</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string s</code>: input string</li>\r\n    <li><code>int k</code>: the maximum number of normal characters allowed in a substring</li>\r\n    <li><code>string charValue</code>: a string representing special or normal for each letter of the alphabet, <code>a-z</code></li>\r\n</ul>\r\n\r\n<h3>Return</h3>\r\n<p><code>int</code>: an integer that denotes the length of the longest substring of <code>s</code> with at most <code>k</code> normal characters.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"giraffe\", k = 2, charValue = \"01110011111111111111111111\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nAlign the alphabet with <code>charValue</code>:</p>\r\n<pre><code class='language-text'>alphabet = abcdefghijklmnopqrstuvwxyz\r\ncharValue = 01110011111111111111111111</code></pre>\r\n<p>Based on this <code>charValue</code>, the normal characters (value '0') are 'a', 'f', 'g', 'r'. All other characters are special (value '1').</p>\r\n<p>For the string <code>s = \"giraffe\"</code> with <code>k = 2</code> (at most 2 normal characters):\r\nThe longest possible substrings with at most 2 normal characters include:</p>\r\n<ul>\r\n    <li><code>\"gir\"</code>: 'g' (normal), 'i' (special), 'r' (normal). Contains 2 normal characters. Length 3.</li>\r\n    <li><code>\"ira\"</code>: 'i' (special), 'r' (normal), 'a' (normal). Contains 2 normal characters. Length 3.</li>\r\n    <li><code>\"ffe\"</code>: 'f' (normal), 'f' (normal), 'e' (special). Contains 2 normal characters. Length 3.</li>\r\n</ul>\r\nAll these substrings have a length of 3. Thus, the maximum length is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= length of s &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= k &lt;= length of s</code></li>\r\n    <li>The length of <code>charValue = 26</code></li>\r\n    <li>All values in <code>charValue</code> will be either <code>0</code> or <code>1</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_12july ",
        "company_id": 210
    },
    {
        "id": 639,
        "title": "Choose Fleets",
        "problem_statement": "```html\r\n<h1>Choose Fleets</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an integer denoting a total number of wheels, find the number of different ways to choose a fleet of vehicles from an infinite supply of two-wheeled and four-wheeled vehicles such that the group of chosen vehicles has that exact total number of wheels. Two ways of choosing vehicles are considered to be different if and only if they contain different numbers of two-wheeled or four-wheeled vehicles.</p>\r\n<p>Complete the function <code>chooseFleets</code> in the editor below. The function should return an array of integers representing the answer for each <code>wheels[i]</code>.</p>\r\n<p><code>chooseFleets</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>wheels[0]...wheels[n-1]</code>: an array of integers</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: wheels = [4,5,6]\r\nOutput: [1,0,2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For <code>wheels = 4</code>, we can have 1 four-wheel or 2 two-wheel to have 4 wheels. The output is 1.</li>\r\n    <li>For <code>wheels = 5</code>, we cannot have 5 wheels. The output is 0.</li>\r\n    <li>For <code>wheels = 6</code>, we can have 1 four-wheel and 1 two-wheel or 3 two-wheel vehicles. The output is 2.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, wheels = [6,2,4]\r\nOutput: [2,0,1]</code></pre>\r\n<p><strong>Explanation:</strong> We must find the number of ways of choosing fleets of vehicles whose total numbers of wheels correspond to the values in <code>wheels = [6, 2, 4]</code>.</p>\r\n<ul>\r\n    <li>For <code>wheels[0] = 6</code>, we can choose a fleet with 6 total wheels in two ways:\r\n        <ol>\r\n            <li>Choose 1 four-wheeled vehicle and 1 two-wheeled vehicle.</li>\r\n            <li>Choose 3 two-wheeled vehicles.</li>\r\n        </ol>\r\n        Thus, we store 2 in index 0 of our return array.\r\n    </li>\r\n    <li>There is no way to choose a fleet of vehicles with exactly <code>wheels[1] = 2</code> total wheels because each vehicle has either two or four wheels, so we store 0 in index 1 of our return array.</li>\r\n    <li>For <code>wheels[2] = 4</code>, we can only choose 1 two-wheeled vehicle to get a fleet with 2 total wheels. Thus, we store 1 in index 2 of our return array.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; wheels[i] &le; 10<sup>6</sup></code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_12july ",
        "company_id": 210
    },
    {
        "id": 640,
        "title": "Find Original Array From Prefix XOR",
        "problem_statement": "<h1>Find Original Array From Prefix XOR</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For each element <code>i</code> of an array of non-negative integers, <code>arr</code>, of size <code>n</code>, a prefix XOR array <code>pref</code> is calculated.</p>\r\n<p><code>pref[i]</code> is defined as the bitwise XOR of <code>arr[1]</code>, <code>arr[2]</code>, ..., <code>arr[i]</code>. Here, <code>x XOR y</code> is the bitwise XOR of <code>x</code> and <code>y</code>. The array <code>pref</code> contains the prefix XOR of all elements in <code>arr</code> where <code>1 &le; i &le; n</code>.</p>\r\n<p>Given the array <code>pref</code>, find the original array <code>arr</code>.</p>\r\n<p><strong>Note:</strong> There is always a unique <code>arr</code> for a given <code>pref</code>.</p>\r\n\r\n<p><strong>Function Description</strong></p>\r\n<p>Complete the function <code>getOriginalArray</code> in the editor below.</p>\r\n<p><code>getOriginalArray</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int pref[n]</code>: an array of integers</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int[n]</code>: the original array</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: pref = [5, 2, 10]\r\nOutput: [5, 7, 8]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>pref[1] = arr[1] = 5</code></li>\r\n    <li><code>pref[2] = arr[1] XOR arr[2] = 5 XOR arr[2] = 2</code>, which implies <code>arr[2] = 5 XOR 2 = 7</code>.</li>\r\n    <li><code>pref[3] = arr[1] XOR arr[2] XOR arr[3] = 5 XOR 7 XOR arr[3] = 10</code>, which implies <code>arr[3] = 5 XOR 7 XOR 10 = 8</code>.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n2 2 5 6\r\nOutput:\r\n2\r\n0\r\n7\r\n3</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; pref[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'getOriginalArray' function below.\r\n *\r\n * The function is expected to return an INTEGER_ARRAY.\r\n * The function accepts INTEGER_ARRAY pref as parameter.\r\n */\r\n\r\nvector<int> getOriginalArray(vector<int> pref) {\r\n    // Function implementation goes here\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_12july ",
        "company_id": 210
    },
    {
        "id": 641,
        "title": "Pythagorean Triple in a Tree",
        "problem_statement": "<h1>Pythagorean Triple in a Tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a tree with <code>tree_nodes</code> numbered from 0 to <code>tree_nodes - 1</code>. The distance between two nodes is the number of edges in the unique path between them.</p>\r\n<p>A node is considered 'special' if its distances to three specific nodes <code>x</code>, <code>y</code>, and <code>z</code>, when sorted in ascending order, form a Pythagorean triple (a, b, c) where a<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup>.</p>\r\n<p>Complete the function <code>countPythagoreanTriples</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int tree_nodes</code>: the number of nodes</li>\r\n    <li><code>int tree_from[n]</code>: one end of edge i</li>\r\n    <li><code>int tree_to[n]</code>: the other end of edge i</li>\r\n    <li><code>int x</code>: the node associated with value a in the Pythagorean triple</li>\r\n    <li><code>int y</code>: the node for value b</li>\r\n    <li><code>int z</code>: the node for value c</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the total number of special nodes</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ntree_nodes = 10\r\ntree_edges = 9\r\ntree_from = [0, 1, 3, 3, 5, 7, 8]\r\ntree_to = [1, 2, 3, 5, 7, 8, 9]\r\nx = 4, y = 6, z = 9\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Each <code>tree_from[i]</code> is connected to <code>tree_to[i]</code> with a bidirectional edge.\r\nOnly node 2 forms a Pythagorean triple:</p>\r\n<ul>\r\n    <li>Distance from node 2 to node 4 is 3</li>\r\n    <li>Distance from node 2 to node 6 is 4</li>\r\n    <li>Distance from node 2 to node 9 is 5</li>\r\n</ul>\r\n<p>The triple (3, 4, 5) is a Pythagorean triple (3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ntree_nodes = 9\r\ntree_edges = 8\r\ntree_from = [0, 1, 2, 3, 4, 5, 6, 7]\r\ntree_to = [1, 2, 3, 4, 5, 6, 7, 8]\r\nx = 3, y = 4, z = 5\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong>\r\nNode 0 forms the Pythagorean triple as its distances to nodes 3, 4 and 5 are (3, 4, 5). Sorted, they are (3, 4, 5).\r\nDistances from node 8 to nodes 3, 4 and 5 are (5, 4, 3). Sorted, they are (3, 4, 5).</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\ntree_nodes = 5\r\ntree_edges = 4\r\ntree_from = [0, 0, 2, 2]\r\ntree_to = [1, 2, 3, 4]\r\nx = 0, y = 1, z = 4\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> None of the nodes form a Pythagorean triplet.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>4 <= tree_nodes <= 10^5</code></li>\r\n    <li><code>tree_edges = tree_nodes - 1</code></li>\r\n    <li><code>0 <= tree_from[i], tree_to[i] < tree_nodes</code></li>\r\n    <li><code>0 <= x, y, z < tree_nodes</code></li>\r\n    <li><code>(x != y, y != z and z != x)</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_12july ",
        "company_id": 210
    },
    {
        "id": 642,
        "title": "Perfect Substring",
        "problem_statement": "<h1>Perfect Substring</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A string <code>s</code>, comprised of digits from 0 to 9, contains a perfect substring if all characters within that substring appear exactly <code>k</code> times. Determine the total number of perfect substrings in <code>s</code>.</p>\r\n<p>Complete the function <code>perfectSubString</code> in the editor with the following parameters:</p>\r\n<ul>\r\n<li><code>str s</code>: a string where the value of each element <code>s[i]</code> is described by the character at position <code>i</code> (where <code>0 <= i < n</code>)</li>\r\n<li><code>int k</code>: an integer that denotes the required frequency of the substring</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int</code>: an integer that represents the number of perfect substrings in the given string</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"1102021222\", k = 2\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The 6 perfect substrings are:</p>\r\n<ul>\r\n<li>s[0:1] = 11</li>\r\n<li>s[0:5] = 110202</li>\r\n<li>s[1:6] = 102021</li>\r\n<li>s[2:5] = 0202</li>\r\n<li>s[7:8] = 22</li>\r\n<li>s[8:9] = 22</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"1020122\", k = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Perfect substrings are:</p>\r\n<ul>\r\n<li>s[0:5] = 102012</li>\r\n<li>s[5:6] = 22</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: s = \"1221221121\", k = 3\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Perfect substrings are:</p>\r\n<ul>\r\n<li>s[2:7] = 212211</li>\r\n<li>s[3:8] = 122112</li>\r\n<li>s[4:9] = 221121</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= sizeof(s) <= 10<sup>5</sup></code></li>\r\n<li><code>0 <= s[i] <= 9</code> (where <code>0 <= i < n</code>)</li>\r\n<li><code>1 <= k <= 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_12july ",
        "company_id": 210
    }
]