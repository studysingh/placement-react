[
    {
        "id": 725,
        "title": "Purge the dataset",
        "problem_statement": "<h1>Purge the dataset</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The database contains information about a bank. You are given the table <code>bank</code>.</p>\r\n<p><strong>Task:</strong> Write a query to find information from the month of October (irrespective of the year) in ascending order of Customer ID.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input consists of a single table named <code>bank</code>.</p>\r\n<p>The <code>bank</code> table has the following columns:</p>\r\n<ul>\r\n    <li><code>Info_Date</code> (Date): Represents the date the bank got the customer information.</li>\r\n    <li><code>Customer_ID</code> (Int): Represents the customer ID.</li>\r\n    <li><code>Transactions</code> (Int): Represents the number of bank transactions made by the customer.</li>\r\n    <li><code>Amount</code> (Int): Represents the amount present in the customer's bank.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should be a table containing only the <code>Customer_ID</code> of customers whose information was recorded in October, sorted in ascending order.</p>\r\n<p>The output table schema is:</p>\r\n<ul>\r\n    <li><code>Customer_ID</code> (Int): Represents customer ID with information in October.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input table:</strong> <code>bank</code></p>\r\n<pre><code class='language-text'>Info_Date   Customer_ID   Transactions   Amount\r\n2022-11-26  1             90             100000\r\n2022-10-31  2             12             2000\r\n2022-02-23  3             89             10\r\n2013-10-23  4             13             900\r\n2022-11-01  5             16             1090\r\n2017-07-03  6             87             1405\r\n2010-10-04  7             102            10901\r\n2015-10-07  8             20             1200</code></pre>\r\n\r\n<p><strong>Output table:</strong></p>\r\n<pre><code class='language-text'>Customer_ID\r\n2\r\n4\r\n7\r\n8</code></pre>\r\n\r\n<p><strong>Explanation:</strong> The customers with <code>Info_Date</code> in October are Customer_ID 2 (2022-10-31), Customer_ID 4 (2013-10-23), Customer_ID 7 (2010-10-04), and Customer_ID 8 (2015-10-07). When sorted by <code>Customer_ID</code> in ascending order, the result is [2, 4, 7, 8].</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Barclays_24july",
        "company_id": 229
    },
    {
        "id": 726,
        "title": "String generation",
        "problem_statement": "<h1>String generation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string S1 of length L1 consisting of Latin uppercase alphabets only and a string S2 of length L2 consisting of characters 'T' and 'F' only.</p>\r\n<p>Generate a lexicographically smallest string S of length (L1 + L2 - 1) such that a substring of length L1 in string S starting at index i (0 &le; i &lt; L2) is equal to S1 if and only if the i-th element of S2 is 'T' (without quotes) else not.</p>\r\n<p>If no such string can be generated, print \"-1\" (without quotes).</p>\r\n<p><strong>Notes</strong></p>\r\n<p>A string a is lexicographically smaller than a string b if and only if one of the following holds:</p>\r\n<ul>\r\n    <li>a is a prefix of b, but a != b;</li>\r\n    <li>in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.</li>\r\n</ul>\r\n<p>Find the lexicographically smallest string S which satisfies the given condition.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the solve function. This function takes the following 2 parameters and returns the answer.</p>\r\n<ul>\r\n    <li>S1: Represents a string S1</li>\r\n    <li>S2: Represents a string S2</li>\r\n</ul>\r\n<pre><code class='language-javascript'>string solve (string S1, string S2) {\r\n    // Function body\r\n}</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains T, which represents the number of test cases.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\nABCA\r\nTFFF\r\nOutput:\r\nABCAAAA</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given</strong></p>\r\n<ul>\r\n    <li>S1 = \"ABCA\"</li>\r\n    <li>S2 = \"TFFF\"</li>\r\n</ul>\r\n<p><strong>Approach</strong></p>\r\n<p>S = \"ABCAAAA\" is lexicographically smallest string that satisfies the given condition :-</p>\r\n<ul>\r\n    <li>Substring starting at index 0 : \"ABCA\" is equal to S1. S2<sub>0</sub> = 'T'.</li>\r\n    <li>Substring starting at index 1 : \"BCAA\" is not equal to S1. S2<sub>1</sub> = 'F'.</li>\r\n    <li>Substring starting at index 2 : \"CAAA\" is not equal to S1. S2<sub>2</sub> = 'F'.</li>\r\n    <li>Substring starting at index 3 : \"AAAA\" is not equal to S1. S2<sub>3</sub> = 'F'.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; T &le; 10</li>\r\n    <li>1 &le; |S1| &le; 10<sup>3</sup></li>\r\n    <li>1 &le; |S2| &le; 10<sup>3</sup></li>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Additional Notes</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n<p><strong>Scoring:</strong> Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Barclays_24july",
        "company_id": 229
    }
]