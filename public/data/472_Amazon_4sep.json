[
    {
        "id": 1355,
        "title": "Optimize Inventory Shipments",
        "problem_statement": "<h1>Optimize Inventory Shipments</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An Amazon warehouse processes <code>n</code> shipments, where each shipment affects the inventory levels. These effects are provided in the <code>inventoryAdjustments</code> array, with positive values representing restocks and negative values indicating items taken out for orders.</p>\r\n<p>Starting with zero inventory level, the goal is to process shipments in an optimal order to maximize the number of shipments completed while maintaining a strictly positive inventory level. If the inventory reaches zero or goes negative, operations halt, and no further shipments can be processed.</p>\r\n<p>Given an integer array <code>inventoryAdjustments</code> of length <code>n</code>. Find the maximum number of shipments that can be processed without depleting the inventory.</p>\r\n<p><strong>Note:</strong> Each shipment can be processed only once, with the initial inventory set to zero.</p>\r\n\r\n<p>Complete the function <code>optimizeInventory</code> in the editor.</p>\r\n<p><code>optimizeInventory</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int inventoryAdjustments[n]</code>: an array of integers representing the adjustments in inventory levels</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum number of shipments that can be processed without depleting the inventory.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, inventoryAdjustments = [4, -4, -3, 1, 2]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> One of the optimal orders to maximize the number of shipments that can be processed is <code>[1, 4, -3, 2, -4]</code>.\r\nStarting with an initial inventory of 0:</p>\r\n<ul>\r\n    <li>Process <code>1</code>: Inventory becomes <code>0 + 1 = 1</code>. (Positive)</li>\r\n    <li>Process <code>4</code>: Inventory becomes <code>1 + 4 = 5</code>. (Positive)</li>\r\n    <li>Process <code>-3</code>: Inventory becomes <code>5 + (-3) = 2</code>. (Positive)</li>\r\n    <li>Process <code>2</code>: Inventory becomes <code>2 + 2 = 4</code>. (Positive)</li>\r\n    <li>Process <code>-4</code>: Inventory becomes <code>4 + (-4) = 0</code>. (Not strictly positive, operations halt).</li>\r\n</ul>\r\n<p>The Amazon warehouse can process 4 shipments while maintaining a positive stock level until the end of the 4th shipment. There is no sequence that enables processing more than 4 shipments without depleting the inventory. Hence, the answer is 4.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: n = 5, inventoryAdjustments = [3, -5, 8, -9, -7]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One of the optimal orders to maximize the number of shipments that can be processed is <code>[3, 8, -7, -5, -9]</code>.\r\nStarting with an initial inventory of 0:</p>\r\n<ul>\r\n    <li>Process <code>3</code>: Inventory becomes <code>0 + 3 = 3</code>. (Positive)</li>\r\n    <li>Process <code>8</code>: Inventory becomes <code>3 + 8 = 11</code>. (Positive)</li>\r\n    <li>Process <code>-7</code>: Inventory becomes <code>11 + (-7) = 4</code>. (Positive)</li>\r\n    <li>Process <code>-5</code>: Inventory becomes <code>4 + (-5) = -1</code>. (Negative, operations halt).</li>\r\n</ul>\r\n<p>The Amazon warehouse can process 3 shipments while maintaining a positive stock level until the end of the 3rd shipment. There is no sequence that enables processing more than 3 shipments without depleting the inventory. Hence, the answer is 3.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, inventoryAdjustments = [-1, -3, -2, 0]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> In this scenario, no sequence of shipments can maintain a positive inventory level without running out of stock. Therefore, the answer is 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>-10^9 <= inventoryAdjustments[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_4sep",
        "company_id": 472
    },
    {
        "id": 1356,
        "title": "Drone Delivery Minimum Time",
        "problem_statement": "<h1>Drone Delivery Minimum Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon is expanding its next-generation drone delivery network, consisting of <code>m</code> hubs arranged in a circular ring (Hub 1 is adjacent to Hub <code>m</code>). A drone can move to either adjacent hub, and the travel time between Hub <code>i</code> and its neighbors is given by <code>transitionTime[i]</code>.</p>\r\n<p>Amazon receives a list of priority delivery requests, where packages must be picked up or delivered to specific hubs in a given sequence, represented by the array <code>requestedHubs</code>.</p>\r\n<p>Starting from Hub 1, your task is to calculate the minimum total travel time required for the drone to fulfill all delivery requests.</p>\r\n<p><strong>Note:</strong> Use 1-based indexing.</p>\r\n\r\n<p>Complete the function <code>getMinimumTime</code> in the editor below.</p>\r\n<p><code>getMinimumTime</code> takes the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int requestedHubs[n]</code>: the sequence of hubs to be visited</li>\r\n    <li><code>int transitionTime[m]</code>: the time taken by the drone to move from each hub to one of its adjacent hub</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the minimum total time required to visit all the requested hubs, considering the transition time of the drone</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nm = 3\r\nn = 4\r\ntransitionTime = [3, 2, 1]\r\nrequestedHubs = [1, 3, 3, 2]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The drone begins its journey at Hub 1.</p>\r\n<ol>\r\n    <li>The first hub to visit is Hub 1 itself, so it takes 0 seconds to complete this step.</li>\r\n    <li>To move from Hub 1 to Hub 3, the drone has two possible routes:\r\n        <ul>\r\n            <li>Clockwise: 1 -> 2 -> 3, which takes <code>transitionTime[1] + transitionTime[2] = 3 + 2 = 5</code> seconds.</li>\r\n            <li>Counterclockwise: 1 -> 3, which takes <code>transitionTime[1] = 3</code> seconds.</li>\r\n        </ul>\r\n        The shorter route is the counterclockwise path, so the drone reaches Hub 3 in 3 seconds.\r\n    </li>\r\n    <li>The drone is already at Hub 3, so it takes 0 seconds to complete this step.</li>\r\n    <li>To move from Hub 3 to Hub 2, the drone has two possible routes:\r\n        <ul>\r\n            <li>Clockwise: 3 -> 2, which takes <code>transitionTime[3] = 1</code> second.</li>\r\n            <li>Counterclockwise: 3 -> 1 -> 2, which takes <code>transitionTime[3] + transitionTime[1] = 1 + 3 = 4</code> seconds.</li>\r\n        </ul>\r\n        The shorter route is the Clockwise path, so the drone reaches hub 2 in 1 second.\r\n    </li>\r\n</ol>\r\n<p>Hence, the total minimum possible time to visit all the required servers is 4 seconds.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nrequestedHubs = [2, 3, 3, 1]\r\nm = 3\r\ntransitionTime = [3, 2, 1]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The drone begins its journey at Hub 1.</p>\r\n<ol>\r\n    <li>The first hub to visit is Hub 2; the path followed could be 1 -> 2, which takes 3 seconds, or the path could be 1 -> 3 -> 2, which takes 3 + 1 = 4 seconds. Choosing the shorter path, Hub 2 is visited in 3 seconds.</li>\r\n    <li>To move from Hub 2 to 3, the path followed could be 2 -> 3, which takes 2 seconds, or the path could be 2 -> 1 -> 3, which takes 2 + 3 = 5 seconds. Choosing the shorter path, Hub 3 is visited in 2 seconds.</li>\r\n    <li>The drone is already at Hub 3, so the third server takes no time to visit.</li>\r\n    <li>Finally, to move from Hub 3 to 1, either the path could be 3 -> 1, which takes 1 second, or the path could be 3 -> 2 -> 1, which takes 1 + 2 = 3 seconds. Choosing the shorter path, the fourth required hub is visited in 1 second after visiting the third Hub.</li>\r\n</ol>\r\n<p>The minimum possible time to visit all the required hubs is 3 + 2 + 0 + 1 = 6 seconds.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nrequestedHubs = [1, 2, 1]\r\nm = 2\r\ntransitionTime = [1, 2]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The drone begins its journey at Hub 1.</p>\r\n<ol>\r\n    <li>The first hub to visit is Hub 1, which takes 0 seconds.</li>\r\n    <li>To move from Hub 1 to 2, the path followed is 1 -> 2, which takes 1 second.</li>\r\n    <li>Finally, to move from 2 to 1, the path is 2 -> 1, which takes 2 seconds.</li>\r\n</ol>\r\n<p>The minimum possible time to visit all the required hubs is 0 + 1 + 2 = 3 seconds.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= requestedHubs[i] &lt;= m</code></li>\r\n    <li><code>1 &lt;= m &lt;= 5000</code></li>\r\n    <li><code>1 &lt;= transitionTime[i] &lt;= 10^6</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>long getMinimumTime(vector&lt;int&gt; requestedHubs, vector&lt;int&gt; transitionTime) {\r\n    // Function implementation\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_4sep",
        "company_id": 472
    }
]