[
    {
        "id": 1182,
        "title": "Almost Matching Substring Pairs",
        "problem_statement": "<h1>Almost Matching Substring Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're creating a new programming language with some exciting new features! Any programming language can check if two strings are matching, but you'd like yours to be able to check if they're almost matching. More specifically, we'll say two strings are almost matching if they're equal in length and all of their corresponding characters are the same except for one. For example, \"cat\" and \"bat\" are almost matching, but \"cat\" and \"dog\" are not.</p>\r\n<p>For the sake of efficiency, you're planning on testing the feature by using a single string and comparing its substrings. Given a string <code>s</code> and an integer <code>k</code>, your task is to find the number of pairs of substrings of <code>s</code> that are almost matching but differ at their <code>k</code>th character (0-based). It's necessary that the length of both substrings exceeds <code>k</code> (otherwise the strings wouldn't have a <code>k</code>th character).</p>\r\n<p>Also note that substrings are determined by their indices, so there could potentially be multiple instances of the same word. For example, in the word \"ingratiating\" the substring \"ing\" beginning at index 0 is considered distinct from the one at index 9 (and there are also two distinct \"ati\" substrings).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abacaba\", k = 1\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Using <code>i</code> and <code>j</code> to represent the start and end indices of the first substring, and <code>l</code> and <code>m</code> to represent the indices of the second substring, the 8 pairs are:</p>\r\n<ul>\r\n    <li><code>(\"aba\", \"aca\") - i = 0, j = 2, l = 2, m = 4;</code></li>\r\n    <li><code>(\"aba\", \"aca\") - i = 0, j = 2, l = 4, m = 6;</code></li>\r\n    <li><code>(\"aca\", \"aba\") - i = 2, j = 4, l = 0, m = 2;</code></li>\r\n    <li><code>(\"aca\", \"aba\") - i = 4, j = 6, l = 0, m = 2;</code></li>\r\n    <li><code>(\"aca\", \"aba\") - i = 4, j = 6, l = 2, m = 4;</code></li>\r\n    <li><code>(\"ac\", \"ab\") - i = 2, j = 3, l = 0, m = 1;</code></li>\r\n    <li><code>(\"ac\", \"ab\") - i = 2, j = 3, l = 4, m = 5;</code></li>\r\n    <li><code>(\"ab\", \"ac\") - i = 0, j = 1, l = 2, m = 3;</code></li>\r\n    <li><code>(\"ab\", \"ac\") - i = 4, j = 5, l = 2, m = 3;</code></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Input:</strong> string <code>s</code>\r\n        <ul>\r\n            <li>A string consisting only of lowercase English letters.</li>\r\n            <li><code>1 &le; s.length &le; 200</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> integer <code>k</code>\r\n        <ul>\r\n            <li><code>0 &le; k &lt; s.length</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> integer\r\n        <ul>\r\n            <li>The amount of total pairs as described above.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p><strong>Execution Time Limit:</strong> 0.5 seconds (cpp)</p>\r\n<p><strong>Memory Limit:</strong> 1 GB</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_8aug",
        "company_id": 400
    },
    {
        "id": 1183,
        "title": "Mario's Platform Adventure",
        "problem_statement": "<h1>Mario's Platform Adventure</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Welcome to the magical world of Mario's adventure where Mario is standing on platform 0 and needs to reach platform A+1. But oh no, there's a wide river that's A units wide blocking his way. Mario can't walk on water, but he's got an amazing ability - he can jump up to B units at a time, either forward or backward.</p>\r\n<p>On the river, there are various-sized wooden platforms floating on the river just like in Mario's games. In total there are M platforms and their sizes are stored in an integer array C. Mario can move these platforms around, but he can't change their order or let them overlap. Note that he should first move the platforms and then start his journey. Help Mario cross the river and reach platform A+1.</p>\r\n<p>If it is impossible to reach A+1, your answer will be a vector containing -1, acknowledging the challenge. Yet, if a solution exists, return a vector of size A representing the sequence of river cells. If cell i does not belong to any platform, the ith element of the answer vector should be 0. Otherwise, it should be equal to the index of the platform to which the cell i belongs. If there are multiple solutions, return the lexicographically smallest one.</p>\r\n\r\n<pre><code class='language-cpp'>vector<int> solution(int a, int b, vector<int> c) {\r\n}</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first argument is an integer A</p>\r\n<p>The second argument is an integer B</p>\r\n<p>The third argument is an integer array C</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return an integer array representing the answer.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = 7, B = 2, C = [1, 2, 1]\r\nOutput: [0, 1, 0, 2, 0, 3]</code></pre>\r\n<p><strong>Explanation:</strong> The lexicographically smallest possible answer is [0, 1, 0, 2, 0, 3]. The sequence of jumps Mario performs is 0 → 2 → 4 → 5 → 7 → 8.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = 10, B = 5, C = [2]\r\nOutput: [0, 0, 0, 1, 1, 0, 0, 0, 0]</code></pre>\r\n<p><strong>Explanation:</strong> The lexicographically smallest possible answer is [0, 0, 0, 1, 1, 0, 0, 0, 0]. The sequence of jumps you perform is 0 → 5 → 6 → 11.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= A <= 10^5</code></li>\r\n    <li><code>1 <= B <= 10^5</code></li>\r\n    <li><code>1 <= M <= A</code> (where M is <code>C.length</code>)</li>\r\n    <li><code>1 <= C[i] <= A</code></li>\r\n    <li><code>Sum of C[i] <= A</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_8aug",
        "company_id": 400
    },
    {
        "id": 1184,
        "title": "Minimum and Maximum Moves to Fill First Column",
        "problem_statement": "<h1>Minimum and Maximum Moves to Fill First Column</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a rectangular board divided into a uniform grid (square cells). Some cells of the board are occupied with blocks, and others are empty. You are trying to add more and more blocks to the board, and your task is to fill the first column with them. You can add a block to the field in the following way: first, you choose the row index, then you throw the new block into the chosen row from the left. The block appears in the leftmost cell of the row and starts moving to the right, until it reaches another block or the end of the row. When that happens, the block starts falling down until it reaches another block or the last row.</p>\r\n\r\n<p>For example, if the board looks like this</p>\r\n<pre><code class='language-text'>...#\r\n..#\r\n.#..\r\n.#...</code></pre>\r\n<p>blocks are denoted by '<strong>#</strong>' and empty cells are denoted by '<strong>.</strong>'.</p>\r\n<p>and you throw a block into the first or the second row from the top, it will end up like this:</p>\r\n<pre><code class='language-text'>##.#\r\n##.#\r\n.#..\r\n.#...</code></pre>\r\n<p>Your task is to calculate the minimum and the maximum number of moves required to fill the first column of the board with blocks.</p>\r\n\r\n<h2>Function Signature</h2>\r\n<pre><code class='language-javascript'>vector<int> solution(vector<vector<char>> field)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: field = [['.', '#', '#'], ['.', '.', '#'], ['.', '.', '.']]\r\nOutput: [4, 4]</code></pre>\r\n<p><strong>Explanation:</strong> We need to choose the first row once and the third row three times.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: field = [['.', '#', '#'], ['.', '.', '#'], ['.', '.', '.']]\r\nOutput: [3, 6]</code></pre>\r\n<p><strong>Explanation:</strong> To minimize the number of moves we need to choose the first row three times. To maximize this number, we need to choose the third row three times, then the second row twice, and the first row one time.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.array.char field</code>\r\n        <ul>\r\n            <li>A non-empty rectangular matrix of characters representing a field.</li>\r\n            <li><strong>Guaranteed constraints:</strong>\r\n                <ul>\r\n                    <li><code>1 <= field.length <= 12</code></li>\r\n                    <li><code>1 <= field[0].length <= 12</code></li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>array.integer</code>\r\n        <ul>\r\n            <li>Array of two elements, where the first element is the minimum number of moves required to fill the first column and the second one is the maximum number of moves required to fill the first column. It is guaranteed that the maximum number of moves doesn't exceed 12.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_8aug",
        "company_id": 400
    },
    {
        "id": 1185,
        "title": "Cryptarithmetic Puzzle",
        "problem_statement": "<h1>Cryptarithmetic Puzzle</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A cryptarithm is a mathematical puzzle where the goal is to find the correspondence between letters and digits such that the given arithmetic equation consisting of letters holds true.</p>\r\n<p>Given a cryptarithm as an array of strings <code>crypt</code>, count the number of its valid solutions.</p>\r\n<p>The solution is valid if each letter represents a different digit, and the leading digit of any multi-digit number is not zero.</p>\r\n<p><code>crypt</code> has the following structure: <code>[word_1, word_2, sum_word]</code>, which corresponds to the <code>word_1 + word_2 == sum_word</code> cryptarithm.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"TEN\", \"ONE\", \"TWO\"]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Because there is only one solution to this cryptarithm: T = 8, E = 5, N = 0, O = 1, W = 2.</p>\r\n<p>5480 + 4318 = 9798</p>\r\n<p>1014 + 2075 = 3089</p>\r\n<p>7449 + 8064 = 15513</p>\r\n<p>48229 + 5373 = 53601</p>\r\n<p>47119 + 5261 = 52380</p>\r\n<p>36887 + 4028 = 40915</p>\r\n<p>83442 + 9204 = 92651</p>\r\n<p>74465 + 8236 = 82701</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"RED\", \"BLUE\", \"BLACK\"]\r\nOutput: 720</code></pre>\r\n<p><strong>Explanation:</strong> Because there are 17 possible valid solutions:</p>\r\n<p>5480 + 4318 = 9798</p>\r\n<p>1014 + 2075 = 3089</p>\r\n<p>7449 + 8064 = 15513</p>\r\n<p>48229 + 5373 = 53601</p>\r\n<p>47119 + 5261 = 52380</p>\r\n<p>36887 + 4028 = 40915</p>\r\n<p>83442 + 9204 = 92651</p>\r\n<p>74465 + 8236 = 82701</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"A\", \"B\", \"C\"]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Because there are no valid solutions.</p>\r\n\r\n<h2>Input/Output</h2>\r\n<p><strong>[execution time limit]</strong> 0.5 seconds (cpp)</p>\r\n<p><strong>[memory limit]</strong> 1 GB</p>\r\n<p><strong>[input]</strong> array.string crypt</p>\r\n<p>Array of three non-empty strings containing only uppercase English letters.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= crypt[i].length &lt;= 25</code></li>\r\n</ul>\r\n\r\n<p><strong>[output]</strong> integer</p>\r\n<p>The number of valid solutions.</p>\r\n\r\n<pre><code class='language-javascript'>int solution(vector&lt;string&gt; crypt) {\r\n\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_8aug",
        "company_id": 400
    }
]