[
    {
        "id": 1329,
        "title": "Count Good Prefixes",
        "problem_statement": "```html\r\n<h1>Count Good Prefixes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a binary sequence of length <code>n</code> as a string, perform the following operation any number of times:</p>\r\n<ul>\r\n    <li>Append either a '0' or a '1' to the end of the sequence.</li>\r\n</ul>\r\n<p>A sequence is considered <strong>good</strong> if it is possible to make the total number of \"10\" subsequences in the updated sequence exactly equal to <code>k</code>.</p>\r\n<p>Your task is to count the total number of non-empty prefix sequences of the given binary sequence that are <strong>good</strong>.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>1. A subsequence is a subsequence if it can be obtained by deleting digits from the sequence, possibly none, without altering the relative order.</li>\r\n    <li>2. A non-empty prefix sequence is any sequence derived by deleting digits from the end of the given sequence, ensuring the length of the prefix is at least 1.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: sequence = \"100\", k = 1\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> We analyze all non-empty prefixes of \"100\":</p>\r\n<ul>\r\n    <li><strong>Prefix \"1\":</strong> It has 0 \"10\" subsequences and one '1'. We need to reach <code>k=1</code>. We can append a '0' to form \"10\", which has exactly one \"10\" subsequence. So, this prefix is good.</li>\r\n    <li><strong>Prefix \"10\":</strong> It has exactly 1 \"10\" subsequence. Since this matches <code>k=1</code>, we don't need to append anything. This prefix is good.</li>\r\n    <li><strong>Prefix \"100\":</strong> It has 2 \"10\" subsequences (at indices (0,1) and (0,2)). Since this is already greater than <code>k=1</code>, and appending characters can only increase or maintain the count of \"10\"s, it's impossible to reach exactly 1. This prefix is not good.</li>\r\n</ul>\r\n<p>The good prefixes are \"1\" and \"10\". Thus, the total count is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: sequence = \"101\", k = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> We analyze all non-empty prefixes of \"101\":</p>\r\n<ul>\r\n    <li><strong>Prefix \"1\":</strong> It has 0 \"10\"s and one '1'. We need to reach <code>k=2</code>. We can append \"00\" to form \"100\", which has two \"10\" subsequences. So, this prefix is good.</li>\r\n    <li><strong>Prefix \"10\":</strong> It has 1 \"10\" subsequence and one '1'. We need to add one more \"10\". We can append a '0' to form \"100\", which has two \"10\" subsequences in total. So, this prefix is good.</li>\r\n    <li><strong>Prefix \"101\":</strong> It has 1 \"10\" subsequence and two '1's. We need to add one more \"10\" to reach <code>k=2</code>. However, appending a '0' would add two new \"10\"s (one for each existing '1'), resulting in a total of 1 + 2 = 3. It's not possible to add exactly one \"10\". This prefix is not good.</li>\r\n</ul>\r\n<p>The good prefixes are \"1\" and \"10\". Thus, the total count is 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: sequence = \"11\", k = 1\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> We analyze all non-empty prefixes of \"11",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "citadel_3aug",
        "company_id": 462
    },
    {
        "id": 1330,
        "title": "Count Valid Prefix Sequences",
        "problem_statement": "```html\r\n<h1>Count Valid Prefix Sequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a binary sequence of length <code>n</code> as a string, you can perform the following operation any number of times:</p>\r\n<ul>\r\n    <li>Append either a '0' or a '1' to the end of the sequence.</li>\r\n</ul>\r\n<p>A sequence is considered <strong>valid</strong> if it is possible to make the total number of \"10\" subsequences in the updated sequence exactly equal to <code>k</code>.</p>\r\n<p>Your task is to count the total number of <strong>valid non-empty prefix sequences</strong> of the given binary sequence.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>A sequence is a <strong>subsequence</strong> if it can be obtained by deleting digits (possibly none) from the original sequence without altering the relative positions of the remaining digits.</li>\r\n    <li>A <strong>non-empty prefix sequence</strong> is any sequence derived by deleting digits from the end of the given sequence, ensuring the length of the prefix is at least 1.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: sequence = \"100\", k = 1\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The analysis of non-empty prefix sequences is as follows:</p>\r\n<ul>\r\n    <li>Prefix \"1\": It has 0 \"10\"s and one '1'. We need to reach k=1. We can append one '0' to get \"10\", which has exactly one \"10\" subsequence. So, \"1\" is a valid prefix.</li>\r\n    <li>Prefix \"10\": It already has one \"10\" subsequence. We can append nothing. So, \"10\" is a valid prefix.</li>\r\n    <li>Prefix \"100\": It has two \"10\" subsequences (from indices (0,1) and (0,2)). Since the current count (2) is already greater than k (1), and we can only add more \"10\" subsequences by appending '0's, it's impossible to reach exactly 1. So, \"100\" is not a valid prefix.</li>\r\n</ul>\r\n<p>There are 2 valid non-empty prefixes (\"1\" and \"10\").</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: sequence = \"101\", k = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> We analyze all non-empty prefixes of \"101\":</p>\r\n<ul>\r\n    <li>Prefix \"1\": It has 0 \"10\" subsequences and one '1'. We need to reach a total of k=2 \"10\"s. We can append two '0's. The number of \"10\"s becomes 2. So, \"1\" is a valid prefix.</li>\r\n    <li>Prefix \"10\": It has one \"10\" subsequence and one '1'. We need to reach k=2. We can append one '0'. The number of \"10\"s becomes 1 (original) + 1 (from original '1' and new '0') = 2. So, \"10\" is a valid prefix.</li>\r\n    <li>Prefix \"101\": It has one \"10\" subsequence and two '1's. We need to reach k=2. Appending <code>b</code> zeros would result in <code>1 + 2*b</code> \"10\"s. The equation <code>1 + 2*b = 2</code> has no integer solution for <code>b</code>. So, \"101\" is not a valid prefix.</li>\r\n</ul>\r\n<p>There are 2 valid non-empty prefixes (\"1\" and \"10\").</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code>, where <code>n</code> is the length of <code>sequence</code>.</li>\r\n    <li><code>0 &lt;= k &lt;= 10<sup>9</sup></code></li>\r\n    <li>The sequence consists only of digits '0' and '1'.</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "citadel_3aug",
        "company_id": 462
    },
    {
        "id": 1331,
        "title": "Minimum Processing Cost",
        "problem_statement": "```html\r\n<h1>Minimum Processing Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Devise a strategy to minimize the costs of processing <code>n</code> images, where each image requires specific filters applied for a defined time frame. The cost to apply the filter for the i-th image is <code>filterCost[i]</code>. Each image must be processed every day from <code>startDay[i]</code> to <code>endDay[i]</code> (inclusive).</p>\r\n<p>Additionally, there is an exclusive offer to apply all in-scope filters for a given day at a discounted rate of <code>discountPrice</code>. For any given day, you can either pay the sum of the costs for all filters active on that day, or you can pay the flat <code>discountPrice</code>, whichever is less.</p>\r\n<p>Your goal is to create an efficient image processing plan that adheres to time constraints and budget considerations, and return the minimum total cost modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, filterCost = [2, 3, 4], startDay = [1, 1, 2], endDay = [2, 3, 4], discountPrice = 6\r\nOutput: 21</code></pre>\r\n<p><strong>Explanation:</strong> We calculate the minimum cost for each day:</p>\r\n<ul>\r\n    <li><strong>Day 1:</strong> Images 1 (cost 2) and 2 (cost 3) are active. Sum of costs = 2 + 3 = 5. Daily cost = min(5, 6) = 5.</li>\r\n    <li><strong>Day 2:</strong> Images 1 (cost 2), 2 (cost 3), and 3 (cost 4) are active. Sum of costs = 2 + 3 + 4 = 9. Daily cost = min(9, 6) = 6.</li>\r\n    <li><strong>Day 3:</strong> Images 2 (cost 3) and 3 (cost 4) are active. Sum of costs = 3 + 4 = 7. Daily cost = min(7, 6) = 6.</li>\r\n    <li><strong>Day 4:</strong> Image 3 (cost 4) is active. Sum of costs = 4. Daily cost = min(4, 6) = 4.</li>\r\n</ul>\r\n<p>The total minimum cost is 5 + 6 + 6 + 4 = 21.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, filterCost = [4, 6, 10, 8], startDay = [1, 3, 5, 3], endDay = [2, 5, 8, 6], discountPrice = 12\r\nOutput: 76</code></pre>\r\n<p><strong>Explanation:</strong> We can group days with the same set of active images to calculate the cost:</p>\r\n<ul>\r\n    <li><strong>Days 1-2:</strong> Only image 1 (cost 4) is active. Daily cost = min(4, 12) = 4. Total for this period = 2 * 4 = 8.</li>\r\n    <li><strong>Days 3-4:</strong> Images 2 (cost 6) and 4 (cost 8) are active. Sum of costs = 6 + 8 = 14. Daily cost = min(14, 12) = 12. Total for this period = 2 * 12 = 24.</li>\r\n    <li><strong>Day 5:</strong> Images 2 (cost 6), 3 (cost 10), and 4 (cost 8) are active. Sum of costs = 6 + 10 + 8 = 24. Daily cost = min(24, 12) = 12. Total for this period = 1 * 12 = 12.</li>\r\n    <li><strong>Day 6:</strong> Images 3 (cost 10) and 4 (cost 8) are active. Sum of costs = 10 + 8 = 18. Daily cost = min(18, 12) = 12. Total for this period = 1 * 12 = 12.</li>\r\n    <li><strong>Days 7-8:</strong> Only image 3 (cost 10) is active. Daily cost = min(10, 12) = 10. Total for this period = 2 * 10 = 20.</li>\r\n</ul>\r\n<p>The total minimum cost is 8 + 24 + 12 + 12 + 20 = 76.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; filterCost[i], startDay[i], endDay[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>startDay[i] &le; endDay[i]</code></li>\r\n    <li><code>1 &le; discountPrice &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "citadel_3aug",
        "company_id": 462
    }
]