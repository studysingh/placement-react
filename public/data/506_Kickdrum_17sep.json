[
    {
        "id": 1440,
        "title": "Minimum Time to Alert All Employees",
        "problem_statement": "<h1>Minimum Time to Alert All Employees</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A company has <code>n</code> employees labeled <code>1..n</code>, organized in a tree-like hierarchy. Each employee may have direct reports, and exactly one person is at the top (the CEO, the root). You are given the company hierarchy as a binary tree:</p>\r\n<ul>\r\n    <li>Each Node represents an employee.</li>\r\n    <li><code>Node->data</code> is the employee ID.</li>\r\n    <li><code>Node->left</code> and <code>Node->right</code> represent their direct reports (if any).</li>\r\n</ul>\r\n<p>An urgent alert starts at a target employee. Every minute, any employee who knows the alert passes it to:</p>\r\n<ul>\r\n    <li>Their manager</li>\r\n    <li>Their direct reports</li>\r\n</ul>\r\n<p>Return the minimum number of minutes required for the alert to reach all employees.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The tree is given as standard input (level-order representation of the company hierarchy).</p>\r\n<p><code>target</code>: the employee ID where the alert begins.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Single integer: minutes needed for the alert to reach everyone.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li>Employees are labeled <code>1..n</code></li>\r\n    <li>The hierarchy is a valid tree</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: target = 5\r\nroot = [1, 2, 3, 4, 5, 6, 7]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The hierarchy is a complete binary tree with 7 employees. Alert starts at employee 5.</p>\r\n<ul>\r\n    <li>Minute 1 -> Employee 5 alerts its manager (2).</li>\r\n    <li>Minute 2 -> Employee 2 alerts its manager (1) and sibling (4).</li>\r\n    <li>Minute 3 -> Employee 1 alerts its other child (3).</li>\r\n    <li>Minute 4 -> Employees (6) and (7) learn the alert from 3.</li>\r\n</ul>\r\n<p>Now, all employees know -> total = 4 minutes.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: target = 10\r\nroot = [1, 2, 3, 4, 5, N, 7, 8, N, 10]\r\nOutput: 5</code></pre>\r\n\r\n<h2>Function Signature</h2>\r\n<p>You are provided with the following <code>Node</code> structure and function signature:</p>\r\n<pre><code class='language-cpp'>struct Node {\r\n    int data;\r\n    Node* left;\r\n    Node* right;\r\n    explicit Node(int v, Node* left_ptr = nullptr, Node* right_ptr = nullptr) : data(v), left(left_ptr), right(right_ptr) {}\r\n};\r\n\r\nint min_time_to_alert_all(Node* root, int target_val) {\r\n    // write your code here\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Kickdrum_17sep",
        "company_id": 506
    },
    {
        "id": 1441,
        "title": "People Aware of Feature",
        "problem_statement": "<h1>People Aware of Feature</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A new in-app feature launches on day 1 and one early adopter learns about it.</p>\r\n<p>A user who learns the feature on day <code>d</code> starts telling others from day (<code>d + delay</code>) and forgets (stops knowing and stops sharing) from day (<code>d + forgetAfter</code>).</p>\r\n<p>Every day, every user who is currently in their 'sharing window' tells exactly one new user (who learns that day).</p>\r\n<p>Given the number of days <code>n</code>, return how many users still know the feature on day <code>n</code>. Since the number can be large, return it modulo 1,000,000,007.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>Integer <code>n</code> - total days to simulate</li>\r\n    <li>Integer <code>delay</code> - days after learning when a user starts sharing</li>\r\n    <li>Integer <code>forgetAfter</code> - days after learning when a user forgets</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>Single integer: users who still know the feature on day <code>n</code> (mod 1e9+7)</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 1000</code></li>\r\n    <li><code>1 &lt;= shareDelay &lt; forgetAfter &lt;= n</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n=6, delay=2, forgetAfter=4\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Day 1: Suppose the first person is named A. (1 person)</li>\r\n    <li>Day 2: A is the only person who knows the secret. (1 person)</li>\r\n    <li>Day 3: A shares the secret with a new person, B. (2 people)</li>\r\n    <li>Day 4: A shares the secret with a new person, C. (3 people)</li>\r\n    <li>Day 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)</li>\r\n    <li>Day 6: B shares the secret with E, and C shares the secret with F. (5 people)</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n=4, delay=1, forgetAfter=3\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> Fast sharing and slower forgetting increase totals.</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\nusing namespace std;\r\n\r\nclass Solution {\r\npublic:\r\n    int peopleAwareOfFeature(int n, int delay, int forgetAfter) {\r\n        // Write your code here\r\n        int mod = 1e9+7;\r\n    }\r\n};\r\n\r\nint main() {\r\n    int n, delay, forgetAfter;\r\n    cin >> n >> delay >> forgetAfter;\r\n    Solution s;\r\n    int ans = s.peopleAwareOfFeature(n, delay, forgetAfter);\r\n    cout << ans << endl;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Kickdrum_17sep",
        "company_id": 506
    }
]