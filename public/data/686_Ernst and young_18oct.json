[
    {
        "id": 1939,
        "title": "Array Operations: Palindromic Binary Representation",
        "problem_statement": "<h1>Array Operations: Palindromic Binary Representation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An array containing N integers is given.</p>\r\n<p>Find the count of numbers in the array whose binary representation (without leading zeros) is a palindrome.</p>\r\n<p>In the provided code snippet, implement the provided <code>countOfBinaryPalindromes(...)</code> to find the count of numbers in the array whose binary representation (without leading zeros) is a palindrome. You can write your code in the space below the phrase \"WRITE YOUR LOGIC HERE\".</p>\r\n<p>There will be multiple test cases running, so the <strong>Input</strong> and <strong>Output</strong> should match exactly as provided.</p>\r\n<p>The basic output variable <code>result</code> is set to a default value of -404, which can be modified.</p>\r\n<p>Additionally, you can add or remove these output variables.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains a single integer N, denoting the number of elements in the array.</p>\r\n<p>The second line contains N space-separated integers, denoting the array elements.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1 2 3 4 5</code></pre>\r\n<p><strong>Explanation:</strong> N is 5. The array elements are 1, 2, 3, 4, 5. The sample output is not provided.</p>\r\n\r\n<h2>Code Snippet</h2>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nint countOfBinaryPalindromes(int N, int A[]){\r\n    // this is default OUTPUT. You can change it.\r\n    int result = -404;\r\n\r\n    //write your logic here:\r\n    for(int i=0;i&lt;N;i++)\r\n    {\r\n\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nint main(){\r\n    //INPUT [uncomment & modify if required]\r\n    int N;\r\n    cin >> N;\r\n    int A[N];\r\n    for(int i=0;i&lt;N;i++)\r\n    {\r\n        cin>>A[i];\r\n    }\r\n    // Call the function and print the result if needed\r\n    // cout &lt;&lt; countOfBinaryPalindromes(N, A) &lt;&lt; endl;\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Ernst and young_18oct",
        "company_id": 686
    },
    {
        "id": 1940,
        "title": "Panel Changes",
        "problem_statement": "<h1>Panel Changes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the provided code snippet, implement the provided <code>panelChanges(...)</code> method using the variables to print the output. You can write your code in the space that follows the phrase 'WRITE YOUR LOGIC HERE'.</p>\r\n<p>There will be multiple test cases running, so the Input and Output should match exactly as provided.</p>\r\n<p>The base output variable <code>K</code> is set to a default value of -404, which can be modified. Additionally, you can add or remove these output variables.</p>\r\n<pre><code class='language-javascript'>#include &lt;stdio.h&gt;\r\nint PanelChanges(int N)\r\n{\r\n    //this is default OUTPUT. You can change it.\r\n    int K = -404;\r\n\r\n    //write your Logic here:\r\n\r\n\r\n    return K;\r\n}\r\n\r\nint main(void)\r\n{\r\n    //INPUT [uncomment &amp; modify if required]\r\n    int N;\r\n    scanf(\"%d\", &amp;N);\r\n\r\n    //OUTPUT [uncomment &amp; modify if required]\r\n    printf(\"%d\",PanelChanges(N));\r\n    return 0;\r\n}</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer N denoting the final number on the panel.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains an integer K, denoting the number of panel changes.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 10\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong> To display 10 on a panel, there will be 11 panel changes, 00 -> 01 -> 02 -> 03 -> 04 -> 05 -> 06 -> 07 -> 08 -> 09 -> 10. Hence, 11 changes can be observed.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Ernst and young_18oct",
        "company_id": 686
    }
]