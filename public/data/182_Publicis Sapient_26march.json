[
    {
        "id": 546,
        "title": "Find the substring having a maximal textScore",
        "problem_statement": "<h1>Find the substring having a maximal textScore</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given three strings: <code>text</code>, <code>prefixString</code>, and <code>suffixString</code>.</p>\r\n<p>You need to find a non-empty substring of <code>text</code> that has the maximal <code>textScore</code>. If multiple substrings have the same maximal <code>textScore</code>, return the lexicographically smallest one.</p>\r\n<p>The <code>textScore</code> for a substring is calculated as follows:</p>\r\n<ul>\r\n<li><code>prefixScore</code>: The length of the longest string <code>P</code> such that <code>P</code> is a suffix of <code>prefixString</code> and <code>P</code> is a prefix of the current substring of <code>text</code> being evaluated.</li>\r\n<li><code>suffixScore</code>: The length of the longest string <code>S</code> such that <code>S</code> is a prefix of <code>suffixString</code> and <code>S</code> is a suffix of the current substring of <code>text</code> being evaluated.</li>\r\n<li><code>textScore = prefixScore + suffixScore</code>.</li>\r\n</ul>\r\n<p>For example, if <code>text = \"engine\"</code>, <code>prefixString = \"raven\"</code>, and <code>suffixString = \"ginkgo\"</code>:</p>\r\n<ul>\r\n<li>For the string \"engine\":\r\n    <ul>\r\n        <li>\"en\" is a suffix of \"raven\" and a prefix of \"engine\", so <code>prefixScore = 2</code>.</li>\r\n        <li>\"eng\" is a prefix of \"ginkgo\" and a suffix of \"engine\", so <code>suffixScore = 3</code>.</li>\r\n        <li><code>textScore = 2 + 3 = 5</code>.</li>\r\n    </ul>\r\n</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>calculateScore</code> in the editor below. The function must return a string that denotes the non-empty substring of <code>text</code> having a maximal <code>textScore</code>. If there are multiple such substrings, choose the lexicographically smallest substring.</p>\r\n<p><code>calculateScore</code> has the following parameter(s):</p>\r\n<ul>\r\n<li><code>text</code>: a string</li>\r\n<li><code>prefixString</code>: a string</li>\r\n<li><code>suffixString</code>: a string</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nnothing\r\nbruno\r\ningenious\r\nOutput:\r\nnothing</code></pre>\r\n<p><strong>Explanation:</strong>\r\nConsider the substring \"nothing\" from <code>text</code>.</p>\r\n<ul>\r\n<li>\"no\" is a suffix of \"bruno\" and a prefix of \"nothing\", so <code>prefixScore = 2</code>.</li>\r\n<li>\"ing\" is a prefix of \"ingenious\" and a suffix of \"nothing\", so <code>suffixScore = 3</code>.</li>\r\n<li><code>textScore = prefixScore + suffixScore = 2 + 3 = 5</code>.</li>\r\n</ul>\r\n<p>The substring \"nothing\" has the highest <code>textScore</code> of 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nab\r\nb\r\na\r\nOutput:\r\na</code></pre>\r\n<p><strong>Explanation:</strong>\r\nGiven <code>text = \"ab\"</code>, our possible non-empty substrings are \"a\", \"b\", and \"ab\".</p>\r\n<ul>\r\n<li>For <code>sub = \"a\"</code>:\r\n    <ul>\r\n        <li><code>prefixString = \"b\"</code>: The beginning of \"a\" (\"a\") doesn't match any suffix of \"b\", so <code>prefixScore = 0</code>.</li>\r\n        <li><code>suffixString = \"a\"</code>: The last character of \"a\" (\"a\") matches the first character of \"a\", so <code>suffixScore = 1</code>.</li>\r\n        <li><code>textScore = prefixScore + suffixScore = 0 + 1 = 1</code>.</li>\r\n    </ul>\r\n</li>\r\n<li>For <code>sub = \"b\"</code>:\r\n    <ul>\r\n        <li><code>prefixString = \"b\"</code>: The first character of \"b\" (\"b\") matches the last character of \"b\", so <code>prefixScore = 1</code>.</li>\r\n        <li><code>suffixString = \"a\"</code>: The end of \"b\" (\"b\") doesn't match any prefix of \"a\", so <code>suffixScore = 0</code>.</li>\r\n        <li><code>textScore = prefixScore + suffixScore = 1 + 0 = 1</code>.</li>\r\n    </ul>\r\n</li>\r\n<li>For <code>sub = \"ab\"</code>:\r\n    <ul>\r\n        <li><code>prefixString = \"b\"</code>: The beginning of \"ab\" (\"a\") doesn't match any suffix of \"b\", so <code>prefixScore = 0</code>.</li>\r\n        <li><code>suffixString = \"a\"</code>: The last character of \"ab\" (\"b\") doesn't match any prefix of \"a\", so <code>suffixScore = 0</code>.</li>\r\n        <li><code>textScore = prefixScore + suffixScore = 0 + 0 = 0</code>.</li>\r\n    </ul>\r\n</li>\r\n</ul>\r\n<p>Two substrings (\"a\" and \"b\") have a maximal <code>textScore</code> of 1. Between \"a\" and \"b\", \"a\" is lexicographically smaller, so we return \"a\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>text</code>, <code>prefixString</code>, and <code>suffixString</code> contain lowercase English alphabetic letters (`a-z`) only.</li>\r\n<li><code>1 <= |text|, |prefixString|, |suffixString| <= 50</code>.</li>\r\n<li>It is guaranteed that there will always be a substring of <code>text</code> that matches at least one of the following:\r\n    <ul>\r\n        <li>One or more characters at the end of <code>prefixString</code>.</li>\r\n        <li>One or more characters at the beginning of <code>suffixString</code>.</li>\r\n    </ul>\r\n</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>Input from stdin will be processed as follows and passed to the function:</p>\r\n<ol>\r\n<li>The first line contains a string <code>text</code>.</li>\r\n<li>The second line contains a string <code>prefixString</code>.</li>\r\n<li>The third line contains a string <code>suffixString</code>.</li>\r\n</ol>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Publicis Sapient_26march",
        "company_id": 182
    },
    {
        "id": 547,
        "title": "Moves to Segregate Even and Odd",
        "problem_statement": "<h1>Moves to Segregate Even and Odd</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In an array, we can swap the elements at any two indices in a single operation called a move. For example, if our array is <code>a = [17, 4, 8]</code>, we can swap <code>a[0] = 17</code> and <code>a[2] = 8</code> to get <code>a = [8, 4, 17]</code> in a single move.</p>\r\n<p>We want to custom-sort an array such that all of the even elements are at the beginning of the array and all of the odd elements are at the end of the array.</p>\r\n<p>For example, if our array is <code>[6, 3, 4, 5]</code>, then the following four arrays are valid custom-sorted arrays:</p>\r\n<ul>\r\n    <li><code>a = [6, 4, 3, 5]</code></li>\r\n    <li><code>a = [4, 6, 3, 5]</code></li>\r\n    <li><code>a = [6, 4, 5, 3]</code></li>\r\n    <li><code>a = [4, 6, 5, 3]</code></li>\r\n</ul>\r\n<p>Complete the function <code>moves</code> in the editor below. The function must return the minimum number of moves it takes to sort an array of integers with all even elements at earlier indexes than any odd element.</p>\r\n<p>The function <code>moves</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>a[0]...a[n-1]</code>: an array of positive integers</li>\r\n</ul>\r\n<p><strong>Note:</strong> The order of the elements within even or odd does not matter.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n13\r\n10\r\n21\r\n20\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>a = [13, 10, 21, 20]</code>, we can swap <code>a[0]</code> and <code>a[3]</code> to get the custom-sorted array <code>a = [20, 10, 21, 13]</code> in 1 move.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n8\r\n5\r\n11\r\n4\r\n6\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> We can perform the following moves on our initial array, <code>a = [8, 5, 11, 4, 6]</code>:</p>\r\n<ol>\r\n    <li>Swap <code>a[1]</code> and <code>a[3]</code> to get the array <code>a = [8, 4, 11, 5, 6]</code>.</li>\r\n    <li>Swap <code>a[2]</code> and <code>a[4]</code> to get the array <code>a = [8, 4, 6, 5, 11]</code>.</li>\r\n</ol>\r\n<p>It took two moves to get a valid custom-sorted array. As this value is minimal, the function returns 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= n <= 10^5</code></li>\r\n    <li><code>1 <= a[i] <= 10^9</code>, where <code>0 <= i < n</code>.</li>\r\n    <li>It is guaranteed that array <code>a</code> contains at least one even and one odd element.</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>Input from stdin will be processed as follows and passed to the function.</p>\r\n<p>The first line contains an integer <code>n</code>, the number of elements in array <code>a</code>.</p>\r\n<p>The next <code>n</code> lines each contain an integer describing <code>a[i]</code> where <code>0 <= i < n</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Publicis Sapient_26march",
        "company_id": 182
    }
]