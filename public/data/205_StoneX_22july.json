[
    {
        "id": 622,
        "title": "Prime Jumps",
        "problem_statement": "<h1>Prime Jumps</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A game is played with the following rules:</p>\r\n<ul>\r\n    <li>A player starts at Cell 0 with a score of 0.</li>\r\n    <li>There is a row of n cells numbered from 0 to n-1.</li>\r\n    <li>Each cell has an assigned value, and cell 0 always has a value of 0.</li>\r\n    <li>In each move, the player can either:\r\n        <ul>\r\n            <li>Move one cell to the right, or</li>\r\n            <li>Move p cells to the right, where p is a prime number ending in 3 (such as 3 or 13).</li>\r\n        </ul>\r\n    </li>\r\n    <li>The player cannot move beyond the last cell.</li>\r\n    <li>When the player lands on a cell, its value is added to the score. The game concludes when the player lands on the final cell, n-1.</li>\r\n</ul>\r\n<p>Determine the maximum possible score.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: cell = [0, -10, -20, -30, 60]\r\nOutput: 40</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>There are n = 5 cells in the array, with cells numbered from 0 to 4.</p>\r\n<p>The player starts at cell 0 and can reach cells 1 and 3.</p>\r\n<ul>\r\n    <li>The player can always move 1 cell right until reaching cell n-1.</li>\r\n    <li>3 is a prime number with the least significant digit of 3.</li>\r\n</ul>\r\n<p>There are three ways to reach cell 4:</p>\r\n<ol>\r\n    <li>Jump 3 then 1, sum[-30, 60] = 20</li>\r\n    <li>Jump 1 then 3, sum[-10, 50] = 40</li>\r\n    <li>Jump 1 always, sum[-10, -20, -30, 60] = -10</li>\r\n</ol>\r\n<p>The best score possible is 40.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n0\r\n-100\r\n-10\r\n-1\r\n-1\r\n-1\r\nOutput:\r\n-2</code></pre>\r\n<p><strong>Explanation:</strong> The best approach is to jump 3, then 1 and 1. The sum is sum[0, -1, -1] = -2</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>maxGameScore</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int cell[n]</code>: the cell values</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum possible score</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^4</code></li>\r\n    <li><code>-10^4 <= cell[i] <= 10^4</code></li>\r\n    <li><code>cell[0] = 0</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "StoneX_22july",
        "company_id": 205
    },
    {
        "id": 624,
        "title": "Minimum Difference Spanning Tree",
        "problem_statement": "<h1>Minimum Difference Spanning Tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a given weighted undirected graph of <code>g_nodes</code> nodes numbered from 1 to <code>g_nodes</code>. There are <code>g_edges</code> edges where the <code>i</code>-th edge connects nodes <code>g_from[i]</code> and <code>g_to[i]</code> with a weight <code>g_weight[i]</code>. A spanning tree is defined as a graph obtained after deleting some edges from the original graph such that all nodes are connected by exactly <code>g_nodes - 1</code> edges.</p>\r\n<p>Find a spanning tree of the graph such that the difference between the maximum and minimum weights of the tree is the minimum possible. Report this minimum possible difference as the answer or -1 if no spanning tree exists in the graph.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMinDifference</code> in the editor below. The function must return a minimum difference between the maximal and the minimal edge weight or -1 if no Spanning Tree exists.</p>\r\n<p><code>getMinDifference</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int g_nodes</code>: the number of nodes</li>\r\n    <li><code>int edges_from[g_edges - 1]</code>: one end of each edge</li>\r\n    <li><code>int edges_to[g_edges - 1]</code>: the other end of each edge</li>\r\n    <li><code>int edges_weight[g_edges - 1]</code>: the weights of each edge</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Conceptual Example:</h3>\r\n<p>Suppose <code>g_nodes = 4</code>, <code>g_edges = 3</code>, <code>g_from = [1, 2, 3]</code>, <code>g_to = [2, 3, 4]</code>, <code>g_weight = [-1, 2, 5, 3]</code>.</p>\r\n<p>By removing the edge 3-4 with the weight 5, we will obtain a spanning tree with weights equal to [-1, 2, 3]. Therefore, the difference between maximum and minimum weights of the edges is 3 - (-1) = 4. Hence, 4 is the answer. It can be shown that the answer cannot be less than this.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n1 2 3\r\n2 3 1\r\n5 4 3\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the spanning tree formed by the 2nd and the 3rd edge would give the minimum difference between the edges and it can be shown that no other possible combination would give the better answer. Hence the answer is (4 - 3 = 1).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 5\r\n1 1 3 3 4\r\n2 3 2 4 2\r\n1 2 1 2 2\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the spanning tree formed by the 2nd and the 4th and the 5th would give the minimum difference between the edges and it can be shown that no other possible combination would give the better answer. Hence the answer is (2 - 2 = 0).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; g_nodes &le; 1500</code></li>\r\n    <li><code>0 &le; g_edges &le; 2500</code></li>\r\n    <li><code>1 &le; g_from[i], g_to[i] &le; g_nodes</code></li>\r\n    <li><code>-1000 &le; g_weight[i] &le; 1000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "StoneX_22july",
        "company_id": 205
    },
    {
        "id": 647,
        "title": "SQL: Smart Home Application Multi-tariff Electricity Metering",
        "problem_statement": "<h1>SQL: Smart Home Application Multi-tariff Electricity Metering</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As part of a smart home application, create a query that, based on data from meter readings, calculates the total electricity consumption and the total cost for invoicing.</p>\r\n<p>The system has three general tariffs with a fixed consumption range, one of which is applied as soon as the total consumption falls within the specified tariff range.</p>\r\n<p>The result should have the following columns:</p>\r\n<ul>\r\n    <li><strong>username</strong> - account username</li>\r\n    <li><strong>consumption</strong> - total consumption amount</li>\r\n    <li><strong>A(0-200)</strong> - the total cost of all consumed electricity, if the tariff plan \"A\" is applied, rounded to two decimal places</li>\r\n    <li><strong>B(201-499)</strong> - the total cost of all consumed electricity, if the tariff plan \"B\" is applied, rounded to two decimal places</li>\r\n    <li><strong>C(500+)</strong> - the total cost of all consumed electricity, if the tariff plan \"C\" is applied, rounded to two decimal places</li>\r\n</ul>\r\n\r\n<h2>Database Schema</h2>\r\n<p>You are provided with the following tables:</p>\r\n\r\n<h3>Table: <code>accounts</code></h3>\r\n<pre><code class='language-text'>+----------+--------------+\r\n| Column   | Type         |\r\n+----------+--------------+\r\n| id       | INT          |\r\n| username | VARCHAR(255) |\r\n+----------+--------------+\r\nPRIMARY KEY (id)</code></pre>\r\n\r\n<h3>Table: <code>tariffs</code></h3>\r\n<pre><code class='language-text'>+-------------------+---------------------------+\r\n| Column            | Type                      |\r\n+-------------------+---------------------------+\r\n| name              | ENUM('A','B','C')         |\r\n| consumption_range | ENUM('0-200','201-499','500-') |\r\n| cost              | DECIMAL(4,3)              |\r\n+-------------------+---------------------------+</code></pre>\r\n\r\n<h3>Table: <code>readings</code></h3>\r\n<pre><code class='language-text'>+------------+----------+\r\n| Column     | Type     |\r\n+------------+----------+\r\n| account_id | INT      |\r\n| amount     | SMALLINT |\r\n+------------+----------+\r\nFOREIGN KEY (account_id) REFERENCES accounts.id</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<h4>Sample Data Tables:</h4>\r\n<p><strong>Table: <code>accounts</code></strong></p>\r\n<pre><code class='language-text'>+----+------------+\r\n| id | username   |\r\n+----+------------+\r\n| 1  | hgrendono  |\r\n| 2  | eisacsson1 |\r\n| 3  | dbosket2   |\r\n+----+------------+</code></pre>\r\n\r\n<p><strong>Table: <code>tariffs</code></strong></p>\r\n<pre><code class='language-text'>+------+-------------------+-------+\r\n| name | consumption_range | cost  |\r\n+------+-------------------+-------+\r\n| A    | 0-200             | 0.100 |\r\n| B    | 201-499           | 0.200 |\r\n| C    | 500-              | 0.500 |\r\n+------+-------------------+-------+</code></pre>\r\n\r\n<p><strong>Table: <code>readings</code></strong></p>\r\n<pre><code class='language-text'>+------------+--------+\r\n| account_id | amount |\r\n+------------+--------+\r\n| 1          | 42     |\r\n| 1          | 59     |\r\n| 2          | 28     |\r\n| 2          | 32     |\r\n| 3          | 41     |\r\n| 3          | 47     |\r\n| 3          | 19     |\r\n| 3          | 21     |\r\n| 3          | 25     |\r\n| 3          | 46     |\r\n| 3          | 59     |\r\n| 3          | 67     |\r\n| 3          | 90     |\r\n+------------+--------+</code></pre>\r\n\r\n<h4>Expected Output:</h4>\r\n<pre><code class='language-text'>+------------+-------------+----------+------------+---------+\r\n| username   | consumption | A(0-200) | B(201-499) | C(500+) |\r\n+------------+-------------+----------+------------+---------+\r\n| dbosket2   | 333         | NULL     | 66.60      | NULL    |\r\n| eisacsson1 | 60          | 6.00     | NULL       | NULL    |\r\n| hgrendono  | 101         | 10.10    | NULL       | NULL    |\r\n+------------+-------------+----------+------------+---------+</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "StoneX_22july",
        "company_id": 205
    },
    {
        "id": 648,
        "title": "SQL: MMORPG Game Character Outfit Advisor",
        "problem_statement": "<h1>SQL: MMORPG Game Character Outfit Advisor</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An MMORPG game is under development. For the profile and Inventory mechanics, it needs a query that advises the best quality items available in the Inventory.</p>\r\n<p>Item quality is represented by three ranks (from lowest to highest): 'common', 'rare', and 'epic'.</p>\r\n<p>The result should have the following columns: username / type / advised_quality / advised_name.</p>\r\n<ul>\r\n    <li>`username` - account username</li>\r\n    <li>`type` - item type</li>\r\n    <li>`advised_quality` - advised item quality (\"common\", \"rare\" or \"epic\")</li>\r\n    <li>`advised_name` - list of advised items records:\r\n        <ul>\r\n            <li>A record is the name of the item.</li>\r\n            <li>Records are separated by a comma.</li>\r\n            <li>Records are sorted in ascending order by name.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The result should be sorted in ascending order by username, then in ascending order by type.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Accounts may not have items of a specific type at all.</li>\r\n    <li>More than one item of the same type may be advised, as long as they are of the same quality.</li>\r\n</ul>\r\n\r\n<h2>Schema</h2>\r\n<pre><code class='language-text'>accounts table:\r\n+----------+---------------+--------------+---------------+\r\n| name     | type          | constraint   | description   |\r\n+----------+---------------+--------------+---------------+\r\n| id       | INT           | PRIMARY KEY  | Account ID    |\r\n| username | VARCHAR(255)  |              | Account username|\r\n+----------+---------------+--------------+---------------+\r\n\r\nitems table:\r\n+----------+-----------------------------+--------------+---------------+\r\n| name     | type                        | constraint   | description   |\r\n+----------+-----------------------------+--------------+---------------+\r\n| id       | INT                         | PRIMARY KEY  | Item ID       |\r\n| type     | ENUM('sword','shield','armor')|              | Item type     |\r\n| name     | VARCHAR(255)                |              | Item name     |\r\n+----------+-----------------------------+--------------+---------------+\r\n\r\naccounts_items table:\r\n+------------+-----------------------------------+--------------+---------------+\r\n| name       | type                              | constraint   | description   |\r\n+------------+-----------------------------------+--------------+---------------+\r\n| account_id | INT                               | FOREIGN KEY (account_id => accounts.id)| Account ID    |\r\n| item_id    | INT                               | FOREIGN KEY (item_id => items.id)| Item ID       |\r\n| quality    | ENUM('common','rare','epic')      |              | Item quality  |\r\n+------------+-----------------------------------+--------------+---------------+</code></pre>\r\n\r\n<h2>Sample Data Tables</h2>\r\n<pre><code class='language-text'>accounts:\r\n+----+--------------+\r\n| id | username     |\r\n+----+--------------+\r\n| 1  | sdavidoviciO |\r\n| 2  | rcarleton1   |\r\n+----+--------------+\r\n\r\nitems:\r\n+----+--------+------------------------+\r\n| id | type   | name                   |\r\n+----+--------+------------------------+\r\n| 1  | shield | Shield of Fagaceae     |\r\n| 2  | sword  | Sword of Loasaceae     |\r\n| 3  | sword  | Sword of Arthoniaceae  |\r\n| 4  | sword  | Sword of Hydrophyllaceae|\r\n| 5  | sword  | Sword of Solanaceae    |\r\n| 6  | sword  | Sword of Cactaceae     |\r\n| 7  | armor  | Armor of Ericaceae     |\r\n| 8  | shield | Shield of Rosaceae     |\r\n| 9  | sword  | Sword of Fagaceae      |\r\n| 10 | armor  | Armor of Asteraceae    |\r\n+----+--------+------------------------+\r\n\r\naccounts_items:\r\n+------------+---------+---------+\r\n| account_id | item_id | quality |\r\n+------------+---------+---------+\r\n| 1          | 10      | epic    |\r\n| 1          | 2       | rare    |\r\n| 1          | 7       | rare    |\r\n| 1          | 1       | common  |\r\n| 1          | 2       | common  |\r\n| 1          | 3       | common  |\r\n| 1          | 5       | common  |\r\n| 1          | 8       | common  |\r\n| 1          | 9       | common  |\r\n| 2          | 8       | epic    |\r\n| 2          | 5       | rare    |\r\n| 2          | 3       | common  |\r\n| 2          | 5       | common  |\r\n| 2          | 3       | common  |\r\n+------------+---------+---------+</code></pre>\r\n\r\n<h2>Expected Output</h2>\r\n<pre><code class='language-text'>username | type   | advised_quality | advised_name\r\n---------|--------|-----------------|--------------------------------------\r\ncmunns1  | shield | epic            | Shield of Rosaceae\r\ncmunns1  | sword  | rare            | Sword of Solanaceae\r\nywrcs0   | armor  | epic            | Armor of Asteraceae\r\nywrcs0   | shield | common          | Shield of Fagaceae,Shield of Rosaceae\r\nywrcs0   | sword  | rare            | Sword of Loasaceae</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "StoneX_22july",
        "company_id": 205
    }
]