[
    {
        "id": 101,
        "title": "Range Group Distribution",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Question 1</h1>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>A list of ranges contains the start and end values continuous ranges of integers. For example, [1, 4] denotes all integers in the range 1 to 4, or [1, 2, 3, 4]. Divide the ranges into 2 groups such that any 2 ranges that have at least one common integer belong to the same group.</p>\n        <p>Given the list of ranges, find the number of ways to distribute these ranges into 2 groups that satisfy the constraint and each group has at least one range. Since the answer can be large, compute it modulo (10<sup>9</sup>+7).</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function distributeRanges in the editor below.</p>\n        <p>distributeRanges has the following parameter:</p>\n        <ul>\n            <li><code>List&lt;List&lt;Integer&gt;&gt; ranges</code>: the ranges</li>\n        </ul>\n    </div>\n\n<div class=\\\"returns\\\">\n        <h3>Returns</h3>\n        <p><code>int</code>: the number of ways to distribute the ranges into 2 groups, modulo (10<sup>9</sup>+7)</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>0 ≤ ranges[i][j] ≤ 10<sup>9</sup>, where 0 ≤ i < n, j = 0, 1</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <p>Consider ranges = [[1, 5], [3, 8], [10, 15], [13, 14], [20, 100]].</p>\n\n<div class=\\\"example-explanation\\\">\n            <ul>\n                <li>[1, 5] and [3, 8] must belong to the same group since they have common integers 3, 4 and 5.</li>\n                <li>[10, 15] and [13, 14] must belong to the same group since they have common integers 13 and 14.</li>\n                <li>All other ranges can be distributed independently since they do not overlap.</li>\n            </ul>\n        </div>\n\n<div class=\\\"groupings\\\">\n            <h4>The 6 possible groupings</h4>\n            <table>\n                <tr>\n                    <th>Group 1</th>\n                    <th>Group 2</th>\n                </tr>\n                <tr>\n                    <td>[1, 5], [3, 8]</td>\n                    <td>[10, 15], [13, 14], [20, 100]</td>\n                </tr>\n                <tr>\n                    <td>[10, 15], [13, 14], [20, 100]</td>\n                    <td>[1, 5], [3, 8]</td>\n                </tr>\n                <tr>\n                    <td>[10, 15], [13, 14]</td>\n                    <td>[1, 5], [3, 8], [20, 100]</td>\n                </tr>\n                <tr>\n                    <td>[1, 5], [3, 8], [20, 100]</td>\n                    <td>[10, 15], [13, 14]</td>\n                </tr>\n                <tr>\n                    <td>[10, 15], [3, 8], [13, 14], [1, 5]</td>\n                    <td>[20, 100]</td>\n                </tr>\n                <tr>\n                    <td>[20, 100]</td>\n                    <td>[10, 15], [3, 8], [13, 14], [1, 5]</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"language-java\\\">\npublic static int distributeRanges(List&lt;List&lt;Integer&gt;&gt; ranges) {\n    // Write your code here\n}\n        </pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1deQ0UW5YS_uM8VjuDIt4KEbyGNXzd67vVIFSyaFYbMY/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 102,
        "title": "Remove Greater Nodes",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Question 2</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Given a singly linked list and an integer, x, remove nodes greater than x.</p>\n\n<h3>Function Description</h3>\n        <p>Complete the function <code>removeNodes</code> in the editor below. The function must return a reference to the root node of the final list.</p>\n\n<h4>Parameters:</h4>\n        <ul>\n            <li><code>node listHead</code>: a reference to the root node of the singly-linked list</li>\n            <li><code>int x</code>: the maximum value to be included in the returned singly-linked list</li>\n        </ul>\n\n<h4>Returns:</h4>\n        <ul>\n            <li><code>node</code>: a reference to the root node of the final list</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ SinglyLinkedListNode values ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">List = 100 → 105 → 50\nx = 100</pre>\n            <pre class=\\\"output\\\">List becomes 100 → 50</pre>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"code-block java\\\">\nclass Result {\n    /*\n     * Complete the \\'removeNodes\\' function below.\n     * The function is expected to return an INTEGER_SINGLY_LINKED_LIST.\n     * The function accepts following parameters:\n     * 1. INTEGER_SINGLY_LINKED_LIST listHead\n     * 2. INTEGER x\n     */\n\n/*\n     * For your reference:\n     * SinglyLinkedListNode {\n     *     int data;\n     *     SinglyLinkedListNode next;\n     * }\n     */\n\npublic static SinglyLinkedListNode removeNodes(SinglyLinkedListNode listHead, int x) {\n        // Write your code here\n    }\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1HvWvBIvfmcVh5mJWWefrS-irsnKof13TBKSaSp-O9TQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 103,
        "title": "Minimum Character Substitution",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Minimum Character Substitution</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>For each word in a list of words, if any two adjacent characters are equal, change one of them. Determine the minimum number of substitutions so the final string contains no adjacent equal characters.</p>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <pre><code class=\\\"cpp\\\">vector&lt;int&gt; minimalOperations(vector&lt;string&gt; words)</code></pre>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>words = [\\'add\\', \\'boook\\', \\'break\\']</p>\n            <ol>\n                <li>\\'add\\': change one d (1 change)</li>\n                <li>\\'boook\\': change the middle o (1 change)</li>\n                <li>\\'break\\': no changes are necessary (0 changes)</li>\n            </ol>\n            <p>The return array is [1,1,0].</p>\n        </div>\n    </div>\n\n<div class=\\\"function-details\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function minimalOperations in the editor below.</p>\n\n<h4>Parameters</h4>\n        <ul>\n            <li>string words[n]: an array of strings</li>\n        </ul>\n\n<h4>Returns</h4>\n        <ul>\n            <li>int[n]: each element i is the minimum substitutions for words[i]</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 100</li>\n            <li>2 ≤ length of words[i] ≤ 10<sup>5</sup></li>\n            <li>Each character of words[i] is in the range ascii[a-z]</li>\n        </ul>\n    </div>\n\n<div class=\\\"sample-cases\\\">\n        <h3>Sample Case 0</h3>\n        <div class=\\\"sample-case\\\">\n            <h4>Sample Input 0</h4>\n            <pre class=\\\"input\\\">5\nab\naab\nabb\nabab\nabaaba</pre>\n\n<h4>Sample Output 0</h4>\n            <pre class=\\\"output\\\">0\n1\n1\n0\n1</pre>\n\n<div class=\\\"explanation\\\">\n                <h4>Explanation 0</h4>\n                <ul>\n                    <li>words = \\'ab\\' is already acceptable, so 0 replacements are needed.</li>\n                    <li>words = \\'aab\\' Replace an \\'a\\' with an appropriate character so 1 replacement.</li>\n                    <li>words = \\'abb\\' is not acceptable. Replace a \\'b\\' with an appropriate character, again 1 replacement.</li>\n                    <li>words = \\'abab\\' is already acceptable so 0 replacements are needed.</li>\n                    <li>words = \\'abaaba\\' is not acceptable. Replace the appropriate character for 1 replacement.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1jiKnbySz39c5rTSqjnJI-hXhBCXqMsConKa2RTpDAUg/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 104,
        "title": "Tool Changer",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Tool Changer</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>A milling machine in a manufacturing facility has a tool change system. The tool changer holds n tools and some duplicate tools may be included. The operator must move through the tools one at a time, either left or right. The tool changer is circular, so when the last tool in the tools array is reached in either direction, the next tool is at the other end of the array.</p>\n        <p>Given the name of the next tool needed, determine the minimum number of left/right moves to reach it.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>toolchanger</code> with the following parameters:</p>\n        <ul>\n            <li><code>tools</code>: an array of tool names arranged in the order they appear in the tool changer</li>\n            <li><code>startIndex</code>: index of the tool currently in use</li>\n            <li><code>target</code>: name of the tool needed</li>\n        </ul>\n        <p>Returns: INTEGER - the minimum number of moves required</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 100</li>\n            <li>0 ≤ startIndex ≤ n-1</li>\n            <li>1 ≤ lengths of tools[i] and target ≤ 100</li>\n            <li>target is in tools</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\ntools = [\\'ballendmill\\', \\'facemill\\', \\'keycutter\\', \\'slotdrill\\']\nstartIndex = 1\ntarget = \\'slotdrill\\'</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>The tool in use is tools[startIndex] = tools[1] = \\'facemill\\'. Move right or left 2 times to reach target = tools[3] = \\'slotdrill\\'.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Function Template</h3>\n        <pre class=\\\"code\\\">public static int toolchanger(List&lt;String&gt; tools, int startIndex, String target) {\n    // Write your code here\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1CmQRJvkqO-Cys4tR4lyXXe70FV8hM_KvPnkk-sM8ntA/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 105,
        "title": "Max Beauty ",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Max Beauty </h1>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>For an array of integers, <code>arr[n]</code>, its prefix sum array, <code>psum[n]</code>, is constructed as <code>psum[i] = sum(arr[0]...arr[i])</code> where <code>0≤ i < n</code>.</p>\n\n<p>The beauty of <code>psum[n]</code> is <code>psum[0] - psum[1] + psum[2] - psum[3] + ... (-1)<sup>n-1</sup>psum[n-1]</code>.</p>\n\n<div class=\\\"note\\\">\n            <p><strong>Note:</strong> <code>(-1)<sup>n-1</sup>psum[n-1]</code> indicates the last element may be added or subtracted, depending on the parity of n-1.</p>\n        </div>\n\n<p>If <code>arr</code> can be rearranged arbitrarily, find the maximum possible value of the beauty of <code>psum[n]</code>.</p>\n    </div>\n\n<div class=\\\"example\\\">\n        <h3>Example</h3>\n        <p><code>n = 5</code><br>\n        <code>arr = [3, 4, 5, 1, 1]</code></p>\n\n<p>The optimal arrangement of <code>arr</code> is [3, 1, 5, 1, 4].<br>\n        <code>psum = [3, 4, 9, 10, 14]</code><br>\n        The beauty of <code>psum</code> is 3 - 4 + 9 - 10 + 14 = 12.</p>\n\n<p>The answer is 12.</p>\n        <p>Note that there can be multiple optimal arrangements like [5, 1, 3, 1, 4], [4, 1, 3, 1, 4].</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMaxBeauty</code> in the editor below.</p>\n\n<p><code>getMaxBeauty</code> has the following parameter:</p>\n        <ul>\n            <li><code>int arr[n]</code>: an array of integers</li>\n        </ul>\n\n<h4>Returns</h4>\n        <ul>\n            <li><code>long int</code>: the maximum possible beauty of <code>psum</code></li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ arr[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"sample-cases\\\">\n        <h3>Sample Test Cases</h3>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">4\n4\n1\n2\n4</pre>\n            <pre class=\\\"output\\\">-3</pre>\n            <div class=\\\"explanation\\\">\n                <p>One optimal arrangement is [4, 1, 4, 2].<br>\n                <code>psum = [4, 5, 9, 11]</code><br>\n                The beauty of <code>psum</code> is 4 - 5 + 9 - 11 = -3.</p>\n            </div>\n        </div>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 1</h4>\n            <pre class=\\\"input\\\">5\n6\n5\n1\n5\n2</pre>\n            <pre class=\\\"output\\\">16</pre>\n            <div class=\\\"explanation\\\">\n                <p>An optimal arrangement is [5, 1, 6, 2, 5].<br>\n                <code>psum = [5, 6, 12, 14, 19]</code><br>\n                The beauty of <code>psum</code> is 5 - 6 + 12 - 14 + 19 = 16.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"starter-code\\\">\n        <pre class=\\\"code-block\\\"><code class=\\\"language-java\\\">public static long getMaxBeauty(List&lt;Integer&gt; arr) {\n    // Write your code here\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Hd9-edc5wC51nroTODiCkcruFWpmP_DTAwuZ150BVh0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 106,
        "title": "odd Bell numbers between a particular range",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Find out sum of all odd Bell numbers between a particular range</h1>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>Odd numbers are whole numbers that are not divisible by number 2.</p>\n\n<p>And a <strong>Bell number</strong> is the number of ways that n distinguishable objects (such as differently colored balls) can be grouped into sets (such as buckets) if no set can be empty. For example, if there are three balls, colored red (R), green (G), and blue (B), they can be grouped in five different ways: (RGB), (RG)(B), (RB)(G), (BG)(R), and (R)(G)(B), so that the third Bell number is 5.</p>\n\n<p>The sequence of Bell numbers, 1, 2, 5, 15, 52, 203, 877, 4140, 21147,..., can be built up in the form of a triangle, as follows. The first row has just the number one. Each successive row begins with the last number of the previous row and continues by adding the number just written down to the number immediately above and to the right of it.</p>\n\n<div class=\\\"bell-triangle\\\">\n            <pre>\n1\n1    2\n2    3    5\n5    7    10   15\n15   20   27   37   52\n52   67   87   114  151  203\n203  255  322  409  523  674  877\n877  ...\n            </pre>\n        </div>\n\n<p>The Bell numbers appear down the left-hand side of the triangle.</p>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Function Parameters</h3>\n        <ul>\n            <li><code>lowerNumber</code>: an integer number that specify lower limit of the range.</li>\n            <li><code>upperNumber</code>: an integer number that specify upper limit of the range.</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>lowerNumber, upperNumber should be some whole positive number.</li>\n            <li>lowerNumber should be smaller than upperNumber.</li>\n        </ul>\n        <p class=\\\"error-message\\\">If either of the above constraints is violated, then \\\"Invalid input\\\" should be printed.</p>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n<div class=\\\"example\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\n10\n10000</pre>\n            <pre class=\\\"output\\\">Output:\n1095</pre>\n            <div class=\\\"explanation\\\">\n                <p>Since the odd Bell numbers between this range 10 to 10000, are 15,203 & 877 and sum of these numbers are = 15 + 203 + 877 = 1095.</p>\n            </div>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Sample Case 1</h4>\n            <pre class=\\\"input\\\">Input:\n100\n50</pre>\n            <pre class=\\\"output\\\">Output:\nInvalid Input</pre>\n            <div class=\\\"explanation\\\">\n                <p>Since lower range can\\'t be greater than upper range.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"code\\\">void sumOfOddBellNumbers(int lowerNumber, int upperNumber) {\n    // Your code here\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1jGWiHSO35HGgJnnIeBN7r2U7cMhxpLt1M9oHIVUirqg/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 251,
        "title": "Hidden Text Encoding Algorithm",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Hidden Text Encoding Algorithm</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>In a particular text encoding algorithm, codes are hidden within plain text. The steps to extract the code is as follows:</p>\n\n        <ol class=\\\"algorithm-steps\\\">\n            <li>Find the length of the given text and factorize this length to determine its factors. For example, if the length is 10 the factors are 1, 2, 5, 10</li>\n            \n            <li>Use these factors as positions and find the characters in the text that come in that location. For example, in the case of 10, find the 1st, 2nd, 5th and 10th characters</li>\n            \n            <li>If the character at a particular position is a space character, pick the character next to it.</li>\n            \n            <li>Print these characters in the same order to get the hidden code</li>\n        </ol>\n\n        <p>Given a line of text, the program should:</p>\n        <ul class=\\\"program-requirements\\\">\n            <li>Determine the hidden code using the steps given above and print it</li>\n            <li>Print Invalid input if any of the constraints mentioned in the constraints section is violated</li>\n        </ul>\n    </div>\n\n    <div class=\\\"assumptions\\\">\n        <h3>Assumptions</h3>\n        <ul>\n            <li>Assume that there are no consecutive space characters</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A single line of text containing the encoded message.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <ul>\n            <li>The decoded hidden message if the input is valid</li>\n            <li>\\\"Invalid input\\\" if any constraint is violated</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n\\\"Hello World\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n\\\"HlWd\\\"</pre>\n            <div class=\\\"explanation\\\">\n                <p>Length of text = 11</p>\n                <p>Factors of 11 are: 1, 11</p>\n                <p>Characters at these positions: H(1), d(11)</p>\n                <p>Therefore, the hidden code is \\\"Hd\\\"</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The input text contains only printable ASCII characters</li>\n            <li>1 ≤ length of text ≤ 1000</li>\n            <li>No consecutive spaces in the input text</li>\n        </ul>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\"><code>string decodeHiddenMessage(string text);</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/12ul6jhiFiS9L397Uq7qoRkc3IolwuEcq-kNzEmDLv5E/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 252,
        "title": "DNA/RNA Sequence Decoder",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">DNA/RNA Sequence Decoder</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Dioxyribonucleic Acid (DNA) and Ribonucleic Acid are long molecules forming the genetics and is copied over the generations. One of the components of DNA/RNA is a nucleotide which has nucleobases:</p>\n\n        <ol class=\\\"nucleobases\\\">\n            <li>Cytosine (C)</li>\n            <li>Guanine (G)</li>\n            <li>Adenine (A)</li>\n            <li>Thymine (T) <em>(Occurs in DNA only instead of Uracil (U))</em></li>\n            <li>Uracil (U) <em>(Occurs in RNA only instead of Thymine (T))</em></li>\n        </ol>\n\n        <p>Combination of these nucleobases form a DNA/RNA. Consider this table for solving the problem below:</p>\n\n        <table class=\\\"nucleobase-table\\\">\n            <thead>\n                <tr>\n                    <th>Nucleobase</th>\n                    <th>C</th>\n                    <th>G</th>\n                    <th>A</th>\n                    <th>T</th>\n                    <th>U</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Binary Value</td>\n                    <td>001</td>\n                    <td>010</td>\n                    <td>011</td>\n                    <td>101</td>\n                    <td>110</td>\n                </tr>\n            </tbody>\n        </table>\n\n        <p>Additionally, the sequence 000 is used to identify DNA and 111 identifies RNA.</p>\n    </div>\n\n    <div class=\\\"task\\\">\n        <p>Given a sequence of binary integers of 3-bits each, you are expected to decode it in the readable format and also correct any errors in the input sequence.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n000001010111010100101110011</pre>\n            <div class=\\\"explanation\\\">\n                <p>Now, the first 3 bits of the input are 000 which depicts that the remaining set of binary digits should be represented as a DNA sequence. Now, we group the remaining bits into sets of 3-bits which can be represented as: 001 010 111 010 100 101 110 011</p>\n                <p>Upon decoding this, we get the sequence as:</p>\n                <p>C G A G T T U A</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A string containing a sequence of binary digits (0s and 1s), where length is a multiple of 3.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The decoded sequence of nucleobases as a string, with any necessary error corrections applied.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Input length is a multiple of 3</li>\n            <li>Input contains only 0s and 1s</li>\n            <li>First three bits are either 000 (DNA) or 111 (RNA)</li>\n            <li>Each subsequent 3-bit group must correspond to a valid nucleobase according to the table</li>\n        </ul>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\"><code>string decodeSequence(string binarySequence);</code></pre>\n    </div>\n</div>\n\n<style>\n.nucleobase-table {\n    border-collapse: collapse;\n    width: 100%;\n    margin: 20px 0;\n}\n\n.nucleobase-table th,\n.nucleobase-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n}\n\n.nucleobase-table th {\n    background-color: #f5f5f5;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1eQTIlgx0eioR9lqj6dUpdPW89DNXR0KiCoJnc18FKt0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 254,
        "title": "DNA/RNA Sequence Decoder",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">DNA/RNA Sequence Decoder</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Dioxyribonucleic Acid (DNA) and Ribonucleic Acid are long molecules forming the genetics and is copied over the generations. One of the components of DNA/RNA is a nucleotide which has nucleobases:</p>\n\n        <ol class=\\\"nucleobases-list\\\">\n            <li>Cytosine (C)</li>\n            <li>Guanine (G)</li>\n            <li>Adenine (A)</li>\n            <li>Thymine (T) <em>(Occurs in DNA only instead of Uracil (U))</em></li>\n            <li>Uracil (U) <em>(Occurs in RNA only instead of Thymine (T))</em></li>\n        </ol>\n\n        <p>Combination of these nucleobases form a DNA/RNA. Consider this table for solving the problem below:</p>\n\n        <table class=\\\"nucleobase-mapping\\\">\n            <thead>\n                <tr>\n                    <th>Nucleobase</th>\n                    <th>C</th>\n                    <th>G</th>\n                    <th>A</th>\n                    <th>T</th>\n                    <th>U</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Binary Value</td>\n                    <td>001</td>\n                    <td>010</td>\n                    <td>011</td>\n                    <td>101</td>\n                    <td>110</td>\n                </tr>\n            </tbody>\n        </table>\n\n        <p class=\\\"important-note\\\">Additionally, the sequence 000 is used to identify DNA and 111 identifies RNA.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <pre class=\\\"cpp\\\"><code>void decodeSequence(string binaryString);</code></pre>\n        <p>The function accepts STRING binaryString as parameter.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A binary string containing sequences of 3 bits each.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The decoded DNA or RNA sequence using the corresponding nucleobases.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The input string length is a multiple of 3</li>\n            <li>The input string contains only \\'0\\' and \\'1\\' characters</li>\n            <li>The first three bits are either \\'000\\' (DNA) or \\'111\\' (RNA)</li>\n            <li>All subsequent 3-bit groups correspond to valid nucleobase encodings</li>\n        </ul>\n    </div>\n\n    <style>\n        .nucleobase-mapping {\n            border-collapse: collapse;\n            width: 100%;\n            margin: 20px 0;\n        }\n        \n        .nucleobase-mapping th,\n        .nucleobase-mapping td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n        \n        .nucleobase-mapping th {\n            background-color: #f5f5f5;\n        }\n        \n        .important-note {\n            background-color: #fff3e0;\n            padding: 10px;\n            border-left: 4px solid #ff9800;\n            margin: 15px 0;\n        }\n        \n        .nucleobases-list li {\n            margin: 8px 0;\n        }\n        \n        .nucleobases-list em {\n            color: #666;\n            font-style: italic;\n        }\n    </style>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1_WnEtiz8zlrDYOD9OwQ3-U5WnGOfizK1jTfAcPocEn0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    },
    {
        "id": 338,
        "title": "Minimum Difference in Measurements",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Minimum Difference in Measurements</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Minimum Difference in Measurements</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Given an array of integers representing measurements, find the minimum possible difference between any two measurements. Print all pairs of measurements that have this minimum difference in ascending order, with the pairs\\' elements ordered ascending. For example, if <code>a < b</code>, the pair is <code>(a, b)</code>. The values should have a single space between them.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An array of integers <code>measurements</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print all pairs of measurements that have the minimum difference in ascending order, with each pair on a new line and the elements of the pair separated by a space.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The array <code>measurements</code> will contain at least two elements.</li>\n            <li>The elements in the array are integers.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nmeasurements = [6, 5, 4, 3, 7]</pre>\n            <pre class=\\\"output\\\">Output:\n3 4\n4 5\n5 6\n6 7</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The minimum absolute difference between any two elements in the array is 1, and there are four pairs with this difference: (3, 4), (4, 5), (5, 6), and (6, 7).</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nmeasurements = [-1, 3, 6, -5, 0]</pre>\n            <pre class=\\\"output\\\">Output:\n0 3\n3 6</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The minimum absolute difference is 3, and the pairs with that difference are (0, 3) and (3, 6).</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1nH3Yrwc5xW27yvst7lGlbWX8zDe79Fh_7QotX4qWe_Q/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 22
    }
]