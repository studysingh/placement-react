[
    {
        "id": 1427,
        "title": "Capable Models",
        "problem_statement": "<h1>Capable Models</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given <code>n</code> machine learning models, each with an associated cost and feature compatibility:</p>\r\n<ul>\r\n    <li><code>cost[i]</code> represents the cost of the <code>i</code>th model.</li>\r\n    <li><code>featureAvailability[i]</code> is a binary string indicating suitability for two distinct features:\r\n        <ul>\r\n            <li>\"00\": not equipped for either feature</li>\r\n            <li>\"01\": suitable for feature A but not feature B</li>\r\n            <li>\"10\": suitable for feature B but not feature A</li>\r\n            <li>\"11\": suitable for both features</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>A set of models is <strong>k-capable</strong> if the number of models suitable for feature A is greater than or equal to <code>k</code> AND the number of models suitable for feature B is greater than or equal to <code>k</code>.</p>\r\n<p>For each value of <code>k</code> from 1 to <code>n</code>, determine the minimum cost required to assemble a <code>k-capable</code> set of models. Return an array of <code>n</code> integers, where the <code>i</code>th integer represents the minimum cost for an <code>i</code>-capable set. If no <code>i</code>-capable set exists, the <code>i</code>th integer should be -1.</p>\r\n\r\n<p><strong>Function Signature:</strong></p>\r\n<pre><code class='language-javascript'>int getMinimumCost(int cost[], string featureAvailability[])</code></pre>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>int cost[n]</code>: An array of integers representing the cost of machine learning models.</li>\r\n    <li><code>string featureAvailability[n]</code>: An array of strings representing the compatibility of models.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int[n]</code>: An array of integers where the <code>i</code>th element is the minimum cost for an <code>i</code>-capable set, or -1 if no such set exists.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 6\r\ncost = [3, 6, 9, 1, 2, 5]\r\nfeatureAvailability = [\"10\", \"01\", \"11\", \"01\", \"11\", \"10\"]</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>[2, 6, 15, 26, -1, -1]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Let's analyze the minimum cost for different values of <code>k</code>:</p>\r\n<ul>\r\n    <li>For <code>k = 1</code>:\r\n        <ul>\r\n            <li>Model 3 (index 2): cost 9, \"11\" (suitable for A and B).\r\n            A set containing only model 3 is 1-capable. Cost = 9.</li>\r\n            <li>Model 1 (index 0): cost 3, \"10\" (suitable for B).\r\n            Model 4 (index 3): cost 1, \"01\" (suitable for A).\r\n            A set containing models 1 and 4 is 1-capable. Cost = 3 + 1 = 4.</li>\r\n            <li>Model 5 (index 4): cost 2, \"11\" (suitable for A and B).\r\n            A set containing only model 5 is 1-capable. Cost = 2.</li>\r\n            <li>Model 6 (index 5): cost 5, \"10\" (suitable for B).\r\n            Model 2 (index 1): cost 6, \"01\" (suitable for A).\r\n            A set containing models 6 and 2 is 1-capable. Cost = 5 + 6 = 11.</li>\r\n        </ul>\r\n        The minimum cost for a 1-capable set is 2 (using model 5).\r\n    </li>\r\n    <li>For <code>k = 2</code>:\r\n        <ul>\r\n            <li>Consider models 1, 4, 5.\r\n            Model 1 (cost 3, \"10\"): contributes to Feature B.\r\n            Model 4 (cost 1, \"01\"): contributes to Feature A.\r\n            Model 5 (cost 2, \"11\"): contributes to Feature A and B.\r\n            Total Feature A compatible: 2 (models 4, 5). Total Feature B compatible: 2 (models 1, 5).\r\n            This set is 2-capable. Cost = 3 + 1 + 2 = 6.</li>\r\n        </ul>\r\n        The minimum cost for a 2-capable set is 6.\r\n    </li>\r\n    <li>For <code>k = 3</code>:\r\n        <ul>\r\n            <li>Consider models 1, 3, 4, 5.\r\n            Model 1 (cost 3, \"10\"): B\r\n            Model 3 (cost 9, \"11\"): A, B\r\n            Model 4 (cost 1, \"01\"): A\r\n            Model 5 (cost 2, \"11\"): A, B\r\n            Feature A compatible: 3 (models 3, 4, 5). Feature B compatible: 3 (models 1, 3, 5).\r\n            This set is 3-capable. Cost = 3 + 9 + 1 + 2 = 15.</li>\r\n        </ul>\r\n        The minimum cost for a 3-capable set is 15.\r\n    </li>\r\n    <li>For <code>k = 4</code>:\r\n        <ul>\r\n            <li>Consider models 1, 2, 3, 4, 5.\r\n            Model 1 (cost 3, \"10\"): B\r\n            Model 2 (cost 6, \"01\"): A\r\n            Model 3 (cost 9, \"11\"): A, B\r\n            Model 4 (cost 1, \"01\"): A\r\n            Model 5 (cost 2, \"11\"): A, B\r\n            Feature A compatible: 4 (models 2, 3, 4, 5). Feature B compatible: 3 (models 1, 3, 5).\r\n            This set is NOT 4-capable because Feature B count is only 3.</li>\r\n            <li>Consider models 1, 2, 3, 4, 5, 6.\r\n            Model 1 (cost 3, \"10\"): B\r\n            Model 2 (cost 6, \"01\"): A\r\n            Model 3 (cost 9, \"11\"): A, B\r\n            Model 4 (cost 1, \"01\"): A\r\n            Model 5 (cost 2, \"11\"): A, B\r\n            Model 6 (cost 5, \"10\"): B\r\n            Feature A compatible: 4 (models 2, 3, 4, 5). Feature B compatible: 4 (models 1, 3, 5, 6).\r\n            This set is 4-capable. Cost = 3 + 6 + 9 + 1 + 2 + 5 = 26.</li>\r\n        </ul>\r\n        The minimum cost for a 4-capable set is 26.\r\n    </li>\r\n    <li>For <code>k >= 5</code>, there will be no capable set.</li>\r\n</ul>\r\n<p>Hence, the answer is <code>[2, 6, 15, 26, -1, -1]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 4\r\ncost = [5, 6, 10, 1]\r\nfeatureAvailability = [\"10\", \"01\", \"11\", \"00\"]</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>[10, 21, -1, -1]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For <code>k = 1</code>:\r\n        <ul>\r\n            <li>Model 3 (index 2): cost 10, \"11\" (suitable for A and B).\r\n            A set containing only model 3 is 1-capable. Cost = 10.</li>\r\n        </ul>\r\n        The minimum cost for a 1-capable set is 10.\r\n    </li>\r\n    <li>For <code>k = 2</code>:\r\n        <ul>\r\n            <li>Consider models 1, 2, 3.\r\n            Model 1 (cost 5, \"10\"): contributes to Feature B.\r\n            Model 2 (cost 6, \"01\"): contributes to Feature A.\r\n            Model 3 (cost 10, \"11\"): contributes to Feature A and B.\r\n            Total Feature A compatible: 2 (models 2, 3). Total Feature B compatible: 2 (models 1, 3).\r\n            This set is 2-capable. Cost = 5 + 6 + 10 = 21.</li>\r\n        </ul>\r\n        The minimum cost for a 2-capable set is 21.\r\n    </li>\r\n    <li>For <code>k >= 3</code>, there is no capable set.</li>\r\n</ul>\r\n<p>Hence, the answer is <code>[10, 21, -1, -1]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 2\r\ncost = [1, 1]\r\nfeatureAvailability = [\"10\", \"10\"]</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>[-1, -1]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThere is no possible way of forming a <code>k</code>-capable set for any <code>k</code> from 1 to <code>n</code>, because no model is suitable for Feature A. Thus, the count of Feature A compatible models will always be 0, which cannot be greater than or equal to any positive <code>k</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= cost[i] <= 10^4</code></li>\r\n    <li><code>featureAvailability[i]</code> is a binary string of length 2.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Quadeye_17sep",
        "company_id": 503
    },
    {
        "id": 1428,
        "title": "String Practice",
        "problem_statement": "<h1>String Practice</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A palindrome is a sequence that reads the same forwards and backwards, such as \"tacocat\" or \"1221\", but not \"tacocats\" or \"8675\". A subsequence is derived by deleting zero or more characters from the original sequence while maintaining the order of the remaining characters. For instance, the subsequences of \"abc\" include \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".</p>\r\n<p>Given a string s composed of n lowercase English letters, identify the length of the longest palindromic subsequence within s.</p>\r\n<p>For example, if <code>n = 3</code> and <code>s = 'abc'</code>, the only palindromic subsequences are a, b, and c, each with a length of 1. The longest palindromic subsequence of s is 1.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>longestPalindrome</code> in the editor with has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int n</code>: the length of the string</li>\r\n    <li><code>string s</code>: a string containing n characters</li>\r\n</ul>\r\n\r\n<h2>Return</h2>\r\n<p><code>int</code>: the length of the longest palindromic subsequence of s</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 2, s = 'ba'\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The palindromic subsequences of s = \"ab\" are \"a\" and \"b\". They share a length of 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, s = 'aaa'\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The string s = \"aaa\" is already palindromic, so return 3 as the answer.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 7, s = 'bandana'\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The longest palindromic subsequences of s = \"bandana\" are \"anana\" and \"andna\", each 5 characters long.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 5000</code></li>\r\n    <li>String s consists of lowercase English letters, 'a' - 'z'.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Quadeye_17sep",
        "company_id": 503
    },
    {
        "id": 1429,
        "title": "Stay Positive",
        "problem_statement": "<h1>Stay Positive</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of integers and a non-zero positive value <code>x</code> that you choose, a running sum is calculated by adding each element of the array to <code>x</code> consecutively. Determine the minimum value of <code>x</code> such that the running sum is at least 1 after every addition.</p>\r\n<p>Complete the <code>minStart</code> function in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: an array of integers to sum</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the minimum initial value</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [-4, 3, 2, 1]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> Let starting value <code>x = 5</code>. Running sums: <code>5 + (-4) = 1</code>, <code>1 + 3 = 4</code>, <code>4 + 2 = 6</code>, <code>6 + 1 = 7</code>. All running sums are <code>&gt;= 1</code>. There is no value smaller than 5 that satisfies the condition.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [-3, -5, -2, 1]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> If the starting value is 4, running sums are <code>[7, 1, 6, 4, 5]</code>. This is the minimum starting value.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: arr = [5]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The starting value of <code>x</code> is 1. Running sum: <code>1 + 5 = 6</code>. All running sums are <code>&gt;= 1</code>.</p>\r\n\r\n<h3>Example 4 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: arr = [-5, 4, -2, 3, 1]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> Starting with a value of 6 gives the following sums: <code>6 + -5 = 1 -&gt; 1 + 4 = 5 -&gt; 5 + -2 = 3 -&gt; 3 + 3 = 6 -&gt; 6 + 1 = 7</code>.</p>\r\n\r\n<h3>Example 5 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: arr = [-5, 4, -2, 3, 1, -1, -6, -1, 0, 5]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Any initial value less than 8 will fail. For example, the running sum for an initial value of 7 is <code>[2, 6, 4, 7, 6, 5, -1, -2, -2, 3]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>-10<sup>6</sup> &lt;= arr[i] &lt;= 10<sup>6</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Quadeye_17sep",
        "company_id": 503
    }
]