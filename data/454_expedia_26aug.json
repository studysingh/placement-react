[
    {
        "id": 1312,
        "title": "Max Consecutive Hidden Commits",
        "problem_statement": "<h1>Max Consecutive Hidden Commits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working with a Git-based version control system. Each commit in a repository has a unique integer ID representing its timestamp, and the list of commit IDs is given in ascending order. The commit history is complete and consistent.</p>\r\n<p>You are auditing this history and want to test how many consecutive commits can be temporarily hidden (e.g., by a UI filter) such that the remaining visible commits still allow someone to deduce which commits were hidden uniquely. You are allowed to hide a contiguous block of consecutive commits.</p>\r\n<p>Implement a function to maximize the number of commits hidden while ensuring the surrounding commit history clearly defines the hidden range.</p>\r\n<p>The function <code>getMaxConsecutiveHidden</code> takes the following input:</p>\r\n<ul>\r\n    <li><code>commits</code>: A list/vector of unique integers in ascending order, representing commit IDs.</li>\r\n</ul>\r\n<p>The function should return an integer, which maximizes the number of commits hidden.</p>\r\n\r\n<p>Here are the function signatures (note: actual language may vary, but the structure is similar):</p>\r\n<pre><code class='language-javascript'>public static int getMaxConsecutiveHidden(List&lt;Integer&gt; commits)</code></pre>\r\n<pre><code class='language-javascript'>int getMaxConsecutiveHidden(vector&lt;int&gt; commits)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: commits = [1, 3, 4, 5, 6, 9]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> After hiding the maximum number of consecutive commits, the array becomes [1, 3, ___, 6, 9]. It is clear that the missing commits are 4 and 5. Hence, the optimal answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5, commits = [1, 2, 3, 4, 5]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The first 4 commits can be hidden, and the array becomes [1, ____, 5]. The missing commits can be deduced to be 2, 3, and 4.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 4, commits = [3, 5, 7, 9]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> If any element is hidden, the array cannot be uniquely reconstructed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code> (where <code>n</code> is the number of commits)</li>\r\n    <li><code>1 &lt;= commits[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "expedia_26aug",
        "company_id": 454
    },
    {
        "id": 1313,
        "title": "Balanced String Regex",
        "problem_statement": "<h1>Balanced String Regex</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A string, <code>s</code>, is composed of the letters <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>. The string is said to be balanced if both of the following conditions are satisfied:</p>\r\n<ul>\r\n    <li>The summed number of <code>a</code>'s and <code>c</code>'s is even.</li>\r\n    <li>The summed number of <code>b</code>'s and <code>d</code>'s is even.</li>\r\n</ul>\r\n<p>For example, the string 'abcd' (a count = 1, c count = 1 -> 1+1=2, even; b count = 1, d count = 1 -> 1+1=2, even) is balanced, but 'abc' and 'bcd' are not.</p>\r\n<p>Complete the code by filling in the blank with a RegEx that only matches balanced strings.</p>\r\n\r\n<pre><code class='language-java'>import java.io.*;\r\nimport java.util.*;\r\nimport java.text.*;\r\nimport java.math.*;\r\nimport java.util.regex.*;\r\n\r\npublic class Solution {\r\n    public static void main(String[] args) {\r\n        Regex_Test tester = new Regex_Test();\r\n        tester.checker(\"___FILL_IN_REGEX_HERE___\"); // Use \\\\ instead of using \\\r\n    }\r\n}\r\n\r\nclass Regex_Test {\r\n    public void checker(String Regex_Pattern){\r\n        Scanner Input = new Scanner(System.in);\r\n        String Test_String = Input.nextLine();\r\n        Pattern p = Pattern.compile(Regex_Pattern);\r\n        Matcher m = p.matcher(Test_String);\r\n        System.out.println(m.matches());\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 0:</h3>\r\n<pre><code class='language-text'>Input: acdbdbbbbaaacc\r\nOutput: true</code></pre>\r\n<p><strong>Explanation:</strong> There are six a's and c's in the string and eight b's and d's. Thus, the string is balanced.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: cdba\r\nOutput: true</code></pre>\r\n<p><strong>Explanation:</strong> There are two a's and c's in the string and two b's and d's. Thus, the string is balanced.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: aaccb\r\nOutput: false</code></pre>\r\n<p><strong>Explanation:</strong> There are four a's and c's in the string and only one b (there are no d's). Thus, the string is not balanced.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: cdcdaabb\r\nOutput: true</code></pre>\r\n<p><strong>Explanation:</strong> There are four a's and c's in the string and four b's and d's. Thus, the string is balanced.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Each character <code>s[i]</code> is one of <code>{a,b,c,d}</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "expedia_26aug",
        "company_id": 454
    }
]