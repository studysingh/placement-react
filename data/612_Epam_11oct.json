[
    {
        "id": 1743,
        "title": "Maximum Alternating Subsequence Score",
        "problem_statement": "<h1>Maximum Alternating Subsequence Score</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string consisting of lowercase characters. The score of a character is equal to its ASCII value. For example, the score value for 'a' will be 97, for 'b' it is 98, and so on.</p>\r\n<p>An alternating subsequence is a subsequence in which the indices of any two consecutive characters differ by exactly two. For example, if the subsequence is <code>s[i], s[j], s[k]</code>, then <code>j - i = 2</code> and <code>k - j = 2</code>.</p>\r\n<p>Among all such alternating subsequences, find the maximum score. The maximum score is the total combined ASCII value of all the characters in the selected alternating subsequence.</p>\r\n<p>Your task is to complete the function <code>maximumSum</code>, which takes one argument:</p>\r\n<ul>\r\n    <li>an <strong>input_string</strong>, i.e., the string <code>S</code>.</li>\r\n    <li>and returns an integer that will be the maximum score of the alternating subsequence.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line will contain the string <code>S</code>.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output the maximum score of the alternating subsequence of characters chosen.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: abba\r\nOutput: 195</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe string <code>S = \"abba\"</code> has characters and their ASCII values:\r\n<ul>\r\n    <li><code>S[0] = 'a'</code> (ASCII 97)</li>\r\n    <li><code>S[1] = 'b'</code> (ASCII 98)</li>\r\n    <li><code>S[2] = 'b'</code> (ASCII 98)</li>\r\n    <li><code>S[3] = 'a'</code> (ASCII 97)</li>\r\n</ul>\r\nThere are two possible alternating subsequences with maximum score:\r\n<ol>\r\n    <li>Characters at even indices: <code>S[0], S[2]</code> ('a', 'b'). Score = 97 + 98 = 195.</li>\r\n    <li>Characters at odd indices: <code>S[1], S[3]</code> ('b', 'a'). Score = 98 + 97 = 195.</li>\r\n</ol>\r\nThe maximum score is 195.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt;= length(S) &lt;= 1000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param input_string The input string S.\n     * @return The maximum score of an alternating subsequence.\n     */\n    long long maximumSum(const std::string& input_string) {\n        // Your solution logic goes here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string input_string;\n    std::cin >> input_string;\n\n    Solution sol;\n    long long result = sol.maximumSum(input_string);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Epam_11oct",
        "company_id": 612
    },
    {
        "id": 1744,
        "title": "Common Substring in Usernames",
        "problem_statement": "<h1>Common Substring in Usernames</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A person is creating multiple accounts on DoSelect using different usernames. Since all usernames belong to the same person, there should be some similarity between them.</p>\r\n<p>Given an array of 3 usernames and an integer <code>k</code>, determine if there exists a <strong>common substring of length at least <code>k</code></strong> that appears in all three usernames.</p>\r\n<ul>\r\n    <li>Return \"YES\" if such a common substring exists.</li>\r\n    <li>Otherwise, return \"NO\".</li>\r\n</ul>\r\n<p><strong>Note:</strong> The string characters are case sensitive.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\nbowinedown\r\ndowntownbowing\r\ngamingdowntown\r\n4\r\nOutput: YES</code></pre>\r\n<p><strong>Explanation:</strong> There is a common string 'down' in all the usernames with a length of 4. Therefore, YES.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\njohnsmith\r\njohnsnow\r\nJOHNNdoe\r\n4\r\nOutput: NO</code></pre>\r\n<p><strong>Explanation:</strong> No common substring of length 4 or more exists in all three usernames. For example, 'john' is common to the first two, but 'JOHNNdoe' differs due to case sensitivity and the extra 'N'. Hence, NO.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= k &lt;= len(username[i])</code></li>\r\n    <li><code>1 &lt;= len(username[i]) &lt;= 200</code></li>\r\n    <li>There will always be exactly 3 usernames in the input array.</li>\r\n</ul>\r\n\r\n<h2>Function Signature</h2>\r\n<p>Complete the <code>sameUsername</code> function below.</p>\r\n<p>The function is expected to return a <code>STRING</code>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ol>\r\n    <li><code>STRING ARRAY username</code></li>\r\n    <li><code>INTEGER k</code></li>\r\n</ol>\r\n<pre><code class='language-java'>public static String sameUsername(List&lt;String&gt; username, int k) {\r\n    // Write your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::string sameUsername(const std::vector<std::string>& usernames, int k) {\n        // Your code here\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> usernames(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> usernames[i];\n    }\n\n    int k;\n    std::cin >> k;\n\n    Solution solution;\n    std::string result = solution.sameUsername(usernames, k);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Epam_11oct",
        "company_id": 612
    }
]