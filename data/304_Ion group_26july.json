[
    {
        "id": 958,
        "title": "Missing Words",
        "problem_statement": "<h1>Missing Words</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two strings, one is a subsequence if all of the elements of the first string occur in the same order within the second string. The elements do not have to be contiguous in the second string, but order must be maintained. For example, given the string 'I like cheese', the words ('I', 'cheese') are one possible subsequence of that string. Words are space delimited.</p>\r\n<p>Given two strings, <code>s</code> and <code>t</code>, where <code>t</code> is a subsequence of <code>s</code>, report the words of <code>s</code> that are missing in <code>t</code> (case sensitive), in the order they are missing.</p>\r\n<p>Complete the function <code>missingWords</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string s</code>: a sentence of space-separated words</li>\r\n    <li><code>string t</code>: a sentence of space-separated words</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>string[]</code>: all words in <code>s</code> that are missing from <code>t</code>, in the order they occur within <code>s</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"I am using HackerRank to improve programming\", t = \"I am HackerRank to improve\"\r\nOutput: [\"using\", \"programming\"]</code></pre>\r\n<p><strong>Explanation:</strong> The missing words are:</p>\r\n<ol>\r\n    <li>using</li>\r\n    <li>programming</li>\r\n</ol>\r\n<p>Add these words in order to the array [\"using\", \"programming\"], then return this array as the answer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Strings <code>s</code> and <code>t</code> consist of English letters (a-z and A-Z), dash '-', and spaces only.</li>\r\n    <li>All words are delimited by a space.</li>\r\n    <li><code>1 &lt;= length of t &lt;= length of s &lt;= 10^6</code></li>\r\n    <li><code>1 &lt;= length of any word in s or t &lt;= 15</code></li>\r\n    <li>It is guaranteed that string <code>t</code> is a subsequence of string <code>s</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion group_26july",
        "company_id": 304
    },
    {
        "id": 961,
        "title": "Minimum Time to Process Tasks",
        "problem_statement": "<h1>Minimum Time to Process Tasks</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array <code>taskMemory</code> of <code>n</code> positive integers representing memory required for each task, an array <code>taskType</code> of <code>n</code> positive integers representing task types, and an integer <code>maxMemory</code>, find the minimum time required to process all tasks.</p>\r\n<p>Each task takes 1 unit of time. The server can process at most two tasks in parallel only if they are the same type and together require no more than <code>maxMemory</code> units.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, taskMemory = [7,2,3,9], taskType = [1,2,1,3], maxMemory = 10\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Tasks 0 (memory 7, type 1) and 2 (memory 3, type 1) can be processed concurrently as they are of the same type and their combined memory (7 + 3 = 10) does not exceed <code>maxMemory</code>. This takes 1 unit of time. The remaining tasks (1 and 3) must be processed individually, each taking 1 unit of time. Task 1 (memory 2, type 2) takes 1 unit. Task 3 (memory 9, type 3) takes 1 unit. Therefore, the total minimum time required is 1 (for tasks 0 and 2) + 1 (for task 1) + 1 (for task 3) = 3 units.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5, taskMemory = [1,2,3,4,2], taskType = [1,2,1,2,3], maxMemory = 4\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The first task (index 0, memory 1, type 1) and the third task (index 2, memory 3, type 1) can be processed in parallel because they are of the same type and their combined memory (1 + 3 = 4) does not exceed <code>maxMemory</code>. This takes 1 unit of time. The other three tasks (index 1, 3, and 4) must be processed individually. Task 1 (memory 2, type 2) and Task 3 (memory 4, type 2) cannot be processed in parallel because their combined memory (2 + 4 = 6) exceeds <code>maxMemory</code>. Task 4 (memory 2, type 3) is a unique type. Thus, tasks 1, 3, and 4 each take 1 unit of time. The total minimum time required is 1 (for tasks 0 and 2) + 1 (for task 1) + 1 (for task 3) + 1 (for task 4) = 4 units.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= maxMemory &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= taskMemory[i] &lt;= maxMemory</code></li>\r\n    <li><code>1 &lt;= taskType[i] &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinTime</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int taskMemory(n)</code>: the memory required by the tasks</li>\r\n    <li><code>int taskType(n)</code>: the type of the tasks</li>\r\n    <li><code>int maxMemory</code>: the maximum total memory that can be allocated to the tasks</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum time required to process all tasks</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion group_26july",
        "company_id": 304
    }
]