[
    {
        "id": 1181,
        "title": "Wordplay",
        "problem_statement": "<h1>Wordplay</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an integer N representing the total number of words in a word_list, and an array word_list containing N words, find the maximum length of a string that can be formed by concatenating some words from the array such that the resulting string contains no repeating characters.</p>\r\n<p>You need to:</p>\r\n<ul>\r\n    <li>Select a subset of words from the given word_list</li>\r\n    <li>Concatenate these selected words to form a single string</li>\r\n    <li>Ensure the final concatenated string has no duplicate characters</li>\r\n    <li>Return the maximum possible length of such a string</li>\r\n</ul>\r\n<p><strong>Function description</strong></p>\r\n<p>Complete the <code>solve()</code> function. This function takes the following 2 arguments and returns the answer.</p>\r\n<ul>\r\n    <li><strong>N</strong>: An integer representing the total number of words in word_list</li>\r\n    <li><strong>word_list[]</strong>: An array of N strings representing the words that can be used to form the longest concatenated word</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains an integer N denoting the total number of words in word_list</li>\r\n    <li>The next N lines each contain a string representing a word from the word_list</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Return an integer representing the length of the longest word that can be formed by concatenating words from the array word_list without any repeating characters.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nab\r\ncd\r\nef\r\nab\r\nde\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> We can select words \"ab\", \"cd\", and \"ef\" to form \"abcdef\" (length 6) with no repeating characters. We cannot include \"de\" because both \"d\" and \"e\" are already present in the concatenated string \"abcdef\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 16</code></li>\r\n    <li><code>word_list[i]</code> contains <code>[a-z]</code></li>\r\n</ul>\r\n\r\n<h2>Follow-up</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_8aug",
        "company_id": 399
    },
    {
        "id": 1209,
        "title": "String substring",
        "problem_statement": "<h1>String substring</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are having a string S of length N containing only lowercase English letters.</p>\r\n<p>You perform the following operation on the above string:</p>\r\n<ul>\r\n    <li>Delete some substring of this string.</li>\r\n    <li>Try permuting the remaining characters of the string such that they become a palindrome.</li>\r\n</ul>\r\n<p><strong>Task</strong></p>\r\n<p>Determine the minimum length substring to remove from the string S such that the remaining characters can be rearranged into a palindrome.</p>\r\n\r\n<h2>Notes</h2>\r\n<ul>\r\n    <li>A palindrome is a string that reads the same forward and backward.</li>\r\n    <li>E.g. 'MOM' is a palindrome.</li>\r\n    <li>A substring is a contiguous sequence of characters within a string.</li>\r\n    <li>E.g. \"Hello how\" is a substring of the string \"Hello how are you\", while \"Hellow\" is not.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>stringSub</code> provided in the editor. This function takes the following 2 parameters and returns the required answer.</p>\r\n<ul>\r\n    <li><code>N</code> Represents the length of string <code>S</code></li>\r\n    <li><code>S</code> Represents the string</li>\r\n</ul>\r\n<p>The function signature provided in the editor is:</p>\r\n<pre><code class='language-c'>int stringSub (int N, char* S) {\r\n    // Write your code here\r\n    return 0;\r\n}</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code> denoting the number of test cases. <code>T</code> also specifies the number of times you have to run the <code>stringSub</code> function on a different set of inputs.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains <code>N</code> denoting the length of the string.</li>\r\n            <li>The second line contains string <code>S</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case in a new line, return the minimum length substring to delete from <code>S</code> such that the remaining string can be rearranged into a palindrome.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 10</code></li>\r\n    <li><code>1 &le; N &le; 10<sup>4</sup></code></li>\r\n    <li><code>'a' &le; S[i] &le; 'z'</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\nabbccde\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first test case:</p>\r\n<p>Given</p>\r\n<ul>\r\n    <li><code>N = 7</code></li>\r\n    <li><code>S = 'abbccde'</code></li>\r\n</ul>\r\n<p>Approach:</p>\r\n<p>The possible ways to delete substring such that the remaining string forms a palindrome is:</p>\r\n<ul>\r\n    <li>Delete prefix of length 5, such that only 'e' remains which is a palindrome.</li>\r\n    <li>Delete suffix of length 5, such that only 'a' remains which is a palindrome.</li>\r\n    <li>Delete prefix of length 4, such that 'cde' remains, which can be rearranged into a palindrome.</li>\r\n    <li>Delete suffix of length 4, such that 'abb' remains which can be rearranged into a palindrome.</li>\r\n</ul>\r\n<p>The minimum length substring to delete is 4.</p>\r\n<p>Thus, the answer is 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nabcdc\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The second test case is explained in the example above (referring to the initial approach section).</p>\r\n<p>Given</p>\r\n<ul>\r\n    <li><code>N = 5</code></li>\r\n    <li><code>S = 'abcdc'</code></li>\r\n</ul>\r\n<p>Approach:</p>\r\n<p>One of the ways can be to delete the prefix of length 4. Then only character 'c' remains which is a palindrome.</p>\r\n<p>Another optimal way can be to delete the prefix of length 2 to get the string 'cdc' which is a palindrome.</p>\r\n<p>So, the minimum length substring to delete is 2.</p>\r\n\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_8aug",
        "company_id": 399
    },
    {
        "id": 1210,
        "title": "Number of Ways to Reach Island N",
        "problem_statement": "<h1>Number of Ways to Reach Island N</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a fixed, directed graph containing several islands. Your task is to find the number of distinct paths from Island 1 to a given Island N.</p>\r\n<p>The input consists of multiple test cases. The first line contains an integer <code>T</code>, representing the number of test cases. For each test case, a single integer <code>N</code> is provided, denoting the target island.</p>\r\n<p>For each test case, your program should return a long long integer representing the total number of ways to reach Island <code>N</code> from Island 1.</p>\r\n<p>The structure of the graph is implicit and demonstrated by the provided examples.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>This example demonstrates the overall input/output format and the first test case.</p>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n4\r\n6\r\nOutput:\r\n1\r\n2\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> The first line of the input indicates <code>T = 3</code> test cases. The subsequent lines provide the target island <code>N</code> for each test case.</p>\r\n<p>For <code>N = 2</code>:</p>\r\n<pre><code class='language-text'>Input: N = 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> There exists only 1 way to reach Island 2 from Island 1:</p>\r\n<ul>\r\n    <li>Island 1 to Island 2</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 4\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There exist 2 ways to reach Island 4 from Island 1:</p>\r\n<ul>\r\n    <li>Island 1 to Island 4</li>\r\n    <li>Island 1 to Island 2 to Island 4</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: N = 6\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There exist 3 ways to reach Island 6 from Island 1:</p>\r\n<ul>\r\n    <li>Island 1 to Island 6</li>\r\n    <li>Island 1 to Island 2 to Island 4 to Island 6</li>\r\n    <li>Island 1 to Island 3 to Island 6</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; N &le; 10<sup>6</sup></code></li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n<p><strong>Time Limit:</strong> 10 sec(s) for each input file</p>\r\n<p><strong>Memory Limit:</strong> 256 MB</p>\r\n<p><strong>Source Limit:</strong> 1024 KB</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_8aug",
        "company_id": 399
    }
]