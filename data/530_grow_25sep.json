[
    {
        "id": 1517,
        "title": "Trees: Max Binary Path",
        "problem_statement": "<h1>Trees: Max Binary Path</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are N cities and (N-1) roads connecting them. The cities and the roads together form a tree-like structure.</p>\r\n<p>Each city has a binary value of either 0 or 1. Ben starts the tour from starting city and he can visit any other city that he has not visited before and if there exists a direct road from the current city.</p>\r\n<p>The tour ends when he reaches the ending city. During the tour from the starting city to the ending city, Ben notes the values of the cities (either 0 or 1) he visits.</p>\r\n<p>At the end of the tour, he defines the value of the tour as the decimal representation of the binary string he noted down in the tour.</p>\r\n<p>Find the binary representation of the value which is the maximum value of the tour that Ben can take.</p>\r\n\r\n<p><strong>Note:</strong> There is the possibility that multiple tours have the same value, print the one which is the longest.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>In the provided code snippet, implement the provided <code>findMax(...)</code> method using the variables to print the binary representation of the value which is the maximum value of the tour that Ben can take. You can write your code in the space below the phrase \"WRITE YOUR LOGIC HERE\".</p>\r\n<p>There will be multiple test cases running so the input and Output should match exactly as provided. The base Output variable result is set to a default value of -404 which can be modified. Additionally, you can add or remove these output variables.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first line of input contains a single integer <strong>N</strong>, denoting the number of nodes in the tree.</p>\r\n<p>The second line of input contains a binary string <strong>S</strong> of length <strong>N</strong>, containing 0 and 1, where <strong>S[i]</strong> denotes the value of the i-th node (0-indexed, corresponding to node i+1 in 1-indexed graph).</p>\r\n<p>The next <strong>N-1</strong> lines of input contain 2 space-separated integers <strong>U</strong> and <strong>V</strong>, denoting there is an undirected edge between <strong>U</strong> and <strong>V</strong>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n100\r\n1 2\r\n1 3\r\nOutput:\r\n010</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe input describes a tree with 3 nodes. The node values are '1' for node 1, '0' for node 2, and '0' for node 3 (from string S=\"100\", where S[0] is node 1's value, S[1] is node 2's value, S[2] is node 3's value). The edges are (1,2) and (1,3). The tree structure is:</p>\r\n<pre><code class='language-text'>    1 (value 1)\r\n   / \\\r\n  2   3\r\n(value 0) (value 0)\r\n</code></pre>\r\n<p>If we start from 1:</p>\r\n<ul>\r\n    <li>The binary value from 1 to 1 is 1 = 1 in decimal.</li>\r\n    <li>The binary value from 1 to 2 is 10 = 2 in decimal.</li>\r\n    <li>The binary value from 1 to 3 is 10 = 2 in decimal.</li>\r\n</ul>\r\n\r\n<p>If we start from 2:</p>\r\n<ul>\r\n    <li>The binary value from 2 to 1 is 01 = 1 in decimal.</li>\r\n    <li>The binary value from 2 to 2 is 0 = 0 in decimal.</li>\r\n    <li>The binary value from 2 to 3 is 010 = 2 in decimal.</li>\r\n</ul>\r\n\r\n<p>If we start from 3:</p>\r\n<ul>\r\n    <li>The binary value from 3 to 1 is 01 = 1 in decimal.</li>\r\n    <li>The binary value from 3 to 2 is 010 = 2 in decimal.</li>\r\n    <li>The binary value from 3 to 3 is 0 = 0 in decimal.</li>\r\n</ul>\r\n\r\n<p>There are a total of 4 paths having a maximum possible value = 2. The answer will be the binary representation of 2 is = 010. Hence the output is 010.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 120</code></li>\r\n</ul>\r\n\r\n<h3>Output Format</h3>\r\n<p>The output contains a string denoting the binary representation of the value which is the maximum value of the tour that Ben can take.</p>\r\n\r\n<p><strong>Provided Code Snippet (C++):</strong></p>\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\nusing namespace std;\r\n\r\nint findMax(int N, string S, int U[], int V[]) {\r\n    //this is default OUTPUT. You can change it.\r\n    int result = -404;\r\n    //write your Logic here:\r\n\r\n\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    // INPUT [uncomment & modify if required]\r\n    int N;\r\n    cin >> N;\r\n\r\n    string S;\r\n    cin >> S;\r\n\r\n    int U[N], V[N];\r\n    for (int i = 0; i &lt; N - 1; i++) {\r\n        cin >> U[i] >> V[i];\r\n    }\r\n\r\n    // OUTPUT [uncomment & modify if required]\r\n    cout &lt;&lt; findMax(N, S, U, V);\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "grow_25sep",
        "company_id": 530
    },
    {
        "id": 1518,
        "title": "Maximum Mod Value",
        "problem_statement": "<h1>Maximum Mod Value</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given is a string <code>S</code> consisting of digits. You must break down the string into 2 non-empty parts. Let the number represented by the left part be <code>A</code> and the number represented by the right part be <code>B</code>.</p>\r\n<p>Find the maximum value of <code>{(A%7) x (B%7)}</code>.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>In the provided code snippet, implement the provided <code>maxmod(...)</code> method to find the maximum value of <code>{(A%7) x (B%7)}</code>. You can write your code in the space below the phrase \"WRITE YOUR LOGIC HERE\".</p>\r\n<p>There will be multiple test cases running so the <strong>Input</strong> and <strong>Output</strong> should match exactly as provided. The base <strong>Output</strong> variable <code>result</code> is set to a default value of <code>-404</code> which can be modified. Additionally, you can add or remove these output variables.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first line contains the string, denoting <code>S</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"125\"\r\nOutput: 25</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><code>S = \"125\"</code></p>\r\n<p>We can break down <code>S</code> into \"12\" and \"5\".</p>\r\n<p><code>A = 12</code> and <code>B = 5</code>.</p>\r\n<p>Here, we have <code>12%7 = 5</code> and <code>5%7 = 5</code>, and the product <code>{(12%7) x (5%7)} = 5 x 5 = 25</code>.</p>\r\n<p>This is the maximum value of <code>{(A%7) x (B%7)}</code>.</p>\r\n<p>Hence, the output is <code>25</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= Size of S <= 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "grow_25sep",
        "company_id": 530
    },
    {
        "id": 1519,
        "title": "Good Subsequences",
        "problem_statement": "<h1>Good Subsequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An array A has N elements, a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>N</sub>. A subsequence of the array is called good if the bitwise OR of all the elements present in that subsequence is K.</p>\r\n<p>Find the maximum sum of all the indices of the elements present in a good subsequence.</p>\r\n\r\n<p><strong>Note</strong></p>\r\n<p>A subsequence is a sequence that can be derived from the array by removing zero or more elements, without changing the order of the remaining elements. Consider 1-based indexing.</p>\r\n\r\n<p><strong>Function Description</strong></p>\r\n<p>In the provided code snippet, implement the provided <code>goodSubsequence(...)</code> method to find the maximum sum of all the indices of the elements present in a good subsequence. You can write your code in the space below the phrase \"WRITE YOUR LOGIC HERE\". There will be multiple test cases running so the Input and Output should match exactly as provided. The base Output variable <code>result</code> is set to a default value of -404 which can be modified. Additionally, you can add or remove these output variables.</p>\r\n\r\n<p><strong>Input Format</strong></p>\r\n<p>The first line contains two integers N, denoting the number of elements in the array, and K, denoting the required bitwise OR value. The next line contains N space-separated integers denoting the elements in the array A.</p>\r\n\r\n<p><strong>Output Format</strong></p>\r\n<p>The output contains a single integer denoting the maximum sum of all the indices of the elements present in a good subsequence.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 3\r\n4 1 2 5 3\r\nOutput:\r\n10</code></pre>\r\n<p><strong>Explanation:</strong> The subsequences having bitwise OR as 3 (value of K) are [3], [1, 2], and [1, 2, 3]. The sum of indices of the elements present in the subsequences is 5, 5 (2 + 3), and 10 (2 + 3 + 5), respectively. The maximum sum of the indices is 10. Hence, the output is 10.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 &lt;= N &lt;= 20</li>\r\n<li>1 &lt;= K &lt;= 20000</li>\r\n<li>1 &lt;= A[i] &lt;= 10000</li>\r\n</ul>\r\n\r\n<p><strong>Provided Code Snippet (for implementation context):</strong></p>\r\n<pre><code class='language-javascript'>int goodSubsequence(int N, int K, int A[]){\r\n    //this is default OUTPUT. You can change it.\r\n    int result = -404;\r\n    //write your Logic here:\r\n\r\n\r\n    return result;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "grow_25sep",
        "company_id": 530
    }
]