[
    {
        "id": 1262,
        "title": "Maximum Reward Points",
        "problem_statement": "<h1>Maximum Reward Points</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Two interns at HackerRank are assigned to complete a total of <code>n</code> tasks. Each task can be completed by either intern. The first intern earns <code>reward_1[i]</code> points for finishing the <code>i</code>th task, while the second intern earns <code>reward_2[i]</code> points for the same task.</p>\r\n<p>To maximize the total reward points for both interns, determine the highest possible combined reward points if the first intern is required to complete <code>k</code> tasks, and the second intern completes the remaining tasks.</p>\r\n<p><strong>Note:</strong> The <code>k</code> tasks for the first intern can be any of the <code>n</code> tasks.</p>\r\n\r\n<h3>Example Walkthrough:</h3>\r\n<p>Consider <code>n = 5</code>, <code>reward_1 = [5, 4, 3, 2, 1]</code>, <code>reward_2 = [1, 2, 3, 4, 5]</code> and <code>k = 3</code>.</p>\r\n<p>Intern 1 completes 3 tasks, while Intern 2 completes the other 2. To maximize the points, Intern 1 takes the first 3 tasks, and Intern 2 takes the last 2 tasks. The total reward points are 5 + 4 + 3 (from Intern 1) + 4 + 5 (from Intern 2) = 21, which is the maximum possible. So, the answer is 21.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumRewardPoints</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int k</code>: the number of tasks that have to be completed by intern 1</li>\r\n    <li><code>int reward_1[n]</code>: the reward points earned by intern 1 for each task</li>\r\n    <li><code>int reward_2[n]</code>: the reward points earned by intern 2 for each task</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the maximum possible combined reward points when intern 1 completes exactly <code>k</code> tasks.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10⁵</code></li>\r\n    <li><code>0 &le; k &le; n</code></li>\r\n    <li><code>1 &le; reward_1[i] &le; 10⁴</code></li>\r\n    <li><code>1 &le; reward_2[i] &le; 10⁴</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: k = 3, n = 4, reward_1 = [1, 2, 3, 2], reward_2 = [1, 2, 3, 2]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 3 tasks, and intern 2 completes the remaining task. The reward points for each task are the same for both interns, so any task can be picked up by either intern. Total reward points = 1 + 2 + 3 + 2 = 8.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: k = 2, n = 4, reward_1 = [2, 3, 4, 2], reward_2 = [1, 1, 1, 1]\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 2 tasks, and intern 2 completes the remaining 2 tasks. In order to maximize the points gained, intern 1 completes the second and third tasks, while intern 2 completes the first and fourth tasks. Total reward points gained = 4 + 3 (from intern 1) + 1 + 1 (from intern 2) = 9.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_30Aug",
        "company_id": 429
    },
    {
        "id": 1263,
        "title": "Token Management System",
        "problem_statement": "<h1>Token Management System</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a session-based authentication system that manages user sessions with unique tokens and configurable time-to-live (TTL) values. Each token has an expiration time calculated by adding the TTL (in seconds) to the creation time. Tokens can be renewed before expiration to extend their validity.</p>\r\n<p>The system must support these three operations:</p>\r\n<ol>\r\n    <li><p><strong>generate &lt;token_id&gt; &lt;current_time&gt;</strong>: At the current time, creates a new token with the specified ID.</p></li>\r\n    <li><p><strong>renew &lt;token_id&gt; &lt;current_time&gt;</strong>: At the current time, extends an existing, unexpired token's expiration time. The request is ignored if the token has expired or does not exist.</p></li>\r\n    <li><p><strong>count &lt;current_time&gt;</strong>: Returns the number of unexpired tokens at the current time.</p></li>\r\n</ol>\r\n<p><strong>Important Note:</strong> Token expiration is evaluated before processing any actions at the same timestamp. If a token's expiration time exactly matches the current time, the token is considered expired and cannot be renewed or counted.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getUnexpiredTokens</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><p><strong>int time_to_live:</strong> the time to live for a token</p></li>\r\n    <li><p><strong>vector&lt;string&gt; queries:</strong> the queries</p></li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><strong>vector&lt;int&gt;:</strong> the results of the count queries, in the same order as they appear.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: time_to_live = 5, queries = [\"generate aaa 1\", \"renew aaa 2\", \"count 6\", \"generate bbb 7\", \"renew aaa 8\", \"count 10\", \"count 15\"]\r\nOutput: [1,0]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nInitially, no tokens.\r\n1. \"generate aaa 1\": Token 'aaa' created at time 1. Expires at 1 + 5 = 6.\r\n2. \"renew aaa 2\": Token 'aaa' renewed at time 2. Expires at 2 + 5 = 7. (Original expiration at 6 is before current time 2, so it's valid for renewal).\r\n3. \"count 6\": At time 6, 'aaa' is still valid (expires at 7). Count = 1.\r\n4. \"generate bbb 7\": Token 'bbb' created at time 7. Expires at 7 + 5 = 12.\r\n5. \"renew aaa 8\": At time 8, 'aaa' expired at time 7. Renewal ignored.\r\n6. \"count 10\": At time 10, 'bbb' is valid (expires at 12). Count = 1.\r\n7. \"count 15\": At time 15, 'bbb' expired at time 12. Count = 0.\r\nThe problem statement implies that the count queries at 6 and 15 result in 1 and 0 respectively, forming the output <code>[1, 0]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ntime_to_live = 35\r\nqueries[] size q = 6\r\nqueries = [\"generate token1 3\", \"count 4\", \"generate token2 6\", \"count 7\", \"generate token3 11\", \"count 41\"]\r\nOutput:\r\n1\r\n2\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Query No.</th>\r\n            <th>Action</th>\r\n            <th>Token</th>\r\n            <th>Timestamp</th>\r\n            <th>Expiry Timestamp</th>\r\n            <th>Unexpired Tokens</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>1</td>\r\n            <td>Generate</td>\r\n            <td>token1</td>\r\n            <td>3</td>\r\n            <td>38</td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>2</td>\r\n            <td>Count</td>\r\n            <td></td>\r\n            <td>4</td>\r\n            <td></td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>3</td>\r\n            <td>Generate</td>\r\n            <td>token2</td>\r\n            <td>6</td>\r\n            <td>41</td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>4</td>\r\n            <td>Count</td>\r\n            <td></td>\r\n            <td>7</td>\r\n            <td></td>\r\n            <td>2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>5</td>\r\n            <td>Generate</td>\r\n            <td>token3</td>\r\n            <td>11</td>\r\n            <td>46</td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>6</td>\r\n            <td>Count</td>\r\n            <td></td>\r\n            <td>41</td>\r\n            <td></td>\r\n            <td>1</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\ntime_to_live = 9\r\nqueries[] size q = 6\r\nqueries = [\"generate token1 3\", \"renew token1 5\", \"generate token2 7\", \"renew token2 8\", \"generate token3 9\", \"count 12\"]\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Query No.</th>\r\n            <th>Action</th>\r\n            <th>Token</th>\r\n            <th>Timestamp</th>\r\n            <th>Expiry Timestamp</th>\r\n            <th>Unexpired Tokens</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>1</td>\r\n            <td>Generate</td>\r\n            <td>token1</td>\r\n            <td>3</td>\r\n            <td>12</td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>2</td>\r\n            <td>Renew</td>\r\n            <td>token1</td>\r\n            <td>5</td>\r\n            <td>14</td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>3</td>\r\n            <td>Generate</td>\r\n            <td>token2</td>\r\n            <td>7</td>\r\n            <td>16</td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>4</td>\r\n            <td>Renew</td>\r\n            <td>token2</td>\r\n            <td>8</td>\r\n            <td>17</td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>5</td>\r\n            <td>Generate</td>\r\n            <td>token3</td>\r\n            <td>9</td>\r\n            <td>18</td>\r\n            <td></td>\r\n        </tr>\r\n        <tr>\r\n            <td>6</td>\r\n            <td>Count</td>\r\n            <td></td>\r\n            <td>12</td>\r\n            <td></td>\r\n            <td>3</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><p><code>1 &lt;= q &lt;= 10<sup>5</sup></code></p></li>\r\n    <li><p><code>1 &lt;= time_to_live &lt;= 10<sup>8</sup></code></p></li>\r\n    <li><p><code>1 &lt;= current_time &lt;= 10<sup>8</sup></code></p></li>\r\n    <li><p><code>1 &lt;= length of token_id &lt;= 10</code></p></li>\r\n    <li><p><code>token_id</code> consists only of lowercase letters and numbers.</p></li>\r\n    <li><p>All queries of type <code>generate</code> will contain unique values of <code>token_id</code>.</p></li>\r\n    <li><p><code>current_time</code> is in non-decreasing order in the queries.</p></li>\r\n</ul>\r\n\r\n<p>The function signature to be implemented is:</p>\r\n<pre><code class='language-javascript'>vector&lt;int&gt; getUnexpiredTokens(int time_to_live, vector&lt;string&gt; queries) {\r\n    // Complete the function\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_30Aug",
        "company_id": 429
    }
]