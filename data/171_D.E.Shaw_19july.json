[
    {
        "id": 528,
        "title": "Collect Files",
        "problem_statement": "<h1>Collect Files</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In an office, there is a stack of files arranged in a line, each with an importance level. These files are numbered consecutively from 1 to n, with their importance increasing as the number increases. An office employee is tasked with collecting these files and delivering them to the manager's desk.</p>\r\n<p>To ensure the process is smooth and efficient, the employee follows this strategy:</p>\r\n<ol>\r\n    <li>The employee picks up the leftmost file.</li>\r\n    <li>The employee moves to the next file on the right.</li>\r\n    <li>The employee picks up the file if its importance is strictly less than the last file they picked up.</li>\r\n    <li>Repeat step 2 until there are no more files to the right.</li>\r\n    <li>The employee places all the collected files on the manager's desk and returns to the start.</li>\r\n    <li>Repeat from step 1 until all files are collected.</li>\r\n</ol>\r\n<p>Each trip from left to right to collect files is called a \"round\". Determine the list of files the employee collects during each round.</p>\r\n<p>Complete the function <code>collectFiles</code> in the editor below.</p>\r\n<p><code>collectFiles</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int files[n]</code>: the files numbers as arranged from left to right</li>\r\n</ul>\r\n<p>Returns</p>\r\n<ul>\r\n    <li><code>int[][]</code>: 2-d array of lists of files collected each round</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: files = [3, 4, 5, 1, 2]\r\nOutput: [[3, 1], [4, 2], [5]]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>1st round:</strong> The employee picks up file 3 and moves to file 4. File 4 is more important, so the employee skips it and moves to file 5. File 5 is more important, so the employee skips it and moves to file 1. File 1 is less important than any file the employee has, so they pick it up and move to file 2. File 2 is more important than File 1. The end is reached, and the employee delivers files [3, 1] to the manager's desk. The remaining files are [4, 5, 2].</li>\r\n    <li><strong>2nd round:</strong> The employee returns to the left and picks up file 4. Using the same logic, the employee skips file 5 and picks up file 2. After this round, the employee delivers files [4, 2] to the manager's desk. The remaining file is [5].</li>\r\n    <li><strong>3rd round:</strong> The remaining file 5 is collected and delivered to the manager's desk. All files have been processed.</li>\r\n</ul>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: files = [5, 4, 3, 2, 1, 3]\r\nOutput: [[5, 4, 3, 2, 1], [3]]</code></pre>\r\n<p><strong>Explanation:</strong> All files collected in first round: 5 &gt; 4 &gt; 3 &gt; 2 &gt; 1, file collected in second round: 3.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: files = [3, 4, 2, 1, 5]\r\nOutput: [[3, 2, 1], [4], [5]]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>Round 1:</strong> Pick up 3, then 2 then 1. Deliver [3, 2, 1] leaving [4, 5].</li>\r\n    <li><strong>Round 2:</strong> Pick up 4. Deliver [4] leaving [5].</li>\r\n    <li><strong>Round 3:</strong> Pick up 5. Deliver [5]. There are no more files.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 3 * 10^5</code></li>\r\n    <li><code>1 &lt;= files[i] &lt;= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "D.E.Shaw_19july",
        "company_id": 171
    },
    {
        "id": 529,
        "title": "Perfect Team Lineups",
        "problem_statement": "```html\r\n<h1>Perfect Team Lineups</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a sports league, each player is assigned a rank from 1 to k. You are analyzing all possible ways to arrange n players in a lineup, where each player's rank is an integer from 1 to k.</p>\r\n<p>A team is defined as a group of k consecutive players (a contiguous subarray of length k). A team is considered perfect if it contains every rank from 1 to k exactly once (the team is a permutation of {1, 2, ..., k}).</p>\r\n<p>The cost of a lineup is the maximum number of non-overlapping perfect teams that can be selected from it. Each player can belong to at most one perfect team.</p>\r\n<p>For example, suppose n = 10, k = 3, and the array is [1, 2, 1, 3, 2, 3, 2, 1, 3]. In that case, its cost is 2 because, for example, we can choose the subarrays from the 2nd element to the 4th element and from the 7th element to the 9th element, and we can show that it's impossible to choose more than 2 subarrays.</p>\r\n<p>Calculate the sum of costs over all possible lineups of length n (all arrays of length n with elements from 1 to k). Output the result modulo 998244353.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 2, k = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> All possible lineups and their costs are:</p>\r\n<ul>\r\n    <li>[1, 1] -> Both players have rank 1, so they cannot form a perfect team (need both ranks 1 and 2). Hence, the cost is 0.</li>\r\n    <li>[1, 2] -> Players have ranks 1 and 2. The only possible team contains both ranks exactly once. Hence, the cost is 1.</li>\r\n    <li>[2, 1] -> Players have ranks 2 and 1. The only possible team contains both ranks exactly once. Hence, the cost is 1.</li>\r\n    <li>[2, 2] -> Both players have rank 2, so they cannot form a perfect team (need both ranks 1 and 2). Hence, the cost is 0.</li>\r\n</ul>\r\n<p>Hence, the sum of costs over all possible lineups is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, k = 2\r\nOutput: 18</code></pre>\r\n<p><strong>Explanation:</strong> Some possible lineups and their costs are:</p>\r\n<ul>\r\n    <li>[1, 2, 1, 2] -> There are two non-overlapping perfect teams: the first and second players, and the third and fourth players. Both teams contain both ranks 1 and 2. Hence, the cost is 2.</li>\r\n    <li>[1, 1, 1, 2] -> Only one perfect team can be formed: the third and fourth players. This pair contains both ranks 1 and 2. Hence, the cost is 1.</li>\r\n    <li>[1, 1, 1, 1] -> No pair of consecutive players contains both ranks 1 and 2, so no perfect team can be formed. Hence, the cost is 0.</li>\r\n    <li>[2, 1, 1, 2] -> There are two non-overlapping perfect teams: the first and second players, and the third and fourth players. Both pairs contain both ranks 1 and 2. Hence, the cost is 2.</li>\r\n</ul>\r\n<p>The sum of costs over all possible lineups is 18. Hence, the answer is 18.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 3, k = 2\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong> Some possible lineups and their costs are:</p>\r\n<ul>\r\n    <li>[1, 2, 3] -> Only one perfect team can be formed: the first, second, and third players. Hence, the cost is 1.</li>\r\n    <li>[1, 3, 2] -> Only one perfect team can be formed: the second, third, and fourth players. Hence, the cost is 1.</li>\r\n    <li>[3, 1, 2] -> Only one perfect team can be formed: the first, second, and third players. Hence, the cost is 1.</li>\r\n    <li>[3, 2, 3, 1] -> Only one perfect team can be formed: the second, third, and fourth players. Hence, the cost is 1.</li>\r\n</ul>\r\n<p>The sum of costs over all possible lineups is 30. Hence, the answer is 30.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findTotalCost</code> in the editor below.</p>\r\n<p><code>findTotalCost</code> has the following parameter:</p>\r\n<ul>\r\n    <li><strong>int n:</strong> the number of players</li>\r\n    <li><strong>int k:</strong> the maximum rank of a player</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><strong>int:</strong> the total sum of cost over all possible lineups modulo 998244353.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; k &le; n &le; 4000</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "D.E.Shaw_19july",
        "company_id": 171
    }
]