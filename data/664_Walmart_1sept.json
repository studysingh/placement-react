[
    {
        "id": 1883,
        "title": "Diagonal Sum of Spiral Matrix",
        "problem_statement": "<h1>Diagonal Sum of Spiral Matrix</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Anisha is starting a new business setting up safe deposit lockers across the city. For a fee, customers can temporarily store their luggage or any other articles. They can lock and unlock the locker using an app. When storing articles, the customer locks the locker by providing an <strong>odd number</strong> of their choice, <code>N</code>, as the lock. When recovering the articles, the customer needs to use the key provided by the app. The app uses <code>N</code> to generate the key, and provides it to the customer only after receiving payment for the locker use.</p>\r\n<p>Anisha has designed a web service that generates the unlock key <code>K</code> by using <code>N</code>. The web service first generates a matrix of size <code>NxN</code>. The matrix is filled with numbers starting from <code>1</code> to <code>N<sup>2</sup></code>, with <code>1</code> always at the center of the matrix. The rest of the numbers (<code>2</code> to <code>N<sup>2</sup></code>) are filled in sequence around the center, in a clockwise direction. A property of this filling method is that only odd numbers are at the corners of the matrix. Once the matrix is complete, the sum of all numbers on both the diagonals of the matrix is returned as <code>K</code>.</p>\r\n<p>Write a program that accepts <code>N</code> and returns <code>K</code>, to help Anisha.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>N</code> is an odd integer.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5\r\nOutput: 101</code></pre>\r\n<p><strong>Explanation:</strong> From the sample input given <code>N</code> value is <code>5</code>. The matrix is constructed as below.</p>\r\n<pre><code class='language-text'>21 22 23 24 25\r\n20  7  8  9 10\r\n19  6  1  2 11\r\n18  5  4  3 12\r\n17 16 15 14 13</code></pre>\r\n<p>The numbers on the diagonals are <code>21, 25, 7, 9, 1, 5, 3, 17, 13</code>. The sum of these numbers is <code>21 + 25 + 7 + 9 + 1 + 5 + 3 + 17 + 13 = 101</code>, which is printed as the output key.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 9\r\nOutput: 537</code></pre>\r\n<p><strong>Explanation:</strong> For <code>N</code> value <code>9</code>, the matrix is constructed as below.</p>\r\n<pre><code class='language-text'>73 74 75 76 77 78 79 80 81\r\n72 43 44 45 46 47 48 49 50\r\n71 42 21 22 23 24 25 26 51\r\n70 41 20  7  8  9 10 27 52\r\n69 40 19  6  1  2 11 28 53\r\n68 39 18  5  4  3 12 29 54\r\n67 38 17 16 15 14 13 30 55\r\n66 37 36 35 34 33 32 31 56\r\n65 64 63 62 61 60 59 58 57</code></pre>\r\n<p>The numbers on the diagonals are <code>73, 81, 43, 49, 21, 25, 7, 9, 1, 5, 3, 17, 13, 33, 31, 65, 57</code>. The sum of these diagonal elements is <code>K = 537</code>.</p>\r\n\r\n<h2>Starter Code</h2>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nint sumOfBothDiagonal(int N) {\r\n    //In the Given Data, \"N\" is the size of mattrix, Return sum of both the diag\r\n    int sum = -1;\r\n    //WRITE YOUR CODE HERE.\r\n\r\n\r\n    return sum;\r\n}\r\n\r\nint main() {\r\n    int n;\r\n    cin >> n;\r\n    cout &lt;&lt; sumOfBothDiagonal(n);\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nclass Solution {\npublic:\n    long long calculateDiagonalSum(int N) {\n        // Core logic to calculate the sum of diagonals of the spiral matrix goes here.\n        // The problem can be solved mathematically without constructing the matrix.\n        // The four corners of each k x k square (where k = 3, 5, ..., N)\n        // form an arithmetic progression.\n        // For a k x k square, the top-right corner is k*k.\n        // The other corners are k*k - (k-1), k*k - 2*(k-1), and k*k - 3*(k-1).\n        // The sum for the k x k layer is 4*k*k - 6*(k-1).\n        // We need to sum this for k = 3, 5, ..., N, and add 1 (the center).\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int N;\n    std::cin >> N;\n    Solution solution;\n    long long result = solution.calculateDiagonalSum(N);\n    std::cout << result << std::endl;\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Walmart_1sept",
        "company_id": 664
    },
    {
        "id": 1884,
        "title": "Fifth Nearest Palindrome",
        "problem_statement": "<h1>Fifth Nearest Palindrome</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A State Government organizes a lottery competition every month and distributes uniquely numbered tickets for the same. At the time of result declaration, a random integer N is chosen by an automatic system. The person whose lottery ticket number X is the fifth nearest palindrome to N would be declared the winner of the lottery. Write a program to help the State Government find the winning ticket number X if you are given N.</p>\r\n<p>A palindrome is a number that remains the same when its digits are reversed eg. 484, 99, etc.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and test cases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input contains N, which is the random integer chosen by the automatic system.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should contain the ticket number of the winner, X.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 45\r\nOutput: 22</code></pre>\r\n<p><strong>Explanation:</strong> N = 45. The palindromes close to 45 and their distance from 45 are given in the table below:</p>\r\n<p>\r\n<table border=\"1\">\r\n    <thead>\r\n        <tr>\r\n            <th>Palindrome number</th>\r\n            <th>Distance from 45</th>\r\n            <th>Nearest Number</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>44</td>\r\n            <td>1</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>33</td>\r\n            <td>12</td>\r\n            <td>3</td>\r\n        </tr>\r\n        <tr>\r\n            <td>22</td>\r\n            <td>23</td>\r\n            <td>5</td>\r\n        </tr>\r\n        <tr>\r\n            <td>11</td>\r\n            <td>34</td>\r\n            <td>7</td>\r\n        </tr>\r\n        <tr>\r\n            <td>55</td>\r\n            <td>10</td>\r\n            <td>2</td>\r\n        </tr>\r\n        <tr>\r\n            <td>66</td>\r\n            <td>21</td>\r\n            <td>4</td>\r\n        </tr>\r\n        <tr>\r\n            <td>77</td>\r\n            <td>32</td>\r\n            <td>6</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n</p>\r\n<p>The fifth nearest palindrome for 45 is 22. Hence the output is 22.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 10\r\nOutput: 55</code></pre>\r\n<p><strong>Explanation:</strong> N = 10.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Single-digit integers are not considered palindromes.</li>\r\n    <li>If there are two integers at the same distance, the larger value gets preference.</li>\r\n</ul>\r\n\r\n<h2>Code Structure (C++)</h2>\r\n<pre><code class='language-cpp'>int winnerTicketNumber(long n) {\r\n    // n contains the random integer generated by automated system\r\n    int res = 0; // store the ticket number of winner in res.\r\n    // WRITE YOUR CODE HERE\r\n    return res;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cmath>\n\nclass Solution {\npublic:\n    long winnerTicketNumber(long n) {\n        // n contains the random integer generated by automated system\n        long res = 0; // store the ticket number of winner in res.\n        // WRITE YOUR CODE HERE\n        return res;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    long n;\n    std::cin >> n;\n    Solution sol;\n    long result = sol.winnerTicketNumber(n);\n    std::cout << result << std::endl;\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Walmart_1sept",
        "company_id": 664
    }
]