[
    {
        "id": 1926,
        "title": "Count Of Shops",
        "problem_statement": "<h1>Count Of Shops</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a Market that has N shops. You are given a 0-indexed array of paths where <code>paths[i]</code> indicate that there is a directed edge from shop <code>i</code> to shop <code>paths[i]</code>.</p>\r\n<p>Assume the following process in the graph:</p>\r\n<p>You start from any shop 's' and keep visiting other shops through paths until you reach a shop that you have already visited before on this same process.</p>\r\n<p>Return an array <code>count</code> where <code>Count[i]</code> indicates the number of different shops that you will visit if you start the process from shop <code>i</code>.</p>\r\n<p><strong>Note:</strong> There are only N directed edges (meaning each shop has exactly one outgoing edge).</p>\r\n\r\n<h3>Input Format</h3>\r\n<ul>\r\n    <li>The first line of input contains an integer N.</li>\r\n    <li>The next N lines of the input contain N integers, representing the <code>paths</code> array where the i-th integer is <code>paths[i]</code>.</li>\r\n</ul>\r\n\r\n<h3>Output Format</h3>\r\n<p>It will be an array of counts that indicates the number of different shops that you will visit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n1\r\n2\r\n0\r\n0\r\nOutput:\r\n3\r\n3\r\n3\r\n4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>N=4</p>\r\n<p>The paths define the following directed edges:</p>\r\n<ul>\r\n    <li>Shop 0 -> Shop 1</li>\r\n    <li>Shop 1 -> Shop 2</li>\r\n    <li>Shop 2 -> Shop 0</li>\r\n    <li>Shop 3 -> Shop 0</li>\r\n</ul>\r\n<p>This forms a graph with a cycle 0 -> 1 -> 2 -> 0, and shop 3 pointing to shop 0.</p>\r\n<p>Let's trace the visits for each starting shop:</p>\r\n<ul>\r\n    <li>If <code>i=0</code>, the path is 0 -> 1 -> 2 -> 0. The distinct shops visited before repeating are {0, 1, 2}. <code>Count[0] = 3</code>.</li>\r\n    <li>If <code>i=1</code>, the path is 1 -> 2 -> 0 -> 1. The distinct shops visited before repeating are {1, 2, 0}. <code>Count[1] = 3</code>.</li>\r\n    <li>If <code>i=2</code>, the path is 2 -> 0 -> 1 -> 2. The distinct shops visited before repeating are {2, 0, 1}. <code>Count[2] = 3</code>.</li>\r\n    <li>If <code>i=3</code>, the path is 3 -> 0 -> 1 -> 2 -> 0. The distinct shops visited before repeating are {3, 0, 1, 2}. <code>Count[3] = 4</code>.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1\r\n0\r\n1\r\n2\r\n3\r\nOutput:\r\n2\r\n2\r\n3\r\n4\r\n5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>N=5</p>\r\n<p>The paths define the following directed edges:</p>\r\n<ul>\r\n    <li>Shop 0 -> Shop 1</li>\r\n    <li>Shop 1 -> Shop 0</li>\r\n    <li>Shop 2 -> Shop 1</li>\r\n    <li>Shop 3 -> Shop 2</li>\r\n    <li>Shop 4 -> Shop 3</li>\r\n</ul>\r\n<p>Let's trace the visits for each starting shop:</p>\r\n<ul>\r\n    <li>If <code>i=0</code>, the path is 0 -> 1 -> 0. Distinct shops: {0, 1}. <code>Count[0] = 2</code>.</li>\r\n    <li>If <code>i=1</code>, the path is 1 -> 0 -> 1. Distinct shops: {1, 0}. <code>Count[1] = 2</code>.</li>\r\n    <li>If <code>i=2</code>, the path is 2 -> 1 -> 0 -> 1. Distinct shops: {2, 1, 0}. <code>Count[2] = 3</code>.</li>\r\n    <li>If <code>i=3</code>, the path is 3 -> 2 -> 1 -> 0 -> 1. Distinct shops: {3, 2, 1, 0}. <code>Count[3] = 4</code>.</li>\r\n    <li>If <code>i=4</code>, the path is 4 -> 3 -> 2 -> 1 -> 0 -> 1. Distinct shops: {4, 3, 2, 1, 0}. <code>Count[4] = 5</code>.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= paths[i] &lt; N</code></li>\r\n</ul>\r\n\r\n<h2>Boilerplate Code (C++)</h2>\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'countVisitedShops' function below.\r\n *\r\n * The function is expected to return an INTEGER ARRAY.\r\n * The function accepts INTEGER ARRAY paths as parameter.\r\n */\r\n\r\nstd::vector&lt;int&gt; countVisitedShops(std::vector&lt;int&gt; paths) {\r\n    // Write your code here\r\n}\r\n\r\nint main() {\r\n    // ... main function for input/output handling ...\r\n    return 0;\r\n}\r\n</code></pre>\r\n\r\n<h2>Boilerplate Code (Java)</h2>\r\n<pre><code class='language-java'>import java.util.List;\r\nimport java.util.ArrayList;\r\n\r\npublic class Result {\r\n    /*\r\n     * Complete the 'countVisitedShops' function below.\r\n     *\r\n     * The function is expected to return a List<Integer>.\r\n     * The function accepts List<Integer> paths as parameter.\r\n     */\r\n    public static List<Integer> countVisitedShops(List<Integer> paths) {\r\n        // Write your code here\r\n        return new ArrayList<>(); // Placeholder return\r\n    }\r\n}\r\n\r\n// public class Source {\r\n//     // ... main class for input/output handling ...\r\n// }\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "infoedge_18oct",
        "company_id": 679
    }
]