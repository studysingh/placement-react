[
    {
        "id": 1812,
        "title": "Largest Pothole Indicator",
        "problem_statement": "<h1>Largest Pothole Indicator</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a road consisting of N segments (numbered from 0 to N-1) described by an array R of integers. The K-th segment is described by an integer R[K]. If the segment is smooth (there is no pothole in it), then R[K] = 0; otherwise it contains a pothole of depth R[K]. Consecutive potholes join together and create a larger group of potholes.</p>\r\n<p>The pothole indicator is the number of consecutive single potholes that have joined into a pothole group, multiplied by the depth of the deepest pothole among them. For example, the indicator for a group of three consecutive joined potholes of sizes [1, 4, 1] is 3 * 4 = 12.</p>\r\n<p>What is the largest pothole indicator on the entire road?</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-cpp'>int solution(vector&lt;int&gt; &amp;R);</code></pre>\r\n<p>that, given an array R of N integers, returns the largest pothole indicator on the road.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: R = [0, 2, 1, 1, 0, 4, 1]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> The potholes in the fragment [2, 1, 1] join into one pothole group. It is made of three segments and the deepest pothole among them is of depth 2, so its pothole indicator is equal to 3 * 2 = 6. The potholes in the fragment [4, 1] join into another pothole group. It is made of two consecutive potholes and the deepest pothole among them is of depth 4, so its pothole indicator is equal to 2 * 4 = 8.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: R = [1, 4, 1, 0, 5, 2, 3, 0, 8]\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> The consecutive potholes that join into three larger pothole groups are as follows:</p>\r\n<ul>\r\n    <li>[1, 4, 1] with indicator 3 * 4 = 12;</li>\r\n    <li>[5, 2, 3] with indicator 3 * 5 = 15;</li>\r\n    <li>[8] with indicator 1 * 8 = 8.</li>\r\n</ul>\r\n<p>The largest pothole indicator is 15.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: R = [9, 8, 7, 0, 0, 0, 2, 3, 6, 4]\r\nOutput: 27</code></pre>\r\n<p><strong>Explanation:</strong> The consecutive potholes that join into two larger pothole groups are as follows:</p>\r\n<ul>\r\n    <li>[9, 8, 7] with indicator 3 * 9 = 27;</li>\r\n    <li>[2, 3, 6, 4] with indicator 4 * 6 = 24.</li>\r\n</ul>\r\n<p>The largest pothole indicator is 27.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: R = [0, 0, 0]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> There are no potholes on the road, so the highest pothole indicator is equal to 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>Write an efficient algorithm for the following assumptions:</p>\r\n<ul>\r\n    <li><code>N</code> is an integer within the range <code>[1, 100,000]</code>.</li>\r\n    <li>Each element of array <code>R</code> is an integer within the range <code>[0, 9]</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <numeric>\n\nclass Solution {\npublic:\n    int solution(std::vector<int>& R) {\n        // TODO: Implement the solution logic here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement implies the vector is given, but doesn't specify N.\n    // In competitive programming, this usually means N is given on the first line.\n    // If the input is just one line of space-separated numbers, this part would need adjustment.\n    int n;\n    // Assuming N is provided. If not, this part needs to be changed to read until EOF or newline.\n    // For example, reading from a single line:\n    // std::string line;\n    // std::getline(std::cin, line);\n    // std::stringstream ss(line);\n    // int num;\n    // while (ss >> num) {\n    //     R.push_back(num);\n    // }\n    // n = R.size();\n    \n    // Standard competitive programming input format:\n    std::cin >> n;\n    std::vector<int> R(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> R[i];\n    }\n\n    Solution sol;\n    int result = sol.solution(R);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "citi_14oct",
        "company_id": 639
    },
    {
        "id": 1813,
        "title": "Find Two Positive Integers Without Zero",
        "problem_statement": "<h1>Find Two Positive Integers Without Zero</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an integer N, you want to find two positive integers A and B such that:</p>\r\n<ul>\r\n    <li>A + B = N</li>\r\n    <li>neither A nor B contains any 0 in its decimal representation.</li>\r\n</ul>\r\n<p>Write a function:</p>\r\n<pre><code class='language-cpp'>vector<int> solution(int N);</code></pre>\r\n<p>that, given an integer N, returns a two-element array containing A and B, which fulfills the criteria described above.</p>\r\n<p>In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 12\r\nOutput: [7,5]</code></pre>\r\n<p><strong>Explanation:</strong> Some other valid results could be [5, 7], [6, 6], [4, 8], [8, 4]. It may not return [10, 2], as the first number in this pair contains a zero.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 104\r\nOutput: [31,73]</code></pre>\r\n<p><strong>Explanation:</strong> Some other valid results could be [62, 42] or [42, 62]. It may not return [50, 54] or [104, 0] though.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: N = 200\r\nOutput: [134,66]</code></pre>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: N = 3\r\nOutput: [2,1]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N is an integer within the range [2..500,000].</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @brief Finds two positive integers A and B such that A + B = N and neither A nor B contains the digit 0.\n     * @param N The target integer.\n     * @return A vector containing two integers [A, B] that satisfy the conditions.\n     */\n    std::vector<int> solution(int N) {\n        // Core logic to be implemented here\n    }\n};\n\nint main() {\n    // Fast I/O\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    Solution sol;\n    std::vector<int> result = sol.solution(N);\n\n    if (result.size() == 2) {\n        std::cout << result[0] << \" \" << result[1] << std::endl;\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "citi_14oct",
        "company_id": 639
    },
    {
        "id": 1814,
        "title": "Longest Switching Slice",
        "problem_statement": "<h1>Longest Switching Slice</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>We call an array <em>switching</em> if all numbers in even positions are equal and all numbers in odd positions are equal.</p>\r\n<p>For example: <code>[3, -7, 3, -7]</code> and <code>[4, 4, 4, 4]</code> are switching, but <code>[5, 5, 5, 4]</code> and <code>[-3, 2, 3]</code> are not switching.</p>\r\n<p>What is the length of the longest switching slice (continuous fragment) in a given array A?</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-javascript'>int solution(vector&lt;int&gt; &amp;A);</code></pre>\r\n<p>that, given an array A consisting of N integers, returns the length of the longest switching slice in A.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = [3, 2, 3, 2, 3]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The function should return 5, because the whole array is switching.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = [7, 4, -2, 4, -2, -9]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The longest switching slice is <code>[4, -2, 4, -2]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: A = [7, -5, -5, -5, 7, -1, 7]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There are two switching slices of equal length: <code>[-5, -5, -5]</code> and <code>[7, -1, 7]</code>.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: A = [4]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> A single-element slice is also a switching slice.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>N</code> is an integer within the range <code>[1, 100,000]</code>.</li>\r\n    <li>Each element of array <code>A</code> is an integer within the range <code>[-1,000,000,000 .. 1,000,000,000]</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <ios>\n\nclass Solution {\npublic:\n    int solution(std::vector<int>& A) {\n        // Your implementation here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement does not specify N, but it's a standard competitive programming practice\n    // to read the size of the array first.\n    int n;\n    std::cin >> n;\n    std::vector<int> A(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> A[i];\n    }\n\n    Solution sol;\n    int result = sol.solution(A);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "citi_14oct",
        "company_id": 639
    },
    {
        "id": 1825,
        "title": "Smallest Number With Given Digit Sum",
        "problem_statement": "<h1>Smallest Number With Given Digit Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Write a function `solution` that, given integer N, returns the smallest non-negative integer whose individual digits sum to N.</p>\r\n<p>In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 16\r\nOutput: 79</code></pre>\r\n<p><strong>Explanation:</strong> There are many numbers whose digits sum to 16 (for example: 79, 97, 808, 5551, 22822, etc.). The smallest such number is 79 (7 + 9 = 16).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 19\r\nOutput: 199</code></pre>\r\n<p><strong>Explanation:</strong> The sum of digits is 1 + 9 + 9 = 19.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: N = 7\r\nOutput: 7</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N is an integer within the range [0..50].</li>\r\n</ul>\r\n\r\n<h2>Code Structure (C++)</h2>\r\n<pre><code class='language-cpp'>int solution(int N) {\r\n    // Implement your solution here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int solution(int N) {\n        // Implement your solution here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    Solution sol;\n    int result = sol.solution(N);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "citi_14oct",
        "company_id": 639
    },
    {
        "id": 1826,
        "title": "Find Common Letter Pair",
        "problem_statement": "<h1>Find Common Letter Pair</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>S</code> consisting of <code>N</code> strings. Every string is of the same length <code>M</code>. Your task is to find a pair of strings in array <code>S</code>, such that there exists a position in which both of the strings have the same letter. Both the index in array <code>S</code> and the positions in the strings are numbered from zero.</p>\r\n<p>For example, given <code>S = [\"abc\", \"bca\", \"dbe\"]</code>, string 0 (\"abc\") and string 2 (\"dbe\") have the same letter 'b' in position 1. On the other hand, for strings \"abc\" and \"bca\" there does not exist a position in which they have the same letter.</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-cpp'>vector&lt;int&gt; solution(vector&lt;string&gt; &amp;S);</code></pre>\r\n<p>that, given a zero-indexed array <code>S</code> of <code>N</code> strings, returns an array describing a pair of strings from <code>S</code> which share a common letter at some index. If there is no such pair, the function should return an empty array. If there is more than one correct answer, the function can return any of them.</p>\r\n<p>The result should be represented as an array containing three integers. The first two integers are the indexes in <code>S</code> of the strings belonging to the pair. The third integer is the position of the common letter. For <code>S = [\"abc\", \"bca\", \"dbe\"]</code>, as above, the result array should be represented as <code>[0, 2, 1]</code>. Another correct answer is <code>[2, 0, 1]</code>, as the order of indexes of strings does not matter.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = [\"abc\", \"bca\", \"dbe\"]\r\nOutput: [0, 2, 1]</code></pre>\r\n<p><strong>Explanation:</strong> String 0 (\"abc\") and string 2 (\"dbe\") both have the letter 'b' at position 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = [\"zzzz\", \"ferz\", \"zdsr\", \"fgtd\"]\r\nOutput: [0, 1, 3]</code></pre>\r\n<p><strong>Explanation:</strong> String 0 (\"zzzz\") and string 1 (\"ferz\") both have the letter 'z' at position 3. Another valid output could be <code>[1, 3, 0]</code>, which would reflect strings \"ferz\" and \"fgtd\" sharing the letter 'f' at position 0.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: S = [\"gr\", \"sd\", \"rg\"]\r\nOutput: []</code></pre>\r\n<p><strong>Explanation:</strong> There is no pair of strings that fulfills the criteria.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: S = [\"bdafg\", \"ceagi\"]\r\nOutput: [0, 1, 2]</code></pre>\r\n<p><strong>Explanation:</strong> String 0 (\"bdafg\") and string 1 (\"ceagi\") both have the letter 'a' at position 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>N</code> is an integer within the range <code>[1..30,000]</code>.</li>\r\n    <li><code>M</code> is an integer within the range <code>[1..2,000]</code>.</li>\r\n    <li>Each element of <code>S</code> consists only of lowercase English letters (a-z).</li>\r\n    <li><code>N * M &lt;= 30,000</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    std::vector<int> solution(std::vector<std::string>& S) {\n        // Your solution logic goes here\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n    std::vector<std::string> S(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> S[i];\n    }\n\n    Solution sol;\n    std::vector<int> result = sol.solution(S);\n\n    if (!result.empty()) {\n        std::cout << result[0] << \" \" << result[1] << \" \" << result[2] << std::endl;\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "citi_14oct",
        "company_id": 639
    }
]