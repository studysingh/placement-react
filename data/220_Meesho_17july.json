[
    {
        "id": 685,
        "title": "Maximum profit",
        "problem_statement": "<h1>Maximum profit</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two binary strings, S and Q of length N consisting of characters '0' or '1'.</p>\r\n<p>Consider a non-empty substring S1 of S and a non-empty substring Q1 of Q of the same lengths. Let X be the string obtained after taking the exclusive-or of S1 and Q1.</p>\r\n<p>You are given a Profit function:</p>\r\n<ul>\r\n    <li>Profit = floor(len(X) / 2^k) where X_B is the decimal value of binary representation of X and len(X) is the length of string X.</li>\r\n</ul>\r\n<p><strong>Notes</strong></p>\r\n<ul>\r\n    <li>A substring is a contiguous sequence of characters within a string. For example the list of all non-empty substrings of the string \"apple\" would be \"apple\", \"appl\", \"app\", \"ap\", \"a\", \"pple\", \"ppl\", \"pp\", \"p\", \"ple\", \"pl\", \"l\", \"e\".</li>\r\n    <li>Exclusive-or compares two input bits and generates one output bit. If the bits are the same, the result is 0. If the bits are different, the result is 1.</li>\r\n    <li>In the string X, the leftmost character is treated as the MSB (Most Significant Bit) and the rightmost character is treated as LSB (Least Significant Bit) of the binary representation.</li>\r\n</ul>\r\n<p>Find the maximum value of the Profit function.</p>\r\n\r\n<h2>Function description</h2>\r\n<p>Complete the MaxProfit function. This function takes the following 3 parameters and returns the maximum profit.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>N</code>: Represents the length of the strings.</li>\r\n    <li><code>S</code>: Represents the first string.</li>\r\n    <li><code>Q</code>: Represents the second string.</li>\r\n</ul>\r\n<p>Your function signature will be:</p>\r\n<pre><code class='language-c'>int MaxProfit (int N, char* S, char* Q) {\r\n    // write your code here\r\n}</code></pre>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains T, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains a single integer N denoting the length of the strings.</li>\r\n            <li>The second line contains the string S.</li>\r\n            <li>The third line contains the string Q.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>For each test case, return an integer value in a new line representing the maximum profit.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= T &lt;= 10</code></li>\r\n    <li><code>1 &lt;= N &lt;= 10^3</code></li>\r\n    <li><code>S_i, Q_i = {0, 1}, 1 &lt;= i &lt;= N</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n5\r\n11001\r\n10101\r\n3\r\n000\r\n111\r\nOutput:\r\n2\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The first line contains the number of test cases, T = 2.</p>\r\n<p>The first test case</p>\r\n<ul>\r\n    <li><strong>Given</strong>\r\n        <ul>\r\n            <li>N = 5</li>\r\n            <li>S = \"11001\"</li>\r\n            <li>Q = \"10101\"</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_17july",
        "company_id": 220
    },
    {
        "id": 686,
        "title": "Special nodes path",
        "problem_statement": "<h1>Special nodes path</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a tree consisting of N nodes. There are K number of special nodes in the tree. You can perform some operation on the tree exactly once:</p>\r\n<ul>\r\n    <li>Add an edge between any 2 special nodes.</li>\r\n</ul>\r\n<p>Find the minimum distance between node 1 and node N you can get after performing the operation exactly once.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>solve()</code> function. The function takes the following 5 parameters and returns a single integer denoting the answer to the question:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the number of nodes in the tree</li>\r\n    <li><code>K</code>: Represents the number of special nodes</li>\r\n    <li><code>special_nodes</code>: Represents the array containing the special nodes</li>\r\n    <li><code>node_from</code>: Represents the array denoting the starting node of each edge</li>\r\n    <li><code>node_to</code>: Represents the array denoting the ending node of each edge</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int solve (int N, int K, std::vector<int>& special_nodes, std::vector<int>& node_from, std::vector<int>& node_to) {\r\n    // Write your code here\r\n}</code></pre>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code>, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer <code>N</code> denoting the number of nodes in the tree.</li>\r\n            <li>The second line contains an integer <code>K</code> denoting the number of special nodes.</li>\r\n            <li>The third line contains <code>K</code> space-separated integers denoting the array <code>special_nodes</code>.</li>\r\n            <li>The fourth line contains <code>N-1</code> space-separated integers denoting the array <code>node_from</code>.</li>\r\n            <li>The fifth line contains <code>N-1</code> space-separated integers denoting the array <code>node_to</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print a single integer representing the minimum distance between node 1 and node N.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 1000</code></li>\r\n    <li><code>2 &le; N &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; special_nodes<sub>i</sub> &le; N</code></li>\r\n    <li><code>1 &le; node_from<sub>i</sub>, node_to<sub>i</sub> &le; N</code></li>\r\n    <li><code>node_from<sub>i</sub> &ne; node_to<sub>i</sub></code></li>\r\n</ul>\r\n<p>It is guaranteed that the sum of N over all test cases does not exceed 10<sup>6</sup>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Sample Input:</h3>\r\n<pre><code class='language-text'>2\r\n6\r\n2\r\n6 3\r\n2 3 5 4\r\n1 1 4 3 6\r\n7\r\n3\r\n6 4 3\r\n2 1 4 2 4\r\n1 4 3 5 6</code></pre>\r\n\r\n<h3>Sample Output:</h3>\r\n<pre><code class='language-text'>2\r\n3</code></pre>\r\n\r\n<h2>Explanation</h2>\r\n<p>In test case 1.</p>\r\n<p><strong>Given</strong></p>\r\n<ul>\r\n    <li><code>N = 6</code></li>\r\n    <li><code>K = 2</code></li>\r\n    <li><code>special_nodes = [6, 3]</code></li>\r\n    <li><code>node_from = [2, 3, 5, 4]</code></li>\r\n    <li><code>node_to = [1, 1, 4, 3, 6]</code></li>\r\n</ul>\r\n<p><strong>Approach</strong></p>\r\n<ul>\r\n    <li>Distance between the node 1 and node 6 in the given tree is 3.</li>\r\n    <li>We can connect an edge between node 3 and node 6, this will result the final distance to be 2.</li>\r\n    <li>This is the minimum distance we can get by performing the given operation.</li>\r\n    <li>So, the answer is 2.</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li>Time Limit: 10 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScriptNode.js, Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_17july",
        "company_id": 220
    },
    {
        "id": 687,
        "title": "Bitwise queries",
        "problem_statement": "<h1>Bitwise queries</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array A containing N integers. Your task is to answer Q queries where each query is of the following format:</p>\r\n<ul>\r\n    <li>L R X: Find the largest number in the index range [L, R] that contains X number of 1's in its binary representation. Consider 0-based indexing.</li>\r\n</ul>\r\n<p>If there are no numbers present with X set bits in the provided range, then print 0.</p>\r\n\r\n<p>Complete the solve function. This function takes the following 4 parameters and returns an array of answers to the queries.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li>N: Represents the size of array A</li>\r\n    <li>A: Represents the array of elements</li>\r\n    <li>Q: Represents the size of the query array</li>\r\n    <li>Queries: Represents the query array of each type</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains two space-separated integers denoting N and Q.</li>\r\n    <li>The second line contains N space-separated integers denoting the array.</li>\r\n    <li>The next Q lines contain three space-separated integers denoting L, R, and X.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the answer to each query on a separate line.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 2\r\n5 4 3 2 9\r\n1 3 2\r\n3 5 2\r\nOutput:\r\n5\r\n9</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For the first query, the given range is [1,3] that contains the following numbers:</p>\r\n<ul>\r\n    <li>5 (number of set bits = 2)</li>\r\n    <li>4 (number of set bits = 1)</li>\r\n    <li>3 (number of set bits = 2)</li>\r\n</ul>\r\n<p>Hence, the answer is 5 for X = 2.</p>\r\n<p>For the second query, the given range is [3, 5]:</p>\r\n<ul>\r\n    <li>2 (number of set bits = 1)</li>\r\n    <li>9 (number of set bits = 2)</li>\r\n</ul>\r\n<p>For both 3 and 9, the number of set bits is 2 but 9 is larger than 3. Therefore the answer will be 9.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 2 * 10^5</code></li>\r\n    <li><code>1 &le; Q &le; 2 * 10^5</code></li>\r\n    <li><code>0 &le; A_i &le; 10^9</code></li>\r\n    <li><code>1 &le; L &le; R &le; N</code></li>\r\n    <li><code>0 &le; X &le; 31</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_17july",
        "company_id": 220
    },
    {
        "id": 688,
        "title": "Sum of the elements",
        "problem_statement": "<h1>Sum of the elements</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given N distinct elements. You have to distribute these elements in two parts such that the sum of elements that each part receives must be greater than K.</p>\r\n<p>Find out the number of ways in which you can distribute the elements so that the mentioned condition holds true. Since the answer can be large, print it in modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the solve function. This function takes the following 3 parameters and returns the answer.</p>\r\n<h4>Parameters:</h4>\r\n<ul>\r\n    <li><strong>K</strong> Represents the given integer value.</li>\r\n    <li><strong>arr</strong> Represents the elements of the array.</li>\r\n    <li><strong>N</strong> Represents the size of the array arr.</li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains two space-separated integers N and K.</li>\r\n    <li>The second line contains N space-separated integers where the i<sup>th</sup> integer denotes the i<sup>th</sup> element.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Print the number of ways in which you can distribute the elements so that the mentioned condition holds true.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>1 &le; K &le; 10<sup>9</sup></li>\r\n    <li>1 &le; element &le; 10<sup>9</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 5\r\n3 7 4\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> There are 2 ways -</p>\r\n<ul>\r\n    <li>{3}, {7, 4}</li>\r\n    <li>{7}, {3, 4}</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li>Time Limit: 2.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Memory Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes.</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 11, Javascript, Kotlin, Lisp, MySQL, Node.js, Objective-C, Objective-C++, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_17july",
        "company_id": 220
    },
    {
        "id": 689,
        "title": "Seat booking",
        "problem_statement": "<h1>Seat booking</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an integer N denoting the number of seats in a cinema hall numbered from 1 to N. There are M groups where B[i] denotes the number of persons in the i<sup>th</sup> group. The persons from the same group want to sit together. If there are B[i] persons in the i<sup>th</sup> group then they would prefer to sit from L to R such that R-L+1=B[i]. A[i] denotes the cost of the i<sup>th</sup> seat ticket. You have to help the cinema hall owner make the maximum possible profit by assigning the seats to the groups optimally.</p>\r\n<p>Calculate the maximum profit the cinema hall owner can make through an optimal seating arrangement.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the function <code>solve()</code> which takes 4 parameters. This function takes the following parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents the number of seats in the cinema hall</li>\r\n    <li><strong>M:</strong> Represents the number of groups visiting the cinema hall</li>\r\n    <li><strong>A:</strong> Represents the array A, where A[i] represents the cost of the i<sup>th</sup> seat ticket</li>\r\n    <li><strong>B:</strong> Represents the array B, where B[i] represents the number of persons in the i<sup>th</sup> group</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3\r\n1 8 2 9 15\r\n1 1 1\r\nOutput:\r\n31</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given</p>\r\n<ul>\r\n    <li>N = 5</li>\r\n    <li>M = 3</li>\r\n    <li>A = [1, 8, 2, 9, 15]</li>\r\n    <li>B = [1, 1, 1]</li>\r\n</ul>\r\n<p>Approach</p>\r\n<ul>\r\n    <li>The first group can be seated at seat 3. The profit from the first group would be 2.</li>\r\n    <li>The second group can be seated at seat 4. The profit from the second group would be 9.</li>\r\n    <li>The third group can be seated at seat 5. The profit from the third group would be 15.</li>\r\n    <li>Therefore the total profit would be 2+9+15 = 26.</li>\r\n    <li>This is the maximum profit that can be obtained from any of the seating arrangements.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10^3</code></li>\r\n    <li><code>1 &le; M &le; 13</code></li>\r\n    <li><code>1 &le; A[i] &le; 10^9</code></li>\r\n    <li><code>1 &le; B[i] &le; N</code></li>\r\n    <li><code>B_1 + B_2 + ... + B_M &le; N</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_17july",
        "company_id": 220
    },
    {
        "id": 690,
        "title": "Dominant Subarrays",
        "problem_statement": "<h1>Dominant Subarrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of N integers. A subarray is called <strong>dominant</strong> if at least one number appears <strong>K times or more</strong> within it.</p>\r\n<p>Your task is to count the number of such <strong>dominant subarrays</strong> in the given array.</p>\r\n<ul>\r\n    <li>A subarray is a continuous part of the array (it cannot skip elements).</li>\r\n    <li>A dominant subarray is one where at least one number appears K times or more.</li>\r\n</ul>\r\n\r\n<h3>Function Description</h3>\r\n<p>You must implement the function <code>countDominantSubarrays</code>.</p>\r\n\r\n<h3>Parameters</h3>\r\n<ul>\r\n    <li><code>int N</code>: The number of elements in the array.</li>\r\n    <li><code>int K</code>: The minimum required frequency for a number to make a subarray dominant.</li>\r\n    <li><code>int[] arr</code>: An array of size N, containing the elements.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 5, K = 2, arr = [1, 2, 1, 2, 1]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> We are given N = 5 and K = 2. The array is: [1, 2, 1, 2, 1].</p>\r\n<p>We need to count all subarrays where at least one number appears 2 times or more.</p>\r\n<p>Valid dominant subarrays:</p>\r\n<ul>\r\n    <li><code>[1,2,1]</code> (from index 0): 1 appears twice.</li>\r\n    <li><code>[2,1,2]</code> (from index 1): 2 appears twice.</li>\r\n    <li><code>[1,2,1]</code> (from index 2): 1 appears twice.</li>\r\n    <li><code>[1,2,1,2]</code> (from index 0): 1 and 2 both appear twice.</li>\r\n    <li><code>[2,1,2,1]</code> (from index 1): 1 and 2 both appear twice.</li>\r\n    <li><code>[1,2,1,2,1]</code> (from index 0): 1 appears 3 times.</li>\r\n</ul>\r\n<p>Thus, the correct output is 6.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_17july",
        "company_id": 220
    },
    {
        "id": 691,
        "title": "Meeting Room",
        "problem_statement": "<h1>Meeting Room</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given N groups of people who want to have a meeting in the only meeting room in the office. Each group has <code>people[i]</code> people, who want to start the meeting at the <code>starting[i]</code> time and end it at the <code>ending[i]</code> time (both inclusive).</p>\r\n<p>No two groups can use the meeting room at the same time. If group <code>i</code> does not get the meeting room, then all the <code>people[i]</code> people cannot meet.</p>\r\n<p>Calculate the minimum number of people that cannot meet if the meeting room is optimally assigned to groups.</p>\r\n<p><strong>Note:</strong> Group <code>i</code> and <code>j</code> can get the meeting room one after the other if and only if <code>end[i] &lt; start[j]</code>.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>solve</code>. This function takes the following 4 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the number of groups</li>\r\n    <li><code>people[]</code>: Represents the number of people in each group</li>\r\n    <li><code>starting[]</code>: Represents the starting time of their meetings</li>\r\n    <li><code>ending[]</code>: Represents the ending time of their meetings</li>\r\n</ul>\r\n\r\n<h3>Input Format for Custom Testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <code>N</code> denoting the number of groups.</li>\r\n    <li>The second line contains <code>N</code> space-separated integers denoting the number of people in each group.</li>\r\n    <li>The third line contains <code>N</code> space-separated integers denoting the starting time of each group's meeting.</li>\r\n    <li>The fourth line contains <code>N</code> space-separated integers denoting the ending time of each group's meeting.</li>\r\n</ul>\r\n\r\n<h3>Output Format</h3>\r\n<p>Print a single integer representing the minimum number of people who cannot have a meeting.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n4 3 5 6 10\r\n1 2 3 6 5\r\n1 2 5 7 7\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given:</p>\r\n<ul>\r\n    <li><code>N = 5</code></li>\r\n    <li><code>people[] = [4, 3, 5, 6, 10]</code></li>\r\n    <li><code>starting[] = [1, 2, 3, 6, 5]</code></li>\r\n    <li><code>ending[] = [1, 2, 5, 7, 7]</code></li>\r\n</ul>\r\n<p>Approach:</p>\r\n<ul>\r\n    <li>Here the optimal way would be to first give the meeting room to the first group from 1 to 1</li>\r\n    <li>Then give the meeting room to the second group from 2 to 2.</li>\r\n    <li>Then give the meeting room to the third group from 3 to 5.</li>\r\n    <li>Then give the meeting room to the fourth group from 6 to 7.</li>\r\n    <li>We can't give the meeting room to both the third and fifth groups as they overlap.</li>\r\n    <li>So the total number of people that got the meeting room would be 4 + 3 + 5 + 6 = 18.</li>\r\n    <li>Therefore the answer would be 28 - 18 = 10. (Total people: 4+3+5+6+10 = 28)</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10<sup>5</sup></code></li>\r\n    <li><code>2 &le; people[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; start[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; end[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>start[i] &le; end[i]</code></li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li>Time Limit: 10 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_17july",
        "company_id": 220
    },
    {
        "id": 692,
        "title": "Large dam",
        "problem_statement": "<h1>Large dam</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a large dam with N unique floodgates, each identified by a unique number from 0 to N-1. The control system of the dam keeps a record of the floodgate operations. A pathway between two floodgates is opened daily, allowing water to flow from one door to another. This operation is recorded in a list of logs, where each log[i] = [day, door_A, door_B] contains a non-negative integer representing the day and the numbers of the two different doors.</p>\r\n<p>A door is considered connected to another door if there is a direct water flow between them or if it shares water flow with another one connected to the second door. Your task is determining the earliest day by which water could flow between every door in the dam, effectively connecting all doors. If there is no such day when all doors are interconnected through water flow, the output should be -1.</p>\r\n\r\n<h3>Function Description:</h3>\r\n<p>Complete the <code>solve()</code> function. The function takes 3 parameters and returns an integer denoting the answer to the question.</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represent total number of door</li>\r\n    <li><strong>K:</strong> Represents the total number of logs</li>\r\n    <li><strong>logs:</strong> Represents the array, which contains day and door numbers</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains a single integer T, which denotes the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer N, which represents the total number of doors.</li>\r\n            <li>The second line contains an integer K, which denotes the total number of logs.</li>\r\n            <li>The next K line contains 3 space-separated numbers.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print the answer in a new line.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n7\r\n9\r\n0 1 2\r\n1 0 3\r\n2 4 5\r\n3 0 4\r\n4 1 7\r\n5 0 6\r\n6 0 8\r\n7 0 9\r\n8 5 3\r\n7\r\n5\r\n0 1 2\r\n1 3 4\r\n2 0 3\r\n3 4 1\r\n4 2 1\r\nOutput:\r\n8\r\n-1</code></pre>\r\n\r\n<h3>Explanation for a Scenario:</h3>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li><strong>N = 8</strong></li>\r\n    <li><strong>K = 10</strong></li>\r\n    <li><strong>Logs =</strong> <code>[[0, 1, 4], [0, 4, 2], [3, 8, 7], [0, 10, 2], [6, 8, 1], [7, 7, 5], [6, 0, 0], [3, 2, 7], [8, 1, 2], [6, 1, 5]]</code></li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li>On day 0 the doors connected are [0,3], [1, 2], [4], [5], [6], [7].</li>\r\n    <li>On day 1 the doors connected are [0,3,4], [1], [2], [5], [6], [7].</li>\r\n    <li>On day 2 the doors connected are [0,3,4], [1,7], [2], [5], [6].</li>\r\n    <li>On day 3 the doors connected are [0,2,3,4], [1,7], [5], [6].</li>\r\n    <li>On day 4 the doors connected are [0,2,3,4], [1,5,7], [6].</li>\r\n    <li>On day 6 the doors connected are [0,2,3,4], [1,5,6,7].</li>\r\n    <li>On day 7 the doors connected are [0,2,3,4,1,5,6,7].</li>\r\n    <li>On day 8 the doors connected are [0,1,2,3,4,5,6,7].</li>\r\n</ul>\r\n<p>Thus minimum 8 days will be taken</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= T &lt; 10</code></li>\r\n    <li><code>2 &lt;= N &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= day &lt;= 10^9</code></li>\r\n    <li><code>0 &lt;= door_A, door_B &lt; N</code></li>\r\n    <li><code>door_A != door_B</code></li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limit</h2>\r\n<ul>\r\n    <li>Time Limit: 2.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 512 MB</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_17july",
        "company_id": 220
    }
]