[
    {
        "id": 696,
        "title": "Find the Winner!",
        "problem_statement": "<h1>Find the Winner!</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your task is to determine the winner of a card game played between Andrea and Maria.</p>\r\n<p>Game rules:</p>\r\n<ul>\r\n    <li>Each player has a deck of numbered cards in a face-down pile.</li>\r\n    <li>At the beginning, someone calls \"Even\" or \"Odd\".</li>\r\n    <li>If \"Even\" is called, both players flip their top cards (at even indices).</li>\r\n    <li>If \"Odd\" is called, both players discard their top cards, then flip the next cards (at odd indices).</li>\r\n    <li>After flipping, Andrea subtracts Maria's card value from her own and adds the result to her score.</li>\r\n    <li>Maria subtracts Andrea's card value from her own and adds the result to her score.</li>\r\n    <li>For subsequent rounds, players alternately discard then flip cards based on the initial call.</li>\r\n    <li>Once all cards are played, the player with the most points wins.</li>\r\n</ul>\r\n<p>For example, consider the following:</p>\r\n<pre><code class='language-text'>Maria's cards (face down): maria = [3, 5, 6]\r\nAndrea's cards (face down): andrea = [4, 5, 7]\r\nStarting call: \"Even\"</code></pre>\r\n<p>Here's how the game progresses:</p>\r\n<pre><code class='language-text'>Round | Maria's Card | Andrea's Card | Andrea's Score | Maria's Score\r\n------|--------------|---------------|----------------|--------------\r\n0     | 3            | 4             | 4 - 3 = 1      | 3 - 4 = -1\r\n1     | 5            | 5             | Discard        | Discard\r\n2     | 6            | 7             | 7 - 6 = 1      | 6 - 7 = -1\r\n\r\nCumulative scores:\r\nAndrea: 1 + 1 = 2\r\nMaria: -1 + (-1) = -2</code></pre>\r\n<p>Since Andrea's score (2) is greater than Maria's score (-2), Andrea wins.</p>\r\n<p>Return the name of the winner ('Andrea', 'Maria') or 'Tie' if they have equal scores.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>winner</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int andrea[]</code>: Andrea's array of card values.</li>\r\n    <li><code>int maria[]</code>: Maria's array of card values.</li>\r\n    <li><code>string s</code>: the starting called-out word, \"Even\" or \"Odd\".</li>\r\n</ul>\r\n\r\n<h3>Return</h3>\r\n<p><code>string</code>: either \"Maria\", \"Andrea\", or \"Tie\"</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; andrea[i], maria[i] &le; 10<sup>3</sup></code>, where <code>0 &le; i &lt; n</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n2\r\n3\r\n3\r\n2\r\n1\r\n3\r\nEven\r\nOutput:\r\nMaria</code></pre>\r\n<p><strong>Explanation:</strong> The indices range from 0 through 2. Since <code>s = 'Even'</code>, the only cards flipped are at indices 0 and 2.</p>\r\n<ul>\r\n    <li>When <code>i = 0</code>, Andrea gets <code>andrea[0] - maria[0] = 1 - 2 = -1</code> point and Maria gets <code>maria[0] - andrea[0] = 2 - 1 = 1</code> point.</li>\r\n    <li>When <code>i = 2</code>, Andrea gets <code>andrea[2] - maria[2] = 3 - 3 = 0</code> points and Maria gets <code>maria[2] - andrea[2] = 3 - 3 = 0</code> points.</li>\r\n</ul>\r\n<p>At the end of play, Andrea's cumulative score is -1, and Maria's is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n2\r\n3\r\n3\r\n2\r\n1\r\n3\r\nOdd\r\nOutput:\r\nAndrea</code></pre>\r\n<p><strong>Explanation:</strong> Since <code>s = 'Odd'</code>, the only index flipped is at index 1.</p>\r\n<ul>\r\n    <li>When <code>i = 1</code>, Andrea gets <code>andrea[1] - maria[1] = 2 - 1 = 1</code> point and Maria gets <code>maria[1] - andrea[1] = 1 - 2 = -1</code> point.</li>\r\n</ul>\r\n<p>Andrea ends with 1 point, and Maria with -1.</p>\r\n\r\n<pre><code class='language-cpp'>string winner(vector&lt;int&gt; andrea, vector&lt;int&gt; maria, string s) {\r\n    // Function implementation goes here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    },
    {
        "id": 697,
        "title": "Count Swaps During Custom Sorting",
        "problem_statement": "<h1>Count Swaps During Custom Sorting</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Analyze the efficiency of the following sorting algorithm by counting the number of swaps it performs: For an array <code>arr</code> of size <code>n</code>:</p>\r\n<ol>\r\n    <li>Find the smallest pair of indices <code>0 &le; i &lt; j &le; n-1</code> such that <code>arr[i] &gt; arr[j]</code>. \"Smallest\" means lexicographical ordering of pairs <code>(i, j)</code> (i.e., smallest <code>i</code>, then smallest <code>j</code> for that <code>i</code>).</li>\r\n    <li>If no such pair exists, the algorithm stops.</li>\r\n    <li>Otherwise, swap <code>arr[i]</code> and <code>arr[j]</code> and search for the next pair.</li>\r\n</ol>\r\n<p>Your task is to determine how many swaps this algorithm performs to sort a given array.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>howManySwaps</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: the array to sort</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the number of swaps</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [5, 1, 4, 2]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The algorithm performs these swaps:</p>\r\n<ul>\r\n    <li><code>[5, 1, 4, 2] -> [1, 5, 4, 2]</code> (swap indices 0 and 1)</li>\r\n    <li><code>[1, 5, 4, 2] -> [1, 4, 5, 2]</code> (swap indices 1 and 2)</li>\r\n    <li><code>[1, 4, 5, 2] -> [1, 4, 2, 5]</code> (swap indices 2 and 3)</li>\r\n    <li><code>[1, 4, 2, 5] -> [1, 2, 4, 5]</code> (swap indices 1 and 2)</li>\r\n</ul>\r\n<p>The total number of swaps is 4.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: n = 3, arr = [7, 1, 2]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> <code>[7, 1, 2] -> [1, 7, 2] -> [1, 2, 7]</code></p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: n = 2, arr = [7, 12]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The array is already sorted, so no swaps are made.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10^5</code></li>\r\n    <li><code>1 &le; arr[i] &le; 10^9</code></li>\r\n    <li>All elements of <code>arr</code> are distinct.</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>long howManySwaps(vector&lt;int&gt; arr) {\r\n    // Function implementation\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    },
    {
        "id": 698,
        "title": "Request Handling Maximization",
        "problem_statement": "<h1>Request Handling Maximization</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a distributed API system, <code>n</code> endpoints manage incoming traffic with capacities represented by the array <code>endpointCapacity</code>. Each endpoint receives a specific number of requests given by <code>incomingTraffic</code>, which may exceed its capacity, leading to performance issues.</p>\r\n<p>To address this, the development team can optimize the system by doubling the capacities of up to <code>k</code> endpoints. Any one endpoint can only be doubled once.</p>\r\n<p>Implement a function to determine the maximum total requests that can be processed by all endpoints after optimizing the system.</p>\r\n<p>The function <code>getMaxRequests</code> takes the following inputs:</p>\r\n<ul>\r\n    <li><code>int endpointCapacity[n]</code>: the capacity of each API endpoint</li>\r\n    <li><code>int incomingTraffic[n]</code>: the incoming requests for each endpoint</li>\r\n    <li><code>int k</code>: the number of endpoints whose capacities can be doubled</li>\r\n</ul>\r\n<p>The function should return the maximum total requests that can be handled after doubling the capacities of up to <code>k</code> endpoints.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nendpointCapacity = [10, 4, 3, 7]\r\nincomingTraffic = [3, 10, 4, 5]\r\nk = 2\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> In an optimal scenario, the team can double the capacities of the second and third endpoints. Thus, the <code>endpointCapacity</code> will become: [10, 8, 6, 7]. The total number of requests handled is 3 + 8 + 4 + 5 = 20. It is not possible to handle all 10 requests for the second endpoint.</p>\r\n<p>Hence, the answer is 20.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nendpointCapacity = [5, 5, 7, 10, 12]\r\nincomingTraffic = [3, 2, 5, 8, 10]\r\nk = 2\r\nOutput: 28</code></pre>\r\n<p><strong>Explanation:</strong> Here <code>endpointCapacity[i] >= incomingTraffic[i]</code> for all the endpoints. Therefore, the maximum number of requests handled is the sum of all the incoming requests: 3 + 2 + 5 + 8 + 10 = 28.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nendpointCapacity = [12, 4, 8, 10, 8]\r\nincomingTraffic = [15, 5, 14, 13, 19]\r\nk = 5\r\nOutput: 66</code></pre>\r\n<p><strong>Explanation:</strong> Since <code>k = 5</code>, the capacity can be doubled for all the endpoints. It can be seen that <code>2 * endpointCapacity[i] >= incomingTraffic[i]</code> for all the endpoints. Therefore, the maximum number of requests handled by the endpoints is the sum of all the incoming requests: 15 + 5 + 14 + 13 + 19 = 66.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= k &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= endpointCapacity[i], incomingTraffic[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    },
    {
        "id": 699,
        "title": "Maximize the Power",
        "problem_statement": "<h1>Maximize the Power</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array `arr` of `n` integers and an array `power` of `k` integers where `k` is an even number.</p>\r\n<ol>\r\n    <li>Select two integers `i` and `j` such that `0 <= i < j < n`.</li>\r\n    <li>If `power[0]` is even, add the sum of the subarray `arr[i...j]` to `power[0]`.</li>\r\n    <li>If `power[0]` is odd, add the sum of the subarray `arr[i...j]` to `power[1]`.</li>\r\n    <li>Delete the first two elements from `power`, reducing its length by 2.</li>\r\n</ol>\r\n<p>Using the initial `power` array, maximize the final `power` after applying `k/2` operations. Return the maximum `power` modulo (10^9 + 7).</p>\r\n<p><strong>Note:</strong> Subarray `arr[i...j]` denotes the elements `arr[i], arr[i+1], ..., arr[j]`.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [3, 5, 6, 0, 7], power = [3, 1, 0, 2]\r\nOutput: 25</code></pre>\r\n<p><strong>Explanation:</strong> `k = 4`, the size of `power`, so perform `k/2 = 2` operations.</p>\r\n<p>One optimal approach is shown:</p>\r\n<ul>\r\n    <li>Select `i=0, j=2`. Here, `power[0]=3` and `power[1]=1`. `power[0]` is odd. Add the sum of subarray `arr[0...2]` (`3+5+6 = 14`) to `power[1]`. `power` is `[3, 1+14, 0, 2]` i.e., `[3, 15, 0, 2]`. Remove the two elements from `power`, and `power` is `[15, 2]`.</li>\r\n    <li>Select `i=0, j=1`. Here, `power[0]=15` and `power[1]=2`. `power[0]` is odd. Add the sum of subarray `arr[0...1]` (`3+5 = 8`) to `power[1]`. `power` is `[15, 2+8]` i.e., `[15, 10]`.</li>\r\n</ul>\r\n<p>Return the maximum possible power, `25` (modulo `10^9+7`).</p>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\narr = [2, 4, 2, 1, 6]\r\nk = 4\r\npower = [2, 1, 1, 3]\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> Optimal operations</p>\r\n<pre><code class='language-text'>subarray    resultant   power[i]    power[j]\r\n0 1 4       [4,]        1           [4]\r\n2, 1, 6     13          3           [1, 3]\r\n0 1 1       7           [1]         [1]\r\n6]</code></pre>\r\n<p>Total power = `13 + 7 = 20`</p>\r\n\r\n<h3>Example 3: (Sample Case 1)</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\narr = [1, 2, 3, 4]\r\nk = 2\r\npower = [0, 0]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> There is only one way to perform the operation. Select `i=0, j=1`. Here, `power[0]=0` and `power[1]=0`. We add the sum of subarray `arr[0...0]` which is `0` to the `power` making it `1`.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the `getMaximumPower` function below.</p>\r\n<p>The function is expected to return an INTEGER.</p>\r\n<p>The function accepts following parameters:</p>\r\n<ul>\r\n    <li>1. INTEGER_ARRAY `arr`</li>\r\n    <li>2. INTEGER_ARRAY `power`</li>\r\n</ul>\r\n<pre><code class='language-java'>public static int getMaximumPower(List&lt;Integer&gt; arr, List&lt;Integer&gt; power) {\r\n    // Write your code here\r\n}</code></pre>\r\n\r\n<h2>Returns</h2>\r\n<p>int: the maximum power modulo (10^9+7).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`2 <= n <= 10^5`</li>\r\n    <li>`2 <= k <= 10^5`, `k` is even.</li>\r\n    <li>`0 <= arr[i] <= 10^9`</li>\r\n    <li>`0 <= power[i] <= 10^9`</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    },
    {
        "id": 700,
        "title": "Song Popularity",
        "problem_statement": "<h1>Song Popularity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As part of enhancing a music streaming platform's user experience, implement a feature that ranks songs by their popularity. Given <code>n</code> users and <code>m</code> songs, each user <code>i</code> has a preference list, <code>pref[i]</code>, which is a permutation of numbers <code>0</code> to <code>m-1</code>, indicating the user's preference for a song. If <code>a < b</code>, the user prefers song <code>pref[a]</code> over song <code>pref[b]</code>.</p>\r\n<p>To rank the songs, use the following approach. Song <code>x</code> is said to beat song <code>y</code> if <code>x</code> is preferred over <code>y</code> by more than half of the users or if exactly half of the users prefer <code>x</code> over <code>y</code> and <code>x</code> has a smaller id. Song <code>x</code> is considered more popular than song <code>y</code> if <code>x</code> beats more songs than <code>y</code>. If <code>x</code> and <code>y</code> beat the same number of songs, select the song with a lower id.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Suppose <code>n = 3</code>, <code>m = 3</code>, <code>pref = [[0, 1, 2], [0, 2, 1], [1, 2, 0]]</code></p>\r\n<p><strong>User Song Preference:</strong></p>\r\n<ul>\r\n    <li>User 0: Song 0 > Song 1 > Song 2</li>\r\n    <li>User 1: Song 0 > Song 2 > Song 1</li>\r\n    <li>User 2: Song 1 > Song 2 > Song 0</li>\r\n</ul>\r\n<p><strong>Comparisons:</strong></p>\r\n<ul>\r\n    <li>Song 0 > Song 1: Users 0, 1 prefer Song 0 over Song 1. (2 users)</li>\r\n    <li>Song 0 > Song 2: Users 0, 1 prefer Song 0 over Song 2. (2 users)</li>\r\n    <li>Song 1 > Song 2: Users 0, 2 prefer Song 1 over Song 2. (2 users)</li>\r\n</ul>\r\n<p>It is established that Song 0 > Song 1 > Song 2. Hence the answer is <code>[0, 1, 2]</code>.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nSTDIN      FUNCTION\r\n5       -> n = 5\r\n4       -> m = 4\r\n0 1 3 2 -> song_preferences[][] = [[0, 1, 3, 2], [1, 0, 3, 2], [2, 1, 0, 3], [0, 3, 1, 2], [2, 1, 0, 3]]\r\n1 0 3 2\r\n2 1 0 3\r\n0 3 1 2\r\n2 1 0 3\r\n\r\nOutput:\r\n0\r\n1\r\n2\r\n3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The popularity order is determined by the number of songs each song beats:</p>\r\n<ul>\r\n    <li>Song 0 beats Song(s): 1, 2, 3 (3 songs beaten)</li>\r\n    <li>Song 1 beats Song(s): 2, 3 (2 songs beaten)</li>\r\n    <li>Song 2 beats Song(s): - (0 songs beaten)</li>\r\n    <li>Song 3 beats Song(s): 2 (1 song beaten)</li>\r\n</ul>\r\n<p>Based on the rules (more songs beaten, then lower ID), the sorted order is 0, 1, 3, 2.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nSTDIN      FUNCTION\r\n4       -> n = 4\r\n3       -> m = 3\r\n2 0 1   -> song_preferences[][] = [[2, 0, 1], [0, 2, 1], [0, 1, 2], [2, 1, 0]]\r\n0 2 1\r\n0 1 2\r\n2 1 0\r\n\r\nOutput:\r\n0\r\n2\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The popularity order is determined by the number of songs each song beats:</p>\r\n<ul>\r\n    <li>Song 0 beats Song(s): 1, 2 (2 songs beaten)</li>\r\n    <li>Song 2 beats Song(s): - (0 songs beaten)</li>\r\n    <li>Song 1 beats Song(s): 2 (1 song beaten)</li>\r\n</ul>\r\n<p>Based on the rules (more songs beaten, then lower ID), the sorted order is 0, 1, 2.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getPopularityOrder</code> in the editor below.</p>\r\n<p><code>getPopularityOrder</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int song_preferences[n][m]</code>: the preference lists of the users</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>int[m]</code>: the popularity order of the songs</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 400</code></li>\r\n    <li><code>1 <= m <= 400</code></li>\r\n    <li><code>song_preferences[i]</code> is a permutation of numbers <code>0, 1, ..., m - 1</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    },
    {
        "id": 701,
        "title": "Maximum Array Correlation",
        "problem_statement": "<h1>Maximum Array Correlation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For two arrays <code>a</code> and <code>b</code> of equal length, the array correlation is defined as the sum of all values <code>b[i]</code> where <code>b[i]</code> is greater than <code>a[i]</code>.</p>\r\n<p>Given two integer arrays <code>a</code> and <code>b</code> of the same length, rearrange the elements of array <code>b</code> to maximize the array correlation. Return the maximum possible array correlation value.</p>\r\n<p><strong>Note:</strong> You are not allowed to rearrange the elements of the array <code>a</code>.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaxArrayCorrelation</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>a[n]</code>: the fixed array</li>\r\n    <li><code>b[n]</code>: the array to reorder</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>long int</code>: the maximum possible array correlation</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\na = [1, 4, 2, 1, 3]\r\nb = [2, 3, 1, 2, 2]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The second array can be rearranged to <code>b = [2, 1, 3, 2, 2]</code>. <code>b[i] > a[i]</code> for indices <code>i = 0, 2,</code> and <code>3</code>. The array correlation is <code>2 + 3 + 2 = 7</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\na = [1, 9, 4, 2]\r\nb = [8, 4, 5, 1]\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> The second array can be rearranged to <code>b = [3, 1, 8, 4]</code>. <code>b[i] > a[i]</code> for indices <code>i = 0, 2,</code> and <code>3</code>. The array correlation is <code>3 + 8 + 4 = 15</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 ≤ n ≤ 2 x 10^5</code></li>\r\n    <li><code>1 ≤ a[i], b[i] ≤ 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    },
    {
        "id": 702,
        "title": "Maximum Earnings",
        "problem_statement": "<h1>Maximum Earnings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A taxi driver knows the pick-up and drop-off locations of people requesting services. All locations are measured in km from the starting point (0 km). For each km traveled, the driver charges 1 unit of money per passenger. Additionally, some passengers are willing to pay an extra tip.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>The taxi can accommodate only one passenger at a time.</li>\r\n    <li>The driver cannot backtrack. If a passenger is picked up at location 2 and dropped off at location 9, the driver cannot accommodate a passenger at locations 3 through 8.</li>\r\n    <li>If there are two people and their locations overlap, only one of them can be accepted.</li>\r\n</ul>\r\n<p>Determine the maximum amount the driver can earn.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>taxiDriver</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int pickup[]</code>: the pickup location of the potential riders</li>\r\n    <li><code>int drop[]</code>: the drop-off locations of the potential riders</li>\r\n    <li><code>int tip[]</code>: the tips offered by the potential riders</li>\r\n</ul>\r\n<pre><code class='language-javascript'>long taxiDriver(vector<long> pickup, vector<long> drop, vector<int> tip)</code></pre>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the maximum amount the driver can earn</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>pickup = [0, 2, 9, 10, 11, 12]\r\ndrop = [5, 9, 11, 14, 17]\r\ntip = [0, 2, 3, 2, 2, 1]</code></pre>\r\n<p>The optimal way to earn the most money is by accepting passengers at indices 1, 2, and 5:</p>\r\n<ul>\r\n    <li>Passenger at index 1: 9 - 2 = 9 (distance + tip)</li>\r\n    <li>Passenger at index 2: 11 - 9 + 3 = 5</li>\r\n    <li>Passenger at index 5: 17 - 12 + 1 = 6</li>\r\n</ul>\r\n<p>Total earnings: 9 + 5 + 6 = 20</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\npickup[] size n = 2\r\npickup[] = [1, 4]\r\ndrop[] size n = 2\r\ndrop[] = [3, 6]\r\ntip[] size n = 2\r\ntip[] = [2, 5]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> There are two people, and the locations are overlapping, so only one of them can be accepted.</p>\r\n<ul>\r\n    <li>If person 1 is picked, the amount earned is (3 - 1) + 2 = 4.</li>\r\n    <li>If person 2 is picked, the amount earned is (6 - 4) + 5 = 7.</li>\r\n</ul>\r\n<p>It is best to pick person 2 and earn 7.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\npickup[] size n = 3\r\npickup[] = [0, 4, 5]\r\ndrop[] size n = 3\r\ndrop[] = [1, 3, 5, 7]\r\ntip[] size n = 2\r\ntip[] = [1, 2, 2]\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong> All three passengers can be accepted because they do not overlap.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt; n &lt;= 10<sup>4</sup></code></li>\r\n    <li><code>0 &lt;= pickup[i], drop[i] &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>pickup[i] &lt; drop[i]</code></li>\r\n    <li><code>0 &lt;= tip[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    },
    {
        "id": 703,
        "title": "Academic Decathlon",
        "problem_statement": "<h1>Academic Decathlon</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Students are being selected for an academic decathlon team at a school. Each student has a skill level, and for a team to be uniform, the difference between any two consecutive skill levels (when arranged in increasing order) must be either 0 or 1.</p>\r\n<p>Your task is to find the maximum possible team size.</p>\r\n<p>Complete the function `findMaxTeamSize` in the editor with the following parameters:</p>\r\n<ul>\r\n    <li>`int skills[n]`: the skill levels of each student</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li>`int`: the maximum possible size of the team</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int findMaxTeamSize(vector&lt;int&gt; skills) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: skills = [4, 13, 2, 3]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There are two valid teams possible: (2, 3, 4) and (13). These have team sizes of 3 and 1, respectively. The maximum team size is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= skills[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    },
    {
        "id": 704,
        "title": "Maximum Sum",
        "problem_statement": "<h1>Maximum Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>arr</code> of size <code>n</code> and an integer <code>k</code> representing the number of sign-flip operations to perform. A sign-flip operation changes the sign of a number (positive to negative or vice versa).</p>\r\n<p>Implement a function that calculates the maximum possible sum of the array after performing exactly <code>k</code> sign-flip operations.</p>\r\n<p>The function <code>maximizeSum</code> will take two inputs: an integer array <code>arr</code> and an integer <code>k</code> (the total number of sign-flip operations to perform).</p>\r\n<p>The function should return the maximum possible sum of the array after performing exactly <code>k</code> flips. A number's sign can be flipped multiple times as long as the total number of flips is exactly <code>k</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [-5, -2, -3, 6, 7], k = 3\r\nOutput: 13</code></pre>\r\n<p><strong>Explanation:</strong> The initial sum is <code>(-5) + (-2) + (-3) + 6 + 7 = 3</code>.</p>\r\n<p>To maximize the sum, we should prioritize flipping negative numbers to positive.\r\n<ol>\r\n    <li>Flip <code>-5</code> to <code>5</code>. The array becomes <code>[5, -2, -3, 6, 7]</code>. The sum is <code>5 + (-2) + (-3) + 6 + 7 = 13</code>. We have used 1 flip, so <code>k</code> becomes <code>2</code>.</li>\r\n    <li>We have <code>2</code> flips remaining. Since <code>2</code> is an even number, we can use these flips by picking any number (e.g., <code>6</code>), flipping its sign twice (<code>6 -> -6 -> 6</code>). This uses 2 flips and brings the array back to <code>[5, -2, -3, 6, 7]</code>, maintaining the sum of <code>13</code>.</li>\r\n</ol>\r\nThis strategy results in the maximum sum of <code>13</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [4, 2, 1, 9], k = 1\r\nOutput: 14</code></pre>\r\n<p><strong>Explanation:</strong> The initial sum is <code>4 + 2 + 1 + 9 = 16</code>.</p>\r\n<p>We have <code>k = 1</code> flip. To maximize the sum, if there are negative numbers, we flip the largest negative number to positive. If all numbers are positive (as in this case), we must decrease the sum. To decrease it minimally, we flip the smallest positive number.</p>\r\n<ul>\r\n    <li>Flipping <code>1</code> to <code>-1</code> results in <code>[4, 2, -1, 9]</code> with sum <code>4 + 2 + (-1) + 9 = 14</code>.</li>\r\n    <li>Flipping <code>2</code> to <code>-2</code> results in <code>[4, -2, 1, 9]</code> with sum <code>4 + (-2) + 1 + 9 = 12</code>.</li>\r\n    <li>Flipping <code>4</code> to <code>-4</code> results in <code>[-4, 2, 1, 9]</code> with sum <code>(-4) + 2 + 1 + 9 = 8</code>.</li>\r\n    <li>Flipping <code>9</code> to <code>-9</code> results in <code>[4, 2, 1, -9]</code> with sum <code>4 + 2 + 1 + (-9) = -2</code>.</li>\r\n</ul>\r\n<p>The maximum sum among these options is <code>14</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>-10^9 <= arr[i] <= 10^9</code></li>\r\n    <li><code>1 <= k <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_14july",
        "company_id": 223
    }
]