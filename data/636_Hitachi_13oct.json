[
    {
        "id": 1801,
        "title": "Array Operations: Prime Region",
        "problem_statement": "<h1>Array Operations: Prime Region</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a 2D array <code>A</code> of numbers having dimensions <code>N x M</code>. Find the size of the largest region that consists only of prime numbers.</p>\r\n<p><strong>Note:</strong> A region is formed by a group of one or more numbers. It can be formed by connecting numbers that are horizontally, vertically, or diagonally adjacent.</p>\r\n<p><strong>Function Description:</strong> In the provided code snippet, implement the <code>primeRegion(int N, int M)</code> method. This method should return the size of the largest region that consists only of prime numbers. You can write your code in the space below the phrase \"WRITE YOUR LOGIC HERE\".</p>\r\n<p>There will be multiple test cases running so the input and Output should match exactly as provided.</p>\r\n<p>The base output variable <code>result</code> is set to a default value of -404 which can be modified. Additionally, you can add or remove these output variables.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains 2 space-separated numbers, denoting the dimensions <code>N</code> and <code>M</code> of the 2D array.</p>\r\n<p>Each of the following <code>N</code> lines contains <code>M</code> space-separated numbers, describing the 2D array.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains the size of the largest region consisting only of prime numbers.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 6\r\n4 4 4 4 4 5\r\n4 2 2 2 2 4\r\n4 2 2 2 4 4\r\n4 4 3 4 7 7\r\n4 4 4 4 7 7\r\nOutput:\r\n7</code></pre>\r\n<p><strong>Explanation:</strong> The input matrix is:</p>\r\n<pre><code class='language-text'>4 4 4 4 4 5\r\n4 2 2 2 2 4\r\n4 2 2 2 4 4\r\n4 4 3 4 7 7\r\n4 4 4 4 7 7</code></pre>\r\n<p>The prime numbers in this matrix are 2, 3, 5, 7. Let's identify their positions (0-indexed row, column):</p>\r\n<ul>\r\n    <li>(0,5): 5</li>\r\n    <li>(1,1): 2, (1,2): 2, (1,3): 2, (1,4): 2</li>\r\n    <li>(2,1): 2, (2,2): 2</li>\r\n    <li>(3,2): 3</li>\r\n    <li>(3,4): 7, (3,5): 7</li>\r\n    <li>(4,4): 7, (4,5): 7</li>\r\n</ul>\r\n<p>A region is formed by horizontally, vertically, or diagonally adjacent numbers. The largest connected component of prime numbers is:</p>\r\n<ul>\r\n    <li>(1,1) value 2</li>\r\n    <li>(1,2) value 2 (adjacent to (1,1))</li>\r\n    <li>(1,3) value 2 (adjacent to (1,2))</li>\r\n    <li>(1,4) value 2 (adjacent to (1,3))</li>\r\n    <li>(2,1) value 2 (adjacent to (1,1) vertically)</li>\r\n    <li>(2,2) value 2 (adjacent to (1,2) vertically and (2,1) horizontally)</li>\r\n    <li>(3,2) value 3 (adjacent to (2,2) vertically)</li>\r\n</ul>\r\n<p>This component consists of 7 prime numbers. Other prime regions exist (e.g., the '5' at (0,5) is a region of size 1; the '7's form a region of size 4), but the largest is 7.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N, M &lt;= 100</code></li>\r\n    <li>Array elements are non-negative integers.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param N The number of rows in the 2D array.\n     * @param M The number of columns in the 2D array.\n     * @param A The 2D array of numbers.\n     * @return The size of the largest region consisting only of prime numbers.\n     */\n    int primeRegion(int N, int M, const std::vector<std::vector<int>>& A) {\n        // WRITE YOUR LOGIC HERE\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N, M;\n    std::cin >> N >> M;\n\n    std::vector<std::vector<int>> A(N, std::vector<int>(M));\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            std::cin >> A[i][j];\n        }\n    }\n\n    Solution sol;\n    int result = sol.primeRegion(N, M, A);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Hitachi_13oct",
        "company_id": 636
    },
    {
        "id": 1802,
        "title": "Trees: Strings on trees",
        "problem_statement": "<h1>Trees: Strings on trees</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a binary tree with N nodes, each node containing a digit 0-9. You have to start from any of the nodes and move to any of its descendant leaf nodes, i.e., you always have to move towards the leaf node from the current node.</p>\r\n<p>While traversing on such a path, you will concatenate the digits.</p>\r\n<p>Find the maximum integer you can generate by concatenating digits in this way on any of the possible paths.</p>\r\n\r\n<p><strong>Note:</strong> No node will have the same digit in both of their child nodes. The nodes are given in the form of a list, where (2*i+1)th and (2*i+2)th position in the list.</p>\r\n\r\n<p><strong>Function Description:</strong> In the provided code snippet, implement the provided <code>maximumInteger(...)</code> method which returns the maximum integer that can be made as mentioned in the problem statement. You can write your code in the space below the phrase \"WRITE YOUR LOGIC HERE\".</p>\r\n<p>There will be multiple test cases running so the input and Output should match exactly as provided.</p>\r\n<p>The base Output variable <code>result</code> is set to a default value of -404 which can be modified. Additionally, you can add or remove these output variables.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>The first line contains an integer N denoting the number of nodes in the binary tree.</p>\r\n<p>The second line contains N integers denoting the digit present at the <code>i</code>th node, if this is -1 it means there is no node (NULL).</p>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>The output contains the maximum string that can be generated.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n1 2 3 4 5 6 -1\r\nOutput:\r\n136</code></pre>\r\n<p><strong>Explanation:</strong> All possible paths from any node to leaf nodes are: 1->2->4, 1->2->5, 1->3->6, 2->4, 2->5, 3->6, 4, 5, 6. The maximum possible string formed is 136.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 1000</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nint maximumInteger(int N, int A[]) {\r\n    // this is default OUTPUT. You can change it.\r\n    int result = -404;\r\n\r\n    //write your logic here\r\n\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    //INPUT [uncomment &amp; modify if required]\r\n    int N;\r\n    cin &gt;&gt; N;\r\n    int A[N]; // This is a C99 feature, might need vector in C++ standard\r\n    for (int i = 0; i &lt; N; i++) {\r\n        cin &gt;&gt; A[i];\r\n    }\r\n\r\n    //OUTPUT [uncomment &amp; modify if required]\r\n    cout &lt;&lt; maximumInteger(N, A);\r\n\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @brief Finds the maximum integer that can be formed by concatenating digits on a path from any node to a descendant leaf.\n     * \n     * @param N The number of nodes in the binary tree.\n     * @param A A vector representing the tree, where A[i] is the digit at node i.\n     *          Children of node i are at 2*i+1 and 2*i+2. A value of -1 indicates a null node.\n     * @return A string representing the maximum integer found.\n     */\n    std::string maximumInteger(int N, const std::vector<int>& A) {\n        // WRITE YOUR LOGIC HERE\n        return \"\"; // Placeholder\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i];\n    }\n\n    Solution sol;\n    std::string result = sol.maximumInteger(N, A);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Hitachi_13oct",
        "company_id": 636
    },
    {
        "id": 1803,
        "title": "K Maxima",
        "problem_statement": "<h1>K Maxima</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have an array of N integers and an integer K.</p>\r\n<p>Print the number of contiguous subarrays whose Kth element is the maximum element in the subarray.</p>\r\n<p><strong>Note:</strong> It is guaranteed that K is not greater than N.</p>\r\n<p>In the provided code snippet, implement the provided <code>KMaxima(...)</code> method to print the number of contiguous subarrays whose Kth element is the maximum element of the subarray. You can write your code in the space below the phrase 'WRITE YOUR LOGIC HERE'.</p>\r\n<p>There will be multiple test cases running, so the Input and Output should match exactly as provided. The base Output variable result is set to a default value of -999, which can be modified. Additionally, you can add or remove these output variables.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two integers N and K.</p>\r\n<p>The second line contains N integers representing the array A.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains a single integer denoting the number of contiguous subarrays whose Kth element is the maximum element of the subarray.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nN = 5, K = 3\r\nA = [3, 2, 4, 2, 1]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> N = 5, K = 3, A = [3, 2, 4, 2, 1]. The 6 possible contiguous subarrays with the 3rd element as maximum are: [3, 2, 4], [2, 4, 2], [3, 2, 4, 2], [2, 4, 2, 1], [3, 2, 4, 2, 1], [4].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>N &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= K &lt;= N</code></li>\r\n    <li><code>-10^9 &lt;= A[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    /**\n     * @param N The number of integers in the array.\n     * @param K The 1-based index to check for the maximum element.\n     * @param A The array of integers.\n     * @return The number of contiguous subarrays whose Kth element is the maximum.\n     */\n    long long KMaxima(int N, int K, const std::vector<int>& A) {\n        // WRITE YOUR LOGIC HERE\n        long long result = 0;\n        return result;\n    }\n};\n\nint main() {\n    // Fast I/O\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // Input reading\n    int N, K;\n    std::cin >> N >> K;\n\n    std::vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i];\n    }\n\n    // Create a Solution object and call the method\n    Solution solution;\n    long long result = solution.KMaxima(N, K, A);\n\n    // Output the result\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Hitachi_13oct",
        "company_id": 636
    }
]