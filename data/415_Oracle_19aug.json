[
    {
        "id": 1223,
        "title": "Maximize Array Value",
        "problem_statement": "<h1>Maximize Array Value</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of n positive integers with 1-based indexing, you can perform the following operation any number of times:</p>\r\n<ol>\r\n    <li>Choose any index i where 2 &le; i &le; n</li>\r\n    <li>Choose any value x where 1 &le; x &le; arr[i]</li>\r\n    <li>Set arr[i-1] to arr[i-1] + x</li>\r\n    <li>Set arr[i] to arr[i] - x</li>\r\n</ol>\r\n<p>Your task is to minimize the maximum value in the array and return this minimum possible maximum.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider the array <code>arr = [1, 5, 7, 6]</code> with <code>n = 4</code>.</p>\r\n<p><strong>Optimal sequence of operations:</strong></p>\r\n<p><strong>Operation 1:</strong> Choose <code>i = 3, x = 4</code></p>\r\n<ul>\r\n    <li>Replace <code>arr[2]</code> with <code>5 + 4 = 9</code></li>\r\n    <li>Replace <code>arr[3]</code> with <code>7 - 4 = 3</code></li>\r\n    <li>Array becomes <code>[1, 9, 3, 6]</code> with maximum 9</li>\r\n</ul>\r\n<p><strong>Operation 2:</strong> Choose <code>i = 2, x = 4</code></p>\r\n<ul>\r\n    <li>Replace <code>arr[1]</code> with <code>1 + 4 = 5</code></li>\r\n    <li>Replace <code>arr[2]</code> with <code>9 - 4 = 5</code></li>\r\n    <li>Array becomes <code>[5, 5, 3, 6]</code> with maximum 6</li>\r\n</ul>\r\n<p><strong>Operation 3:</strong> Choose <code>i = 4, x = 1</code></p>\r\n<ul>\r\n    <li>Replace <code>arr[3]</code> with <code>3 + 1 = 4</code></li>\r\n    <li>Replace <code>arr[4]</code> with <code>6 - 1 = 5</code></li>\r\n    <li>Array becomes <code>[5, 5, 4, 5]</code> with maximum 5</li>\r\n</ul>\r\n<p>The minimum possible maximum value is 5.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n5\r\n15\r\n19\r\nOutput: 13</code></pre>\r\n<p><strong>Explanation:</strong> One sequence that produces the optimal answer is:</p>\r\n<ul>\r\n    <li>Operation 1: i = 3, x = 6 -> arr becomes [5, 21, 13].</li>\r\n    <li>Operation 2: i = 2, x = 8 -> arr becomes [13, 13, 13].</li>\r\n</ul>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n10\r\n3\r\n5\r\n7\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> In this case, there is no way to reduce the maximum value below 10.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximum</code> in the editor with the following parameters:</p>\r\n<p><code>int arr[n]:</code> an array of integers</p>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int:</code> the minimum maximum value possible</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; arr[i] &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_19aug",
        "company_id": 415
    },
    {
        "id": 1224,
        "title": "Minimum Cost to Convert Products",
        "problem_statement": "```html\r\n<h1>Minimum Cost to Convert Products</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The manager of Amazon's fulfillment center is responsible for maintaining the inventory of a product in two variants, A and B, represented as 0 and 1 respectively. There are n products, where the i<sup>th</sup> product is represented by the array <code>product[i]</code> (if <code>product[i]</code> equals 1, the product is of type B. Otherwise, it is of type A). A positive integer k is also given, which specifies the length of the subarray that can be selected to convert a single element within that subarray to product A.</p>\r\n\r\n<p>Since variant B is no longer in demand, Amazon wants to convert all products in the array to variant A at the minimum cost, using the following operation as many times as needed.</p>\r\n<ul>\r\n    <li>Choose two indices, <code>l</code> and <code>r</code> (<code>0 &le; l &le; r &lt; n</code>), such that <code>r - l + 1 = k</code>.</li>\r\n    <li>The cost of this operation is <code>product[l] + product[l+1] + ... + product[r-1] + product[r]</code>.</li>\r\n    <li>Choose an index <code>p</code> such that <code>l &le; p &le; r</code> and set <code>product[p]</code> to variant A (i.e., set it to 0).</li>\r\n</ul>\r\n<p>Given array <code>product</code> of length <code>n</code>, find the minimum cost to convert all the products in the array <code>product</code> to variant A.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, product = [1, 0, 1, 0, 1], k = 3\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The sequence of operations can be defined as follows:</p>\r\n<ul>\r\n    <li>Choose the subarray <code>[l, r] = [1, 3]</code> and set <code>product[2] = 0</code> with cost = <code>0 + 1 + 0 = 1</code>. <code>product</code> becomes <code>[1, 0, 0",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_19aug",
        "company_id": 415
    },
    {
        "id": 1225,
        "title": "Element Swapping",
        "problem_statement": "<h1>Element Swapping</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of n integers, you can perform the following operation any number of times:</p>\r\n<ol>\r\n    <li>Choose any index (0 &lt;= i &lt; n - 1) and swap arr[i] and arr[i + 1].</li>\r\n    <li>Each element can be swapped at most once during the process.</li>\r\n</ol>\r\n<p>The strength of an index is defined as (arr[i] * (i + 1)), using 0-based indexing.</p>\r\n<p>Find the maximum possible sum of the strength of all indices after optimal swaps:</p>\r\n<pre><code class='language-text'>n-1\r\n &#x2211; arr[i] &#x22C5; (i + 1)\r\ni=0</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>n = 4\r\narr = [2, 1, 4, 3]</code></pre>\r\n<p><strong>Optimal swaps:</strong></p>\r\n<ul>\r\n    <li>Swap arr[2], arr[3]</li>\r\n    <li>Swap arr[0], arr[1]</li>\r\n</ul>\r\n<p><strong>Final array:</strong> [1, 2, 3, 4]</p>\r\n<p><strong>Sum of strengths:</strong> (1 * 1) + (2 * 2) + (3 * 3) + (4 * 4) = 30</p>\r\n<p>This is the maximum possible value, so return 30.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: n = 5\r\narr = [1, 9, 7, 3, 2]\r\nOutput: 66</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to swap (arr[2], arr[3]). The final array is [1, 9, 3, 7, 2]. The sum of strengths = (1*1 + 9*2 + 3*3 + 7*4 + 2*5) = 66.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3\r\narr = [1, 2, 5]\r\nOutput: 28</code></pre>\r\n<p><strong>Explanation:</strong> No swaps are needed in this case. The sum of strengths = (1 * 1 + 2 * 2 + 5 * 3) = 20.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumSumOfStrengths</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: the initial array</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long int</code>: the maximum possible sum of strengths after the operations are applied optimally</li>\r\n</ul>\r\n<p>The function signature is:</p>\r\n<pre><code class='language-javascript'>long getMaximumSumOfStrengths(vector&lt;int&gt; arr) {\r\n    // Function body\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= arr[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_19aug",
        "company_id": 415
    },
    {
        "id": 1226,
        "title": "JSON Diff Tool",
        "problem_statement": "<h1>JSON Diff Tool</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Develop a simple service to compare two JSON (JavaScript Object Notation) objects and identify differences in their key-value pairs.</p>\r\n<p>To keep the prototype straightforward:</p>\r\n<ul>\r\n    <li>Each JSON object will contain only key-value pairs (no nested objects or arrays).</li>\r\n    <li>Given two JSON strings, <code>json1</code> and <code>json2</code>, determine the list of keys where the values differ.</li>\r\n    <li>Ignore keys that appear in only one of the JSON objects.</li>\r\n    <li>The output should be a list of differing keys, sorted in alphabetical order.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\njson1 = '{\"name\":\"Alex\",\"age\":25,\"city\":\"New York\"}'\r\njson2 = '{\"name\":\"Alex\",\"age\":30,\"city\":\"Los Angeles\",\"country\":\"USA\"}'\r\nOutput: [\"age\", \"city\"]</code></pre>\r\n<p><strong>Explanation:</strong> The \"age\" and \"city\" keys have different values. The \"country\" key does not appear in both JSONs. Return the sorted list [\"age\", \"city\"].</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getJSONDiff</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>json1</code>: the first JSON string</li>\r\n    <li><code>json2</code>: the second JSON string</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>string[]</code>: a sorted list of keys that have different associated values in the two JSONs</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |json1|, |json2| <= 10^5</code></li>\r\n    <li>There are no white spaces in the string.</li>\r\n</ul>\r\n\r\n<h2>Sample Cases</h2>\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\njson1 = '{\"hacker\":\"rank\",\"input\":\"output\"}'\r\njson2 = '{\"hacker\":\"ranked\",\"input\":\"wrong\"}'\r\nOutput: [\"hacker\", \"input\"]</code></pre>\r\n<p><strong>Explanation:</strong> Neither key's values are the same in both strings.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\njson1 = '{\"hacker\":\"rank\",\"input\":\"output\"}'\r\njson2 = '{\"hacker\":\"rank\",\"input\":\"output\"}'\r\nOutput: []</code></pre>\r\n<p><strong>Explanation:</strong> Both values match in both strings, so return an empty list.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_19aug",
        "company_id": 415
    }
]