[
    {
        "id": 1162,
        "title": "String generation",
        "problem_statement": "<h1>String generation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string S1 of length L1 consisting of Latin uppercase alphabets only and a string S2 of length L2 consisting of characters 'T' and 'F' only.</p>\r\n<p>Generate a lexicographically smallest string S of length (L1 + L2 - 1) such that a substring of length L1 in string S starting at index i (0 &lt;= i &lt; L2) is equal to S1 if and only if i-th element of S2 is 'T' (without quotes) else not.</p>\r\n<p>If no such string can be generated, print \"-1\" (without quotes).</p>\r\n\r\n<h2>Notes</h2>\r\n<p>A string a is lexicographically smaller than a string b if and only if one of the following holds:</p>\r\n<ul>\r\n    <li>a is a prefix of b, but a != b;</li>\r\n    <li>in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.</li>\r\n</ul>\r\n<p>Find the lexicographically smallest string S which satisfies the given condition.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the solve function. This function takes the following 2 parameters and returns the answer.</p>\r\n<ul>\r\n    <li>S1: Represents a string S1</li>\r\n    <li>S2: Represents a string S2</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains T, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains a string S1.</li>\r\n            <li>The second line contains a string S2.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print a string S in a new line or -1 if not possible.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= T &lt;= 10<sup>3</sup></code></li>\r\n    <li><code>1 &lt;= |S1| &lt;= 10<sup>3</sup></code></li>\r\n    <li><code>1 &lt;= |S2| &lt;= 10<sup>3</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\nABCA\r\nTFFF\r\nOutput:\r\nABCAAAA</code></pre>\r\n<p><strong>Explanation:</strong> Given</p>\r\n<ul>\r\n    <li>S1 = \"ABCA\"</li>\r\n    <li>S2 = \"TFFF\"</li>\r\n</ul>\r\n<p>Approach</p>\r\n<p>S = \"ABCAAAA\" is lexicographically smallest string that satisfies the given condition -&gt;</p>\r\n<ul>\r\n    <li>Substring starting at index 0: \"ABCA\" is equal to S1. S2<sub>0</sub> = 'T'.</li>\r\n    <li>Substring starting at index 1: \"BCAA\" is not equal to S1. S2<sub>1</sub> = 'F'.</li>\r\n    <li>Substring starting at index 2: \"CAAA\" is not equal to S1. S2<sub>2</sub> = 'F'.</li>\r\n    <li>Substring starting at index 3: \"AAAA\" is not equal to S1. S2<sub>3</sub> = 'F'.</li>\r\n</ul>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li>Time Limit: 10 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Barclays_4aug",
        "company_id": 390
    }
]