[
    {
        "id": 1701,
        "title": "Count Grid Coloring Patterns",
        "problem_statement": "<h1>Count Grid Coloring Patterns</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An automated painting system needs a program that can paint an <code>n x 3</code> grid using three distinct colors: red (R), green (G), and blue (B). The coloring must adhere to a specific rule: no row or column should contain cells that are all the same color.</p>\r\n<p>For example, a row like <code>[R, R, R]</code> or a column where all three cells are <code>[G, G, G]</code> (vertically) would be invalid. However, a row like <code>[R, G, R]</code> or <code>[R, R, G]</code> is valid, as not all cells in that row are the same color. Similarly for columns.</p>\r\n<p>Given an integer <code>n</code>, representing the number of rows, determine the total number of valid patterns that can be painted on an <code>n x 3</code> grid. Since the number of patterns can be very large, return the result modulo <code>(10^9 + 7)</code>.</p>\r\n<p>For instance, a <code>4 x 3</code> grid has 296490 valid patterns.</p>\r\n<p>Complete the <code>countPatterns</code> function in the editor below.</p>\r\n<ul>\r\n    <li><strong>Parameter:</strong> <code>int n</code>: The number of rows in the <code>n x 3</code> grid.</li>\r\n    <li><strong>Returns:</strong> <code>int</code>: The number of ways in which the grid can be colored, calculated as a modulo of <code>(10^9 + 7)</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 2\r\nOutput: 174</code></pre>\r\n<p><strong>Explanation:</strong> For a <code>2x3</code> grid, there are 174 distinct valid coloring patterns. The problem statement provides visual examples of valid and invalid arrangements for a <code>2x3</code> grid to illustrate the rules.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3\r\nOutput: 9750</code></pre>\r\n<p><strong>Explanation:</strong> For a <code>3x3</code> grid, there are 9750 distinct valid coloring patterns.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 20000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Navi Technologies",
        "company_id": 594
    },
    {
        "id": 1702,
        "title": "Minimum Spanning Tree Edge Weight Difference",
        "problem_statement": "<h1>Minimum Spanning Tree Edge Weight Difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a given weighted undirected graph of <code>g_nodes</code> nodes numbered from 1 to <code>g_nodes</code>. There are <code>g_edges</code> edges where the <code>i</code>-th edge connects nodes <code>g_from[i]</code> and <code>g_to[i]</code> with a weight <code>g_weight[i]</code>. A spanning tree is defined as a graph obtained after deleting some edges from the original graph such that all nodes are connected by exactly <code>g_nodes - 1</code> edges.</p>\r\n<p>Find a spanning tree of the graph such that the difference between the maximum and minimum weights of the tree is the minimum possible. Report this minimum possible difference as the answer or -1 if no spanning tree exists in the graph.</p>\r\n<p>Complete the function <code>findMinDifference</code> in the editor below. The function must return a minimum difference between the maximal and the minimal edge weight or -1 if no Spanning Tree exists.</p>\r\n<p><code>findMinDifference</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int g_nodes</code>: the number of nodes</li>\r\n    <li><code>vector&lt;int&gt; g_from</code>: 1-D array, one end of each edge</li>\r\n    <li><code>vector&lt;int&gt; g_to</code>: 1-D array, the other end of each edge</li>\r\n    <li><code>vector&lt;int&gt; g_weight</code>: 1-D array, the weights of each edge</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int findMinDifference(int g_nodes, vector&lt;int&gt; g_from, vector&lt;int&gt; g_to, vector&lt;int&gt; g_weight)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: g_nodes = 4, g_edges = 5, g_from = [1, 2, 3, 2], g_to = [2, 3, 4, 4], g_weight = [-1, 2, 5, 3]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> By removing the edge 3-4 with the weight 5, we will obtain a spanning tree with weights equal to [-1, 2, 3]. Therefore, the difference between maximum and minimum weights of the edges is 3 - (-1) = 4. Hence, 4 is the answer. It can be shown that the answer cannot be less than this.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: g_nodes = 3, g_edges = 3, g_from = [1, 2, 3], g_to = [2, 3, 1], g_weight = [5, 4, 3]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the spanning tree formed by the 2nd and the 3rd edge (edges with weights 4 and 3) would give the minimum difference between the edges. The maximum weight is 4, the minimum weight is 3. The difference is 4 - 3 = 1. It can be shown that no other possible combination would give a better answer.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: g_nodes = 4, g_edges = 5, g_from = [1, 1, 1, 3, 3], g_to = [2, 3, 4, 2, 4], g_weight = [1, 2, 1, 2, 2]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> A spanning tree can be formed using edges (1,2) with weight 1, (1,3) with weight 1, and (1,4) with weight 1. The maximum edge weight in this spanning tree is 1, and the minimum edge weight is 1. The difference is 1 - 1 = 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= g_nodes &lt;= 1500</code></li>\r\n    <li><code>0 &lt;= g_edges &lt;= 2500</code></li>\r\n    <li><code>1 &lt;= g_from[i], g_to[i] &lt;= g_nodes</code></li>\r\n    <li><code>-1000 &lt;= g_weight[i] &lt;= 1000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Navi Technologies",
        "company_id": 594
    }
]