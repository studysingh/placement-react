[
    {
        "id": 1570,
        "title": "SQL: Billing Software Report 2",
        "problem_statement": "<h1>SQL: Billing Software Report 2</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working on a billing application and need to get a list of customers with their transaction transcripts.</p>\r\n<p>The result should have the following columns: <code>iban</code> | <code>transactions</code> | <code>total</code>.</p>\r\n<ul>\r\n    <li><strong>iban:</strong> client's IBAN number</li>\r\n    <li><strong>transactions:</strong> list of transaction amount records for a specific IBAN:\r\n        <ul>\r\n            <li>Record is a transaction amount.</li>\r\n            <li>Records are separated by the sign of the amount of the transaction surrounded by a single space. See 'Expected Output' for an example.</li>\r\n            <li>Records are sorted in ascending order of <code>dt</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>total:</strong> the total amount of all transactions for a specific IBAN</li>\r\n</ul>\r\n<p>The result should be sorted in descending order by <code>total</code>.</p>\r\n\r\n<h2>Schema</h2>\r\n<p><strong>customers</strong> table:</p>\r\n<ul>\r\n    <li><code>id</code>: <code>SMALLINT</code> (ID)</li>\r\n    <li><code>iban</code>: <code>VARCHAR(255)</code> (IBAN number)</li>\r\n</ul>\r\n<p><strong>transactions</strong> table:</p>\r\n<ul>\r\n    <li><code>customer_id</code>: <code>SMALLINT</code> (Customer ID)</li>\r\n    <li><code>dt</code>: <code>VARCHAR(19)</code> (Transaction timestamp)</li>\r\n    <li><code>amount</code>: <code>DECIMAL(5,2)</code> (Transaction amount)</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1: Sample Data Tables</h3>\r\n<p><strong>customers</strong> table:</p>\r\n<pre><code class='language-text'>id | iban\r\n---|------------------------------------\r\n1  | GR90 7791 3810 DD28 ZQ4P 1DLE CDG\r\n2  | MR93 6340 7028 7227 7558 5192 735\r\n3  | RS63 3597 4782 7926 0668 90\r\n4  | NL86 DLIX 7773 7098 24\r\n5  | GR96 1272 1461 GBLM DRZS ZLRG WMV</code></pre>\r\n\r\n<p><strong>transactions</strong> table:</p>\r\n<pre><code class='language-text'>customer_id | dt                  | amount\r\n------------|---------------------|--------\r\n1           | 2022-05-08 21:58:37 | -54.13\r\n1           | 2022-05-11 21:10:29 | -21.60\r\n1           | 2022-05-21 14:21:40 | -90.71\r\n2           | 2022-05-03 14:54:20 | 31.14\r\n2           | 2022-05-06 18:50:04 | -83.90\r\n2           | 2022-05-18 04:14:50 | 36.56\r\n2           | 2022-05-23 04:15:08 | 24.40\r\n2           | 2022-05-27 09:24:59 | 23.86\r\n3           | 2022-05-04 00:21:55 | 97.09\r\n3           | 2022-05-16 22:53:44 | -91.59\r\n3           | 2022-05-23 10:02:40 | -35.69\r\n4           | 2022-04-30 02:34:43 | -20.25\r\n4           | 2022-05-03 14:54:48 | 14.78\r\n4           | 2022-05-04 06:36:40 | 52.72\r\n4           | 2022-05-15 11:11:24 | -91.96\r\n4           | 2022-05-23 08:25:20 | -79.70\r\n4           | 2022-05-26 00:54:26 | 77.01\r\n4           | 2022-05-30 11:39:12 | 79.46\r\n5           | 2022-05-02 04:52:41 | -63.32\r\n5           | 2025-05-11 21:28:09 | 37.28</code></pre>\r\n\r\n<h3>Example 2: Expected Output</h3>\r\n<pre><code class='language-text'>iban                                | transactions                                        | total\r\n------------------------------------|-----------------------------------------------------|--------\r\nMR93 6340 7028 7227 7558 5192 735   | 31.14 - 83.90 + 36.56 + 24.40 + 23.86               | 32.06\r\nNL86 DLIX 7773 7098 24              | -20.25 + 14.78 + 52.72 - 91.96 - 79.70 + 77.01 + 79.46 | 32.06\r\nGR96 1272 1461 GBLM DRZS ZLRG WMV   | -63.32 + 37.28                                      | -26.04\r\nRS63 3597 4782 7926 0668 90         | 97.09 - 91.59 - 35.69                               | -30.19\r\nGR90 7791 3810 DD28 ZQ4P 1DLE CDG   | -54.13 - 21.60 - 90.71                              | -166.44</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Paytm_3oct",
        "company_id": 553
    },
    {
        "id": 1571,
        "title": "Modify the String",
        "problem_statement": "<h1>Modify the String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string <code>input_str</code> of length <code>n</code>, choose any character that occurs at least twice and delete any one occurrence. Repeat this until all remaining characters are distinct. Return the lexicographically maximum string that can be formed this way.</p>\r\n<p>Complete the function <code>getString</code> in the editor below.</p>\r\n<p><code>getString</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string input_str</code>: a string of length <code>n</code></li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>string</code>: the result of the operations, as described</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: input_str = \"aabcab\"\r\nOutput: \"acb\"</code></pre>\r\n<p><strong>Explanation:</strong> The length of the string, n = 6. Some of the strings that can be formed are:</p>\r\n<ul>\r\n    <li>\"acb\" - delete the first occurrence of 'a' and 'b'</li>\r\n    <li>\"abc\" - delete the first occurrence of 'a' and the second occurrence of 'b'</li>\r\n</ul>\r\n<p>It can be proven that the lexicographically maximum string that can be obtained is \"acb\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: input_str = \"abacaba\"\r\nOutput: \"cba\"</code></pre>\r\n<p><strong>Explanation:</strong> The length of the string n = 7. The strings that can be formed are: \"abc\", \"bca\", \"cab\", \"acb\", \"cba\" and \"bac\". The lexicographically maximum is \"cba\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>input_str</code> contains only lowercase English letters</li>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Paytm_3oct",
        "company_id": 553
    },
    {
        "id": 1572,
        "title": "Visiting Cities",
        "problem_statement": "<h1>Visiting Cities</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are a number of cities in a row, and there are two bus lines (Red and Blue) that go between them. Both lines visit all cities in order, but one may take longer than the other to travel between any two cities.</p>\r\n<p>Starting on or moving to the Blue line takes a certain amount of extra time (blueCost). There is no extra time required to start on or move to the Red line.</p>\r\n<p>Your task is to determine the minimum time to travel from the first city to each of the cities.</p>\r\n<p>Complete the <code>minimumCost</code> function in the editor with the following parameters:</p>\r\n<ul>\r\n<li><code>int red[n]</code>: the times to travel on the Red line</li>\r\n<li><code>int blue[n]</code>: the times to travel on the Blue line</li>\r\n<li><code>int blueCost</code>: the time penalty to start on or switch to the Blue line</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>long int[n]</code>: the minimum cost of visiting each of the cities from city 0.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: red = [2, 3, 4], blue = [3, 1, 1], blueCost = 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>There are 4 cities numbered 0 through 3. Times from city 0 to cities 1, 2, and 3 are at indices 0, 1, and 2 respectively in the red and blue arrays.</p>\r\n<ul>\r\n<li>The minimum cost to go from city 0 to itself is 0. Now ans are [0].</li>\r\n<li>The time from city 0 to city 1:\r\n    <ul>\r\n    <li>2 on the Red line</li>\r\n    <li>3 + blueCost = 5 on the Blue line (blueCost applies when you start on the Blue line)</li>\r\n    <li>The minimum time to city 1 is 2 on the Red line, so ans = [0, 2]</li>\r\n    </ul>\r\n</li>\r\n<li>Continuing to city 2:\r\n    <ul>\r\n    <li>Stay on the Red line, arriving at 2 + 3 = 5</li>\r\n    <li>Switch to the Blue line and arrive at 2 + 1 + 2 = 5 (blueCost applies when you switch to the Blue line)</li>\r\n    <li>In this case, you arrive at time 5 regardless of the carrier, so ans = [0, 2, 5]</li>\r\n    </ul>\r\n</li>\r\n<li>To get to city 3:\r\n    <ul>\r\n    <li>Take the Red line, arriving at 5 + 4 = 9</li>\r\n    <li>Stay on the Blue line arriving at 5 + 1 = 6 (blueCost does not apply if you stay on the Blue line)</li>\r\n    <li>The minimum time is 6, so ans = [0, 2, 5, 6]</li>\r\n    </ul>\r\n</li>\r\n</ul>\r\n<p>The final ans array is [0, 2, 5, 6].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 1, red = [5], blue = [3], blueCost = 1\r\nOutput: [0, 4]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>You are already at city-0, so the time taken to reach city-0 is 0.</p>\r\n<p>The time to reach city-1 from city-0:</p>\r\n<ul>\r\n<li>Take the Red line: 5</li>\r\n<li>Take the Blue line: 3 + 1 = 4</li>\r\n</ul>\r\n<p>The minimum time to reach city-1 is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>2 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n<li><code>1 &le; red[i], blue[i], blueCost &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Paytm_3oct",
        "company_id": 553
    }
]