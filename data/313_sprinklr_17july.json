[
    {
        "id": 974,
        "title": "Employee Of The Year",
        "problem_statement": "<h1>Employee Of The Year</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Dunder Mifflin Paper Company is back with its employee appreciation event The Dundies. This time they've introduced a new category \"Employee Of The Year\". To be eligible for the nomination in this category, an employee must meet the following criteria with respect to his/her attendance for the last N days.</p>\r\n<ul>\r\n    <li>The employee should not have been absent for <strong>more than or equal to 2 days</strong> in total.</li>\r\n    <li>The employee should not have been <strong>late to work for 3 or more consecutive days</strong>.</li>\r\n</ul>\r\n<p>An attendance record of an employee for N days can be represented as a string of length N, where each character signifies whether the employee was absent, late, or present on that day. The record only contains the following three characters:</p>\r\n<ul>\r\n    <li><strong>A:</strong> Absent</li>\r\n    <li><strong>L:</strong> Late</li>\r\n    <li><strong>P:</strong> Present</li>\r\n</ul>\r\n<p>Given an integer N (number of days), return the number of possible attendance records of length N that make an employee eligible for the award nomination. The answer may be very large, so return it modulo 10<sup>9</sup> + 7.</p>\r\n<p>You'll be given a single integer N.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 2\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> There are 8 records with length 2 that are eligible for the award: \"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\". Only \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10<sup>5</sup></code></li>\r\n</ul>\r\n\r\n<h2>Follow-up</h2>\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n<p><strong>Limits:</strong></p>\r\n<ul>\r\n    <li>Time Limit: 10 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n<p><strong>Scoring:</strong> Score is assigned if any testcase passes</p>\r\n<p><strong>Allowed Languages:</strong> C, C++, C#, Go, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Kotlin, Objective-C, PHP, Python, Python 3, Swift, TypeScript</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "sprinklr_17july",
        "company_id": 313
    },
    {
        "id": 975,
        "title": "String Transformation",
        "problem_statement": "<h1>String Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two strings S and T of the same length. You need to determine if it's possible to transform string S into T with the following rule any number of times: You can map a character from string S to a character of String T and replace all the occurrences of that character in string S.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ol>\r\n    <li>All occurrences of a character must be replaced with another character while preserving the order of characters.</li>\r\n    <li>No two characters may map to the same character, but a character may map to itself.</li>\r\n</ol>\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n<p><strong>Limits:</strong></p>\r\n<ul>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains an integer N, the number of test cases.</p>\r\n<p>For every test case:</p>\r\n<ul>\r\n    <li>The first line contains string S.</li>\r\n    <li>The second line contains string T.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For every test case, return a boolean in a new line, indicating if it's possible to transform S into T.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\negg\r\nadd\r\nfoo\r\nbar\r\npaper\r\ntitle\r\nOutput:\r\ntrue\r\nfalse\r\ntrue</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For S: \"egg\", T: \"add\" -> 'e' can be mapped to 'a' and 'g' can be mapped to 'd', replacing all these occurrences will convert S into T.</p>\r\n<p>For S: \"foo\", T: \"bar\" -> 'f' can be mapped to 'b', but 'o' cannot be mapped with 'a' and 'r' both, since we're looking for unique mapping.</p>\r\n<p>For S: \"paper\", T: \"title\" -> 'p' can be mapped to 't', 'a' can be mapped to 'i', 'e' can be mapped to 'l', 'r' can be mapped to 'e'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10</code></li>\r\n    <li><code>1 &lt;= S.length &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>S.length == T.length</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "sprinklr_17july",
        "company_id": 313
    },
    {
        "id": 976,
        "title": "Find the Min and Max values",
        "problem_statement": "<h1>Find the Min and Max values</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given n digits. Each digit will be between 1 and 9 (inclusive). You are given m arithmetic operators. Each operator will be either '+' or '-'. You can combine the digits and make any numbers, one digit should be used in exactly one number.</p>\r\n<p>For example - if you have digits = [5, 9, 3, 3], then possible list of number are [95, 33], [593, 3], [53, 93], and many more.</p>\r\n<p>Now you can create an arithmetic expression using exactly given m operators. Expression is valid if it satisfies the following conditions -</p>\r\n<ul>\r\n    <li>It should contain given m operators.</li>\r\n    <li>No operators should be placed as adjacent. There should be one number before and after each operator.</li>\r\n</ul>\r\n<p>From each possible valid expression find the minimum and maximum value of the expression.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line contains one integer - the number of test cases.</p>\r\n<p>The first line of each test case contains one integer - number of digits.</p>\r\n<p>The next line contains integers - list of digits.</p>\r\n<p>The next line contains one integer - number of operators.</p>\r\n<p>The next line contains characters (space separated) - operators (each operator will be either '+' or '-').</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case print two integer minimum value and maximum value on each line.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3\r\n1 9 6\r\n1\r\n+\r\nOutput:\r\n25 97</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>19 + 6 = 25 for minimum</p>\r\n<p>96 + 1 = 97 for maximum</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= t &lt;= 10^5</code></li>\r\n    <li><code>2 &lt;= n &lt;= 15</code></li>\r\n    <li><code>1 &lt;= eachdigit &lt;= 9</code></li>\r\n    <li><code>1 &lt;= m &lt;= n-1</code></li>\r\n    <li>Each operator will be either +(plus) or -(minus).</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li>Time Limit: 10 sec(s) for each input file.</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>C, C++14, C++, Go, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Kotlin, Objective-C, PHP, Python, Python 3, Python 3.8, Swift, TypeScript</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "sprinklr_17july",
        "company_id": 313
    }
]