[
    {
        "id": 1920,
        "title": "Overall Confidence Calculation",
        "problem_statement": "<h1>Overall Confidence Calculation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You've just started as a trainer in Thoughtworks University and you want to make a good first impression. You start investigating how to make it easier to organise the coding sessions. It turns out that trainers are spending a lot of their time finding out the average confidence of the participants.</p>\r\n<p>The coding sessions are organised based on how confident the participants are with programming. This is a self-score rating on a scale of 0 to 9. To save having to count how many participants there are, the trainers always prepend this number to the list of participant confidence ratings.</p>\r\n<p>You also find that coding sessions are done in pairs. When there are an odd number of participants, the overall confidence can be determined using the following flow chart:</p>\r\n<p>Based on the provided flow chart, the process to determine overall confidence for an odd number of participants is as follows:</p>\r\n<ol>\r\n    <li><strong>Input:</strong> A list of numbers where the first element represents the total number of participants (let's call this <code>N</code>), and the subsequent elements are the individual confidence ratings.</li>\r\n    <li><strong>Extract Data:</strong>\r\n        <ul>\r\n            <li>Separate the first element (<code>N</code>) from the rest of the list.</li>\r\n            <li>The remaining elements form the list of individual confidence ratings (let's call this <code>ratings</code>).</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Check Participant Count:</strong> If <code>N</code> is an odd number (as per the problem statement's focus):\r\n        <ol type=\"a\">\r\n            <li><strong>Sort Ratings:</strong> Sort the <code>ratings</code> list in ascending order.</li>\r\n            <li><strong>Find Middle Element:</strong> The overall confidence is the middle element of the sorted <code>ratings</code> list.</li>\r\n        </ol>\r\n    </li>\r\n</ol>\r\n<p>The flowchart specifically illustrates the path for when the number of participants is odd.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: [3, 8, 1, 6]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong>\r\nGiven the input list <code>[3, 8, 1, 6]</code>:</p>\r\n<ul>\r\n    <li>The first element, <code>3</code>, indicates there are 3 participants (<code>N = 3</code>).</li>\r\n    <li>The individual confidence ratings are <code>[8, 1, 6]</code>.</li>\r\n    <li>Since the number of participants (<code>3</code>) is an odd number, we follow the specified logic:\r\n        <ul>\r\n            <li>Sort the confidence ratings: <code>[1, 6, 8]</code>.</li>\r\n            <li>The middle element of the sorted list <code>[1, 6, 8]</code> is <code>6</code> (at index 1, for a 0-indexed list of length 3).</li>\r\n        </ul>\r\n    </li>\r\n    <li>Therefore, the overall confidence is <code>6</code>.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Participant self-score ratings are on a scale of 0 to 9.</li>\r\n    <li>The total number of participants is always prepended as the first element to the list of confidence ratings.</li>\r\n    <li>The problem, as described by the flowchart, focuses on determining overall confidence specifically when there is an odd number of participants.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Thoughtworks_17oct",
        "company_id": 675
    },
    {
        "id": 1921,
        "title": "2 Bingo Numbers Game",
        "problem_statement": "<h1>2 Bingo Numbers Game</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There will be a number game today off work, just welcome everyone who's available to join, bring your laptop please! You saw a message be posted in your group chat. \"What's that?\" you ask your teammate confusedly, you just joined ThoughtWorks this week and know few things. \"Oh you know, there are always various activities after work, relaxing yourself, having fun, meanwhile getting to know more people. Feel free to join.\"They answered. \"Ok, maybe it's not too bad, let's see\", you think in your mind.</p>\r\n<p>5 hours later.</p>\r\n<p>When you come to the room you notice there are already some people here. The facilitator starts the introduction when you get a seat. Facilitator \"Welcome everyone, today, we will have a new game, it's about numbers\". \"We will provide you a list of numbers, like the sample in the picture\".</p>\r\n<p>The goal of the game is to find two \"Bingo Numbers\" from each given input number. You need to write a function that takes a list of numbers (where each number is represented as a string of digits) and for each number in the list, identifies the two Bingo Numbers. The examples below illustrate how to find the Bingo Numbers for a single input number.</p>\r\n<p>The two Bingo Numbers, let's call them <code>d1</code> and <code>d2</code>, must be distinct digits present in the input number. They are selected based on the following criteria:</p>\r\n<ul>\r\n    <li>Maximize their sum <code>d1 + d2</code>, such that <code>d1 + d2 &le; 15</code>.</li>\r\n    <li>If there are multiple pairs of digits that yield the same maximum sum, choose the pair with the minimum absolute difference <code>|d1 - d2|</code>.</li>\r\n</ul>\r\n<p>The function should return a string for each input number, formatted as <code>[smaller_digit] [larger_digit]</code>, where <code>smaller_digit</code> is the lexicographically smaller of <code>d1</code> and <code>d2</code>, and <code>larger_digit</code> is the lexicographically larger.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 15721598\r\nOutput: [7] [8]</code></pre>\r\n<p><strong>Explanation:</strong> The distinct digits in the input number are <code>1, 2, 5, 7, 8, 9</code>.\r\nPossible pairs with sum &le; 15:\r\n<code>(9,5) = 14</code>\r\n<code>(8,7) = 15</code>\r\nThe maximum sum &le; 15 is <code>15</code>, achieved by the pair <code>(7, 8)</code>. The output is <code>[7] [8]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 16721598\r\nOutput: [7] [8]</code></pre>\r\n<p><strong>Explanation:</strong> The distinct digits in the input number are <code>1, 2, 5, 6, 7, 8, 9</code>.\r\nPossible pairs with sum &le; 15:\r\n<code>(9,6) = 15</code>\r\n<code>(8,7) = 15</code>\r\nBoth <code>(9, 6)</code> and <code>(7, 8)</code> yield the maximum sum of <code>15</code>.\r\nTo break the tie, we choose the pair with the minimum absolute difference:\r\nFor <code>(9, 6)</code>: <code>|9 - 6| = 3</code>\r\nFor <code>(7, 8)</code>: <code>|8 - 7| = 1</code>\r\nSince <code>1 < 3</code>, the pair <code>(7, 8)</code> is chosen. The output is <code>[7] [8]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: 11399\r\nOutput: [3] [9]</code></pre>\r\n<p><strong>Explanation:</strong> The distinct digits in the input number are <code>1, 3, 9</code>.\r\nPossible pairs with sum &le; 15:\r\n<code>(9,3) = 12</code>\r\nThe maximum sum &le; 15 is <code>12</code>, achieved by the pair <code>(3, 9)</code>. The output is <code>[3] [9]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The input number will have a variable number of digits, always greater than 2.</li>\r\n    <li>Digits within the number can be repeated.</li>\r\n    <li>Each digit in the input number will be an integer between 1 and 9 (inclusive).</li>\r\n    <li>The input number will contain at least two digits less than 8.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Thoughtworks_17oct",
        "company_id": 675
    }
]