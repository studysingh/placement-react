[
    {
        "id": 1969,
        "title": "Capable Models",
        "problem_statement": "<h1>Capable Models</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given n machine learning models, each with an associated cost and feature compatibility:</p>\r\n<ul>\r\n    <li><code>cost[i]</code> represents the cost of the i-th model.</li>\r\n    <li><code>featureAvailability[i]</code> is a binary string indicating suitability for two distinct features:\r\n        <ul>\r\n            <li>\"00\": not equipped for either feature</li>\r\n            <li>\"01\": suitable for feature A but not feature B</li>\r\n            <li>\"10\": suitable for feature B but not feature A</li>\r\n            <li>\"11\": suitable for both features</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>A set of models is k-capable if the number of models suitable for feature A and the number suitable for feature B are both greater than or equal to k.</p>\r\n<p>For each value of k from 1 to n, determine the minimum cost required to assemble a k-capable set of models. Return an array of n integers, where the i-th integer represents the minimum cost for an i-capable set. If no i-capable set exists, the i-th integer should be -1.</p>\r\n\r\n<p>Complete the function <code>getMinimunCost</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int cost[]</code>: the cost of machine learning models</li>\r\n    <li><code>string featureAvailability[]</code>: the compatibility string of models indicating their suitability for two features</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int[]</code>: the <code>i</code>th integer is the minimum cost of a set of <code>k</code>-capable models</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>n = 6\r\ncost = [3, 6, 9, 1, 2, 5]\r\nfeatureAvailability = [\"10\", \"01\", \"10\", \"01\", \"11\", \"01\"]</code></pre>\r\n<p><strong>Output:</strong> <code>[3, 6, 9, 15, 26, -1]</code></p>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The following table illustrates the optimal sets and costs for different k values:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>k</th>\r\n            <th>Optimal Set</th>\r\n            <th>Feature 1 Compatible</th>\r\n            <th>Feature 2 Compatible</th>\r\n            <th>Cost</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>1</td>\r\n            <td>[3]</td>\r\n            <td>[3]</td>\r\n            <td>[3]</td>\r\n            <td>3</td>\r\n        </tr>\r\n        <tr>\r\n            <td>2</td>\r\n            <td>[1,5]</td>\r\n            <td>[1]</td>\r\n            <td>[5]</td>\r\n            <td>3+1+2 = 6</td>\r\n        </tr>\r\n        <tr>\r\n            <td>3</td>\r\n            <td>[1,3,4,5]</td>\r\n            <td>[1,3]</td>\r\n            <td>[3,4,5]</td>\r\n            <td>3+9+1+2 = 15</td>\r\n        </tr>\r\n        <tr>\r\n            <td>4</td>\r\n            <td>[1,2,3,4,5,6]</td>\r\n            <td>[1,2,3,4]</td>\r\n            <td>[2,3,4,5]</td>\r\n            <td>3+6+9+1+2+5 = 26</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>For k >= 5, there will be no capable set. Hence, the answer is [3, 6, 9, 15, 26, -1].</p>\r\n\r\n<h3>Example 2 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>n = 4\r\ncost = [5, 10, 1]\r\nfeatureAvailability = [\"10\", \"01\", \"10\", \"00\"]</code></pre>\r\n<p><strong>Output:</strong> <code>[10, 21, -1, -1]</code></p>\r\n<p><strong>Explanation:</strong></p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>k</th>\r\n            <th>Optimal Set</th>\r\n            <th>Feature 1 Compatible</th>\r\n            <th>Feature 2 Compatible</th>\r\n            <th>Cost</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>1</td>\r\n            <td>[3]</td>\r\n            <td>[3]</td>\r\n            <td>[3]</td>\r\n            <td>10</td>\r\n        </tr>\r\n        <tr>\r\n            <td>2</td>\r\n            <td>[1,2,3]</td>\r\n            <td>[1,3]</td>\r\n            <td>[2,3]</td>\r\n            <td>5+6+10 = 21</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>For k >= 3, there is no capable set. Hence, the answer is [10, 21, -1, -1].</p>\r\n\r\n<h3>Example 3 (Sample Case 2):</h3>\r\n<pre><code class='language-text'>n = 2\r\ncost = [1, 1]\r\nfeatureAvailability = [\"10\", \"10\"]</code></pre>\r\n<p><strong>Output:</strong> <code>[-1, -1]</code></p>\r\n<p><strong>Explanation:</strong> There is no possible way of forming a k-capable set for all k from 1 to n.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= cost[i] <= 10^4</code></li>\r\n    <li>It is guaranteed that <code>featureAvailability[i]</code> is a binary string of length 2.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Rippling_23oct",
        "company_id": 700
    },
    {
        "id": 1970,
        "title": "Maximum Bit Distances",
        "problem_statement": "<h1>Maximum Bit Distances</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The bit distance, d, of an integer, x, is defined as the maximum distance between any two consecutive set bits. For example, let x = 1036, which, represented in binary, is 1000000100. The indices of the most distant set bits are 0 and 8, respectively. Hence, the bit distance of x is equal to 8. If there is only one set bit, the bit distance is considered to be -1. Given an integer array, the goal is to find the top k integers with maximum bit distances.</p>\r\n<p>For the given array of integers, sort the integers in decreasing order of their bit distances. If there are multiple integers with the same bit distance, sort them in decreasing order by their value. Report the first k integers of the array thus obtained.</p>\r\n\r\n<p>Complete the function <code>getTopKBitDistances</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int numbers[n]</code>: an array of positive integers</li>\r\n    <li><code>int k</code>: the number of integers to select</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p>an array of k integers denoting the top-most k integers in decreasing order of their bit distances.</p>\r\n\r\n<pre><code class='language-cpp'>vector<int> getTopKBitDistances(vector<int> numbers, int k) {\r\n    // Complete the 'getTopKBitDistances' function below.\r\n    // The function is expected to return an INTEGER_ARRAY.\r\n    // The function accepts following parameters:\r\n    //  1. INTEGER_ARRAY numbers\r\n    //  2. INTEGER k\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\nn = 5\r\nnumbers = [102, 4, 6, 10, 8]\r\nk = 3</code></pre>\r\n<p>The binary representation of array numbers is [1100110, 100, 110, 1010, 1000]. The corresponding bit distances d are [0, -1, 1, -1, -1].</p>\r\n<p>5 and 10 are the integers with the highest d value of 1, but since the value of 10 is greater than 5, 10 would be reported first. 6 is reported second.</p>\r\n<p>The second-largest d value is for 12, with a bit distance of 0. Since there are no other integers with a d value of 0, 12 is reported third.</p>\r\n<pre><code class='language-text'><strong>Output:</strong> [10, 6, 12]</code></pre>\r\n<p><em>(Note: This example description contains inconsistencies with the problem definition and input values. The following sample cases are more consistent.)</em></p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\nnumbers size is 3\r\nnumbers = [3, 5, 8]\r\nk = 1\r\n<strong>Output:</strong>\r\n5</code></pre>\r\n<p><strong>Explanation:</strong> The integers in binary form are [11, 101, 1000]. The corresponding d values are [1, 1, -1]. Since k = 1, only the integer with the highest bit distance is reported, which is 5.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\nnumbers size is 4\r\nnumbers = [10, 13, 5, 18]\r\nk = 3\r\n<strong>Output:</strong>\r\n18\r\n13\r\n10</code></pre>\r\n<p><strong>Explanation:</strong> The integers in binary form are [1010, 1101, 101, 10010]. The corresponding d values are [1, 1, 1, 2]. 18 is reported first because it has the highest d value. 10, 13, and 5 all have the same bit distance, and since only 2 more integers need to be reported, 13 and 10 are reported in that order because those are the two largest integers in decreasing order. Hence, the answer is [18, 13, 10].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= numbers[i] <= 10^8</code></li>\r\n    <li><code>1 <= k <= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Rippling_23oct",
        "company_id": 700
    },
    {
        "id": 1972,
        "title": "Server Management",
        "problem_statement": "<h1>Server Management</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A company manages a network of n servers, each with a specified capacity and incoming requests. To prevent overload, the company can double the capacity of any k servers. Determine the maximum total number of requests that can be handled after implementing those changes.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4\r\nserverCapacity = [10, 4, 3, 7]\r\nincomingRequests = [3, 10, 4, 6]\r\nk = 2\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> If the second and third server capacities are doubled:</p>\r\n<ul>\r\n    <li>Server 1: Can handle 3 requests (out of 10 capacity)</li>\r\n    <li>Server 2: Can handle 8 requests (doubled capacity from 4 to 8, but only 8 or 10 incoming requests)</li>\r\n    <li>Server 3: Can handle 4 requests (doubled capacity from 3 to 6, but only 4 incoming requests)</li>\r\n    <li>Server 4: Can handle 5 requests (out of 7 capacity)</li>\r\n</ul>\r\n<p>Total requests handled: 3 + 8 + 4 + 5 = 20.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5\r\nserverCapacity = [3, 7, 10, 12]\r\nincomingRequests = [5, 2, 5, 8, 10]\r\nk = 2\r\nOutput: 28</code></pre>\r\n<p><strong>Explanation:</strong> The serverCapacity[i] &gt;= incomingRequests[i] for all servers. Therefore, all requests are handled.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 5\r\nserverCapacity = [12, 4, 3, 8, 10]\r\nincomingRequests = [15, 5, 14, 13, 19]\r\nk = 5\r\nOutput: 66</code></pre>\r\n<p><strong>Explanation:</strong> The capacity can be doubled for all the servers, and 2 * serverCapacity[i] &gt;= incomingRequests[i] for all servers. Therefore, the maximum number of requests handled is the sum of all the incoming requests: 15 + 5 + 14 + 13 + 19 = 66.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaxRequests</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int serverCapacity[]</code>: the capacity of each server</li>\r\n    <li><code>int incomingRequests[]</code>: the number of incoming requests for each server</li>\r\n    <li><code>int k</code>: the number of servers whose capacity is doubled</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>long</code>: the maximum number of total requests that can be handled by all the servers after modifications</p>\r\n\r\n<pre><code class='language-javascript'>long getMaxRequests(vector&lt;int&gt; serverCapacity, vector&lt;int&gt; incomingRequests, int k) {\r\n    // Function body to be completed\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= k &lt;= n</code></li>\r\n    <li><code>1 &lt;= serverCapacity[i], incomingRequests[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Rippling_23oct",
        "company_id": 700
    }
]