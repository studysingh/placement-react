[
    {
        "id": 1387,
        "title": "Nth Highest Order ID",
        "problem_statement": "<h1>Nth Highest Order ID</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A wholesaler has to clear the stock of the products accumulated over past years. The seller is giving 50% off on some of the orders that he is receiving to increase the stock clearance rate. He decided that offer will be given to the customers with below conditions:</p>\r\n<ol>\r\n    <li>Who's order id is greater than a lucky number M which is preceded and must be the same when reversed.</li>\r\n    <li>All the order ids that satisfy condition (I) are arranged in ascending order and the N<sup>th</sup> higher order id will get the applicable offer.</li>\r\n</ol>\r\n<p>Please help the wholesaler to get the N<sup>th</sup> higher order id to give 50% discount if M and N are provided as input.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings while reading the input or while printing, as these contribute to the standard output.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input contains two integers M and N separated by a single white space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains the N<sup>th</sup> higher order id for the given lucky number M.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 100 9\r\nOutput: 181</code></pre>\r\n<p><strong>Explanation:</strong> Here the given lucky number is 100, we need to find out 9th higher order id greater than 100, and must be the same when reversed. The order ids greater than 100 run as follows: 101, 111, 121, 131, 141, 151, 161, 171, 181, 191 and so on. From the above order ids first highest order id is 101, second highest order id is 111, third highest order id is 131 and so on. So, 9th highest Order ID that is more than 100 and satisfies the condition is 181 which is printed as output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 11 5\r\nOutput: 66</code></pre>\r\n<p><strong>Explanation:</strong> Here the given lucky number is 11, we need to find out the 5th highest order id. The order ids greater than 11 run as follows: 22, 33, 44, 55, 66, 77 and so on. From the above order ids first highest order id is 22, second highest order id is 33, third highest order id is 44 and so on. So, 5th highest order id 66 will get the applicable offer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>All the order ids are integers</li>\r\n    <li>0 &lt; M &lt; 231</li>\r\n    <li>0 &lt; N &lt; 1000</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HSBC_9sep",
        "company_id": 484
    },
    {
        "id": 1388,
        "title": "Priority Queue Processing",
        "problem_statement": "<h1>Priority Queue Processing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Consider that we have few elements to be inserted into the priority queue. Elements inserted into the queue are in the following format (x, y) where x is the element and y is its priority. An element with a high y value indicates high priority. If two elements have the same priority, the element with a smaller x value will get higher priority. K is the number of elements that have to be removed from the queue that has the highest priority. The problem asks to display the elements that are not removed from the queue, ordered from high priority to low priority elements.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings while reading the input or while printing, as these contribute to the standard output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>x should be unique.</li>\r\n    <li>x and y should not be negative.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains N, where N denotes the number of elements.</p>\r\n<p>Next N lines of input contain x and y where x is the element and y is its priority.</p>\r\n<p>The last line of input contains K where K denotes the number of elements to be deleted from the queue.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains the elements that are not deleted from the queue based on their priority.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5\r\n2 4\r\n5 3\r\n6 1\r\n7 4\r\n9 4\r\n3\r\nOutput: 5 6</code></pre>\r\n<p><strong>Explanation:</strong> From the given Sample Input 1, we have:</p>\r\n<p><strong>Total number of elements:</strong> 5</p>\r\n<p>Consider the elements grouped by priority (and ordered by x for tie-breaking):</p>\r\n<ul>\r\n    <li>Priority 4: Elements 2, 7, 9 (ordered by x value)</li>\r\n    <li>Priority 3: Element 5</li>\r\n    <li>Priority 1: Element 6</li>\r\n</ul>\r\n<p><strong>Total number of elements to be deleted:</strong> 3</p>\r\n<p>The elements with the highest priority are 2, 7, and 9 (all have priority 4). According to the tie-breaking rule (smaller x value gets higher priority), the order of deletion among these would be 2, 7, 9. Since K=3, these three elements will be deleted.</p>\r\n<p>The remaining elements are 5 and 6, which will be printed as an output. They are printed in order of their priority (5 has priority 3, 6 has priority 1), so 5 then 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 10\r\n1 11\r\n12 10\r\n3 10\r\n5 11\r\n6 11\r\n10 20\r\n7 15\r\n8 20\r\n9 20\r\n11 10\r\n5\r\nOutput: 5 6 3 11 12</code></pre>\r\n<p><strong>Explanation:</strong> From the given Sample Input 2, we have:</p>\r\n<p><strong>Total number of elements:</strong> 10</p>\r\n<p>Consider the elements grouped by priority (and ordered by x for tie-breaking):</p>\r\n<ul>\r\n    <li>Priority 20: Elements 8, 9, 10 (ordered by x value)</li>\r\n    <li>Priority 15: Element 7</li>\r\n    <li>Priority 11: Elements 1, 5, 6 (ordered by x value)</li>\r\n    <li>Priority 10: Elements 3, 11, 12 (ordered by x value)</li>\r\n</ul>\r\n<p><strong>Total number of elements to be deleted:</strong> 5</p>\r\n<p>The elements that get deleted are the 5 highest priority elements: 8, 9, 10 (from Priority 20), 7 (from Priority 15), and 1 (from Priority 11). These are deleted in order of priority (highest first), and then by x value for ties.</p>\r\n<p>The remaining elements are 5, 6, 3, 11, and 12.</p>\r\n<p>As the priority of 5 and 6 is 11 (same priority), they are displayed in increasing order of their x value (5 then 6).</p>\r\n<p>Similarly, the priority of 3, 11, and 12 is 10 (same priority), so they are displayed in the increasing order of their x value (3 then 11 then 12).</p>\r\n<p>The priority of the group (5, 6) is 11, which is higher than the priority of the group (3, 11, 12) which is 10. Therefore, the final output sequence is 5 6 3 11 12.</p>\r\n\r\n<h2>Code Snippet</h2>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\n#include &lt;map&gt;\r\n#include &lt;vector&gt;\r\n// #include &lt;algorithm&gt; // Added for sort, if needed\r\nusing namespace std;\r\n\r\n// void processData(int n, int nums, vector&lt;int&gt; x, vector&lt;int&gt; y)// n, nums is a integer variable and x and y are vector\r\n// //WRITE YOUR CODE HERE\r\n// {\r\n// }\r\n\r\nint main()\r\n{\r\n    int n;\r\n    cin >> n;\r\n\r\n    vector&lt;int&gt; x(n);\r\n    vector&lt;int&gt; y(n);\r\n\r\n    for (int i = 0; i &lt; n; i++)\r\n    {\r\n        cin >> x[i] >> y[i];\r\n    }\r\n\r\n    int nums; // This variable 'nums' represents K, the number of elements to be deleted.\r\n    cin >> nums;\r\n\r\n    // Call the function to process data (assuming it's defined elsewhere or needs to be implemented)\r\n    // processData(n, nums, x, y); \r\n\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HSBC_9sep",
        "company_id": 484
    }
]