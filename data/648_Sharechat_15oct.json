[
    {
        "id": 1834,
        "title": "Minimum Length Word",
        "problem_statement": "<h1>Minimum Length Word</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An English lecture at Hacky/Elementary School focuses on teaching students the letters of the alphabet. Students receive a string, <code>word</code>, composed of lowercase English letters. In one move, they can choose any index <code>i</code> and letter <code>c</code>. If the character at this index is <code>c</code>, then the first occurrence of <code>c</code> to the left and right of <code>i</code> are deleted if they exist. For example, if <code>word = \"adbacaca\"</code> and index 4 (character 'a') is chosen, the first occurrence of 'a' to the left and right of index 4 (indices 2 and 6) are deleted, resulting in <code>word = \"adbaca\"</code>.</p>\r\n<p>Determine the minimum number of moves required for the students to achieve a word of minimal length.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: word = \"baabacaa\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The following moves are optimal.</p>\r\n<ol>\r\n    <li>Choose index 0 (character 'b'). The first 'b' to its right is at index 3. No 'b' to its left. Deleting the character at index 3 results in <code>\"baacaa\"</code>.</li>\r\n    <li>From <code>\"baacaa\"</code>, choose index 2 (character 'a'). The first 'a' to its left is at index 1. The first 'a' to its right is at index 4. Deleting characters at indices 1 and 4 results in <code>\"baca\"</code>.</li>\r\n    <li>From <code>\"baca\"</code>, choose index 3 (character 'a'). The first 'a' to its left is at index 1. No 'a' to its right. Deleting the character at index 1 results in <code>\"bca\"</code>.</li>\r\n</ol>\r\n<p>The word cannot be reduced further. The answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: word = \"cbaa\"\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Optimally, choose index 2 (character 'a'). The first 'a' to its left is at index 1. No 'a' to its right. Deleting the character at index 1 results in <code>\"cba\"</code>. The word cannot be reduced further.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: word = \"abaaa\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> An optimal sequence:</p>\r\n<ol>\r\n    <li>Choose index 2 (character 'a'). The first 'a' to its left is at index 0. The first 'a' to its right is at index 3. Deleting characters at indices 0 and 3 results in <code>\"baa\"</code>.</li>\r\n    <li>From <code>\"baa\"</code>, choose index 2 (character 'a'). The first 'a' to its left is at index 1. No 'a' to its right. Deleting the character at index 1 results in <code>\"ba\"</code>.</li>\r\n</ol>\r\n<p>The word cannot be reduced further. The answer is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |word| &lt;= 10<sup>5</sup></code></li>\r\n    <li>The string <code>word</code> consists of lowercase English characters.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinimumMoves</code> in the editor. The function is expected to return an <code>INTEGER</code>.</p>\r\n<pre><code class='language-cpp'>int getMinimumMoves(string word) {\r\n    // Function implementation\r\n}</code></pre>\r\n<p>The function accepts the following parameter:</p>\r\n<ul>\r\n    <li><code>word</code>: The initial word (string)</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: The minimum number of moves needed to get a word of minimal length.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int getMinimumMoves(std::string word) {\n        // Write your code here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string word;\n    std::cin >> word;\n\n    Solution sol;\n    int result = sol.getMinimumMoves(word);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Sharechat_15oct",
        "company_id": 648
    },
    {
        "id": 1835,
        "title": "Subsequence Sort",
        "problem_statement": "<h1>Subsequence Sort</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a binary string <code>binary</code> consisting of characters '0' and '1'. You can perform the following operation any number of times:</p>\r\n<ul>\r\n    <li>Choose any subsequence of the string, sort it, and replace the original subsequence with the sorted sequence.</li>\r\n</ul>\r\n<p>You also have an array of strings <code>arr</code> of length <code>n</code>, where each string has the same length as <code>binary</code> and consists of characters '0', '1', and '?'. Each '?' character can be replaced with either '0' or '1'.</p>\r\n<p>For each string in <code>arr</code>, determine if it is possible to rearrange <code>binary</code> using the described operation after replacing each '?' with either '0' or '1'.</p>\r\n<p>For each string, return \"YES\" if it is possible, and \"NO\" if it is not.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>A subsequence is obtained by deleting some characters without changing the order of the remaining characters.</li>\r\n    <li>Each computation is independent, with <code>binary</code> in its original state at the beginning of each test.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1 (General Description):</h3>\r\n<p>Let <code>binary = \"101100\"</code> and <code>arr = [\"111???\", \"111???\"]</code>.</p>\r\n<ul>\r\n    <li>For <code>arr[0] = \"111???\"</code>:\r\n        <ul>\r\n            <li>This can be converted to \"011001\" by replacing the '?' characters.</li>\r\n            <li>This string can be obtained from <code>binary</code> as follows:\r\n                <ul>\r\n                    <li>Choose the subsequence of indices (0, 2), sort it, and <code>binary</code> becomes \"011001\".</li>\r\n                    <li>Choose the subsequence of indices (3, 4, 5), sort it, and <code>binary</code> becomes \"011001\".</li>\r\n                </ul>\r\n            </li>\r\n            <li>The answer is \"YES\".</li>\r\n        </ul>\r\n    </li>\r\n    <li>For <code>arr[1] = \"111???\"</code>:\r\n        <ul>\r\n            <li>It is not possible to convert <code>binary</code> to match this string.</li>\r\n            <li>The answer is \"NO\".</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nbinary = \"101011\"\r\narr = [\"???111\", \"001101\"]</code></pre>\r\n<pre><code class='language-text'>Output:\r\nYES\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>arr[0]</code> can be converted to \"100111\". Then <code>binary</code> can be made to match using these operations:\r\n        <ul>\r\n            <li>Choose the subsequence of indices (2, 3) from <code>binary</code> (which is \"10\"). Sort it to \"01\". Replacing the original subsequence with the sorted one, <code>binary</code> becomes \"100111\". This equals the chosen <code>arr[0]</code>.</li>\r\n            <li>Note that if the string <code>arr[0]</code> is converted to \"001111\", then also the string <code>binary</code> can be made to match.</li>\r\n        </ul>\r\n    </li>\r\n    <li>It is not possible to convert string <code>binary</code> to <code>arr[1]</code> using any sequence of operations.</li>\r\n</ul>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nbinary = \"0011\"\r\narr = [\"0110\", \"0011\", \"???? \"]</code></pre>\r\n<pre><code class='language-text'>Output:\r\nNO\r\nYES\r\nYES</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For <code>arr[0] = \"0110\"</code>:\r\n        <p>There are two possible choices for <code>arr[0]</code> (after replacing '?'): \"0010\" or \"0110\", neither of which can be derived from <code>binary</code>.</p>\r\n        <p>The answer is \"NO\".</p>\r\n    </li>\r\n    <li>For <code>arr[1] = \"0011\"</code>:\r\n        <",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * For a given binary string and a pattern string, determines if the binary string\n     * can be transformed to match the pattern. The pattern can have '?' characters\n     * which can be replaced by '0' or '1'. The transformation operation involves\n     * sorting any chosen subsequence of the binary string.\n     *\n     * @param binary The original binary string.\n     * @param pattern The pattern string to match.\n     * @return \"YES\" if a match is possible, \"NO\" otherwise.\n     */\n    std::string solve(const std::string& binary, const std::string& pattern) {\n        // Core logic for the Subsequence Sort problem goes here.\n        \n        return \"\"; // Placeholder\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string binary;\n    std::cin >> binary;\n\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> arr(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> arr[i];\n    }\n\n    Solution solution;\n    for (const std::string& s : arr) {\n        std::cout << solution.solve(binary, s) << \"\\n\";\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Sharechat_15oct",
        "company_id": 648
    },
    {
        "id": 1836,
        "title": "Count Ways To Create Wave",
        "problem_statement": "<h1>Count Ways To Create Wave</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The physicists in Hackerland are developing an algorithm to generate wave patterns. An array is considered to form a wave if it satisfies one of these conditions:</p>\r\n<ol>\r\n    <li>Elements alternate as: <code>a[1] > a[2] < a[3] > a[4] < a[5]...</code></li>\r\n    <li>Elements alternate as: <code>a[1] < a[2] > a[3] < a[4] > a[5]...</code></li>\r\n</ol>\r\n<p>Given an array <code>arr</code> of <code>n</code> integers, where values are either within the range <code>1</code> to <code>m</code> inclusive or <code>-1</code>, determine how many ways you can replace all the <code>-1</code>s in the array with integers from <code>1</code> to <code>m</code> such that the resulting array forms a wave array. Return the result modulo <code>(10^9 + 7)</code>.</p>\r\n<p>Complete the function <code>countWaysToCreateWave</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>arr</code>: an array of integers</li>\r\n    <li><code>m</code>: an integer</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int</code>: the number of ways to replace -1s in the array to make it a wave array, modulo <code>(10^9 + 7)</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, arr = [-1, 3, -1], m = 3\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Suppose <code>n = 3, arr = [-1, 3, -1], m = 3</code>. The possible ways to replace all -1s in the array such that the resulting array is a wave array are:</p>\r\n<ul>\r\n    <li><code>[1, 3, 2]</code></li>\r\n    <li><code>[2, 3, 1]</code></li>\r\n</ul>\r\n<p>Hence the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [-1, -1, 2, -1], m = 3\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n = 4, arr = [-1, -1, 2, -1], m = 3</code>. Possible ways to replace all -1s are:</p>\r\n<ul>\r\n    <li><code>[1, 3, 2, 3]</code></li>\r\n    <li><code>[2, 3, 2, 1]</code></li>\r\n    <li><code>[3, 1, 2, 1]</code></li>\r\n    <li><code>[2, 1, 2, 3]</code></li>\r\n</ul>\r\n<p>Hence the answer is 4.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 5, arr = [2, 3, 2, 1, -1], m = 10\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n = 5, arr = [2, 3, 2, 1, -1], m = 10</code>. There is no way to replace the -1 in the array such that the resulting array is a wave array. Hence the answer is 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 &le; n &le; 2500</code></li>\r\n    <li><code>1 &le; m &le; 2500</code></li>\r\n    <li><code>arr[i] = -1</code> or <code>1 &le; arr[i] &le; m</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @brief Counts the number of ways to replace -1s in the array to make it a wave array.\n     * \n     * @param arr The input array of integers.\n     * @param m The maximum value for replacement.\n     * @return int The number of ways modulo (10^9 + 7).\n     */\n    int countWaysToCreateWave(std::vector<int>& arr, int m) {\n        // Core logic to be implemented here.\n        return 0;\n    }\n};\n\nint main() {\n    // Fast I/O\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    int m;\n    std::cin >> m;\n\n    std::vector<int> arr(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> arr[i];\n    }\n\n    Solution sol;\n    int result = sol.countWaysToCreateWave(arr, m);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Sharechat_15oct",
        "company_id": 648
    },
    {
        "id": 1839,
        "title": "Subsequence Sort",
        "problem_statement": "<h1>Subsequence Sort</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a binary string <code>binary</code> consisting of characters '0' and '1'. You can perform the following operation any number of times:</p>\r\n<ul>\r\n    <li>Choose any subsequence of the string, sort it, and replace the original subsequence with the sorted sequence.</li>\r\n</ul>\r\n<p>You also have an array of strings <code>arr</code> of length <code>n</code>, where each string has the same length as <code>binary</code> and consists of characters '0', '1', and '?'. Each '?' character can be replaced with either '0' or '1'.</p>\r\n<p>For each string in <code>arr</code>, determine if it is possible to rearrange <code>binary</code> using the described operation after replacing each '?' with either '0' or '1'.</p>\r\n<p>For each string, return \"YES\" if it is possible, and \"NO\" if it is not.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>A subsequence is obtained by deleting some characters without changing the order of the remaining characters.</li>\r\n    <li>Each computation is independent, with <code>binary</code> in its original state at the beginning of each test.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nbinary = \"101011\"\r\narr = [\"???111\", \"001101\"]\r\n\r\nOutput:\r\n[\"YES\", \"NO\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>arr[0]</code> (\"???111\") can be converted to \"100111\" then <code>binary</code> can be made to match using these operations.\r\n        <ul>\r\n            <li>Choose the subsequence of indices (2, 3) and sort, <code>binary</code> becomes \"100111\". This equals the chosen <code>arr[0]</code>.</li>\r\n            <li>Note that if the string <code>arr[0]</code> is converted to \"000111\" then also the string <code>binary</code> can be made to match.</li>\r\n        </ul>\r\n    </li>\r\n    <li>It is not possible to convert <code>string binary</code> to <code>arr[1]</code> using any sequence of operations.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nbinary = \"0011\"\r\narr = [\"0110\", \"0011\", \"????\"]\r\n\r\nOutput:\r\n[\"NO\", \"YES\", \"YES\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>There are two possible choices for <code>arr[0]</code>: \"0010\" or \"0110\", neither of which can be derived from <code>binary</code>.</li>\r\n    <li><code>arr[1]</code> is already equal to <code>binary</code>.</li>\r\n    <li><code>arr[2]</code> can be \"0011\", which equals <code>binary</code>.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |binary| <= 3000</code></li>\r\n    <li><code>1 <= n <= 3000</code> (where <code>n</code> is <code>arr.size()</code>)</li>\r\n    <li><code>|arr[i]| = |binary|</code></li>\r\n    <li><code>binary</code> contains characters '0' and '1' only.</li>\r\n    <li>Each <code>arr[i]</code> contains characters '0', '1', and '?' only.</li>\r\n</ul>\r\n\r\n<h2>Function Signature</h2>\r\n<p>Complete the <code>checkStrings</code> function in the editor.</p>\r\n<pre><code class='language-javascript'>vector&lt;string&gt; checkStrings(string binary, vector&lt;string&gt; arr) {\r\n    // Function body\r\n}</code></pre>\r\n<p>The function is expected to return a <code>STRING_ARRAY</code>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ol>\r\n    <li><code>STRING binary</code>: the string to alter.</li>\r\n    <li><code>STRING_ARRAY arr</code>: the strings to match.</li>\r\n</ol>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<std::string> checkStrings(const std::string& binary, const std::vector<std::string>& arr) {\n        // TODO: Implement the logic here\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string binary;\n    std::cin >> binary;\n\n    int n;\n    std::cin >> n;\n\n    std::vector<std::string> arr(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> arr[i];\n    }\n\n    Solution sol;\n    std::vector<std::string> results = sol.checkStrings(binary, arr);\n\n    for (const auto& res : results) {\n        std::cout << res << std::endl;\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Sharechat_15oct",
        "company_id": 648
    },
    {
        "id": 1840,
        "title": "Wave Generation",
        "problem_statement": "<h1>Wave Generation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The physicists in Hackerland are developing an algorithm to generate wave patterns. An array is considered to form a wave if it satisfies one of these conditions:</p>\r\n<ul>\r\n    <li>Elements alternate as: <code>a[1] > a[2] < a[3] > a[4] < a[5]...</code></li>\r\n    <li>Elements alternate as: <code>a[1] < a[2] > a[3] < a[4] > a[5]...</code></li>\r\n</ul>\r\n<p>Given an array <code>arr</code> of <code>n</code> integers, where values are either within the range 1 to <code>m</code> inclusive or -1, determine how many ways you can replace all the -1s in the array with integers from 1 to <code>m</code> such that the resulting array forms a wave. Return the result modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countWaysToCreateWave</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>arr[n]</code>: an array of integers</li>\r\n    <li><code>m</code>: an integer</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of ways to replace -1s in the array to make it a wave array, modulo (10<sup>9</sup> + 7).</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\narr = [-1, 1, 2, -1]\r\nm = 3\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n = 4</code>, <code>arr = [-1, 1, 2, -1]</code>, <code>m = 3</code>. Possible ways to replace all -1s are-</p>\r\n<ul>\r\n    <li><code>[1, 3, 2, 3]</code></li>\r\n    <li><code>[2, 3, 2, 3]</code></li>\r\n    <li><code>[3, 1, 2, 1]</code></li>\r\n    <li><code>[2, 1, 2, 1]</code></li>\r\n</ul>\r\n<p>Hence the answer is 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\narr = [2, 3, 2, 1, -1]\r\nm = 10\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n = 5</code>, <code>arr = [2, 3, 2, 1, -1]</code>, <code>m = 10</code>. There is no way to replace the -1 in the array such that the resulting array is a wave array. Hence the answer is 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 <= n <= 2500</code></li>\r\n    <li><code>1 <= m <= 2500</code></li>\r\n    <li><code>arr[i] = -1</code> or <code>1 <= arr[i] <= m</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    /**\n     * @brief Calculates the number of ways to replace -1s to form a wave array.\n     * \n     * @param arr The input array with integers from 1 to m or -1.\n     * @param m The maximum value an element can take.\n     * @return int The number of ways modulo (10^9 + 7).\n     */\n    int countWaysToCreateWave(std::vector<int>& arr, int m) {\n        // The core logic to solve the problem will be implemented here.\n        // The problem requires calculating ways for two types of waves:\n        // 1. a[0] > a[1] < a[2] > a[3] ...\n        // 2. a[0] < a[1] > a[2] < a[3] ...\n        // The total ways will be the sum of ways for both types, modulo 10^9 + 7.\n        // This will likely involve dynamic programming.\n        \n        // Placeholder return\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::vector<int> arr(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> arr[i];\n    }\n\n    int m;\n    std::cin >> m;\n\n    Solution sol;\n    int result = sol.countWaysToCreateWave(arr, m);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Sharechat_15oct",
        "company_id": 648
    }
]