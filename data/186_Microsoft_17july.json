[
    {
        "id": 555,
        "title": "Calculate Amount",
        "problem_statement": "<h1>Calculate Amount</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alex has a list of items to purchase at a market. The owner offers to discount each item after the first one by the lowest marked price among the prior items. No item's price can be discounted below 0, and the list of items may not be reordered. Calculate the payable amount.</p>\r\n<p>The first item is never discounted and the minimum cost of any item is 0.</p>\r\n<p>Complete the function <code>calculateAmount</code> in the editor below. The function must return Alex's total cost to purchase all the items.</p>\r\n<p><code>calculateAmount</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int prices[n]</code>: the original prices of each of the items selected</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>long int</code>: the total cost to purchase the items after any discounts are applied</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: prices = [2, 5, 1, 4]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>prices[0] = 2</code>. <code>cost[0] = 2</code> because the first item is never discounted.</li>\r\n    <li><code>prices[1] = 5</code>. The minimum prior price is <code>prices[0] = 2</code>. So, <code>cost[1] = 5 - 2 = 3</code>.</li>\r\n    <li><code>prices[2] = 1</code>. The minimum prior price is <code>min(prices[0], prices[1]) = min(2, 5) = 2</code>. So, <code>cost[2] = max(1 - 2, 0) = max(-1, 0) = 0</code>.</li>\r\n    <li><code>prices[3] = 4</code>. The minimum prior price is <code>min(prices[0], prices[1], prices[2]) = min(2, 5, 1) = 1</code>. So, <code>cost[3] = 4 - 1 = 3</code>.</li>\r\n</ul>\r\n<p>The total cost to purchase all items is 2 + 3 + 0 + 3 = 8.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, prices = [4, 9, 2, 3]\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>prices[0] = 4</code>. <code>cost[0] = 4</code> because the first item is never discounted.</li>\r\n    <li><code>prices[1] = 9</code>. The minimum prior price is <code>prices[0] = 4</code>. So, <code>cost[1] = 9 - 4 = 5</code>.</li>\r\n    <li><code>prices[2] = 2</code>. The minimum prior price is <code>min(prices[0], prices[1]) = min(4, 9) = 4</code>. So, <code>cost[2] = max(2 - 4, 0) = max(-2, 0) = 0</code>.</li>\r\n    <li><code>prices[3] = 3</code>. The minimum prior price is <code>min(prices[0], prices[1], prices[2]) = min(4, 9, 2) = 2</code>. So, <code>cost[3] = 3 - 2 = 1</code>.</li>\r\n</ul>\r\n<p>The total cost returned is 4 + 5 + 0 + 1 = 10.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 4, prices = [1, 2, 3, 4]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>prices[0] = 1</code>. <code>cost[0] = 1</code>.</li>\r\n    <li><code>prices[1] = 2</code>. The minimum prior price is <code>prices[0] = 1</code>. So, <code>cost[1] = 2 - 1 = 1</code>.</li>\r\n    <li><code>prices[2] = 3</code>. The minimum prior price is <code>min(prices[0], prices[1]) = min(1, 2) = 1</code>. So, <code>cost[2] = 3 - 1 = 2</code>.</li>\r\n    <li><code>prices[3] = 4</code>. The minimum prior price is <code>min(prices[0], prices[1], prices[2]) = min(1, 2, 3) = 1</code>. So, <code>cost[3] = 4 - 1 = 3</code>.</li>\r\n</ul>\r\n<p>The total cost returned is 1 + 1 + 2 + 3 = 7.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= prices[i] &lt;= 10<sup>9</sup></code>, where <code>0 &lt;= i &lt; n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_17july",
        "company_id": 186
    },
    {
        "id": 562,
        "title": "Maximize Reward Points",
        "problem_statement": "<h1>Maximize Reward Points</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Two interns at HackerRank are assigned to complete a total of n tasks. Each task can be completed by either intern. The first intern earns <code>reward_1[i]</code> points for finishing the <code>i</code>th task, while the second intern earns <code>reward_2[i]</code> points for the same task.</p>\r\n<p>To maximize the total reward points for both interns, determine the highest possible combined reward points if the first intern is required to complete <code>k</code> tasks, and the second intern completes the remaining tasks.</p>\r\n<p><strong>Note:</strong> The <code>k</code> tasks for the first intern can be any of the <code>n</code> tasks.</p>\r\n<p>Complete the function <code>getMaximumRewardPoints</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int k</code>: the number of tasks that have to be completed by intern 1</li>\r\n    <li><code>int reward_1[n]</code>: the reward points earned by intern 1 for each task</li>\r\n    <li><code>int reward_2[n]</code>: the reward points earned by intern 2 for each task</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum possible combined reward points when intern 1 completes exactly <code>k</code> tasks</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int getMaximumRewardPoints(int k, vector&lt;int&gt; reward_1, vector&lt;int&gt; reward_2) {\r\n    // Function body\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, reward_1 = [5,4,3,2,1], reward_2 = [1,2,3,4,5], k = 3\r\nOutput: 21</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 completes 3 tasks, while intern 2 completes the other 2. To maximize the points, intern 1 takes the first 3 tasks (indices 0, 1, 2), and intern 2 takes the last 2 tasks (indices 3, 4). The total reward points are 5 + 4 + 3 (from intern 1) + 4 + 5 (from intern 2) = 21, which is the maximum possible. So, the answer is 21.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: k = 3, reward_1 = [1,2,3,2], reward_2 = [1,2,3,2]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 3 tasks, and intern 2 completes the remaining task. The reward points for each task are the same for both interns, so any task can be picked up by either intern. To maximize, intern 1 picks tasks with rewards 1, 2, 3 (e.g., indices 0, 1, 2) and intern 2 picks task with reward 2 (e.g., index 3). Total reward points = 1 + 2 + 3 (from intern 1) + 2 (from intern 2) = 8.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: k = 2, reward_1 = [2,3,4,2], reward_2 = [1,1,1,1]\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 2 tasks, and intern 2 completes the remaining 2 tasks. In order to maximize the points gained, intern 1 completes the second and third tasks (indices 1, 2), while intern 2 completes the first and fourth tasks (indices 0, 3). Total reward points gained = 3 + 4 (from intern 1) + 1 + 1 (from intern 2) = 9.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= k &lt;= n</code></li>\r\n    <li><code>1 &lt;= reward_1[i] &lt;= 10^4</code></li>\r\n    <li><code>1 &lt;= reward_2[i] &lt;= 10^4</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_17july",
        "company_id": 186
    },
    {
        "id": 635,
        "title": "Maximize Intern Reward Points",
        "problem_statement": "<h1>Maximize Intern Reward Points</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Two interns at HackerRank are assigned to complete a total of `n` tasks. Each task can be completed by either intern. The first intern earns `reward_1[i]` points for finishing the `ith` task, while the second intern earns `reward_2[i]` points for the same task.</p>\r\n<p>To maximize the total reward points for both interns, determine the highest possible combined reward points if the first intern is required to complete `k` tasks, and the second intern completes the remaining tasks.</p>\r\n<p>Note: The `k` tasks for the first intern can be any of the `n` tasks.</p>\r\n<p>Complete the function `getMaximumRewardPoints` in the editor with the following parameters:</p>\r\n<ul>\r\n    <li>`int k`: the number of tasks that have to be completed by intern 1</li>\r\n    <li>`int reward_1[n]`: the reward points earned by intern 1 for each task</li>\r\n    <li>`int reward_2[n]`: the reward points earned by intern 2 for each task</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li>`int`: the maximum possible combined reward points when intern 1 completes exactly `k` tasks</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int getMaximumRewardPoints(int k, vector&lt;int&gt; reward_1, vector&lt;int&gt; reward_2) {\r\n    return 0;\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, k = 3, reward_1 = [5, 4, 3, 2, 1], reward_2 = [1, 2, 3, 4, 5]\r\nOutput: 21</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 completes 3 tasks, while intern 2 completes the other 2. To maximize the points, intern 1 takes the first 3 tasks, and intern 2 takes the last 2 tasks. The total reward points are 5 + 4 + 3 (from intern 1) + 4 + 5 (from intern 2) = 21, which is the maximum possible.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: k = 3, reward_1 = [1, 2, 3, 2], reward_2 = [1, 2, 3, 2], n = 4\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 3 tasks, and intern 2 completes the remaining task. The reward points for each task are the same for both interns, so any task can be picked up by either intern. Total reward points = 1 + 2 + 3 + 2 = 8.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: k = 2, reward_1 = [2, 3, 4, 2], reward_2 = [1, 1, 1, 1], n = 4\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 2 tasks, and intern 2 completes the remaining 2 tasks. In order to maximize the points gained, intern 1 completes the second and third tasks, while intern 2 completes the first and fourth tasks. Total reward points gained = 4 + 3 (from intern 1) + 1 + 1 (from intern 2) = 9.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= n <= 10^5`</li>\r\n    <li>`0 <= k <= n`</li>\r\n    <li>`1 <= reward_1[i] <= 10^4`</li>\r\n    <li>`1 <= reward_2[i] <= 10^4`</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_17july",
        "company_id": 186
    },
    {
        "id": 636,
        "title": "findMaximumAlloyUnits",
        "problem_statement": "<h1>findMaximumAlloyUnits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A foundry in Hexland makes an alloy out. There are <code>n</code> different types of metal. For an alloy, the composition of each metal is fixed, where <code>composition[i]</code> is the units of metal <code>i</code> in preparing 1 unit of the alloy. The unit of alloy is denoted by <code>composition[i]</code>. The company already has <code>stock[i]</code> units of metal <code>i</code> in their stock.</p>\r\n<p>The company has a budget to purchase any of the metals if needed. The cost of the metal <code>i</code> is <code>cost[i]</code> per unit. Find the maximum units of alloys that can be produced by using available stock plus what they can purchase within their budget.</p>\r\n<p><strong>Note:</strong> Their supplier has an infinite supply of all metal types.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>findMaximumAlloyUnits</code> function below.</p>\r\n<pre><code class='language-javascript'>int findMaximumAlloyUnits(vector&lt;int&gt; composition, vector&lt;int&gt; stock, vector&lt;int&gt; cost, int budget)</code></pre>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>composition</code>: An integer array representing the composition of metals in 1 unit of alloy.</li>\r\n    <li><code>stock</code>: An integer array representing the units of metals type <code>i</code> that the company has in stock.</li>\r\n    <li><code>cost</code>: An integer array representing the costs of metals type <code>i</code>.</li>\r\n    <li><code>budget</code>: An integer representing the total money the company can spend.</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p>The maximum units of alloys that can be produced.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ncomposition = [1,2]\r\nstock = [0,1]\r\ncost = [1,1]\r\nbudget = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>There are <code>n = 2</code> metal types.</p>\r\n<p>For 1 unit of alloy:</p>\r\n<ul>\r\n    <li>Required quantity: <code>[1, 2]</code></li>\r\n    <li>Available stock: <code>[0, 1]</code></li>\r\n    <li>Extra metal requirements: <code>[max(0, 1-0), max(0, 2-1)] = [1, 1]</code></li>\r\n    <li>Cost: <code>(1 * 1) + (1 * 1) = 3</code>, which is within the budget.</li>\r\n</ul>\r\n<p>For 2 units of alloy:</p>\r\n<ul>\r\n    <li>Required quantity: <code>[2, 4]</code></li>\r\n    <li>Available stock: <code>[0, 1]</code></li>\r\n    <li>Extra metal requirements: <code>[max(0, 2-0), max(0, 4-1)] = [2, 3]</code></li>\r\n    <li>Cost: <code>(2 * 1) + (3 * 1) = 5</code>, which is beyond the budget.</li>\r\n</ul>\r\n<p>Therefore, the maximum units of alloy that can be produced is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ncomposition = [2,1,2]\r\nstock = [1,0,0]\r\ncost = [2,2,1]\r\nbudget = 14\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For 2 units of alloy:</p>\r\n<ul>\r\n    <li>Required quantity: <code>[4, 2, 4]</code> (2 units * <code>composition</code>: <code>[2*2, 2*1, 2*2]</code>)</li>\r\n    <li>Available stock: <code>[1, 0, 0]</code></li>\r\n    <li>Extra metal requirements: <code>[max(0, 4-1), max(0, 2-0), max(0, 4-0)] = [3, 2, 4]</code></li>\r\n    <li>Cost: <code>(3 * 2) + (2 * 2) + (4 * 1) = 6 + 4 + 4 = 14</code>, which is in the budget.</li>\r\n</ul>\r\n<p>For 3 units of alloy:</p>\r\n<ul>\r\n    <li>Required quantity: <code>[6, 3, 6]</code> (3 units * <code>composition</code>: <code>[3*2, 3*1, 3*2]</code>)</li>\r\n    <li>Available stock: <code>[1, 0, 0]</code></li>\r\n    <li>Extra metal requirements: <code>[max(0, 6-1), max(0, 3-0), max(0, 6-0)] = [5, 3, 6]</code></li>\r\n    <li>Cost: <code>(5 * 2) + (3 * 2) + (6 * 1) = 10 + 6 + 6 = 22</code>, which is beyond the budget.</li>\r\n</ul>\r\n<p>Therefore, the maximum units of alloy that can be produced is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10</code></li>\r\n    <li><code>1 &lt;= budget &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= composition[i] &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= stock[i] &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= cost[i] &lt;= 10^3</code></li>\r\n    <li><code>composition[i] * cost[i] &lt;= 2 * 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_17july",
        "company_id": 186
    }
]