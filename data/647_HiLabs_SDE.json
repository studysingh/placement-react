[
    {
        "id": 1832,
        "title": "Connected components",
        "problem_statement": "<h1>Connected components</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an undirected graph consisting of N nodes. There is a number written on each node which is given in the form of an array `a` of N distinct integers, where `a[i]` represents the number written on the `i`th node.</p>\r\n<p>There is an edge between the node `i` and `j` if `lcm(a[i], a[j]) <= 10^6`.</p>\r\n<p>Where LCM of two numbers is the smallest positive integer which is divisible by both of them.</p>\r\n<p>Print the number of connected components in this graph.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>1-based indexing is followed.</li>\r\n    <li>A connected component of an undirected graph is an induced subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the rest of the graph.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>solve</code>. This function takes the following 2 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the size of array <code>arr</code></li>\r\n    <li><code>arr</code>: Represents the elements of array <code>arr</code></li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains a single integer <code>N</code>.</li>\r\n    <li>The second line contains <code>N</code> space-separated integers, the `i`th of which is <code>a[i]</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2 1000000 999999\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given:</p>\r\n<ul>\r\n    <li><code>N = 3</code></li>\r\n    <li><code>a = [2, 1000000, 999999]</code></li>\r\n</ul>\r\n<p>Approach:</p>\r\n<ul>\r\n    <li>For <code>i=1</code> and <code>j=2</code>, <code>lcm(2, 1000000) <= 1e6</code>. Therefore there is an edge between 1 and 2.</li>\r\n    <li>For <code>i=2</code> and <code>j=3</code>, <code>lcm(1000000, 999999) > 1e6</code>. Therefore no edge between 2 and 3.</li>\r\n    <li>For <code>i=1</code> and <code>j=3</code>, <code>lcm(2, 999999) > 1e6</code>. Therefore no edge between 1 and 3.</li>\r\n    <li>The components are <code>[1, 2]</code> and <code>[3]</code>. Hence the answer is 2.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^6</code></li>\r\n    <li><code>1 <= a[i] <= 10^9</code> for all <code>i</code> in <code>[1, N]</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int solve(int N, std::vector<int>& arr) {\n        // Your code here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<int> arr(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> arr[i];\n    }\n\n    Solution sol;\n    int result = sol.solve(N, arr);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "HiLabs_SDE",
        "company_id": 647
    },
    {
        "id": 1833,
        "title": "The coin problem",
        "problem_statement": "<h1>The coin problem</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given N coins whose amount ranges from 0 to N-1 respectively. Your friend wants to take K coins out of your coins. You can only give the coins if the set of K coins is useful.</p>\r\n<p>A set of coins is useful if the sum of the coins is divisible by a given integer M.</p>\r\n<p>Find the number of ways in which your friend can get K coins. Since the answer can be large, print the answer modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<p><strong>Function description</strong></p>\r\n<p>Complete the <code>solve</code> function provided in the editor. This function takes the following 3 parameters and returns the answer:</p>\r\n<ul>\r\n    <li><code>n</code>. Represents the number of coins</li>\r\n    <li><code>k</code>. Represents the amount of coin your friend wants</li>\r\n    <li><code>m</code>. Represents the integer value</li>\r\n</ul>\r\n\r\n<p><strong>Input format for custom testing</strong></p>\r\n<p>Note: Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains 3 space-separated integers N, K, and M.</li>\r\n</ul>\r\n\r\n<p><strong>Output format</strong></p>\r\n<p>Print the answer.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 4 2 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given:</p>\r\n<ul>\r\n    <li>N=4</li>\r\n    <li>K=2</li>\r\n    <li>M=2</li>\r\n</ul>\r\n<p>Approach:</p>\r\n<p>There are 2 ways:</p>\r\n<ul>\r\n    <li>1<sup>st</sup> Set: {1, 3} with sum 1+3=4 having 4%2=0</li>\r\n    <li>2<sup>nd</sup> Set: {2, 4} with sum 2+4=6 having 6%2=0</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>3</sup></li>\r\n    <li>1 &le; K &le; 10<sup>2</sup></li>\r\n    <li>1 &le; M &le; 10<sup>3</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <numeric>\n\nclass Solution {\npublic:\n    long long solve(int n, int k, int m) {\n        // Your solution logic goes here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n, k, m;\n    std::cin >> n >> k >> m;\n\n    Solution solution;\n    long long result = solution.solve(n, k, m);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "HiLabs_SDE",
        "company_id": 647
    }
]