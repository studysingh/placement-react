[
    {
        "id": 1194,
        "title": "Combined Weights Sum",
        "problem_statement": "<h1>Combined Weights Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Sam wants to pack N number of boxes of weights W<sub>i</sub> (where i = 1, 2, 3, ..., N). He picks two lightest boxes among N boxes and puts one box in another to find a combined weight. Now he is left with N-2 boxes along with the combined boxes (considered as one box), which makes the total number of boxes to be N-1. He continues to do so until he is left with only 1 large box. During this, he keeps track of the combined weights (of the two lightest boxes) he calculated after each task (picking of two lightest boxes) and finds out there are N-1 such combined weights. Now, he sums up all the combined weights to get the final result.</p>\r\n<p>Write a program to find out the sum S of all the combined weights.</p>\r\n<p>Read the input from STDIN and the output from STDOUT. You should not write arbitrary strings while reading the input and while printing as these contribute to the standard output.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n4 2 3 6\r\nOutput: 29</code></pre>\r\n<p><strong>Explanation:</strong>\r\nInitial weights: [4, 2, 3, 6]</p>\r\n<ol>\r\n    <li>Pick two lightest: 2, 3. Combined weight = 2 + 3 = 5.\r\n        Remaining boxes: [4, 6, 5]. Combined weights list: [5]</li>\r\n    <li>Pick two lightest from [4, 6, 5]: 4, 5. Combined weight = 4 + 5 = 9.\r\n        Remaining boxes: [6, 9]. Combined weights list: [5, 9]</li>\r\n    <li>Pick two lightest from [6, 9]: 6, 9. Combined weight = 6 + 9 = 15.\r\n        Remaining boxes: [15]. Combined weights list: [5, 9, 15]</li>\r\n</ol>\r\n<p>Total sum of combined weights S = 5 + 9 + 15 = 29.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; N &le; 10<sup>4</sup></li>\r\n    <li>W<sub>i</sub> (where i = 1, 2, 3, ... N) &gt; 0</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains N, the number of boxes.</p>\r\n<p>The second line of input contains weights W<sub>i</sub> (where i = 1, 2, 3, ... N) of N boxes separated by a single white space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains S, the sum of all the combined weights.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "idfc_6aug",
        "company_id": 405
    },
    {
        "id": 1195,
        "title": "Words Starting with Vowels in Sorted List",
        "problem_statement": "<h1>Words Starting with Vowels in Sorted List</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Write a program that takes a list of words as input and sorts the list of words in alphabetically ascending order. Identify the words in the sorted list that start with a vowel (a, e, i, o, u) regardless of their case. Display each of these words along with their positions in the sorted list.</p>\r\n<p>Read the input from STDIN and write the output to STDOUT. You should not write arbitrary strings while reading the input and while printing as these contribute to the standard output.</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\nusing namespace std;\r\n\r\nvoid findWordAndPositionContainsVowel(string words) { //Here, words is the given input string\r\n    // WRITE YOUR CODE HERE.\r\n}\r\n\r\nint main() {\r\n    string words;\r\n    getline(cin, words);\r\n    findWordAndPositionContainsVowel(words);\r\n    return 0;\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>There is at least 1 word in the given list that starts with vowels.</li>\r\n    <li>If there is no word starting with vowel then print 0 as output.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains a list of words with each separated by a space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The list of words and their position both be separated by a single white space and each word should be printed in separate line. If no word in the list starts with vowel then print 0 as the output.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: only god can judge me now\r\nOutput: only 6</code></pre>\r\n<p><strong>Explanation:</strong> Here, from Sample Input 1 the given list is [\"only\", \"god\", \"can\", \"judge\", \"me\", \"now\"]. After sorting all the words of the list, we got the sorted list as [\"can\", \"god\", \"judge\", \"me\", \"now\", \"only\"]. Therefore, now we can clearly see that \"only\" is the one word from the list of elements whose first character is a vowel i.e., \"o\" and which is in the 6th position of the sorted list. So, it will print only 6 as an output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: apple is a great food\r\nOutput: a 1\r\napple 2\r\nis 5</code></pre>\r\n<p><strong>Explanation:</strong> Here, from Sample Input 2 the given list is [\"apple\", \"is\", \"a\", \"great\", \"food\"]. After sorting all the words of the list, we got the sorted list as [\"a\", \"apple\", \"food\", \"great\", \"is\"]. Therefore, now we can clearly see that \"a\", \"apple\", and \"is\" are three words from the list of elements whose first characters are vowels which is \"a\", \"a\" and \"i\" and which are at 1st, 2nd and 5th positions of the sorted list. So we print a 1 apple 2 is 5 as an output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "idfc_6aug",
        "company_id": 405
    }
]