[
    {
        "id": 1207,
        "title": "Highest In-Degree Node",
        "problem_statement": "<h1>Highest In-Degree Node</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a directed graph represented by a list of edges, where each edge is a tuple of two vertices (u, v), indicating an edge from vertex u to vertex v. The vertices are represented by strings, and the only vertices that exist in the graph are those that appear in the input list of edges.</p>\r\n<p>Your task is to write a program that calculates the in-degree of each vertex in the graph and print the vertex name and its in-degree. If more than one node has the highest in-degree, print all such vertices and their in-degrees in alphabetically ascending order.</p>\r\n<p>The in-degree of a vertex in a directed graph is the count of incoming edges to that vertex, i.e., the number of edges for which the vertex is the destination.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The input list edges will have at most 10<sup>4</sup> edges.</li>\r\n    <li>The vertices in the input list edges are strings and can be represented as strings.</li>\r\n    <li>The graph can have self-loops, i.e., edges of the form (u, u), where u is a vertex. Such self-loops should be counted as incoming edges.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input should consist of N, the number of edges.</p>\r\n<p>The next N line of input, each edge contains two vertices (u, v) representing an edge from vertex u to vertex v, both separated by a single white space. The vertices are represented as strings.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should print the highest node having indegree where the first column is the vertices of the graph and the second column is indegree, both separated by a single white space. If two or more nodes have the same highest indegree, then pick the vertex that appears first when they are arranged in alphabetically ascending order.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nA B\r\nB C\r\nC D\r\nD A\r\nC A\r\nOutput:\r\nC 2</code></pre>\r\n<p><strong>Explanation:</strong> After analyzing the edges, we can calculate the indegree of each vertex as follows:</p>\r\n<p>Vertex A has an in-degree of 1 because one edge has B as the destination vertex, (A, B).</p>\r\n<p>Vertex B has an in-degree of 2 because two edges have B as the destination vertex, (A, B) and (D, B).</p>\r\n<p>Vertex C has an in-degree of 2 because two edges have C as the destination vertex, (A, C) and (D, C).</p>\r\n<p>The nodes with the highest in-degree are C and D, with an in-degree of 2. But Vertex C appears first when they are arranged in alphabetically descending order so we will consider C as output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\nA E\r\nE F\r\nF G\r\nG H\r\nOutput:\r\nE 1</code></pre>\r\n<p><strong>Explanation:</strong> After analyzing the edges, we can calculate the indegree of each vertex as follows:</p>\r\n<p>Nodes with the highest in-degree are E, F, G, and H, with an in-degree of 1. But, here E appears first when they are arranged in alphabetically descending order, so we will consider E as an output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "flipkart_8aug",
        "company_id": 410
    },
    {
        "id": 1208,
        "title": "Snake Movement Simulation",
        "problem_statement": "<h1>Snake Movement Simulation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a popular video game, a snake moves inside a two-dimensional square grid based on a set of fixed instructions. As the snake traverses its path in the grid, it leaves behind a trail of poison along the path it travels. If the snake crosses that path again, the poison will kill it, and thus end the game. A second way to end the game is if the snake falls off the grid.</p>\r\n<p>The square grid is a representation of the first quadrant of the cartesian plane i.e. (0, 0) is at bottom left of the grid, x values increase as we go right, and y values increase as we go up.</p>\r\n<p>Given the grid, starting position and the path of the snake during the game, write a program to determine the final position of the snake when the game ends, and if the snake is alive or dead at the end.</p>\r\n<p>The starting coordinates of the snake are given as (x, y). Initially, the snake faces to the east, that is, in the same direction as the positive x-axis. The path is described as a series of moves in the form [T, K]. T indicates the direction turned, which is either 'S', 'L', or 'R', meaning Straight, Left, or Right, respectively, while K is the distance to travel after turning. Thus 'R 6' means to turn right (relative to the current direction) and then travel 6 units.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains 2 integers W and D denoting the dimensions of the grid.</p>\r\n<p>The second line contains 2 integers x and y denoting the starting position of the snake.</p>\r\n<p>The third line is of the form n dir₁ len₁, dir₂ len₂, ..., dirₙ lenₙ where n denotes the number of moves the snake makes; dirᵢ denotes the direction for i-st move and similarly lenᵢ denotes the length of the i-st move, and so on.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The first line of output prints an integer denoting the total distance the snake travels until the game ends.</p>\r\n<p>The second line of output prints the end co-ordinates of the snake in form (x2,y2) and status in form D for Dead or A for Alive, with a single space in between</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n10 8\r\n2 3\r\n3 L 4 R 6 R 2\r\nOutput:\r\n12\r\n(8,5) A</code></pre>\r\n<p><strong>Explanation:</strong> From the input line 1, the grid is of width 10 (x-axis) and height 8 (y-axis). The snake starts at (2, 3) and is facing right i.e. looking towards (3, 3). The first move is 'L 4' so the snake turns left and moves 4 units i.e. (2,3)->(2,4)->(2,5)->(2,6)->(2,7). Then next move is 'R 6' so the snake turns right, and moves 6 units: (2,7)->(3,7)->(4,7)->(5,7)->(6,7)->(7,7)->(8,7). The next move is 'R 2' so the snake turns right again and moves 2 units: (8,7)->(8,6)->(8,5). Since the snake did not hit the poison or fall off the grid, it is alive at the end of the game. The snake travelled 4+6+2 = 12 units after which the game ended, by which time the snake had reached the final position (8,5). Hence the output is printed as 12 (8,5) A</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 5\r\n3 2\r\n4 L 2 L 1 R 2 L 3\r\nOutput:\r\n5\r\n(2,6) D</code></pre>\r\n<p><strong>Explanation:</strong> From the input line 1, the grid is of width 4 (x-axis) and height 5 (y-axis). The snake starts at (3, 2) and is facing right i.e. looking towards (4, 2). The first move is 'L 2' so the snake turns left and moves 2 units i.e. (3,2)->(3,3)->(3,4). Then next move is 'L 1' so the snake turns left again and moves 1 unit i.e. (3,4)->(2,4). The next move is 'R 2' so the snake turns right and moves 2 units i.e. (2,4)->(2,5)->(2,6). Given the grid is of height 5 only, when trying to move to (2,6) the snake falls off the grid and dies. The game hence ends here, even though there was one move left for the snake. The snake travelled for 2+1+2 = 5 units, and the snake was at (2,6) when the game ended. Hence the output is printed as 5 (2,6) D</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= W, D &lt;= 100</li>\r\n    <li>1 &lt;= x &lt; W</li>\r\n    <li>1 &lt;= y &lt; D</li>\r\n    <li>1 &lt;= n &lt;= 10</li>\r\n    <li>dir is {S,L,R}</li>\r\n    <li>len &gt; 0</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "flipkart_8aug",
        "company_id": 410
    }
]