[
    {
        "id": 165,
        "title": "Rating Changes Tracker",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Rating Changes Tracker</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Imagine you are calculating how you rate your favorite website over time using a random scale. You started with a rating of 1500, and need to track the changes. Return an array with two numbers - your highest rating ever, and your current rating.</p>\n        \n        <div class=\\\"note\\\">\n            <p><strong>Note:</strong> It is guaranteed that your rating never changed to a negative value. Also, note that you are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(diffs.length²) will fit within the execution time limit.</p>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>An array <code>diffs</code> containing the rating changes over time.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an array containing two numbers: [highest_rating, current_rating]</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input: diffs = [100, -200, 350, 100, -600]</pre>\n            <pre class=\\\"output\\\">Output: [1850, 1250]</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Here is the sequence of ratings after processing each change:</p>\n                <ul>\n                    <li>1500 - initial rating</li>\n                    <li>1500 + 100 = 1600</li>\n                    <li>1600 - 200 = 1400</li>\n                    <li>1400 + 350 = 1750</li>\n                    <li>1750 + 100 = 1850 - maximum value</li>\n                    <li>1850 - 600 = 1250 - current value</li>\n                </ul>\n                <p>Since your highest rating was 1850 and your current rating is 1250, the answer is [1850, 1250]</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input: diffs = []</pre>\n            <pre class=\\\"output\\\">Output: [1500, 1500]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Since there aren\\'t any changes to the initial rating, both the highest and the current rating values are 1500.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1eSBvVP8uEadGPw0WyoqtO26ivd6_LULQ_goVWpWtWfM/edit?usp=sharing",
        "solution_code": "public class Solution {\\n    public int[] solution(int[] diffs) {\\n        int initR = 1500;\\n        int curR = initR;\\n        int maxR = initR;\\n        \\n        for (int diff : diffs) {\\n            curR += diff;\\n            if (curR > maxR) {\\n                maxR = curR;\\n            }\\n        }\\n        \\n        return new int[]{maxR, curR};\\n    }\\n    \\n    public static void main(String[] args){\\n        Solution sol = new Solution();\\n        \\n        int[] d1 = {100, -200, 350, 100, -600};\\n        int[] res1 = sol.solution(d1);\\n        System.out.println(\\\"Test Case 1 Output: [\\\" + res1[0] + \\\", \\\" + res1[1] + \\\"]\\\"); \\n        \\n        int[] d2 = {};\\n        int[] res2 = sol.solution(d2);\\n        System.out.println(\\\"Test Case 2 Output: [\\\" + res2[0] + \\\", \\\" + res2[1] + \\\"]\\\");\\n        \\n        int[] d3 = {100, 200, 300};\\n        int[] res3 = sol.solution(d3);\\n        System.out.println(\\\"Test Case 3 Output: [\\\" + res3[0] + \\\", \\\" + res3[1] + \\\"]\\\");\\n        \\n        int[] d4 = {-100, -200, -300};\\n        int[] res4 = sol.solution(d4);\\n        System.out.println(\\\"Test Case 4 Output: [\\\" + res4[0] + \\\", \\\" + res4[1] + \\\"]\\\");\\n        \\n        int[] d5 = {500, -1000, 700, -200, 300};\\n        int[] res5 = sol.solution(d5);\\n        System.out.println(\\\"Test Case 5 Output: [\\\" + res5[0] + \\\", \\\" + res5[1] + \\\"]\\\");\\n    }\\n}",
        "company_name": "Uber",
        "company_id": 40
    },
    {
        "id": 166,
        "title": "Bird\\'s Nest Building",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Bird\\'s Nest Building</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are helping the bird build its nest. You are given an array <code>forest</code>, containing positive integers and zeros, and a non-negative integer <code>bird</code>, representing the bird\\'s initial position.</p>\n        \n        <p>Each positive integer within the <code>forest</code> is considered to be a stick, where <code>forest[i]</code> represents the length of the i<sup>th</sup> stick. Each zero within <code>forest[i]</code> represents that this place is empty.</p>\n        \n        <p>Initially, the bird is located at <code>forest[bird]</code>, which is guaranteed to be zero. The bird builds its nest, following the algorithm:</p>\n        \n        <ul>\n            <li>The bird flies to the right until it finds a stick;</li>\n            <li>The bird flies back to its initial position and attaches the found stick to the nest;</li>\n            <li>The bird repeats steps one and two, but changes the flight direction - it now flies to the left;</li>\n            <li>The bird will repeat steps one and two, changing to the opposite direction each time, until the total length of the sticks in the nest reaches 100.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>It is guaranteed that the total length of all sticks in the forest is greater or equal to 100. More formally: <code>sum(forest) ≥ 100</code></li>\n            <li>The forest is large, so the bird will never reach the end of the forest during the process.</li>\n            <li>When flying right: <code>forest[i] = 0</code> for every <code>i > bird</code></li>\n            <li>When flying left: <code>forest[i] = 0</code> for every <code>i < bird</code></li>\n            <li>Time complexity should not exceed <code>O(forest.length²)</code></li>\n            <li>Execution time limit: 3 seconds (Java)</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the array containing 0-based indices within the initial <code>forest</code> array of every stick found by the bird, sorted in the order in which it found them.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">forest = [25, 0, 50, 0, 0, 0, 0, 15, 0, 0, 45]\nbird = 4</pre>\n            <pre class=\\\"output\\\">[7, 2, 10]</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>At the beginning, the bird is located at <code>forest[bird] = forest[4] = 0</code></li>\n                    <li>The bird flies to the right and finds the first stick at <code>forest[7] = 15</code>. The found stick positions are <code>pos = [7]</code>. The nest contains a single stick of length 15.</li>\n                    <li>The bird changes direction and flies to the left, finding the second stick at <code>forest[2] = 50</code>. The found stick positions are <code>pos = [7, 2]</code>. The total length of sticks in the nest is 15 + 50 = 65.</li>\n                    <li>The bird changes direction again and flies to the right. The last stick it finds is <code>forest[10] = 45</code>. The found stick positions are <code>pos = [7, 2, 10]</code>. The total length of sticks in the nest is 15 + 50 + 45 = 110.</li>\n                    <li>Since the total length of the found sticks reached 100, the search stops. The answer is <code>[7, 2, 10]</code>.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1EhZfwMxPJhumKayb3YEToDorsGCP_GafDj0ugcw5jhI/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Uber",
        "company_id": 40
    },
    {
        "id": 167,
        "title": "Stock Car Race Elimination",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Stock Car Race Elimination</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>All the competitors in a stock car race have completed their qualifying laps. Each lap, the driver with the current slowest \\\"best\\\" time is eliminated (that is, the highest personal best time). If multiple drivers tie for the slowest time, they are all eliminated.</p>\n        \n        <p>You are given a two-dimensional string array with each driver\\'s name and lap time in seconds for each lap. Your task is to return the drivers in the order in which they were eliminated, ending with the last driver or drivers remaining. When multiple drivers are eliminated on the same lap, their names should be listed alphabetically.</p>\n        \n        <p class=\\\"note\\\"><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(laps.length * laps[0].length) will fit within the execution time limit.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>array.array.string laps</p>\n        <p>An array of string arrays of driver\\'s name and lap time. It is guaranteed that the same drivers will appear in every lap. All laps[i] are guaranteed to be given in format \\\"str(NAME) int(TIME)\\\".</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>array.string</p>\n        <p>Return the list of drivers sorted in the order which they were eliminated, and ordered alphabetically in the case of ties.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>laps.length = laps[i].length</li>\n            <li>1 ≤ laps[i].length ≤ 100</li>\n            <li>1 ≤ TIME ≤ 10⁴</li>\n            <li>Execution time limit: 3 seconds (java)</li>\n            <li>Memory limit: 1 GB</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">laps = [[\\\"Harold 154\\\", \\\"Gina 155\\\", \\\"Juan 160\\\"],\n       [\\\"Juan 152\\\", \\\"Gina 153\\\", \\\"Harold 160\\\"],\n       [\\\"Harold 148\\\", \\\"Gina 150\\\", \\\"Juan 151\\\"]]</pre>\n            <pre class=\\\"output\\\">solution(laps) = [\\\"Juan\\\", \\\"Harold\\\", \\\"Gina\\\"]</pre>\n            <div class=\\\"explanation\\\">\n                <p><strong>Explanation:</strong></p>\n                <ul>\n                    <li>After the first lap, Harold\\'s best time is 154, Gina\\'s best time is 155 and Juan\\'s best time is 160. Juan is eliminated, leaving Harold and Gina.</li>\n                    <li>After the second lap, Harold\\'s best time is still 154 and Gina\\'s best time is 153, so Harold is eliminated.</li>\n                    <li>Gina is the only racer remaining on the third lap.</li>\n                </ul>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">laps = [[\\\"Gina 155\\\", \\\"Eddie 160\\\", \\\"Joy 161\\\", \\\"Harold 163\\\"],\n       [\\\"Harold 151\\\", \\\"Gina 153\\\", \\\"Joy 160\\\", \\\"Eddie 160\\\"],\n       [\\\"Harold 149\\\", \\\"Joy 150\\\", \\\"Gina 152\\\", \\\"Eddie 154\\\"],\n       [\\\"Harold 148\\\", \\\"Gina 150\\\", \\\"Eddie 151\\\", \\\"Joy 155\\\"]]</pre>\n            <pre class=\\\"output\\\">solution(laps) = [\\\"Harold\\\", \\\"Eddie\\\", \\\"Joy\\\", \\\"Gina\\\"]</pre>\n            <div class=\\\"explanation\\\">\n                <p><strong>Explanation:</strong></p>\n                <ul>\n                    <li>After the first lap, Harold is eliminated with best time 163</li>\n                    <li>After the second lap, Eddie and Joy are both eliminated with best time 160 (listed alphabetically)</li>\n                    <li>Gina is the only racer remaining on the third and fourth laps</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/12i7iBZVgXD04cBs2xAnMYf7abg5f1XXcJdXTxaTipvY/edit?usp=sharing",
        "solution_code": "import java.util.*;\\n\\npublic class StockCarRaceElimination {\\n\\n    public static String[] stockCarRaceElimination(String[][] laps) {\\n        Set<String> active = new HashSet<>();\\n        Map<String, Integer> best = new HashMap<>();\\n        List<String> order = new ArrayList<>();\\n\\n        if (laps.length == 0 || laps[0].length == 0) {\\n            return new String[0];\\n        }\\n\\n        for (String entry : laps[0]) {\\n            String[] parts = entry.split(\\\" \\\");\\n            active.add(parts[0]);\\n            best.put(parts[0], Integer.MAX_VALUE);\\n        }\\n\\n        for (String[] lap : laps) {\\n            Map<String, Integer> current = new HashMap<>();\\n\\n            for (String entry : lap) {\\n                String[] parts = entry.split(\\\" \\\");\\n                if (active.contains(parts[0])) {\\n                    best.put(parts[0], Math.min(best.get(parts[0]), Integer.parseInt(parts[1])));\\n                    current.put(parts[0], Integer.parseInt(parts[1]));\\n                }\\n            }\\n\\n            if (active.size() > 1) {\\n                int maxTime = Integer.MIN_VALUE;\\n                for (String driver : active) {\\n                    maxTime = Math.max(maxTime, best.get(driver));\\n                }\\n\\n                List<String> toEliminate = new ArrayList<>();\\n                for (String driver : active) {\\n                    if (best.get(driver) == maxTime) {\\n                        toEliminate.add(driver);\\n                    }\\n                }\\n\\n                Collections.sort(toEliminate);\\n                order.addAll(toEliminate);\\n                active.removeAll(toEliminate);\\n            }\\n\\n            if (active.size() == 1) {\\n                break;\\n            }\\n        }\\n\\n        if (!active.isEmpty()) {\\n            List<String> remaining = new ArrayList<>(active);\\n            Collections.sort(remaining);\\n            order.addAll(remaining);\\n        }\\n\\n        return order.toArray(new String[0]);\\n    }\\n\\n    public static void main(String[] args) {\\n        String[][] laps1 = {{\\\"Harold 154\\\", \\\"Gina 155\\\", \\\"Juan 160\\\"}, {\\\"Juan 152\\\", \\\"Gina 153\\\", \\\"Harold 160\\\"}, {\\\"Harold 148\\\", \\\"Gina 150\\\", \\\"Juan 151\\\"}};\\n        System.out.println(Arrays.toString(stockCarRaceElimination(laps1)));\\n\\n        String[][] laps2 = {{\\\"Gina 155\\\", \\\"Eddie 160\\\", \\\"Joy 161\\\", \\\"Harold 163\\\"}, {\\\"Harold 151\\\", \\\"Gina 153\\\", \\\"Joy 160\\\", \\\"Eddie 160\\\"}, {\\\"Harold 149\\\", \\\"Joy 150\\\", \\\"Gina 152\\\", \\\"Eddie 154\\\"}, {\\\"Harold 148\\\", \\\"Gina 150\\\", \\\"Eddie 151\\\", \\\"Joy 155\\\"}};\\n        System.out.println(Arrays.toString(stockCarRaceElimination(laps2)));\\n\\n\\n    }\\n}",
        "company_name": "Uber",
        "company_id": 40
    },
    {
        "id": 168,
        "title": "Spaceship Data Segments",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Spaceship Data Segments</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A team of astronauts on a spaceship is receiving important data from Earth for their research. The data is being transmitted in segments that contain specific parts of the file, and each segment defines a byte range in the form of a two-dimensional array <code>segments</code>.</p>\n        \n        <p>For each segment <code>segments[i]</code>, the range is given in an array of two 64-bit integers:</p>\n        <ul>\n            <li><code>segments[i][0]</code> is the index of the first byte in the i<sup>th</sup> segment</li>\n            <li><code>segments[i][1]</code> is the index of the last byte in the i<sup>th</sup> segment</li>\n        </ul>\n        <p>(both indices are inclusive, 1-based)</p>\n        \n        <p>Your task is to calculate the total number of unique bytes received for the entire file after each segment is received. Keep in mind that segments can overlap with or completely replicate previous ones.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p><code>array.array.integer64 segments</code></p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Execution time limit: 3 seconds (java)</li>\n            <li>Memory limit: 1 GB</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input: segments = [[1, 1], [2, 2], [3, 3]]</pre>\n            <pre class=\\\"output\\\">Output: [1, 2, 3]</pre>\n            <div class=\\\"explanation\\\">\n                <ul>\n                    <li>The first segment only contains the byte 1, so the total number of unique bytes received becomes 1 after this segment.</li>\n                    <li>The second segment only contains the byte 2, so the total becomes 2 after this segment.</li>\n                    <li>The third segment only contains the byte 3, making the total 3 after this segment.</li>\n                </ul>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input: segments = [[1, 9], [1, 3], [8, 15], [6, 9], [2, 5]]</pre>\n            <pre class=\\\"output\\\">Output: [9, 9, 15, 15, 15]</pre>\n            <div class=\\\"explanation\\\">\n                <ul>\n                    <li>The first segment contains bytes 1 to 9, so the total is 9.</li>\n                    <li>The second segment doesn\\'t add new data, keeping the total at 9.</li>\n                    <li>The third segment adds bytes up to 15, increasing the total to 15.</li>\n                    <li>The remaining segments do not change the total as these bytes have already been received.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1EZ8vp1oAMf2vGbRw-IJD8oVKEbh0Z38Qnb6pZNR4biY/edit?usp=sharing",
        "solution_code": "import java.util.*;\\n\\npublic class SpaceshipDataSegments {\\n    public static long[] calculateUniqueBytes(long[][] seg) {\\n        TreeMap<Long, Long> map = new TreeMap<>();\\n        long[] res = new long[seg.length];\\n        long total = 0;\\n\\n        for (int i = 0; i < seg.length; i++) {\\n            long s = seg[i][0];\\n            long e = seg[i][1];\\n\\n            Map.Entry<Long, Long> le = map.floorEntry(s);\\n            if (le != null && le.getValue() >= s - 1) {\\n                s = Math.min(s, le.getKey());\\n                e = Math.max(e, le.getValue());\\n                total -= (le.getValue() - le.getKey() + 1);\\n                map.remove(le.getKey());\\n            }\\n\\n            Map.Entry<Long, Long> ce = map.ceilingEntry(s);\\n            while (ce != null && ce.getKey() <= e + 1) {\\n                e = Math.max(e, ce.getValue());\\n                total -= (ce.getValue() - ce.getKey() + 1);\\n                map.remove(ce.getKey());\\n                ce = map.ceilingEntry(s);\\n            }\\n\\n            map.put(s, e);\\n            total += (e - s + 1);\\n            res[i] = total;\\n        }\\n\\n        return res;\\n    }\\n\\n    public static void main(String[] args) {\\n        long[][] segments1 = { {1, 1}, {2, 2}, {3, 3} };\\n        System.out.println(Arrays.toString(calculateUniqueBytes(segments1)));\\n\\n        long[][] segments2 = { {1, 1}, {2, 2}, {3, 5} };\\n        System.out.println(Arrays.toString(calculateUniqueBytes(segments2)));\\n\\n        long[][] segments3 = { {1, 9}, {1, 3}, {8, 15}, {6, 9}, {2, 4} };\\n        System.out.println(Arrays.toString(calculateUniqueBytes(segments3)));\\n\\n        long[][] segments4 = { {7, 9}, {1, 3}, {8, 15}, {6, 9}, {2, 4} };\\n        System.out.println(Arrays.toString(calculateUniqueBytes(segments4)));\\n    }\\n}",
        "company_name": "Uber",
        "company_id": 40
    },
    {
        "id": 227,
        "title": "Largest Square in Cityscape",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Largest Square in Cityscape</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are tasked with analyzing the potential space in a cityscape outlined by a series of skyscrapers. Each skyscraper\\'s height is represented by an element in the array <code>cityLine</code>, where the width of each skyscraper is consistently <code>1</code>, and they are placed directly adjacent to each other along a road with no gaps. Your mission is to determine the largest square area that can fit within this row of skyscrapers.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\ncityLine = [1, 2, 3, 2, 1]</pre>\n            <pre class=\\\"output\\\">Output:\nsolution(cityLine) = 4</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this configuration, there are several 2x2 squares that can be accommodated within the skyscrapers, but no larger square can fit owing to the limitations of their heights.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\ncityLine = [4, 3, 4]</pre>\n            <pre class=\\\"output\\\">Output:\nsolution(cityLine) = 9</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this scenario, a 3x3 square can fit snugly within the skyscraper setup, taking advantage of the uniform heights at the edges.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1jjzsWnUTp_vbXe8aLBtYoft_FUodLs1db2Sldrw1cVA/edit?usp=sharing",
        "solution_code": "public class Solution {\\n    public static int solution(int[] cityLine) {\\n        if (cityLine == null || cityLine.length == 0) {\\n            return 0;\\n        }\\n\\n        int n = cityLine.length;\\n        int maxHeight = 0;\\n        for (int height : cityLine) {\\n            if (height > maxHeight) {\\n                maxHeight = height;\\n            }\\n        }\\n\\n        int left = 1;\\n        int right = Math.min(n, maxHeight);\\n        int maxSquareArea = 0;\\n\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (canFormSquare(cityLine, mid)) {\\n                maxSquareArea = mid * mid;\\n                left = mid + 1;\\n            } else {\\n                right = mid - 1;\\n            }\\n        }\\n\\n        return maxSquareArea;\\n    }\\n\\n    private static boolean canFormSquare(int[] cityLine, int size) {\\n        int n = cityLine.length;\\n        int minHeight = 0;\\n\\n        for (int i = 0; i < size; i++) {\\n            if (cityLine[i] < size) {\\n                minHeight = -1;\\n                break;\\n            }\\n        }\\n        if (minHeight != -1) {\\n            return true;\\n        }\\n\\n        for (int i = size; i < n; i++) {\\n            boolean valid = true;\\n            for (int j = i - size + 1; j <= i; j++) {\\n                if (cityLine[j] < size) {\\n                    valid = false;\\n                    break;\\n                }\\n            }\\n            if (valid) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n}",
        "company_name": "Uber",
        "company_id": 40
    },
    {
        "id": 228,
        "title": "Character Health Tracker",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Character Health Tracker</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Imagine a video game where the player controls a character to go through several levels. The character has an initial health value of <code>initialHealth</code>, and this value changes as the player goes through levels of the game.</p>\n        \n        <p>You are given an array of integers <code>deltas</code>, defining each health value change. Specifically, the i<sup>th</sup> level (0-indexed) changes the character\\'s current health value by <code>deltas[i]</code>. Note that whenever the current health value becomes less than <code>0</code>, it immediately gets set to <code>0</code>. Similarly, whenever the current health value becomes greater than <code>100</code>, it immediately gets set to <code>100</code>.</p>\n        \n        <p>Your task is to return the character\\'s final health value after the player goes through all levels of the game.</p>\n        \n        <p class=\\\"note\\\"><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(deltas.length)</code> will fit within the execution time limit.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>Integer <code>initialHealth</code></li>\n            <li>Array of integers <code>deltas</code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Execution time limit: 3 seconds (Java)</li>\n            <li>Memory limit: 1 GB</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\ninitialHealth = 12\ndeltas = [-4, -12, 6, 2]</pre>\n            <pre class=\\\"output\\\">Output:\nsolution(initialHealth, deltas) = 8</pre>\n            \n            <div class=\\\"explanation\\\">\n                <p>Let\\'s consider each level:</p>\n                <ul>\n                    <li>At the beginning, the current health value is <code>currentHealth = initialHealth = 12</code></li>\n                    <li>After completing the 0th level, the current health value becomes <code>currentHealth + deltas[0] = 12 + -4 = 8</code></li>\n                    <li>After completing the 1st level, the current health value becomes <code>currentHealth + deltas[1] = 8 + -12 = -4</code>, but since the health value cannot be less than <code>0</code>, it gets set to <code>0</code></li>\n                    <li>After completing the 2nd level, the current health value becomes <code>currentHealth + deltas[2] = 0 + 6 = 6</code></li>\n                    <li>After completing the 3rd level, the current health value becomes <code>currentHealth + deltas[3] = 6 + 2 = 8</code>, which is the final answer</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1jdb5d1Jy2LVVXUd6QtqGu8VMRlPhfKZecv3_Icp8ZuQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Uber",
        "company_id": 40
    },
    {
        "id": 229,
        "title": "Team Rankings Competition",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Team Rankings Competition</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Consider a competition that uses a point system to determine the team rankings. After a match, the winning team receives 3 points, the losing team receives 0 points, or, if tied, both teams receive 1 point.</p>\n        \n        <p>The team that accumulates the most points wins the competition. However, if there is a tie, the team with the highest goal difference among the tied teams is the winner. Goal difference is calculated as <code>scored - conceded</code> goals.</p>\n        \n        <p>You are given 4 arrays of the same length: <code>wins</code>, <code>draws</code>, <code>scored</code>, and <code>conceded</code>. Within each array, the i<sup>th</sup> element represents the corresponding metric for the i<sup>th</sup> team - i.e., scored goals <code>scored[i]</code>, conceded goals <code>conceded[i]</code>, matches won <code>wins[i]</code>, and matches tied <code>draws[i]</code> during the competition (for each i in 0, 1, ..., wins.length - 1).</p>\n    </div>\n\n    <div class=\\\"task\\\">\n        <h3>Task</h3>\n        <p>Your task is to determine the indices of the winning team and the team in second place. Return an array of exactly two integers, where the first is the index of the winning team and the second is the index of the team in second place.</p>\n        <p>It is guaranteed that there will only be one winning team and one team in second place.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(wins.length²) will fit within the execution time limit.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\nwins = [2, 1, 0]\ndraws = [1, 5, 6]\nscored = [20, 15, 10]\nconceded = [20, 10, 15]</pre>\n            <pre class=\\\"output\\\">Output: [1, 0]</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>The team with index 0 received 2 · 3 + 1 = 7 points</li>\n                    <li>The team with index 1 received 1 · 3 + 5 = 8 points</li>\n                    <li>The team with index 2 received 0 · 3 + 6 = 6 points</li>\n                </ul>\n                <p>As 8 > 7 > 6, the team with index 1 is the winner and the team with index 0 is in second place.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input:\nwins = [3, 1, 2, 2]\ndraws = [1, 5, 4, 4]\nscored = [30, 10, 20, 40]\nconceded = [32, 13, 18, 37]</pre>\n            <pre class=\\\"output\\\">Output: [3, 2]</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>The team with index 0 received 3 · 3 + 1 = 10 points</li>\n                    <li>The team with index 1 received 1 · 3 + 5 = 8 points</li>\n                    <li>The team with index 2 received 2 · 3 + 4 = 10 points</li>\n                    <li>The team with index 3 received 2 · 3 + 4 = 10 points</li>\n                </ul>\n                <p>Three teams are tied with the highest number of points: Teams with indices 0, 2 and 3.</p>\n                <ul>\n                    <li>The team with index 0 has a goal difference of 30 - 32 = -2</li>\n                    <li>The team with index 2 has a goal difference of 20 - 18 = 2</li>\n                    <li>The team with index 3 has a goal difference of 40 - 37 = 3</li>\n                </ul>\n                <p>As 3 > 2 > -2, the team with index 3 is the winner and the team with index 2 is in second place.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1x6uEwQrJ4I2Agmnh3NvMsgWyeKCoD5huZpDam_8K4dk/edit?usp=sharing",
        "solution_code": "import java.util.ArrayList;\\nimport java.util.Collections;\\nimport java.util.Comparator;\\nimport java.util.List;\\n\\npublic class TeamRankingsCalculator {\\n\\n    static class Team {\\n        int idx;\\n        int pts;\\n        int gd;\\n\\n        Team(int idx, int pts, int gd) {\\n            this.idx = idx;\\n            this.pts = pts;\\n            this.gd = gd;\\n        }\\n    }\\n\\n    public static int[] solution(int[] w, int[] d, int[] s, int[] c) {\\n        int n = w.length;\\n        List<Team> teams = new ArrayList<>();\\n\\n        for (int i = 0; i < n; i++) {\\n            int pts = w[i] * 3 + d[i];\\n            int gd = s[i] - c[i];\\n            teams.add(new Team(i, pts, gd));\\n        }\\n\\n        Collections.sort(teams, new Comparator<Team>() {\\n            @Override\\n            public int compare(Team t1, Team t2) {\\n                if (t2.pts != t1.pts) {\\n                    return t2.pts - t1.pts;\\n                } else {\\n                    return t2.gd - t1.gd;\\n                }\\n            }\\n        });\\n\\n        int[] result = new int[2];\\n        result[0] = teams.get(0).idx;\\n        result[1] = teams.get(1).idx;\\n\\n        return result;\\n    }\\n\\n    public static void main(String[] args) {\\n        int[] w1 = {2, 1, 0};\\n        int[] d1 = {1, 5, 6};\\n        int[] s1 = {20, 15, 10};\\n        int[] c1 = {20, 10, 15};\\n        int[] o1 = solution(w1, d1, s1, c1);\\n        System.out.println(\\\"Test Case 1 Output: [\\\" + o1[0] + \\\", \\\" + o1[1] + \\\"]\\\");\\n\\n        int[] w2 = {3, 1, 2, 2};\\n        int[] d2 = {1, 5, 4, 4};\\n        int[] s2 = {30, 10, 20, 40};\\n        int[] c2 = {32, 13, 18, 37};\\n        int[] o2 = solution(w2, d2, s2, c2);\\n        System.out.println(\\\"Test Case 2 Output: [\\\" + o2[0] + \\\", \\\" + o2[1] + \\\"]\\\");\\n\\n        int[] w3 = {4, 4, 4};\\n        int[] d3 = {2, 2, 2};\\n        int[] s3 = {25, 30, 20};\\n        int[] c3 = {20, 25, 15};\\n        int[] o3 = solution(w3, d3, s3, c3);\\n        System.out.println(\\\"Test Case 3 Output: [\\\" + o3[0] + \\\", \\\" + o3[1] + \\\"]\\\");\\n    }\\n}",
        "company_name": "Uber",
        "company_id": 40
    }
]