[
    {
        "id": 556,
        "title": "Cryptarithm",
        "problem_statement": "<h1>Cryptarithm</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A cryptarithm is a mathematical puzzle where the goal is to find the correspondence between letters and digits such that the given arithmetic equation consisting of letters holds true.</p>\r\n<p>Given a cryptarithm as an array of strings <code>crypt</code>, count the number of its valid solutions.</p>\r\n<p>The solution is valid if each letter represents a different digit, and the leading digit of any multi-digit number is not zero.</p>\r\n<p><code>crypt</code> has the following structure: <code>[word1, word2, word3]</code>, which stands for <code>word1 + word2 = word3</code> cryptarithm.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"SEND\", \"MORE\", \"MONEY\"]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Because there is only one solution to this cryptarithm: O = 0, M = 1, Y = 2, E = 5, N = 6, D = 7, R = 8, and S = 9 (9567 + 1085 = 10652).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"GREEN\", \"BLUE\", \"BLACK\"]\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> Because there are 12 possible valid solutions:</p>\r\n<ul>\r\n    <li>54889 + 6138 = 61027</li>\r\n    <li>18559 + 2075 = 20634</li>\r\n    <li>72449 + 8064 = 80513</li>\r\n    <li>48229 + 5372 = 53601</li>\r\n    <li>47119 + 5261 = 52380</li>\r\n    <li>36887 + 4028 = 40915</li>\r\n    <li>83447 + 9204 = 92651</li>\r\n    <li>74665 + 8236 = 82901</li>\r\n    <li>65884 + 7308 = 73192</li>\r\n    <li>57883 + 6408 = 64291</li>\r\n    <li>57881 + 6428 = 64309</li>\r\n    <li>83441 + 9264 = 92705</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: crypt = [\"ONE\", \"TWO\", \"THREE\"]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Because there are no valid solutions.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.string crypt</code></li>\r\n    <li>Array of three non-empty strings containing only uppercase English letters.</li>\r\n    <li><strong>Output:</strong> <code>integer</code></li>\r\n    <li>The number of valid solutions.</li>\r\n    <li><code>1 &le; crypt[i].length &le; 35</code></li>\r\n</ul>\r\n\r\n<h3>C++ Syntax Tips</h3>\r\n<pre><code class='language-cpp'>// Prints help message to the console\r\n// Returns a string\r\nstring helloworld(string name) {\r\n    cout &lt;&lt; \"This prints to the console when\"\r\n         &lt;&lt; \"return \\\"Hello, \" + name;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Codenation_23june",
        "company_id": 187
    },
    {
        "id": 557,
        "title": "Bank Account Management",
        "problem_statement": "<h1>Bank Account Management</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your system should also handle invalid requests. There are two types of invalid requests:</p>\r\n<ul>\r\n    <li>invalid account number;</li>\r\n    <li>withdrawal of a larger amount of money than is currently available.</li>\r\n</ul>\r\n<p>For the given list of initial <code>balances</code> and <code>requests</code>, return the state of <code>balances</code> straight after the last request has been processed, or an array of a single element <code>[-&lt;request_id&gt;]</code> (please note the minus sign), where <code>&lt;request_id&gt;</code> is the 1-based index of the first invalid request. Note that cashback requests which haven't happened before the last request should be ignored.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: balances = [1000, 1500]\r\nrequests = [\"withdraw 1613327630 2 480\", \"withdraw 1613327644 2 800\", \"withdraw 1614105244 1 100\", \"deposit 1614108844 2 200\", \"withdraw 1614108845 2 150\"]\r\nOutput: [900, 295]</code></pre>\r\n<p><strong>Explanation:</strong> Here are the states of balances after each request:</p>\r\n<ul>\r\n    <li>Initially: <code>[1000, 1500]</code></li>\r\n    <li>\"withdraw 1613327630 2 480\": <code>[1000, 1020]</code></li>\r\n    <li>\"withdraw 1613327644 2 800\": <code>[1000, 220]</code></li>\r\n    <li>At 1614134044 the 2nd account will receive the cashback of <code>480 * 0.02 = 9.6</code>, which is rounded down to 9: <code>[1000, 229]</code></li>\r\n    <li>At 1613414044 the 2nd account will receive the cashback of <code>800 * 0.02 = 16</code>: <code>[1000, 245]</code></li>\r\n    <li>\"withdraw 1614105244 1 100\": <code>[900, 245]</code></li>\r\n    <li>\"deposit 1614108844 2 200\": <code>[900, 445]</code></li>\r\n    <li>\"withdraw 1614108845 2 150\": <code>[900, 295]</code>, which is the answer.</li>\r\n    <li>Cashbacks for the last two withdrawals happen at 1614191644 and 1614195245, which is after the last request timestamp 1614108845, so they are ignored.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: balances = [20, 1000, 500, 40, 90]\r\nrequests = [\"deposit 1613327630 3 400\", \"withdraw 1613327635 1 20\", \"withdraw 1613327651 1 50\", \"deposit 1613327655 1 50\"]\r\nOutput: [-3]</code></pre>\r\n<p><strong>Explanation:</strong> Here are the states of balances after each request:</p>\r\n<ul>\r\n    <li>Initially: <code>[20, 1000, 500, 40, 90]</code></li>\r\n    <li>\"deposit 1613327630 3 400\": <code>[20, 1000, 900, 40, 90]</code></li>\r\n    <li>\"withdraw 1613327635 1 20\": <code>[0, 1000, 900, 40, 90]</code></li>\r\n    <li>\"withdraw 1613327651 1 50\": It is not possible to withdraw 50 from the 1st account, so the request is invalid.</li>\r\n    <li>The rest of the requests are not processed.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n</ul>\r\n<h3>Input: array.integer balances</h3>\r\n<p>Array of integers, where <code>balances[i]</code> is the amount of money in the <code>(i + 1)</code>th account.</p>\r\n<ul>\r\n    <li><code>1 &le; balances.length &le; 100</code></li>\r\n    <li><code>0 &le; balances[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n<h3>Input: array.string requests</h3>\r\n<p>Array of requests in the order they should be processed. Each request is guaranteed to be in the format described above. It is guaranteed that requests come sequentially, i.e. the timestamp strictly increases.</p>\r\n<ul>\r\n    <li><code>1 &le; requests.length &le; 100</code></li>\r\n</ul>\r\n<h3>Output: array.integer</h3>\r\n<p>The balances after executing all of the <code>requests</code> or array with a single integer - the index of the first invalid request preceded by <code>-</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Codenation_23june",
        "company_id": 187
    },
    {
        "id": 558,
        "title": "Add Two Huge Integers",
        "problem_statement": "<h1>Add Two Huge Integers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're given 2 huge integers represented by linked lists. Each linked list element is a number from 0 to 9999 that represents a number with exactly 4 digits. The represented number might have leading zeros. Your task is to add up these huge integers and return the result in the same format.</p>\r\n<p>Singly-linked lists are already defined with this structure:</p>\r\n<pre><code class='language-cpp'>template&lt;typename T&gt;\r\nstruct ListNode {\r\n  ListNode(const T &amp;v) : value(v), next(nullptr) {}\r\n  T value;\r\n  ListNode *next;\r\n};</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = [9876, 5432, 1999], b = [1, 8001]\r\nOutput: [9876, 5434, 0]</code></pre>\r\n<p><strong>Explanation:</strong> Because 987654321999 + 18001 = 987654340000, we return [9876, 5434, 0].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: a = [123, 4, 5], b = [100, 100, 100]\r\nOutput: [223, 104, 105]</code></pre>\r\n<p><strong>Explanation:</strong> Because 12300040005 + 1000100100 = 22301040105, we return [223, 104, 105].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`a` is a linked list representing the first number, without its leading zeros.</li>\r\n    <li>`0 <= a size <= 10^4`</li>\r\n    <li>`0 <= element value <= 9999`</li>\r\n    <li>`b` is a linked list representing the second number, without its leading zeros.</li>\r\n    <li>`0 <= b size <= 10^4`</li>\r\n    <li>`0 <= element value <= 9999`</li>\r\n    <li>The result should be returned without leading zeros in the same format.</li>\r\n</ul>\r\n<p><strong>Execution time limit:</strong> 0.5 seconds (cpp)</p>\r\n<p><strong>Memory limit:</strong> 1 GB</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Codenation_23june",
        "company_id": 187
    },
    {
        "id": 559,
        "title": "Sum of Fractions",
        "problem_statement": "<h1>Sum of Fractions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your task is to find the sum of two fractions, expressed in the form x/y and u/v where x, y, u, and v are four integers. Compute their sum and reduce it to its lowest indivisible state: A/B.</p>\r\n<p>For example:</p>\r\n<ul>\r\n    <li>2/6+2/6 equals 4/6, which should be reduced to 2/3.</li>\r\n    <li>7/10+13/10 equals 20/10 which should be reduced to 2/1.</li>\r\n</ul>\r\n<p>You are given an array of strings, which contains several expressions in the form \"x/y+u/v\". Return a string array, where the i<sup>th</sup> element is the result for the i<sup>th</sup> expression in the form \"A/B\".</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: fractions = [\"2/6+2/6\", \"7/10+13/10\"]\r\nOutput: [\"2/3\", \"2/1\"]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nFor \"2/6+2/6\", the sum is 4/6, which reduces to 2/3.\r\nFor \"7/10+13/10\", the sum is 20/10, which reduces to 2/1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; fractions.length &le; 500</code></li>\r\n    <li><code>fractions[i]</code> has the form \"x/y+u/v\" where x, y, u, v are integers.</li>\r\n    <li><code>1 &le; x, y, u, v &le; 2000</code></li>\r\n</ul>\r\n\r\n<h2>Input/Output</h2>\r\n<ul>\r\n    <li><strong>Execution Time Limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory Limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.string fractions</code>\r\n        <p>An array of strings, where each string contains an expression that represents the sum of two fractions, given in the form \"x/y+u/v\".</p>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>array.string</code>\r\n        <p>An array of strings, where the i<sup>th</sup> element is the result for the i<sup>th</sup> expression in the form \"A/B\".</p>\r\n    </li>\r\n</ul>\r\n\r\n<h2>C++ Syntax Tips</h2>\r\n<pre><code class='language-cpp'>// Prints help message to the console\r\n// Returns a string\r\nstring helloWorld(string name) {\r\n    cout << \"This prints to the console when you Run Tests\" << endl;\r\n    return \"Hello, \" + name;\r\n}\r\n\r\n// Function signature for the problem\r\nvector&lt;string&gt; solution(vector&lt;string&gt; fractions) {\r\n    // Your code here\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Codenation_23june",
        "company_id": 187
    }
]