[
    {
        "id": 1563,
        "title": "Number of Retailers Covering a Point",
        "problem_statement": "<h1>Number of Retailers Covering a Point</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a newly planned city, where a city is located at each integral coordinate in a 2-dimensional plane, there are <code>n</code> Amazon retailers. The <code>i</code>-th retailer residing in the city at the coordinate <code>(x_i, y_i)</code> can deliver to all the cities covered by the rectangle having the 4 corner points <code>(0, 0)</code>, <code>(x_i, 0)</code>, <code>(x_i, y_i)</code>, <code>(0, y_i)</code>. We say that a point <code>(a, b)</code> is covered by a rectangle if it lies inside the rectangle or on its boundaries. Note that no 2 retailers reside in the same city.</p>\r\n<p>Given <code>q</code> requests of the form <code>(a, b)</code>, determine the number of retailers who can deliver to the city at the coordinate <code>(a, b)</code>.</p>\r\n<p>Complete the function <code>findNumRetailers</code> in the editor below. The function is expected to return an <code>INTEGER_ARRAY</code>.</p>\r\n<pre><code class='language-cpp'>vector<int> findNumRetailers(vector<vector<int>> retailers, vector<vector<int>> requests)</code></pre>\r\n<p>The function has the following parameters:</p>\r\n<ul>\r\n    <li><code>int retailers[n][2]</code>: the retailers' coordinates <code>(x_i, y_i)</code>.</li>\r\n    <li><code>int requests[q][2]</code>: the coordinates of cities to deliver to <code>(a, b)</code>.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int array[q]</code>: the <code>i</code>-th element is the answer to the <code>i</code>-th query.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: retailers = [[1, 2], [2, 3], [1, 5]], requests = [[1, 1], [1, 4]]\r\nOutput: [3, 1]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nIn this example, we have 3 retailers in the cities (1, 2), (2, 3), and (1, 5).</p>\r\n<ul>\r\n    <li>For the first request, all 3 retailers can deliver to the city at the coordinate (1, 1).</li>\r\n    <li>For the second request, only the third retailer can deliver to the city at the coordinate (1, 4).</li>\r\n</ul>\r\n<p>Hence, the answer for this example will be [3, 1].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: retailers = [[1, 4], [2, 4], [1, 5]], requests = [[2, 6], [1, 4]]\r\nOutput: [0, 3]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>For the first request, none of the retailers can deliver to the city at the coordinates (2, 6).</li>\r\n    <li>For the second request, all 3 retailers can deliver to the city at the coordinates (1, 4).</li>\r\n</ul></p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n, q <= 7.5 * 10^4</code></li>\r\n    <li><code>1 <= retailers[i][0] <= 10^9</code></li>\r\n    <li><code>1 <= retailers[i][1] <= 10^9</code></li>\r\n    <li><code>0 <= requests[i][0] <= 10^9</code></li>\r\n    <li><code>0 <= requests[i][1] <= 10^9</code></li>\r\n    <li>No two retailers share the same coordinates.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_3oct",
        "company_id": 549
    },
    {
        "id": 1569,
        "title": "Lexicographical String Game",
        "problem_statement": "<h1>Lexicographical String Game</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Amazon's internal developer summit, two engineers: Alex and Charlie are competing in a fun coding duel challenge. They are given a string S composed of lowercase English letters.</p>\r\n<p>The game rules are as follows:</p>\r\n<ul>\r\n    <li>Alex and Charlie take turns removing one character at a time, with Alex going first.</li>\r\n    <li>The game continues until only one character is left in the string.</li>\r\n</ul>\r\n<p>The engineers adopt the following removal strategy:</p>\r\n<ul>\r\n    <li>Alex's strategy: Remove a character that results in the smallest possible string (lexicographically).</li>\r\n    <li>Charlie's strategy: Remove a character that results in the largest possible string (lexicographically).</li>\r\n</ul>\r\n<p>Your task is to simulate this process and determine the final character left in the string after all removals with Alex making the first move.</p>\r\n<p><strong>Note:</strong> To compare two strings, the lexicographical order is defined as follows:</p>\r\n<ul>\r\n    <li>Start by comparing character by character from left to right of the string.</li>\r\n    <li>The string with the first different character that appears earlier in the alphabet is smaller. For example, \"abc\" &lt; \"abd\" because 'c' comes before 'd'.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider the string S = \"cat\"</p>\r\n<p>1. Turn 1: Alex (minimize) tries removing each character and evaluates the resulting strings:</p>\r\n<ul>\r\n    <li>Remove 'c' &rarr; \"at\"</li>\r\n    <li>Remove 'a' &rarr; \"ct\"</li>\r\n    <li>Remove 't' &rarr; \"ca\"</li>\r\n    <li>Among these: \"at\" is the smallest &rarr; Alex removes 'c'.</li>\r\n</ul>\r\n<p>2. Turn 2: Charlie (maximize) tries removing each character:</p>\r\n<ul>\r\n    <li>Remove 'a' &rarr; \"t\"</li>\r\n    <li>Remove 't' &rarr; \"a\"</li>\r\n    <li>Among these: \"t\" is larger &rarr; Charlie removes 'a'.</li>\r\n</ul>\r\n<p>The final character left in the string is 't'. Hence, the answer is 't'.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = \"abcde\"\r\nOutput: c</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Here, S=\"abcde\"</p>\r\n<ul>\r\n    <li>Alex would remove character 'e' (at index 4) making S=\"abcd\"</li>\r\n    <li>Charlie would remove character 'a' (at index 0) making S=\"bcd\"</li>\r\n    <li>Alex would remove character 'd' (at index 2) making S=\"bc\"</li>\r\n    <li>Charlie would remove character 'b' (at index 0) making S=\"c\"</li>\r\n</ul>\r\n<p>Hence, 'c' is the final character left.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: S = \"hacker\"\r\nOutput: e</code></pre>\r\n<p><strong>Explanation:</strong> (Explanation truncated in source image)</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>finalCharacter</code> in the editor below.</p>\r\n<p><code>finalCharacter</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>S</code>: A string composed of lowercase English letters.</li>\r\n</ul>\r\n<pre><code class='language-javascript'>char finalCharacter(string s) {\r\n    // Function body\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |S| &lt;= 10^6</code></li>\r\n    <li>String <code>S</code> consists only of English lowercase letters (a-z).</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_3oct",
        "company_id": 549
    },
    {
        "id": 1574,
        "title": "Minimum Operations to Process Packages",
        "problem_statement": "<h1>Minimum Operations to Process Packages</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An Amazon distribution specialist needs to process <code>n</code> packages from different distribution centers. The center of the <code>i<sup>th</sup></code> package is represented by an array <code>centers[i]</code>. The specialist is allowed to perform one operation at a time. Each operation is described below:</p>\r\n<ol>\r\n    <li>If the queue has two or more packages, the specialist can choose two packages <code>x</code> and <code>y</code> from the queue if they are from different distribution centers (i.e., <code>centers[x] != centers[y]</code>) and process both of them.</li>\r\n    <li>If the queue has one or more packages, the specialist can choose one package <code>x</code> from the queue and process it.</li>\r\n</ol>\r\n<p><strong>Note:</strong> After processing a package it gets removed from the queue, and the rest of the packages which are currently not processed come together keeping the order the same as before.</p>\r\n<p>Given <code>n</code> packages and an array <code>centers</code>, find the minimum number of operations that the specialist has to perform to process all of the packages.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findMinimumOperations</code> in the editor below.</p>\r\n<p><code>findMinimumOperations</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int centers[n]</code>: the distribution center of each package.</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of operations that the specialist has to perform to process all of the packages.</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'findMinimumOperations' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts INTEGER_ARRAY centers as parameter.\r\n */\r\n\r\nint findMinimumOperations(vector&lt;int&gt; centers) {\r\n\r\n}\r\n\r\nint main() {\r\n\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, centers = [1,3,1,2]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n=4</code> and <code>centers=[1, 3, 1, 2]</code>.</p>\r\n<p>The operations can be:</p>\r\n<ol>\r\n    <li>Choose packages from centers <code>1</code> and <code>3</code> (different centers). Remaining packages: <code>[1, 2]</code>. (1 operation)</li>\r\n    <li>Choose packages from centers <code>1</code> and <code>2</code> (different centers). Remaining packages: <code>[]</code>. (1 operation)</li>\r\n</ol>\r\n<p>The specialist needs to perform 2 operations to process all of the packages.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, centers = [9,5,9,9]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n=4</code> and <code>centers=[9, 5, 9, 9]</code>.</p>\r\n<p>The operations can be:</p>\r\n<ol>\r\n    <li>Choose packages from centers <code>9</code> and <code>5</code> (different centers). Remaining packages: <code>[9, 9]</code>. (1 operation)</li>\r\n    <li>Now, the remaining packages are from centers <code>[9, 9]</code>. Since both are from the same center, we cannot choose two packages in one operation. We must process them one by one. Choose one package from center <code>9</code>. Remaining packages: <code>[9]</code>. (1 operation)</li>\r\n    <li>Choose the last package from center <code>9</code>. Remaining packages: <code>[]</code>. (1 operation)</li>\r\n</ol>\r\n<p>The specialist needs to perform 3 operations to process all of the packages.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= centers[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_3oct",
        "company_id": 549
    },
    {
        "id": 1575,
        "title": "Maximum Data Flow",
        "problem_statement": "<h1>Maximum Data Flow</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As an engineer in Amazon's Data Infrastructure Team, you are tasked with optimizing how information flows through its network of processing nodes. You are given `n` processing nodes, and the bandwidth capability of each node is given in an integer array `bandwidth`.</p>\r\n<p>There are `streamCount` data channels that needs to be connected to two processing nodes, one as the main connection and the other as the secondary. Each data channel must utilize a unique pair of nodes for its connections.</p>\r\n<p>The `dataFlow` for each data channel is defined as the sum of the bandwidth of its main and secondary nodes.</p>\r\n<p>Given an integer array `bandwidth` and an integer `streamCount`, find the maximum total `dataFlow` that can be achieved by optimally selecting unique pair of connections for each data channel.</p>\r\n<p><strong>Note:</strong> A pair of nodes (x,y) is said to be unique if no other channel has selected the same pair. However, the pairs (y, x) and (x, y) are treated as different connections. It is also possible to select the same node for main and secondary connections, which means that (x,x) is a valid pair for the connection.</p>\r\n<p>Complete the function `determineMaxDataFlow` in the editor below.</p>\r\n<pre><code class='language-cpp'>long determineMaxDataFlow(vector&lt;int&gt; bandwidth, long streamCount)</code></pre>\r\n<p>The function has the following parameters:</p>\r\n<ul>\r\n    <li>`int bandwidth[n]`: array of bandwidth capability provided by each processing node.</li>\r\n    <li>`int streamCount`: the number of data channels that needs to be connected.</li>\r\n</ul>\r\n<p><strong>Returns:</strong> `long`: the maximum total dataFlow from the unique connections of node pairs.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: bandwidth = [6, 4, 7], streamCount = 4\r\nOutput: 52</code></pre>\r\n<p><strong>Explanation:</strong> The data channels can select their connections among the following 9 possible node pairs: [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]. (Assuming 1-based indexing of bandwidth array). However each data channel must select a unique pair of nodes. To achieve the maximum total dataFlow, the data channels can optimally choose the pairs [3, 3], [3, 1], [1, 3], [1, 1] to obtain the maximum sum of dataFlow = (7 + 7) + (7 + 6) + (6 + 7) + (6 + 6) = 52.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nbandwidth = [5, 4, 8, 4, 7]\r\nstreamCount = 6\r\nOutput: 86</code></pre>\r\n<p><strong>Explanation:</strong> The six pairs of processing nodes with the highest sum of dataFlow are: [3, 3], [3, 5], [5, 3], [5, 5], [3, 1], [1, 3]. (Assuming 1-based indexing) Thus total dataFlow will be calculated as: 16 (for [3, 3]) + 15 (for [3, 5]) + 15 (for [5, 3]) + 14 (for [5, 5]) + 13 (for [3, 1]) + 13 (for [1, 3]) = 86. Therefore, the total dataFlow = 86. Hence return 86 as answer.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nbandwidth = [14, 120, 8, 14]\r\nstreamCount = 4\r\nOutput: 626</code></pre>\r\n<p><strong>Explanation:</strong> The four pairs of processing nodes with the highest sum of dataFlow are: [2, 2], [2, 1], [2, 4], [1, 2] (Assuming 1-based indexing). The total dataFlow is calculated as: 240 (for [2, 2]) + 134 (for [2, 1]) + 134 (for [2, 4]) + 118 (for [1, 2]) = 626. Thus, the total dataFlow = 626. Hence return 626 as answer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= n <= 2 * 10^5`</li>\r\n    <li>`1 <= bandwidth[i] <= 2 * 10^3`</li>\r\n    <li>`1 <= streamCount <= min(10^3, n^2)`</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_3oct",
        "company_id": 549
    },
    {
        "id": 1576,
        "title": "determineMaxDataFlow",
        "problem_statement": "```html\r\n<h1>determineMaxDataFlow</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As an engineer in Amazon's Data Infrastructure Team, you are tasked with optimizing how information flows through its network of processing nodes.</p>\r\n<p>You are given n processing nodes, and the bandwidth capability of each node is given in an integer array named <code>bandwidth</code>.</p>\r\n<p>There are <code>streamCount</code> data channels that needs to be connected to two processing nodes, one as the main connection and the other as the secondary. Each data channel must utilize a unique pair of nodes for its connections.</p>\r\n<p>The <code>dataFlow</code> for each data channel is defined as the sum of the bandwidth of its main and secondary nodes.</p>\r\n<p>Given an integer array <code>bandwidth</code> and an integer <code>streamCount</code>, find the maximum total <code>dataFlow</code> that can be achieved by optimally selecting unique pair of connections for each data channel.</p>\r\n<p><strong>Note:</strong> A pair of nodes (x,y) is said to be unique if no other channel has selected the same pair. However, the pairs (y, x) and (x, y) are treated as different connections.</p>\r\n<p>It is also possible to select the same node for main and secondary connections, which means that (x,x) is a valid pair for the connection.</p>\r\n<p>Complete the function <code>determineMaxDataFlow</code> in the editor below.</p>\r\n<p>The function <code>determineMaxDataFlow</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int bandwidth[n]</code>: array of bandwidth capability provided by each processing node.</li>\r\n    <li><code>int streamCount</code>: the number of data channels that needs to be connected.</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>long</code>: the maximum total <code>dataFlow</code> from the unique connections of node pairs.</p>\r\n<pre><code class='language-javascript'>long determineMaxDataFlow(vector&lt;int&gt; bandwidth, long streamCount)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>bandwidth = [6, 4, 7]\r\nstreamCount = 4</code></pre>\r\n<p><strong>Explanation:</strong> The data channels can select their connections among the following 9 possible node pairs: [1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]. (Assuming 1-based indexing of bandwidth array). However each data channel must select a unique pair of nodes. To achieve the maximum total dataFlow, the data channels can optimally choose the pairs [3, 3], [3, 1], [1, 3], [1, 1] to obtain the maximum sum of dataFlow = (7 + 7) + (7 + 6) + (6 + 7) + (6 + 6) = 52.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nbandwidth = [5, 4, 8, 4, 7]\r\nstreamCount = 6\r\nOutput: 86</code></pre>\r\n<p><strong>Explanation:</strong> The six pairs of processing nodes with the highest sum of dataFlow are: [3, 3], [3, 5], [5, 3], [5, 5], [3, 1], [1, 3]. (Assuming 1-based indexing) Thus total dataFlow will be calculated as: 16 (for {3, 3}) + 15 (for {3, 5}) + 15 (for {5, 3}) + 14 (for {5, 5}) + 13 (for {3, 1}) + 13 (for {1, 3}) = 86. Therefore, the total dataFlow = 86. Hence return 86 as answer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= bandwidth[i] &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= streamCount &lt;= min(10^9, n^2)</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_3oct",
        "company_id": 549
    }
]