[
    {
        "id": 1063,
        "title": "String generation",
        "problem_statement": "<h1>String generation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string <code>S1</code> of length <code>L1</code> consisting of Latin uppercase alphabets only and a string <code>S2</code> of length <code>L2</code> consisting of characters 'T' and 'F' only.</p>\r\n<p>Generate a lexicographically smallest string <code>S</code> of length <code>(L1 + L2 - 1)</code> such that a substring of length <code>L1</code> in string <code>S</code> starting at index <code>i (0 &le; i < L2)</code> is equal to <code>S1</code> if and only if <code>i<sub>th</sub></code> element of <code>S2</code> is 'T' else not.</p>\r\n<p>If no such string can be generated, print \"-1\".</p>\r\n\r\n<h3>Notes</h3>\r\n<p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> if and only if one of the following holds:</p>\r\n<ul>\r\n    <li><code>a</code> is a prefix of <code>b</code>, but <code>a &ne; b</code>;</li>\r\n    <li>in the first position where <code>a</code> and <code>b</code> differ, the string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</li>\r\n</ul>\r\n<p>Find the lexicographically smallest string <code>S</code> which satisfies the given condition.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the <code>solve</code> function. This function takes the following 2 parameters and returns the answer.</p>\r\n<ul>\r\n    <li><code>S1</code>: Represents a string <code>S1</code></li>\r\n    <li><code>S2</code>: Represents a string <code>S2</code></li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code>, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains a string <code>S1</code>.</li>\r\n            <li>The second line contains a string <code>S2</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>For each test case, print a string <code>S</code> in a new line or <code>-1</code> if not possible.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 10<sup>2</sup></code></li>\r\n    <li><code>1 &le; |S1| &le; 10<sup>3</sup></code></li>\r\n    <li><code>1 &le; |S2| &le; 10<sup>3</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\nABCA\r\nTFFF\r\nOutput:\r\nABCAAAA</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given</p>\r\n<ul>\r\n    <li><code>S1 = 'ABCA'</code></li>\r\n    <li><code>S2 = 'TFFF'</code></li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<p><code>S = 'ABCAAAA'</code> is lexicographically smallest string that satisfies the given condition :-</p>\r\n<ul>\r\n    <li>Substring starting at index 0: <code>'ABCA'</code> is equal to <code>S1</code>. <code>S2<sub>0</sub> = 'T'</code>.</li>\r\n    <li>Substring starting at index 1: <code>'BCAAA'</code> is not equal to <code>S1</code>. <code>S2<sub>1</sub> = 'F'</code>.</li>\r\n    <li>Substring starting at index 2: <code>'CAAAA'</code> is not equal to <code>S1</code>. <code>S2<sub>2</sub> = 'F'</code>.</li>\r\n    <li>Substring starting at index 3: <code>'AAAAA'</code> is not equal to <code>S1</code>. <code>S2<sub>3</sub> = 'F'</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Barclays_30july",
        "company_id": 347
    },
    {
        "id": 1064,
        "title": "Insurance Policy",
        "problem_statement": "<h1>Insurance Policy</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An insurance company has created a new scheme that grants extra claims to people. All eligible people get 150% of their asked claim.</p>\r\n<p>To be eligible for the claim a person must satisfy the following conditions:</p>\r\n<ul>\r\n    <li>It is valid only for Life Insurance.</li>\r\n    <li>There must be no injury reported.</li>\r\n    <li>It should have a major incident severity.</li>\r\n    <li>The customer must be employed.</li>\r\n    <li>Lastly, the claim amount has to be less than 30 times the premium amount.</li>\r\n</ul>\r\n<p>You are given the table <code>insurance</code>.</p>\r\n<p>Write a query to find all the eligible people and the claim they will be granted.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>Table: <code>insurance</code></p>\r\n<pre><code class='language-text'>+-------------------+----------+--------------------------------------------------------------------------------+\r\n| Name              | Type     | Description                                                                    |\r\n+-------------------+----------+--------------------------------------------------------------------------------+\r\n| CUSTOMER_ID       | Int      | Represents the customer's id                                                   |\r\n| INSURANCE_TYPE    | String   | Represents the type of insurance that the customer had taken                   |\r\n| PREMIUM_AMOUNT    | Decimal  | Represents the premium (per month) being paid by the customer (in dollars)     |\r\n| CLAIM_AMOUNT      | Int      | Represents the amount of money requested by the customer as a claim (in dollars)|\r\n| EMPLOYMENT_STATUS | String   | Represents whether the customer is employed or not                             |\r\n| ANY_INJURY        | String   | Represents whether there was any injury that lead to the insurance claim being filed |\r\n| INCIDENT_SEVERITY | String   | Represents how severe the incident was that led to the claim being filed       |\r\n+-------------------+----------+--------------------------------------------------------------------------------+</code></pre>\r\n\r\n<h3>Output Format</h3>\r\n<p>Table: Output table should contain <code>CUSTOMER_ID</code> and <code>GRANT_AMOUNT</code>.</p>\r\n<pre><code class='language-text'>+---------------+----------+------------------------------------------------------+\r\n| Name          | Type     | Description                                          |\r\n+---------------+----------+------------------------------------------------------+\r\n| CUSTOMER_ID   | Int      | Represents the customer's id                         |\r\n| GRANT_AMOUNT  | Float    | Represents the amount of money (in dollars) granted to the customer |\r\n+---------------+----------+------------------------------------------------------+</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<p>Table: <code>insurance</code></p>\r\n<pre><code class='language-text'>+-------------+----------------+----------------+--------------+-------------------+-----------+-------------------+\r\n| CUSTOMER_ID | INSURANCE_TYPE | PREMIUM_AMOUNT | CLAIM_AMOUNT | EMPLOYMENT_STATUS | ANY_INJURY| INCIDENT_SEVERITY |\r\n+-------------+----------------+----------------+--------------+-------------------+-----------+-------------------+\r\n| 1           | Life           | 157.13         | 9000         | Y                 | Y         | Major             |\r\n| 2           | Property       | 141.71         | 26000        | Y                 | N         | Minor             |\r\n| 3           | Property       | 157.24         | 13000        | N                 | N         | Minor             |\r\n| 4           | Health         | 172.87         | 16000        | Y                 | N         | Major             |\r\n| 5           | Travel         | 88.53          | 3000         | N                 | Y         | Major             |\r\n| 6           | Life           | 87.02          | 2500         | N                 | N         | Major             |\r\n+-------------+----------------+----------------+--------------+-------------------+-----------+-------------------+</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+-------------+--------------+\r\n| CUSTOMER_ID | GRANT_AMOUNT |\r\n+-------------+--------------+\r\n| 6           | 3750.0       |\r\n+-------------+--------------+</code></pre>\r\n<p><strong>Explanation:</strong>\r\nLet's check the conditions for each customer:</p>\r\n<ul>\r\n    <li><strong>Customer 1:</strong>\r\n        <ul>\r\n            <li>INSURANCE_TYPE: Life (Valid)</li>\r\n            <li>ANY_INJURY: Y (Invalid - must be 'N')</li>\r\n            <li>Result: Not eligible.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Customer 2:</strong>\r\n        <ul>\r\n            <li>INSURANCE_TYPE: Property (Invalid - must be 'Life')</li>\r\n            <li>Result: Not eligible.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Customer 3:</strong>\r\n        <ul>\r\n            <li>INSURANCE_TYPE: Property (Invalid - must be 'Life')</li>\r\n            <li>Result: Not eligible.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Customer 4:</strong>\r\n        <ul>\r\n            <li>INSURANCE_TYPE: Health (Invalid - must be 'Life')</li>\r\n            <li>Result: Not eligible.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Customer 5:</strong>\r\n        <ul>\r\n            <li>INSURANCE_TYPE: Travel (Invalid - must be 'Life')</li>\r\n            <li>Result: Not eligible.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Customer 6:</strong>\r\n        <ul>\r\n            <li>INSURANCE_TYPE: Life (Valid)</li>\r\n            <li>ANY_INJURY: N (Valid)</li>\r\n            <li>INCIDENT_SEVERITY: Major (Valid)</li>\r\n            <li>EMPLOYMENT_STATUS: N (Valid)</li>\r\n            <li>CLAIM_AMOUNT (2500) &lt; 30 * PREMIUM_AMOUNT (30 * 87.02 = 2610.6) (Valid: 2500 &lt; 2610.6)</li>\r\n            <li>Result: Eligible. Grant amount = 150% of CLAIM_AMOUNT = 1.5 * 2500 = 3750.0</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Your SQL query must be able to print the sample output from the provided sample input. However, the query is run against multiple hidden test cases. Therefore, your query must pass these hidden test cases to solve the problem statement.</li>\r\n    <li>Time Limit: 5 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n    <li>Scoring: Score is assigned if any testcase passes</li>\r\n    <li>Allowed Languages: MySQL, PostgreSQL, MSSQL, Oracle_Db</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Barclays_30july",
        "company_id": 347
    }
]