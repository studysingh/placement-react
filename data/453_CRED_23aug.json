[
    {
        "id": 1310,
        "title": "Minimum Flips to Achieve Target",
        "problem_statement": "<h1>Minimum Flips to Achieve Target</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Start with an initial string of zeros. Choose any digit to flip. When a digit is flipped, its value and those to the right switch state between 0 and 1. Given a target string of binary digits, determine the minimum number of flips required to achieve the target.</p>\r\n<p>Complete the function `minimumFlips` in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li>`string target`: a string of 0s and 1s to match.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li>`int`: the minimum number of flips needed to obtain the target string.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: target = '0011'\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The number of digits is length(target)=4. Starting with `0000`, flip the 3rd digit (index 2) to obtain the desired state `0011` after 1 flip.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: target = '1010'\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Starting with `0000`, flip the 4th, 3rd, 2nd and 1st digits in sequence to produce `0000` -> `0001` -> `0010` -> `0101` -> `1010` after 4 operations.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= length of target <= 10^5`</li>\r\n    <li>`0 <= target[i] <= 1`</li>\r\n    <li>The target string consists of digits 0 and 1.</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>/*\r\n * Complete the 'minimumFlips' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts STRING target as parameter.\r\n */\r\n\r\nint minimumFlips(string target) {\r\n\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "CRED_23aug",
        "company_id": 453
    },
    {
        "id": 1311,
        "title": "Minimum Time for Food Deliveries",
        "problem_statement": "<h1>Minimum Time for Food Deliveries</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A food delivery app is implementing a feature allowing delivery agents to handle multiple orders simultaneously. The city's road network is represented as a graph with the following components:</p>\r\n<ul>\r\n    <li><code>connection_nodes</code> junctions (numbered from 0)</li>\r\n    <li><code>m</code> bidirectional roads connecting these junctions</li>\r\n    <li>Each road between junctions <code>connection_from[i]</code> and <code>connection_to[i]</code> has a travel time of <code>connection_weight[i]</code>.</li>\r\n</ul>\r\n<p>There are <code>k</code> different orders to be delivered, each at a unique location. The delivery agent starts at junction 0, must complete deliveries at all <code>k</code> locations in any order, and then return to junction 0.</p>\r\n<p>Calculate the minimum time needed to complete all deliveries and return to the starting point. If it is impossible to complete the deliveries, return -1.</p>\r\n\r\n<p><strong>Example (Illustrative):</strong></p>\r\n<p>Consider <code>connection_nodes = 3</code>, <code>m = 3</code>, <code>connection_from = [0, 1, 0]</code>, <code>connection_to = [1, 2, 2]</code>, <code>connection_cost = [10, 20, 50]</code> and <code>deliveries = [1, 2]</code>.</p>\r\n<p>There are three junctions and three roads with associated travel times of 10, 20, and 50. Two orders need to be delivered at locations 1 and 2. The agent can travel along this path: 0 -> 1 -> 2 -> 0. This gives the minimum total travel time of 10 + 20 + 20 + 10 = 60.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinimumTime</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int connection_nodes</code>: the number of junctions</li>\r\n    <li><code>vector&lt;int&gt; connection_from</code>: the first node of each connection</li>\r\n    <li><code>vector&lt;int&gt; connection_to</code>: the second node of each connection</li>\r\n    <li><code>vector&lt;int&gt; connection_weight</code>: the cost of each connection</li>\r\n    <li><code>vector&lt;int&gt; deliveries</code>: the delivery locations</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'getMinimumTime' function below.\r\n *\r\n * The function is expected to return a LONG_INTEGER.\r\n * The function accepts following parameters:\r\n *  1. WEIGHTED_INTEGER_GRAPH connection\r\n *  2. INTEGER_ARRAY deliveries\r\n */\r\n\r\n/*\r\n * For the weighted graph, &lt;name&gt;:\r\n * 1. The number of nodes is &lt;name&gt;_nodes.\r\n * 2. The number of edges is &lt;name&gt;_edges.\r\n * 3. An edge exists between &lt;name&gt;_from[i] and &lt;name&gt;_to[i].\r\n * The weight of the edge is &lt;name&gt;_weight[i].\r\n */\r\n\r\nlong getMinimumTime(int connection_nodes, std::vector&lt;int&gt; connection_from, std::vector&lt;int&gt; connection_to, std::vector&lt;int&gt; connection_weight, std::vector&lt;int&gt; deliveries) {\r\n    // Function body would go here\r\n}\r\n</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt;= connection_from[i], connection_to[i] &lt; connection_nodes</code></li>\r\n    <li>There are no multiple edges or self-loops.</li>\r\n    <li>The number of nodes is <code>connection_nodes</code>.</li>\r\n    <li>The number of edges is <code>m</code>.</li>\r\n    <li>An edge exists between <code>connection_from[i]</code> and <code>connection_to[i]</code>. The weight of the edge is <code>connection_weight[i]</code>.</li>\r\n    <li>The first line contains two integers, <code>connection_nodes</code> and <code>m</code>, the number of junctions and the number of connections.</li>\r\n    <li>Each of the next <code>m</code> lines contains three integers <code>connection_from[i]</code>, <code>connection_to[i]</code>, and <code>connection_weight[i]</code>.</li>\r\n    <li>The next line contains an integer <code>k</code>, the number of delivery locations.</li>\r\n    <li>Each of the next <code>k</code> lines contains an integer, <code>deliveries[i]</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nconnection_nodes = 5, m = 6\r\nconnection_from = [0, 0, 1, 3, 2, 1]\r\nconnection_to = [1, 4, 4, 2, 4, 2]\r\nconnection_weight = [10, 1, 1, 4, 1, 30]\r\nk = 2\r\ndeliveries = [1, 3]\r\nOutput: 19</code></pre>\r\n<p><strong>Explanation:</strong> Two orders need to be delivered at locations 1 and 3. The agent can travel along this path: 0 -> 4 -> 3 -> 4 -> 0. This gives the minimum total travel time of 3 + 4 + 4 + 5 + 3 = 19.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nconnection_nodes = 3, m = 3\r\nconnection_from = [0, 1, 1]\r\nconnection_to = [1, 2, 2]\r\nconnection_weight = [10, 30, 0]\r\nk = 2\r\ndeliveries = [1, 2]\r\nOutput: 40</code></pre>\r\n<p><strong>Explanation:</strong> Two orders need to be delivered at locations 1 and 2",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "CRED_23aug",
        "company_id": 453
    }
]