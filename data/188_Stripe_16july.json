[
    {
        "id": 563,
        "title": "Payment Intent System",
        "problem_statement": "<h1>Payment Intent System</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p><strong>Background</strong></p>\r\n<p>Stripe processes billions of dollars of payments to businesses every day through dozens of different payment methods like cards, bank debits, and even paper cheques.</p>\r\n<p>We don't want merchants (the businesses who use Stripe to accept payments) to have to worry about the details for each specific payment method. For example, for many payment methods, payments are not completed instantly and can take a few days to process and be confirmed or fail, while others are processed much more quickly. Stripe abstracts this payment flow with a simple state machine object called a Payment Intent.</p>\r\n<p><strong>What is a Payment Intent?</strong></p>\r\n<p>A Payment Intent tracks a payment through its flow from Initialization to processing to confirmation. We model this flow as a state machine: an abstract object that can exist in one of a number of states and transition between states.</p>\r\n<ul>\r\n    <li><strong>REQUIRES_ACTION</strong>\r\n        <ul>\r\n            <li>The initial state of a Payment Intent upon creation. Can transition to PROCESSING.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>PROCESSING</strong>\r\n        <ul>\r\n            <li>The customer has attempted to pay but the attempt has not yet succeeded or failed. Can transition to either REQUIRES_ACTION or COMPLETED.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>COMPLETED</strong>\r\n        <ul>\r\n            <li>The attempt to pay succeeded and the Payment Intent amount was added to the merchant's balance.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p><strong>Your task</strong></p>\r\n<p>You will implement a function that executes a chronologically ordered list of commands to create and manage Payment Intents for different merchants and then returns the account balances for different merchants after executing all commands. The list should be sorted by merchant ID in ascending alphabetical order.</p>\r\n<p><strong>Input:</strong></p>\r\n<p>You will receive a chronologically ordered list of commands in the form \"INIT m1 0\", \"CREATE p1 m1 100\" where each command is a single string. You will also receive the part number, corresponding to the parts in the problem description. The commands you need to support are described below.</p>\r\n<p><strong>Output:</strong></p>\r\n<p>A list of merchant balances in the form \"m1 100\", \"m2 200\" representing the balance for each merchant after executing all commands. The list should be sorted by merchant ID in ascending alphabetical order.</p>\r\n\r\n<h2>Part 1: Good Intentions</h2>\r\n<p>To build the initial version of our system, we will support a few basic commands for initializing a merchant, creating a Payment Intent, attempting a Payment Intent, and succeeding a Payment Intent.</p>\r\n<p><strong>Commands</strong></p>\r\n<ul>\r\n    <li><strong>INIT &lt;merchant_id&gt; &lt;starting_balance&gt;</strong>\r\n        <ul>\r\n            <li>Initializes a merchant with a unique identifier string and starting balance (the amount of money in their account).</li>\r\n            <li>If a merchant with the given identifier has already been created, this command should do nothing.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>CREATE &lt;payment_intent_id&gt; &lt;merchant_id&gt; &lt;amount&gt;</strong>\r\n        <ul>\r\n            <li>Creates a Payment Intent for a merchant with a given amount. After creation, the state of the Payment Intent should be REQUIRES_ACTION.</li>\r\n            <li>If a Payment Intent with the given identifier already exists, or if a merchant with the given identifier does not exist, or if the amount is negative, this command should do nothing.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>ATTEMPT &lt;payment_intent_id&gt;</strong>\r\n        <ul>\r\n            <li>Transitions a Payment Intent with a given identifier from the REQUIRES_ACTION state to the PROCESSING state.</li>\r\n            <li>If no Payment Intent with the given identifier exists, or if the state of the Payment Intent is not REQUIRES_ACTION, this command should do nothing.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>SUCCEED &lt;payment_intent_id&gt;</strong>\r\n        <ul>\r\n            <li>Transitions a Payment Intent with a given identifier from the PROCESSING state to the COMPLETED state.</li>\r\n            <li>If no Payment Intent with the given identifier exists, or if the state of the Payment Intent is not PROCESSING, this command should do nothing.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Part 2: Change is good</h2>\r\n<p>The initial version of our system looks good, but it turns out merchants also need to be able to update the amount of initialized Payment Intents. This might happen if a customer begins to check out but then decides to change the items in their shopping cart and thus the amount of the payment. Let's add that to our system!</p>\r\n<p><strong>Commands</strong></p>\r\n<ul>\r\n    <li><strong>UPDATE &lt;payment_intent_id&gt; &lt;new_amount&gt;</strong>\r\n        <ul>\r\n            <li>Updates the monetary amount of an existing Payment Intent in the REQUIRES_ACTION state. This does not transition the state of the Payment Intent.</li>\r\n            <li>If no Payment Intent with the given identifier exists, or if the Payment Intent is not in the REQUIRES_ACTION state, or if the new amount is negative, this command should do nothing.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Part 3: Accepting failure</h2>\r\n<p>The rest of the team is thrilled with our progress building Stripe's new Payment Intent processor, but they pointed out a few cases we should handle before releasing the system to the public.</p>\r\n<p>First, payments don't always succeed and can fail for a variety of reasons like a card network declining a transaction or a bank account not having sufficient funds to be debited. Second, even after payments have succeeded, customers need to be able to request refunds from merchants.</p>\r\n<p>Let's update our implementation to handle two new commands: FAIL and REFUND.</p>\r\n<p><strong>Commands</strong></p>\r\n<ul>\r\n    <li><strong>FAIL &lt;payment_intent_id&gt;</strong>\r\n        <ul>\r\n            <li>Fails a payment Intent in the PROCESSING state, transitioning it from PROCESSING to REQUIRES_ACTION. This occurs when the customer's payment was declined.</li>\r\n            <li>If no Payment Intent with the given identifier exists, or if the Payment Intent is not in the PROCESSING state, this command should do nothing.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>REFUND &lt;payment_intent_id&gt;</strong>\r\n        <ul>\r\n            <li>Refunds a payment Intent in the COMPLETED state, transitioning it from COMPLETED to REQUIRES_ACTION. This occurs when a customer requests a refund.</li>\r\n            <li>If no Payment Intent with the given identifier exists, or if the Payment Intent is not in the COMPLETED state, this command should do nothing.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nINIT m1 0\r\nINIT m2 10\r\nCREATE p1 m1 50\r\nATTEMPT p1\r\nSUCCEED p1\r\nOutput:\r\nm1 50\r\nm2 10</code></pre>\r\n<p><strong>Explanation:</strong> Let's look at what happened for each command:</p>\r\n<ul>\r\n    <li>INIT m1 0 initializes merchant m1 with a starting balance of 0</li>\r\n    <li>INIT m2 10 initializes merchant m2 with a starting balance of 10</li>\r\n    <li>CREATE p1 m1 50 creates a Payment Intent p1 for merchant m1 with an amount of 50 and initial state of REQUIRES_ACTION</li>\r\n    <li>ATTEMPT p1 transitions p1 from REQUIRES_ACTION to PROCESSING</li>\r\n    <li>SUCCEED p1 transitions p1 from PROCESSING to COMPLETED and increments merchant m1's balance by 50</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nINIT m1 0\r\nCREATE p1 m1 50\r\nUPDATE p1 100\r\nATTEMPT p1\r\nSUCCEED p1\r\nOutput:\r\nm1 100</code></pre>\r\n<p><strong>Explanation:</strong> While the Payment Intent p1 was initially created with an amount of 50, this was then updated to 100 before being attempted then succeeded. Therefore, merchant m1 has a balance of 100 after all commands have been processed.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Stripe_16july",
        "company_id": 188
    }
]