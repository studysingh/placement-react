[
    {
        "id": 1487,
        "title": "Valid keys",
        "problem_statement": "<h1>Valid keys</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A cyber security firm has discovered a new type of encryption key being used by a group of hackers. The encryption key will be a valid key, which is a number that has exactly 3 factors (or divisors). For example, 4 is a valid key because it has exactly 3 factors: 1, 2, and 4. But 6 is not a valid key because it has 4 factors: 1, 2, 3, and 6.</p>\r\n<p>Given an array <code>keys</code> of length <code>n</code>, find the number of valid keys in the range <code>[1, keys[i]]</code>, both inclusive, for each <code>0 <= i < n</code>.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>a is called a divisor of b if there is an integer c such that a * c = b.</li>\r\n    <li>Only positive integers are taken into account for counting divisors.</li>\r\n</ul>\r\n\r\n<p>Complete the function <code>getValidKeyCount</code> in the editor below.</p>\r\n<p>The function <code>getValidKeyCount</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>vector<long long> keys</code>: an array of integers.</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>vector<int></code>: an array of integers containing the answer for each query.</li>\r\n</ul>\r\n<pre><code class='language-cpp'>vector<int> getValidKeyCount(vector<long long> keys) {\r\n    // Function body to be implemented\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: keys = [5, 11]\r\nOutput: [1, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For <code>keys[0] = 5</code>, the only valid key in the range <code>[1, 5]</code> is 4 (factors: 1, 2, 4). The count is 1.</li>\r\n    <li>For <code>keys[1] = 11</code>, the valid keys in the range <code>[1, 11]</code> are 4 (factors: 1, 2, 4) and 9 (factors: 1, 3, 9). The count is 2.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: keys = [10, 15]\r\nOutput: [2, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For <code>keys[0] = 10</code>, the valid keys in the range <code>[1, 10]</code> are 4 and 9. The count is 2.</li>\r\n    <li>For <code>keys[1] = 15</code>, the valid keys in the range <code>[1, 15]</code> are 4 and 9. The count is 2.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= keys[i] <= 2.5 x 10^13</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_23sep",
        "company_id": 521
    },
    {
        "id": 1488,
        "title": "API Rate Limiter Implementation",
        "problem_statement": "<h1>API Rate Limiter Implementation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are building a rate limiter for an API service. Given a list of requests, where each request has a user ID and a timestamp, determine if the request should be allowed. A request is allowed only if the user has made fewer than <code>k</code> requests in the past 1-minute window.</p>\r\n<p>The function <code>getAllowedRequests</code> will take three inputs:</p>\r\n<ul>\r\n<li><code>int user[n]</code>: the IDs of the users</li>\r\n<li><code>int timestamp[n]</code>: the timestamp of requests in seconds</li>\r\n<li><code>int k</code>: the allowed number of requests in any 1-minute window</li>\r\n</ul>\r\n<p>The function should return an array of integers where the <code>i<sup>th</sup></code> element is <code>1</code> if the <code>i<sup>th</sup></code> request is allowed; otherwise, it should be <code>0</code>.</p>\r\n<p><strong>Note:</strong> If a request is not allowed due to the rate limit, it is not counted as a valid request for future rate limit counting.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, user = [1,1,1], timestamp = [1,10,65], k = 2\r\nOutput: [1,1,0]</code></pre>\r\n<p><strong>Explanation:</strong> The rate limit allows a user to make at most <code>k=2</code> requests in any 1-minute (60-second) window.</p>\r\n<ul>\r\n<li><strong>Request 0:</strong> User ID 1, Timestamp 1.\r\n   Requests by User 1 in <code>[1-60]</code> window before this request: None.\r\n   Count if processed: 1. Allowed: 1.</li>\r\n<li><strong>Request 1:</strong> User ID 1, Timestamp 10.\r\n   Requests by User 1 in <code>[10-60]</code> window before this request: <code>[Timestamp 1]</code>.\r\n   Count if processed: 2. Allowed: 1.</li>\r\n<li><strong>Request 2:</strong> User ID 1, Timestamp 65.\r\n   Requests by User 1 in <code>[65-60=5, 65]</code> window before this request: <code>[Timestamp 10]</code>. (Timestamp 1 is outside the window <code>[5, 65]</code>).\r\n   If this request were allowed, the total count for User 1 in the window <code>[5, 65]</code> would be 2 (from Timestamp 10) + 1 (this request) = 3, which exceeds <code>k=2</code>.\r\n   Therefore, this request is not allowed: 0.</li>\r\n</ul>\r\n<p>Hence, the answer is <code>[1, 1, 0]</code>. The third request would have been allowed if it had arrived at timestamp 66 (because then timestamp 10 would be outside the 60-second window <code>[6, 66]</code>).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n<li><code>1 &le; user[i] &le; n</code></li>\r\n<li><code>1 &le; timestamp[i] &le; 10<sup>9</sup></code></li>\r\n<li><code>1 &le; k &le; n</code></li>\r\n<li>It is guaranteed that the array <code>timestamp</code> is sorted in non-decreasing order.</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>vector&lt;int&gt; getAllowedRequests(vector&lt;int&gt; user, vector&lt;int&gt; timestamp, int k) {\r\n    // Function body to be implemented\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_23sep",
        "company_id": 521
    },
    {
        "id": 1489,
        "title": "System Load Monitor",
        "problem_statement": "<h1>System Load Monitor</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Identify time periods when a system experiences high load based on a rolling average calculation. For each minute in the monitoring period, calculate the average load over the most recent window of minutes. If this average exceeds the specified threshold, include that minute in your results.</p>\r\n<p>The function <code>detectHighLoadWindows</code> will take three inputs:</p>\r\n<ul>\r\n    <li><code>int loads[]</code>: system load at each minute i (0-based)</li>\r\n    <li><code>int windowSize</code>: size of the rolling window in minutes</li>\r\n    <li><code>int threshold</code>: average load threshold to compare against</li>\r\n</ul>\r\n<p>The function returns a sorted array of minute indices where high load was detected, or an empty array if no such minutes exist.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nloads = [8, 14, 5, 17]\r\nwindowSize = 2\r\nthreshold = 10</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Let's analyze all possible windows of size 2:</p>\r\n<table border=\"1\">\r\n    <thead>\r\n        <tr>\r\n            <th>Window Range</th>\r\n            <th>Average Load</th>\r\n            <th>Is the average greater than threshold?</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>[0, 1]</td>\r\n            <td>(8 + 14) / 2 = 11</td>\r\n            <td>Yes</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[1, 2]</td>\r\n            <td>(14 + 5) / 2 = 9.5</td>\r\n            <td>No</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[2, 3]</td>\r\n            <td>(5 + 17) / 2 = 11</td>\r\n            <td>Yes</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>At minute 0, only one value is available, which is less than the window size, so it is skipped. The problem asks for minute indices where high load was detected, corresponding to the end of the window.</p>\r\n<pre><code class='language-text'>Output: [1, 3]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= windowSize <= n</code></li>\r\n    <li><code>1 <= loads[i], threshold <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_23sep",
        "company_id": 521
    },
    {
        "id": 1490,
        "title": "Infection Sequences",
        "problem_statement": "<h1>Infection Sequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a town with n houses aligned in a straight line, numbered from 1 to n from left to right, a virus is spreading from m initially infected houses. Each day, an infected house spreads the virus to its immediate uninfected neighbors.</p>\r\n<p>Specifically, if house number X is infected on day I, then houses X+1 and X-1 will become infected on day I+1 if they are not already infected. Eventually, all houses will become infected. The sequence in which the houses get infected is called the infection sequence.</p>\r\n<p>Given an integer n and an integer array infectedHouses representing the initially infected houses, determine the total number of distinct infection sequences possible, modulo (10<sup>9</sup> + 7).</p>\r\n<p>Complete the function <code>getInfectionSequencesCount</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of houses</li>\r\n    <li><code>int infectedHouses[m]</code>: the currently infected houses</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of infection sequences modulo (10<sup>9</sup> + 7)</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 5\r\ninfectedHouses = [1, 5]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initially, houses 1 and 5 are infected.</p>\r\n<p>On Day 1, both houses numbers 2 and 4 become infected.</p>\r\n<p>On Day 2, house number 3 is infected. Now all the houses are infected.</p>\r\n<p>There is no way that house number 3 can be infected before houses 2 and 4. The 2 possible infection sequences are [2,4,3] and [4,2,3].</p>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>2</code></pre>\r\n<p><strong>Explanation:</strong> The two possible infection sequences are [2,4,3] and [4,2,3]. Return 2 modulo (10<sup>9</sup>+7) = 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= m <= n-1</code></li>\r\n    <li><code>1 <= infectedHouses[i] <= n</code></li>\r\n    <li>All elements of the array are distinct.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_23sep",
        "company_id": 521
    }
]