[
    {
        "id": 904,
        "title": "Book Cover Problem",
        "problem_statement": "<h1>Book Cover Problem</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are a book collector aiming to sell your collection of <code>A</code> books. The books are arranged in a line with the <code>i</code>th book to the left of the <code>(i + 1)</code>th book for <code>1 &lt;= i &lt; A - 1</code>. The thickness of each book is represented by an array <code>B[]</code> representing the thickness of the <code>i</code>th book, and each book has a unique thickness.</p>\r\n<p>To enhance the appeal of your books, you can apply a special protective cover to some of them. However, this cover is expensive, so you want to minimize its use while ensuring the following conditions are met:</p>\r\n<ul>\r\n    <li>You should apply the protective cover to at least one book.</li>\r\n    <li>If you apply the cover to the <code>i</code>th book, then you must also apply it to each book that is thicker than the <code>i</code>th book.</li>\r\n    <li>There must exist at least one subarray (contiguous segment) of books of size at least <code>C</code>, such that the number of books with the protective cover is greater than the number of books without the cover.</li>\r\n</ul>\r\n<p>Your task is to determine the smallest number of books on which you should apply the protective cover to satisfy the above conditions.</p>\r\n<p>The function signature is:</p>\r\n<pre><code class='language-cpp'>int solution(int a, vector&lt;int&gt; b, int c)</code></pre>\r\n<p>Where:</p>\r\n<ul>\r\n    <li><code>a</code> (integer) is the number of books.</li>\r\n    <li><code>b</code> (<code>vector&lt;int&gt;</code>) is an array representing the thickness of the books.</li>\r\n    <li><code>c</code> (integer) is the minimum length of the subarray according to the condition defined in the problem statement.</li>\r\n</ul>\r\n<p>Return a single integer representing the minimum number of books on which you will apply the protective cover.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = 5, B = [2, 3, 5, 1, 4], C = 3\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>We can apply the protective cover on books at index 3 and at index 5 (1-based indexing).</li>\r\n    <li>Now, the subarray [3, 5] is of size at least 3, and it has a greater number of books with the protective cover compared to books without the cover.</li>\r\n    <li>We can prove that this is the smallest number of books on which we can apply the protective cover.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = 4, B = [2, 3, 1, 4], C = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>We can apply the protective cover on books at index 2 and 4 (1-based indexing).</li>\r\n    <li>Now, the subarray [2, 4] is of size at least 2, and it has a greater number of books with the protective cover compared to books without the cover.</li>\r\n    <li>We can prove that this is the smallest number of books on which we can apply the protective cover.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= A &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= B[i] &lt;= A</code> (for <code>1 &lt;= i &lt;= A</code>)</li>\r\n    <li><code>B[i] != B[j]</code> for <code>i != j</code> (all book thicknesses are unique)</li>\r\n    <li><code>1 &lt;= C &lt;= A</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_10july",
        "company_id": 281
    },
    {
        "id": 905,
        "title": "Binary Search Failure Probability",
        "problem_statement": "<h1>Binary Search Failure Probability</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given the pseudocode below to find a target number <code>i</code> between <code>l</code> and <code>r</code> (both inclusive):</p>\r\n<pre><code class='language-javascript'>while (l < r) {\r\n    int mid = (l + r) / 2;\r\n    if (mid < i) r = mid;\r\n    else if (i < mid) l = mid + 1;\r\n    else {\r\n        print(\"Found\");\r\n        break;\r\n    }\r\n}</code></pre>\r\n<p>You are required to answer <code>q</code> queries, where in each query, you will be provided with values <code>l</code> and <code>r</code>. For each query, determine the following: What is the probability that the above code will fail to print \"Found\" when any value <code>i</code> (where <code>l <= i <= r</code> is chosen)? Express this probability as an integer where the fraction is <code>P / Q</code> and <code>gcd(P, Q) = 1</code>. You should compute <code>P * Q^-1 modulo 10^9 + 7</code>, where <code>Q^-1</code> denotes the multiplicative inverse of <code>Q</code> modulo <code>10^9 + 7</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = [[2, 9]]\r\nOutput: [500000004]</code></pre>\r\n<p><strong>Explanation:</strong> The numbers 2, 4, 6, 9 will result in the code failing to print \"Found\". Thus, the probability is 4 / 8 = 1 / 2, hence 1 * 2^-1 = 500000004.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = [[10, 10], [10, 12]]\r\nOutput: [1, 666666672]</code></pre>\r\n<p><strong>Explanation:</strong> Since <code>l</code> and <code>r</code> are equal in the first query, the loop won't run, so the probability is 1. Only 11 will be found in the second query, so the probability is 666666672.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= A[i] <= 10^6</code></li>\r\n    <li><strong>Input Format:</strong> The first argument is a 2D integer array A, denoting the queries <code>l</code> and <code>r</code> in each row.</li>\r\n    <li><strong>Output Format:</strong> Return an integer array denoting the probability in the form <code>P * Q^-1 modulo 10^9 + 7</code> for each query.</li>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li>Input array type: <code>array.array.integer a</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_10july",
        "company_id": 281
    },
    {
        "id": 906,
        "title": "Array Subarray Bitwise Updates",
        "problem_statement": "<h1>Array Subarray Bitwise Updates</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>arr</code> consisting of <code>N</code> integers. You are also given <code>q</code> queries. Each query consists of three integers <code>x</code>, <code>y</code>, and <code>z</code>.</p>\r\n<p>For each query:</p>\r\n<ul>\r\n    <li>Find the largest contiguous subarray <code>b</code> starting from index <code>x</code> whose <code>y</code>th bit is set.</li>\r\n    <li>Update each of its elements <code>bj</code> with <code>bj ^ z</code>.</li>\r\n</ul>\r\n<p>Where <code>^</code> denotes the bitwise XOR operator.</p>\r\n<p>Your task is to print the total number of updates performed after <code>q</code> queries.</p>\r\n<p>Given a 2D array <code>mat</code> that represents the queries:</p>\r\n<ul>\r\n    <li><code>mat[i][0] = X</code></li>\r\n    <li><code>mat[i][1] = Y</code></li>\r\n    <li><code>mat[i][2] = Z</code></li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>First argument is an integer array <code>arr</code>.</li>\r\n    <li>Second argument contains 2D integer array <code>mat</code>.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return the number of updates performed after <code>q</code> queries.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [2, 4, 3, 5, 4]\r\nmat = [[3, 1, 4], [2, 3, 7]]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>1st Query (3, 1, 4):</p>\r\n<ul>\r\n    <li>(3,5) is the largest subarray having the 1st-bit set and starting with index 3.</li>\r\n    <li>Array becomes <code>[2, 4, 3 ^ 4, 5 ^ 4, 4 ^ 4] = [2, 4, 7, 1, 0]</code>.</li>\r\n</ul>\r\n<p>2nd Query (2, 3, 7):</p>\r\n<ul>\r\n    <li>(4) is the largest subarray having the 3rd-bit set and starting with index 2.</li>\r\n    <li>Array becomes <code>[2, 4, 7 ^ 7, 1, 0] = [2, 4, 0, 1, 0]</code>.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [1, 4]\r\nmat = [[2, 1, 3]]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>1st Query (2, 1, 3):</p>\r\n<ul>\r\n    <li>The length of the maximum contiguous subarray that satisfies the given condition is 0, so there is no change in the array.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^5</code></li>\r\n    <li><code>0 <= arr[i] <= 10^9</code></li>\r\n    <li><code>1 <= X <= N</code></li>\r\n    <li><code>1 <= Y <= 30</code></li>\r\n    <li><code>0 <= Z <= 10^9</code></li>\r\n    <li><code>1 <= q <= 10^5</code></li>\r\n    <li>Execution time limit: 1 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>int solution(vector<int> arr, vector<vector<int>> mat) {\r\n    // Function body\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_10july",
        "company_id": 281
    },
    {
        "id": 907,
        "title": "Count Valid Arrays",
        "problem_statement": "<h1>Count Valid Arrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An array is considered valid if there is no subarray longer than B where all elements are identical. Additionally, the array can only contain integers from the range [1, C]. Determine the number of valid arrays of length A. Since the result can be very large, return it modulo (10<sup>9</sup>+7).</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first argument is an integer A.</li>\r\n    <li>The second argument is an integer B.</li>\r\n    <li>The third argument is an integer C.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>Return an integer representing the number of valid arrays.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = 3, B = 1, C = 3\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> The valid arrays are: [1, 2, 1], [1, 2, 3], [1, 3, 1], [1, 3, 2], [2, 1, 2], [2, 1, 3], [2, 3, 1], [2, 3, 2], [3, 1, 2], [3, 1, 3], [3, 2, 1], [3, 2, 3].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = 3, B = 3, C = 2\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> All possible arrays of length 3 are valid arrays.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; A &le; 10<sup>9</sup></li>\r\n    <li>1 &le; B &le; min(50, A)</li>\r\n    <li>1 &le; C &le; 10<sup>5</sup></li>\r\n</ul>\r\n\r\n<h2>Platform Specifics</h2>\r\n<ul>\r\n    <li>[execution time limit] 2 seconds (cpp)</li>\r\n    <li>[memory limit] 1 GB</li>\r\n    <li>[input] integer64 a</li>\r\n    <li>[input] integer b</li>\r\n    <li>[input] integer c</li>\r\n    <li>[output] integer64</li>\r\n</ul>\r\n\r\n<h2>C++ Syntax Tips</h2>\r\n<pre><code class='language-cpp'>// Prints help message to the console\r\n// Returns a string\r\nstring helloWorld(string name) {\r\n    cout &lt;&lt; \"This prints to the console when you Run Tests\" &lt;&lt; endl;\r\n    return \"Hello, \" + name;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Trilogy_10july",
        "company_id": 281
    }
]