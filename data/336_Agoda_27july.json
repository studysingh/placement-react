[
    {
        "id": 1036,
        "title": "Longest Uninterrupted Process Run",
        "problem_statement": "<h1>Longest Uninterrupted Process Run</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are analyzing CPU usage logs in a system where only one process runs at a time. There are 26 scheduled processes with IDs from 0 to 25, corresponding to characters 'a' through 'z'. The system starts running at time 0.</p>\r\n<p>Only one process runs at a time, with the next beginning execution immediately after the previous one ends. Given the list of logs, where each entry is processNumber/endTime representing that the process with that ID ended at endTime. Represent a function that determines which process had the longest single uninterrupted run. Consecutive runs of the same process are treated as separate.</p>\r\n<p>The function <code>findLongestRun</code> will take the following input:</p>\r\n<ul>\r\n    <li><code>runLogs</code>: a 2D array of size n containing pairs of (processNumber, endTime)</li>\r\n</ul>\r\n<p>The function should return the character ID of the process with the longest single run.</p>\r\n<pre><code class='language-javascript'>char findLongestRun(vector&lt;vector&lt;int&gt;&gt; runLogs)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: runLogs = [[0, 3], [2, 5], [0, 9], [1, 15]]</code></pre>\r\n<p><strong>Explanation:</strong> In the example, the runs are as follows:</p>\r\n<ol>\r\n    <li>Process 0 runs from T = 0 to T = 3, i.e., for 3 units</li>\r\n    <li>Process 2 runs from T = 3 to T = 5, i.e., for 2 units</li>\r\n    <li>Process 0 runs from T = 5 to T = 9, i.e., for 4 units</li>\r\n    <li>Process 1 runs from T = 9 to T = 15, i.e., for 6 units</li>\r\n</ol>\r\n<p>The longest single run of a process is 6 units by process 1.</p>\r\n<pre><code class='language-text'>Output: b</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: runLogs = [[0, 2], [1, 3], [0, 7]]</code></pre>\r\n<p><strong>Explanation:</strong> The time slots are as follows:</p>\r\n<ol>\r\n    <li>Process 0 runs for 2 - 0 = 2 units</li>\r\n    <li>Process 1 runs for 3 - 2 = 1 unit</li>\r\n    <li>Process 0 runs for 7 - 3 = 4 units</li>\r\n</ol>\r\n<p>The longest execution is 4 units by process 0, ID = 'a'.</p>\r\n<pre><code class='language-text'>Output: a</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: runLogs = [[0, 1], [0, 3], [4, 5], [5, 6], [4, 10]]</code></pre>\r\n<p><strong>Explanation:</strong> The time slots are as follows:</p>\r\n<ol>\r\n    <li>Process 0 runs for 1 - 0 = 1 unit</li>\r\n    <li>Process 0 runs for 3 - 1 = 2 units</li>\r\n    <li>Process 4 runs for 5 - 3 = 2 units</li>\r\n    <li>Process 5 runs for 6 - 5 = 1 unit</li>\r\n    <li>Process 4 runs for 10 - 6 = 4 units</li>\r\n</ol>\r\n<p>The longest execution time is of 4 units by process 4 whose ID = 'e'. Note that the first two executions of process 0 are treated as separate.</p>\r\n<pre><code class='language-text'>Output: e</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt;= runLogs[i][0] &lt;= 25</code> (process ID)</li>\r\n    <li><code>0 &lt;= runLogs[i][1] &lt;= 10^9</code> (end time)</li>\r\n    <li><code>0 &lt;= i &lt; n</code></li>\r\n    <li><code>1 &lt;= n</code></li>\r\n    <li>Only one process has the longest execution run.</li>\r\n    <li><code>runLogs</code> is sorted in ascending order of <code>runLogs[i][1]</code> (end time).</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Agoda_27july",
        "company_id": 336
    },
    {
        "id": 1037,
        "title": "Good Subsequences",
        "problem_statement": "<h1>Good Subsequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A subsequence is formed by deleting zero or more characters from a string and concatenating the remaining characters. A subsequence is considered \"good\" if the frequency of each character in the subsequence is the same.</p>\r\n<p>Given a string of n English letters, determine how many good subsequences it contains. Since the answer can be large, compute it modulo (10<sup>9</sup>+7).</p>\r\n<p>Note: An empty subsequence is not considered a good subsequence.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: word = \"abca\"\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> From this string, we can form 15 non-empty subsequences.</p>\r\n<p>The only subsequences that are not good are:</p>\r\n<ul>\r\n    <li>\"aba\" (character 'a' appears twice, 'b' appears once)</li>\r\n    <li>\"aca\" (character 'a' appears twice, 'c' appears once)</li>\r\n    <li>\"abca\" (character 'a' appears twice, 'b' and 'c' appear once each)</li>\r\n</ul>\r\n<p>The total number of good subsequences = 15 - 3 = 12, and the answer is 12 modulo (10<sup>9</sup>+7) = 12.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: word = \"abcd\"\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> All of the non-empty subsequences are good subsequences. They are \"a\", \"b\", \"c\", \"d\", \"ab\", \"ac\", \"ad\", \"bc\", \"bd\", \"cd\", \"abc\", \"abd\", \"acd\", \"bcd\", and \"abcd\".</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: word = \"baab\"\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong> The subsequences that are not good are \"baa\", \"aab\", \"bab\", \"baab\". The total number of non-empty subsequences for \"baab\" is 15. Therefore, the number of good subsequences is 15 - 4 = 11.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countGoodSubsequences</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string word</code>: a string that consists only of lowercase Latin letters</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<ul>\r\n    <li><code>int</code>: the number of good subsequences modulo (10<sup>9</sup>+7)</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Agoda_27july",
        "company_id": 336
    },
    {
        "id": 1038,
        "title": "Maximize Intern Reward Points",
        "problem_statement": "<h1>Maximize Intern Reward Points</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Two interns at HackerRank are assigned to complete a total of n tasks. Each task can be completed by either intern. The first intern earns reward_1[i] points for finishing the ith task, while the second intern earns reward_2[i] points for the same task.</p>\r\n<p>To maximize the total reward points for both interns, determine the highest possible combined reward points if the first intern is required to complete k tasks, and the second intern completes the remaining tasks.</p>\r\n<p>Note: The k tasks for the first intern can be any of the n tasks.</p>\r\n\r\n<p>Complete the function <code>getMaximumRewardPoints</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int k</code>: the number of tasks that have to be completed by intern 1</li>\r\n    <li><code>int reward_1[n]</code>: the reward points earned by intern 1 for each task</li>\r\n    <li><code>int reward_2[n]</code>: the reward points earned by intern 2 for each task</li>\r\n</ul>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the maximum possible combined reward points when intern 1 completes exactly k tasks</p>\r\n\r\n<pre><code class='language-cpp'>int getMaximumRewardPoints(int k, vector&lt;int&gt; reward_1, vector&lt;int&gt; reward_2) {\r\n    // Function body\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, reward_1 = [5, 4, 3, 2, 1], reward_2 = [1, 2, 3, 4, 5], k = 3\r\nOutput: 21</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 completes 3 tasks, while intern 2 completes the other 2. To maximize the points, intern 1 takes the first 3 tasks, and intern 2 takes the last 2 tasks. The total reward points are 5 + 4 + 3 (from intern 1) + 4 + 5 (from intern 2) = 21, which is the maximum possible. So, the answer is 21.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: k = 3, n = 4, reward_1 = [1, 2, 3], reward_2 = [1, 2, 3, 2]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 3 tasks, and intern 2 completes the remaining task. The reward points for each task are the same for both interns, so any task can be picked up by either intern. Total reward points = 1 + 2 + 3 + 2 = 8.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: k = 2, n = 4, reward_1 = [2, 3, 4], reward_2 = [1, 1, 1, 1]\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 2 tasks, and intern 2 completes the remaining 2 tasks. In order to maximize the points gained, intern 1 completes the second and third tasks. While intern 2 completes the first and fourth tasks. Total reward points gained = 4 + 3 (from intern 1) + 1 + 1 (from intern 2) = 9.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= k &lt;= n</code></li>\r\n    <li><code>1 &lt;= reward_1[i] &lt;= 10<sup>4</sup></code></li>\r\n    <li><code>1 &lt;= reward_2[i] &lt;= 10<sup>4</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Agoda_27july",
        "company_id": 336
    }
]