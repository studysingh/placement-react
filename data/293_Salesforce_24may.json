[
    {
        "id": 937,
        "title": "Special Subarrays",
        "problem_statement": "<h1>Special Subarrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In Salesforce's annual hackathon, employees from a team are ranked based on their efficiency scores. These scores are represented as an array. The team lead wants to analyze subgroups of employees to identify groups with specific characteristics.</p>\r\n<p>Find the number of subarrays of odd lengths with a median equal to efficiency[k].</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>A subarray is a sequence of consecutive elements of the array.</li>\r\n    <li>The median of an array of odd length, say n, is the (n+1)/2th element of the array if sorted in non-decreasing order. For example, the median of [2, 5, 4, 1, 1, 6] of length 7 is 2, since upon sorting, the array becomes [1, 1, 2, 4, 5, 6] and the (7+1)/2 = 4th element is 2.</li>\r\n</ul>\r\n<p>Complete the function <code>getSpecialSubarrays</code> in the editor below.</p>\r\n<p><code>getSpecialSubarrays</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int efficiency[n]</code>: efficiencies of people</li>\r\n    <li><code>int k</code>: the index of the required median value</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the number of odd-length subarrays where <code>efficiency[k]</code> is the median.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<p><strong>Example:</strong></p>\r\n<pre><code class='language-text'>efficiency = [5, 3, 1, 4, 7], k = 4\r\nefficiency[4] = 4</code></pre>\r\n<p><strong>Explanation:</strong> There are 4 odd length subarrays with 4 as their median: [4], [1, 4, 7], [5, 3, 1, 4, 7]. Return 4.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1 2 3\r\n1\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> The only subarray of odd length with 1 as its median is [1].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n4 1 2 3\r\n3\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> The subarrays of odd length with 2 as their median are [2], [4, 1, 2], and [1, 2, 3].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The value at <code>efficiency[k]</code> occurs only once in the array.</li>\r\n    <li><code>1 &le; n &le; 3 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; efficiency[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; k &le; n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Salesforce_24may",
        "company_id": 293
    },
    {
        "id": 938,
        "title": "Salesforce Collaborative Environment",
        "problem_statement": "<h1>Salesforce Collaborative Environment</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a Salesforce environment, there are <code>n</code> developers working on a collaborative task in a workspace, where they plan to transfer a debug log sequentially.</p>\r\n<p>Each developer has a unique ID in the range of 1 to <code>n</code>, inclusive. The developer with ID <code>i</code> will always transfer the debug log to developer <code>logReceiver[i]</code>. The transfer takes <code>logReceiver[i]</code> seconds. Developer 1 always starts with the debug log, and a developer always transfers the log to another developer.</p>\r\n<p>Determine which developer has the debug log after <code>k</code> seconds have passed.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>logTransferReceiver</code> in the editor below.</p>\r\n<p><code>logTransferReceiver</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int logReceiver[n]</code>: the <code>i</code>-th developer will transfer the debug log to the developer indicated in <code>logReceiver[i]</code>.</li>\r\n    <li><code>int k</code>: the duration (in seconds) for which the log is being transferred.</li>\r\n</ul>\r\n\r\n<h2>Return</h2>\r\n<p><code>int</code>: the developer holding the debug log at time = <code>k</code></p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: logReceiver = [2, 4, 1, 5, 3], k = 6\r\n\r\nTransfer Sequence:\r\nSecond | Has Log | LogReceiver\r\n-------|---------|------------\r\n1      | 1       | 2\r\n2      | 2       | 4\r\n3      | 4       | 1\r\n4      | 1       | 5\r\n5      | 5       | 3\r\n6      | 3       | 1\r\n\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> After 6 seconds, the debug log will be with developer 2.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nlogReceiver = [3, 1, 4, 2]\r\nk = 5\r\n\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The log is transferred in the following sequence, starting with Developer 1 at time = 0: 1 -> 3 -> 4 -> 2 -> 1 -> 3</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\nlogReceiver = [6, 5, 2, 5, 3, 2]\r\nk = 7\r\n\r\nOutput: (Not provided in images)</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= logReceiver[i] <= n (logReceiver[i] != i)</code></li>\r\n    <li><code>1 <= k <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Salesforce_24may",
        "company_id": 293
    },
    {
        "id": 939,
        "title": "Optimizing Salesforce Hierarchy",
        "problem_statement": "<h1>Optimizing Salesforce Hierarchy</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a Salesforce data hierarchy which is present as tree-like structure, each node represents a data object and each edge represents a relationship between two data objects. You are given a tree by applying at most k operations. In one operation, remove a leaf data object and its relationship. A leaf data object is a node with exactly one relationship (edge). Minimize the tree's diameter by applying the operation as many as k times.</p>\r\n<p><strong>Definitions:</strong></p>\r\n<ul>\r\n    <li>The distance between two data objects is the number of relationships (edges) in the shortest path connecting them.</li>\r\n    <li>The diameter in the hierarchy tree is defined as the maximum distance among all pairs of data objects.</li>\r\n</ul>\r\n<p>Return the minimum possible diameter in the hierarchy tree after performing at most k optimizations.</p>\r\n<p>For example, given a tree with `n = 5` nodes, `k = 2` operations, and `edges = [[1, 2], [1, 4], [2, 3], [2, 5]]`:</p>\r\n<p>\r\n    <img src=\"https://i.imgur.com/your_first_diagram_url.png\" alt=\"Initial tree diagram with nodes 1,2,3,4,5 and edges (1,2), (1,4), (2,3), (2,5)\">\r\n    <br>\r\n    (Note: Image URLs are placeholders as I cannot generate them. Please replace with actual diagram URLs if available.)\r\n</p>\r\n<p>If you remove data objects [3, 5], the resulting hierarchy has data object 1 relating to 2 and 4. The diameter is reduced to 2, spanning (2, 1, 4).</p>\r\n<p>Complete the function `optimizeHierarchy` in the editor below.</p>\r\n<p>The function `optimizeHierarchy` has the following parameter(s):</p>\r\n<ul>\r\n    <li>`int n`: Number of data objects in the hierarchy.</li>\r\n    <li>`int k`: Maximum number of optimizations.</li>\r\n    <li>`int edges[n][2]`: A 2D array where each element represents a relationship between two data objects.</li>\r\n</ul>\r\n<p>The function signature is: `int optimizeHierarchy(int n, int k, int edges_rows, int edges_columns, int** edges)`</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= n <= 1000`</li>\r\n    <li>`0 <= k < n`</li>\r\n    <li>`1 <= edges[i][0], edges[i][1] <= n`</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1: Sample Case 0</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nk = 0\r\nedges = [[1, 2], [1, 3]]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Since k = 0, the diameter cannot be reduced.</p>\r\n<p>\r\n    <img src=\"https://i.imgur.com/your_second_diagram_url.png\" alt=\"Tree diagram for Sample Case 0 with nodes 1,2,3 and edges (1,2), (1,3)\">\r\n</p>\r\n\r\n<h3>Example 2: Sample Case 1</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nk = 1\r\nedges = [[1, 2], [1, 3], [1, 4], [3, 5]]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> It is best to delete 5 to reduce the diameter from 3 to 2.</p>\r\n<p>\r\n    <img src=\"https://i.imgur.com/your_third_diagram_url.png\" alt=\"Initial tree diagram for Sample Case 1 with nodes 1,2,3,4,5 and edges (1,2), (1,3), (1,4), (3,5)\">\r\n    <br>\r\n    <img src=\"https://i.imgur.com/your_fourth_diagram_url.png\" alt=\"Tree diagram for Sample Case 1 after deleting node 5, with nodes 1,2,3,4 and edges (1,2), (1,3), (1,4)\">\r\n</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Salesforce_24may",
        "company_id": 293
    },
    {
        "id": 940,
        "title": "Annual Salesforce Hackathon",
        "problem_statement": "<h1>Annual Salesforce Hackathon</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In Salesforce's annual hackathon, employees from a team are ranked based on their efficiency scores. These scores are represented as an array. The team lead wants to analyze subgroups of employees to identify groups with specific characteristics.</p>\r\n<p>Given:</p>\r\n<ul>\r\n    <li><code>n</code> employees in a team standing in a line,</li>\r\n    <li>An array <code>efficiency</code> representing each employee's efficiency and</li>\r\n    <li>An integer <code>k</code> (1 &le; <code>k</code> &le; <code>n</code>), representing the reference employee in the array.</li>\r\n</ul>\r\n<p>Find the number of subarrays of odd lengths with a median equal to <code>efficiency[k]</code>.</p>\r\n\r\n<h3>Note:</h3>\r\n<ul>\r\n    <li>A subarray is a sequence of consecutive elements of the array.</li>\r\n    <li>The median of an array of odd length, say <code>n</code>, is the <code>(n + 1)/2<sup>th</sup></code> element of the array sorted in non-decreasing order. For example, the median of <code>[2, 5, 4, 1, 1, 6]</code> of length 7 is 2, since upon sorting, the array becomes <code>[1, 1, 2, 4, 5, 6]</code> and the <code>(7+1)/2 = 4<sup>th</sup></code> element is 2.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getSpecialSubarrays</code> in the editor below.</p>\r\n<p><code>getSpecialSubarrays</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int efficiency[n]</code>: efficiencies of people</li>\r\n    <li><code>int k</code>: the index of the required median value</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the number of odd-length subarrays where <code>efficiency[k]</code> is the median</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: efficiency = [5, 3, 1, 4, 7, 7], k = 4\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> <code>efficiency[4] = 4</code>. There are 4 odd length subarrays with 4 as their median: <code>[4]</code>, <code>[1, 4, 7]</code>, <code>[5, 3, 1, 4, 7]</code>, <code>[3, 1, 4, 7, 7]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The value at <code>efficiency[k]</code> occurs only once in the array.</li>\r\n    <li><code>1 &le; n &le; 3 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; efficiency[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; k &le; n</code></li>\r\n</ul>\r\n\r\n<h2>Sample Case 0</h2>\r\n<h3>Sample Input 0:</h3>\r\n<pre><code class='language-text'>n = 3\r\nefficiency = [1, 2, 3]\r\nk = 1</code></pre>\r\n<h3>Sample Output 0:</h3>\r\n<pre><code class='language-text'>1</code></pre>\r\n<p><strong>Explanation:</strong> The only subarray of odd length with 1 as its median is <code>[1]</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Salesforce_24may",
        "company_id": 293
    }
]