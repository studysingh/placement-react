[
    {
        "id": 343,
        "title": "Make Both Equal",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Make Both Equal</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Make Both Equal</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Given two numbers <code>A</code> and <code>B</code>, your task is to make them equal. You can perform any one of the two operations at a time:</p>\n        <ul>\n            <li>Replace <code>A</code> by <code>A - B</code>.</li>\n            <li>Replace <code>B</code> by <code>B - A</code>.</li>\n        </ul>\n        <p>Find the minimum number of steps to make <code>A</code> and <code>B</code> equal. Note that you cannot make a number negative.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of two space-separated integers representing <code>A</code> and <code>B</code>.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the minimum number of operations to make <code>A</code> and <code>B</code> equal.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ A, B ≤ 10</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n10 3</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>We can perform the following operations:</p>\n                <ol>\n                    <li>Replace <code>A</code> by <code>A - B</code>: <code>10 - 3 = 7</code>.</li>\n                    <li>Replace <code>A</code> by <code>A - B</code>: <code>7 - 3 = 4</code>.</li>\n                    <li>Replace <code>A</code> by <code>A - B</code>: <code>4 - 3 = 1</code>.</li>\n                </ol>\n                <p>Now, <code>A</code> and <code>B</code> are equal (both are 1).</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n24 7</pre>\n            <pre class=\\\"output\\\">Output:\n7</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>We can perform the following operations:</p>\n                <ol>\n                    <li>Replace <code>A</code> by <code>A - B</code>: <code>24 - 7 = 17</code>.</li>\n                    <li>Replace <code>A</code> by <code>A - B</code>: <code>17 - 7 = 10</code>.</li>\n                    <li>Replace <code>A</code> by <code>A - B</code>: <code>10 - 7 = 3</code>.</li>\n                    <li>Replace <code>B</code> by <code>B - A</code>: <code>7 - 3 = 4</code>.</li>\n                    <li>Replace <code>B</code> by <code>B - A</code>: <code>4 - 3 = 1</code>.</li>\n                    <li>Replace <code>A</code> by <code>A - B</code>: <code>3 - 1 = 2</code>.</li>\n                    <li>Replace <code>A</code> by <code>A - B</code>: <code>2 - 1 = 1</code>.</li>\n                </ol>\n                <p>Now, <code>A</code> and <code>B</code> are equal (both are 1).</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1mpHlKVx9E_rq8cibWi8AHAHl5qzZU_RxDnP2U7mKLpA/edit?usp=sharing",
        "solution_code": "#include <iostream>\\nusing namespace std;\\n\\nint main() {\\n    int A, B, steps = 0;\\n    cin >> A >> B;\\n    \\n    while (A != B) {\\n        if (A > B) {\\n            A -= B;\\n        } else {\\n            B -= A;\\n        }\\n        steps++;\\n    }\\n    \\n    cout << steps << endl;\\n    return 0;\\n}",
        "company_name": "Placewit",
        "company_id": 105
    },
    {
        "id": 344,
        "title": "Mathematics Problem - Permutation Score",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Mathematics Problem - Permutation Score</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Mathematics Problem - Permutation Score</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Priyam is a school mathematics teacher and one day he decides to test his students\\' knowledge about permutations. A permutation of size <code>n</code> is defined as a sequence of <code>n</code> integers where all integers from 1 to <code>n</code> occur exactly once. He gives one permutation array <code>arr</code> to his students. He wants his students to find a permutation of size <code>n</code> that satisfies some condition based on the score of that permutation.</p>\n        <p>The score of a permutation array <code>perm</code> (found by a student), given the array <code>arr</code> (provided by Priyam), is defined as:</p>\n        <p><code>[perm[1] - arr[perm[1]]] + [perm[2] - arr[perm[2]]] + ... + [perm[n] - arr[perm[n]]]</code></p>\n        <p>Considering the array <code>arr</code> to be <code>[2, 1]</code> and the <code>perm</code> array to be <code>[1, 2]</code>, then the score of the <code>perm</code> array given the array <code>arr</code> is <code>[1 - 1] + [2 - 2] = 0</code>.</p>\n        <p>He asks his students to find a permutation of size <code>n</code> which has the smallest score possible and, if there are multiple such permutations, find the lexicographically smallest one among them.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>The first line contains an integer <code>n</code> denoting the size of the integer array <code>arr</code>.</li>\n            <li>The next line contains <code>n</code> space-separated integers denoting the integer array <code>arr</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Output <code>n</code> space-separated integers denoting the lexicographically smallest permutation of size <code>n</code> with the smallest score.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 100</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n2 1 3</pre>\n            <pre class=\\\"output\\\">Output:\n1 2 3</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The permutation <code>[1, 2, 3]</code> has the smallest score: <code>[1 - 1] + [2 - 2] + [3 - 3] = 0</code>.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n6 3 4 2 5 1</pre>\n            <pre class=\\\"output\\\">Output:\n1 2 3 4 5</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The permutation <code>[1, 2, 3, 4, 5]</code> has the smallest score: <code>[1 - 1] + [2 - 2] + [3 - 3] + [4 - 4] + [5 - 5] = 0</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1mLajcTzEuHYq2TQ3P9eOA7UWd1mV6wRFm_psyBGGwwQ/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint calculateScore(vector<int>& arr, vector<int>& perm) {\\n    int score = 0;\\n    for(int i = 0; i < arr.size(); i++) {\\n        score += abs(arr[i] - perm[i]);\\n    }\\n    return score;\\n}\\n\\nint main() {\\n    int n;\\n    cin >> n;\\n    \\n    vector<int> arr(n);\\n    for(int i = 0; i < n; i++) {\\n        cin >> arr[i];\\n    }\\n    \\n    vector<int> perm(n);\\n    for(int i = 0; i < n; i++) {\\n        perm[i] = i + 1;\\n    }\\n    \\n    vector<int> bestPerm = perm;\\n    int minScore = calculateScore(arr, perm);\\n    \\n    do {\\n        int currentScore = calculateScore(arr, perm);\\n        \\n        if(currentScore < minScore || \\n           (currentScore == minScore && perm < bestPerm)) {\\n            minScore = currentScore;\\n            bestPerm = perm;\\n        }\\n    } while(next_permutation(perm.begin(), perm.end()));\\n    \\n    for(int i = 0; i < n; i++) {\\n        cout << bestPerm[i] << (i == n-1 ? \\'\\\\n\\' : \\' \\');\\n    }\\n    \\n    return 0;\\n}",
        "company_name": "Placewit",
        "company_id": 105
    },
    {
        "id": 345,
        "title": "Comic Books Fan",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Comic Books Fan</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Comic Books Fan</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Raj is a huge fan of comic books and loves to collect as many new comic books as possible. At the comic store, there are many new comic books. Raj has some dollars in cash. Comic books are always sold in pairs. Determine the maximum number of comic book pairs Raj can purchase with the given cash and list all the purchased comic books in the increasing order of their price. Books with the same price are listed in alphabetical order. If none can be purchased, print \\\"NONE\\\" in the output.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>A list of comic book names in comma-separated form.</li>\n            <li>A list of comic book prices in comma-separated form.</li>\n            <li>The cash held by Raj.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Output the list of all the comic book pairs in increasing order of their prices. Books with the same price are listed in alphabetical order. If none can be purchased, print \\\"NONE\\\" in the output.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The number of comic books is at least 1.</li>\n            <li>The prices of comic books are positive integers.</li>\n            <li>The cash held by Raj is a positive integer.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nCyber Sirens,The Quantum Squad,Eternal Emissaries,Lunar Legion,Timebenders\n10,10,30,20,20\n70</pre>\n            <pre class=\\\"output\\\">Output:\nCyber Sirens - 10\nThe Quantum Squad - 10\nLunar Legion - 20\nTimebenders - 20</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>Raj can purchase the following pairs with his $70:</p>\n                <ul>\n                    <li>Cyber Sirens ($10) and The Quantum Squad ($10)</li>\n                    <li>Lunar Legion ($20) and Timebenders ($20)</li>\n                </ul>\n                <p>The total cost is $60, which is within his budget.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nHeroic Horizons,Darkstar Defenders,Eternal Emissaries,Mystic Metropolis,Cosmic Crusaders\n10,10,30,10,40\n50</pre>\n            <pre class=\\\"output\\\">Output:\nNONE</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>Raj cannot purchase any pairs of comic books with his $50, as the cheapest pair costs $20.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/19pI-UMZFUabWNDN2zE9D42EMaKqPlQYw3YbnLiEWppk/edit?usp=sharing",
        "solution_code": "#include (tg://search_hashtag?hashtag=include) <iostream>\\n#include (tg://search_hashtag?hashtag=include) <vector>\\n#include (tg://search_hashtag?hashtag=include) <algorithm>\\n#include (tg://search_hashtag?hashtag=include) <string>\\n\\nstruct Comic {\\n    std::string name;\\n    int price;\\n};\\n\\nint main() {\\n    std::string names_str, prices_str;\\n    int cash;\\n\\n    std::getline(std::cin, names_str);\\n    std::getline(std::cin, prices_str);\\n    std::cin >> cash;\\n\\n    std::vector<std::string> names;\\n    size_t pos = 0;\\n    while ((pos = names_str.find(\\',\\')) != std::string::npos) {\\n        names.push_back(names_str.substr(0, pos));\\n        names_str.erase(0, pos + 1);\\n    }\\n    names.push_back(names_str);\\n\\n    std::vector<int> prices;\\n    pos = 0;\\n    std::string num;\\n    while ((pos = prices_str.find(\\',\\')) != std::string::npos) {\\n        num = prices_str.substr(0, pos);\\n        prices.push_back(std::stoi(num));\\n        prices_str.erase(0, pos + 1);\\n    }\\n    prices.push_back(std::stoi(prices_str));\\n\\n    std::vector<Comic> comics;\\n    for (size_t i = 0; i < names.size(); ++i) {\\n        Comic c = {names[i], prices[i]};\\n        comics.push_back(c);\\n    }\\n\\n    std::sort(comics.begin(), comics.end(), [](const Comic& a, const Comic& b) {\\n        if (a.price != b.price) return a.price < b.price;\\n        else return a.name (https://a.name/) < b.name (https://b.name/);\\n    });\\n\\n    std::vector<Comic> purchased;\\n    for (size_t i = 0; i < comics.size() - 1; i += 2) {\\n        int sum = comics[i].price + comics[i+1].price;\\n        if (sum <= cash) {\\n            purchased.push_back(comics[i]);\\n            purchased.push_back(comics[i+1]);\\n            cash -= sum;\\n        }\\n    }\\n\\n    if (purchased.empty()) {\\n        std::cout << \\\"NONE\\\" << std::endl;\\n    } else {\\n        for (const Comic& c : purchased) {\\n            std::cout << c.name (https://c.name/) << \\\"-\\\" << c.price << std::endl;\\n        }\\n    }\\n\\n    return 0;\\n}",
        "company_name": "Placewit",
        "company_id": 105
    },
    {
        "id": 346,
        "title": "Denominations of Coins",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Denominations of Coins</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Denominations of Coins</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Given an integer <code>N</code> denoting the number of different denominations of coins you have, and an integer array <code>A</code> of size <code>N</code> denoting the denomination of all coins, you have an unlimited number of coins of each denomination.</p>\n        <p>Your task is to find the <code>K-th</code> lowest amount that can be made using these coins. Note that if there are multiple ways to create a single amount, count that amount as 1 occurrence only.</p>\n        <p>For example, if you have 3 different denominations of coins - 1, 2, 3 and you need to find the 7th smallest amount possible from these denominations, then:</p>\n        <ul>\n            <li>1st smallest amount: 1 (single 1 denomination coin)</li>\n            <li>2nd smallest amount: 2 (single 2 denomination coin)</li>\n            <li>3rd smallest amount: 3 (single 3 denomination coin or one 1 denomination coin and one 2 denomination coins)</li>\n            <li>4th smallest amount: 4</li>\n            <li>5th smallest amount: 5</li>\n            <li>6th smallest amount: 6</li>\n            <li>7th smallest amount: 7</li>\n        </ul>\n        <p>So, the 7th smallest amount possible is 7.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>The first line contains two integers <code>N</code> and <code>K</code> respectively.</li>\n            <li>The second line contains <code>N</code> integers denoting the array <code>A</code>, where <code>A[i]</code> represents the denomination of the <code>i-th</code> coin.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the <code>K-th</code> lowest amount that can be made using these coins.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10</li>\n            <li>1 ≤ A[i] ≤ 10^18</li>\n            <li>1 ≤ K ≤ 10^9</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3 7\n1 2 3</pre>\n            <pre class=\\\"output\\\">Output:\n7</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The smallest amounts are:</p>\n                <ul>\n                    <li>1</li>\n                    <li>2</li>\n                    <li>3</li>\n                    <li>4</li>\n                    <li>5</li>\n                    <li>6</li>\n                    <li>7</li>\n                </ul>\n                <p>The 7th smallest amount is 7.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 6\n3 5 7 11</pre>\n            <pre class=\\\"output\\\">Output:\n20</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The smallest amounts are:</p>\n                <ul>\n                    <li>3</li>\n                    <li>5</li>\n                    <li>7</li>\n                    <li>8</li>\n                    <li>9</li>\n                    <li>10</li>\n                </ul>\n                <p>The 6th smallest amount is 20.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1TYDW4m079ZQy08joGc26TbLVkoTptx6owIH4eW40Z-E/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Placewit",
        "company_id": 105
    },
    {
        "id": 347,
        "title": "Winter Break Game",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Winter Break Game</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Winter Break Game</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Magnus is a high school student who is getting bored during his Winter holidays. To stay away from social media, he comes up with a game in which he selects two integers <code>n</code> and <code>m</code> and wants to know how many beautiful grids of <code>n</code> rows and <code>m</code> columns can be made. A grid is said to be beautiful if it contains only <code>0</code> and <code>1</code> and if each row of that grid has exactly one segment of cells containing <code>0</code>s and every column has exactly one segment of cells containing <code>1</code>s.</p>\n        <p>In other words, for a grid to be beautiful:</p>\n        <ul>\n            <li>Every row of that grid has at least one cell containing <code>0</code>, and all of them should be consecutive.</li>\n            <li>Every column should have at least one cell containing <code>1</code>, and all of them should be consecutive.</li>\n        </ul>\n        <p>Find out the number of different beautiful grids possible. As that number can be large, return it modulo <code>998244353</code>. Two grids are considered different if they differ by at least one cell.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>The first line contains two space-separated integers <code>n</code> and <code>m</code> denoting the number of rows and columns of the grid.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Output a single integer denoting the number of beautiful grids modulo <code>998244353</code>.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, m ≤ 2050</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 1</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>With only 1 column, it\\'s impossible to have a segment of <code>1</code>s in each column. Therefore, the number of beautiful grids is 0.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5 7</pre>\n            <pre class=\\\"output\\\">Output:\n353760</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>There are 353760 beautiful grids possible for a 5x7 grid, modulo 998244353.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1Kewy5QFv9IlOXT8zskdEmTLN3ptajyqqAdXw5Yzp2g8/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\nconst int MOD = 998244353;\\nconst int MAX = 4100;\\n\\nll comb[MAX][MAX];\\n\\nvoid precompute_comb(int max_n) {\\n    for(int n=0;n<=max_n;n++) {\\n        comb[n][0] = 1;\\n        for(int k=1;k<=n;k++) {\\n            comb[n][k] = (comb[n-1][k-1] + comb[n-1][k]) % MOD;\\n        }\\n        for(int k=n+1;k<=max_n;k++) {\\n            comb[n][k] = 0;\\n        }\\n    }\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    int n, m;\\n    cin >> n >> m;\\n    precompute_comb(n + m + 10);\\n    ll total =0;\\n    for(int k=0; k<=n; k++){\\n        for(int x=1; x<=m; x++){\\n            if(x + k -1 <k || m -x + n -k -1 < n -k){\\n                continue;\\n            }\\n            ll c1=1, c2=1;\\n            if(x +k -1 >=k){\\n                c1 = comb[x +k -1][k];\\n            }\\n            else{\\n                c1=0;\\n            }\\n            if(m -x + n -k -1 >= n -k){\\n                c2 = comb[m -x + n -k -1][n -k];\\n            }\\n            else{\\n                c2=0;\\n            }\\n            total = (total + c1 * c2) % MOD;\\n        }\\n    }\\n    if(m ==1){\\n        cout << \\\"0\\\\n\\\";\\n        return 0;\\n    }\\n    cout << total % MOD;\\n}",
        "company_name": "Placewit",
        "company_id": 105
    }
]