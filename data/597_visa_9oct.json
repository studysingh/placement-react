[
    {
        "id": 1705,
        "title": "Light Sequence Puzzle",
        "problem_statement": "<h1>Light Sequence Puzzle</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine a group of young engineers trying to solve a puzzle involving sequences of lights on a circuit board. Each light sequence is represented by a non-negative integer, where reversing the digits in the integer represents reversing the light sequence. The reversal process <code>flipDigits</code> involves flipping the order of the digits and removing any leading zeros from the result. For instance:</p>\r\n<ul>\r\n    <li><code>flipDigits(5070) = 705</code></li>\r\n    <li><code>flipDigits(800) = 8</code></li>\r\n    <li><code>flipDigits(321) = 123</code></li>\r\n</ul>\r\n<p>Some special pairs of light sequences can be combined in a unique way that makes them equivalent, no matter which sequence starts the combination.</p>\r\n<p>Given an array of non-negative integers <code>arr</code>, the engineers need to calculate how many pairs <code>(i, j)</code> exist such that <code>i &lt;= j</code> and <code>arr[i] + flipDigits(arr[j]) == arr[j] + flipDigits(arr[i])</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [1, 20, 2, 11]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The output should be <code>solution(arr) = 7</code>.</p>\r\n<ul>\r\n    <li>For <code>(i, j) = (0, 0)</code> equality holds: <code>1 + 1 == 1 + 1</code>.</li>\r\n    <li>For <code>(i, j) = (0, 1)</code> equality doesn't hold: <code>1 + 2 == 20 + 1</code>.</li>\r\n    <li>For <code>(i, j) = (0, 2)</code> equality holds: <code>1 + 2 == 2 + 1</code>.</li>\r\n    <li>For <code>(i, j) = (0, 3)</code> equality holds: <code>1 + 11 == 11 + 1</code>.</li>\r\n    <li>For <code>(i, j) = (1, 1)</code> equality holds: <code>20 + 2 == 20 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (1, 2)</code> equality doesn't hold: <code>20 + 2 == 2 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (1, 3)</code> equality doesn't hold: <code>20 + 11 == 11 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (2, 2)</code> equality holds: <code>2 + 2 == 2 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (2, 3)</code> equality holds: <code>2 + 11 == 11 + 2</code>.</li>\r\n    <li>For <code>(i, j) = (3, 3)</code> equality holds: <code>11 + 11 == 11 + 11</code>.</li>\r\n</ul>\r\n<p>So the total number of such pairs is 7.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [32, 132, 100]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The output should be <code>solution(arr) = 4</code>.</p>\r\n<ul>\r\n    <li>For <code>(i, j) = (0, 0)</code> equality holds: <code>32 + 23 == 32 + 23</code>.</li>\r\n    <li>For <code>(i, j) = (0, 1)</code> equality doesn't hold: <code>32 + 231 == 132 + 23</code>.</li>\r\n    <li>For <code>(i, j) = (0, 2)</code> equality doesn't hold: <code>32 + 1 == 100 + 23</code>.</li>\r\n    <li>For <code>(i, j) = (1, 1)</code> equality holds: <code>132 + 231 == 132 + 231</code>.</li>\r\n    <li>For <code>(i, j) = (1, 2)</code> equality holds: <code>132 + 1 == 100 + 231</code>.</li>\r\n    <li>For <code>(i, j) = (2, 2)</code> equality holds: <code>100 + 1 == 100 + 1</code>.</li>\r\n</ul>\r\n<p>So the total number of such pairs is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>[execution time limit]</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>[memory limit]</strong> 1 GB</li>\r\n    <li><strong>[input]</strong> array.integer arr\r\n        <ul>\r\n            <li>An array of non-negative integers representing the light sequences on the circuit board.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>[output]</strong> integer64\r\n        <ul>\r\n            <li>The number of pairs (i, j) for which <code>arr[i] + flipDigits(arr[j]) == arr[j] + flipDigits(arr[i])</code></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p><strong>Guaranteed constraints:</strong></p>\r\n<ul>\r\n    <li><code>1 &lt;= arr.length &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= arr[i] &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Syntax Tips</h2>\r\n<pre><code class='language-cpp'>// Prints help message to the console\r\n// return a string\r\nstring solution(string name) {\r\n    cout &lt;&lt; \"This print to the console when you Run Tests\" &lt;&lt; endl;\r\n    return \"hello, \" + name;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "visa_9oct",
        "company_id": 597
    },
    {
        "id": 1706,
        "title": "Nearly Regular Crosses",
        "problem_statement": "<h1>Nearly Regular Crosses</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For a rectangular matrix of integers, a cross is a figure formed by joining one row and one column. A cross is considered to be regular if all the elements in it are equal.</p>\r\n<p>A cross is called nearly regular if all of its elements are equal except for, at most, one element. The element in the intersection of the row and the column which form the cross.</p>\r\n<p>You are given a rectangular matrix of integers <code>matrix</code>. Your task is to return the number of nearly regular crosses within <code>matrix</code>.</p>\r\n<p><strong>Note:</strong> that by definition the regular cross is also considered to be a nearly regular cross.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(matrix.length * matrix[0].length * (matrix.length + matrix[0].length))</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: matrix = [\r\n  [1, 1, 1],\r\n  [1, 1, 1],\r\n  [2, 3, 1],\r\n  [1, 1, 0],\r\n  [1, 4, 1]\r\n]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The only two nearly regular crosses are:</p>\r\n<ul>\r\n    <li>The cross formed by the first row and the third column.</li>\r\n    <li>The cross formed by the third row and the last column.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: matrix = [\r\n  [1, 1, 1, 1],\r\n  [2, 3, 1, 1],\r\n  [1, 1, 1, 0],\r\n  [1, 4, 1, 1]\r\n]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> All possible combinations of one row and one column form a nearly regular cross.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: matrix = [[2, 3]]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> All possible combinations of one row and one column form a nearly regular cross.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= matrix.length <= 50</code></li>\r\n    <li><code>1 <= matrix[i].length <= 50</code></li>\r\n    <li><code>0 <= matrix[i][j] <= 1000</code></li>\r\n</ul>\r\n\r\n<h2>Input/Output</h2>\r\n<ul>\r\n    <li><strong>[execution time limit]</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>[memory limit]</strong> 1 GB</li>\r\n    <li><strong>[input]</strong> array.array.integer <code>matrix</code>\r\n        <p>A rectangular matrix of integers.</p>\r\n    </li>\r\n    <li><strong>[output]</strong> integer\r\n        <p>The number of nearly regular crosses within the matrix.</p>\r\n    </li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>int solution(vector<vector<int>> matrix) {\r\n  // Function implementation\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "visa_9oct",
        "company_id": 597
    }
]