[
    {
        "id": 1631,
        "title": "Binary String Power of Two Regex Match",
        "problem_statement": "<h1>Binary String Power of Two Regex Match</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a binary string, find a regex that checks whether that binary number when converted to a decimal number is a power of two or not.</p>\r\n<p>Complete the code in the editor below by replacing the blank (i.e., <code>_______</code>) with a regular expression that matches something according to the criterion above. Locked code in the editor prints <strong>True</strong> for each correct match and <strong>False</strong> for each incorrect match.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = '0101010'</code></pre>\r\n<p><strong>Explanation:</strong> This is 42 decimal which is not a power of 2. The regex should return a false value and the code stub will print 'False'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Test strings consist only of ascii characters '0' or '1'</li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>Input from stdin will be processed as follows and passed to the function.</p>\r\n<p>The first line consists of an integer, n, the number of binary strings to follow.</p>\r\n<p>Each of the next n lines contains a string representation of a binary number.</p>\r\n\r\n<h3>Sample Input 0:</h3>\r\n<pre><code class='language-text'>4\r\n1000\r\n0100\r\n0010\r\n0110</code></pre>\r\n\r\n<h3>Sample Output 0:</h3>\r\n<pre><code class='language-text'>True\r\nTrue\r\nTrue\r\nFalse</code></pre>\r\n\r\n<p><strong>Explanation:</strong> Values of the inputs are 8, 4, 2 (2<sup>3</sup>, 2<sup>2</sup> and 2<sup>1</sup>) and 5 in decimal.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * Checks if the binary string represents a number that is a power of two.\n     * A positive integer is a power of two if and only if its binary representation\n     * contains exactly one '1'.\n     *\n     * @param s The binary string to check.\n     * @return True if the string represents a power of two, False otherwise.\n     */\n    bool solve(const std::string& s) {\n        // TODO: Implement the solution logic here.\n        return false;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    Solution solution;\n    while (n--) {\n        std::string s;\n        std::cin >> s;\n        bool result = solution.solve(s);\n        if (result) {\n            std::cout << \"True\\n\";\n        } else {\n            std::cout << \"False\\n\";\n        }\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "nvidia_7oct",
        "company_id": 571
    },
    {
        "id": 1632,
        "title": "Largest Magical String",
        "problem_statement": "<h1>Largest Magical String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Two definitions follow:</p>\r\n<ul>\r\n    <li>A binary string consists of 0's and/or 1's. For example, <code>01011</code>, <code>1111</code>, and <code>00</code> are binary strings.</li>\r\n    <li>The prefix of a string is any of its substrings that include the beginning of the string. For example, the prefixes of <code>11010</code> are <code>1</code>, <code>11</code>, <code>110</code>, <code>1101</code>, and <code>11010</code>.</li>\r\n</ul>\r\n<p>A non-empty binary string is good if the following two conditions are true:</p>\r\n<ol>\r\n    <li>The number of 0's is equal to the number of 1's.</li>\r\n    <li>For every prefix of the binary string, the number of 1's is not less than the number of 0's.</li>\r\n</ol>\r\n<p>For example, <code>11010</code> is not good because it does not have an equal number of 0's and 1's, but <code>110010</code> is good because it satisfies both conditions.</p>\r\n<p>A good string can contain multiple good substrings. If two consecutive substrings are good, then they can be swapped as long as the resulting string is still a good string. Given a good binary string, <code>binString</code>, perform zero or more swap operations on its adjacent good substrings such that the resulting string is the largest possible numeric value. Two substrings are adjacent if the last character of the first substring occurs exactly one index before the first character of the second substring.</p>\r\n<p>For example, if <code>binString = 10111000</code>. There are two good binary substrings, <code>1010</code> and <code>111000</code>, among others. Swap these two substrings to get a larger value: <code>1110001010</code>. This is the largest possible good string that can be formed.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>largestMagical</code> in the editor below.</p>\r\n\r\n<h3>Function Parameters</h3>\r\n<ul>\r\n    <li><code>str binString</code>: a binary string</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>str</code>: the largest possible binary value as a string</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: binString = \"11011000\"\r\nOutput: \"11100100\"</code></pre>\r\n<p><strong>Explanation:</strong> Choose two adjacent good substrings to swap: <code>10</code> and <code>1100</code>. The resultant string, <code>str = 11100100</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: binString = \"1100\"\r\nOutput: \"1100\"</code></pre>\r\n<p><strong>Explanation:</strong> The only good substring of <code>binString</code> is <code>1100</code>. No operations can be applied to the string.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: binString = \"1101001100\"\r\nOutput: \"1101001100\"</code></pre>\r\n<p><strong>Explanation:</strong> The only consecutive good substrings are <code>110100</code> and <code>1100</code>. Note that <code>100</code> is not a good substring because it contains more zeroes than ones. If they are swapped, it results in a lexicographically smaller string. Thus, <code>binString</code> is already the lexicographically largest good string that can be formed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Each character of <code>binString</code> ∈ {0, 1}.</li>\r\n    <li>1 ≤ |<code>binString</code>| ≤ 50</li>\r\n    <li><code>binString</code> is a good string.</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>string largestMagical(string binString) {\r\n\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::string largestMagical(std::string binString) {\n        // Core logic goes here\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string binString;\n    std::cin >> binString;\n\n    Solution sol;\n    std::string result = sol.largestMagical(binString);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "nvidia_7oct",
        "company_id": 571
    },
    {
        "id": 1633,
        "title": "Question 1: Average Speed",
        "problem_statement": "<h1>Question 1: Average Speed</h1>\r\n<h2>Problem Description</h2>\r\n<p>A person runs from A to B at 8 kmph and walks back from B to A at 2 kmph. The average speed of the person in kmph is</p>\r\n\r\n<h1>Question 2: Probability of Caramel Chocolate</h1>\r\n<h2>Problem Description</h2>\r\n<p>A bag contains 25 coffee and 25 caramel flavoured chocolates. Alice picks one random chocolate and eats it. After that, Bob also picks one random chocolate and eats it. What is the probability that at least one of them ate a caramel chocolate?</p>\r\n\r\n<h1>Question 3: Circular Table Seating</h1>\r\n<h2>Problem Description</h2>\r\n<p>3 couples need to be seated around a circular table such that no two persons of the same gender sit next to each other and spouses do not sit next to each other. In how many different configurations is this possible?</p>\r\n\r\n<h1>Question 4: Painting a Cube</h1>\r\n<h2>Problem Description</h2>\r\n<p>Given six distinct colors, in how many unique ways can a six faced cube be painted such that no two faces have the same color?</p>\r\n\r\n<h1>Question 6: Triangle Perimeter</h1>\r\n<h2>Problem Description</h2>\r\n<p>ABC is a triangle with angle A equal to 90 degrees, and BC = 25. If the area of ABC is 84, find its perimeter.</p>\r\n\r\n<h1>Question 7: Milk and Water Mixture</h1>\r\n<h2>Problem Description</h2>\r\n<p>There are two jars of the same size that are both half full. The first jar has 10% water and 90% milk. The second jar has 10% milk and 90% water. A person transfers half the contents of the first jar to the second jar. After mixing the contents of the second jar, the person transfers half the contents of the second jar to the first jar. What is the percentage of milk in the first jar?</p>\r\n\r\n<h1>Question 5: Virus Growth</h1>\r\n<h2>Problem Description</h2>\r\n<p>There is a small virus in a large jar. The virus doubles itself every minute. The virus fills up the jar in 12 minutes. How many minutes did it take for the virus take to fill up a quarter of the jar?</p>\r\n\r\n<h1>Question 8: Work and Time</h1>\r\n<h2>Problem Description</h2>\r\n<p>5 boys and 8 girls can complete a job in 4 days. 10 boys and 6 girls can complete the same job in 3 days. How many girls need to work with 15 boys to complete the same job in 2 days?</p>\r\n\r\n<h1>Question 9: Sum and Squares of Numbers</h1>\r\n<h2>Problem Description</h2>\r\n<p>The sum of two numbers is 30. The sum of the squares of the two numbers is 458. The square of the difference between the two numbers is</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <iomanip>\n\nclass Solution {\npublic:\n    double solve(double v1, double v2) {\n        // Core logic for the problem goes here.\n        return 0.0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int t;\n    std::cin >> t;\n    while (t--) {\n        double v1, v2;\n        std::cin >> v1 >> v2;\n        \n        Solution solver;\n        double result = solver.solve(v1, v2);\n        \n        std::cout << std::fixed << std::setprecision(2) << result << std::endl;\n    }\n    \n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "nvidia_7oct",
        "company_id": 571
    },
    {
        "id": 1634,
        "title": "Number of Words from COCOON",
        "problem_statement": "<h1>Number of Words from COCOON</h1>\r\n<h2>Problem Description</h2>\r\n<p>The number of different (unique, but need not make sense) words that can be formed from the letters of the word COCOON is:</p>\r\n\r\n<h1>Trench Digging Problem</h1>\r\n<h2>Problem Description</h2>\r\n<p>3 men can dig a trench 3 feet deep working for 3 hours a day in 3 days. How deep a trench can 6 men dig working for 6 hours a day for 6 days?</p>\r\n\r\n<h1>Apple Profit/Loss Percentage</h1>\r\n<h2>Problem Description</h2>\r\n<p>A shopkeeper purchased a few apples at 10 rupees per apple.</p>\r\n<p>He sells half the apples at 14 rupees per apple.</p>\r\n<p>The remaining apples start to decay, so he sells them at only 8 rupees per apple.</p>\r\n<p>What is his profit/loss percentage in the overall transaction?</p>\r\n\r\n<h1>Bee's Travel Distance</h1>\r\n<h2>Problem Description</h2>\r\n<p>Two men, A and B, are standing 100 km away from each other. At a certain time, A starts running towards B at 20 kmph. At the same time, B starts running away from A at 10 kmph.</p>\r\n<p>At the same time, a Bee sitting on the shoulder of A starts flying at the speed of 50 km towards B. It touches B, and starts flying back towards A. It touches A and then starts flying back towards B. It does this until both A and B meet.</p>\r\n<p>How much is the distance traveled by the Bee?</p>\r\n\r\n<h1>Business Profit Sharing</h1>\r\n<h2>Problem Description</h2>\r\n<p>Rahul and Ram invest in a business in a ratio of 4:5. They donate 10% of total profit to charity. Rahul's net profit is 10 lakhs. How much is the total profit?</p>\r\n\r\n<h1>Tennis Tournament Second Best Player</h1>\r\n<h2>Problem Description</h2>\r\n<p>There are 256 Tennis players. Find out the minimum number of matches required to get the second best player among them. The condition is that if player A beats B, and B beats C, then A beats C.</p>\r\n\r\n<h1>LRTF Scheduling Average Turnaround Time</h1>\r\n<h2>Problem Description</h2>\r\n<p>Consider three processes p1, p2, p3 respectively with compute time bursts 2, 4 and 8 time units. All processes arrive at time zero.</p>\r\n<p>Consider the longest remaining time first (LRTF) scheduling algorithm. In LRTF, ties are broken by giving priority to the process with the lowest process id.</p>\r\n<p>What is the average turn around time?</p>\r\n\r\n<h1>Sorted Array Insertion Copy Operations</h1>\r\n<h2>Problem Description</h2>\r\n<p>In the worst case, how many copy operations are required to insert an element into a sorted array of length N that is not yet full?</p>\r\n\r\n<h1>C Program Output - sizeof String</h1>\r\n<h2>Problem Description</h2>\r\n<p>What will be the output of the following program?</p>\r\n<pre><code class='language-javascript'>void main()\r\n{\r\n    char str[] = \"What is the size\";\r\n    printf(\"%d\", sizeof(str));\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\n// It appears the problem statement is a collection of several distinct logic puzzles,\n// none of which require reading from standard input. The boilerplate will be structured\n// for a single problem (the first one mentioned) that has a fixed answer.\n\nclass Solution {\npublic:\n    /**\n     * This method should contain the logic to solve the \"Number of Words from COCOON\" problem.\n     * Since the input is fixed (the word \"COCOON\"), this method takes no parameters.\n     * It should return the calculated number of unique words.\n     */\n    int solve() {\n        // Core logic to calculate the number of permutations for the word \"COCOON\".\n        // The formula for permutations with repetitions is n! / (n1! * n2! * ... * nk!)\n        // For COCOON: n=6, C appears 2 times, O appears 3 times, N appears 1 time.\n        // Result = 6! / (2! * 3! * 1!)\n        return 0; // Placeholder\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem does not specify any input to be read from stdin.\n    // It's a fixed problem.\n    \n    Solution solution;\n    int result = solution.solve();\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "nvidia_7oct",
        "company_id": 571
    },
    {
        "id": 1635,
        "title": "C Program Output - Static Variable",
        "problem_statement": "```html\n<h1>C Program Output - Static Variable</h1>\n\n<h2>Problem Description</h2>\n<p>What will be the output of the following program?</p>\n\n<pre><code class='language-c'>int main()\n{\n    static int i;\n    printf(\"%d\", ++i);\n    return 0;\n}</code></pre>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: (No explicit input, program runs as is)\nOutput: 1</code></pre>\n<p><strong>Explanation:</strong> In C, <code>static</code> local variables are initialized to zero by default if no explicit initialization is provided. So, <code>static int i;</code> initializes <code>i</code> to 0. The <code>++i</code> pre-increment operator increments <code>i</code> to 1, and then its value (1) is printed.</p>\n\n---\n\n<h1>C Program Output - Array Assignment</h1>\n\n<h2>Problem Description</h2>\n<p>What is the output of the following program?</p>\n\n<pre><code class='language-c'>main()\n{\n    char str1[] = \"Hello\";\n    char str2[] = \"World\";\n    str1 = str2;\n    printf(\"%s %s\", str1, str2);\n}</code></pre>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: (No explicit input, program runs as is)\nOutput: Compiler error</code></pre>\n<p><strong>Explanation:</strong> In C, array names (like <code>str1</code> and <code>str2</code>) are essentially constant pointers to their first element. You cannot assign one array to another using the <code>=</code> operator after declaration. The line <code>str1 = str2;</code> attempts to reassign the base address of <code>str1</code>, which is not allowed for arrays, leading to a compilation error.</p>\n\n---\n\n<h1>Operating System - Page Table Entries</h1>\n\n<h2>Problem Description</h2>\n<p>If the page size is 4KB and logical address is of 22 bits then number of entries in the page table will be</p>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: Page size = 4KB, Logical address = 22 bits\nOutput: 1K</code></pre>\n<p><strong>Explanation:</strong>\nThe number of bits in the logical address determines the total logical address space: 2<sup>22</sup> bytes.</p>\n<p>The page size is 4KB, which is 4 * 1024 bytes = 2<sup>2</sup> * 2<sup>10</sup> bytes = 2<sup>12</sup> bytes.</p>\n<p>The number of pages in the logical address space is calculated as:\n<code>Total Logical Address Space / Page Size = 2^22 / 2^12 = 2^(22-12) = 2^10</code>.</p>\n<p>Since 1K = 1024 = 2<sup>10</sup>, the number of pages is 1K. Each page corresponds to one entry in the page table. Therefore, the number of entries in the page table will be 1K.</p>\n\n---\n\n<h1>C Function Analysis - Remainder Operation</h1>\n\n<h2>Problem Description</h2>\n<p>What operation does this function perform?</p>\n\n<pre><code class='language-c'>int MyFunction(int a, int b)\n{\n    int k = 0;\n    while (a - k*b >= 0)\n        ++k;\n    return a - k*b;\n}</code></pre>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: a = 10, b = 3\nOutput: -2</code></pre>\n<p><strong>Explanation:</strong>\nLet's trace with <code>a = 10, b = 3</code>:</p>\n<ul>\n    <li>Initially, <code>k = 0</code>.</li>\n    <li><strong>Iteration 1:</strong> <code>10 - 0*3 = 10 >= 0</code> is true. <code>k</code> becomes 1.</li>\n    <li><strong>Iteration 2:</strong> <code>10 - 1*3 = 7 >= 0</code> is true. <code>k</code> becomes 2.</li>\n    <li><strong>Iteration 3:</strong> <code>10 - 2*3 = 4 >= 0</code> is true. <code>k</code> becomes 3.</li>\n    <li><strong>Iteration 4:</strong> <code>10 - 3*3 = 1 >= 0</code> is true. <code>k</code> becomes 4.</li>\n    <li><strong>Iteration 5:</strong> <code>10 - 4*3 = -2 >= 0</code> is false. The loop terminates.</li>\n    <li>The function returns <code>a - k*b</code>, which is <code>10 - 4*3 = 10 - 12 = -2</code>.</li>\n</ul>\n<p>The loop increments <code>k</code> until <code>k*b</code> is strictly greater than <code>a</code>. So, upon loop termination, <code>k</code> will be <code>floor(a/b) + 1</code>. The function then returns <code>a - (floor(a/b) + 1) * b</code>. This result is equivalent to <code>(a % b) - b</code> if <code>a % b != 0</code>, and <code>-b</code> if <code>a % b == 0</code>. This is a form of remainder calculation, which is the core of the modulo operation, albeit with a specific negative result convention.</p>\n\n---\n\n<h1>C Program Output - Signed Unsigned Comparison</h1>\n\n<h2>Problem Description</h2>\n<p>What will be the output of the following program?</p>\n\n<pre><code class='language-c'>main()\n{\n    unsigned int y = 2;\n    int x = -2;\n\n    if (x > y)\n        printf(\"X is greater than Y\");\n    else\n        printf(\"Y is greater than X\");\n    return 0;\n}</code></pre>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: (No explicit input, program runs as is)\nOutput: X is greater than Y</code></pre>\n<p><strong>Explanation:</strong> When comparing a signed integer (<code>x = -2</code>) with an unsigned integer (<code>y = 2</code>), the signed integer is implicitly converted to an unsigned integer before the comparison. In two's complement representation, -2 as an <code>int</code> becomes a very large positive number when interpreted as an <code>unsigned int</code> (e.g., <code>UINT_MAX - 1</code> on a 32-bit system). Therefore, the comparison <code>x > y</code> evaluates to <code>(unsigned int)-2 > (unsigned int)2</code>, which is true because the large positive unsigned value of -2 is greater than 2.</p>\n\n---\n\n<h1>C Program Output - String Literal Modification</h1>\n\n<h2>Problem Description</h2>\n<p>What will be the output of the following program?</p>\n\n<pre><code class='language-c'>void main()\n{\n    char *buff = \"NVIDIA\";\n    buff[0] = 'n';\n    printf(\"%s\", buff);\n}</code></pre>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: (No explicit input, program runs as is)\nOutput: Runtime access violation</code></pre>\n<p><strong>Explanation:</strong> When you declare <code>char *buff = \"NVIDIA\";</code>, the string literal \"NVIDIA\" is typically stored in a read-only segment of memory. The pointer <code>buff</code> then points to the beginning of this read-only string. Attempting to modify a string literal, such as <code>buff[0] = 'n';</code>, results in undefined behavior. On most systems, this will lead to a runtime error like a segmentation fault or an access violation, as the program tries to write to a memory location it doesn't have permission to modify.</p>\n\n---\n\n<h1>C++ Program Output - Template Class Overloading</h1>\n\n<h2>Problem Description</h2>\n<p>What is the output of the following program?</p>\n\n<pre><code class='language-cpp'>template <typename T> class QMS\n{\npublic:\n    T *m_pData;\n    void PutSampleData(T* val)\n    {\n        m_pData = val;\n    }\n    T GetSampleData(T input)\n    {\n        return GetData(input);\n    }\n    int GetData(int a)\n    {\n        cout << \"From int getdata\";\n        return 0;\n    }\n    int GetData(float b)\n    {\n        cout << \"From float getdata\";\n        return 0;\n    }\n};\n\nint main()\n{\n    QMS<int> *gms = new QMS<int>();\n    gms->PutSampleData(0); \n    cout << gms->GetSampleData(0.0);\n    return 0;\n}</code></pre>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: (No explicit input, program runs as is)\nOutput: From int getdata0</code></pre>\n<p><strong>Explanation:</strong>\n1.  <code>QMS<int> *gms = new QMS<int>();</code>: An object of <code>QMS</code> templated with <code>int</code> is created. So, <code>T</code> within this instance is <code>int</code>.\n2.  <code>gms->PutSampleData(0);</code>: <code>PutSampleData</code> expects an <code>int*</code>. Passing <code>0</code> is valid in C++ and means passing a null pointer. <code>m_pData</code> will be <code>nullptr</code>. This line does not affect the output.\n3.  <code>cout << gms->GetSampleData(0.0);</code>:\n    *   The call is to <code>GetSampleData</code> of <code>QMS<int></code>. Its signature is effectively <code>int GetSampleData(int input)</code>.\n    *   The argument <code>0.0</code> (a <code>double</code> literal) is implicitly converted to an <code>int</code> (which becomes <code>0</code>) to match the parameter type <code>int input</code>.\n    *   Inside <code>GetSampleData</code>, <code>return GetData(input);</code> is called, which means <code>return GetData(0);</code>.\n    *   The compiler performs overload resolution for <code>GetData(0)</code>. It finds two overloads: <code>int GetData(int a)</code> and <code>int GetData(float b)</code>. The exact match is <code>int GetData(int a)</code>.\n    *   This function executes <code>cout << \"From int getdata\";</code>, printing \"From int getdata\".\n    *   It then returns <code>0</code>.\n    *   This returned <code>0</code> is then printed by the outer <code>cout</code> statement.\nTherefore, the total output is \"From int getdata0\". If the options only provide the string part, \"From int getdata\" is the relevant part.</p>\n\n---\n\n<h1>C Program Output - Unsigned Char Overflow Loop</h1>\n\n<h2>Problem Description</h2>\n<p>What will be the output of the following program?</p>\n\n<pre><code class='language-c'>main()\n{\n    unsigned char ch = 0;\n    int count = 0;\n    while (++ch <= 255)\n        count++;\n    printf(\"%d\", count);\n}</code></pre>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: (No explicit input, program runs as is)\nOutput: no output (infinite loop)</code></pre>\n<p><strong>Explanation:</strong> An <code>unsigned char</code> typically has a range from 0 to 255.\nThe loop condition is <code>++ch <= 255</code>.\n1.  <code>ch</code> starts at 0.\n2.  In the first iteration, <code>++ch</code> makes <code>ch</code> 1. <code>1 <= 255</code> is true. <code>count</code> becomes 1.\n3.  This continues until <code>ch</code> reaches 255. In the iteration where <code>ch</code> becomes 255 (after <code>++ch</code>), <code>255 <= 255</code> is true. <code>count</code> becomes 255.\n4.  In the next iteration, <code>++ch</code> attempts to increment <code>ch</code> from 255. Since <code>ch</code> is an <code>unsigned char</code>, it wraps around to 0 (255 + 1 = 256, which modulo 256 is 0).\n5.  Now <code>ch</code> is 0. The condition <code>0 <= 255</code> is true. <code>count</code> becomes 256.\n6.  The loop continues from <code>ch = 0</code>, repeating the cycle.\nBecause <code>ch</code> will always be in the range [0, 255] after incrementing, the condition <code>ch <= 255</code> will always be true, leading to an infinite loop. The <code>printf</code> statement will never be reached.</p>\n\n---\n\n<h1>Data Structures - Queue Insertion Complexity (Singly Linked List)</h1>\n\n<h2>Problem Description</h2>\n<p>If a singly linked list is used to implement a queue, what is the best case time complexity for inserting an element into the queue? (assume that the queue already has N elements)</p>\n\n<h2>Examples</h2>\n<h3>Example 1:</h3>\n<pre><code class='language-text'>Input: Queue implemented with a singly linked list, N elements\nOutput: O(1)</code></pre>\n<p><strong>Explanation:</strong> A queue follows the First-",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    int solve(int a, int b) {\n        // Core logic goes here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int a, b;\n    std::cin >> a >> b;\n\n    Solution sol;\n    int result = sol.solve(a, b);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "nvidia_7oct",
        "company_id": 571
    }
]