[
    {
        "id": 542,
        "title": "Minimum Operations to Adjust Prices",
        "problem_statement": "<h1>Minimum Operations to Adjust Prices</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The manager of the Amazon warehouse has decided to make changes to the inventory by changing the prices of the products. Currently, the inventory has <code>n</code> products, where the price of the <code>i<sup>th</sup></code> product is represented by the array element <code>prices[i]</code>.</p>\r\n<p>The manager is given two integers: <code>k</code> - which is the maximum amount by which a product's price can be adjusted (increased or decreased) in a single operation, and <code>d</code> - which represents the target price difference. The goal is to ensure that the difference between the highest and lowest prices in the inventory is strictly less than <code>d</code>.</p>\r\n<p>In order to make changes to the inventory, the manager can do the following operation any number of times:</p>\r\n<ul>\r\n    <li>The manager selects two indices <code>x, y</code> (<code>1 &le; x, y &le; n</code>), and an integer <code>p</code> (<code>1 &le; p &le; k</code>).</li>\r\n    <li>The manager increases the price of the product <code>x</code> by <code>p</code>.</li>\r\n    <li>The manager decreases the price of the product <code>y</code> by <code>p</code>.</li>\r\n</ul>\r\n<p>Given <code>n</code> products, an array <code>prices</code>, and the two integers <code>k</code> and <code>d</code>, find the minimum number of operations that the manager has to perform such that the maximum difference between the prices of any two products from the array of products is strictly less than <code>d</code>.</p>\r\n<p><strong>Note:</strong> The array <code>prices</code> follows 1-based indexing meaning the first element is at index 1 rather than 0.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>minOperations</code> in the editor below.</p>\r\n<p><code>minOperations</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int prices[n]</code>: an array describing product prices of the <code>n</code> in the inventory.</li>\r\n    <li><code>int k</code>: the maximum amount by which the price of any product can be increased or decreased in a single operation.</li>\r\n    <li><code>int d</code>: the target price difference, which the manager must ensure is strictly less than the difference between the highest and lowest product prices.</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of operations that the manager has to perform such that the maximum difference between the prices of any two products from the array of products is strictly less than <code>d</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, prices = [1, 5, 9, 11], k = 4, d = 2\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One of the possible sequence of operations that modifies the prices in the optimal way is as follows:</p>\r\n<ul>\r\n    <li><strong>Operation 1:</strong> Select <code>x = 1</code>, <code>y = 4</code>, <code>p = 2</code>. Prices become <code>[1+4, 5, 9, 11-4] = [5, 5, 9, 7]</code>. (Note: The table shows p=2, but the calculation implies p=4 for this step).</li>\r\n    <li><strong>Operation 2:</strong> Select <code>x = 1</code>, <code>y = 3</code>, <code>p = 2</code>. Prices become <code>[5+2, 5, 9-2, 7] = [7, 5, 7, 7]</code>.</li>\r\n    <li><strong>Operation 3:</strong> Select <code>x = 2</code>, <code>y = 1</code>, <code>p = 1</code>. Prices become <code>[7-1, 5+1, 7, 7] = [6, 6, 7, 7]</code>.</li>\r\n</ul>\r\n<p>The manager needs to perform a total of 3 operations. It is not possible to achieve the required condition, where the difference between the highest and lowest prices is strictly less than <code>d = 2</code>, in fewer than 3 operations. Therefore, the result is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, prices = [1, 4, 6], k = 1, d = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>Operation 1:</strong> Select <code>x = 1</code>, <code>y = 3</code>, <code>p = 1</code>. Prices become <code>[1+1, 4, 6-1] = [2, 4, 5]</code>.</li>\r\n    <li><strong>Operation 2:</strong> Select <code>x = 1</code>, <code>y = 3</code>, <code>p = 1</code>. Prices become <code>[2+1, 4, 5-1] = [3, 4, 4]</code>.</li>\r\n</ul>\r\n<p>Hence, the manager needs to perform 2 operations.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 3, prices = [1, 4, 6], k = 3, d = 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>Operation 1:</strong> Select <code>x = 1</code>, <code>y = 3</code>, <code>p = 2</code>. Prices become <code>[1+2, 4, 6-2] = [3, 4, 4]</code>.</li>\r\n</ul>\r\n<p>Hence, the manager needs to perform only 1 operation.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>3</sup></code></li>\r\n    <li><code>1 &le; prices[i] &le; 10<sup>3</sup></code></li>\r\n    <li><code>1 &le; k &le; 10<sup>2</sup></code></li>\r\n    <li><code>2 &le; d &le; 10<sup>3</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 543,
        "title": "Find Longest Regex",
        "problem_statement": "<h1>Find Longest Regex</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon developers are building a prototype for a regex generator for the given strings. For the prototype version, the regex consists of uppercase English letters, '[' and ']'. Here, a string of characters enclosed in square brackets '[' and ']' matches any of the one characters in that string. Also, the string of characters enclosed within '[' and ']' consists of uppercase English letters only with no repetition.</p>\r\n\r\n<p>For example,</p>\r\n<ul>\r\n    <li>\"[ABBRJAABC]\" is not a valid regex as B occurs twice between square brackets.</li>\r\n    <li>\"[JABC\", \"[A]I]\", \"[J]\" and \"AABC\" are also not valid regexes as brackets must contain some string, and brackets should also form a balanced bracket sequence.</li>\r\n    <li>\"[ABC][BCA]\" is a valid regex and matches with \"BBCA\" and \"ABCA\", but not with \"ABBCA\".</li>\r\n    <li>\"[ABCZ][Q]\" is a valid regex and matches with \"AQ\", \"BQ\", \"CQ\", \"ZQ\" but not with \"DQ\" or \"ZC\".</li>\r\n    <li>\"[A][B][C][D]\" is a valid regex and matches only with the string \"ABCD\".</li>\r\n</ul>\r\n\r\n<p>Given 3 strings x, y, and z of length n, find the longest regex that matches both the strings x and y but does not match with the string z. If no such regex exists output -1. If multiple such regex exist output the lexicographically smallest one.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>The length of a regex is the number of characters in it, i.e. including uppercase English alphabets, '[' and ']'.</li>\r\n    <li>A string p is lexicographically smaller than string q, if p is a prefix of q, is not equal to q or there exists i such that p<sub>i</sub> &lt; q<sub>i</sub> and for all j &lt; i it is satisfied that p<sub>j</sub> = q<sub>j</sub>. Note that while comparing p<sub>j</sub> and q<sub>j</sub> we consider their ASCII values, i.e. '[' and ']' are greater than any uppercase English letters. For example, \"ABC\" is lexicographically smaller than \"BCD\" and \"ABCDE\" but larger than \"AAC\" and \"AACDE\".</li>\r\n    <li>The answer string, which is to be returned can turn out to be in the order of 10<sup>6</sup> for larger n's.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: x = \"AERB\", y = \"ATRC\", z = \"AGCB\"\r\nOutput: [ABCDEFGHIJKLMNOPQRSTUVWXYZ][ABCDEFGHIJKLMNOPQRSTUVWXYZ]</code></pre>\r\n<p><strong>Explanation:</strong> Here, x = \"AERB\", y = \"ATRC\", z = \"AGCB\". Regex \"[ABCDEFGHIJKLMNOPQRSTUVWXYZ][ABCDEFGHIJKLMNOPQRSTUVWXYZ]\" matches with strings \"AERB\" and \"ATRC\", but not with string \"AGCB\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: x = \"ABCD\", y = \"CODE\", z = \"CODE\"\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> Here, x = \"ABCD\", y = \"CODE\", z = \"CODE\". As strings y and z are equal it is not possible that a regex matches with y but not z. Hence, the output is -1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>x, y,</code> and <code>z</code> consists of uppercase English letters only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 565,
        "title": "Code Question 1",
        "problem_statement": "<h1>Code Question 1</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon would like to enforce a password policy that when a user changes their password, the new password cannot be similar to the current one. To determine whether two passwords are similar, they take the new password, choose a set of indices and change the characters at these indices to the next cyclic character exactly once. Character 'a' is changed to 'b', 'b' to 'c' and so on, and 'z' changes to 'a'. The password is said to be similar if after applying the operation, the old password is a subsequence of the new password.</p>\r\n<p>The developers come up with a set of n password change requests, where <code>newPasswords</code> denotes the array of new passwords and <code>oldPasswords</code> denotes the array of old passwords. For each pair <code>newPasswords[i]</code> and <code>oldPasswords[i]</code>, return \"YES\" if the passwords are similar, that is, <code>oldPasswords[i]</code> becomes a subsequence of <code>newPasswords[i]</code> after performing the operations, and \"NO\" otherwise.</p>\r\n<p><strong>Note:</strong> A subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.</p>\r\n\r\n<h2>Examples</h2>\r\n<p>The two lists of passwords are given as <code>newPasswords = [\"baacbab\", \"accdb\", \"baacba\"]</code>, and <code>oldPasswords = [\"abdbdc\", \"ach\", \"abb\"]</code>.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: newPasswords[0] = \"baacbab\", oldPasswords[0] = \"abdbdc\"</code></pre>\r\n<p><strong>Explanation:</strong> After applying cyclic shifts to characters at certain indices (e.g., 'a' at index 2 to 'b', 'c' at index 3 to 'd', 'a' at index 5 to 'c', 'b' at index 6 to 'c'), the new password \"baacbab\" becomes \"babdbcc\". The old password \"abdbdc\" is then a subsequence of \"babdbcc\".</p>\r\n<pre><code class='language-text'>Output: YES</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: newPasswords[1] = \"accdb\", oldPasswords[1] = \"ach\"</code></pre>\r\n<p><strong>Explanation:</strong> It is not possible to change the character of the new password to \"h\" which occurs in the old password, so there is no subsequence that matches.</p>\r\n<pre><code class='language-text'>Output: NO</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: newPasswords[2] = \"baacba\", oldPasswords[2] = \"abb\"</code></pre>\r\n<p><strong>Explanation:</strong> After applying cyclic shifts to characters at certain indices (e.g., 'a' at index 2 to 'b', 'c' at index 3 to 'd', 'b' at index 5 to 'c'), the new password \"baacba\" becomes \"babdca\". The old password \"abb\" is then a subsequence of \"babdca\".</p>\r\n<pre><code class='language-text'>Output: YES</code></pre>\r\n<p>The final answer for these pairs is [\"YES\", \"NO\", \"YES\"].</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>validatePasswordSequence</code> in the editor below.</p>\r\n<p><code>validatePasswordSequence</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string newPasswords[n]</code>: <code>newPasswords[i]</code> represents the new password of the i<sup>th</sup> pair</li>\r\n    <li><code>string oldPasswords[n]</code>: <code>oldPasswords[i]</code> represents the old password of the i<sup>th</sup> pair</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>string[n]</code>: the i<sup>th</sup> string represents the answer to the i<sup>th</sup> pair of passwords</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10</code></li>\r\n    <li>Sum of lengths of all passwords in array <code>newPassword</code> and array <code>oldPassword</code> does not exceed <code>(2 * 10<sup>5</sup>)</code></li>\r\n    <li><code>|oldPasswords[i]| &le; |newPasswords[i]|</code>, for all <code>i</code>.</li>\r\n</ul>\r\n\r\n<h2>Sample Input For Custom Testing</h2>\r\n<pre><code class='language-text'>n = 2\r\nnewPasswords = [\"aaccbbee\", \"aacb\"]\r\noldPasswords = [\"aab\", \"aee\"]</code></pre>\r\n\r\n<h2>Sample Output</h2>\r\n<pre><code class='language-text'>YES\r\nNO</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 590,
        "title": "Maximum System Memory Capacity",
        "problem_statement": "<h1>Maximum System Memory Capacity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The developers at Amazon are working on optimizing the capacity of their cloud system. In the system, there are <code>n</code> servers where the memory capacity of the <code>ith</code> server is represented by the array <code>memory[i]</code>. A system always contains an even number of servers. If the system has <code>2x</code> servers, then <code>x</code> of them will be primary and the other <code>x</code> will be backup servers. For each primary server <code>P</code>, there exists a backup server <code>B</code> where the memory capacity of <code>B >=</code> memory capacity of <code>P</code>. The system's memory capacity is the sum of the memory capacity of all the primary servers.</p>\r\n<p>Given <code>n</code> servers and an array <code>memory</code>, find the maximum system memory capacity that can be formed using the <code>n</code> servers.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>maximumCapacity</code> in the editor below.</p>\r\n<p><code>maximumCapacity</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int memory[n]</code>: the memory capacity of the given servers</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long int</code>: the maximum system memory capacity</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n2\r\n1\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> Here, we have 3 servers (serverA, serverB, serverC) having memory sizes as [1, 2, 1] respectively. We can choose serverA as a primary server, and serverB as its respective backup server. The conditions hold true since memory[serverB] >= memory[serverA]. Hence, the maximum system memory capacity is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= memory[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 593,
        "title": "Use Minimum Tokens",
        "problem_statement": "<h1>Use Minimum Tokens</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon operates a system of <code>n</code> warehouses, each represented by <code>warehouse[i]</code>, where <code>warehouse[i]</code> indicates the maximum number of items that particular warehouse can hold. Additionally, there are <code>q</code> shipments to process, represented by a 2D array <code>catalog[q][2]</code>. Each shipment has specific requirements:</p>\r\n<ul>\r\n    <li><code>catalog[i][0]</code> denotes the minimum capacity that the selected warehouse must have to accommodate the shipment.</li>\r\n    <li><code>catalog[i][1]</code> denotes the minimum combined capacity required from the other warehouses to fulfill backup storage needs.</li>\r\n</ul>\r\n<p>Amazon can increase the capacity of any warehouse by spending 1 token per unit of capacity.</p>\r\n<p>The task is to determine the optimal strategy for allocating capacity for each shipment such that the fewest number of tokens are expended. This strategy must ensure that the selected warehouse meets the required capacity for the shipment and that the combined capacity of the other warehouses is sufficient for backup storage.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>The tokens are spent independently for each shipment.</li>\r\n    <li>If a warehouse is selected to accommodate the shipment and there is some left over capacity (i.e., <code>warehouse[i] - catalog[i][0] > 0</code>) then it can not be used for backup storage.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, warehouse = [2,4,1,3], q = 1, catalog = [[5,7]]\r\nOutput: [2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>If the first warehouse is expanded for the shipment, 3 tokens are needed for the first warehouse to accommodate the shipment, and no tokens are needed for the rest of the warehouses to maintain backup storage. Hence, the total tokens needed = 3 + 0 = 3.</li>\r\n    <li>If the second warehouse is expanded for the shipment, 1 token is needed for the second warehouse to accommodate the shipment, and 1 token is needed for the rest of the warehouses to maintain backup storage. Hence, the total tokens needed = 1 + 1 = 2.</li>\r\n    <li>If the third warehouse is expanded for the shipment, 4 tokens are needed for the third warehouse to accommodate the shipment, and no tokens are needed for the rest of the warehouses to maintain backup storage. Hence, the total tokens needed = 4 + 0 = 4.</li>\r\n    <li>If the fourth warehouse is expanded for the shipment, 2 tokens are needed for the fourth warehouse to accommodate the shipment, and no tokens are needed for the rest of the warehouses to maintain backup storage. Hence, the total tokens needed = 2 + 0 = 2.</li>\r\n</ul>\r\n<p>Therefore, the optimal solution is to expand either the second or fourth warehouse for the shipment. Hence, the answer is [2].</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nwarehouse = [5,1,1,4]\r\nq = 3\r\ncatalog = [[5,7],[4,10],[7,9]]\r\nOutput:\r\n[1,3,5]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For the first shipment, the optimal selection is warehouse number four. You'll need to spend one token to extend the capacity of the fourth warehouse to accommodate the shipment and no tokens on the other warehouses. The total tokens spent equal one for capacity augmentation + zero for backup storage = 1.</li>\r\n    <li>For the second shipment, the optimal selection is either the second or third warehouse. You'll spend three tokens to extend the capacity of the selected warehouse and no tokens on the remaining warehouses. Hence, the total tokens spent equal three for augmentation + zero for backup storage = 3.</li>\r\n    <li>For the third shipment, warehouse one is chosen for capacity augmentation. Two tokens are spent to extend its capacity and 3 more to ensure sufficient backup storage in the rest of the warehouses. Therefore, the total tokens spent will be 2 (for augmentation) + 3 (for backup storage) = 5.</li>\r\n</ul>\r\n<p>Hence, the answer is [1, 3, 5].</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\nwarehouse = [2,4,1,4,10,7]\r\nq = 3\r\ncatalog = [[5,22],[14,25],[10,10]]\r\nOutput:\r\n[1,4,0]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For the first shipment, the optimal decision is to utilize the second warehouse. Additionally, we would need to spend 1 token to increase the capacity of this warehouse to accommodate the shipment. We wouldn't need to spend any tokens on other warehouses since their combined capacity is already sufficient for backup storage. So, the total tokens needed are 1 (for Warehouse 2) + 0 (for the remaining warehouses) = 1.</li>\r\n    <li>For the second shipment, the best choice is to use the fifth warehouse. We would need to spend 4 tokens to raise this warehouse's capacity for the shipment. Also, we would need to spend 0 tokens to raise the capacity of the other warehouses to meet the backup storage requirement. So, the total tokens needed are 4 (for Warehouse 5) + 0 (for the remaining warehouses) = 4.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>useMinimumTokens</code> in the editor below.</p>\r\n<p><code>useMinimumTokens</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int warehouse[n]</code>: an array listing the initial maximum capacity of each warehouse.</li>\r\n    <li><code>long catalog[q][2]</code>: A 2D array describing the shipments.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long[q]</code>: an array representing the minimum number of tokens needed to serve each shipment while ensuring sufficient backup storage.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; warehouse[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; q &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; catalog[i][0] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; catalog[i][1] &le; 10<sup>15</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 594,
        "title": "Code Question 1",
        "problem_statement": "<h1>Code Question 1</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A new Amazon intern encountered a challenging task. Currently, the intern has n integers, where the value of the i<sup>th</sup> element is represented by the array element values[i]. The intern is curious to play with arrays and subsequences and thus asks you to join him. Given n integer, array values, and an integer k, the intern needs to find the maximum and minimum median overall subsequences of length k.</p>\r\n\r\n<p>Complete the function <code>medians</code> in the editor below. <code>medians</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int values[n]</code>: the value of integers.</li>\r\n    <li><code>int k</code>: the given integer.</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int[]</code>: the maximum and minimum overall subsequences of length k in the form [maximum median, minimum median].</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, values = [1, 2, 3], k = 2\r\n</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe subsequences of length k=2 and their medians are:</p>\r\n<pre><code class='language-text'>Subsequences of length k | median\r\n[1, 2]                   | 1\r\n[1, 3]                   | 1\r\n[2, 3]                   | 2</code></pre>\r\n<p>Here, the maximum median present is 2 and the minimum median in the subsequence present is 1. Therefore, the output would be <code>[2, 1]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\nvalues = [56, 21]\r\nk = 1\r\nOutput:\r\n56\r\n21</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe subsequences of length k=1 and their medians are:</p>\r\n<pre><code class='language-text'>Subsequences of length k | median\r\n[56]                     | 56\r\n[21]                     | 21</code></pre>\r\n<p>The maximum median present is 56 and the minimum subsequence present is 21.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nvalues = [16, 21, 9, 2, 78]\r\nk = 5\r\nOutput:\r\n16\r\n16</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe subsequences of length k=5 and their medians are:</p>\r\n<pre><code class='language-text'>Subsequences of length k | median\r\n[16, 21, 9, 2, 78]       | 16</code></pre>\r\n<p>There is only one subsequence of length 5, hence the maximum median and minimum median are 16.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>0 <= values[i] <= 10<sup>9</sup></code></li>\r\n    <li><code>1 <= k <= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 595,
        "title": "Calculate Repetitiveness Feature",
        "problem_statement": "<h1>Calculate Repetitiveness Feature</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The team of machine learning scientists at Amazon wants to improve Amazon's product recommendation system. Based on a user's purchase history, the objective is to generate some extensive features that will be given as input to the machine learning model. One of the new proposed features is a minRepetitions-repetitiveness feature whose computation is described below.</p>\r\n<p>The purchase history of a user with the products available on Amazon is available in the form of a string <code>purchaseHistory</code> where the <code>i</code>th character represents the category of the <code>i</code>th product purchased by the user. The length of string <code>purchaseHistory</code> is <code>n</code>. There is also a given integer <code>minRepetitions</code>.</p>\r\n<p>The value of the minRepetitions-repetitiveness feature for the string <code>purchaseHistory</code> is defined as the maximum number of substrings of the given string such that some product category in that substring appeared at least <code>minRepetitions</code> times.</p>\r\n<p>Find the value of the minRepetitions-repetitiveness feature for the given string <code>purchaseHistory</code>.</p>\r\n<p><strong>Note:</strong> A substring is a continuous subsegment of a string.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>The string <code>purchaseHistory</code> = \"eeccca\" and <code>minRepetitions</code> = 3.</p>\r\n<p>The only product that appears 3 times or more in the original string is 'c'. The substrings where the product 'c' appears 3 or more times are:</p>\r\n<pre><code class='language-text'>substring count\r\ncecc      3\r\nceccc     4\r\nceccca    4\r\neccc      3\r\necccc     3\r\neccc      3\r\nccca      3</code></pre>\r\n<p><strong>Explanation:</strong> So, the value of the minRepetitions-repetitiveness feature is 7.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: purchaseHistory = \"acaab\", minRepetitions = 3\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The only substrings that have some product appearing at least minRepetitions times are \"acaa\" and \"caab\".</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: purchaseHistory = \"accad\", minRepetitions = 2\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The only substrings that have some product appearing at least minRepetitions times are \"acc\", \"cc\", \"cca\", \"ccad\", \"cad\", and \"acd\".</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>calculateRepetitiveness</code> in the editor below. <code>calculateRepetitiveness</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string purchaseHistory</code>: the purchase history of the user</li>\r\n    <li><code>int minRepetitions</code>: the minimum occurrence of a product for a substring to be included in the minRepetitions-repetitiveness feature</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<p>An integer denoting the value of the minRepetitions-repetitiveness feature.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= length of purchaseHistory <= 5 * 10^4</code></li>\r\n    <li><code>1 <= minRepetitions <= 5 * 10^4</code></li>\r\n    <li>The string <code>purchaseHistory</code> only contains lowercase Latin letters, ascii[a-z].</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 597,
        "title": "Maximum Reward Points",
        "problem_statement": "<h1>Maximum Reward Points</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon Shopping periodically has offers to attract more customers.</p>\r\n<p>It recently launched an offer for <code>n</code> items in its inventory, where the <code>i</code>th item offered <code>pointValues[i]</code> reward points to the customer purchasing the item. Every time an offer-bearing item is purchased, the customer gains the point values associated with that item. Then the reward points of the remaining items are reduced by 1 unless it will reduce the points below 0.</p>\r\n<p>Find the maximum possible reward points that can be gathered by purchasing the items optimally.</p>\r\n<p><strong>Note:</strong> Each item can be purchased at most once, in other words, <code>pointValues[i]</code> becomes 0 after the <code>i</code>th item is purchased.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider the number of items to be <code>n = 5</code>, and their reward points to be <code>pointValues = [5, 2, 2, 3, 1]</code>. The items can be purchased as follows:</p>\r\n<ul>\r\n    <li>Considering 0-based indexing, the items can be purchased in the following order:</li>\r\n    <li><strong>First,</strong> purchase item 2, points earned = <code>pointValues[2] = 2</code>. Points of remaining items after this purchase <code>pointValues = [4, 1, 0, 2, 0]</code>.</li>\r\n    <li><strong>Next,</strong> purchase item 3, points earned = <code>pointValues[3] = 2</code>. Points of remaining items after this purchase <code>pointValues = [3, 0, 0, 0, 0]</code>.</li>\r\n    <li><strong>Finally,</strong> purchase item 0, points earned = <code>pointValues[0] = 3</code>. Points of remaining items after this purchase <code>pointValues = [0, 0, 0, 0, 0]</code>.</li>\r\n</ul>\r\n<p>At this point, no items have reward points left. The maximum reward points is 2 + 2 + 3 = 7.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n5\r\n5\r\n5\r\nOutput:\r\n12</code></pre>\r\n<p><strong>Explanation:</strong> <code>n = 3</code>, <code>pointValues = [5, 5, 5]</code></p>\r\n<ul>\r\n    <li><strong>First,</strong> purchase item 0, points earned = <code>pointValues[0] = 5</code>. Points of remaining items after this purchase <code>pointValues = [0, 4, 4]</code>.</li>\r\n    <li><strong>Next,</strong> purchase item 1, points earned = <code>pointValues[1] = 4</code>. Points of remaining items after this purchase <code>pointValues = [0, 0, 3]</code>.</li>\r\n    <li><strong>Finally,</strong> purchase item 2, points earned = <code>pointValues[2] = 3</code>. Points of remaining items after this purchase <code>pointValues = [0, 0, 0]</code>.</li>\r\n</ul>\r\n<p>The maximum reward points is (5 + 4 + 3 = 12).</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1\r\n3\r\n5\r\n2\r\n4\r\nOutput:\r\n9</code></pre>\r\n<p><strong>Explanation:</strong> <code>n = 5</code>, <code>pointValues = [1, 3, 5, 2, 4]</code></p>\r\n<ul>\r\n    <li><strong>First,</strong> purchase item 2, points earned = <code>pointValues[2] = 5</code>. Points of remaining items after this purchase <code>pointValues = [0, 2, 0, 1, 3]</code>.</li>\r\n    <li><strong>Next,</strong> purchase item 4, points earned = <code>pointValues[4] = 3</code>. Points of remaining items after this purchase <code>pointValues = [0, 1, 0, 0, 0]</code>.</li>\r\n    <li><strong>Finally,</strong> purchase item 1, points earned = <code>pointValues[1] = 1</code>. Points of remaining items after this purchase <code>pointValues = [0, 0, 0, 0, 0]</code>.</li>\r\n</ul>\r\n<p>The maximum reward points is 5 + 3 + 1 = 9.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>calculateMaximumPointsEarned</code> in the editor below.</p>\r\n<p><code>calculateMaximumPointsEarned</code> has the following parameter(s):</p>\r\n<p><code>int pointValues[n]</code>: the reward points of each item</p>\r\n\r\n<h3>Returns</h3>\r\n<p><code>long_int</code>: the maximum reward points which can be collected</p>\r\n<pre><code class='language-javascript'>long calculateMaximumPointsEarned(vector<int> pointValues) {\r\n    // Function body to be implemented\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>0 <= pointValues[i] <= 10<sup>6</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 598,
        "title": "Maximum Valid Pairs",
        "problem_statement": "<h1>Maximum Valid Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An AWS client wants to deploy multiple applications and needs two servers, one for their frontend and another for their backend. They have a list of integers representing the quality of servers in terms of availability. The client's preference is that the availability of an application's frontend server must be greater than that of its backend server.</p>\r\n<p>Two arrays of same size <code>s</code>, <code>frontend[s]</code> and <code>backend[s]</code> where elements represent the quality of the servers, create pairs of elements <code>(frontend[i], backend[j])</code> such that <code>frontend[i] &gt; backend[j]</code> in each pair. Each element from an array can be picked only once to form a pair. Find the maximum number pairs that can be formed.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumPairs</code> in the editor below.</p>\r\n<p><code>getMaximumPairs</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int frontend[s]</code>: frontend server qualities</li>\r\n    <li><code>int backend[s]</code>: backend server qualities</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 599,
        "title": "Process Synchronization",
        "problem_statement": "<h1>Process Synchronization</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A team of developers at Amazon is working on process synchronization. One way to achieve process synchronization is through effective inter-process communication. Processes can communicate with each other through shared memory, i.e., by accessing the same resources while executing simultaneously.</p>\r\n<p>A set of processes is <strong>synchronized</strong> if there is at least one process in the set whose execution time overlaps with the execution times of all other processes in the set.</p>\r\n<p>Given the starting and ending times of execution of <code>n</code> processes in the arrays <code>starts</code> and <code>ends</code> respectively, determine the minimum number of processes that must be dropped so the remaining processes form a synchronized set.</p>\r\n<p><strong>Note:</strong> A set containing only one process is considered to be synchronized.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>findMinimumProcessDrops</code> in the editor below.</p>\r\n<p><code>findMinimumProcessDrops</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int starts[n]</code>: process execution start times</li>\r\n    <li><code><code>int ends[n]</code></code>: process execution end times</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of processes remove to leave a synchronized set</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p>Suppose <code>n = 4</code>, <code>starts = [1, 2, 3, 4]</code>, <code>ends = [2, 3, 5, 5]</code>.</p>\r\n<p>The execution times of the processes' execution intervals are <code>[[1, 2], [2, 3], [3, 5], [4, 5]]</code>.</p>\r\n<p>After removing the process at index 3 with the execution interval <code>[4, 5]</code>, the resulting set is <code>[[1, 2], [2, 3], [3, 5]]</code>.</p>\r\n<p>Now the interval <code>[2, 3]</code> intersects with both <code>[1, 2]</code> and <code>[3, 5]</code> at times 2 and 3 respectively, thus we have at least one process whose execution time overlaps with the execution times of all other processes in the set.</p>\r\n<p>Hence, this set of process becomes synchronized.</p>\r\n<p>Note that removing process at index 0 with the execution interval <code>[1, 2]</code> also makes the resulting set of processes synchronized as execution times of process at index 2 with interval <code>[3, 5]</code> overlaps with all other processes in the set.</p>\r\n<p>Thus, the minimum number of processes drop is 1. Hence, the answer is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nstarts = [1, 3, 4, 6, 9]\r\nends = [2, 8, 5, 7, 10]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Execution intervals are <code>[[1, 2], [3, 8], [4, 5], [6, 7], [9, 10]]</code>.</p>\r\n<p>If the processes at indices 0 and 4 are removed, i.e., the processes with execution times <code>[1, 2]</code> and <code>[9, 10]</code> are removed, then the remaining set of process execution intervals is <code>[[3, 8], [4, 5], [6, 7]]</code>.</p>\r\n<p>The interval <code>[3, 8]</code> intersects with all other intervals in the set.</p>\r\n<p>Hence, the set of processes becomes synchronized.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2*10<sup>5</sup></code></li>\r\n    <li><code>1 &le; starts[i] &le; ends[i] &le; 10<sup>9</sup></code></li>\r\n    <li>It is guaranteed that no two processes have identical start and end times, i.e., there are no duplicate intervals.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 600,
        "title": "Vulnerability Factor",
        "problem_statement": "<h1>Vulnerability Factor</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The developers at Amazon IAM are working on identifying vulnerabilities in their key generation process. The key is represented by an array of <code>n</code> integers, where the i<sup>th</sup> integer is denoted by <code>key[i]</code>. The vulnerability factor of the key (<code>key</code>) is defined as the maximum length of a subarray that has a Greatest Common Divisor (GCD) greater than 1.</p>\r\n<p>You are allowed to make a maximum of <code>maxChange</code> modifications to the array, where each modification consists of changing any one element in the array to any other value.</p>\r\n<p>Given an integer array <code>key</code> and an integer <code>maxChange</code>, find the least possible vulnerability factor of the key after making at most <code>maxChange</code> changes.</p>\r\n<p>Note: The length of an empty subarray is considered to be zero.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: key = [2, 2, 4, 9, 6], maxChange = 1</code></pre>\r\n<p><strong>Explanation:</strong> The length of key, n = 5. Here are some possible changes to make:</p>\r\n<ol>\r\n    <li>Change the first element to 3. The array becomes <code>key = [3, 2, 4, 9, 6]</code>. The length of the longest subarray with a GCD greater than 1 is 2 for the subarrays <code>[2, 4]</code> and <code>[9, 6]</code>.</li>\r\n    <li>Change the third element of the array to 5. The array becomes <code>key = [2, 2, 5, 9, 6]</code>. In this case, the length of the longest subarray with a GCD greater than 1 is 2 for the subarrays <code>[2, 2]</code> and <code>[9, 6]</code>.</li>\r\n</ol>\r\n<p>Since no operation can reduce the maximum length of any subarray with a GCD greater than 1 to less than 2, the vulnerability factor of the key is 2.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findVulnerabilityFactor</code> in the editor below.</p>\r\n<p><code>findVulnerabilityFactor</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int key[n]</code>: the original encryption key</li>\r\n    <li><code>int maxChange</code>: the maximum number of elements that can be changed</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>int</code>: the least possible vulnerability factor of the key</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= maxChange &lt;= n</code></li>\r\n    <li><code>1 &lt;= key[i] &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Sample Case 0</h2>\r\n<pre><code class='language-text'>Input:\r\n6\r\n5\r\n10\r\n20\r\n15\r\n5\r\n2\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> Here are some possible changes to achieve the least possible vulnerability factor:</p>\r\n<ol>\r\n    <li>First Change:\r\n        <ul>\r\n            <li>Modify the third element of the array to 2 and the fourth element to 3, so the updated key becomes <code>[5, 10, 2, 3, 15, 5]</code>.</li>\r\n            <li>In this case, the maximum length of a subarray with a GCD greater than 1 is 2. This applies to several subarrays:\r\n                <ul>\r\n                    <li><code>[5, 10]</code>, <code>[10, 2]</code>, <code>[3, 15]</code>, <code>[15, 5]</code></li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li>Second Change:\r\n        <ul>\r\n            <li>Modify the first element of the array to 7 and the fourth element to 9, so the updated key becomes <code>[7, 10, 20, 9, 15, 5]</code>.</li>\r\n            <li>Here as well, the maximum length of a subarray with a GCD greater than 1 is 2, for the following subarrays:\r\n                <ul>\r\n                    <li><code>[10, 20]</code>, <code>[15, 5]</code></li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ol>\r\n<p>Hence, after making the changes, the least possible vulnerability factor of the key is 2.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 601,
        "title": "Maximum Pages Before Suspension",
        "problem_statement": "<h1>Maximum Pages Before Suspension</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The engineering team at an Amazon fulfillment center is optimizing n high-performance printers, where each printer <code>i</code> can print <code>pages[i]</code> number of pages.</p>\r\n<p>Each printer can be in exactly one of three states: operational, idle, or suspended.</p>\r\n<ul>\r\n    <li>Printers initially start in an idle state and can be activated one by one.</li>\r\n    <li>However, if too many printers are active at once, some will get suspended due to their <code>threshold</code> limit defined by the suspension rule below.</li>\r\n</ul>\r\n\r\n<h3>Suspension Rule:</h3>\r\n<p>If there are at least <code>x</code> operational printers, all such printers <code>i</code> with <code>threshold[i] <= x</code> will get suspended and stop printing.</p>\r\n\r\n<h3>Task:</h3>\r\n<p>The goal is to determine the maximum number of pages that can be printed before printers get suspended.</p>\r\n\r\n<h3>Note:</h3>\r\n<ul>\r\n    <li>Activating a printer with <code>threshold[i] = x</code> allows it to print <code>pages[i]</code> pages. However, once at least <code>x</code> printers are active, their pages gets printed first, and then all the printers with <code>threshold <= x</code> will get suspended immediately.</li>\r\n    <li>Choosing the activation order carefully is therefore crucial to maximize the total printed pages before suspensions occur.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\npages = [2, 6, 10, 13]\r\nthreshold = [2, 1, 1, 1]\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> The optimal way to maximize the number of pages printed is as follows: (Using 1-based indexing)</p>\r\n<ul>\r\n    <li>First, the engineers decide to activate the 4th printer, which prints 13 pages. At this point, the total number of operational printers is 1. The printing of 13 pages is completed first, followed by the suspension of any printers exceeding their threshold.</li>\r\n    <li>Next, since the threshold for printers 2, 3, and 4 is 1, and there is now 1 operational printer (4th printer), those printers become damaged. Thus, all the printers (2nd, 3rd and 4th) with threshold = 1, gets suspended and stop functioning.</li>\r\n    <li>Next, only the printer the team can turn on is printer 1. By activating printer 1, they print 2 more pages. The number of operational printers is now 1, and because <code>threshold[1] = 2</code> printer 1 will not be suspended and remains functional.</li>\r\n</ul>\r\n<p>Thus, the total number of pages printed is 13 (from printer 4) + 2 (from printer 1) = 15.</p>\r\n<p>Hence, the answer is 15.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\npages = [1, 5, 2, 3, 3]\r\nthreshold = [3, 3, 2, 3, 3]\r\nOutput: 14</code></pre>\r\n<p><strong>Explanation:</strong> The optimal way to maximize the number of pages printed is as follows: (Assuming 1-based indexing)</p>\r\n<ul>\r\n    <li>1. Turn on the 4th printer, which prints 2 pages. Since the number of operational printers is 1 and does not exceed the threshold for any printer, no printer is suspended.</li>\r\n    <li>2. Next, turn on the 3rd printer, which prints 5 pages. Now, there are 2 operational printers. Since the threshold for printer 3 is <code>threshold[3] = 2</code> printer 3 gets suspended and stops functioning. So, now we have only 1 operational printer which is the 4th one.</li>\r\n    <li>3. Turn on the 1st printer, which prints 4 pages. There are now 2 operational printers, and printer 1 remains functional as its threshold is <code>threshold[1] = 3</code>.</li>\r\n    <li>4. Finally, turn on the 5th printer, which prints 3 pages. Now, there are 3 operational printers (printers 1, 2, 4, and 5). Since the thresholds for printers 1, 2, 4, and 5 are all less than or equal to 3, these printers get suspended and stops functioning.</li>\r\n</ul>\r\n<p>Thus, the total number of pages printed is:</p>\r\n<p>2 (from printer 4) + 5 (from printer 3) + 4 (from printer 1) + 3 (from printer 5) = 14</p>\r\n<p>Hence, the answer is 14.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getPages</code> in the editor below.</p>\r\n<p><code>getPages</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int pages[n]</code>: number of pages that printers can print</li>\r\n    <li><code>int threshold[n]</code>: threshold values of printers</li>\r\n</ul>\r\n\r\n<h3>Returns:</h3>\r\n<ul>\r\n    <li><code>long</code>: Maximum number of pages that you can print.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= threshold[i] <= n</code></li>\r\n    <li><code>1 <= pages[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 602,
        "title": "Maximize Optional Tasks",
        "problem_statement": "<h1>Maximize Optional Tasks</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In managing tasks at analytics platform, the goal is to efficiently schedule both required and optional tasks within specified time constraints.</p>\r\n<p>There are <code>n</code> required tasks and <code>n</code> optional tasks. Two arrays, <code>requiredTaskTimes</code> and <code>optionalTaskTimes</code>, provide information on task hours, where <code>requiredTaskTimes[i]</code> represents the duration in hours of the <code>i<sup>th</sup></code> required task, and <code>optionalTaskTimes[i]</code> represents the duration in hours of the <code>i<sup>th</sup></code> optional task.</p>\r\n<p>Each day on the platform has a time limit denoted as <code>dailyTimeLimit</code> in hours. One required task must be scheduled each day. If time remains after the required task you can choose to schedule at most one optional task on that day. It's essential to ensure that the total hours does not exceed the specified <code>dailyTimeLimit</code>.</p>\r\n<p>Determine the maximum number of optional tasks that can be scheduled during these <code>n</code> days while adhering to the given constraints.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>maximizeOptionalTasks</code> in the editor below.</p>\r\n<p><code>maximizeOptionalTasks</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int dailyTimeLimit</code>: the daily time limit for required tasks and optional tasks</li>\r\n    <li><code>int requiredTaskTimes[n]</code>: the duration of the required tasks</li>\r\n    <li><code>int optionalTaskTimes[n]</code>: the duration of the optional tasks</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>int</code>: the maximum number of optional tasks that can be scheduled during these <code>n</code> days.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ndailyTimeLimit = 7\r\nrequiredTaskTimes = [4, 5, 2, 4]\r\noptionalTaskTimes = [5, 6, 3, 4]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> One of the optimal scheduling can be:</p>\r\n<ul>\r\n    <li>Day 1: Schedule the first required task (duration 4) and the third optional task (duration 3). Total time is 4 + 3 = 7.</li>\r\n    <li>Day 2: Schedule the second required task (duration 5). Total time is 5. (No optional task can fit as 5 + any remaining optional task > 7).</li>\r\n    <li>Day 3: Schedule the third required task (duration 2) and first optional task (duration 5). Total time is 2 + 5 = 7.</li>\r\n    <li>Day 4: Schedule the fourth required task (duration 4). Total time is 4. (No optional task can fit as 4 + any remaining optional task > 7).</li>\r\n</ul>\r\n<p>There is no other arrangement of optional tasks for which more than 2 optional tasks can be scheduled in 4 days. Therefore, the maximum number of optional tasks that can be scheduled during these 4 days is 2.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\ndailyTimeLimit = 7\r\nrequiredTaskTimes = [6, 3, 1, 3, 4]\r\noptionalTaskTimes = [6, 2, 5, 5, 2]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The detailed explanation for this example was inconsistent in the source material and is omitted here. However, it is possible to schedule 4 optional tasks.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n, dailyTimeLimit &lt;= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= requiredTaskTimes[i], optionalTaskTimes[i] &lt;= dailyTimeLimit</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 603,
        "title": "Security Code Transformation",
        "problem_statement": "<h1>Security Code Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Developers at Amazon are creating a single sign-on application for the web apps in AWS. In one of its modules, a security code is in the form of a binary string that changes every minute. The characters at a pair of indices <em>i</em> and <em>i+1</em> are swapped such that the resulting code is the lexicographically maximum binary string that can be achieved in this step. If it is not possible to make the code lexicographically greater, then the code does not change.</p>\r\n<p>String <em>x</em> is lexicographically greater than string <em>y</em> if either <em>y</em> is a prefix of <em>x</em> (and <em>x ≠ y</em>), or there any <em>i</em> exists such that (0 ≤ <em>i</em> < min(|<em>x</em>|, |<em>y</em>|)), that <em>x<sub>i</sub> < y<sub>i</sub></em>, and for any <em>j</em> (0 ≤ <em>j</em> < <em>i</em>) <em>x<sub>j</sub> = y<sub>j</sub></em>. Here, |<em>a</em>| denotes the length of the string <em>a</em>.</p>\r\n<p>Given the string <code>initialCode</code>, and an integer <code>minutesElapsed</code>, find the security code after <code>minutesElapsed</code> minutes.</p>\r\n<p>Complete the function <code>getCodeAtTime</code> in the editor below.</p>\r\n<p><code>getCodeAtTime</code> has the following parameter:</p>\r\n<ul>\r\n<li><code>string initialCode</code>: the initial security code as a binary string</li>\r\n<li><code>long int minutesElapsed</code>: the number of minutes that pass and the number of changes to the code</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>string</code>: the security code after <code>minutesElapsed</code> minutes</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: initialCode = \"00100101\", minutesElapsed = 4\r\nOutput: \"10010001\"</code></pre>\r\n<p><strong>Explanation:</strong> The number of times the code changes is <code>minutesElapsed = 4</code>.</p>\r\n<ul>\r\n<li>After 1 minute, the characters at the second and the third positions are swapped and the code becomes code = \"01000101\"</li>\r\n<li>After 2 minutes, the characters at the first and the second positions are swapped and the code becomes code = \"10000101\"</li>\r\n<li>After 3 minutes, the characters at the fifth and the sixth positions are swapped and the code becomes code = \"10001001\"</li>\r\n<li>After 4 minutes, the characters at the fourth and the fifth positions are swapped and the code becomes code = \"10010001\"</li>\r\n</ul>\r\n<p>The security code after 4 minutes is \"10010001\", hence we return \"10010001\" as the answer.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: initialCode = \"0010\", minutesElapsed = 5\r\nOutput: \"1000\"</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>After 1 minute, the characters at the second and the third position get swapped and the code becomes code = \"0100\"</li>\r\n<li>After 2 minutes, the characters at the first and the second position get swapped and the code becomes code = \"1000\"</li>\r\n</ul>\r\n<p>After 2 minutes, it is not possible to make the code lexicographically greater, so no more changes occur.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= |initialCode| <= 10<sup>6</sup></code></li>\r\n<li><code>1 <= minutesElapsed <= 10<sup>12</sup></code></li>\r\n<li><code>initialCode</code> contains characters '0' and '1' only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 604,
        "title": "Median of Subarray Uniqueness",
        "problem_statement": "<h1>Median of Subarray Uniqueness</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The uniqueness of an array of integers is defined as the number of distinct elements present. For example, the uniqueness of <code>[1, 5, 2, 1, 3, 5]</code> is 4, element values 1, 2, 3 and 5. For an array <code>initialArray</code> of <code>n</code> integers, the uniqueness values of its subarrays is generated and stored in another array, call it <code>subarray_uniqueness</code>. Find the median of the generated array <code>subarray_uniqueness</code>.</p>\r\n\r\n<p><strong>Notes:</strong></p>\r\n<p>1. The median of a list is defined as the middle value of the list when it is sorted in non-decreasing order. If there are multiple choices for median, the smaller of the two values is taken. For example, the median of <code>[1, 5, 8]</code> is 5, and of <code>[2, 3, 7, 1]</code> is 3.</p>\r\n<p>2. A subarray is a contiguous part of the array. For example, <code>[1, 2, 3]</code> is a subarray of <code>[6, 1, 2, 3, 5]</code> but <code>[6, 2]</code> is not.</p>\r\n\r\n<p><strong>Function Description:</strong></p>\r\n<p>Complete the function <code>getMedianOfSubarrayUniqueness</code> in the editor below.</p>\r\n<p><code>getMedianOfSubarrayUniqueness</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int initialArray[n]</code>: the array</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the median of the generated array <code>subarray_uniqueness</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-c'>#include &lt;assert.h&gt;\r\n\r\n/*\r\n * Complete the 'getMedianOfSubarrayUniqueness' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts INTEGER_ARRAY initialArray as parameter.\r\n */\r\nint getMedianOfSubarrayUniqueness(int initialArray_count, int* initialArray) {\r\n    // Function body to be implemented\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: initialArray = [1,2,1], n = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> There are <code>n = 3</code> elements in <code>initialArray = [1, 2, 1]</code>. The subarrays along with their uniqueness values are:</p>\r\n<ul>\r\n    <li><code>[1]</code>: uniqueness = 1</li>\r\n    <li><code>[1, 2]</code>: uniqueness = 2</li>\r\n    <li><code>[1, 2, 1]</code>: uniqueness = 2</li>\r\n    <li><code>[2]</code>: uniqueness = 1</li>\r\n    <li><code>[2, 1]</code>: uniqueness = 2</li>\r\n    <li><code>[1]</code>: uniqueness = 1</li>\r\n</ul>\r\n<p>The <code>subarray_uniqueness</code> array is <code>[1, 2, 2, 1, 2, 1]</code>. After sorting, the array is <code>[1, 1, 1, 2, 2, 2]</code>. The choice is between the two bold values. Return the minimum of the two, 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: initialArray = [1,1], n = 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The subarrays along with their uniqueness values are:</p>\r\n<ul>\r\n    <li><code>[1]</code>: uniqueness = 1</li>\r\n    <li><code>[1, 1]</code>: uniqueness = 1</li>\r\n    <li><code>[1]</code>: uniqueness = 1</li>\r\n</ul>\r\n<p><code>subarray_uniqueness</code> is <code>[1, 1, 1]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= initialArray[i] &lt;= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 605,
        "title": "Minimum Even-Length Subsegments",
        "problem_statement": "<h1>Minimum Even-Length Subsegments</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon Prime Video is developing a new feature called \"Segmentify\". This feature applies to a video with N (even) visual frames, where each frame is represented by a binary character in the array <code>frames</code>. In this format, a \"0\" represents a black pixel, and a \"1\" represents a white pixel.</p>\r\n<p>Due to factors like lighting and camera angles, some frames may need horizontal or vertical flips (changing \"0\"s to \"1\"s and vice versa) to create consistent visuals. The objective is to divide the video into subsegments so that all frames in a subsegment are visually identical (i.e., the frames in a subsegment are either all \"0\"s or all \"1\"s). Additionally, each subsegment should have an even length.</p>\r\n<p>The goal is to accomplish this segmentation with two criteria in mind:</p>\r\n<ul>\r\n    <li>1. Minimize the number of flips required to form valid segments, let this be denoted by B.</li>\r\n    <li>2. Among all configurations requiring B flips, minimize the total number of subsegments.</li>\r\n</ul>\r\n<p>Given the binary string <code>frames</code>, determine the minimum number of even-length subsegments that can be created while utilising the least number of flips.</p>\r\n<p><strong>Note:</strong> A subsegment is a segment that can be derived from another segment by deleting some elements without changing the order of the remaining elements.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: frames = \"1110011000\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The initial string is \"1110011000\". Optimal moves are:</p>\r\n<ul>\r\n    <li>Flip the first 0 to 1 (<code>1110011000</code> -> <code>1111011000</code>)</li>\r\n    <li>Flip the first 0 to 1 (<code>1111011000</code> -> <code>1111111000</code>)</li>\r\n    <li>At last, again flip the first 0 to 1 (<code>1111111000</code> -> <code>1111111100</code>)</li>\r\n</ul>\r\n<p>The resulting string is \"1111111100\". This can be divided into two even-length subsegments: \"11111111\" (length 8) and \"00\" (length 2). This requires 3 flips. The minimum number of subsegments is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: frames = \"110011\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> In this example, the string \"110011\" can be divided into three even-length subsegments: \"11\", \"00\", and \"11\". No flips are required. The number of subsegments is 3. Recall that we need to minimize flips first and give that priority before minimizing segments.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinSubsegments</code> in the editor below.</p>\r\n<p><code>getMinSubsegments</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>string frames</code>: the frames of the video</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of subsegments.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<!-- No explicit constraints are visible in the image. -->",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 606,
        "title": "missingDigits",
        "problem_statement": "<h1>missingDigits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The software developers at Amazon are working on detecting configuration anomalies in a server. They are provided with a set of configurations represented by <strong>config</strong>, a string of concatenated decimal digits (0-9). However, some digits in these configurations have been inadvertently erased.</p>\r\n<p>These configurations were initially generated using a specific procedure involving two integer parameters, <strong>x</strong> and <strong>y</strong>.</p>\r\n<p>The procedure begins with the",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 607,
        "title": "Longest Substring Matching Regex Pattern",
        "problem_statement": "<h1>Longest Substring Matching Regex Pattern</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon is developing a string matching library. You are to develop a service that finds the longest substring that matches a given regex.</p>\r\n<p>More formally, you are given two strings, a text string <code>sourceString</code>, and a regex expression <code>pattern</code>. The string <code>pattern</code> contains exactly one wildcard character (<code>*</code>). A wildcard character matches any sequence of zero or more lowercase English characters. A regex matches some string if it is possible to replace the wildcard character with some sequence of characters such that the regex expression becomes equal to the string. No other character can be changed. For example, regex \"abc*bcd\" matches \"abcbcd\", \"abcfjbcd\", \"abccbcd\" whereas it does not match the strings \"abcbcd\", \"abzbcd\", \"abcd\".</p>\r\n<p>Return the length of the longest substring of <code>sourceString</code> that matches the expression <code>pattern</code>. Return -1 if there is no such substring.</p>\r\n<p><strong>Note:</strong> A substring is a contiguous sequence of characters within a string.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: sourceString = \"hackerrank\", pattern = \"ack*r\"\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The following substrings match the pattern:</p>\r\n<ul>\r\n    <li>\"acker\", we can replace <code>*</code> with \"e\" and pattern becomes equal to \"acker\", length = 5</li>\r\n    <li>\"ackerr\", we can replace <code>*</code> with \"err\" and pattern becomes equal to \"ackerr\", length = 6</li>\r\n</ul>\r\n<p>The longest matching substring has a length of 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: sourceString = \"programming\", pattern = \"r*in\"\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>\"rammin\", length = 6. We can replace <code>*</code> with \"amm\".</li>\r\n    <li>\"rogrammin\", length = 9. We can replace <code>*</code> with \"ogramm\".</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |sourceString|, |pattern| &lt;= 10^6</code></li>\r\n    <li><code>sourceString</code> contains lowercase English letters only.</li>\r\n    <li><code>pattern</code> contains lowercase English letters and exactly one wildcard (<code>*</code>) character.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findMaxRegexMatch</code> in the editor below.</p>\r\n<p><code>findMaxRegexMatch</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>sourceString</code>: a string</li>\r\n    <li><code>pattern</code>: a string</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the length of the longest substring of <code>sourceString</code> that matches <code>pattern</code> or -1 if there is none</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 608,
        "title": "Maximize Unique Remainders in Hash Array",
        "problem_statement": "<h1>Maximize Unique Remainders in Hash Array</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The developers at AWS IAM are designing a new checksum logic for an authentication module. The checksum is calculated as an array hash, where <code>hash[i] = secretKey[i] % param[i]</code>. There are <code>n</code> parameters for the checksum, where the <code>i<sup>th</sup></code> parameter is represented by <code>param[i]</code>. The secret key consists of <code>n</code> values, with the <code>i<sup>th</sup></code> value denoted as <code>secretKey[i]</code>.</p>\r\n<p>A good secret key is one that results in more distinct values in the hash array.</p>\r\n<p>Given the array <code>param</code> of size <code>n</code>, determine the maximum number of possible distinct values in the hash array by selecting an appropriate <code>secretKey</code>.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>findHash</code> in the editor below.</p>\r\n<p><code>findHash</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int param[n]</code>: the different parameters needed for the checksum logic</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the maximum number of distinct elements possible in hash.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n1\r\n1\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> If we set <code>secretKey = [1, 2, 3]</code>, we get hash = <code>[1 % 1, 2 % 1, 3 % 1] = [0, 0, 0]</code>, resulting in only one unique value, which is 0. Therefore, the answer is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n1\r\n2\r\n1\r\n3\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> If we set <code>secretKey = [0, 1, 1, 2]</code>, we get hash = <code>[0 % 1, 1 % 2, 1 % 1, 2 % 3] = [0, 1, 0, 2]</code>, resulting in three unique values: 0, 1, and 2. Therefore, the answer is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 <= param[i] <= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>The first line contains a single integer <code>n</code>, the number of element in <code>param</code>.</p>\r\n<p>Each of the next <code>n</code> lines contains an integer <code>param[i]</code>.</p>\r\n\r\n<pre><code class='language-javascript'>int findHash(vector&lt;int&gt; param) {\r\n    // Function body to be completed\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    },
    {
        "id": 677,
        "title": "Word Conjugates",
        "problem_statement": "<h1>Word Conjugates</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon has introduced an innovative tool to explore the fascinating world of \"Word Conjugates\", allowing users to analyze strings consisting of only characters: 'a', 'b', 'c' and 'd'.</p>\r\n<p>The concept of conjugates follows a unique pairing mechanism where 'a' pairs with 'b', 'c' pairs with 'd' and vice-versa. As a result, there are only four possible valid conjugate pairs: ('a', 'b'), ('b', 'a'), ('c', 'd'), and ('d', 'c').</p>\r\n<p>The objective is to calculate the total number of valid substrings in a given string s.</p>\r\n<p>A string is considered valid if:</p>\r\n<ul>\r\n    <li>There exists a permutation of the string such that the original string and its permutation are conjugates of each other.</li>\r\n    <li>Two strings s and t of the same length say n are considered conjugates if, for every index i (0 &lt;= i &lt; n), the pair formed by the characters at that index (s[i], t[i]) must be a conjugate pair.</li>\r\n</ul>\r\n<p>Given a string s that only contains the characters 'a', 'b', 'c' and 'd'. Return the total number of valid substrings in the string s according to the specified conjugate rule.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>Permutation of a string refers to any possible rearrangement of its characters. For example, the string \"cat\" has 6 possible permutations: \"cat\", \"cta\", \"act\", \"atc\", \"tac\", \"tca\".</li>\r\n    <li>A substring of a string is defined as any contiguous part of that string. For example, the string \"abc\" has the following substrings possible: \"a\", \"b\", \"c\", \"ab\", \"bc\", and \"abc\", whereas \"ca\", \"ba\" etc. are not considered as its substrings.</li>\r\n</ul>\r\n<p>Complete the function <code>getConjugatePairs</code> in the editor below.</p>\r\n<p><code>getConjugatePairs</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string s</code>: a string that only contains the characters 'a', 'b', 'c' and 'd'</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>long</code>: The total number of valid substrings of given string s</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abdc\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Out of all possible substrings of the given string s the valid substrings include: {\"abcd\", \"ab\", \"dc\"}.</p>\r\n<ul>\r\n    <li>Substring \"abdc\" is valid as one of its permutations, \"bacd\", forms the conjugate of \"abdc\".</li>\r\n    <li>Substring \"ab\" is valid because it has two permutations: \"ab\" and \"ba\". The permutation \"ba\" forms a conjugate of \"ab\".</li>\r\n    <li>Substring \"dc\" is valid because one of its permutations, \"cd\" is the conjugate of \"dc\".</li>\r\n</ul>\r\n<p>Thus, in total, there are 3 valid substrings of string s = \"abdc\". For all other substrings, no permutation exists that forms a conjugate with the original substring. Hence, the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"adcb\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Out of all possible substrings of the given string s, all the valid substrings include: {\"dc\", \"adcb\"}</p>\r\n<ul>\r\n    <li>Substring \"dc\" is valid as one of its permutations \"cd\" is its conjugate.</li>\r\n    <li>Substring \"adcb\" is valid as one of its permutations \"bcda\" is its conjugate.</li>\r\n</ul>\r\n<p>There are in total 2 valid substrings of \"adcb\". For all other substrings, no permutation exists that forms a conjugate with the original substring. Hence, return 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: s = \"abcdad\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Out of all possible substrings of the given string s, all the valid substrings include: {\"ab\", \"cd\", \"abcd\", \"bcda\"}</p>\r\n<ul>\r\n    <li>Substring \"ab\" is valid as one of its permutations \"ba\" is its conjugate.</li>\r\n    <li>Substring \"cd\" is valid as one of its permutations \"dc\" is its conjugate.</li>\r\n    <li>Substring \"abcd\" is valid as one of its permutations \"badc\" is its conjugate.</li>\r\n    <li>Substring \"bcda\" is valid as one of its permutations \"bdcb\" is its conjugate.</li>\r\n</ul>\r\n<p>Thus there are 4 valid substrings of \"abcdad\". For all other substrings, no permutation exists that forms a conjugate with the original substring. Hence, return 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |s| &lt;= 4 * 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_july",
        "company_id": 179
    }
]