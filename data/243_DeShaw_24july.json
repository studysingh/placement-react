[
    {
        "id": 765,
        "title": "Minimum Indices to Cover Positions",
        "problem_statement": "```html\r\n<h1>Minimum Indices to Cover Positions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>arr</code> of length <code>n</code>.</p>\r\n<p>You can choose a set of indices and for each chosen index <code>i</code>, you can perform one of the following operations:</p>\r\n<ul>\r\n    <li>Cover positions from <code>max(i - arr[i] + 1, 0)</code> to <code>i</code>.</li>\r\n    <li>Cover positions from <code>i</code> to <code>min(i + arr[i] - 1, n - 1)</code>.</li>\r\n</ul>\r\n<p>Your task is to find the minimum number of indices to choose so that all positions from <code>0</code> to <code>n - 1</code> are covered.</p>\r\n<p>Complete the function <code>getMinIndices</code> in the editor below.</p>\r\n<p><code>getMinIndices</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int arr[]</code>: the elements of <code>arr</code>.</li>\r\n</ul>\r\n<p>Returns</p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of indices needed.</li>\r\n</ul>\r\n<p>The function signature is:</p>\r\n<pre><code class='language-javascript'>int getMinIndices(vector<int> arr)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 2, arr = [2, 1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> If we choose index 0 and use it to the right, it covers positions 0 to <code>min(0 + 2 - 1, 2 - 1) = min(1, 1) = 1</code>. This covers both positions 0 and 1. Hence, the answer is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [1, 2, 1, 1]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One way to cover all positions is:</p>\r\n<ul>\r\n    <li>Choose index 1 and use it to the left &rarr; covers positions 0 and 1.</li>\r\n    <li>Choose index 2 and use it to the right &rarr; covers position 2.</li>\r\n    <li>Choose index 3 and use it to the right &rarr; covers position 3.</li>\r\n</ul>\r\n<p>All positions 0 to 3 are now covered using 3 indices. Hence, the answer is 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [1, 2, 3, 4]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> If we choose index 3 and use it to the left, it covers positions from <code>max(3 - arr[3] + 1, 0) = max(3 - 4 + 1, 0) = max(0, 0) = 0</code>, covering all positions (0, 1, 2, 3). Hence, the answer is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 500</code></li>\r\n    <li><code>1 &le; arr[i] &le; n</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DeShaw_24july",
        "company_id": 243
    },
    {
        "id": 767,
        "title": "Cost of Lineups",
        "problem_statement": "<h1>Cost of Lineups</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a sports league, each player is assigned a rank from 1 to k. You are analyzing all possible ways to arrange n players in a lineup, where each player's rank is an integer from 1 to k.</p>\r\n<p>A team is defined as a group of k consecutive players (a contiguous subarray of length k). A team is considered perfect if it contains every rank from 1 to k exactly once (the team is a permutation of {1, 2, ..., k}).</p>\r\n<p>The cost of a lineup is the maximum number of non-overlapping perfect teams that can be selected from it. Each player can belong to at most one perfect team.</p>\r\n<p>For example, suppose n = 10, k = 3, and the array is [1, 2, 1, 3, 2, 3, 1, 2, 3, 1]. In that case, its cost is 2 because, for example, we can choose the subarray from the 2nd element to the 4th element and from the 7th element to the 9th element, and we can show that it's impossible to choose more than 2 subarrays.</p>\r\n<p>Calculate the sum of costs over all possible lineups of length n (all arrays of length n with elements from 1 to k). Output the result modulo 998244353.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>findTotalCost</code> in the editor below.</p>\r\n<p>The function is expected to return an <code>INTEGER</code>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>INTEGER n</code>: the number of players</li>\r\n    <li><code>INTEGER k</code>: the maximum rank of a player</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the total sum of cost over all possible lineups modulo 998244353.</p>\r\n<pre><code class='language-javascript'>int findTotalCost(int n, int k) {\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1: (Detailed Explanation for n=2, k=2)</h3>\r\n<pre><code class='language-text'>Input: n = 2, k = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> All possible lineups and their costs are:</p>\r\n<ul>\r\n    <li>[1, 1] -> Both players have rank 1, so they cannot form a perfect team (need both ranks 1 and 2). Hence, the cost is 0.</li>\r\n    <li>[1, 2] -> Players have ranks 1 and 2. The only possible team contains both ranks exactly once. Hence, the cost is 1.</li>\r\n    <li>[2, 1] -> Players have ranks 2 and 1. The only possible team contains both ranks exactly once. Hence, the cost is 1.</li>\r\n    <li>[2, 2] -> Both players have rank 2, so they cannot form a perfect team (need both ranks 1 and 2). Hence, the cost is 0.</li>\r\n</ul>\r\n<p>Hence, the sum of costs over all possible lineups is 2.</p>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<pre><code class='language-text'>Input: n = 4, k = 2\r\nOutput: 18</code></pre>\r\n<p><strong>Explanation:</strong> Some possible lineups and their costs are:</p>\r\n<ul>\r\n    <li>[1, 2, 1, 2] -> There are two non-overlapping perfect teams: the first and second players, and the third and fourth players. Both teams contain both ranks 1 and 2. Hence, the cost is 2.</li>\r\n    <li>[1, 1, 1, 2] -> Only one perfect team can be formed: the third and fourth players. This pair contains both ranks 1 and 2. Hence, the cost is 1.</li>\r\n    <li>[1, 1, 1, 1] -> No pair of consecutive players contains both ranks 1 and 2, so no perfect team can be formed. Hence, the cost is 0.</li>\r\n    <li>[2, 1, 2, 1] -> There are two non-overlapping perfect teams: the first and second players, and the third and fourth players. Both pairs contain both ranks 1 and 2. Hence, the cost is 2.</li>\r\n</ul>\r\n<p>The sum of costs over all possible lineups is 18. Hence, the answer is 18.</p>\r\n\r\n<h3>Example 3: (Sample Case 1)</h3>\r\n<pre><code class='language-text'>Input: n = 4, k = 3\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong> Some possible lineups and their costs are:</p>\r\n<ul>\r\n    <li>[1, 2, 3, 1] -> Only one perfect team can be formed: the first, second, and third players. Hence, the cost is 1.</li>\r\n    <li>[1, 1, 3, 2] -> Only one perfect team can be formed: the second, third, and fourth players. Hence, the cost is 1.</li>\r\n    <li>[3, 1, 2, 3] -> Only one perfect team can be formed: the first, second, and third players. Hence, the cost is 1.</li>\r\n    <li>[2, 1, 3, 1] -> Only one perfect team can be formed: the second, third, and fourth players. Hence, the cost is 1.</li>\r\n</ul>\r\n<p>The sum of costs over all possible lineups is 30. Hence, the answer is 30.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= k <= n <= 4000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DeShaw_24july",
        "company_id": 243
    }
]