[
    {
        "id": 831,
        "title": "Directory Structure (SDE Question) - Part A",
        "problem_statement": "<h1>Directory Structure (SDE Question) - Part A</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a directory structure represented as a tree, where each node represents a directory that can have any number of child directories.</p>\r\n<ul>\r\n<li>Each child directory will have a unique name.</li>\r\n<li>The second line of the input will contain the root name and its child directories.</li>\r\n</ul>\r\n<p>Based on the given input, you have to construct the directory structure and implement three functions: <code>countDescendants</code>, <code>cutPaste</code> and <code>copyPaste</code>.</p>\r\n\r\n<p>Example Tree:</p>\r\n<pre><code class='language-text'>root\r\n/ | \\\r\na  b  c\r\n/ \\   / \\\r\nd  e  f  g</code></pre>\r\n\r\n<p>1. <strong>countDescendants(path)</strong></p>\r\n<ul>\r\n<li>Takes one argument: directory path</li>\r\n<li>Returns the number of descendants of the directory</li>\r\n</ul>\r\n<p>Examples:</p>\r\n<pre><code class='language-text'>countDescendants(\"root\") => 7\r\ncountDescendants(\"root/a\") => 2\r\ncountDescendants(\"root/b\") => 0\r\ncountDescendants(\"root/c\") => 2\r\ncountDescendants(\"root/d\") => 0\r\ncountDescendants(\"root/e\") => 0</code></pre>\r\n\r\n<p>2. <strong>cutPaste(src, dest)</strong></p>\r\n<ul>\r\n<li>It takes two arguments: source directory and destination directory</li>\r\n<li>Cuts the source directory from its parent and pastes it inside the destination directory</li>\r\n</ul>\r\n<p>Example:</p>\r\n<pre><code class='language-text'>cutPaste(\"root/a\", \"root/c\")</code></pre>\r\n<p>Tree becomes:</p>\r\n<pre><code class='language-text'>root\r\n/ | \\\r\nb  c\r\n   / | \\\r\n  a  f  g\r\n  / \\\r\n d  e</code></pre>\r\n\r\n<p>3. <strong>copyPaste(src, dest)</strong></p>\r\n<ul>\r\n<li>It takes two arguments: source directory and destination directory</li>\r\n<li>Copies the source directory and pastes it into the destination</li>\r\n</ul>\r\n<p>Example:</p>\r\n<pre><code class='language-text'>copyPaste(\"root/a\", \"root/c\")</code></pre>\r\n<p>Tree becomes:</p>\r\n<pre><code class='language-text'>root\r\n/ | \\\r\na  b  c\r\n/ \\   / | \\\r\nd  e  a  f  g\r\n      / \\\r\n     d  e</code></pre>\r\n\r\n<p><strong>Output:</strong></p>\r\n<ul>\r\n<li><code>countDescendants(node)</code>: print the total number of descendants or \"Invalid command\"</li>\r\n<li><code>cutPaste(src, dest)</code>: print \"OK\" or \"Invalid command\"</li>\r\n<li><code>copyPaste(src, dest)</code>: print \"OK\" or \"Invalid command\"</li>\r\n</ul>\r\n\r\n<p><strong>Negative Conditions:</strong></p>\r\n<ul>\r\n<li>If the source is an ancestor of the destination, print \"Invalid command\"</li>\r\n<li>If source == destination, print \"Invalid command\"</li>\r\n<li>If the destination already has a directory of the source's name, print \"Invalid command\"</li>\r\n<li>If not a valid path for the source or destination, print \"Invalid command\"</li>\r\n<li>If command causes total nodes > 10^6, print \"Invalid command\"</li>\r\n</ul>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n<li>Line 1: n q (number of structure lines and number of commands)</li>\r\n<li>Lines 2 to n+1: Tree structure in the format:\r\n<pre><code class='language-text'><parent> <child1> <child2> ...</code></pre>\r\n</li>\r\n<li>Lines n+2 to n+q+1: Commands</li>\r\n</ul>\r\n\r\n<p>Examples:</p>\r\n<pre><code class='language-text'>countDescendants <path>\r\ncopyPaste <src> <dst>\r\ncutPaste <src> <dst></code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 &lt;= n &lt;= 10^5 (structure lines)</li>\r\n<li>1 &lt;= q &lt;= 10^5 (commands)</li>\r\n<li>Total number of nodes at any point: &lt;= 10^6</li>\r\n<li>The tree will be balanced at any point</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 3 5\r\nroot a b c\r\nroot/a d e\r\nroot/c f g\r\ncountDescendants root/a\r\ncopyPaste root/a/d root/b\r\ncutPaste root/c/f root/b\r\ncountDescendants root/b\r\ncountDescendants root/c/f\r\nOutput: 2\r\nOK\r\nOK\r\n2\r\nInvalid command</code></pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<p><strong>Limits:</strong></p>\r\n<ul>\r\n<li>Time Limit: 5.0 sec(s) for each input file</li>\r\n<li>Memory Limit: 256 MB</li>\r\n<li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<p><strong>Scoring:</strong></p>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<p><strong>Allowed Languages:</strong></p>\r\n<p>C, C++14, C++17, C#, Go, Java 8, Java 14, Java 17, JavaScript(Node.js), Python, Python 3, Python 3.8</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Namma yatri_12april",
        "company_id": 255
    }
]