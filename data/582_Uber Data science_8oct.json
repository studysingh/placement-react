[
    {
        "id": 1666,
        "title": "SQL: Auction Web Service Lot Statistics",
        "problem_statement": "<h1>SQL: Auction Web Service Lot Statistics</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Generate a report of available auction lots and their offer statistics.</p>\r\n<p>Your result should include:</p>\r\n<ul>\r\n    <li>Lot name</li>\r\n    <li>Number of offers</li>\r\n    <li>Minimum offer amount</li>\r\n    <li>Average offer amount (rounded to two decimal places)</li>\r\n    <li>Maximum offer amount</li>\r\n</ul>\r\n<p>Requirements:</p>\r\n<ul>\r\n    <li>Include lots with no offers (showing NULL for min/avg/max).</li>\r\n    <li>Format decimal values to show two places after the decimal, e.g., 5.00.</li>\r\n    <li>Sort results in descending order by number of offers, then ascending by lot name.</li>\r\n</ul>\r\n\r\n<p><strong>Schema:</strong></p>\r\n<p><strong>Table: <code>lots</code></strong></p>\r\n<pre><code class='language-text'>+------+--------------+-----------------+-----------------+\r\n| name | type         | constraint      | description     |\r\n+------+--------------+-----------------+-----------------+\r\n| id   | INT          | PRIMARY KEY     | Lot ID          |\r\n| name | VARCHAR(255) |                 | Lot name        |\r\n+------+--------------+-----------------+-----------------+</code></pre>\r\n\r\n<p><strong>Table: <code>offers</code></strong></p>\r\n<pre><code class='language-text'>+----------+--------------+---------------------------------+-----------------+\r\n| name     | type         | constraint                      | description     |\r\n+----------+--------------+---------------------------------+-----------------+\r\n| lot_id   | INT          | FOREIGN KEY (lot_id => lots.id) | Lot ID          |\r\n| amount   | DECIMAL(6,2) |                                 | Offer amount    |\r\n+----------+--------------+---------------------------------+-----------------+</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<p><strong>Table: <code>lots</code></strong></p>\r\n<pre><code class='language-text'>+----+----------------------------------------------------------+\r\n| id | name                                                     |\r\n+----+----------------------------------------------------------+\r\n| 1  | Merremia quinquefolia (L.) Hallier f.                    |\r\n| 2  | Plantago maritima L.                                     |\r\n| 3  | Hohenbergia antillana Mez                                |\r\n| 4  | Penstemon eriantherus Pursh var. argillosus M.E. Jones   |\r\n+----+----------------------------------------------------------+</code></pre>\r\n\r\n<p><strong>Table: <code>offers</code></strong></p>\r\n<pre><code class='language-text'>+--------+----------+\r\n| lot_id | amount   |\r\n+--------+----------+\r\n| 1      | 510.51   |\r\n| 2      | 703.80   |\r\n| 2      | 181.80   |\r\n| 1      | 38.06    |\r\n| 3      | 368.78   |\r\n| 3      | 91.40    |\r\n| 2      | 413.80   |\r\n| 3      | 157.99   |\r\n| 3      | 885.82   |\r\n| 2      | 863.99   |\r\n| 1      | 307.61   |\r\n| 2      | 120.39   |\r\n| 1      | 771.96   |\r\n| 2      | 801.42   |\r\n| 3      | 871.59   |\r\n| 1      | 541.61   |\r\n| 3      | 477.62   |\r\n| 2      | 303.29   |\r\n| 2      | 612.83   |\r\n| 3      | 464.98   |\r\n+--------+----------+</code></pre>\r\n\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+-----------------------------------------------------------+--------+-----------+-----------+-----------+\r\n| name                                                      | offers | min_offer | avg_offer | max_offer |\r\n+-----------------------------------------------------------+--------+-----------+-----------+-----------+\r\n| Plantago maritima L.                                      | 9      | 120.39    | 485.57    | 863.99    |\r\n| Hohenbergia antillana Mez                                 | 6      | 91.40     | 491.57    | 885.82    |\r\n| Merremia quinquefolia (L.) Hallier f.                     | 5      | 38.06     | 433.95    | 771.96    |\r\n| Penstemon eriantherus Pursh var. argillosus M.E. Jones    | 0      | NULL      | NULL      | NULL      |\r\n+-----------------------------------------------------------+--------+-----------+-----------+-----------+</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iomanip>\n#include <optional>\n#include <limits>\n#include <algorithm>\n\n// Since the problem is SQL-based, we define structs to represent the table data\n// for a C++ implementation. The input reading in main assumes a format where\n// the number of rows is given, followed by the data for each row.\n\nstruct Lot {\n    int id;\n    std::string name;\n};\n\nstruct Offer {\n    int lot_id;\n    double amount;\n};\n\nstruct ReportRow {\n    std::string name;\n    int offers;\n    std::optional<double> min_offer;\n    std::optional<double> avg_offer;\n    std::optional<double> max_offer;\n};\n\nclass Solution {\npublic:\n    std::vector<ReportRow> generate_report(const std::vector<Lot>& lots, const std::vector<Offer>& offers) {\n        // Core logic to generate the report goes here.\n        // This would typically involve:\n        // 1. Using a map to group offers by lot_id and calculate statistics.\n        // 2. Iterating through lots to build the final report, including those with no offers.\n        // 3. Sorting the result as per the requirements.\n        std::vector<ReportRow> result;\n        return result;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement is for SQL. The input format below is an\n    // interpretation for a C++ competitive programming context.\n    // It assumes the number of lots and offers are provided first.\n\n    int num_lots;\n    std::cin >> num_lots;\n    std::vector<Lot> lots(num_lots);\n    for (int i = 0; i < num_lots; ++i) {\n        std::cin >> lots[i].id >> std::ws; // Read id, then consume whitespace before getline\n        std::getline(std::cin, lots[i].name);\n    }\n\n    int num_offers;\n    std::cin >> num_offers;\n    std::vector<Offer> offers(num_offers);\n    for (int i = 0; i < num_offers; ++i) {\n        std::cin >> offers[i].lot_id >> offers[i].amount;\n    }\n\n    Solution solution;\n    std::vector<ReportRow> report = solution.generate_report(lots, offers);\n\n    for (const auto& row : report) {\n        std::cout << row.name << \" \"\n                  << row.offers << \" \";\n        \n        if (row.min_offer) {\n            std::cout << std::fixed << std::setprecision(2) << *row.min_offer;\n        } else {\n            std::cout << \"NULL\";\n        }\n        std::cout << \" \";\n\n        if (row.avg_offer) {\n            std::cout << std::fixed << std::setprecision(2) << *row.avg_offer;\n        } else {\n            std::cout << \"NULL\";\n        }\n        std::cout << \" \";\n\n        if (row.max_offer) {\n            std::cout << std::fixed << std::setprecision(2) << *row.max_offer;\n        } else {\n            std::cout << \"NULL\";\n        }\n        std::cout << \"\\n\";\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Uber Data science_8oct",
        "company_id": 582
    },
    {
        "id": 1667,
        "title": "SQL: The Yellow Pages Companies Report",
        "problem_statement": "<h1>SQL: The Yellow Pages Companies Report</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Create a report of companies and their overall ratings based on categories in which they are listed.</p>\r\n<p>Your result should include:</p>\r\n<ul>\r\n    <li>Company name</li>\r\n    <li>Address</li>\r\n    <li>Phone number</li>\r\n    <li>Overall review rating in format: \"X.X (Y categories)\" where X.X is the average rating rounded to one decimal place and Y is the number of categories.</li>\r\n</ul>\r\n<p>Requirements:</p>\r\n<ul>\r\n    <li>Calculate the average review rating across all categories for each company.</li>\r\n    <li>Sort results in descending order by average rating (before rounding), then ascending by company name.</li>\r\n</ul>\r\n\r\n<h2>Schema</h2>\r\n<p>The database schema is as follows:</p>\r\n<p><strong>Table: <code>companies</code></strong></p>\r\n<ul>\r\n    <li><code>id</code> (SMALLINT): unique id, primary key</li>\r\n    <li><code>name</code> (VARCHAR(255))</li>\r\n    <li><code>address</code> (VARCHAR(255))</li>\r\n    <li><code>phone</code> (VARCHAR(255))</li>\r\n</ul>\r\n<p><strong>Table: <code>categories</code></strong></p>\r\n<ul>\r\n    <li><code>company_id</code> (SMALLINT): foreign key, companies.id</li>\r\n    <li><code>name</code> (VARCHAR(255))</li>\r\n    <li><code>review_rating</code> (SMALLINT)</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Given the following sample <code>companies</code> and <code>categories</code> tables:</p>\r\n<pre><code class='language-text'>-- companies table\r\n+----+------------------------------------+--------------------+--------------------+\r\n| id | name                               | address            | phone              |\r\n+----+------------------------------------+--------------------+--------------------+\r\n| 1  | Casper, Oberbrunner and Williamson | 53 Di Loreto Hill  | +420 (569) 566-3689|\r\n| 2  | Tromp, Kozey and Abbott            | 84 Mcguire Plaza   | +62 (145) 722-2330 |\r\n| 3  | Gerlach, Hayes and Stamm           | 80 Service Point   | +86 (731) 234-4119 |\r\n| 4  | Wolff-Fadel                        | 06 Fair Oaks Trail | +7 (894) 233-0976  |\r\n| 5  | Kihn-Cronin                        | 483 Nobel Road     | +1 (396) 693-1661  |\r\n+----+------------------------------------+--------------------+--------------------+\r\n\r\n-- categories table\r\n+------------+------------------------------------------+---------------+\r\n| company_id | name                                     | review_rating |\r\n+------------+------------------------------------------+---------------+\r\n| 1          | HVAC                                     | 2             |\r\n| 2          | HVAC                                     | 2             |\r\n| 2          | Retaining Wall and Brick Pavers          | 1             |\r\n| 2          | Rebar & Wire Mesh Install                | 2             |\r\n| 3          | Prefabricated Aluminum Metal Canopies    | 2             |\r\n| 3          | Prefabricated Aluminum Metal Canopies    | 0             |\r\n| 3          | RF Shielding                             | 0             |\r\n| 3          | Overhead Doors                           | 0             |\r\n| 3          | Rebar & Wire Mesh Install                | 5             |\r\n| 4          | Termite Control                          | 0             |\r\n| 4          | Sitework & Site Utilities                | 0             |\r\n| 4          | Electrical and Fire Alarm                | 2             |\r\n| 4          | Masonry                                  | 2             |\r\n| 4          | Temp Fencing, Decorative Fencing and Gates | 0             |\r\n| 4          | Elevator                                 | 1             |\r\n| 4          | Drywall & Acoustical (FED)               | 5             |\r\n| 5          | Asphalt Paving                           | 0             |\r\n| 5          | Glass & Glazing                          | 1             |\r\n| 5          | Framing (Steel)                          | 3             |\r\n| 5          | Structural & Misc Steel Erection         | 1             |\r\n+------------+------------------------------------------+---------------+\r\n</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+------------------------------------+--------------------+--------------------+-----------------------+\r\n| name                               | address            | phone              | overall_review_rating |\r\n+------------------------------------+--------------------+--------------------+-----------------------+\r\n| Casper, Oberbrunner and Williamson | 53 Di Loreto Hill  | +420 (569) 566-3689| 2.0 (1 categories)    |\r\n| Tromp, Kozey and Abbott            | 84 Mcguire Plaza   | +62 (145) 722-2330 | 1.7 (3 categories)    |\r\n| Wolff-Fadel                        | 06 Fair Oaks Trail | +7 (894) 233-0976  | 1.7 (6 categories)    |\r\n| Gerlach, Hayes and Stamm           | 80 Service Point   | +86 (731) 234-4119 | 1.5 (6 categories)    |\r\n| Kihn-Cronin                        | 483 Nobel Road     | +1 (396) 693-1661  | 1.3 (4 categories)    |\r\n+------------------------------------+--------------------+--------------------+-----------------------+\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The report calculates the average review rating and the count of categories for each company, then formats the overall review rating as \"X.X (Y categories)\". The results are sorted by the unrounded average rating in descending order, and then by company name in ascending order for ties.</p>\r\n<ul>\r\n    <li><strong>Casper, Oberbrunner and Williamson (id 1):</strong>\r\n        <ul>\r\n            <li>Review ratings: [2]</li>\r\n            <li>Sum of ratings: 2</li>\r\n            <li>Number of categories: 1</li>\r\n            <li>Average rating: 2 / 1 = 2.0</li>\r\n            <li>Rounded average: 2.0</li>\r\n            <li>Formatted rating: \"2.0 (1 categories)\"</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Tromp, Kozey and Abbott (id 2):</strong>\r\n        <ul>\r\n            <li>Review ratings: [2, 1, 2]</li>\r\n            <li>Sum of ratings: 2 + 1 + 2 = 5</li>\r\n            <li>Number of categories: 3</li>\r\n            <li>Average rating: 5 / 3 = 1.666...</li>\r\n            <li>Rounded average: 1.7</li>\r\n            <li>Formatted rating: \"1.7 (3 categories)\"</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Wolff-Fadel (id 4):</strong>\r\n        <ul>\r\n            <li>Based on the expected output, the company has 6 categories and an average rating of 1.7. This implies a sum of ratings that, when divided by 6, results in approximately 1.666... (e.g., 10/6).</li>\r\n            <li>Formatted rating: \"1.7 (6 categories)\"</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Gerlach, Hayes and Stamm (id 3):</strong>\r\n        <ul>\r\n            <li>Based on the expected output, the company has 6 categories and an average rating of 1.5. This implies a sum of ratings that, when divided by 6, results in exactly 1.5 (e.g., 9/6).</li>\r\n            <li>Formatted rating: \"1.5 (6 categories)\"</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Kihn-Cronin (id 5):</strong>\r\n        <ul>\r\n            <li>Review ratings: [0, 1, 3, 1]</li>\r\n            <li>Sum of ratings: 0 + 1 + 3 + 1 = 5</li>\r\n            <li>Number of categories: 4</li>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <iomanip>\n#include <numeric>\n#include <algorithm>\n#include <cmath>\n#include <limits>\n\nstruct Company {\n    int id;\n    std::string name;\n    std::string address;\n    std::string phone;\n};\n\nstruct Category {\n    int company_id;\n    std::string name;\n    int review_rating;\n};\n\nstruct ReportEntry {\n    std::string name;\n    std::string address;\n    std::string phone;\n    std::string overall_review_rating;\n};\n\nclass Solution {\npublic:\n    std::vector<ReportEntry> generateReport(const std::vector<Company>& companies, const std::vector<Category>& categories) {\n        // Core logic to be implemented here\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // Since the problem is SQL-based, a standard input format is not provided.\n    // We assume a plausible format: counts N and M, followed by the data for\n    // companies and categories, with each field on a new line.\n\n    int n_companies;\n    std::cin >> n_companies;\n    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n    std::vector<Company> companies(n_companies);\n    for (int i = 0; i < n_companies; ++i) {\n        std::string id_str;\n        std::getline(std::cin, id_str);\n        companies[i].id = std::stoi(id_str);\n        std::getline(std::cin, companies[i].name);\n        std::getline(std::cin, companies[i].address);\n        std::getline(std::cin, companies[i].phone);\n    }\n\n    int n_categories;\n    std::cin >> n_categories;\n    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n    std::vector<Category> categories(n_categories);\n    for (int i = 0; i < n_categories; ++i) {\n        std::string company_id_str;\n        std::getline(std::cin, company_id_str);\n        categories[i].company_id = std::stoi(company_id_str);\n        \n        std::getline(std::cin, categories[i].name);\n        \n        std::string rating_str;\n        std::getline(std::cin, rating_str);\n        categories[i].review_rating = std::stoi(rating_str);\n    }\n\n    Solution solution;\n    std::vector<ReportEntry> report = solution.generateReport(companies, categories);\n\n    for (const auto& entry : report) {\n        std::cout << entry.name << \" | \"\n                  << entry.address << \" | \"\n                  << entry.phone << \" | \"\n                  << entry.overall_review_rating << std::endl;\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Uber Data science_8oct",
        "company_id": 582
    },
    {
        "id": 1668,
        "title": "SQL: Bond Maturity Analysis",
        "problem_statement": "<h1>SQL: Bond Maturity Analysis</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Assess the maturity dates associated with mortgages within mortgage-backed bonds for a team of financial analysts.</p>\r\n<p>The result should include these columns:</p>\r\n<ul>\r\n    <li><strong><code>name</code></strong> - name of the bond</li>\r\n    <li><strong><code>maturity_dates</code></strong> - total number of maturity dates for a specific bond</li>\r\n    <li><strong><code>earliest_maturity</code></strong> - earliest maturity date for a specific bond</li>\r\n    <li><strong><code>latest_maturity</code></strong> - latest maturity date for a specific bond</li>\r\n    <li><strong><code>avg_days_to_maturity</code></strong> - average days to maturity for a specific bond, rounded up to the nearest whole number, e.g. 4.01 rounds up to 5</li>\r\n</ul>\r\n<p>The result should be sorted in ascending order by name.</p>\r\n\r\n<h2>Schema</h2>\r\n<p><strong><code>bonds</code> table:</strong></p>\r\n<pre><code class='language-text'>name       type          constraint    description\r\n---------- ------------- ------------- --------------------\r\nid         INT           PRIMARY KEY   Bond ID\r\nname       VARCHAR(255)                Name of the bond</code></pre>\r\n\r\n<p><strong><code>maturities</code> table:</strong></p>\r\n<pre><code class='language-text'>name       type          constraint               description\r\n---------- ------------- ------------------------ ------------------------------\r\nbond_id    INT           FOREIGN KEY(bond_id)     Reference to the bonds.id\r\nmaturity   DATE                                   Maturity date of the bond</code></pre>\r\n\r\n<h2>Sample Data Tables</h2>\r\n<p><strong><code>bonds</code>:</strong></p>\r\n<pre><code class='language-text'>id | name\r\n---|--------------------\r\n1  | Alpha Mortgage Bond\r\n2  | Beta Mortgage Bond\r\n3  | Gamma Mortgage Bond</code></pre>\r\n\r\n<p><strong><code>maturities</code>:</strong></p>\r\n<pre><code class='language-text'>bond_id | maturity\r\n--------|-----------\r\n1       | 2024-01-26\r\n1       | 2024-02-22\r\n1       | 2024-03-26\r\n1       | 2024-05-13\r\n1       | 2024-07-06\r\n1       | 2024-08-23\r\n1       | 2024-09-06\r\n1       | 2024-11-30\r\n1       | 2024-12-30\r\n1       | 2025-04-30\r\n1       | 2025-05-03\r\n2       | 2024-07-25\r\n2       | 2024-12-07\r\n3       | 2023-12-16\r\n3       | 2024-01-25\r\n3       | 2024-01-26\r\n3       | 2024-05-04\r\n3       | 2024-10-02\r\n3       | 2024-12-24\r\n3       | 2025-01-15</code></pre>\r\n\r\n<h2>Expected Output</h2>\r\n<pre><code class='language-text'>name              | maturity_dates | earliest_maturity | latest_maturity | avg_days_to_maturity\r\n------------------|----------------|-------------------|-----------------|---------------------\r\nBeta Mortgage Bond| 2              | 2024-07-25        | 2024-12-07      | 409</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Only include bonds with an average days to maturity greater than 365 days.</li>\r\n    <li>Today is September 13, 2023.</li>\r\n    <li>Use actual days rather than 30-day months.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cmath>\n#include <sstream>\n\nstruct BondResult {\n    std::string name;\n    int maturity_dates;\n    std::string earliest_maturity;\n    std::string latest_maturity;\n    int avg_days_to_maturity;\n};\n\nclass Solution {\npublic:\n    std::vector<BondResult> analyzeBonds(\n        const std::map<int, std::string>& bonds,\n        const std::map<int, std::vector<std::string>>& maturities) {\n        // Core logic to be implemented here.\n        // This function should process the bond and maturity data\n        // to produce the required analysis, including:\n        // - Counting maturity dates per bond.\n        // - Finding the earliest and latest maturity dates.\n        // - Calculating the average days to maturity from '2023-09-13'.\n        // - Filtering for bonds with avg_days_to_maturity > 365.\n        // - Sorting the final results by bond name.\n        \n        std::vector<BondResult> results;\n        return results;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement describes SQL tables, not a standard input format.\n    // We will assume a reasonable input format for a C++ program:\n    // First, the number of bonds, followed by their id and name.\n    // Then, the number of maturities, followed by their bond_id and date.\n\n    int n_bonds;\n    // A dummy read to simulate reading from sample data, as no input format is specified.\n    // In a real contest, this would be read from std::cin.\n    // For this boilerplate, we'll hardcode the sample data.\n    \n    std::map<int, std::string> bonds;\n    bonds[1] = \"Alpha Mortgage Bond\";\n    bonds[2] = \"Beta Mortgage Bond\";\n    bonds[3] = \"Gamma Mortgage Bond\";\n\n    std::map<int, std::vector<std::string>> maturities;\n    maturities[1].push_back(\"2024-01-26\");\n    maturities[1].push_back(\"2024-02-22\");\n    maturities[1].push_back(\"2024-03-26\");\n    maturities[1].push_back(\"2024-05-13\");\n    maturities[1].push_back(\"2024-07-06\");\n    maturities[1].push_back(\"2024-08-23\");\n    maturities[1].push_back(\"2024-09-06\");\n    maturities[1].push_back(\"2024-11-30\");\n    maturities[1].push_back(\"2024-12-30\");\n    maturities[1].push_back(\"2025-04-30\");\n    maturities[1].push_back(\"2025-05-03\");\n    maturities[2].push_back(\"2024-07-25\");\n    maturities[2].push_back(\"2024-12-07\");\n    maturities[3].push_back(\"2023-12-16\");\n    maturities[3].push_back(\"2024-01-25\");\n    maturities[3].push_back(\"2024-01-26\");\n    maturities[3].push_back(\"2024-05-04\");\n    maturities[3].push_back(\"2024-10-02\");\n    maturities[3].push_back(\"2024-12-24\");\n    maturities[3].push_back(\"2025-01-15\");\n\n    Solution solution;\n    std::vector<BondResult> results = solution.analyzeBonds(bonds, maturities);\n\n    for (const auto& res : results) {\n        std::cout << res.name << \" | \"\n                  << res.maturity_dates << \" | \"\n                  << res.earliest_maturity << \" | \"\n                  << res.latest_maturity << \" | \"\n                  << res.avg_days_to_maturity << \"\\n\";\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Uber Data science_8oct",
        "company_id": 582
    },
    {
        "id": 1669,
        "title": "Results of a Trade",
        "problem_statement": "```html\r\n<h1>Results of a Trade</h1>\r\n<h2>Problem Description</h2>\r\n<p>The graph below gives the average share prices (in dollars) of two companies, TCS and Reliance, from December 1 through December 5, 2015. All trades are filled at the average share price of the day.</p>\r\n<p>The average share prices are as follows:</p>\r\n<pre><code class='language-text'>Average Share Prices\r\n| Date    | Reliance | TCS |\r\n|---------|----------|-----|\r\n| 1-Dec-15| 100      | 155 |\r\n| 2-Dec-15| 155      | 100 |\r\n| 3-Dec-15| 160      | 135 |\r\n| 4-Dec-15| 175      | 150 |\r\n| 5-Dec-15| 155      | 125 |</code></pre>\r\n<p>Alex buys a combined 13,200 shares of TCS and Reliance on December 1 and then sells them on December 2. Does Alex realize a gain or a loss overall?</p>\r\n\r\n<h1>What is the Age?</h1>\r\n<h2>Problem Description</h2>\r\n<p>The sum of the ages of 5 children born at intervals of 3 years is 50 years. What is the age of the youngest child?</p>\r\n\r\n<h1>What Comes Next?</h1>\r\n<h2>Problem Description</h2>\r\n<p>Predict the figure in (?) place. The problem presents a visual pattern sequence, and the task is to identify the next figure in the sequence from the given options.</p>\r\n\r\n<h1>Relationship between A and B</h1>\r\n<h2>Problem Description</h2>\r\n<p>If A = x% of y and B = y% of x, then which of the following is true?</p>\r\n\r\n<h1>Milk-Water Ratio</h1>\r\n<h2>Problem Description</h2>\r\n<p>In a mixture of 60L, ratio of milk and water is 2:1, if this ratio is to be 1:2, then the quantity of water to be further added is</p>\r\n\r\n<h1>Uber Driver Rating Calculation</h1>\r\n<h2>Problem Description</h2>\r\n<p>An Uber driver's average rating over 30 rides is 4.2 stars. After completing 10 more rides, his average rating increases to 4.4 stars. What was the average rating of the last 10 rides?</p>\r\n\r\n<h1>Work Efficiency</h1>\r\n<h2>Problem Description</h2>\r\n<p>Uber driver A is 50% more efficient as driver B. In one day, driver C can do half of the work done by A and B together. If C alone can do the work in 40 days, then A, B and C together can do work in how many days.</p>\r\n\r\n<h1>Travel Time Chart Math</h1>\r\n<h2>Problem Description</h2>\r\n<p>The graph below shows the travel time between Seattle and Portland on four different trains: Inter-City Express, Idaho Express, Indianapolis Express, and the Interstate Express. Assume the trains follow parallel routes and travel at uniform speeds.</p>\r\n<p>The time taken by each train (in hours) is:</p>\r\n<ul>\r\n    <li>Inter-City Express: 6 hours</li>\r\n    <li>Idaho Express: 7 hours</li>\r\n    <li>Indianapolis Express: 5 hours</li>\r\n    <li>Interstate Express: 4 hours</li>\r\n</ul>\r\n<p>If the departure time of Idaho Express from Portland is 3 p.m. and the departure time of Indianapolis Express from Seattle is 4 p.m., what time will the two trains meet?</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    /**\n     * @brief Calculates the overall gain or loss from the trade.\n     * \n     * The problem statement provides fixed prices for buying and selling.\n     * Buy prices (Dec 1): Reliance = $100, TCS = $155\n     * Sell prices (Dec 2): Reliance = $155, TCS = $100\n     * \n     * @param num_reliance_shares The number of Reliance shares traded.\n     * @param num_tcs_shares The number of TCS shares traded.\n     * @return The total profit or loss as a long long integer. A positive value indicates a gain,\n     *         a negative value indicates a loss, and zero means no change.\n     */\n    long long calculate_trade_result(int num_reliance_shares, int num_tcs_shares) {\n        // Core logic to calculate the gain or loss goes here.\n        // For example:\n        // long long cost = (long long)num_reliance_shares * 100 + (long long)num_tcs_shares * 155;\n        // long long revenue = (long long)num_reliance_shares * 155 + (long long)num_tcs_shares * 100;\n        // return revenue - cost;\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement is ambiguous about the input.\n    // It seems to be a collection of different logic puzzles rather than a single programming problem.\n    // Based on the first puzzle, \"Results of a Trade\", a plausible input would be the\n    // number of shares for each company, as the total is given but the split is not.\n    // We will assume the input consists of two integers: the number of Reliance shares\n    // and the number of TCS shares.\n\n    int num_reliance_shares;\n    int num_tcs_shares;\n\n    // Reading the number of shares for each company.\n    // Note: The problem states a combined total of 13,200, but for a general solution,\n    // we read the individual counts.\n    std::cin >> num_reliance_shares >> num_tcs_shares;\n\n    Solution solution;\n    long long result = solution.calculate_trade_result(num_reliance_shares, num_tcs_shares);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Uber Data science_8oct",
        "company_id": 582
    },
    {
        "id": 1670,
        "title": "Interpret a Chart",
        "problem_statement": "```html\r\n<h1>Interpret a Chart</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Staon Pvt. Ltd. Makes two types of pens, N-max and F-fill. They sell N-max wholesale in packets of 50 pens each at Rs. 480 per packet. They sell F-fill wholesale in packets of 120 pens at Rs. 600 per packet. The sales of these two products for the 6 years from 2000-2005 are shown in the graph below.</p>\r\n<p>The graph titled \"Number of Packets sold (in millions) from 2000-2005\" displays two lines: N-max (dashed line) and F-fill (solid line).</p>\r\n<p>The data points for the number of packets sold (in millions) are as follows:</p>\r\n<ul>\r\n    <li><strong>2000:</strong> N-max = 20, F-fill = 15</li>\r\n    <li><strong>2001:</strong> N-max = 10, F-fill = 30</li>\r\n    <li><strong>2002:</strong> N-max = 35, F-fill = 20</li>\r\n    <li><strong>2003:</strong> N-max = 25, F-fill = 10</li>\r\n    <li><strong>2004:</strong> N-max = 10, F-fill = 10</li>\r\n    <li><strong>2005:</strong> N-max = 35, F-fill = 15</li>\r\n</ul>\r\n<p>How many years were gross sales revenue from F-fill sales greater than from N-max sales?</p>\r\n\r\n<hr>\r\n\r\n<h1>Compare Pie Charts</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The population of a country uses four modes of transportation: Air, Ship, Rail, and Road to move from one place to another. The charts show the percentage of the transportation market for each mode in 2010 and 2012. The country's population doubled between 2010 and 2012.</p>\r\n<p>The two pie charts display the market share for each transportation mode:</p>\r\n<p><strong>2010 Pie Chart:</strong></p>\r\n<ul>\r\n    <li>Road: 30%</li>\r\n    <li>Rail: 25%</li>\r\n    <li>Air: 20%</li>\r\n    <li>Water: 25%</li>\r\n</ul>\r\n<p><strong>2012 Pie Chart:</strong></p>\r\n<ul>\r\n    <li>Road: 20%</li>\r\n    <li>Rail: 30%</li>\r\n    <li>Air: 20%</li>\r\n    <li>Water: 30%</li>\r\n</ul>\r\n<p>Which mode of transportation had 4 times as many users in 2012 compared to 2010?</p>\r\n\r\n<hr>\r\n\r\n<h1>Average Employees per Department</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The data below shows the number of people working in each of the departments in each of the companies.</p>\r\n<p>Data shown in the stacked bar chart (represented as a table):</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Department</th>\r\n            <th>Best Steel</th>\r\n            <th>Tata Rock</th>\r\n            <th>Bang Soil</th>\r\n            <th>Go Green</th>\r\n            <th>Morgan Sachs</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>Finance</td>\r\n            <td>10</td>\r\n            <td>12</td>\r\n            <td>6</td>\r\n            <td>10</td>\r\n            <td>9</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Human Resources</td>\r\n            <td>13</td>\r\n            <td>14</td>\r\n            <td>15</td>\r\n            <td>15</td>\r\n            <td>7</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Marketing</td>\r\n            <td>14</td>\r\n            <td>6</td>\r\n            <td>8</td>\r\n            <td>28</td>\r\n            <td>9</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Research</td>\r\n            <td>15</td>\r\n            <td>20</td>\r\n            <td>14</td>\r\n            <td>13</td>\r\n            <td>10</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Analyst</td>\r\n            <td>16</td>\r\n            <td>18</td>\r\n            <td>15</td>\r\n            <td>14</td>\r\n            <td>13</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<h2>Follow-up</h2>\r\n<p>A sixth department is created in Best Steel and Tata Rock, and 10 people transfer from some departments to the sixth department within those two companies. Which company has the highest average number of employees per department overall?</p>\r\n\r\n<hr>\r\n\r\n<h1>Proportional Speeds</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The chart titled \"Time Taken by different Aeroplanes to travel from Austin to Boston\" shows flying times for 10 planes.</p>\r\n<p>The bar chart displays the time taken (in arbitrary units) for each aeroplane:</p>\r\n<ul>\r\n    <li><strong>A:</strong> 4.5</li>\r\n    <li><strong>B:</strong> 6</li>\r\n    <li><strong>C:</strong> 4.5</li>\r\n    <li><strong>D:</strong> 2</li>\r\n    <li><strong>E:</strong> 2.4</li>\r\n    <li><strong>F:</strong> 6.1</li>\r\n    <li><strong>G:</strong> 2</li>\r\n    <li><strong>H:</strong> 7.3</li>\r\n    <li><strong>I:</strong> 5.8</li>\r\n</ul>\r\n<p>What is the ratio of speeds of plane B to C?</p>\r\n\r\n<hr>\r\n\r\n<h1>Interpret a Bar Chart</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The graph titled \"Marks of Students\" shows the scores of ten students, A to J, on 2 mock tests. Each student has two bars: Mock test-1 (lighter bar) and Mock test-2 (darker bar).</p>\r\n<p>The approximate scores for each student are:</p>\r\n<ul>\r\n    <li><strong>Student A:</strong> Mock-1 ~25, Mock-2 ~50</li>\r\n    <li><strong>Student B:</strong> Mock-1 ~60, Mock-2 ~80</li>\r\n    <li><strong>Student C:</strong> Mock-1 ~40, Mock-2 ~65</li>\r\n    <li><strong>Student D:</strong> Mock-1 ~20, Mock-2 ~45</li>\r\n    <li><strong>Student E:</strong> Mock-1 ~80, Mock-2 ~85</li>\r\n    <li><strong>Student F:</strong> Mock-1 ~30, Mock-2 ~55</li>\r\n    <li><strong>Student G:</strong> Mock-1 ~20, Mock-2 ~22</li>\r\n    <li><strong>Student H:</strong> Mock-1 ~85, Mock-2 ~70</li>\r\n    <li><strong>Student I:</strong> Mock-1 ~35, Mock-2 ~75</li>\r\n    <li><strong>Student J:</strong> Mock-1 ~50, Mock-2 ~78</li>\r\n</ul>\r\n<p>A student is allowed to appear in mock test-3 only if their performance improved by at least 10 points on the second test over the first.</p>\r\n<p>How many students will appear for mock test-3?</p>\r\n\r\n<hr>\r\n\r\n<h1>Odd One Out</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Which letter is different from the others?</p>\r\n<pre><code class='language-text'>WHIVEAM</code></pre>\r\n\r\n<hr>\r\n\r\n<h1>Logical Progression 2</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>What value does '?' represent in the following sequence?</p>\r\n<pre><code class='language-text'>X32G, V16J, T8M, ?, P2S</code></pre>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <utility>\n\nclass Solution {\npublic:\n    /**\n     * @param sales_data A vector of pairs. Each pair contains the number of packets sold (in millions)\n     * for N-max and F-fill for a given year. The first element of the pair is for N-max,\n     * and the second is for F-fill.\n     * @return The number of years where gross sales revenue from F-fill was greater than from N-max.\n     */\n    int solve(const std::vector<std::pair<int, int>>& sales_data) {\n        // Core logic goes here.\n        // N-max packet price: 480\n        // F-fill packet price: 600\n        // For each year (pair in sales_data):\n        //   nmax_revenue = pair.first * 480\n        //   ffill_revenue = pair.second * 600\n        //   if (ffill_revenue > nmax_revenue) increment counter\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement provides data for 6 years.\n    // We assume the input will be 6 lines, each containing two integers:\n    // the number of N-max packets and F-fill packets sold (in millions).\n    int num_years = 6;\n    std::vector<std::pair<int, int>> sales_data(num_years);\n    for (int i = 0; i < num_years; ++i) {\n        std::cin >> sales_data[i].first >> sales_data[i].second;\n    }\n\n    Solution solution;\n    int result = solution.solve(sales_data);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Uber Data science_8oct",
        "company_id": 582
    },
    {
        "id": 1671,
        "title": "Puzzles: Numbers with 5",
        "problem_statement": "<h1>Puzzles: Numbers with 5</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>For all integers from 1 to 100, how many match at least one of the following conditions?</p>\r\n<ul>\r\n    <li>not divisible by 5 and contains the digit 5</li>\r\n    <li>divisible by 5 but does not contain the digit 5</li>\r\n</ul>\r\n\r\n<h1>Diagrammatic Reasoning 7</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given four figures, identify which figure does not belong to the group based on a common pattern or rule.</p>\r\n\r\n<h1>Diagrammatic Reasoning 4</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a sequence of four shapes (labeled 1, 2, 3, 4), determine the operation applied to the shapes to transform one into the next in the sequence.</p>\r\n\r\n<h1>Analogous Shapes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an analogy in the form \"Shape A is to Shape B as Shape C is to ?\", identify the shape that correctly completes the analogy.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int solve() {\n        // Core logic goes here.\n        // This problem has a fixed range (1 to 100) and thus a constant answer.\n        // The solve method is designed to compute this constant answer.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement describes a single, fixed problem without any variable input.\n    // Therefore, the main function does not need to read any input.\n    // We will create an instance of the Solution class and call the solve method.\n    \n    Solution sol;\n    int result = sol.solve();\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Uber Data science_8oct",
        "company_id": 582
    }
]