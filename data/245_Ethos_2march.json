[
    {
        "id": 773,
        "title": "LFU Cache",
        "problem_statement": "<h1>LFU Cache</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a Least Frequently Used (LFU) cache data structure of size <code>cacheSize</code> that handles two types of queries, GET and PUT.</p>\r\n<ul>\r\n    <li>A GET query attempts to retrieve the value of a given key.\r\n        <ul>\r\n            <li>If the key is present in the cache, it is returned.</li>\r\n            <li>Otherwise, it returns -1.</li>\r\n        </ul>\r\n    </li>\r\n    <li>A PUT query updates or inserts a key-value pair into the cache.\r\n        <ul>\r\n            <li>When the cache is full, the least frequently used key is removed to accommodate the new key-value pair.</li>\r\n            <li>If there is a tie in the frequency of keys, then the least recently used key is removed.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Return an array of integers where each <code>i<sup>th</sup></code> element is the answer for the <code>i<sup>th</sup></code> GET query.</p>\r\n\r\n<pre><code class='language-javascript'>\r\n#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'implementLFU' function below.\r\n *\r\n * The function is expected to return an INTEGER_ARRAY.\r\n * The function accepts the following parameters:\r\n *  1. INTEGER cacheSize\r\n *  2. STRING_ARRAY queries\r\n */\r\n\r\nvector&lt;int&gt; implementLFU(int cacheSize, vector&lt;string&gt; queries) {\r\n\r\n}\r\nint main() {\r\n\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ncacheSize = 1\r\nq = 5\r\nqueries = [\"PUT 1 1\", \"PUT 2 2\", \"GET 1\"]\r\nOutput:\r\n[-1]</code></pre>\r\n<p><strong>Explanation:</strong> Only <code>cacheSize = 1</code> element is stored in the cache.</p>\r\n<pre><code class='language-text'>Query No. | Query Type | Key | Value | Cache State | Output\r\n----------|------------|-----|-------|-------------|-------\r\n1         | PUT        | 1   | 1     | 1:1         | -\r\n2         | PUT        | 2   | 2     | 2:2         | -\r\n3         | GET        | 1   |       | 2:2         | -1</code></pre>\r\n<p>Hence the answer is [-1].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ncacheSize = 2\r\nq = 5\r\nqueries = [\"PUT 1 1\", \"PUT 2 2\", \"GET 1\", \"PUT 3 3\", \"GET 2\"]\r\n\r\nOutput:\r\n1\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>Query   | Cache           | Result\r\n--------|-----------------|-------\r\nPUT 1 1 | 1:1             | -\r\nPUT 2 2 | 1:1 2:2         | -\r\nGET 1   | 1:1 (used 1) 2:2| 1\r\nPUT 3 3 | 1:1 (used 1) 3:3| -\r\nGET 2   | 1:1 3:3         | -1</code></pre>\r\n<p>When 'PUT 3 3' is executed, the lesser-used 2:2 is replaced.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\ncacheSize = 2\r\nq = 4\r\nqueries = [\"PUT 1 1\", \"PUT 2 2\", \"PUT 3 3\", \"GET 1\"]\r\n\r\nOutput:\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<pre><code class='language-text'>Query   | Cache   | Result\r\n--------|---------|-------\r\nPUT 1 1 | 1:1     | -\r\nPUT 2 2 | 1:1 2:2 | -\r\nPUT 3 3 | 2:2 3:3 | -\r\nGET 1   | 2:2 3:3 | -1</code></pre>\r\n<p>Since no cache entry has been retrieved at 'PUT 3:3', the earlier entry, 1:1, is removed.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ethos_2march",
        "company_id": 245
    },
    {
        "id": 774,
        "title": "Maximum Difference",
        "problem_statement": "<h1>Maximum Difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a number of nodes and edges, construct an undirected graph. A connected component of the graph is any group of connected nodes. For each connected component, determine the difference between its maximum and minimum value. Return the maximum of all these differences.</p>\r\n<p>For example, given a graph with 4 nodes, connected as follows: [1, 2], [3, and [4]. The only connected component has a difference 3 - 1 = 2.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>maximumDifference</code> in the editor below. The function must return an integer denoting the maximum difference between the minimum and maximum node values in any connected component.</p>\r\n<p>The function signature is:</p>\r\n<pre><code class='language-cpp'>int maximumDifference(int g_nodes, vector&lt;int&gt; g_from, vector&lt;int&gt; g_to) {\r\n}</code></pre>\r\n<p><code>maximumDifference</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int g_nodes</code>: the number of nodes</li>\r\n    <li><code>vector&lt;int&gt; g_from</code>: one end of a connected pair of nodes</li>\r\n    <li><code>vector&lt;int&gt; g_to</code>: the other end of a connected pair of nodes</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; g_nodes &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; g_edges &le; min(10<sup>5</sup>, g_nodes * (g_nodes - 1) / 2)</code></li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>Input from stdin will be processed as follows and passed to the function.</p>\r\n<p>The first line contains two space-separated integers, <code>g_nodes</code> and <code>g_edges</code>, the number of nodes and edges.</p>\r\n<p>Each of the next <code>g_edges</code> lines contains two space-separated integers, <code>g_from[i]</code> and <code>g_to[i]</code> where <code>1 &le; i &le; g_edges</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 6\r\n1 2\r\n1 3\r\n2 3\r\n2 4\r\n3 4\r\n4 5\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The graph has one connected component with nodes [1, 2, 3, 4, 5]. The maximum value is 5 and the minimum value is 1. The difference is 5 - 1 = 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 3\r\n1 2\r\n3 4\r\n4 5\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The graph has two connected components.\r\nComponent 1: Nodes [1, 2]. Maximum value is 2, minimum value is 1. Difference is 2 - 1 = 1.\r\nComponent 2: Nodes [3, 4, 5]. Maximum value is 5, minimum value is 3. Difference is 5 - 3 = 2.\r\nThe maximum of these differences is 2.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ethos_2march",
        "company_id": 245
    },
    {
        "id": 775,
        "title": "Offloading Tasks",
        "problem_statement": "<h1>Offloading Tasks</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a set of n servers, each with varying workloads represented by <code>serverLoad[i]</code> where <code>0 <= i < n</code>, the goal is to optimize the server workload distribution by offloading tasks from servers. There is a limitation: the developer can manually offload tasks from at most <code>k</code> servers.</p>\r\n<p>The developer has an access to an advanced server load management tool. This tool operates as follows:</p>\r\n<ul>\r\n    <li>It identifies the server with the highest workload, denoted as L, among the remaining servers.</li>\r\n    <li>It efficiently offloads tasks from all servers with workloads strictly higher than L/2 in a single operation.</li>\r\n</ul>\r\n<p>Utilizing the server load management tool incurs resource costs. Minimize the number of times the tool needs to be operated while ensuring optimal server workload distribution and return the number of times the management tool is operated.</p>\r\n<p>Note: The order in which the tool is used and tasks are manually offloaded does not affect the final count. The developer has the flexibility to operate the tool multiple times, manually offload tasks from some servers in between, and repeat the process as necessary.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example:</h3>\r\n<p>There are <code>n = 5</code> servers whose loads are denoted by <code>serverLoad = [6, 12, 18, 10, 12]</code> and <code>k = 2</code>.</p>\r\n<p>On offloading the 1st and 2nd servers manually, the remaining <code>serverLoad</code> becomes <code>[18, 10, 12]</code>.</p>\r\n<p>When running the tool once, all servers are offloaded since their workloads are greater than 18/2 = 9.</p>\r\n<p>The minimum number of times the server load management tool must be run is 1.</p>\r\n<p>Hence, the answer is 1. Only <code>k=2</code> manual operations are permitted, so offloading all servers without a single tool run is impossible.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nserverLoad = [2, 4, 6, 9]\r\nk = 1\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> On offloading the 1st server manually, the remaining <code>serverLoad</code> is <code>[4, 6, 9]</code>.</p>\r\n<p>On running the tool once, the remaining <code>serverLoad</code> is <code>[4]</code>.</p>\r\n<p>On running the tool again, all the servers are offloaded.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\nserverLoad = [10, 7, 15, 1, 4, 20]\r\nk = 3\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> On offloading the 2nd, 4th, and 5th servers manually, the remaining <code>serverLoad</code> is <code>[10, 15, 20]</code>.</p>\r\n<p>On running the tool once, the remaining <code>serverLoad</code> is <code>[10]</code>. 10 is not strictly greater than 20/2 = 10.</p>\r\n<p>On running the tool again, the tasks in all the servers are offloaded.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinToolRuns</code> in the editor below.</p>\r\n<p><code>getMinToolRuns</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int serverLoad[]</code>: the workloads of the servers</li>\r\n    <li><code>int k</code>: the maximum number of servers that can be offloaded manually</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of times the server load management tool should be executed such that you can offload at most <code>k</code> servers manually</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= serverLoad[i] <= 10^9</code></li>\r\n    <li><code>0 <= k <= n</code></li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>The first line contains an integer <code>n</code>, the total number of servers.</p>\r\n<p>The next <code>n</code> lines contain <code>serverLoad[i]</code> (<code>0 <= i < n</code>), the workload of the <code>i<sup>th</sup></code> server.</p>\r\n<p>The last line contains an integer <code>k</code>.</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'getMinToolRuns' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts following parameters:\r\n *  1. INTEGER_ARRAY serverLoad\r\n *  2. INTEGER k\r\n */\r\n\r\nint getMinToolRuns(std::vector&lt;int&gt; serverLoad, int k) {\r\n\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ethos_2march",
        "company_id": 245
    }
]