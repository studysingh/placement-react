[
    {
        "id": 714,
        "title": "Royal Game Master",
        "problem_statement": "<h1>Royal Game Master</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the kingdom of Arcadia, there was a centuries-old tradition of competitive games held during the Royal Tournament, and only the sharpest minds were allowed to participate. Little A and Little B, two childhood friends, decided to invent a game that would challenge the intellect of the kingdom's greatest strategists. This game, played on a chessboard, was designed to not only test strategic thinking but also to bring joy and excitement to those who witnessed it.</p>\r\n<p>The game was set on a 1xN chessboard, where K pawns were placed. The pawns came in two colours: white and black. Half of them were white and half were black. The white pawns were placed in alternating positions, starting from the leftmost square, and the black pawns were similarly placed but ended at the rightmost square. Little A, a brilliant strategist, was in charge of moving the white pawns, while his best friend Little B controlled the black pawns.</p>\r\n<p>However, the game wasn't as simple as it seemed. The rules were strict:</p>\r\n<ul>\r\n    <li>The white pawns could only move to the right, while the black pawns could only move to the left.</li>\r\n    <li>Each pawn can move up to D spaces in one move, but not more.</li>\r\n    <li>Pawns could not jump over each other, making careful positioning crucial.</li>\r\n    <li>A pawn could never move beyond the chessboard's boundaries.</li>\r\n    <li>The players took turns, with Little A starting first.</li>\r\n</ul>\r\n<p>The goal of the game was simple but intense: the player who couldn't make a move would lose. This meant that if a player could strategize in a way that the opponent was left without any legal moves, they would win. Little A, with his unmatched strategic brilliance, had come up with a master plan to win every single game. His secret mission was to find out all possible initial setups where he could guarantee a victory.</p>\r\n<p>Little A knew that understanding the game's dynamics and calculating the number of initial setups that guaranteed his victory was the key to securing the Royal Game Master title. With the chessboard set, he would take the first move, knowing exactly how to outwit his opponent and claim victory.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line should contain three space-separated integers N, K and D.</p>\r\n<ul>\r\n    <li>N representing the length of the chessboard.</li>\r\n    <li>K representing the total number of pawns (even number, half white, half black).</li>\r\n    <li>D representing the maximum number of spaces a pawn can move in one turn.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output the total number of initial layouts where Little A can guarantee a win. The answer should be modulo 10^9+7.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= D <= K <= N <= 10^4</code></li>\r\n    <li><code>K <= 10^2</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5 4 1\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> In both cases, Little A can always make a move that forces Little B into a position where they can't move.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 3 2 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The initial setup of the pawns where A will always win looks like this: W _ B (_ where W is the White Pawn, _ is an Empty Space, and B is the Black Pawn). A can move W 1 step, making B unable to make a move and thus wins.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_12july",
        "company_id": 227
    },
    {
        "id": 715,
        "title": "Book Shelf Management",
        "problem_statement": "<h1>Book Shelf Management</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're a librarian and you have to organize books. Each book has a name, genre, and a shelf number, all enclosed in curly brackets {}.</p>\r\n<p>Here's what you need to do:</p>\r\n<ul>\r\n    <li>Check if the curly brackets {} in each book's information are balanced. If they are not, return false for that book.</li>\r\n    <li>If the brackets are balanced, add the book to a stack for its shelf number.</li>\r\n    <li>If a book's information is missing or incomplete, return -1 for that book.</li>\r\n    <li>If a book's shelf number is more than 10, also return -1 for that book.</li>\r\n    <li>After you've processed all the N books, you'll be given a shelf number. You need to remove the top book from the stack for that shelf and print its information. If there are no books on that shelf, print 0, if the shelf number is more than 10, print -1.</li>\r\n</ul>\r\n<p><strong>Note:</strong> The categorization string may contain any printable ASCII characters, but the function should only consider the opening '{' and closing '}' brackets for determining balance.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input will contain an integer N denoting the number of books.</p>\r\n<p>The next N lines each contain a string representing the book details in the format <code>{{BookName}(Genre)(ShelfNumber)}</code>.</p>\r\n<p>The last line contains an integer representing the shelf number (query for popping a book).</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each book entry, display <code>true</code> if the brackets are balanced and the book is added to the stack, <code>false</code> if the brackets are not balanced, and <code>-1</code> if the line is empty, incorrectly formatted, or has an invalid shelf number.</p>\r\n<p>After processing all N books, display the name of the book that was popped from the specified shelf's stack. If the stack for that shelf is empty, print <code>0</code>. If the query shelf number is invalid (e.g., more than 10, as per problem description), print <code>-1</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 50</code></li>\r\n    <li><code>1 &lt;= shelf number &lt;= 50</code> (Note: Problem description states shelf numbers &gt; 10 are invalid for books and queries. This constraint might refer to the range of possible query values before validation.)</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n{{HarryPotter}(Mystery)(2)}\r\n{{LordOfTheRings}(Fantasy)(1)}\r\n{}\r\n5\r\nOutput:\r\nfalse\r\ntrue\r\n-1\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>First Line (3):</strong> N = 3, indicating 3 book entries will follow.</li>\r\n    <li><strong>Second Line (<code>{{HarryPotter}(Mystery)(2)}</code>):</strong> This string has an unbalanced bracket structure. The expected format is <code>{{BookName}(Genre)(ShelfNumber)}</code>. The brackets are not correctly nested or paired. Therefore, the output for this line is <code>false</code>.</li>\r\n    <li><strong>Third Line (<code>{{LordOfTheRings}(Fantasy)(1)}</code>):</strong> This string follows the expected format and has balanced brackets. The book details are extracted: Book Name: LordOfTheRings, Genre: Fantasy, Shelf Number: 1. Since the shelf number (1) is valid (1 &lt;= 10), the book is added to shelf 1. The output for this line is <code>true</code>.</li>\r\n    <li><strong>Fourth Line (<code>{}</code>):</strong> This string has balanced brackets, but it does not contain the required components (BookName, Genre, ShelfNumber). It is considered an invalid input. Therefore, the function returns <code>-1</code> to indicate the input is invalid. The output for this line is <code>-1</code>.</li>\r\n    <li><strong>Fifth Line (5):</strong> This is a query to pop the top book from shelf number 5. At this point, only Shelf 1 contains a book (\"LordOfTheRings\"). Shelves 2 to 10 are empty. Shelf 5 is also empty. Attempting to pop from an empty stack for shelf 5 results in <code>0</code>. The output for this operation is <code>0</code>.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n{{HarryPotter}(Mystery)(1)}\r\n1\r\nOutput:\r\ntrue\r\nHarryPotter</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>First Line (1):</strong> N = 1, indicating 1 book entry will follow.</li>\r\n    <li><strong>Second Line (<code>{{HarryPotter}(Mystery)(1)}</code>):</strong> This string follows the expected format and has properly balanced curly brackets. The book details are extracted: Book Name: HarryPotter, Genre: Mystery, Shelf Number: 1. Since the shelf number (1) is valid (1 &lt;= 10), the book is added to shelf 1. The output for this line is <code>true</code>.</li>\r\n    <li><strong>Third Line (1):</strong> This is a query to pop the top book from shelf number 1. The book \"HarryPotter\" was added to shelf 1. It is popped and its name is printed. The output for this operation is <code>HarryPotter</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_12july",
        "company_id": 227
    },
    {
        "id": 716,
        "title": "Space Mission Research Parts",
        "problem_statement": "<h1>Space Mission Research Parts</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Captain Ava is leading a space mission divided into N parts for scientific research. The Space Exploration Council (SEC) gives instructions that change these parts' status. Each instruction has three parts: L, R, and P.</p>\r\n<ul>\r\n    <li>If P is 1, parts from L to R become rest parts.</li>\r\n    <li>If P is 2, parts from L to R become research parts.</li>\r\n</ul>\r\n<p>Each new instruction replaces the previous ones. Ava needs to keep track of how many research parts are left after each instruction to ensure the mission goes well and the crew stays healthy.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line consists of two integers N and D — the number of phases and the number of directives.</p>\r\n<p>The next D lines consist of 3 integers L[i], R[i] and P[i] — where L[i] and R[i] are the boundaries and P[i] is the directive type of the i-th directive.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print D space separated integers where i-th integer is the answer after the i-th directive.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^8</code></li>\r\n    <li><code>1 &lt;= D &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= L[i] &lt;= R[i] &lt;= N</code></li>\r\n    <li><code>1 &lt;= P[i] &lt;= 2</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 2\r\n1 2 1\r\n2 5 1\r\nOutput:\r\n3 0</code></pre>\r\n<p><strong>Explanation:</strong> Initially, all 5 phases are research.</p>\r\n<ul>\r\n    <li><strong>After Directive 1 (1 2 1):</strong> Phases [1, 2] become rest. Phases [3, 4, 5] remain research. Total research phases: 3.</li>\r\n    <li><strong>After Directive 2 (2 5 1):</strong> Phases [2, 5] become rest. Current state: Phase 1 is rest, phases [2, 5] become rest. All phases [1, 2, 3, 4, 5] are now rest. Total research phases: 0.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 2\r\n1 3 1\r\n2 4 2\r\nOutput:\r\n1 3</code></pre>\r\n<p><strong>Explanation:</strong> Initially, all 4 phases are research.</p>\r\n<ul>\r\n    <li><strong>After Directive 1 (1 3 1):</strong> Phases [1, 3] become rest. Phase 4 remains research. Total research phases: 1.</li>\r\n    <li><strong>After Directive 2 (2 4 2):</strong> Phases [2, 4] become research. Current state: Phase 1 is rest, Phase 4 is research, Phases 2, 3 are rest. Applying directive: Phase 1 remains rest. Phases [2, 3, 4] become research. Total research phases: 3.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_12july",
        "company_id": 227
    },
    {
        "id": 717,
        "title": "FastLunch Pickup Station",
        "problem_statement": "<h1>FastLunch Pickup Station</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>ByteCity is a bustling metropolis where office workers thrive on food delivery services. The city's main commercial hub, Tech Avenue, is lined with N office buildings. The first building is at 0 meters, and each subsequent building stands 100 meters further down the road. Thus, the i-th building (1-indexed) is located at (i-1) * 100 meters. The i-th building has p_i employees who order lunch daily.</p>\r\n<p>For years, ByteEats has dominated the food delivery market with strategically placed pickup stations. There are M existing ByteEats pickup stations, each at a unique position x_j meters along the avenue. Some of these stations may even coincide with office buildings, making it difficult for competitors to attract customers.</p>\r\n<p>Now, a new challenger, FastLunch, has entered the market, determined to disrupt ByteEats' monopoly. Your job, as FastLunch's strategist, is to place a single pickup station anywhere along Tech Avenue to maximize the number of employees who choose FastLunch. Employees will pick FastLunch only if your station is strictly closer to their building than any existing ByteEats station. If an existing station is at the same distance, employees will remain loyal to ByteEats.</p>\r\n<p>Given the locations of the office buildings and existing pickup stations, determine the maximum number of employees you can serve by choosing the best possible location for your pickup station.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two space separated integers N and M — the number of office buildings and the number of existing food delivery services.</p>\r\n<p>The second line contains N integers p_1, p_2, ..., p_N — the number of employees in each office building.</p>\r\n<p>The third line contains M integers x_1, x_2, ..., x_M — the location of each food delivery service's pickup station.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the maximum amount of lunch orders you can secure by ideally choosing the location for your new pickup station.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; N &le; 200,000</li>\r\n    <li>1 &le; M &le; 200,000</li>\r\n    <li>1 &le; p_i &le; 10^9</li>\r\n    <li>0 &le; x_j &le; 10^9</li>\r\n    <li>x_j &ne; x_k for j &ne; k</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 2\r\n1 2 7 8\r\n35 157</code></pre>\r\n<pre><code class='language-text'>Output:\r\n15</code></pre>\r\n<p><strong>Explanation:</strong> Placing the new pickup station at 170 meters, we analyze its distance to each building:</p>\r\n<ul>\r\n    <li>Building 1 (0 meters): The distances are 170 m (new station), 35 m (Station 1), and 157 m (Station 2). The new station is not the closest.</li>\r\n    <li>Building 2 (100 meters): The distances are 70 m (new station), 65 m (Station 1), and 57 m (Station 2). The new station is still not the closest.</li>\r\n    <li>Building 3 (200 meters): The distances are 30 m (new station), 165 m (Station 1), and 43 m (Station 2). Here, the new station is the closest.</li>\r\n    <li>Building 4 (300 meters): The distances are 130 m (new station), 265 m (Station 1), and 143 m (Station 2). Again, the new station is the closest.</li>\r\n</ul>\r\n<p>In total, the new station is closest to Buildings 3 and 4, which have a total of 15 employees (7 + 8).</p>\r\n<p>Thus, placing the pickup station at 170 meters allows the new service to secure lunch orders from 15 employees, representing the optimal choice under the given constraints.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 1\r\n2 5 6\r\n169</code></pre>\r\n<pre><code class='language-text'>Output:\r\n7</code></pre>\r\n<p><strong>Explanation:</strong> In this scenario, by placing the new pickup station at 150 meters, we evaluate its proximity to the three office buildings:</p>\r\n<ul>\r\n    <li>Building 1 (0 meters): The new station is closer (150 m vs. 169 m).</li>\r\n    <li>Building 2 (100 meters): The new station is again closer (50 m vs. 69 m).</li>\r\n    <li>Building 3 (200 meters): The existing station is closer (50 m vs. 31 m).</li>\r\n</ul>\r\n<p>Thus, the new pickup station serves the first two buildings, which have a total of 7 employees (2 + 5) placing their lunch orders. Therefore, the optimal placement at 150 meters secures the maximum possible lunch orders of 7 employees.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_12july",
        "company_id": 227
    },
    {
        "id": 718,
        "title": "Golden Archipelago Treasure Hunt",
        "problem_statement": "<h1>Golden Archipelago Treasure Hunt</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The notorious pirate Captain Blackbeard has finally uncovered an ancient treasure map. The map is said to hide the greatest riches hidden across the Golden Archipelago. The map reveals a series of islands, each hiding a stash of glittering treasure. These islands are connected by a network of bridges, forming a complex path across the sea.</p>\r\n<p>But treasure hunting is not easy, and the captain must follow some strict rules:</p>\r\n<ul>\r\n    <li>He can only be on one island at a time.</li>\r\n    <li>He can only move between islands using the bridges marked on the map.</li>\r\n    <li>Once he leaves an island, he can never return. Legend has it that the tides shift furiously, making the path disappear behind him.</li>\r\n    <li>Some islands have multiple bridges leading to different places, making it crucial to choose the best route.</li>\r\n</ul>\r\n<p>With his trusted crew, Captain Blackbeard must start from a specific island and make his way to a final destination island, planning the journey carefully. The challenge? To collect the maximum amount of treasure in the shortest possible time.</p>\r\n<p>As the salty wind fills the sails and the ship approaches the first island, the crew eagerly awaits the captain's command. Can you chart the optimal course for the greatest treasure haul before the tides change forever?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains three space-separated integers N, M, and K representing the number of islands, the number of bridges, and the number of starting island and ending island respectively.</p>\r\n<p>The second line contains N space-separated integers T1, T2, ..., TN representing the amount of treasure on each island.</p>\r\n<p>The next M lines each contain three space-separated integers U, V, and W representing a bridge between islands U and V with travel time W.</p>\r\n<p>The next N lines each contain two space-separated integers S and E representing a starting island S and an ending island E.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each starting-ending island pair, display two space-separated integers which represent the maximum total amount of treasure that can be collected and the minimum travel time to collect that treasure.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; N &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; M &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; T<sub>i</sub> &le; 10<sup>5</sup></code> (Implied from problem description)</li>\r\n    <li><code>1 &le; U, V &le; N</code></li>\r\n    <li><code>1 &le; W &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; S, E &le; N</code></li>\r\n    <li><code>1 &le; K &le; 10<sup>5</sup></code></li>\r\n</ul>\r\n<p><em>Note on Input/Constraint Ambiguity: The input format description for the first line (\"K representing ... starting island and ending island\") and the \"next N lines each contain two space-separated integers S and E\" appears contradictory with the provided sample inputs. Sample inputs only provide N, M, and a single starting island (e.g., '1' in '5 6 1'), and do not include explicit S and E pairs on subsequent lines. The problem is interpreted based on the sample behavior (a single query from a given start island to an optimal end island).</em></p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\n5 6 1\r\n10 20 30 40 50\r\n1 2 5\r\n1 3 10\r\n3 4 5\r\n4 2 10\r\n2 5 2\r\n4 5 1\r\n<strong>Output:</strong>\r\n130 16</code></pre>\r\n<p><strong>Explanation:</strong> One possible path is 1->3->4->5. The treasures collected are 10+30+40+50 = 130 and the travel time is 10+5+1 = 16.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\n4 4 1\r\n10 20 30 40\r\n1 2 10\r\n1 3 10\r\n2 4 10\r\n3 4 10\r\n<strong>Output:</strong>\r\n100 30</code></pre>\r\n<p><strong>Explanation:</strong> One possible path is 1->2->4. The treasures collected are 10+20+40 = 70 and the travel time is 10+10 = 20.\r\n<em>Note: The provided explanation for Example 2 describes a path (1->2->4) that yields a treasure of 70 and time of 20, which contradicts the given output of 100 30. To achieve 100 treasure, all islands (10+20+30+40) would need to be visited, which is not possible with the given graph structure and the rule \"Once he leaves an island, he can never return\".</em></p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_12july",
        "company_id": 227
    },
    {
        "id": 719,
        "title": "Sequence of Balance",
        "problem_statement": "<h1>Sequence of Balance</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the mystical land of Arrayland, there exists a legendary artifact known as the Sequence of Balance. This artifact is an array of numbers that holds great power, but over time, its harmony has been disturbed. The wise mathematician Eldrin, the guardian of Arrayland, has been given the task of restoring its lost balance.</p>\r\n\r\n<p>The artifact, represented as an array A of size N, contains a mixture of positive, negative, and zero values. To restore harmony, Eldrin must transform the array into a \"good\" sequence, which follows these sacred rules:</p>\r\n<ul>\r\n    <li>The first element of the array must be positive.</li>\r\n    <li>The last element of the array must be negative.</li>\r\n    <li>There must exist an index K (1 &le; K &le; N-1) such that:\r\n        <ul>\r\n            <li>All elements from index 1 to K (inclusive) must be negative.</li>\r\n            <li>All elements from index K+1 to N (inclusive) must be positive.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<p>Eldrin has a special power&mdash;he can change any number in the array into any other integer in a single operation. However, the power is limited, and he must use it wisely to minimize the number of transformations required.</p>\r\n\r\n<p>The fate of Arrayland depends on how efficiently Eldrin can restore the Sequence of Balance. Given the current state of the artifact as an array A, your task is to determine the minimum number of operations required to transform it into a \"good\" array.</p>\r\n\r\n<p>Will you help Eldrin restore order to Arrayland with the least number of changes?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of <strong>Input:</strong> contains an integer N denoting the size of the array.</p>\r\n<p>The second line of <strong>Input:</strong> contains N integers separated by spaces, representing the elements of array A.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p><strong>Output:</strong> Display a single integer, the minimum number of operations required to transform A into a \"good\" array.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; N &le; 10<sup>5</sup></li>\r\n    <li>-10<sup>5</sup> &le; A[i] &le; 10<sup>5</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_12july",
        "company_id": 227
    }
]