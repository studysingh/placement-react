[
    {
        "id": 1279,
        "title": "Paneer and Profit",
        "problem_statement": "<h1>Paneer and Profit</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are n cities and m one-directional roads connecting city A[i] to city B[i]. We are in the panner-making business. Each city has its own price of paneer. You can buy or sell paneer in the city i for val<sub>i</sub> rupees. You have to buy paneer from some city u and sell the paneer in another city v. The profit you make is calculated as the selling price minus buying price. Return an integer denoting the maximum profit you can make. <strong>NOTE:</strong> In all, it is mandatory to buy only 1 paneer, and it is mandatory to sell that paneer in some other city that can be traveled from it.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains n the number of cities.</li>\r\n    <li>The next n lines contain the elements of the array val.</li>\r\n    <li>The next line contains an integer m.</li>\r\n    <li>The next m lines contain the array of elements A.</li>\r\n    <li>The next line again contains the integer m.</li>\r\n    <li>The next m lines contain the array of elements B.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>Return an integer denoting the maximum profit possible.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &lt;= n &lt;= 10<sup>5</sup></li>\r\n    <li>1 &lt;= m &lt;= 10<sup>5</sup></li>\r\n    <li>1 &lt;= A<sub>i</sub>, B<sub>i</sub> &lt;= n</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n2\r\n3\r\n1\r\n5\r\n3\r\n1\r\n3\r\n1\r\n2\r\n3\r\n2\r\n3\r\n4\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> The maximum profit of 3 rupees can be obtained as follows:</p>\r\n<ul>\r\n    <li>At City 1, buy paneer for 2 rupees</li>\r\n    <li>Traverse Road 1 to get to City 2</li>\r\n    <li>Traverse Road 2 to get to City 4</li>\r\n    <li>At City 4, sell the paneer for 5 rupees</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infoedge_23aug",
        "company_id": 437
    },
    {
        "id": 1293,
        "title": "61. DSA: Fault Detection in Automotive Firmware",
        "problem_statement": "<h1>61. DSA: Fault Detection in Automotive Firmware</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As part of a validation process for an automotive microcontroller firmware, a team is analyzing the correctness of low-level arithmetic operations used across various electronic control units (ECUs). During testing, it was discovered that a junior developer mistakenly implemented a logic block that performs <strong>bitwise XOR (⊕)</strong> instead of <strong>standard arithmetic addition (+)</strong>.</p>\r\n<p>Interestingly, in some specific cases, the outputs of <code>i + j</code> and <code>i ⊕ j</code> are identical. This behavior only occurs when <strong>no carry-over occurs during addition</strong>, i.e., the binary representations of <code>i</code> and <code>j</code> have <strong>no overlapping 1s ((i & j) == 0)</strong>.</p>\r\n<p>Your task is to assist the team in assessing the impact of this issue. You are given multiple integer ranges, and for each range <code>[a, b]</code>, you must determine the number of <strong>ordered integer pairs (i, j)</strong> such that: <code>a <= i <= b</code>, <code>a <= j <= b</code>, and <code>i + j == i ⊕ j</code>.</p>\r\n<p>This exercise is part of a broader validation effort across <strong>multiple automotive software modules</strong>, not limited to ADAS or autonomous functions. It reflects the kind of fault detection and recovery mechanisms commonly used in safety-critical embedded systems.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n    <li>The first line contains an integer <code>T</code>, the number of test cases.</li>\r\n    <li>Each of the next <code>T</code> lines contains two integers <code>a</code> and <code>b</code>, representing the range of values to consider for that test case. (Each test case thus contains 2 integers).</li>\r\n</ul>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>Return an array of length <code>T</code>, where each element represents the result (the count of ordered pairs) for the corresponding test case.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>T <= 10^2</code></li>\r\n    <li><code>1 <= a <= b <= 10^6</code></li>\r\n    <li><code>a + b <= 10^6</code></li>\r\n    <li><code>a, b</code> are integers.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infoedge_23aug",
        "company_id": 437
    },
    {
        "id": 1294,
        "title": "Save the Knight",
        "problem_statement": "<h1>Save the Knight</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an n x n chessboard with the positions of a knight and a queen. The objective is to find the number of moves the knight can make without being attacked by the queen. The queen can attack in all eight directions: horizontally, vertically, and diagonally. A move is considered valid if the knight can reach that position in one move without being in the queen's line of attack. Determine the count of such valid moves for the knight on the given chessboard.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line of input contains the row position of the knight, <code>knightRow</code>.</li>\r\n    <li>The second line contains the col position of the knight, <code>knightCol</code>.</li>\r\n    <li>The third line contains the row position of queen, <code>queenRow</code>.</li>\r\n    <li>The fourth line contains the col position of queen, <code>queenCol</code>.</li>\r\n    <li>The fifth line contains the size of the chessboard(n), <code>chessSize</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2\r\n2\r\n4\r\n4\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> The starting position of the Knight is (1,1). As seen in the picture, the knight can move to 4 different positions without getting attacked by the Queen.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n1\r\n1\r\n2\r\n2\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> There is no possible move for the Knight.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infoedge_23aug",
        "company_id": 437
    },
    {
        "id": 1300,
        "title": "Divisible Tree Splits",
        "problem_statement": "<h1>Divisible Tree Splits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an undirected tree with <code>n</code> nodes labeled <code>0</code> to <code>n - 1</code>, represented by a 2D integer array of edges of length <code>n - 1</code>, where <code>edges[i] = [a_i, b_i]</code> denotes the existence of an edge in the tree connecting nodes <code>a_i</code> and <code>b_i</code>.</p>\r\n<p>You are given an integer <code>k</code> and a 0-indexed integer array <code>values</code> of length <code>n</code>, where <code>values[i]</code> represent the value corresponding to the <code>i<sup>th</sup></code> node in the tree.</p>\r\n<p>To obtain a valid split of the tree, you can remove any set of edges (which may or may not be empty) from the tree. After removing the edges, the resulting components should have values such that the sum of the values of each connected component is divisible by <code>k</code>.</p>\r\n<p>In other words, the goal is to partition the tree into connected components in such a way that the sum of values in each component is a multiple of <code>k</code>.</p>\r\n<p>The task is to find the maximum number of valid splits or configurations satisfying the given conditions.</p>\r\n\r\n<h3>Input Format</h3>\r\n<ul>\r\n    <li>The First line of input contains an integer <code>n</code>.</li>\r\n    <li>The Second line of input contains an integer <code>k</code>.</li>\r\n    <li>The Third line of input contains an integer <code>x</code> (which is size of edges).</li>\r\n    <li>The fourth line of input contains an integer <code>2</code>.</li>\r\n    <li>The next <code>x</code> lines of input contains two integers in each line.</li>\r\n    <li>This line of input contains an integer <code>y</code> (which is size of y).</li>\r\n    <li>The next <code>n</code> lines contain the values for each node.</li>\r\n</ul>\r\n\r\n<h3>Output Format</h3>\r\n<ul>\r\n    <li>It will be an integer answer which indicate maximum number of valid splits.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5\r\n6\r\n4\r\n2\r\n0 2\r\n1 2\r\n1 3\r\n2 4\r\n5\r\n1\r\n8\r\n1\r\n4\r\n4\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> As we have given above information.</p>\r\n<p>We remove the edge connecting node 1 with 2. The resulting split is valid because:</p>\r\n<ul>\r\n    <li>The value of the component containing nodes 1 and 3 is <code>values[1] + values[3] = 12</code>.</li>\r\n    <li>The value of the component containing nodes 0, 2, and 4 is <code>values[0] + values[2] + values[4] = 6</code>.</li>\r\n</ul>\r\n<p>It can be shown that no other valid split has more than 2 connected components.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\r\n    <li><code>edges.length == n - 1</code></li>\r\n    <li><code>edges[i].length == 2</code></li>\r\n    <li><code>0 &lt;= a_i, b_i &lt; n</code></li>\r\n    <li><code>values.length == n</code></li>\r\n    <li><code>0 &lt;= values[i] &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>Sum of values is divisible by k.</code></li>\r\n    <li><code>The input is generated such that edges represents a valid tree.</code></li>\r\n</ul>\r\n\r\n<h2>Starter Code</h2>\r\n<pre><code class='language-javascript'>int maxValidTreeSplit(int n, int k, vector&lt;vector&lt;int&gt;&gt; edges, vector&lt;int&gt; values) {\r\n    // Write your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infoedge_23aug",
        "company_id": 437
    }
]