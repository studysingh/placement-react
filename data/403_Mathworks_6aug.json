[
    {
        "id": 1191,
        "title": "Simple Matrix Summation",
        "problem_statement": "<h1>Simple Matrix Summation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an n x m matrix <code>a</code>, create another n x m matrix <code>b</code> using a summation algorithm. For each element <code>b(x, y)</code> in matrix <code>b</code>, the value is determined by the following algorithm:</p>\r\n<pre><code class='language-text'>s = 0;\r\nfor (i = 0; i <= x; i += 1) {\r\n    for (j = 0; j <= y; j += 1) {\r\n        s = s + a(i, j);\r\n    }\r\n}\r\nb(x, y) = s;</code></pre>\r\n<p>The algorithm must be executed for each element of matrix <code>b</code>. Return the completed matrix <code>b</code>.</p>\r\n<p>Complete the function <code>findMatrix</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int a[n][m]</code>: a 2-dimensional array of integers</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int b[n][m]</code>: the calculated 2-dimensional array of integers <code>b</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p>This example uses <code>a = [[1, 2, 3], [4, 5, 6]]</code> (a 2x3 matrix).</p>\r\n<pre><code class='language-text'>Input: a = [[1,2,3],[4,5,6]]\r\nOutput: [[1,3,6],[5,12,21]]</code></pre>\r\n<p><strong>Explanation:</strong> Calculations for matrix <code>b</code>:</p>\r\n<ul>\r\n    <li><code>b(0,0) = a(0,0) = 1</code></li>\r\n    <li><code>b(0,1) = a(0,0) + a(0,1) = 1 + 2 = 3</code></li>\r\n    <li><code>b(0,2) = a(0,0) + a(0,1) + a(0,2) = 1 + 2 + 3 = 6</code></li>\r\n    <li><code>b(1,0) = a(0,0) + a(1,0) = 1 + 4 = 5</code></li>\r\n    <li><code>b(1,1) = a(0,0) + a(0,1) + a(1,0) + a(1,1) = 1 + 2 + 4 + 5 = 12</code></li>\r\n    <li><code>b(1,2) = a(0,0) + a(0,1) + a(0,2) + a(1,0) + a(1,1) + a(1,2) = 1 + 2 + 3 + 4 + 5 + 6 = 21</code></li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<p>This is Sample Case 0, using a 2x2 matrix.</p>\r\n<pre><code class='language-text'>Input:\r\nSTDIN   Function\r\n2       -> number of rows in a[] = n = 2\r\n2       -> number of columns in a[] = m = 2\r\n1 2     -> first row of a[] = [1, 2]\r\n3 4     -> second row of a[] = [3, 4]\r\n\r\nOutput:\r\n1 3\r\n4 10</code></pre>\r\n<p><strong>Explanation:</strong> Find the following 2 x 2 matrix, <code>b</code>:</p>\r\n<ul>\r\n    <li><code>b(0,0) = a(0,0) = 1</code></li>\r\n    <li><code>b(0,1) = a(0,0) + a(0,1) = 1 + 2 = 3</code></li>\r\n    <li><code>b(1,0) = a(0,0) + a(1,0) = 1 + 3 = 4</code></li>\r\n    <li><code>b(1,1) = a(0,0) + a(0,1) + a(1,0) + a(1,1) = 1 + 2 + 3 + 4 = 10</code></li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<p>This is Sample Case 1, using a 3x3 matrix.</p>\r\n<pre><code class='language-text'>Input:\r\nSTDIN   Function\r\n3       -> number of rows in a[] = n = 3\r\n3       -> number of columns in a[] = m = 3\r\n1 2 3   -> first row of a[] = [1, 2, 3]\r\n4 5 6   -> second row of a[] = [4, 5, 6]\r\n7 8 9   -> third row of a[] = [7, 8, 9]\r\n\r\nOutput:\r\n1 3 6\r\n5 12 21\r\n12 27 45</code></pre>\r\n<p><strong>Explanation:</strong> Find the following 3 x 3 matrix, <code>b</code>:</p>\r\n<ul>\r\n    <li><code>b(0,0) = a(0,0) = 1</code></li>\r\n    <li><code>b(0,1) = a(0,0) + a(0,1) = 1 + 2 = 3</code></li>\r\n    <li><code>b(0,2) = a(0,0) + a(0,1) + a(0,2) = 1 + 2 + 3 = 6</code></li>\r\n    <li><code>b(1,0) = a(0,0) + a(1,0) = 1 + 4 = 5</code></li>\r\n    <li><code>b(1,1) = a(0,0) + a(0,1) + a(1,0) + a(1,1) = 1 + 2 + 4 + 5 = 12</code></li>\r\n    <li><code>b(1,2) = a(0,0) + a(0,1) + a(0,2) + a(1,0) + a(1,1) + a(1,2) = 1 + 2 + 3 + 4 + 5 + 6 = 21</code></li>\r\n    <li><code>b(2,0) = a(0,0) + a(1,0) + a(2,0) = 1 + 4 + 7 = 12</code></li>\r\n    <li><code>b(2,1) = a(0,0) + a(0,1) + a(1,0) + a(1,1) + a(2,0) + a(2,1) = 1 + 2 + 4 + 5 + 7 + 8 = 27</code></li>\r\n    <li><code>b(2,2) = a(0,0) + a(0,1) + a(0,2) + a(1,0) + a(1,1) + a(1,2) + a(2,0) + a(2,1) + a(2,2) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45</code></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n, m <= 10^3</code></li>\r\n    <li><code>0 <= a[i][j] <= 10^4</code>, where <code>0 <= i < n</code> and <code>0 <= j < m</code></li>\r\n</ul>\r\n\r\n<h3>Input Format for Custom Testing</h3>\r\n<ul>\r\n    <li>The first line contains an integer <code>n</code>, the number of rows of the array <code>a</code>.</li>\r\n    <li>The second line contains an integer <code>m</code>, the number of columns in each row of <code>a</code>.</li>\r\n    <li>Each of the next <code>n</code> lines contains <code>m</code> space-separated integers <code>a[i][j]</code> where <code>0 <= i < n</code> and <code>0 <= j < m</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_6aug",
        "company_id": 403
    },
    {
        "id": 1192,
        "title": "Minimum Complexity Level",
        "problem_statement": "<h1>Minimum Complexity Level</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alex is attending a software engineering conference in which various lectures are presented. The subject matter of each lecture has a certain complexity. Alex has planned the order of lectures they would like to attend, but now they need to schedule these into several days. Their goal is to attend at least one lecture every day and to plan the lectures in a way that minimizes the overall complexity of the conference. (Each day's complexity is defined as the complexity of the most complex lecture attended that day.) Given the complexity levels of the lectures, as well as how many days the conference is being held, what is the overall minimum complexity that can be achieved with optimal planning?</p>\r\n\r\n<p>For example, let's say there are n = 5 lectures, where complexity = [7, 5, 3, 2, 4], and the length of the conference is days = 2. (Note that complexity denotes both the complexity of each lecture as well as the order in which they need to be attended.) The best option is to attend the first lecture on the first day and the rest on the second day. The complexity of the first day would be 7, since that's the only lecture, and the complexity of the second day would be 5, because that's the complexity level of the most complex lecture that day. Therefore, the answer is 7 + 5 = 12.</p>\r\n\r\n<p><strong>Function Description</strong></p>\r\n<p>Complete the function <code>findMinComplexity</code> in the editor below.</p>\r\n\r\n<p>The function is expected to return an <strong>INTEGER</strong>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>INTEGER_ARRAY complexity</code>: an array of integers denoting the order and complexity of the lectures</li>\r\n    <li><code>INTEGER days</code>: the number of days the conference is being held</li>\r\n</ul>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>INTEGER</code>: the minimum overall complexity level that can be achieved with optimal planning</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>// Complete the 'findMinComplexity' function below.\r\n// The function is expected to return an INTEGER.\r\n// The function accepts following parameters:\r\n//  1. INTEGER_ARRAY complexity\r\n//  2. INTEGER days\r\n//\r\nint findMinComplexity(std::vector<int> complexity, int days) {\r\n    // Write your code here\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 300</code></li>\r\n    <li><code>1 <= days <= n</code></li>\r\n    <li><code>1 <= complexity[i] <= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>The first line contains an integer, n, denoting the size of the array complexity.</p>\r\n<p>Each line i of the n subsequent lines (where 0 <= i < n) contains an integer that describes complexity[i].</p>\r\n<p>The last line contains an integer, days.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n-> complexity[] size n = 5\r\n30 10 40 20 50\r\n-> complexity = [30, 10, 40, 20, 50]\r\n2\r\n-> days = 2\r\nOutput:\r\n80</code></pre>\r\n<p><strong>Explanation:</strong> Alex can attend the first and second lectures on the first day (with complexities 30 and 10) and the rest on the second day (with complexities 40, 20, and 50). The overall complexity would be calculated as max(30, 10) + max(40, 20, 50), which would be 30 + 50 = 80.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n-> complexity[] size n = 6\r\n74383 20452 66120 44483 5370 68585\r\n-> complexity = [74383, 20452, 66120, 44483, 5370, 68585]\r\n5\r\n-> days = 5\r\nOutput:\r\n234830</code></pre>\r\n<p><strong>Explanation:</strong> The best option is to attend the third and fourth lectures on the same day (with complexities 66120 and 44483), and the remaining four subjects on the other days. The overall complexity would be calculated as 74383 + 20452 + max(66120, 44483) + 5370 + 68585, which is 234830.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mathworks_6aug",
        "company_id": 403
    }
]