[
    {
        "id": 1821,
        "title": "Minimized difference",
        "problem_statement": "<h1>Minimized difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array <code>A</code> of size <code>N</code> and a number <code>K</code> denoting the number of operations that has to be performed on array <code>A</code>. You have to return the minimum possible difference between the maximum and minimum element of the array <code>A</code> after performing <code>K</code> operations.</p>\r\n<p>An operation on array <code>A</code> is:</p>\r\n<ul>\r\n    <li>Select any two indices <code>i</code> and <code>j</code> such that, <code>1 &le; i, j &le; N</code>, where <code>N</code> is the size of the array <code>A</code>.</li>\r\n    <li>Subtract 1 from <code>A[i]</code> and add 1 to <code>A[j]</code>.</li>\r\n</ul>\r\n<p>Print the minimum possible difference between the maximum and minimum element of the array after performing <code>K</code> operations.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>solve()</code>. This function takes 3 parameters as arguments and returns the minimum possible difference between the maximum and minimum element of the array.</p>\r\n<pre><code class='language-javascript'>long long solve (int N, long long K, long long* A) {\r\n    // Write your code here\r\n}</code></pre>\r\n<ul>\r\n    <li><strong>N:</strong> Represents the size of the array <code>A</code>.</li>\r\n    <li><strong>K:</strong> Represents the number of given operations.</li>\r\n    <li><strong>A:</strong> Represents an array of <code>N</code> integers.</li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code> denoting the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains one integer <code>N</code> denoting the size of the array and one long integer <code>K</code> denoting the number of operations.</li>\r\n            <li>The second line contains <code>N</code> space-separated integers representing the array <code>A</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>The output should be the minimum possible difference between the maximum and minimum element of the array after performing <code>K</code> operations.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>This example shows the sample input and output for multiple test cases.</p>\r\n<pre><code class='language-text'>Input:\r\n5\r\n4 3\r\n1 2 3 4\r\n2 10000\r\n1 3\r\n4 42\r\n1 1 100\r\n3 4\r\n1 2 6\r\n10 11\r\n\r\nOutput:\r\n1\r\n0\r\n43\r\n0\r\n1</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<p>This example explains the approach for a specific test case (the fourth one from the sample input).</p>\r\n<p><strong>For test case 4:</strong></p>\r\n<ul>\r\n    <li><code>N = 3</code></li>\r\n    <li><code>K = 4</code></li>\r\n    <li><code>A = {1, 2, 6}</code></li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li>After one operation <code>A</code> becomes <code>{2, 2, 5}</code></li>\r\n    <li>After two operations <code>A</code> becomes <code>{2, 3, 4}</code></li>\r\n    <li>After three operations <code>A</code> becomes <code>{3, 3, 3}</code></li>\r\n    <li>After four operations <code>A</code> becomes <code>{3, 3, 3}</code> as we can select the same index for increasing and decreasing as well.</li>\r\n</ul>\r\n<p><strong>Explanation:</strong> So the minimum possible difference between the maximum and minimum element is 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 10</code></li>\r\n    <li><code>1 &le; N &le; 10^5</code></li>\r\n    <li><code>1 &le; K &le; 10^12</code></li>\r\n    <li><code>0 &le; A[i] &le; 10^9</code></li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code will be tested against hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<p><strong>Limits:</strong></p>\r\n<ul>\r\n    <li>Time Limit: 2.0 seconds for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<p><strong>Scoring:</strong> Score is assigned if any testcase passes.</p>\r\n\r\n<p><strong>Allowed Languages:</strong> Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long solve(int N, long long K, long long* A) {\n        // Write your code here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int N;\n        long long K;\n        std::cin >> N >> K;\n        std::vector<long long> A(N);\n        for (int i = 0; i < N; ++i) {\n            std::cin >> A[i];\n        }\n\n        Solution sol;\n        long long result = sol.solve(N, K, A.data());\n        std::cout << result << \"\\n\";\n    }\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "curefir_14oct",
        "company_id": 643
    },
    {
        "id": 1853,
        "title": "Special nodes path",
        "problem_statement": "<h1>Special nodes path</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a tree consisting of <strong>N</strong> nodes. There are <strong>K</strong> number of special nodes in the tree. You can perform some operation on the tree exactly once:</p>\r\n<ul>\r\n    <li>Add an edge between any 2 special nodes.</li>\r\n</ul>\r\n<p>Find the minimum distance between node 1 and node <strong>N</strong> you can get after performing the operation exactly once.</p>\r\n\r\n<p><strong>Function description</strong></p>\r\n<p>Complete the <code>solve()</code> function. The function takes the following 5 parameters and returns a single integer denoting the answer to the question:</p>\r\n<ul>\r\n    <li><strong>N</strong>: Represents the number of nodes in the tree</li>\r\n    <li><strong>K</strong>: Represents the number of special nodes</li>\r\n    <li><strong>special_nodes</strong>: Represents the array containing the special nodes</li>\r\n    <li><strong>node_from</strong>: Represents the array denoting the starting node of each edge</li>\r\n    <li><strong>node_to</strong>: Represents the array denoting the ending node of each edge</li>\r\n</ul>\r\n\r\n<h2>Input/Output Format</h2>\r\n<p><strong>Input format for custom testing</strong></p>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <strong>T</strong>, which represents the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer <strong>N</strong> denoting the number of nodes in the tree.</li>\r\n            <li>The second line contains an integer <strong>K</strong> denoting the number of special nodes.</li>\r\n            <li>The third line contains <strong>K</strong> space-separated integers denoting the array <strong>special_nodes</strong>.</li>\r\n            <li>The fourth line contains <strong>N-1</strong> space-separated integers denoting the array <strong>node_from</strong>.</li>\r\n            <li>The fifth line contains <strong>N-1</strong> space-separated integers denoting the array <strong>node_to</strong>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<p><strong>Output format</strong></p>\r\n<p>For each test case, print a single integer representing the minimum distance between node 1 and node <strong>N</strong>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; T &le; 1000</code></li>\r\n    <li><code>2 &le; K &le; N &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; special_nodes<sub>i</sub> &le; N</code></li>\r\n    <li><code>1 &le; node_from<sub>i</sub>, node_to<sub>i</sub> &le; N</code></li>\r\n    <li><code>node_from<sub>i</sub> &ne; node_to<sub>i</sub></code></li>\r\n</ul>\r\n<p>It is guaranteed that the sum of <strong>N</strong> over all test cases does not exceed 10<sup>5</sup>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n6\r\n2\r\n6 3\r\n2 3 3 5 4\r\n1 1 4 3 6\r\n7\r\n3\r\n6 4 3\r\n2 1 4 2 4 4\r\n1 3 5 5 6 7\r\nOutput:\r\n2\r\n3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>In test case 1,</p>\r\n<p>Given</p>\r\n<ul>\r\n    <li><strong>N</strong> = 6</li>\r\n    <li><strong>K</strong> = 2</li>\r\n    <li><strong>special_nodes</strong> = [6, 3]</li>\r\n    <li><strong>node_from</strong> = [2, 3, 3, 5, 4]</li>\r\n    <li><strong>node_to</strong> = [1, 1, 4, 3, 6]</li>\r\n</ul>\r\n<p>Approach</p>\r\n<ul>\r\n    <li>Distance between the node 1 and node 6 in the given tree is 3.</li>\r\n    <li>We can connect an edge between node 3 and node 6, this will result in the final distance to be 2.</li>\r\n    <li>This is the minimum distance we can get by performing the given operation.</li>\r\n    <li>So, the answer is 2.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int solve(int N, int K, const std::vector<int>& special_nodes, const std::vector<int>& node_from, const std::vector<int>& node_to) {\n        // TODO: Implement the solution logic here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int N;\n        std::cin >> N;\n        int K;\n        std::cin >> K;\n        std::vector<int> special_nodes(K);\n        for (int i = 0; i < K; ++i) {\n            std::cin >> special_nodes[i];\n        }\n        std::vector<int> node_from(N - 1);\n        for (int i = 0; i < N - 1; ++i) {\n            std::cin >> node_from[i];\n        }\n        std::vector<int> node_to(N - 1);\n        for (int i = 0; i < N - 1; ++i) {\n            std::cin >> node_to[i];\n        }\n\n        Solution solution;\n        int result = solution.solve(N, K, special_nodes, node_from, node_to);\n        std::cout << result << std::endl;\n    }\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "curefir_14oct",
        "company_id": 643
    }
]