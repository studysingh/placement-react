[
    {
        "id": 1135,
        "title": "Task Scheduler with Dependency Constraints",
        "problem_statement": "<h1>Task Scheduler with Dependency Constraints</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are designing a multi-threaded task scheduler that executes tasks with dependency constraints. There are N tasks numbered from 0 to N-1. Some tasks depend on other tasks, meaning a task can only start execution after all its dependencies have completed.</p>\r\n<p>Your scheduler runs on M worker threads and should schedule tasks such that:</p>\r\n<ul>\r\n    <li>No task starts before all its dependencies are completed.</li>\r\n    <li>At most M tasks can be running concurrently.</li>\r\n    <li>Tasks run instantaneously for this problem (no actual execution time simulation required).</li>\r\n    <li>Your goal is to compute the minimum number of time units (ticks) needed to complete all tasks, where in each tick, any number of eligible tasks can run concurrently up to M.</li>\r\n</ul>\r\n\r\n<p><strong>Function Description:</strong></p>\r\n<p>Implement the function <code>minTimeToCompleteTasks</code> which, given the number of tasks, the number of worker threads, the number of dependencies, and the dependency list, returns the minimum time units required to complete all tasks.</p>\r\n\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li>N: An integer representing the total number of tasks.</li>\r\n    <li>M: An integer representing the number of worker threads (maximum concurrent tasks).</li>\r\n    <li>D: An integer representing the number of dependency relations.</li>\r\n    <li>dependencies: A list of pairs (a, b), where each pair represents that task a depends on task b (i.e., b must complete before a can start).</li>\r\n</ul>\r\n\r\n<p><strong>Return:</strong></p>\r\n<p>An integer representing the minimum number of time units required to finish all tasks following the constraints.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n    <li>The first line contains a single integer N.</li>\r\n    <li>The second line contains a single integer M.</li>\r\n    <li>The third line contains a single integer D.</li>\r\n    <li>The next D lines each contain two space-separated integers a and b indicating that task a depends on task b.</li>\r\n</ul>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<ul>\r\n    <li>Return a single integer representing the minimum time units required to complete all tasks.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n2\r\n3\r\n1 0\r\n2 0\r\n3 1\r\n3 2\r\n5 2\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>Tick 1: Run task 0 (no dependencies)</li>\r\n    <li>Tick 2: Run tasks 1 and 2 (both depend on 0, and M=2 allows 2 concurrent tasks)</li>\r\n    <li>Tick 3: Run tasks 3, 4, and 5 (all depend on 1 or 2). Since M=2, tasks 3 and 4 run first, and task 5 can run together in the same tick because tasks run instantaneously, completing all in 3 ticks.</li>\r\n</ul></p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= M &lt;= 10^4</code></li>\r\n    <li><code>0 &lt;= D &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= a, b &lt; N</code></li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong></p>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<p><strong>Limits:</strong></p>\r\n<ul>\r\n    <li>Time Limit: 5.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<p><strong>Scoring:</strong></p>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<p><strong>Allowed Languages:</strong></p>\r\n<pre><code class='language-python'>def minTimeToCompleteTasks (N, M, D, dependencies):\r\n    # Write your code here\r\n    pass\r\nN = int(input())\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Deutsche bank_7aug",
        "company_id": 379
    },
    {
        "id": 1136,
        "title": "Minimum price",
        "problem_statement": "<h1>Minimum price</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>N stones are lying in a line. The cost and type of the i-th stone is a_i unit(s) and i respectively. You are initially having zero stones and you wish to collect all N types of stones. Type 1, type 2, ..., type N.</p>\r\n<p>You can perform the following operation multiple times (probably zero) to change the types of all the stones in one step:</p>\r\n<ul>\r\n    <li>The stone of the type i will change to the type i+1. If i is N, then change its type to 1. (1 &lt;= i &lt;= N)</li>\r\n</ul>\r\n<p>Applying this operation single-time costs x unit(s).</p>\r\n<p>Print the minimum price that you have to pay to get all the N types of stones in your collection.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <strong>min_price_sol</strong> function. This function takes the following 3 parameters and returns the minimum price that you have to pay to get all the N types of stones in your collection.</p>\r\n\r\n<h3>Parameters:</h3>\r\n<ul>\r\n    <li><strong>N</strong>: Represents the number of stones</li>\r\n    <li><strong>X</strong>: Represents the cost of one operation</li>\r\n    <li><strong>a</strong>: Represents an array of sizes N represents the cost of each stone</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains two integers N and x.</li>\r\n    <li>The next line contains N space-separated integers denoting the price of each stone.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Print a single integer representing the minimum price to get all the N types of stones.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 2000</li>\r\n    <li>0 &lt;= x &lt;= 10<sup>9</sup></li>\r\n    <li>1 &lt;= a[i] &lt;= 10<sup>9</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 3 5\r\n5 8 1\r\nOutput: 13</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Operation 1: Buy stone (stone of type 2) for price 7.</p>\r\n<p>Operation 2: Pay price 5. The sequence of stone types becomes (2,3,1).</p>\r\n<p>Operation 3: Buy stone (stone of type 3) for price 8.</p>\r\n<p>Operation 4: Pay price 5. The sequence of stone types becomes (3,1,2).</p>\r\n<p>Operation 5: Buy stone (stone of type 1) for price 1.</p>\r\n<p>Total price paid is 7. You can't collect all types of stones, by paying less than this.</p>\r\n\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<p><strong>Time Limit:</strong> 1.0 sec(s) for each input file.</p>\r\n<p><strong>Memory Limit:</strong> 256 MB</p>\r\n<p><strong>Source Limit:</strong> 1024 KB</p>\r\n\r\n<h2>Scoring</h2>\r\n<p>Scoring is assigned if any testcase passes.</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<p>Bash, C, C++, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic.</p>\r\n\r\n<pre><code class='language-javascript'>import collections from Counter\r\nimport heapq\r\ndef min_price_sol (N, X, a):\r\n    # Write your code here\r\n    pass\r\ncustom_input_1 = list(map(str, input().split()))</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Deutsche bank_7aug",
        "company_id": 379
    }
]