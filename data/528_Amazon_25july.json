[
    {
        "id": 1511,
        "title": "Minimum Swaps to Satisfy File Affinities",
        "problem_statement": "```html\r\n<h1>Minimum Swaps to Satisfy File Affinities</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Software developed these days is subject to frequent cyber attacks.</p>\r\n<p>To prevent the attacks from succeeding, the security team at Amazon ensures the security of its systems by running tests against <code>n</code> files, where the <code>i<sup>th</sup></code> file has size <code>fileSize[i]</code> and there are <code>n</code> viruses.</p>\r\n<p>The <code>i<sup>th</sup></code> virus attacks the <code>i<sup>th</sup></code> file and is only effective against a file with size <code>affinity[i]</code>. To minimize the damage caused, the team performs certain operations.</p>\r\n<p>In one operation, the team can choose 2 files, <code>i</code> and <code>j</code>, and swap their sizes, i.e., <code>fileSize[i]</code> and <code>fileSize[j]</code>.</p>\r\n<p>Given the sizes of files and the virus' affinities, find the minimum number of operations performed such that <code>fileSize[i] == affinity[i]</code> for each file from <code>1</code> to <code>n</code>. If it is not possible to do so after any number of operations, return -1.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>calculateMinimumSwaps</code> in the editor below.</p>\r\n<p><code>calculateMinimumSwaps</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int fileSize[n]</code>: the file sizes</li>\r\n    <li><code>int affinity[n]</code>: the affinities</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of operations, or -1 if it is impossible</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nfileSize = [1, 2, 3, 2, 3]\r\naffinity = [1, 2, 3, 2, 3]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Given, <code>n = 5</code>, <code>fileSize = [1, 2, 3, 2, 3]</code>, <code>affinity = [1, 2, 3, 2, 3]</code>. <code>fileSize[i]</code> is equal to <code>affinity[i]</code> for <code>i = 1, 2, 3, 4</code> and <code>5</code>. Therefore, 0 swaps are needed.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nfileSize = [2, 2, 2, 1, 1]\r\naffinity = [1, 1, 1, 1, 2]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> Given, <code>n = 5</code>, <code>fileSize = [2, 2, 2, 1, 1]</code>, <code>affinity = [1, 1, 1, 1, 2]</code>. It is impossible to swap the elements of <code>fileSize</code> in such a way that <code>fileSize[i] == affinity[i]</code> for all files.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; fileSize[i], affinity[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_25july",
        "company_id": 528
    },
    {
        "id": 1512,
        "title": "Minimum Storage Capacity",
        "problem_statement": "<h1>Minimum Storage Capacity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Within the Amazon Media Delivery Network, a distribution manager is tasked with efficiently allocating a collection of <code>n</code> digital movies among <code>k</code> different customers. Each movie is characterized by its file size, denoted by <code>contentSize[i]</code> for <code>1 <= i <= n</code>.</p>\r\n<p>To facilitate the distribution process, the manager decides to use storage devices, ordering <code>k</code> storage devices with identical capacities. Each customer can receive a maximum of 2 movies, and every customer must receive at least one movie, also no movie should be left unassigned.</p>\r\n<p>Considering the challenges of transferring large media files through standard channels, the strategy involves determining the minimum storage capacity required for the devices. A storage device can only store movies if the sum of their sizes does not exceed the device's storage capacity.</p>\r\n<p>What is the minimum storage capacity of devices that you must order to be able to provide these movies to the customers?</p>\r\n\r\n<p>Complete the function <code>calculateMinCapacity</code> in the editor below.</p>\r\n<p><code>calculateMinCapacity</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int contentSize[n]</code>: the size of each movie</li>\r\n    <li><code>int k</code>: the number of customers amongst whom the movies are to be distributed</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: an integer variable denoting the minimum capacity of storage devices required to distribute the movies amongst the customers</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>int calculateMinCapacity(vector<int> contentSize, int k) {\r\n    // Function body to be implemented\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, contentSize = [9, 2, 4, 6], k = 3</code></pre>\r\n<p><strong>Explanation:</strong> We note that we will need storage devices of the size of at least 9 units, to store the first movie. This also turns out to be the minimum size of storage devices that should be ordered to give the movies to these customers.</p>\r\n<p>We can use the first storage device to store the movie of size 9, the 2nd one to store the second and third movies, and the 3rd storage device to store the fourth movie. Hence, the minimum capacity of storage devices required is 9 units.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 2\r\ncontentSize = [5, 11]\r\nk = 1\r\nOutput: 16</code></pre>\r\n<p><strong>Explanation:</strong> Since there is only 1 storage device available, we need to put both the movies in it. Hence, the minimum size of storage devices required is 11 + 5 = 16.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 5\r\ncontentSize = [10, 7, 6, 12, 1]\r\nk = 5\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> We see that there are 5 movies, and we have 5 storage devices available. So, we will put one movie in one storage device. Therefore, the minimum size of the storage device required is the maximum size of the movie available. Hence, the minimum size of the storage device required is 12 units.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= k <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= contentSize[i] <= 10^9</code></li>\r\n    <li><code>n <= 2 * k</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_25july",
        "company_id": 528
    },
    {
        "id": 1513,
        "title": "First Unique Character",
        "problem_statement": "<h1>First Unique Character</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon Web Services is experimenting with optimizing search queries based on the location of the first unique character in a search. A unique character is one which appears only once in a string. Given a string consisting of lowercase English letters only, return the index of the first occurrence of a unique character in the string using 1-based indexing. If the string does not contain any unique character, return -1.</p>\r\n<p>Complete the function <code>findFirstUnique</code> in the editor below.</p>\r\n<p>The function <code>findFirstUnique</code> has the following parameter:</p>\r\n<ul>\r\n<li><code>string s</code>: a string</li>\r\n</ul>\r\n<p>The function is expected to return an <code>INTEGER</code>: either the 1-based index or -1.</p>\r\n<pre><code class='language-cpp'>/*\r\n * Complete the 'findFirstUnique' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts STRING s as parameter.\r\n */\r\nint findFirstUnique(string s) {\r\n\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"statistics\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The unique characters are 'a' and 'c'. Among these, 'a' occurs first at index 3 (1-based).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"hackthegame\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The unique characters are 'c', 't', 'g', 'm' out of which the character 'c' occurs first, at index 3 (1-based).</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: s = \"falafal\"\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> All the characters present occur at least twice in the given string. There are no unique characters.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= length of s <= 10<sup>5</sup></code></li>\r\n<li>The string <code>s</code> consists of lowercase English letters only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_25july",
        "company_id": 528
    },
    {
        "id": 1514,
        "title": "Merge Overlapping Times",
        "problem_statement": "<h1>Merge Overlapping Times</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A Supply Chain Manager at an Amazon warehouse is reviewing the logs of when trucks arrived at and departed from their warehouse. Please help them with their review by completing the following challenge: Given a collection of time intervals, <code>[start, end]</code>, merge and return the overlapping intervals sorted in ascending order of their start times.</p>\r\n\r\n<p>Complete the function <code>findOverlappingTimes</code> in the editor below.</p>\r\n<p><code>findOverlappingTimes</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int intervals[n][2]</code>: the time intervals</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int[][2]</code>: the merged intervals in sorted order</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: intervals = [[7, 7], [2, 3], [6, 11], [1, 2]]\r\nOutput: [[1, 3], [6, 11]]</code></pre>\r\n<p><strong>Explanation:</strong> The interval <code>[1, 2]</code> merges with <code>[2, 3]</code> while <code>[7, 7]</code> merges with <code>[6, 11]</code>. There are no more overlapping intervals. The answer is <code>[[1, 3], [6, 11]]</code>.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n2\r\n6 9\r\n2 3\r\n9 11\r\n1 5\r\n14 18\r\nOutput:\r\n1 5\r\n6 11\r\n14 18</code></pre>\r\n<p><strong>Explanation:</strong> The intervals <code>[2, 3]</code> and <code>[1, 5]</code> merge into <code>[1, 5]</code>, and the intervals <code>[6, 9]</code> and <code>[9, 11]</code> merge into <code>[6, 11]</code>. The merged intervals in sorted order are <code>[1, 5]</code>, <code>[6, 11]</code>, <code>[14, 18]</code>.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n4 8\r\n2 6\r\n5 7\r\nOutput:\r\n2 8</code></pre>\r\n<p><strong>Explanation:</strong> All three intervals overlap and merge into <code>[2, 8]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; intervals[i][2] &le; 10<sup>9</sup></code></li>\r\n    <li><code>intervals[i][0] &le; intervals[i][1]</code> for all <code>i</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>vector&lt;vector&lt;int&gt;&gt; findOverlappingTimes(vector&lt;vector&lt;int&gt;&gt; intervals) {\r\n\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_25july",
        "company_id": 528
    }
]