[
    {
        "id": 1450,
        "title": "Subarrays with Sum Divisible by K",
        "problem_statement": "<h1>Subarrays with Sum Divisible by K</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A financial institution monitors daily transaction amounts for potential regulatory analysis. Given an array of integers where each element represents the transaction amount for a day, the institution wants to determine the number of continuous time periods (subarrays) for which the total amount is exactly divisible by a given integer K. Your program should compute the count of all such subarrays. The solution must be designed using a divide and conquer approach.</p>\r\n\r\n<p><strong>Input Variables:</strong></p>\r\n<ul>\r\n    <li>N: An integer representing the number of days (1 ≤ N ≤ 10^5).</li>\r\n    <li>transactions: An array of N integers, where each integer in the range [-10^9, 10^9] represents the transaction amount for that day.</li>\r\n    <li>K: A positive integer (1 ≤ K ≤ 10^5) which is the divisor used to check for divisibility of the subarray sum.</li>\r\n</ul>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>A single integer indicating the total number of contiguous subarrays whose sum is divisible by K.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 5, K = 3, transactions = [1, 2, 3, 4, 1]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The continuous subarrays with sums divisible by 3 are:</p>\r\n<ul>\r\n    <li>Subarray from index 0 to 1: [1, 2] -> sum = 3</li>\r\n    <li>Subarray from index 0 to 2: [1, 2, 3] -> sum = 6</li>\r\n    <li>Subarray from index 1 to 3: [2, 3, 4] -> sum = 9</li>\r\n    <li>Subarray from index 2 to 2: [3] -> sum = 3</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 4, K = 5, transactions = [5, 0, 5, 0]\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> All subarrays in this example yield sums that are divisible by 5. The valid subarrays are:</p>\r\n<ul>\r\n    <li>Starting at index 0: [5] (sum = 5), [5, 0] (sum = 5), [5, 0, 5] (sum = 10), [5, 0, 5, 0] (sum = 10)</li>\r\n    <li>Starting at index 1: [0] (sum = 0), [0, 5] (sum = 5), [0, 5, 0] (sum = 5)</li>\r\n    <li>Starting at index 2: [5] (sum = 5), [5, 0] (sum = 5)</li>\r\n    <li>Starting at index 3: [0] (sum = 0)</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: N = 3, K = 7, transactions = [1, 2, 3]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> For the provided array, none of the continuous subarrays sum to a number divisible by 7. The subarrays and their respective sums are:</p>\r\n<ul>\r\n    <li>[1] -> 1, [1, 2] -> 3, [1, 2, 3] -> 6</li>\r\n    <li>[2] -> 2, [2, 3] -> 5</li>\r\n    <li>[3] -> 3</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 ≤ N ≤ 10^5 (Number of days).</li>\r\n    <li>Each transaction amount is an integer in the range [-10^9, 10^9].</li>\r\n    <li>1 ≤ K ≤ 10^5 (Divisor for sum divisibility).</li>\r\n    <li>The solution should be efficient enough to handle the maximum input size within acceptable time limits.</li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<ul>\r\n    <li>A subarray refers to a contiguous segment of the array.</li>\r\n    <li>The problem requires identifying all subarrays whose total sum is divisible by K. Every valid subarray must be considered, including subarrays of length 1.</li>\r\n    <li>The emphasis is on applying a divide and conquer approach to break down and combine subproblems for an efficient solution without revealing specific methods or hints.</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>long long solveProblem(int n, int k, const vector<long long>& transactions) {\r\n    // Logic goes here\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HashedIn_19sep",
        "company_id": 509
    },
    {
        "id": 1451,
        "title": "Remove K Characters to Get Smallest String",
        "problem_statement": "<h1>Remove K Characters to Get Smallest String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string S consisting of lowercase English letters and an integer k. Your task is to remove exactly k characters from S (you may choose any k characters, not necessarily consecutive) in order to obtain the lexicographically smallest possible string. The relative order of the remaining characters must be preserved. Determine the resulting string after removing k characters.</p>\r\n\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li><code>S</code>: A string of lowercase English letters. Its length <code>n</code> satisfies <code>1 &le; n &le; 10<sup>5</sup></code>.</li>\r\n    <li><code>k</code>: An integer representing the exact number of characters to remove from <code>S</code>. It satisfies <code>0 &le; k &lt; n</code>.</li>\r\n</ul>\r\n\r\n<p><strong>Output:</strong></p>\r\n<p>A string which is the lexicographically smallest string achievable by removing exactly <code>k</code> characters from <code>S</code> while preserving the order of the remaining characters. The output should be of length <code>n - k</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"bcabc\", k = 2\r\nOutput: \"abc\"</code></pre>\r\n<p><strong>Explanation:</strong> Removing 2 characters from \"bcabc\" results in \"abc\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = \"abcde\", k = 2\r\nOutput: \"abc\"</code></pre>\r\n<p><strong>Explanation:</strong> Removing 2 characters from \"abcde\" yields \"abc\".</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: S = \"cba\", k = 1\r\nOutput: \"ba\"</code></pre>\r\n<p><strong>Explanation:</strong> Removing 1 character from \"cba\" results in \"ba\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; length(S) &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; k &lt; length(S)</code></li>\r\n    <li><code>S</code> consists of only lowercase English letters.</li>\r\n    <li>The solution must handle input sizes up to <code>10<sup>5</sup></code> efficiently.</li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<ul>\r\n    <li>Lexicographical order is the order in which words or strings are arranged as in a dictionary (i.e., 'a' is considered smallest, followed by 'b', and so on).</li>\r\n    <li>The selection of characters to remove must preserve the relative order of the remaining characters in <code>S</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HashedIn_19sep",
        "company_id": 509
    },
    {
        "id": 1452,
        "title": "Lexicographically Smallest Cleaned Message",
        "problem_statement": "<h1>Lexicographically Smallest Cleaned Message</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a secure communications system, each transmitted message is represented as a string of symbols (lowercase English letters). Due to interference, extra symbols may be embedded in the message. To improve clarity, exactly k symbols must be removed from the received message while keeping the remaining symbols in their original order. In addition, regulatory guidelines require that no two adjacent symbols in the cleaned message are identical. Your task is to determine, among all possible subsequences (formed by removing exactly k characters from the original message) that satisfy the condition of having no consecutive identical symbols, the lexicographically smallest one. If no valid cleaned message exists, output -1.</p>\r\n\r\n<h2>Input Variables</h2>\r\n<ul>\r\n    <li>S (string): A string of lowercase English letters representing the received message. Its length n satisfies 1 ≤ n ≤ 100000.</li>\r\n    <li>k (integer): The exact number of characters to remove from S. It satisfies 0 ≤ k < n.</li>\r\n</ul>\r\n\r\n<h2>Output</h2>\r\n<p>A string of length n - k which is the lexicographically smallest cleaned message with no adjacent identical symbols, or the string \"-1\" if no valid message can be formed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"abc\", k = 1\r\nOutput: \"ab\"</code></pre>\r\n<p><strong>Explanation:</strong> Removing one character from \"abc\" yields subsequences \"ab\", \"ac\", and \"bc\". All three options have no identical adjacent symbols. Among them, \"ab\" is lexicographically smallest because 'a' = 'a' and 'b' &lt; 'c'.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = \"aaab\", k = 1\r\nOutput: \"-1\"</code></pre>\r\n<p><strong>Explanation:</strong> Removing one character from \"aaab\" creates subsequences of length 3. However, every possible subsequence will contain at least one pair of consecutive 'a's (for example, \"aab\" or \"aaa\"). Since no valid cleaned message without identical adjacent symbols exists, the output is \"-1\".</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: S = \"cacb\", k = 1\r\nOutput: \"acb\"</code></pre>\r\n<p><strong>Explanation:</strong> Removing one character from \"cacb\" gives several subsequences of length 3. The valid ones (with no identical adjacent symbols) include:</p>\r\n<ul>\r\n    <li>Removing the 1st character: \"acb\"</li>\r\n    <li>Removing the 3rd character: \"cab\"</li>\r\n    <li>Removing the 4th character: \"cac\"</li>\r\n</ul>\r\n<p>When comparing the valid options, \"acb\" is lexicographically smallest because 'a' is less than 'c'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 ≤ length(S) ≤ 100000.</li>\r\n    <li>0 ≤ k &lt; length(S).</li>\r\n    <li>S consists solely of lowercase English letters.</li>\r\n    <li>The solution must efficiently handle large inputs, ideally with linear or near-linear time complexity.</li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<ul>\r\n    <li>A subsequence is obtained by deleting exactly k characters from S while preserving the order of the remaining characters.</li>\r\n    <li>Lexicographical order means comparing strings character by character based on the standard alphabetical order.</li>\r\n    <li>The cleaned message must not have any two consecutive characters that are the same.</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>string solveProblem(const string &S, int k) {\r\n    // Logic goes here\r\n    return \"\";\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HashedIn_19sep",
        "company_id": 509
    }
]