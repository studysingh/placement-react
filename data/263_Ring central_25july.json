[
    {
        "id": 856,
        "title": "Efficient Tasks",
        "problem_statement": "<h1>Efficient Tasks</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given <code>n</code> software modules, where the difficulty of the <code>i<sup>th</sup></code> module is represented by <code>difficulty[i]</code> (0 &le; i &lt; n). You must divide these modules among three different servers for deployment according to these rules:</p>\r\n<ul>\r\n    <li>Each server must handle at least one module.</li>\r\n    <li>Each module must be deployed to exactly one server.</li>\r\n</ul>\r\n<p>After deployment, one module will be selected from each server to calculate the overall deployment difficulty as the sum of absolute differences: <code>|d<sub>1</sub> - d<sub>2</sub>| + |d<sub>2</sub> - d<sub>3</sub>|</code></p>\r\n<p>Here <code>d<sub>i</sub></code> is the difficulty of the module selected from the <code>i<sup>th</sup></code> server (1 &le; i &le; 3).</p>\r\n<p>Your task has two parts:</p>\r\n<ol>\r\n    <li>Distribute the modules among the three servers.</li>\r\n    <li>For each possible distribution, select one module from each server that minimizes the absolute differences formula.</li>\r\n</ol>\r\n<p>Among all possible distributions, determine the maximum possible value for the minimized deployment difficulty.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example:</h3>\r\n<p><code>difficulty = [1, 10, 5, 9]</code></p>\r\n<p>One way to divide the groups is:</p>\r\n<ul>\r\n    <li>Group 1: [1]</li>\r\n    <li>Group 2: [5]</li>\r\n    <li>Group 3: [10, 9]</li>\r\n</ul>\r\n<p>Select 1 and 5 as <code>d<sub>1</sub></code> and <code>d<sub>2</sub></code> since they are the only options. Then choose 9 as <code>d<sub>3</sub></code> because it minimizes the difference with <code>d<sub>2</sub></code>.</p>\r\n<p>The deployment difficulty is <code>|1 - 5| + |5 - 9| = 8</code>.</p>\r\n<p>An optimal way of dividing tasks into groups:</p>\r\n<ul>\r\n    <li>Group 1: [1]</li>\r\n    <li>Group 2: [5, 9]</li>\r\n    <li>Group 3: [10]</li>\r\n</ul>\r\n<p>There are two possible choices from Group 2:</p>\r\n<ul>\r\n    <li>Choosing 5 gives: <code>|1 - 5| + |5 - 10| = 4 + 5 = 9</code> (minimize the difference between <code>d<sub>2</sub></code> and <code>d<sub>3</sub></code>)</li>\r\n    <li>Choosing 9 gives: <code>|1 - 9| + |9 - 10| = 8 + 1 = 9</code> (minimize the difference between <code>d<sub>2</sub></code> and <code>d<sub>3</sub></code>)</li>\r\n</ul>\r\n<p>In either case, the answer is 9. There is no distribution that gives a higher minimum.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1\r\n2\r\n5\r\n3\r\n5\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Group 1: [1]</li>\r\n    <li>Group 2: [5, 5]</li>\r\n    <li>Group 3: [2, 3]</li>\r\n</ul>\r\n<p>If the chosen modules are <code>d<sub>1</sub> = 1</code>, <code>d<sub>2</sub> = 5</code>, and <code>d<sub>3</sub> = 3</code> (minimizes difference with <code>d<sub>2</sub></code>), then the overall difficulty is 6. Note that 3 must be chosen from Group 3 to minimize <code>|d<sub>2</sub> - d<sub>3</sub>|</code>.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n5\r\n6\r\n4\r\n1\r\n5\r\n5\r\nOutput:\r\n8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Group 1: [4, 5, 5]</li>\r\n    <li>Group 2: [1]</li>\r\n    <li>Group 3: [5, 6]</li>\r\n</ul>\r\n<p>If the chosen modules are <code>d<sub>1</sub> = 4</code> (minimize the difference with <code>d<sub>2</sub></code>), <code>d<sub>2</sub> = 1</code>, and <code>d<sub>3</sub> = 6</code>, then the overall difficulty is 8.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaxDifficulty</code> in the editor with the following parameter(s):</p>\r\n<pre><code class='language-javascript'>int getMaxDifficulty(vector&lt;int&gt; difficulty)</code></pre>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the maximum possible overall difficulty</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; difficulty[i] &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ring central_25july",
        "company_id": 263
    },
    {
        "id": 857,
        "title": "Largest Subset",
        "problem_statement": "<h1>Largest Subset</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a scheduling system, there are n events represented by two arrays, <code>start</code> and <code>finish</code>, both of size n. The i-th event begins at <code>start[i]</code> and ends at <code>finish[i]</code> (where 0 &le; i &lt; n).</p>\r\n<p>A subset of these events is considered high-priority if at least one event within it overlaps or intersects with every other event in the subset.</p>\r\n<p>Determine the maximum size of a high-priority subset of events.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>Events that overlap at their start or end times are considered to intersect.</li>\r\n    <li>There may be multiple events with the same start and end times.</li>\r\n</ul>\r\n<p>Complete the function <code>getSubsetLength</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int start[n]</code>: event start times</li>\r\n    <li><code>int finish[n]</code>: event end times</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: length of the largest high-priority subset of events</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, start = [1, 2, 3, 4], finish = [2, 3, 5, 5]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The largest high-priority subset is {[2, 3], [3, 5], [4, 5]} where event [3, 5] intersects the remaining events in the subset.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5, start = [1, 3, 4, 6, 9], finish = [2, 8, 5, 7, 10]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The largest high-priority subset is {[3, 8], [4, 5], [6, 7]} where event [3, 8] intersects the remaining events in the subset.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 3, start = [1, 2, 4], finish = [7, 5, 6]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The largest high-priority subset is {[1, 7], [2, 5], [4, 6]} where event [2, 5] intersects the remaining events in the subset.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10^5</code></li>\r\n    <li><code>1 &le; start[i] &le; finish[i] &le; 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Function Signature</h2>\r\n<pre><code class='language-cpp'>int getSubsetLength(vector&lt;int&gt; start, vector&lt;int&gt; finish) {\r\n    // Function implementation\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ring central_25july",
        "company_id": 263
    }
]