[
    {
        "id": 564,
        "title": "Question 2",
        "problem_statement": "<h1>Question 2</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a tree of N nodes, each node has a value A<sub>i</sub> written on it.</p>\r\n<p>The <strong>Parent</strong> of each node is denoted by the Par array, where Par[i] denotes the parent of the ith array. The node whose Parent is 0 is root node and node 0 does not exist.</p>\r\n<p>For some positive integer g, we call a pair of nodes (u, v) <strong>g disconnected</strong> if the following conditions hold:</p>\r\n<ul>\r\n    <li>Both A<sub>u</sub> and A<sub>v</sub> are multiples of g.</li>\r\n    <li>There is no path between u and v in the tree, such that all the values on this path are multiples of g.</li>\r\n</ul>\r\n<p>For some positive integer g, a set of nodes is considered <strong>g good</strong> if the following conditions hold:</p>\r\n<ul>\r\n    <li>The set is not empty.</li>\r\n    <li>All values of the nodes in the set are multiples of g.</li>\r\n    <li>The nodes of the set are pairwise g disconnected. In other words, for every pair of nodes u,v in the set such that u is not equal to v, the pair (u,v) is g disconnected.</li>\r\n</ul>\r\n<p>Two sets of nodes are considered different if there is a node that is contained in one of the sets, but not both of them.</p>\r\n<p>For some positive integer g, we define <strong>cost(g)</strong> as the number of different g good sets.</p>\r\n<p>Your task is to find the sum of cost(g) for all positive integers. Since the answer can be very large, return the answer modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer, N, denoting the number of elements in A.</p>\r\n<",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_12july",
        "company_id": 189
    },
    {
        "id": 1007,
        "title": "Tranquil Pairs",
        "problem_statement": "<h1>Tranquil Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the Gala kingdom, there are two special types of communities: the <strong>Tom community</strong> (array Tom) and the <strong>Jerry community</strong> (array Jerry). These communities reside in two rows of equal length <strong>N</strong> (there are N members as well), with each member of the community assigned a unique position in its row.</p>\r\n<p>Mammy Two Shoes wants to stop the disagreement between the two communities. To achieve this, she wants to count the number of <strong>tranquil pairs</strong> of positions (i, j) (where 0 &le; i &lt; j &lt; N) such that:</p>\r\n<ul>\r\n    <li>The product of the strengths of the two Tom community members at positions i and j is equal to the sum of the strengths of the two Jerry community members at the same positions.</li>\r\n</ul>\r\n<p>Here:</p>\r\n<ul>\r\n    <li>Tom array represent the strengths of the <strong>Tom community</strong> members at positions from i=0 to n-1, respectively.</li>\r\n    <li>Jerry array represent the strengths levels of the <strong>Jerry community</strong> members at positions from i=0 to n-1, respectively.</li>\r\n</ul>\r\n<p>Help Mammy Two Shoes count the number of tranquil pairs.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer, N, denoting the number of elements in Tom and Jerry arrays.</p>\r\n<p>Each line i of the N subsequent lines (where 0 &le; i &lt; N) contains an integer describing Tom[i].</p>\r\n<p>Each line i of the N subsequent lines (where 0 &le; i &lt; N) contains an integer describing Jerry[i].</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n2\r\n3\r\n1\r\n3\r\n3\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong>\r\nN=3\r\nTom=[1,2,3]\r\nJerry=[1,3,3]\r\nTake i=1, j=2. (0-indexed positions)\r\nSo, Tom[1]*Tom[2] = 2*3 = 6.\r\nJerry[1]+Jerry[2] = 3+3 = 6.\r\nSince 6 == 6, this is a tranquil pair.\r\nOnly 1 tranquil pair.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n10\r\n4\r\n2\r\n2\r\n3\r\n1\r\n3\r\n3\r\n2\r\n4\r\n6\r\n9\r\n8\r\n6\r\n6\r\n6\r\n10\r\n7\r\n1\r\n2\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nN=10\r\nTom=[4 2 2 3 1 3 3 2 4 6]\r\nJerry=[9 8 6 6 6 10 7 1 2]\r\n1. i=0, j=3 -> 4*3=6+6=12\r\n2. i=0, j=5 -> 4*3=6+6=12\r\n3. i=7, j=9 -> 3*4=10+2=12\r\nThese 3 pairs are tranquil.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n1\r\n2\r\n3\r\n4\r\n1\r\n1\r\n2\r\n1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong>\r\nN=4\r\nTom=[1 2 3 4]\r\nJerry=[1 1 2 1]\r\n1-> i=0, j=1: Tom[0]*Tom[1]=1*2=2, Jerry[0]+Jerry[1]=1+1=2. (Tranquil)\r\n2-> i=0, j=2: Tom[0]*Tom[2]=1*3=3, Jerry[0]+Jerry[2]=1+2=3. (Tranquil)\r\nThus, 2 tranquil pairs.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10^5</li>\r\n    <li>1 &le; Tom[i] &le; N</li>\r\n    <li>1 &le; Jerry[i] &le; N</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_12july",
        "company_id": 189
    },
    {
        "id": 1008,
        "title": "Permutaria Royal Dance",
        "problem_statement": "<h1>Permutaria Royal Dance</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the grand kingdom of Permutaria, a magnificent royal dance is held every year. The king orders N noble dancers, numbered 1 to N, to perform in a specific sequence.</p>\r\n<p>The dancers are arranged in a sequence K for the performance. However, to make the event exciting the i-th dancer to perform is asked to wait in position r where |r-i| >= X.</p>\r\n<p>Find the total number of ways in which you can form K. Since the answer can be large return it modulo 998244353.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer, N denoting the number of dancers.</p>\r\n<p>The next line contains an integer, X denoting the minimum difference between the current position and the original position.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n1\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>N = 1 (Only 1 dancer)</p>\r\n<p>X = 1 (Minimum difference constraint)</p>\r\n<p>Valid permutation:</p>\r\n<p>Since there is only one dancer, they must be in position 1. However, the rule states that dancer 1 cannot be placed in position 1 because |1 - 1| < 1, making it impossible to arrange them in a valid way.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n1\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>N = 2 (Two dancers: 1 and 2)</p>\r\n<p>X = 1 (Minimum difference constraint)</p>\r\n<p>Valid permutations:</p>\r\n<p>(2, 1) -></p>\r\n<p>Dancer 2 is in position 1 -> |1 - 2| = 1 >= X</p>\r\n<p>Dancer 1 is in position 2 -> |2 - 1| = 1 >= X</p>\r\n<p>Valid sequence</p>\r\n<p>Since this is the only valid arrangement, the total count is 1.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>N = 3 (Three dancers: 1, 2, and 3)</p>\r\n<p>X = 1 (Minimum difference constraint)</p>\r\n<p>Valid permutations:</p>\r\n<p>(2, 3, 1)</p>\r\n<p>Dancer 2 in position 1 -> |1 - 2| = 1 >= X</p>\r\n<p>Dancer 3 in position 2 -> |2 - 3| = 1 >= X</p>\r\n<p>Dancer 1 in position 3 -> |3 - 1| = 2 >= X</p>\r\n<p>So, its a valid sequence</p>\r\n<p>(3, 1, 2)</p>\r\n<p>Dancer 3 in position 1 -> |1 - 3| = 2 >= X</p>\r\n<p>Dancer 1 in position 2 -> |2 - 1| = 1 >= X</p>\r\n<p>Dancer 2 in position 3 -> |3 - 2| = 1 >= X</p>\r\n<p>So, its a valid sequence</p>\r\n<p>Total valid arrangements = 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10<sup>5</sup></li>\r\n    <li>1 &lt;= X &lt;= 10<sup>5</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_12july",
        "company_id": 189
    },
    {
        "id": 1009,
        "title": "Maximum Sum of Good Subarray",
        "problem_statement": "<h1>Maximum Sum of Good Subarray</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array A of length N consisting of non-zero integers.</p>\r\n<p>A subarray is considered good if the LCM of the subarray (which is the smallest positive integer that is a multiple of all its elements) is not equal to the LCM of the entire array.</p>\r\n<p>Find the maximum sum of a good subarray. Since the answer can be very large return it modulo 10^9+7.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>It is given that in this problem the LCM of empty arrays is equal to 0.</li>\r\n</ul>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first line contains an integer, N, denoting the number of elements in A.</p>\r\n<p>Each line i of the N subsequent lines (where 0 &le; i &lt; N) contains an integer describing A[i].</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n2\r\n3\r\n-3\r\n-2\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> N=4, A=[2,-3,-3,-2]. Possible subarrays are: [2], [3], [-3], [-2]. Among all these ones, the maximum subarray sum is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1\r\n2\r\n3\r\n4\r\n5\r\nOutput:\r\n10</code></pre>\r\n<p><strong>Explanation:</strong> N=5, A=[1,2,3,4,5]. The LCM of the entire array is 60. If we pick the first 4 ones, we get an LCM equal to 12 and sum equal to 10. If we don't do that, then we must pick 5, and the optimal subarray containing 5 is [4, 5] with LCM equal to 20 and sum equal to 9. So the answer is 10.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n1\r\n-1\r\n-1\r\n1\r\n1\r\n1\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> N=6, A=[1,-1,-1,1,1,1]. It's clear that the LCM of any subarray is 1, so it's optimal to pick the empty subarray with LCM equal to 0 and sum equal to 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10^5</li>\r\n    <li>-10^5 &le; A[i] &le; 10^5</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_12july",
        "company_id": 189
    },
    {
        "id": 1010,
        "title": "Cost of G-Good Sets",
        "problem_statement": "<h1>Cost of G-Good Sets</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a tree of N nodes, each node has a value A<sub>i</sub>, written on it.</p>\r\n<p>The Parent of each node is denoted by the Par array, where Par[i] denotes the parent of the i-th node. The node whose Parent is 0 is root node and Node 0 does not exist.</p>\r\n<p>For some positive integer g, we call a pair of nodes (u, v) <strong>g_disconnected</strong> if the following conditions hold:</p>\r\n<ul>\r\n    <li>Both A<sub>u</sub> and A<sub>v</sub> are multiples of g.</li>\r\n    <li>There is no path between u and v in the tree, such that all the values on this path are multiples of g.</li>\r\n</ul>\r\n<p>For some positive integer g, a set of nodes is considered <strong>g_good</strong> if the following conditions hold:</p>\r\n<ul>\r\n    <li>The set is not empty.</li>\r\n    <li>All values of the nodes in the set are multiples of g.</li>\r\n    <li>The nodes of the set are pairwise <strong>g_disconnected</strong>. In other words, for every pair of nodes u, v in the set such that u is not equal to v, the pair (u, v) is g_disconnected.</li>\r\n</ul>\r\n<p>Two sets of nodes are considered different if there is a node that is contained in one of the sets, but not both of them.</p>\r\n<p>For some positive integer g, we define <strong>cost(g)</strong> as the number of different <strong>g_good</strong> sets.</p>\r\n<p>Your task is to find the sum of <strong>cost(g)</strong> for all positive integers g. Since the answer can be very large, return the answer modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer, N, denoting the number of elements in A.</p>\r\n<p>Each line i of the N subsequent lines (where 1 &le; i &le; N) contains an integer describing A[i].</p>\r\n<p>Each line i of the N subsequent lines (where 1 &le; i &le; N) contains an integer describing Par[i].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>1 &le; A[i] &le; 10<sup>5</sup></li>\r\n    <li>0 &le; Par[i] &le; N</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n2\r\n0\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> N=1, A=[2], Par=[0]</p>\r\n<p>For both g=1 and g=2, we have 1 good set which is {1}, and for all other values the number of g_good sets is 0, so the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n2\r\n2\r\n0\r\n1\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Understanding the Input:</p>\r\n<p>N = 2 -> There are 2 nodes in the tree.</p>\r\n<p>A = [2, 2] -> The values assigned to the two nodes.</p>\r\n<p>Parent Array = [0, 1]</p>\r\n<p>Since 0 is a placeholder, the actual tree structure is:</p>\r\n<p>Node 1 is the root.</p>\r\n<p>Node 2 is child of node 1.</p>\r\n<p>Tree Representation:</p>\r\n<pre><code class='language-text'>1\r\n|\r\n2</code></pre>\r\n<p>This is a single-edge tree where:</p>\r\n<p>Node 1 has value 2.</p>\r\n<p>Node 2 has value 2.</p>\r\n<p>Step-by-Step Evaluation of cost(g):</p>\r\n<p>We need to compute cost(g) for all valid integers G.</p>\r\n<p>Possible values of g:</p>\r\n<p>cost(1):</p>\r\n<p>Multiples of g = 1 -> {1, 2} (both nodes are included).</p>\r\n<p>Finding g_good sets:</p>\r\n<p>Nodes 1 and 2 are connected, so they are not g_disconnected.</p>\r\n<p>The only valid g_good sets are single-node sets:</p>\r\n<p>{1}, {2}</p>\r\n<p>Count: cost(1) = 2</p>\r\n<p>For g = 2:</p>\r\n<p>Multiples of g = 2 -> {1, 2} (both nodes are included).</p>\r\n<p>Finding g_good sets:</p>\r\n<p>Nodes 1 and 2 are connected, so they are not g_disconnected.</p>\r\n<p>The only valid g_good sets are single-node sets:</p>\r\n<p>{1}, {2}</p>\r\n<p>Count: cost(2) = 2</p>\r\n<p>The total number of distinct g_good sets, summed over all possible values of g, is 4.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n1\r\n2\r\n2\r\n0\r\n1\r\n1\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> N=3, A=[1,2,2], Par=[0,1,1]</p>\r\n<p>For g=1, we have three good sets: {1}, {2} and {3}.</p>\r\n<p>For g=2, we have three good sets: {2}, {3}, {2, 3}.</p>\r\n<p>For all other values, the number of good sets is 0.</p>\r\n<p>The answer is 3 + 3 = 6.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<pre><code class='language-javascript'>import sys\r\n\r\ndef gen_ans(N, A, Par):\r\n    # Write your code here\r\n    pass\r\n\r\ndef main():\r\n    N = int(sys.stdin.readline().strip())\r\n    A = []\r\n    for _ in range(N):\r\n        A.append(int(sys.stdin.readline().strip()))\r\n    Par = []\r\n    for _ in range(N):\r\n        Par.append(int(sys.stdin.readline().strip()))\r\n    \r\n    # Call your function and print the result\r\n    # result = gen_ans(N, A, Par)\r\n    # print(result)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Infosys_12july",
        "company_id": 189
    }
]