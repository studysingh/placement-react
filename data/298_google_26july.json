[
    {
        "id": 947,
        "title": "Swap subtree",
        "problem_statement": "<h1>Swap subtree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an undirected tree with N nodes rooted at node 1. Every node has a value A[i] assigned to it. You need to answer Q queries of the following type:</p>\r\n<ul>\r\n    <li>\r\n        <p><strong>UVX</strong></p>\r\n        <ul>\r\n            <li>Choose the subtree with U as the root node and subtree with V as the root node and swap their positions i.e. detach both the subtrees and swap their positions.</li>\r\n            <li>If node U is an ancestor of node V or node V is an ancestor of node U, above swapping, is not performed.</li>\r\n            <li>Find the sum of node values present in the subtree rooted at node X.</li>\r\n            <li>If the swap operation is performed, then redo this operation, that is swap the subtree with U as the root node and subtree with V as the root node.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Task</h3>\r\n<p>Determine the required answer for Q queries.</p>\r\n\r\n<h3>Notes</h3>\r\n<ul>\r\n    <li>Assume 1-based indexing.</li>\r\n    <li>A node u is said to be an ancestor of node v if node u lies on a simple path between root and node v.</li>\r\n    <li>Redo means re-doing the operation performed.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 5, A = [4, 1, 4, 2, 3], edges = [[1, 2], (2, 3), (2, 4), (1, 5)], Q = 1, query = [[3, 5, 2]]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> For query 1 (U=3, V=5, X=2): After swap operation, edges will be [(1, 2), (2, 5), (2, 4), (1, 3)]. Nodes in the subtree rooted at node 2 are 2, 4, 5. Sum of node values is 1 + 2 + 3 = 6.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the solve function provided in the editor. This function takes the following 5 parameters and returns the required answer.</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents the number of nodes in the tree</li>\r\n    <li><strong>A:</strong> Represents the values assigned to each node in the tree</li>\r\n    <li><strong>edges:</strong> Represents the edges present in the tree</li>\r\n    <li><strong>Q:</strong> Represents the number of queries</li>\r\n    <li><strong>query:</strong> Represents the queries</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>Note: This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<p>The first line contains a single integer T, which denotes the number of test cases. T also specifies the number of times you have to run the solve function on a different set of inputs.</p>\r\n<p>For",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "google_26july",
        "company_id": 298
    },
    {
        "id": 948,
        "title": "Busy Typing",
        "problem_statement": "<h1>Busy Typing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Mike is a programmer. When he is coding he tries to type the code as fast as possible. Sometimes he tries to write 2 consecutive letters of a string at the same instance of time but that can cause problems sometimes.</p>\r\n<p>Like if the word is \"range\" and he tries to write the 'g' and 'e' at the same time instance then two words can be produced \"range\" and \"raneg\" i.e. the positions of consecutive letters can be swapped if 2 letters are typed at the same instance.</p>\r\n<p>He wants to type a given string S of lowercase English alphabets of length N. If Mike types i<sub>th</sub> and (i+1)<sub>th</sub> character at the same instance then he cannot type (i+1)<sub>th</sub> and (i+2)<sub>th</sub> character at the same instance for all valid i.</p>\r\n<p>It is not always necessary that he types 2 characters at a time. He can type 1 character at a time too.</p>\r\n<p>1-based indexing is used.</p>\r\n<p><strong>Task:</strong> Determine how many different strings can be produced because of his busy typing. As this number could be large, print it modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 3, S = \"abc\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe original string is \"abc\".</p>\r\n<ul>\r\n    <li>If he types 1st and 2nd characters at the same instance, 2 different strings can be produced: \"abc\" (original) and \"bac\" (swapped 1st and 2nd).</li>\r\n    <li>If he types 2nd and 3rd characters at the same instance, 2 different strings can be produced: \"abc\" (original) and \"acb\" (swapped 2nd and 3rd).</li>\r\n</ul>\r\n<p>Since swapping (1,2) prevents swapping (2,3), and swapping (2,3) prevents swapping (1,2) and (3,4), only one pair of adjacent characters can be swapped at a time.\r\nSo, total 3 different strings can be produced: \"abc\", \"bac\", \"acb\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 4, S = \"abac\"\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe original string is \"abac\".</p>\r\n<ul>\r\n    <li>Original string: \"abac\"</li>\r\n    <li>Swap 1st and 2nd characters: \"baac\" (from \"abac\")</li>\r\n    <li>Swap 2nd and 3rd characters: \"aabc\" (from \"abac\")</li>\r\n    <li>Swap 3rd and 4th characters: \"abca\" (from \"abac\")</li>\r\n    <li>Swap 1st and 2nd characters AND 3rd and 4th characters simultaneously (these are non-overlapping swaps, so allowed by the rule): \"baca\" (from \"abac\")</li>\r\n</ul>\r\n<p>Thus, a total of 5 different strings can be produced: \"abac\", \"baac\", \"aabc\", \"abca\", \"baca\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; T &le; 10<sup>4</sup></li>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>Sum of N over all testcases does not exceed 10<sup>5</sup></li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>BusyTyping</code> provided in the editor. This function takes the following 2 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the length of the string S</li>\r\n    <li><code>S</code>: Represents the given string S</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains T denoting the number of test cases. T also specifies the number of times you have to run the <code>BusyTyping</code> function on a different set of inputs.</p>\r\n<p>For each test case:</p>\r\n<ul>\r\n    <li>The first line contains an integer N.</li>\r\n    <li>The second line contains a string S.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case in a new line, print the number of different strings that can be produced. As this number could be large, print it modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Time and Memory Limits</h2>\r\n<p>Time Limit: 1.0 sec(s) for each input file</p>\r\n<p>Memory Limit: 256 MB</p>\r\n<p>Source Limit: 1024 KB</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "google_26july",
        "company_id": 298
    }
]