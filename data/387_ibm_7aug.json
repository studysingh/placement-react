[
    {
        "id": 1155,
        "title": "Minimize URL Compression",
        "problem_statement": "<h1>Minimize URL Compression</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a URL shortening service, the URL is given as a string <code>url</code> consisting of lowercase English letters.</p>\r\n<p>The task is to extract a subsequence of exactly <code>k</code> characters from the <code>url</code> that minimizes the URL compression, defined as the difference between the length of the subsequence and the number of distinct characters in the subsequence.</p>\r\n<p>Implement a function to compute the minimum possible compression for any subsequence of length <code>k</code>.</p>\r\n<p>The function <code>minimizeURLCompression</code> takes the following inputs:</p>\r\n<ul>\r\n    <li><code>string url</code>: a string representing the original URL code</li>\r\n    <li><code>int k</code>: the desired length of the subsequence</li>\r\n</ul>\r\n<p>The function should return the minimum possible compression in any subsequence of length <code>k</code>.</p>\r\n<p><strong>Note:</strong> The subsequence of a string is a string obtained by deleting any set of characters from the original string while retaining the order of remaining characters.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>url = \"ooxoxo\"\r\nk = 4</code></pre>\r\n<p><strong>Explanation:</strong> One optimal subsequence of length exactly <code>k</code> is 'ooxx'. The length of the subsequence is 4, and it contains two distinct characters, 'o' and 'x'. The URL compression is 4 - 2 = 2. Hence, the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: url = \"aaabbbbb\", k = 5\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One optimal subsequence of length exactly <code>k</code> is 'aabbb'. It is 5 characters long and has two distinct characters, 'a' and 'b'. The compression is 5 - 2 = 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: url = \"abcdeabcde\", k = 5\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> One optimal subsequence of length exactly <code>k</code> is 'abcde'. Its length is 5 and it has 5 distinct characters, 'a', 'b', 'c', 'd', and 'e'. Its compression is 5 - 5 = 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= k &lt;= length(url) &lt;= 10<sup>5</sup></code></li>\r\n    <li>String <code>url</code> consists of lowercase English letters only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_7aug",
        "company_id": 387
    },
    {
        "id": 1156,
        "title": "Common Ages",
        "problem_statement": "<h1>Common Ages</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two arrays containing ages of volcanic and non-volcanic materials, identify all ages that appear in both arrays.</p>\r\n<p>Return these common ages sorted in descending order (oldest to newest).</p>\r\n<p>For example, you are given the following two arrays:</p>\r\n<pre><code class='language-text'>volcanic = [7000, 13400, 7000, 14000]\r\nnonVolcanic = [7000, 13400, 150000, 7000]</code></pre>\r\n<p>Your return array should show: <code>result = [13400, 7000, 7000]</code></p>\r\n<p>The age 7000 is present twice in both input arrays. Therefore, there are two matches and both should be returned in the output array. Likewise, 13400 is present in both arrays and should be returned in the output array. However, there is no matching number for 150000 in volcanic or 14000 in nonVolcanic, so these two numbers should not be returned in result.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>commonAges</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int volcanic[n]</code>: an array of integers</li>\r\n    <li><code>int nonVolcanic[m]</code>: an array of integers</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int[]</code>: the ages of matching pairs that can be created between volcanic and nonVolcanic in descending order</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nsize of volcanic[] = 5\r\nvolcanic elements:\r\n7000\r\n7000\r\n12000\r\n13000\r\n6900\r\nsize of nonvolcanic[] = 7\r\nnonVolcanic elements:\r\n6910\r\n7010\r\n7000\r\n12000\r\n18000\r\n15000\r\n10450\r\nOutput:\r\n12000\r\n7000</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nsize of volcanic[] = 13\r\nvolcanic elements:\r\n10670\r\n14376\r\n16797\r\n16111\r\n17203\r\n16390\r\n8500\r\n7551\r\n12365\r\n12848\r\n6988\r\n17875\r\n11751\r\nsize of nonvolcanic[] = 13\r\nnonVolcanic elements:\r\n8500\r\n7155\r\n12365\r\n16111\r\n14376\r\n17203\r\n17875\r\n13115\r\n10048\r\n8500\r\n10670\r\n16797\r\n7551\r\nOutput:\r\n17875\r\n17203\r\n16111\r\n8500\r\n8500</code></pre>\r\n<p><strong>Explanation:</strong> There are two pieces of non-volcanic material and two pieces of volcanic material with the age of 8500, so this number appears twice in the output. There is one piece of volcanic material and two pieces of non-volcanic material with the age of 16,111, so only one pair should be returned in the output array. The ages 17,875 and 17,203 each occur once in the volcanic material list and once in the non-volcanic material list, so they are both only returned once in the output array. All other ages do not have matches; therefore, they should not be returned in the array.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_7aug",
        "company_id": 387
    }
]