[
    {
        "id": 670,
        "title": "Graph Shortest Path by Color Query",
        "problem_statement": "<h1>Graph Shortest Path by Color Query</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Consider an undirected weighted graph G(V,E) where V and E are the number of vertices and edges respectively. The vertices of the graph are coloured. Two vertices in the graph make a pair and are of same colour, thus V/2 (if V is even) or (V+1)/2 (if V is odd) pairs are present in G and same number of colours are used, as each pair has a different colour.</p>\r\n<p>A query is thrown which is basically a colour used among the pairs of vertices. Write a program to determine the shortest path (according to the weight) from one vertex to its partner which are determined with the same colour given in Q.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; V &le; 100</li>\r\n    <li>1 &le; E &le; 100</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains two integers <strong>V</strong> and <strong>E</strong> separated by single white space, where <strong>V</strong> is the number of vertices and <strong>E</strong> is the number of edges.</p>\r\n<p>Next <strong>E</strong> lines of input contain three integers <strong>u</strong>, <strong>v</strong> and <strong>w</strong> separated by single white space, where <strong>u</strong> is the source, <strong>v</strong> is destination and <strong>w</strong> is the weight.</p>\r\n<p>Next <strong>V/2</strong> pair of nodes are specified. Each pair of nodes are coloured with <strong>ith</strong> colour (i=1 to <strong>V/2</strong> if <strong>V</strong> is even, i=1 to <strong>(V+1)/2</strong> if <strong>V</strong> is odd). If <strong>V</strong> is an Odd number then, a leftover node is specified at line number (V+2).</p>\r\n<p>The last line of input contains an integer, which is a colour number, where the shortest path is to be found between the pair of the inputted colour.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains the shortest path between the pair of queried colour. In output, each vertex is separated by the other by single white space.</p>\r\n<p><strong>Note:</strong> If V is odd, one vertex cannot make pair, thus no shortest path can be found for its colour.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7 8\r\n0 6 10\r\n0 2 11\r\n2 4 9\r\n4 6 2\r\n5 2 7\r\n5 1 8\r\n1 4 3\r\n3 4 4\r\n0 1\r\n2 3\r\n5 6\r\n4 4\r\n3\r\nOutput: 5 1 4 6</code></pre>\r\n<p><strong>Explanation:</strong> In the above diagram, colour 1 - 0, 1; colour 2 - 2, 3; colour 3 - 5, 6; colour 4 - 4, 4. Query: Colour 3, i.e. Shortest Path between 5 and 6. Hence, the shortest path from 5 to 6 is 5 - 1 - 4 - 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 2\r\n1 3 2\r\n1 2 4\r\n1 2\r\n1 3\r\n1\r\nOutput: 1 3 2</code></pre>\r\n<p><strong>Explanation:</strong> In the above diagram, colour 1 - 1, 2; colour 2 - 1, 3. Query: colour 1, i.e. Shortest Path between 1 and 2. Hence, the shortest path from 1 to 2 is 1 - 3 - 2.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_12july",
        "company_id": 216
    },
    {
        "id": 671,
        "title": "Count Reachable Cells",
        "problem_statement": "<h1>Count Reachable Cells</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a board of size M X N where each cell can be either empty(O) or a wall(X). A robot is initially placed at the cell on the top left corner and has to visit all the empty cells on the board that it can reach by either walking straight or backward or by taking 90Â° turns, i.e. it cannot move diagonally. Find the maximum number of cells the robot can visit.</p>\r\n<p><strong>Input Format:</strong> The first line of input has two integers, M and N, the size of the board. Next M lines have N characters, either 'X' or 'O', where O represents the empty cell and X represents the wall.</p>\r\n<p><strong>Output Format:</strong> A single line of output has the number of cells the robot can visit.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 3\r\nOXO\r\nOOX\r\nXOO\r\nOOO\r\nOutput:\r\n8</code></pre>\r\n<p><strong>Explanation:</strong> The board is given below. The shaded cells represent walls. The Robot is placed at the top-left cell marked as 1 and it can move only forward or left or right. The other cells that can be reached by the robot are marked using integers. In this board, the robot can reach all empty cells except the top right corner cell. The total number of cells the robot can reach is 8 and hence the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 3\r\nOOO\r\nOOX\r\nXOO\r\nXOO\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> The board is given below. The shaded cells represent walls. The Robot is placed at the top-left cell marked as 1 and it can move only forward or backward or left or right. The other cells that can be reached by the robot are marked using integers. In this board, robot can reach all empty cells except the 3 cells at the bottom right corner. The total number of cells robot can reach is 6 and hence the output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= M, N <= 100</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_12july",
        "company_id": 216
    },
    {
        "id": 672,
        "title": "Village Voyage",
        "problem_statement": "<h1>Village Voyage</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A computer game \"Village Voyage\" has N villages (labeled 1 to N) at same distance from each other. The player shall start from any village S and travel through all the villages to come back to the starting village S and finish the game. At each village checkpoint, the player will find a number of energy drinks, which will help him travel further. One energy drink will give him the energy to travel one unit of distance. At any point in the journey, if he does not have the sufficient number of energy drinks, he cannot complete the tour and will lose the game. Any leftover energy gets added up to the current number of energy drinks.</p>\r\n<p>At every village checkpoint, the player is provided with:</p>\r\n<ul>\r\n    <li>1) The number of energy drinks available in that village.</li>\r\n    <li>2) The distance from that village to the next village.</li>\r\n</ul>\r\n<p>Write a program to help the player select a starting village S so that he is equipped with sufficient drinks to consequently win the game. If starting at multiple villages can achieve the win, then print the village with the smallest label (1 to N).</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input Format:</strong></p>\r\n<pre><code class='language-text'>The first line of input contains N, the number of villages.\r\nThe next N lines of input contain the number of energy drinks available at that village checkpoint, followed by the distance of the next village from the current village.</code></pre>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>6\r\n3 5\r\n5 2\r\n6 4\r\n3 4\r\n5 3\r\n4 2</code></pre>\r\n<p><strong>Output Format:</strong></p>\r\n<pre><code class='language-text'>The output contains the starting village S.</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>2</code></pre>\r\n<p><strong>Explanation:</strong> There are 6 villages.<br>Village1 has 3 energy drinks, and distance to village2 is 5.<br>Village2 has 5 energy drinks, and distance to village3 is 2, and so on.<br>The player cannot start from the first village as the number of drinks available is 3, whereas the distance to go to the next village is 5. The player can start from the second village as 5 energy drinks gives enough energy to cover the distance between the second and the third village, which is 2. He consumes 2 energy drinks to cover the distance of 2 units and hence he saves 3 energy drinks. In the next village, he collects 6 energy drinks and the total number of energy drinks he now has is 9. He then again consumes 4 energy drinks to cover 4 units of distance. Continuing likewise, it can be seen that if he starts from the second village, he can win the game. Thus, the output is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>4\r\n5 3\r\n2 4\r\n3 7\r\n8 4</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>4</code></pre>\r\n<p><strong>Explanation:</strong> Here, if the player starts from the fourth village, he can win the game. Thus, the output is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N > 0</li>\r\n    <li>Consider that a solution exists for all the test cases provided.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_12july",
        "company_id": 216
    },
    {
        "id": 673,
        "title": "Julie's City Tour",
        "problem_statement": "<h1>Julie's City Tour</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Julie is new to city D. She is curious to know about the city and plans to visit the city's landmarks. The landmarks of the city (numbered 1 to N) are well connected through the bus network. Julie plans to start from landmark #1 which is near her home (she can walk this distance) and wishes to visit as many landmarks as possible using the buses. However she has limited money to spend on bus tickets and to avoid getting lost in the new city, she decides to come back the same way she went out, retracing her steps.</p>\r\n<p>Write a program to help her to find out which are the landmarks she can visit and come back home before she runs out of money.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings while reading the input or while printing, as these contribute to the standard output.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains two integers (N and M) separated by a single white space, where <strong>N</strong> specifying the number of landmarks and <strong>M</strong> specifying the number of bus routes.</p>\r\n<p>Next line of input contains the total money <strong>P</strong> she has initially.</p>\r\n<p>Each of the next <strong>M</strong> lines contains details of the <strong>M</strong> bus routes, with <strong>U</strong> and <strong>V</strong> denoting the two landmarks connected to each other and <strong>W</strong> denoting the price of the bus ticket for that route.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains the route she has taken from the source travelling through the landmarks and ending back at the source, with each landmark being separated by a white space.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 100</code>, the number of landmarks</li>\r\n    <li><code>0 &lt;= M &lt;= 100</code>, the number of bus routes</li>\r\n    <li><code>1 &lt;= U, V &lt;= N</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 4\r\n120\r\n1 2 10\r\n2 3 20\r\n3 4 30\r\n4 5 40\r\nOutput:\r\n1 2 3 4 3 2 1</code></pre>\r\n<p><strong>Explanation:</strong> From the sample input1, Julie had 120 rupees initially.</p>\r\n<ul>\r\n    <li>From landmark 1 - 2, she needs 10 rupees.</li>\r\n    <li>From landmark 2 - 3, she needs 20 rupees.</li>\r\n    <li>From landmark 3 - 4, she needs 30 rupees.</li>\r\n    <li>From landmark 4 - 5, she needs 40 rupees.</li>\r\n</ul>\r\n<p>Given Julie has 120 rupees only, she cannot visit landmark 5 as the total cost would be 10+20+30+40 = 100 Rs and she would not have enough money to return back. Hence she turns back at landmark4 and the output is shown as the route she takes 1 2 3 4 3 2 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 5\r\n110\r\n1 2 10\r\n2 3 10\r\n3 4 20\r\n4 5 5\r\n5 6 5\r\nOutput:\r\n1 2 3 4 5 6 5 4 3 2 1</code></pre>\r\n<p><strong>Explanation:</strong> From the sample input2, Julie has 110 rupees initially.</p>\r\n<ul>\r\n    <li>From landmark 1 - 2, she needs 10 rupees.</li>\r\n    <li>From landmark 2 - 3, she needs 10 rupees.</li>\r\n    <li>From landmark 3 - 4, she needs 20 rupees.</li>\r\n    <li>From landmark 4 - 5, she needs 5 rupees.</li>\r\n    <li>From landmark 5 - 6, she needs 5 rupees.</li>\r\n</ul>\r\n<p>To reach all 6 landmarks Julie needs 50 Rs, and to return she needs another 50, so total 100. Since she has 110 rupees, she can visit all the landmarks. Output is hence printed as 1 2 3 4 5 6 5 4 3 2 1.</p>\r\n\r\n<h2>Provided Code Structure (C++)</h2>\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nvoid optimalPath(int N, int M, int price, int *source, int *dest, int *weight)\r\n// N and M number of cities and number of routes available to reach one city to other city.\r\n// price is the total amount julie has with her.\r\n// source, dest, weight are the arrays which has routes which connects source and destination and\r\n// fair to reach the destination from source.\r\n{\r\n    // WRITE YOUR CODE HERE\r\n}\r\n\r\nint main()\r\n{\r\n    int N, M, price;\r\n    cin>>N>>M;\r\n    cin>>price;\r\n    int source[M];\r\n    int dest[M];\r\n    int weight[M];\r\n    for (int i = 0; i < M; i++)\r\n    {\r\n        cin>>source[i]>>dest[i]>>weight[i];\r\n    }\r\n    optimalPath(N,M,price,source,dest,weight);\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_12july",
        "company_id": 216
    },
    {
        "id": 674,
        "title": "Number of Straight Lines",
        "problem_statement": "```html\r\n<h1>Number of Straight Lines</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given N distinct co-ordinates (x,y) in the cartesian plane, find the number of straight lines that go through at least three of the N co-ordinates.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print any output other than the desired output, as it will contribute to the standard output and test cases will fail.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>The first line of input contains an integer N, which is the number of co-ordinates. Next N lines have two integers x and y separated by a single white space, where x and y form the co-ordinate.</p>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>Single line of output contains the number of straight lines that go through at least three co-ordinates.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n1 1\r\n3 1\r\n3 3\r\n1 4\r\n5 5\r\n5 1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> From the figure given below (not included in HTML), we can see that (1,1), (3,3) and (5,5) form a line. Similarly (1,1), (3,1) and (5,1) also form a straight line. So output is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n-3 -2\r\n-1 0\r\n0 0\r\n1 2\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> There is only one straight line formed by (-3, -2), (-1, 0) and (1, 2). So output is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>3 &lt;= N &lt;= 100</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_12july",
        "company_id": 216
    },
    {
        "id": 675,
        "title": "Multigram",
        "problem_statement": "<h1>Multigram</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Ahuja is organizing an English word game for his birthday party. The game is to check whether the given word is a multigram.</p>\r\n<p><strong>Multigram:</strong> Bringing up two or more than two anagrams to form a word.</p>\r\n<p><strong>Anagram:</strong> Two words A and B are said to be anagrams if B can be obtained by changing the letter order of A.</p>\r\n<p>For instance, the word <code>ddeded</code> is a multigram, and it is formed with words <code>dde</code> and <code>ded</code> (which are anagrams of each other).</p>\r\n<p>Help Ahuja to solve the random riddle by determining whether that word <code>str</code> is a multigram and determine the first occurring anagram when it is processed from left to right and it is the shortest anagram by which all other anagrams are formed.</p>\r\n<p>Read the input from STDIN and write the output to STDOUT. You should not write arbitrary strings while reading the input and while printing as these contribute to the standard output.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>Single line of input contains <code>str</code>.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Single line of output contains the first occurring anagram when it is processed from left to right and it is the shortest anagram by which all other anagrams are formed. If the given word is not a multigram, output <code>-1</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: cccc\r\nOutput: c</code></pre>\r\n<p><strong>Explanation:</strong> Given word <code>str</code> is \"cccc\", it is a multigram. The shortest anagram by which all other anagrams are formed is 'c'. The string \"cccc\" is formed by concatenating 'c' four times, and 'c' is an anagram of itself.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: xyyxyyxyx\r\nOutput: xyy</code></pre>\r\n<p><strong>Explanation:</strong> Given word <code>str</code> is \"xyyxyyxyx\", it is a multigram. Anagrams of \"xyy\" can form \"yxy\" and \"yyx\". The first occurring anagram when it is processed from left to right is \"xyy\" and it is the shortest anagram by which all other anagrams are formed. The string \"xyyxyyxyx\" can be partitioned into \"xyy\", \"xyy\", \"xyx\", where \"xyy\", \"xyy\", and \"xyx\" are all anagrams of \"xyy\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= | str | < 200</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_12july",
        "company_id": 216
    },
    {
        "id": 676,
        "title": "Smallest Square from N Points",
        "problem_statement": "<h1>Smallest Square from N Points</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a set of N points in the Cartesian plane, write a program to find the side of the smallest square that can be drawn with the points coordinates from the given set. The sides of the square need to be parallel to the X and Y axes. The points act as the corners of the square.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N &lt;= 100</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains an integer, N, the number of points.</p>\r\n<p>Next N lines of input contain X and Y, the coordinates of the N points, one in each line, separated by a single white space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single line of output contains the side of the smallest square.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong>\r\n8\r\n2 3\r\n2 5\r\n1 1\r\n5 1\r\n2 2\r\n3 1\r\n3 5\r\n1 3\r\n<strong>Output:</strong>\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> The problem asks for the smallest square whose corners are among the given points. Based on the provided example, a square with side length 2 can be formed using points from the input set as its corners, and it is the smallest such square possible. Other larger squares might also be possible, such as one with side length 3.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Flipkart_12july",
        "company_id": 216
    }
]