[
    {
        "id": 1414,
        "title": "To You, In 2000 Years.",
        "problem_statement": "<h1>To You, In 2000 Years.</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a post-apocalyptic world, Eren, Mikasa, and Armin are part of an elite team tasked with reclaiming lost territories. The missions they undertake are crucial for humanity's survival, and they have developed a very distinct strategy for handling them. Each mission consists of n different tasks, and they prefer to split these tasks in a particular way to ensure success:</p>\r\n<ul>\r\n    <li>Eren always takes the initial tasks, dealing with the more straightforward challenges from 1 to i.</li>\r\n    <li>Armin, the strategist, steps in next, taking charge of the middle tasks, covering everything from i to j.</li>\r\n    <li>Mikasa, the team's strongest member, handles the toughest tasks towards the end, from j to n.</li>\r\n</ul>\r\n<p>Their teamwork is smooth when they handle missions this way. Eren leading, Armin holding the middle, and Mikasa finishing strong, with 1 &lt;= i &lt;= j &lt;= n. However, after one particularly chaotic mission, the tasks got mixed up, and each of them ended up with random tasks, out of their usual order.</p>\r\n<p>Now, the team needs to redistribute the tasks among themselves so that they fall back into their preferred pattern. Eren at the front, Armin in the middle, and Mikasa at the end. During each move, only one of them can hand over a task to another, which complicates things. They need to minimize the number of times they exchange tasks to get back to their ideal configuration.</p>\r\n<p>Your job is to help them figure out the minimum number of task transfers required to make sure the tasks are redistributed according to their plan, though some of them might end up with fewer or no tasks by the time the redistribution is complete.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>First line contains three integers: k1, k2 &amp; k3 - number of problems initially taken by Eren, Armin &amp; Mikasa initially</p>\r\n<p>Second line contains k1 integer problems taken by Eren initially</p>\r\n<p>Third line contains k2 integers - problems taken by Armin initially</p>\r\n<p>Fourth line contains k3 integers - problems taken by Mikasa initially</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>Print one integer - minimum number of moves required to redistribute the problems according to the condition!</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= k1, k2, k3 &lt;= 2 * 10^5, k1 + k2 + k3 &lt;= 2 * 10^5</li>\r\n    <li>Problems will be numbered from 1 to n where n = k1 + k2 + k3</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 1 2\r\n3 1\r\n4\r\n2 5\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> In this example, Mikasa will give the problem number 2 to Eren. So Eren solves problem 1, 2, 3; Armin solves 4 &amp; Mikasa solves 5!</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Titan_16sep",
        "company_id": 498
    },
    {
        "id": 1415,
        "title": "Let's go camping",
        "problem_statement": "<h1>Let's go camping</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a vast and adventurous mountain range, n camps are connected by trails, forming a tree-like network. The main base camp is Camp 1, from where all expeditions begin. Explorers need to plan routes from the base camp to various other camps, ensuring that they cover specific camps along the way.</p>\r\n<p>You are given m route verification requests. For each request, a set of k camps are specified, and the explorers want to know if it's possible to form a route from Camp 1 such that:</p>\r\n<ul>\r\n    <li>Every camp in the request is either directly part of the route, or</li>\r\n    <li>Each camp is connected by exactly one trail to a camp that's part of the route.</li>\r\n</ul>\r\n<p>The next n-1 lines describe the trails connecting camps. Each line contains two integers u and v (1 &lt; u, v &lt; n), indicating a trail between Camp u and Camp v.</p>\r\n<p>After that, the next m lines contain the route verification requests. Each request starts with an integer k (the number of camps), followed by k distinct camp numbers. These camps must either be part of the main route or connected by one trail to it.</p>\r\n<p>Sum of total k across all requests will not exceed 5 * m.</p>\r\n<p>For each request, determine if the expedition route can be planned accordingly. Print \"YES\" if the route is possible, and \"NO\" if it's not.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n10 6\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 6\r\n2 7\r\n3 8\r\n3 9\r\n9 10\r\n4 3 8 9 10\r\n3 2 1 5\r\n3 4 8 2\r\n2 6 10\r\n3 5 4 7\r\n\r\nOutput:\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>n (3 &lt; n &lt; 200,000) — The number of camps in the mountain range.</li>\r\n    <li>m (1 &lt; m &lt; 200,000) — The number of route verification requests.</li>\r\n    <li>Sum of total k across all requests will not exceed 5 * m.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Titan_16sep",
        "company_id": 498
    },
    {
        "id": 1416,
        "title": "Segment Trouble",
        "problem_statement": "<h1>Segment Trouble</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given N segments. Each segment has three characteristic properties (L,R,cost).</p>\r\n<p>This means that the segment starts from 'L', extends up to 'R', and has some 'cost'.</p>\r\n<p>Endpoints 'L' and 'R' are included in the segment.</p>\r\n<p>Two segments can form a valid pair, if and only if those two segments do not overlap.</p>\r\n<p>Segments are called overlapping if there is at least one point 'x' lying in both the segments.</p>\r\n<p>The cost of the pairing of two valid segments is defined as the product of their individual costs.</p>\r\n<p>Out of all possible valid pairs, find the valid pair of segments, for which their cost of pairing is minimal. Print that min cost of pairing.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line will contain a single integer N, denoting the number of segments. Then, the next line shall contain an integer, which will always be 3.</p>\r\n<p>Then, N lines follow, where each line shall contain three space-separated integers (L,R,cost)</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer in a single line, the answer to the problem. If you do not find any valid pair of segments, print -1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 1,00,000</li>\r\n    <li>1 &lt;= L &lt;= R &lt;= 1,000,000,000 for each segment</li>\r\n    <li>1 &lt;= cost &lt;= 1,000,000,000 for each segment</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n1 2 2\r\n2 3 10\r\n4 5 2\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> Pair up segments 1 and 3 as they don't overlap, giving the cost of 4.</p>\r\n\r\n<p><strong>Important Notes:</strong></p>\r\n<p>1.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Titan_16sep",
        "company_id": 498
    }
]