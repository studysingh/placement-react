[
    {
        "id": 1326,
        "title": "Connected Sum",
        "problem_statement": "<h1>Connected Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working on Uber's driver network analysis system, which models drivers as nodes in a graph. A connection (edge) exists between two drivers if they frequently operate in the same area or share rides in pooled trips.</p>\r\n<p>Uber wants to analyze these connected groups of drivers (connected components) to optimize demand prediction and driver incentives.</p>\r\n<ul>\r\n    <li>Each connected group of drivers is a connected component.</li>\r\n    <li>The order of a component is the number of drivers in it.</li>\r\n    <li>For each component, Uber assigns a \"support value\" equal to the ceiling of the square root of its size.</li>\r\n</ul>\r\n<p>The goal is to compute the total support value across all groups.</p>\r\n<p>For example, given <code>drivers_nodes = 10</code>, <code>drivers_from = [1, 2, 3, 7]</code>, and <code>drivers_to = [2, 3, 4, 8]</code>. This defines edges (1,2), (2,3), (3,4), (7,8).</p>\r\n<p>The connected components are:</p>\r\n<ul>\r\n    <li>{1, 2, 3, 4} (size 4). Support value: <code>ceil(sqrt(4)) = 2</code>.</li>\r\n    <li>{7, 8} (size 2). Support value: <code>ceil(sqrt(2)) = 2</code>.</li>\r\n    <li>{5} (size 1). Support value: <code>ceil(sqrt(1)) = 1</code>.</li>\r\n    <li>{6} (size 1). Support value: <code>ceil(sqrt(1)) = 1</code>.</li>\r\n    <li>{9} (size 1). Support value: <code>ceil(sqrt(1)) = 1</code>.</li>\r\n    <li>{10} (size 1). Support value: <code>ceil(sqrt(1)) = 1</code>.</li>\r\n</ul>\r\n<p>The total support value is <code>2 + 2 + 1 + 1 + 1 + 1 = 8</code>.</p>\r\n<p>Complete the function <code>connectedSum</code> in the editor below.</p>\r\n<p>The <code>connectedSum</code> function has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int drivers_nodes</code>: the number of nodes</li>\r\n    <li><code>int drivers_from[drivers_edges]</code>: an array of integers that represent one end of an edge</li>\r\n    <li><code>int drivers_to[drivers_edges]</code>: an array of integers that represent the other end of an edge</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: an integer that denotes the sum of the values calculated</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ndrivers_nodes = 4\r\ndrivers_edges = 2\r\ndrivers_from = [1, 1]\r\ndrivers_to = [2, 4]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The diagram below shows the components:</p>\r\n<p>\r\n    <img src=\"https://i.imgur.com/rX0Y2q8.png\" alt=\"Graph for Example 1\" style=\"max-width: 300px;\">\r\n</p>\r\n<p>The values to sum are:</p>\r\n<ol>\r\n    <li>Set {1, 2, 4}: c = ceil(sqrt(3)) = 2</li>\r\n    <li>Set {3}: c = ceil(sqrt(1)) = 1</li>\r\n</ol>\r\n<p><code>2 + 1 = 3</code></p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ndrivers_nodes = 8\r\ndrivers_edges = 4\r\ndrivers_from = [1, 8, 3, 6]\r\ndrivers_to = [5, 7, 8, 2]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The values to sum for each group are:</p>\r\n<ol>\r\n    <li>Set {2}: c = ceil(sqrt(1)) = 1</li>\r\n    <li>Set {4}: c = ceil(sqrt(1)) = 1</li>\r\n    <li>Set {1, 5, 6, 8}: c = ceil(sqrt(4)) = 2</li>\r\n    <li>Set {3, 7}: c = ceil(sqrt(2)) = 2</li>\r\n</ol>\r\n<p><code>1 + 1 + 2 + 2 = 6</code></p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= drivers_nodes <= 10^5</code></li>\r\n    <li><code>1 <= drivers_edges <= 10^5</code></li>\r\n    <li><code>1 <= drivers_from[i], drivers_to[i] <= drivers_nodes</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_3sep",
        "company_id": 461
    },
    {
        "id": 1327,
        "title": "Create Target Array in the Given Order",
        "problem_statement": "<h1>Create Target Array in the Given Order</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Uber, each driver maintains a queue of ride requests. Requests arrive one by one, and each new request may need to be inserted into a specific position in the queue, based on factors such as rider priority, promotions, or dispatch logic.</p>\r\n<p>When a new request is added to the queue at a given position:</p>\r\n<ul>\r\n    <li>The existing requests at that position and beyond are shifted one spot to the right to make space.</li>\r\n    <li>The queue always grows until all requests are inserted.</li>\r\n</ul>\r\n<p>Your task is to determine the final sequence of ride requests in the driver's queue after all insertions are completed.</p>\r\n<p>Complete the function <code>scheduleRequests</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int index[n]</code>: the insertion points for each request.</li>\r\n    <li><code>int request[n]</code>: the request ID numbers.</li>\r\n</ul>\r\n<p>The function is expected to return an <code>INTEGER_ARRAY</code>, which is the sequence of request values after all insertions are completed.</p>\r\n\r\n<pre><code class='language-javascript'>vector<int> scheduleRequests(vector<int> index, vector<int> request) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>This example illustrates the insertion process step-by-step.</p>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nindex = [0, 1, 2, 1, 2]\r\nrequest = [0, 1, 2, 3, 4]</code></pre>\r\n<p><strong>Step-by-step insertion process:</strong></p>\r\n<ol>\r\n    <li>Insert request 0 at position 0: <code>[0]</code></li>\r\n    <li>Insert request 1 at position 1: <code>[0, 1]</code></li>\r\n    <li>Insert request 2 at position 2: <code>[0, 1, 2]</code></li>\r\n    <li>Insert request 3 at position 1: <code>[0, 3, 1, 2]</code></li>\r\n    <li>Insert request 4 at position 2: <code>[0, 3, 4, 1, 2]</code></li>\r\n</ol>\r\n<pre><code class='language-text'>Output: [0, 3, 4, 1, 2]</code></pre>\r\n<p><strong>Explanation:</strong> The final sequence is <code>[0, 3, 4, 1, 2]</code> after all requests are inserted according to their respective indices.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nindex = [0, 1, 1]\r\nrequest = [0, 1, 2]</code></pre>\r\n<pre><code class='language-text'>Output: [0, 2, 1]</code></pre>\r\n<p><strong>Explanation:</strong> The output array goes through the following steps:</p>\r\n<ol>\r\n    <li>Insert <code>request[0]=0</code> at <code>index[0]=0</code>. Current array: <code>[0]</code></li>\r\n    <li>Insert <code>request[1]=1</code> at <code>index[1]=1</code>. Current array: <code>[0, 1]</code></li>\r\n    <li>Insert <code>request[2]=2</code> at <code>index[2]=1</code>. Current array: <code>[0, 2, 1]</code></li>\r\n</ol>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nindex = [0, 0]\r\nrequest = [0, 1]</code></pre>\r\n<pre><code class='language-text'>Output: [1, 0]</code></pre>\r\n<p><strong>Explanation:</strong> The output array goes through the following steps:</p>\r\n<ol>\r\n    <li>Insert <code>request[0]=0</code> at <code>index[0]=0</code>. Current array: <code>[0]</code></li>\r\n    <li>Insert <code>request[1]=1</code> at <code>index[1]=0</code>. Current array: <code>[1, 0]</code></li>\r\n</ol>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input:\r\nindex = [0, 1, 0]\r\nrequest = [0, 1, 2]</code></pre>\r\n<pre><code class='language-text'>Output: [2, 0, 1]</code></pre>\r\n<p><strong>Explanation:</strong> The output array goes through the following steps:</p>\r\n<ol>\r\n    <li>Insert <code>request[0]=0</code> at <code>index[0]=0</code>. Current array: <code>[0]</code></li>\r\n    <li>Insert <code>request[1]=1</code> at <code>index[1]=1</code>. Current array: <code>[0, 1]</code></li>\r\n    <li>Insert <code>request[2]=2</code> at <code>index[2]=0</code>. Current array: <code>[2, 0, 1]</code></li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>0 <= index[i], request[i] < n</code></li>\r\n    <li><code>0 <= index[i] <= i</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_3sep",
        "company_id": 461
    },
    {
        "id": 1328,
        "title": "Efficiency Scores",
        "problem_statement": "<h1>Efficiency Scores</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber's city infrastructure team is analyzing a network of service hubs across a metropolitan area. Each hub is connected to form a tree-like structure (no cycles, all hubs connected).</p>\r\n<p>Each hub is assigned a unique integer value that represents its operational efficiency score.</p>\r\n<p>Uber's operations team needs to answer multiple queries about sub-networks of hubs. Specifically, they want to count how many hubs <strong>within a given sub-network (including the queried hub itself and all hubs beneath it in the hierarchy)</strong> have a prime efficiency score.</p>\r\n<ul>\r\n    <li>An efficiency score of 1 is not considered prime.</li>\r\n</ul>\r\n<p><strong>Graph Construction (Network of Hubs)</strong></p>\r\n<ul>\r\n    <li>There are <code>n</code> hubs, numbered 1 through <code>n</code>.</li>\r\n    <li>The hubs are connected with <code>m = n - 1</code> undirected links, forming a tree.</li>\r\n    <li>Hub 1 is always considered the main root hub of the network.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>efficiencyScores</code> in the editor with the following parameters:</p>\r\n<pre><code class='language-cpp'>vector<int> efficiencyScores(int n, vector<int> first, vector<int> second, vector<int> efficiency_scores, vector<int> hub_queries) {\r\n    // Complete the 'efficiencyScores' function below.\r\n    // The function is expected to return an INTEGER_ARRAY.\r\n    // The function accepts following parameters:\r\n    // 1. INTEGER n\r\n    // 2. INTEGER_ARRAY first\r\n    // 3. INTEGER_ARRAY second\r\n    // 4. INTEGER_ARRAY efficiency_scores\r\n    // 5. INTEGER_ARRAY hub_queries\r\n}</code></pre>\r\n<ul>\r\n    <li><code>int n</code>: the number of nodes in the tree to be labeled 1 to <code>n</code></li>\r\n    <li><code>vector&lt;int&gt; first</code>: one node of each pair</li>\r\n    <li><code>vector&lt;int&gt; second</code>: the other node of each pair (<code>first[i]",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_3sep",
        "company_id": 461
    },
    {
        "id": 1337,
        "title": "Minimum Total Travel Time",
        "problem_statement": "```html\r\n<h1>Minimum Total Travel Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Uber, drivers are often required to complete multiple pickups or drop-offs in a specific sequence before reaching their final destination.</p>\r\n<p>The city is represented as an undirected road network graph, where intersections are nodes and roads are weighted edges representing travel times.</p>\r\n<ul>\r\n    <li>The driver always starts at node 1 (their initial location).</li>\r\n    <li>The final destination (the last rider drop-off) is always node <code>r_nodes</code>.</li>\r\n    <li>The driver must visit two required stops in order:\r\n        <ul>\r\n            <li>First stop at node <code>x</code> (e.g., rider pickup).</li>\r\n            <li>Second stop at node <code>y</code> (e.g., intermediate rider drop-off).</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>You are given:</p>\r\n<ul>\r\n    <li><code>r_nodes</code>: the number of intersections in the city.</li>\r\n    <li><code>r_from[i]</code> and <code>r_to[i]</code>: the two intersections connected by the i-th road.</li>\r\n    <li><code>r_weight[i]</code>: the travel time along that road.</li>\r\n</ul>\r\n<p><strong>Task</strong></p>\r\n<p>Compute the minimum total travel time for the driver to go from:<br>\r\nStart (node 1) &rarr; Stop x &rarr; Stop y &rarr; Final Destination (node <code>r_nodes</code>).<br>\r\nThe driver may pass through intersections multiple times if necessary.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong> r_nodes = 5, r_from = [1, 2, 3, 4, 5, 3], r_to = [2, 3, 4, 5, 1, 5], r_weight = [9, 11, 6, 1, 4, 10], x = 2, y = 3\r\n<strong>Output:</strong> 27</code></pre>\r\n<p><strong>Explanation:</strong> The path is from node 1 to 5, visiting 2 and then 3. The shortest path is 1 &rarr; 2 &rarr; 3 &rarr; 4 &rarr; 5. The total time is 9 + 11 + 6 + 1 = 27.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong> r_nodes = 4, r_from = [1, 1, 2, 2, 3], r_to = [2, 4, 4, 3, 4], r_weight = [6, 9, 10, 6, 11], x = 2, y = 3\r\n<strong>Output:</strong> 23</code></pre>\r\n<p><strong>Explanation:</strong> For the given graph, the ride has to go from junction 1 to junction <code>r_nodes</code> (which is 4), and the path should include junctions 2 and 3 in that order. The optimal path is 1 &rarr; 2 &rarr; 3 &rarr; 4. The total cost of this path is 6 + 6 + 11 = 23.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>4 &le; r_nodes &le; 10<sup>5</sup></code></li>\r\n    <li><code>4 &le; r_edges &le; min(10<sup>5</sup>, (r_nodes * (r_nodes - 1)) / 2)</code></li>\r\n    <li><code>1 &le; r_weight[i] &le; 10<sup>3</sup></code></li>\r\n    <li><code>2 &le; x &le; r_nodes-1</code></li>\r\n    <li><code>2 &le; y &le; r_nodes-1</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_3sep",
        "company_id": 461
    },
    {
        "id": 1338,
        "title": "Earliest Service Times",
        "problem_statement": "```html\r\n<h1>Earliest Service Times</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber is testing a city ride network simulation, where intersections are represented as nodes in a graph, and the roads connecting them are represented as edges.</p>\r\n<p>The city has <code>n</code> intersections, labeled 1 to n, and <code>m</code> bidirectional roads.</p>\r\n<ul>\r\n    <li>The <code>i</code>-th road connects <code>road_end1[i]</code> and <code>road_end2[i]</code> and takes <code>traveling_time[i]</code> minutes to drive across.</li>\r\n    <li>However, due to traffic regulations, each intersection <code>i</code> closes permanently at time <code>close_time[i-1]</code> and cannot be entered afterwards.</li>\r\n    <li>If a driver arrives at an intersection at the exact time it closes, it is considered unreachable. The arrival time must be strictly less than the closing time.</li>\r\n</ul>\r\n<p>A ride starts at intersection 1 at time 0. Your task is to determine the earliest time each intersection can be reached. If an intersection is unreachable, return -1.</p>\r\n<p>You need to complete the function which takes the following parameters:</p>\r\n<ul>\r\n    <li><code>close_time</code>: an array of integers, where <code>close_time[i-1]</code> is the closing time for intersection <code>i</code>.</li>\r\n    <li><code>road_end1</code>, <code>road_end2</code>: arrays representing the <code>m</code> roads.</li>\r\n    <li><code>traveling_time</code>: an array where <code>traveling_time[i]</code> is the time it takes to traverse the <code>i</code>-th road.</li>\r\n</ul>\r\n<p>The function should return an array of integers representing the earliest arrival times at each intersection, or -1 if an intersection is not reachable.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: \r\nn = 4\r\nclose_time = [1, 2, 7, 9]\r\nroad_end1 = [1, 2, 3, 4]\r\nroad_end2 = [2, 4, 1, 3]\r\ntraveling_time = [2, 1, 5, 3]\r\n\r\nOutput: [0, -1, 5, 8]\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Visit vertex 1 at time = 0. The vertex disappears at time 1.</li>\r\n    <li>For vertex 2: It takes <code>traveling_time</code> = 2 to traverse from 1 to 2. Arrival time is 0 + 2 = 2. The vertex disappears at time <code>close_time[1]</code> = 2. Since arrival time is not strictly less than the closing time, it's unreachable. Visit time = -1.</li>\r\n    <li>From vertex 1 to vertex 3: It takes <code>traveling_time</code> = 5. Arrival time is 0 + 5 = 5. This is before <code>close_time[2]</code> = 7. Visit time = 5.</li>\r\n    <li>Move from vertex 3 (arriving at time 5) to vertex 4: It takes <code>traveling_time</code> = 3. Arrival time is 5 + 3 = 8. This is before <code>close_time[3]</code> = 9. Visit time = 8.</li>\r\n</ul>\r\n<p>The answer array is [0, -1, 5, 8].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nclose_time = [3, 2, 5, 7]\r\nroad_end1 = [1, 1, 2, 3]\r\nroad_end2 = [2, 3, 4, 4]\r\ntraveling_time = [3, 4, 1, 2]\r\n\r\nOutput: [0, -1, 4, 6]\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The graph has n = 4 vertices and m = 4 edges. The vertices 1 to 4 will disappear at times t = [3, 2, 5, 7] respectively. The edges connect pairs (1,2), (1,3), (2,4), and (3,4). Vertex 2 cannot be reached before time = 2. By traversing first to vertex 3 then vertex 4, the arrival times are 4 and 4 + 2 = 6, both of which are valid.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nclose_time = [10, 3, 7]\r\nroad_end1 = [1, 1, 2]\r\nroad_end2 = [2, 3, 3]\r\ntraveling_time = [3, 9, 1]\r\n\r\nOutput: [0, -1, -1]\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The graph has n = 3 vertices and m = 3 edges. The vertices will disappear at times t = [10, 3, 7] respectively. The edges connect pairs (1,2), (1,3), (2,3) and take 3, 9, and 1 unit of time to traverse. Neither vertex 2 nor vertex 3 is reachable from vertex 1 before it disappears.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n, m &le; 300000</code></li>\r\n    <li><code>1 &le; close_time[i] &le; 3 * 10<sup>4</sup></code> or <code>close_time[i] = -1</code> (denoting it never closes)</li>\r\n    <li><code>1 &le; road_end1[i], road_end2[i] &le; n</code></li>\r\n    <li><code>road_end1[i] &ne; road_end2[i]</code></li>\r\n    <li><code>1 &le; traveling_time[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_3sep",
        "company_id": 461
    },
    {
        "id": 1339,
        "title": "Maximum Riders",
        "problem_statement": "```html\r\n<h1>Maximum Riders</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber operates a premium airport service that transports riders to and from the airport. The car can carry multiple riders at once. On each round trip, the driver starts from the Uber hub <code>(0,0)</code>, drives to the airport <code>(n-1, n-1)</code>, and then returns back to the hub, potentially picking up more riders along the way.</p>\r\n<p>The city map is represented as an n x n grid, where:</p>\r\n<ul>\r\n    <li><code>0</code> &rarr; an empty road cell (valid for travel).</li>\r\n    <li><code>1</code> &rarr; a road cell with a rider waiting to be picked up.</li>\r\n    <li><code>-1</code> &rarr; a blocked road (obstruction, not passable).</li>\r\n</ul>\r\n<p><strong>Movement Rules:</strong></p>\r\n<ul>\r\n    <li>The Uber driver always starts at the hub <code>(0,0)</code>.</li>\r\n    <li>To reach the airport <code>(n-1, n-1)</code>, the driver can only move right (&rarr;) or down (&darr;) along valid roads.</li>\r\n    <li>On the return trip back to the hub, the driver can only move left (&larr;) or up (&uarr;) along valid roads.</li>\r\n    <li>If the driver passes through a road cell with a rider (<code>1</code>), that rider is picked up immediately, and the cell becomes empty (<code>0</code>).</li>\r\n    <li>If there is no valid route between the hub and the airport, no riders can be collected.</li>\r\n</ul>\r\n<p>The goal is to calculate the maximum number of riders that can be picked up during the complete round trip.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: city = [[0, 1], [-1, 0]]\r\nOutput: 1\r\n</code></pre>\r\n<p><strong>Explanation:</strong> The grid is 2x2, so the airport is at <code>(1,1)</code>. An optimal path to the airport is <code>(0,0) &rarr; (0,1) &rarr; (1,1)</code>, which collects the rider at <code>(0,1)</code>. On the return trip, no new riders can be collected. The total is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: city = [[0, 1, -1], [1, 0, -1], [1, 1, 1]]\r\nOutput: 5\r\n</code></pre>\r\n<p><strong>Explanation:</strong> The driver can collect a maximum of 5 riders by taking the following path: <code>(0, 0) &rarr; (0, 1) &rarr; (1, 1) &rarr; (2, 1) &rarr; (2, 2) &rarr; (2, 1) &rarr; (2, 0) &rarr; (1, 0) &rarr; (0, 0)</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: city = [[0, 1, 1], [1, 0, 1], [1, 1, 1]]\r\nOutput: 7\r\n</code></pre>\r\n<p><strong>Explanation:</strong> The driver can collect all 7 riders. An optimal path involves traversing all cells with riders.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: city = [[0, 1, 1], [1, 0, -1], [1, 1, -1]]\r\nOutput: 0\r\n</code></pre>\r\n<p><strong>Explanation:</strong> The cell at <code>(2, 2)</code>, the airport, is blocked. Therefore, no valid round trip is possible, and no riders can be collected.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 100</code></li>\r\n    <li><code>-1 &le; city[i][j] &le; 1</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_3sep",
        "company_id": 461
    }
]