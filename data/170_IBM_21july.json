[
    {
        "id": 526,
        "title": "Minimize Cost",
        "problem_statement": "<h1>Minimize Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are managing a cluster of servers, each with a different load given by the array <code>servers</code>. To optimize performance, you want to merge all server loads into a single machine.</p>\r\n<p>At each step, you can merge two servers with loads <code>servers[i]</code> and <code>servers[j]</code>. This operation:</p>\r\n<ul>\r\n    <li>Adds a new server with combined load <code>servers[i] + servers[j]</code></li>\r\n    <li>Deletes both original servers</li>\r\n    <li>Costs exactly <code>servers[i] + servers[j]</code> in computation resources.</li>\r\n</ul>\r\n<p>Implement a function to minimize the total cost required to reduce the entire cluster to a single server.</p>\r\n<p>The function <code>minimizeCost</code> takes the following input:</p>\r\n<ul>\r\n    <li><code>int servers[n]</code>: the loads of the servers</li>\r\n</ul>\r\n<p>The function should return an integer, the minimum total cost required.</p>\r\n\r\n<p>The function signature is as follows:</p>\r\n<pre><code class='language-c++'>int minimizeCost(vector<int> servers) {\r\n    // Complete the 'minimizeCost' function below.\r\n    // The function is expected to return an INTEGER.\r\n    // The function accepts INTEGER_ARRAY servers as parameter.\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>3\r\n10\r\n20\r\n30</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>90</code></pre>\r\n<p><strong>Explanation:</strong> For the input <code>servers = [10, 20, 30]</code>:</p>\r\n<ul>\r\n    <li>Pick 10 and 20, cost = 10 + 20 = 30, servers = [30, 30]</li>\r\n    <li>Pick 30 and 30, cost = 30 + 30 = 60, servers = [60]</li>\r\n</ul>\r\n<p>The total cost is 30 + 60 = 90. This is the minimum possible cost.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>2\r\n100\r\n1</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>101</code></pre>\r\n<p><strong>Explanation:</strong> For the input <code>servers = [100, 1]</code>: Only one operation is performed, with 100 and 1, and the cost is 100 + 1 = 101. Hence, this is the minimum possible cost.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= n <= 10^5</code></li>\r\n    <li><code>1 <= servers[i] <= 100</code></li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>The first line contains an integer, the number of elements in servers.</p>\r\n<p>Each line of the n subsequent lines (where 0 <= i < n) contains a single integer, servers[i].</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "IBM_21july",
        "company_id": 170
    },
    {
        "id": 527,
        "title": "Question 2",
        "problem_statement": "<h1>Question 2</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a web page rendering system, n rows and m columns represent a grid-like layout for the page content, with each cell containing an element's visibility score. The task is to adjust the visibility of each element so that, for any element at position (i, j), all elements in the same column at positions (k, j) with k >= i have a strictly lower visibility score.</p>\r\n<p>Each element's visibility can be increased by one at a cost of one unit.</p>\r\n<p>Implement a function that determines the minimum cost to adjust the visibility of all elements in the grid while satisfying the given conditions.</p>\r\n<p>The function <code>getMinimumCost</code> takes the following inputs:</p>\r\n<ul>\r\n    <li><code>int visibilityScore[n][m]</code>: a 2-D array representing the visibility score of the elements in the layout grid.</li>\r\n</ul>\r\n<p>The function should return minimum total cost required to adjust the visibility score of all elements as per the constraints.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 3\r\nm = 2\r\nvisibilityScore = [[2, 5], [7, 4], [3, 5]]</code></pre>\r\n<p><strong>Explanation:</strong> Currently, the visibility scores in cells (1, 1), (2, 0), and (2, 1) do not meet the required condition. They are highlighted in green in the first diagram (not shown here). The initial grid is:</p>\r\n<pre><code class='language-text'>2 5\r\n7 4\r\n3 5</code></pre>\r\n<p>The following optimal adjustments are applied to the visibilityScore:</p>\r\n<ul>\r\n    <li>Add 5 to the visibility score in the first column's third row, <code>visibilityScore[2][0] = 3 + 5 = 8</code>.</li>\r\n    <li>Add 2 to <code>visibilityScore[1][1] = 4 + 2 = 6</code>.</li>\r\n    <li>Add 2 to <code>visibilityScore[2][1] = 5 + 2 = 7</code>.</li>\r\n</ul>\r\n<p>The adjusted grid becomes:</p>\r\n<pre><code class='language-text'>2 5\r\n7 6\r\n8 7</code></pre>\r\n<p>Now the conditions are met. The minimum total adjustment cost is 5 + 2 + 2 = 9.</p>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>9</code></pre>\r\n\r\n<h3>Example 2: (Sample Case 0)</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 3\r\nm = 3\r\nvisibilityScore = [[2, 4, 6], [4, 2, 7], [6, 4, 7]]</code></pre>\r\n<p><strong>Explanation:</strong> Currently, the visibility scores in cells (1, 1), (2, 1), and (2, 2) do not meet the required conditions. The diagram highlights these cells in green (not shown here). The initial grid is:</p>\r\n<pre><code class='language-text'>2 4 6\r\n4 2 7\r\n6 4 7</code></pre>\r\n<p>Increasing their scores by 3, 2, and 1, respectively, achieves the desired visibility. The adjusted grid becomes:</p>\r\n<pre><code class='language-text'>2 4 6\r\n4 5 7\r\n8 6 8</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>6</code></pre>\r\n\r\n<h3>Example 3: (Sample Case 1)</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 3\r\nm = 5\r\nvisibilityScore = [[2, 4, 6, 2, 9], [2, 8, 10, 2, 7], [8, 10, 11, 8, 2]]</code></pre>\r\n<p><strong>Explanation:</strong> Currently, the visibility scores in cells (1, 0), (1, 3), (1, 4), and (2, 4) do not meet the required conditions. The diagram highlights these cells in green (not shown here). The initial grid is:</p>\r\n<pre><code class='language-text'>2  4  6  2  9\r\n2  8 10  2  7\r\n8 10 11  8  2</code></pre>\r\n<p>Increase their scores by 1, 1, 3, and 9, respectively, to achieve the desired visibility. The adjusted grid becomes:</p>\r\n<pre><code class='language-text'>2  4  6  2  9\r\n3  8 10  3 10\r\n8 10 11  8 11</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>14</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n, m &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= visibilityScore[i][j] &lt;= 10^9</code></li>\r\n    <li><code>n * m &lt;= 10^5</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>long getMinimumCost(vector<vector<int>> visibilityScore) {\r\n    // Function implementation\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "IBM_21july",
        "company_id": 170
    }
]