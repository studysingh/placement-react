[
    {
        "id": 244,
        "title": "Block Building Operations",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Block Building Operations</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given an infinite integer number line, you would like to build some blocks and obstacles on it. Specifically, you have to implement code which supports two types of operations:</p>\n\n        <ul>\n            <li><code>[1, x]</code> - builds an obstacle at coordinate <code>x</code> along the number line. It is guaranteed that coordinate <code>x</code> does not contain any obstacles when the operation is performed.</li>\n            \n            <li><code>[2, x, size]</code> - checks whether it\\'s possible to build a block centered on <code>x</code> and extending <code>size - 1</code> in each direction. For example, for <code>size = 3</code> and <code>x = 0</code>, it will check <code>-2</code> through <code>2</code> on the number line for obstacles. Produces <code>\\\"1\\\"</code> if it is possible, i.e., if there are no obstacles at the specified coordinates, and produces <code>\\\"0\\\"</code> otherwise.</li>\n        </ul>\n\n        <p>Please note that this operation does not actually build the block, it only checks whether a block can be built.</p>\n\n        <p>Given an array of <code>operations</code> containing both types of operations above, your task is to return a binary string representing the outputs for all <code>[2, x, size]</code> operations.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>An array of operations where each operation is either:</p>\n        <ul>\n            <li>A type-1 operation: <code>[1, x]</code></li>\n            <li>A type-2 operation: <code>[2, x, size]</code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>A binary string containing \\'0\\'s and \\'1\\'s representing the results of all type-2 operations in order.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\noperations = [\n    [1, 2],\n    [1, 6],\n    [2, 4, 2],\n    [2, 5, 2],\n    [2, 1, 1],\n    [2, 1, 2]\n]</pre>\n            <pre class=\\\"output\\\">Output:\n\\\"1010\\\"</pre>\n\n            <div class=\\\"explanation\\\">\n                <p>Let\\'s consider all operations:</p>\n                <ul>\n                    <li><code>[1, 2]</code> - builds an obstacle at coordinate 2</li>\n                    <li><code>[1, 6]</code> - builds an obstacle at coordinate 6</li>\n                    <li><code>[2, 4, 2]</code> - checks and produces \\\"1\\\" as it is possible to build a block occupying coordinates 3, 4, and 5</li>\n                    <li><code>[2, 5, 2]</code> - checks and produces \\\"0\\\" as it is not possible to build a block occupying coordinates 4, 5, and 6 because there is an obstacle at coordinate 6</li>\n                    <li><code>[2, 1, 1]</code> - checks and produces \\\"1\\\" as it is possible to build a block at coordinate 1</li>\n                    <li><code>[2, 1, 2]</code> - checks and produces \\\"0\\\" as it is not possible to build a block occupying coordinates 0, 1, and 2 because there is an obstacle at coordinate 2</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\"><code>string solution(vector<vector<int>> operations)</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Hp3hyyzim_tp-k_8s3LKZBGenZelvVxNrmm_h8fwfl8/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 246,
        "title": "Smart Grid Energy Readings",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Smart Grid Energy Readings</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are monitoring energy usage in a smart grid system and need to identify specific data patterns in the readings.</p>\n        \n        <p>Given an array of integers <code>readings</code> representing the energy readings over a period and an integer <code>k</code>, count the readings that are powers of <code>k</code>. In this context, a power of <code>k</code> refers to numbers that can be expressed as <code>k</code> raised to an integer power (e.g., k<sup>0</sup>, k<sup>1</sup>, k<sup>2</sup>, etc.).</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>An array <code>readings</code> containing integer values representing energy readings</li>\n            <li>An integer <code>k</code> representing the base number for power calculations</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an integer representing the count of readings that are powers of k.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ readings.length ≤ 10<sup>5</sup></li>\n            <li>1 ≤ k ≤ 10</li>\n            <li>1 ≤ readings[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"performance-note\\\">\n        <h3>Note</h3>\n        <p>You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(readings.length<sup>2</sup>) will fit within the execution time limit.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nreadings = [1, 2, 4, 8, 3, 5]\nk = 2</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The powers of 2 in the readings are:</p>\n                <ul>\n                    <li>1 (2<sup>0</sup>)</li>\n                    <li>2 (2<sup>1</sup>)</li>\n                    <li>4 (2<sup>2</sup>)</li>\n                    <li>8 (2<sup>3</sup>)</li>\n                </ul>\n                <p>Therefore, there are 4 readings that are powers of 2.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\"><code>int countPowerReadings(vector&lt;int&gt; readings, int k)</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1NtnRVz6mmC93ocbmNQNDaj0dLMkkW1b2eoHICOPw5wE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 248,
        "title": "Bird\\'s Nest Building",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Bird\\'s Nest Building</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are helping the bird build its nest.</p>\n\n        <p>You are given an array <code>forest</code>, containing positive integers and zeros, and a non-negative integer <code>bird</code>, representing the bird\\'s initial position.</p>\n\n        <p>Each positive integer within the <code>forest</code> is considered to be a stick, where <code>forest[i]</code> represents the length of the i<sup>th</sup> stick. Each zero within <code>forest[i]</code> represents that this place is empty.</p>\n\n        <p>Initially, the bird is located at <code>forest[bird]</code>, which is guaranteed to be zero. The bird builds its nest, following the algorithm:</p>\n\n        <ul class=\\\"algorithm-steps\\\">\n            <li>The bird flies to the right until it finds a stick;</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>An array <code>forest</code> containing positive integers (sticks) and zeros (empty spaces)</li>\n            <li>An integer <code>bird</code> representing the initial position of the bird</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ forest.length ≤ 10<sup>5</sup></li>\n            <li>0 ≤ forest[i] ≤ 10<sup>5</sup></li>\n            <li>0 ≤ bird < forest.length</li>\n            <li>forest[bird] = 0</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nforest = [0, 2, 0, 3, 0, 0, 1]\nbird = 0</pre>\n            <pre class=\\\"output\\\">Output:\n[To be determined based on complete problem statement]</pre>\n            <div class=\\\"explanation\\\">\n                <p>The bird starts at position 0 and flies right until it finds the first stick at position 1 with length 2.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\"><code>vector<int> buildNest(vector<int> forest, int bird)</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/10YrjGOpO_ereCp9rG7vcGg5NUSQkNgrUmWx3tL6pJz8/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 249,
        "title": "Gravity Puzzle Obstacle Removal",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Gravity Puzzle Obstacle Removal</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Imagine you are playing a gravity-based puzzle game that involves clearing obstacles to allow an irregularly-shaped figure to fall to the bottom.</p>\n\n        <p>You are given a rectangular matrix <code>board</code> representing the game board, which only contains the following types of cells:</p>\n        <ul>\n            <li><code>\\'-\\'</code> represents an empty cell,</li>\n            <li><code>\\'#\\'</code> represents an obstacle,</li>\n            <li><code>\\'*\\'</code> represents part of the figure.</li>\n        </ul>\n\n        <p>It is guaranteed that the figure consists of one piece, where all parts are connected by the sides.</p>\n\n        <p>Your task is to simulate how the figure should fall, and find the minimum number of obstacles that should be removed to let the figure finally touch the bottom of the board with at least one of its cells.</p>\n    </div>\n\n    <div class=\\\"performance-note\\\">\n        <p class=\\\"note\\\">Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(board.length × board[0].length) will fit within the execution time limit.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nboard = [\n    [\\'*\\', \\'*\\', \\'*\\'],\n    [\\'#\\', \\'*\\', \\'*\\'],\n    [\\'*\\', \\'*\\', \\'-\\'],\n    [\\'-\\', \\'-\\', \\'-\\'],\n    [\\'-\\', \\'#\\', \\'#\\']\n]</pre>\n            <pre class=\\\"output\\\">Output:\nsolution(board) = 2</pre>\n            <div class=\\\"explanation\\\">\n                <p>The minimum number of obstacles that need to be removed is 2. By removing the two \\'#\\' obstacles in the bottom row, the figure can fall and touch the bottom of the board.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ board.length ≤ 100</li>\n            <li>1 ≤ board[0].length ≤ 100</li>\n            <li>board[i][j] ∈ {\\'-\\', \\'#\\', \\'*\\'}</li>\n            <li>The figure consists of one connected piece</li>\n            <li>At least one cell contains \\'*\\'</li>\n        </ul>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"python\\\"><code>def solution(board: List[List[str]]) -> int:</code></pre>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A matrix of characters representing the game board, where each cell contains either \\'-\\', \\'#\\', or \\'*\\'.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an integer representing the minimum number of obstacles that need to be removed to allow the figure to touch the bottom of the board.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1I8NziSEZmU9GnETMfcKijmysv57JZj18PRrOIcGji_A/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 250,
        "title": "Diagonal Neighbors",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Diagonal Neighbors</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Let\\'s define the diagonal neighbors of a given cell as the surrounding cells, with precisely one corner touching a corner of the given cell. The picture below shows the diagonal neighbors for the cell marked \\'A\\'.</p>\n\n        <div class=\\\"grid-visualization\\\">\n            <!-- Using CSS Grid to create the 5x4 visualization -->\n            <div class=\\\"grid\\\">\n                <table class=\\\"game-board\\\">\n                    <tr>\n                        <td></td><td></td><td></td><td></td><td></td>\n                    </tr>\n                    <tr>\n                        <td></td><td></td><td class=\\\"diagonal\\\"></td><td></td><td class=\\\"diagonal\\\"></td>\n                    </tr>\n                    <tr>\n                        <td></td><td></td><td></td><td class=\\\"center\\\">A</td><td></td>\n                    </tr>\n                    <tr>\n                        <td></td><td></td><td class=\\\"diagonal\\\"></td><td></td><td class=\\\"diagonal\\\"></td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    </div>\n\n    <style>\n        .grid-visualization {\n            margin: 20px 0;\n        }\n        \n        .game-board {\n            border-collapse: separate;\n            border-spacing: 2px;\n        }\n        \n        .game-board td {\n            width: 40px;\n            height: 40px;\n            border: 1px solid #000;\n            text-align: center;\n            vertical-align: middle;\n        }\n        \n        .diagonal {\n            background-color: #20B2AA;\n        }\n        \n        .center {\n            font-weight: bold;\n        }\n    </style>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A matrix representing the grid and a position marking cell \\'A\\'.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the positions of all diagonal neighbors for the given cell.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The grid is at least 3x3 in size</li>\n            <li>The given cell position is valid within the grid</li>\n            <li>All diagonal neighbors must be within the grid boundaries</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <div class=\\\"explanation\\\">\n                <p>For the cell marked \\'A\\' in the visualization:</p>\n                <ul>\n                    <li>The diagonal neighbors are shown in turquoise color</li>\n                    <li>There are 4 diagonal neighbors in total</li>\n                    <li>Each diagonal neighbor shares exactly one corner point with cell \\'A\\'</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1buZo_aGI4ieAwAgRfzzZhrWzeUiTWAdkgYrClV7NQ2c/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 253,
        "title": "Alien Technology Code Analysis",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Alien Technology Code Analysis</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>Imagine you\\'re part of a team analyzing fictional alien technology logs. You have a string <code>alienCode</code>, which represents activity codes from their devices. Your task is to examine this string and count how many substrings of this code represent numbers evenly divisible by 3. It\\'s important to note that none of these substrings should start with zero unless the substring is the character \\\"0\\\" itself.</p>\n    </div>\n\n    <div class=\\\"performance-note\\\">\n        <p class=\\\"note\\\">Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(alienCode.length²) will fit within the execution time limit.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input: alienCode = \\\"456\\\"</pre>\n            <pre class=\\\"output\\\">Output: solution(alienCode) = 3</pre>\n            \n            <div class=\\\"explanation\\\">\n                <p>Consider all substrings of the given string:</p>\n                <ul class=\\\"substring-analysis\\\">\n                    <li><code>alienCode[0..0] = 4</code> isn\\'t divisible by 3</li>\n                    <li><code>alienCode[1..1] = 5</code> isn\\'t divisible by 3</li>\n                    <li><code>alienCode[2..2] = 6</code> <strong>is divisible by 3</strong></li>\n                    <li><code>alienCode[0..1] = 45</code> <strong>is divisible by 3</strong></li>\n                    <li><code>alienCode[1..2] = 56</code> isn\\'t divisible by 3</li>\n                    <li><code>alienCode[0..2] = 456</code> <strong>is divisible by 3</strong></li>\n                </ul>\n                <p>There are 3 substrings that meet the conditions, so the answer is 3.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input: alienCode = \\\"6666\\\"</pre>\n            <pre class=\\\"output\\\">Output: solution(alienCode) = 10</pre>\n            \n            <div class=\\\"explanation\\\">\n                <p>All substrings are divisible by 3 and have no leading zeros, so the answer is equal to the number of possible substrings, which is 10.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ alienCode.length ≤ 10⁴</li>\n            <li>alienCode consists of digits only</li>\n            <li>The answer will fit in a 32-bit integer</li>\n        </ul>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"cpp\\\"><code>int solution(string alienCode) {\n    // Implementation here\n}</code></pre>\n    </div>\n</div>\n\n<style>\n.substring-analysis li {\n    margin: 8px 0;\n    font-family: monospace;\n}\n\n.substring-analysis li strong {\n    color: #2e7d32;\n}\n\n.performance-note {\n    background-color: #fff3e0;\n    padding: 12px;\n    border-left: 4px solid #ff9800;\n    margin: 16px 0;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1HYQKqjEOqzJpL3lbmrpKPlL6crFt_MameiH9voSSy1o/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 255,
        "title": "Spacecraft Data Segments Analysis",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Spacecraft Data Segments Analysis</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>A team of astronauts on a spaceship is receiving important data from Earth for their research. The data is being transmitted in segments that contain specific parts of the file and each segment contains a byte range in the form of a two-dimensional array, <code>segments</code>.</p>\n        \n        <p>For each segment, <code>segments[i][0]</code> is the index of the first byte in the i<sup>th</sup> segment, and <code>segments[i][1]</code> is the index of the last byte in the i<sup>th</sup> segment (both indices are inclusive, 1-based).</p>\n\n        <p>Your task is to calculate the total number of unique bytes received for the entire file after each segment is received. Keep in mind that segments can overlap with or completely replicate previous ones.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nsegments = [[1, 1], [2, 2], [1, 3]]</pre>\n            <pre class=\\\"output\\\">Output:\nsolution(segments) = [1, 2, 3]</pre>\n\n            <div class=\\\"explanation\\\">\n                <p>Let\\'s analyze each segment:</p>\n                <ol>\n                    <li>The first segment only contains byte 1, so the total number of unique bytes received becomes 1 after this segment.</li>\n                    <li>The second segment only contains byte 2, so the total becomes 2 after this segment.</li>\n                    <li>The third segment contains bytes 1, 2, and 3, making the total 3 after this segment.</li>\n                </ol>\n\n                <div class=\\\"visualization\\\">\n                    <table class=\\\"byte-grid\\\">\n                        <tr>\n                            <th>1</th>\n                            <th>2</th>\n                            <th>3</th>\n                            <th>4</th>\n                            <th>5</th>\n                        </tr>\n                        <tr>\n                            <td class=\\\"segment-1\\\">•</td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                            <td></td>\n                        </tr>\n                    </table>\n                    <p class=\\\"segment-info\\\">segments[0] = [1,1]</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>An array of arrays where each inner array contains two integers representing the start and end indices of a segment.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>An array of integers where each integer represents the total number of unique bytes received after processing each segment.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ segments.length ≤ 10⁵</li>\n            <li>segments[i].length = 2</li>\n            <li>1 ≤ segments[i][0] ≤ segments[i][1] ≤ 10⁵</li>\n        </ul>\n    </div>\n\n    <style>\n        .byte-grid {\n            border-collapse: collapse;\n            margin: 20px 0;\n        }\n        \n        .byte-grid th, .byte-grid td {\n            border: 1px solid #ddd;\n            padding: 10px;\n            text-align: center;\n            width: 40px;\n        }\n        \n        .segment-1 {\n            background-color: #e0f7fa;\n        }\n        \n        .segment-info {\n            color: #00838f;\n            font-family: monospace;\n        }\n        \n        code {\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 3px;\n            font-family: monospace;\n        }\n    </style>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1y0H7sQ86fE88LtDkUVYhh8G8-J7yOl5KOdkJuEuB-yE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 256,
        "title": "Artifact Symbol Sequence",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Artifact Symbol Sequence</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>A group of intrepid adventurers is on a quest to decode a mysterious artifact that has a series of unique symbols etched along its circular edge. The order of these symbols has long been lost, but a collection of symbol pairs known to be adjacent to each other was found. Unfortunately, the pairs of symbols became jumbled over time, meaning each pair <code>(x, y)</code> could be recorded either as <code>(x, y)</code> or <code>(y, x)</code>.</p>\n\n        <p>You are given an array <code>symbolPairs</code> representing these shuffled pairs, and your task is to rediscover the original sequence of symbols on the artifact\\'s circular edge.</p>\n\n        <p class=\\\"important-note\\\">Remember that any cyclic rotation of the sequence can be considered a correct solution, and the order of the sequence can be reversed as well because the circle has no fixed start or end. Please return any of the valid arrangements.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>An array of arrays where each inner array contains two integers representing a pair of adjacent symbols.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>An array representing any valid sequence of symbols that satisfies all the adjacent pairs.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nsymbolPairs = [[3, 5], [1, 4], [2, 4], [1, 5], [2, 3]]</pre>\n            <pre class=\\\"output\\\">Output:\nsolution(symbolPairs) = [3, 5, 1, 4, 2]</pre>\n            <div class=\\\"explanation\\\">\n                <p>This is one valid arrangement where:</p>\n                <ul>\n                    <li>3 and 5 are adjacent</li>\n                    <li>5 and 1 are adjacent</li>\n                    <li>1 and 4 are adjacent</li>\n                    <li>4 and 2 are adjacent</li>\n                    <li>2 and 3 are adjacent (completing the circle)</li>\n                </ul>\n                <p>Note: Other valid arrangements are possible due to cyclic rotations and reversals.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ symbolPairs.length ≤ 10⁵</li>\n            <li>symbolPairs[i].length = 2</li>\n            <li>1 ≤ symbolPairs[i][j] ≤ 10⁵</li>\n            <li>All symbols in the sequence are unique</li>\n            <li>A valid circular sequence exists</li>\n        </ul>\n    </div>\n\n    <style>\n        .important-note {\n            background-color: #fff3e0;\n            padding: 15px;\n            border-left: 4px solid #ff9800;\n            margin: 20px 0;\n        }\n        \n        code {\n            background-color: #f5f5f5;\n            padding: 2px 4px;\n            border-radius: 3px;\n            font-family: monospace;\n        }\n        \n        .example ul li {\n            margin: 8px 0;\n        }\n    </style>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/17hg56iK2QL0gLP15w00IYyc-8YvSs4p14ZnUzATPz6U/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 257,
        "title": "Spacecraft Data Segments",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Spacecraft Data Segments</h2>\n\n    <div class=\\\"problem-description\\\">\n        <p>A team of astronauts on a spaceship is receiving important data from Earth for their research. The data is being transmitted in segments that contain specific parts of the file, and each segment defines a byte range in the form of a two-dimensional array <code>segments</code>.</p>\n\n        <p>For each segment <code>segments[i]</code>, the range is given in an array of two 64-bit integers:</p>\n        <ul class=\\\"technical-details\\\">\n            <li><code>segments[i][0]</code> is the index of the first byte in the i<sup>th</sup> segment</li>\n            <li><code>segments[i][1]</code> is the index of the last byte in the i<sup>th</sup> segment</li>\n            <li>Both indices are inclusive and 1-based</li>\n        </ul>\n\n        <p>Your task is to calculate the total number of unique bytes received for the entire file after each segment is received. Keep in mind that segments can overlap with or completely replicate previous ones.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nsegments = [[1, 1], [2, 2], [3, 3]]</pre>\n            <pre class=\\\"output\\\">Output:\nsolution(segments) = [1, 2, 3]</pre>\n\n            <div class=\\\"explanation\\\">\n                <p>Let\\'s analyze each segment:</p>\n                <ul class=\\\"step-by-step\\\">\n                    <li>The first segment only contains byte <code>1</code>, so the total number of unique bytes received becomes <code>1</code> after this segment.</li>\n                    <li>The second segment only contains byte <code>2</code>, so the total becomes <code>2</code> after this segment.</li>\n                    <li>The third segment only contains byte <code>3</code>, so the total becomes <code>3</code> after this segment.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A two-dimensional array <code>segments</code> where each inner array contains two integers representing the start and end indices of a segment.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>An array of integers where the i<sup>th</sup> integer represents the total number of unique bytes received after processing the first i segments.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ segments.length ≤ 10⁵</li>\n            <li>segments[i].length = 2</li>\n            <li>1 ≤ segments[i][j] ≤ 10¹⁸</li>\n            <li>segments[i][0] ≤ segments[i][1]</li>\n        </ul>\n    </div>\n\n    <style>\n        .technical-details {\n            background-color: #f8f9fa;\n            padding: 15px 20px;\n            border-radius: 5px;\n            margin: 15px 0;\n        }\n\n        code {\n            background-color: #f1f1f1;\n            padding: 2px 4px;\n            border-radius: 3px;\n            font-family: monospace;\n            font-size: 0.9em;\n        }\n\n        .step-by-step li {\n            margin: 10px 0;\n            line-height: 1.5;\n        }\n\n        sup {\n            font-size: 0.7em;\n        }\n    </style>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Cgmm96ulgq5BgOVGS-aoSsAJ9Pj0LbjMFTgFstmEeFw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 484,
        "title": "Comparing Values",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Queue: Comparing Values</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are given three arrays of integers <em>a</em>, <em>b</em>, and <em>c</em>, and an array of characters <em>signs</em> consisting of \\'+\\', \\'-\\', and \\'=\\' signs. All of these arrays have the same length.</p>\n        \n        <p>Your task is to return a boolean array <em>output</em> of the same length, where <em>output[i] = true</em> if the result of applying <em>signs[i]</em> to <em>a[i]</em> and <em>b[i]</em> is equal to <em>c[i]</em>, and <em>false</em> otherwise. In other words, for each index <em>i</em>, check if <em>a[i] signs[i] b[i] = c[i]</em>.</p>\n        \n        <p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <em>O(a.length<sup>2</sup>)</em> will fit within the execution time limit.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An integer <em>N</em> representing the length of the arrays.</li>\n            <li>An array of integers <em>a</em> of length <em>N</em>.</li>\n            <li>An array of characters <em>signs</em> of length <em>N</em>.</li>\n            <li>An array of integers <em>b</em> of length <em>N</em>.</li>\n            <li>An array of integers <em>c</em> of length <em>N</em>.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an array of boolean values indicating the result of the comparisons.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10<sup>5</sup></li>\n            <li>-10<sup>9</sup> ≤ a[i], b[i], c[i] ≤ 10<sup>9</sup></li>\n            <li>signs[i] ∈ {\\'+\\', \\'-\\', \\'=\\'}</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\na = [3, 2, -1, 4]\nsigns = [\\'+\\', \\'-\\', \\'=\\', \\'+\\']\nb = [2, 7, -5, 2]\nc = [5, 5, 4, 6]</pre>\n            <pre class=\\\"output\\\">Output:\n[true, false, true, false]</pre>\n            <div class=\\\"explanation\\\">\n                <p>For the first index: 3 + 2 = 5, which is true.</p>\n                <p>For the second index: 2 - 7 ≠ 5, which is false.</p>\n                <p>For the third index: -1 = -5, which is true.</p>\n                <p>For the fourth index: 4 + 2 ≠ 6, which is false.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1qfBfMuM08kXMZbKWCY23k36rqLwAtx4gRjeaZuLSQFs/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 485,
        "title": "Replace Consonants",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <h2>Queue: Replace Consonants</h2>\\n    \\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <p>Given a string <em>message</em> and an integer <em>n</em>, replace every <em>n</em>th consonant with the next consonant from the alphabet while keeping the case consistent (e.g., <em>b</em> becomes <em>c</em>, <em>e</em> becomes <em>f</em>, etc.).</p>\\n        \\n        <p>Notes:</p>\\n        <ul>\\n            <li>The list of consonants in alphabetical order is: <em>b</em>, <em>c</em>, <em>d</em>, <em>f</em>, <em>g</em>, <em>h</em>, <em>j</em>, <em>k</em>, <em>l</em>, <em>m</em>, <em>n</em>, <em>p</em>, <em>q</em>, <em>r</em>, <em>s</em>, <em>t</em>, <em>v</em>, <em>w</em>, <em>x</em>, <em>y</em>, <em>z</em>.</li>\\n            <li><em>z</em> must be replaced with <em>b</em> (and <em>B</em> with <em>C</em>).</li>\\n        </ul>\\n        \\n        <p>Also note that you are not expected to provide the most optimal solution, but a solution with time complexity not worse than <em>O(message.length<sup>2</sup>)</em> will fit within the execution time limit.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"input-format\\\\\\\">\\n        <h3>Input Format</h3>\\n        <p>The input consists of:</p>\\n        <ul>\\n            <li>A string <em>message</em>.</li>\\n            <li>An integer <em>n</em>.</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"output-format\\\\\\\">\\n        <h3>Output Format</h3>\\n        <p>Return the modified string after replacing the consonants as specified.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ n ≤ 100</li>\\n            <li>1 ≤ message.length ≤ 10<sup>5</sup></li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Examples</h3>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <h4>Example 1:</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\nmessage = \\\\\\\"CodeSignal\\\\\\\"\\nn = 3</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n\\\\\\\"CodeTignam\\\\\\\"</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>The given string <em>\\\\\\\"CodeSignal\\\\\\\"</em> contains the following consonants: <em>\\\\\\'C\\\\\\'</em>, <em>\\\\\\'d\\\\\\'</em>, <em>\\\\\\'S\\\\\\'</em>, <em>\\\\\\'g\\\\\\'</em>, <em>\\\\\\'n\\\\\\'</em>, <em>\\\\\\'l\\\\\\'</em>.</p>\\n                <p><em>\\\\\\'C\\\\\\'</em> is the first consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'d\\\\\\'</em> is the second consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'S\\\\\\'</em> is the third consonant so it is replaced with <em>\\\\\\'T\\\\\\'</em>.</p>\\n                <p><em>\\\\\\'g\\\\\\'</em> is the first consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'n\\\\\\'</em> is the second consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'l\\\\\\'</em> is the third consonant so it is replaced with <em>\\\\\\'m\\\\\\'</em>.</p>\\n                <p>Finally, the resulting string becomes <em>\\\\\\\"CodeTignam\\\\\\\"</em>.</p>\\n            </div>\\n        </div>\\n\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <h4>Example 2:</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\nmessage = \\\\\\\"Quiz Citizenship, puZzle\\\\\\\"\\nn = 5</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n\\\\\\\"Quiz Citizenship, quZzle\\\\\\\"</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>The string <em>\\\\\\\"Quiz Citizenship, puZzle\\\\\\\"</em> contains the following consonants: <em>\\\\\\'Q\\\\\\'</em>, <em>\\\\\\'z\\\\\\'</em>, <em>\\\\\\'n\\\\\\'</em>, <em>\\\\\\'s\\\\\\'</em>, <em>\\\\\\'h\\\\\\'</em>, <em>\\\\\\'p\\\\\\'</em>, <em>\\\\\\'z\\\\\\'</em>, <em>\\\\\\'Z\\\\\\'</em>.</p>\\n                <p><em>\\\\\\'Q\\\\\\'</em> is the first consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'z\\\\\\'</em> is the second consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'n\\\\\\'</em> is the third consonant so it is replaced with <em>\\\\\\'p\\\\\\'</em>.</p>\\n                <p><em>\\\\\\'s\\\\\\'</em> is the first consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'h\\\\\\'</em> is the second consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'p\\\\\\'</em> is the third consonant so it is replaced with <em>\\\\\\'q\\\\\\'</em>.</p>\\n                <p><em>\\\\\\'z\\\\\\'</em> is the first consonant so it is unchanged.</p>\\n                <p><em>\\\\\\'Z\\\\\\'</em> is the second consonant so it is unchanged.</p>\\n                <p>Finally, the resulting string becomes <em>\\\\\\\"Quiz Citizenship, quZzle\\\\\\\"</em>.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1KwWsHd_sst2NcrXOecpOqbZYaka8y-w7x6fJ8qkUpOQ/edit?usp=sharing",
        "solution_code": "vector<vector<int>> solution(vector<vector<int>> image, int radius) {\\n    int m = image.size(), n = image[0].size();\\n    vector<vector<int>> blurred(m, vector<int>(n, 0));\\n    for (int i = 0; i < m; i++) {\\n        for (int j = 0; j < n; j++) {\\n            int sum = 0, count = 0;\\n            for (int dx = -radius; dx <= radius; dx++) {\\n                for (int dy = -radius; dy <= radius; dy++) {\\n                    if(dx == 0 && dy == 0) continue;\\n                    int ni = i + dx, nj = j + dy;\\n                    if(ni >= 0 && ni < m && nj >= 0 && nj < n) {\\n                        sum += image[ni][nj];\\n                        count++;\\n                    }\\n                }\\n            }\\n            int neighborMean = count ? (sum / count) : image[i][j];\\n            blurred[i][j] = (image[i][j] + neighborMean) / 2;\\n        }\\n    }\\n    return blurred;\\n}",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 486,
        "title": "Array Queries",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <h2>Queue: Array Queries</h2>\\n    \\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <p>You are given two arrays of integers <em>a</em> and <em>b</em>, and an array <em>queries</em> containing the queries you are required to process. Every <em>queries[i]</em> can have one of the following two forms:</p>\\n        <ul>\\n            <li><code>[0, x]</code>: In this case, you need to add <em>2</em> to the current value of <em>b[x]</em>.</li>\\n            <li><code>[1, x]</code>: In this case, you need to find the total number of pairs of indices <em>i</em> and <em>j</em> such that <em>a[i] + b[j] = x</em>.</li>\\n        </ul>\\n        <p>Perform the given queries in order and return an array containing the results of the queries of the type <code>[1, x]</code>.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"input-format\\\\\\\">\\n        <h3>Input Format</h3>\\n        <p>The input consists of:</p>\\n        <ul>\\n            <li>An array of integers <em>a</em>.</li>\\n            <li>An array of integers <em>b</em>.</li>\\n            <li>An array of queries, where each query is an array of integers.</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"output-format\\\\\\\">\\n        <h3>Output Format</h3>\\n        <p>Return an array of integers representing the results of the queries of type <code>[1, x]</code>.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ a.length ≤ 10<sup>5</sup></li>\\n            <li>1 ≤ b.length ≤ 10<sup>5</sup></li>\\n            <li>0 ≤ a[i], b[i] ≤ 10<sup>9</sup></li>\\n            <li>0 ≤ queries.length ≤ 10<sup>5</sup></li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Examples</h3>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <h4>Example 1:</h4>\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\na = [1, 2, 3]\\nb = [1, 4]\\nqueries = [[1, 5], [0, 0, 2], [1, 5]]</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n[1, 2]</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>The arrays look like this initially:</p>\\n                <pre>a = [1, 2, 3] and b = [1, 4]</pre>\\n                <p>For the query <code>[1, 5]</code>, there\\\\\\'s only one way to form a sum of <em>5</em> using an element from each array: <em>5 = 1 + 4 = a[0] + b[1]</em>. So the result is <em>1</em>.</p>\\n                <p>The next query <code>[0, 0, 2]</code> adds <em>2</em> to the value of <em>b[0]</em>, so the arrays now look like this:</p>\\n                <pre>a = [1, 2, 3] and b = [3, 4]</pre>\\n                <p>For the next query <code>[1, 5]</code>, there are now two ways to form a sum of <em>5</em> using an element from each array: <em>5 = 1 + 4 = a[0] + b[1]</em> and <em>5 = 2 + 3 = a[1] + b[0]</em>. So the result is <em>2</em>.</p>\\n                <p>Since the two queries of type <code>[1, x]</code> gave results of <em>1</em> and <em>2</em> respectively, the answer is <em>[1, 2]</em>.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1BbZ1xo9aWoCVqCYTJ8RqP_ja8mY7zdtqTjtWYweT_Z8/edit?usp=sharing",
        "solution_code": "<div class=\\\"problem-container\\\">\\n    <h2>Queue: Array Queries</h2>\\n    \\n    <div class=\\\"problem-description\\\">\\n        <p>You are given two arrays of integers <em>a</em> and <em>b</em>, and an array <em>queries</em> containing the queries you are required to process. Every <em>queries[i]</em> can have one of the following two forms:</p>\\n        <ul>\\n            <li><code>[0, x]</code>: In this case, you need to add <em>2</em> to the current value of <em>b[x]</em>.</li>\\n            <li><code>[1, x]</code>: In this case, you need to find the total number of pairs of indices <em>i</em> and <em>j</em> such that <em>a[i] + b[j] = x</em>.</li>\\n        </ul>\\n        <p>Perform the given queries in order and return an array containing the results of the queries of the type <code>[1, x]</code>.</p>\\n    </div>\\n\\n    <div class=\\\"input-format\\\">\\n        <h3>Input Format</h3>\\n        <p>The input consists of:</p>\\n        <ul>\\n            <li>An array of integers <em>a</em>.</li>\\n            <li>An array of integers <em>b</em>.</li>\\n            <li>An array of queries, where each query is an array of integers.</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"output-format\\\">\\n        <h3>Output Format</h3>\\n        <p>Return an array of integers representing the results of the queries of type <code>[1, x]</code>.</p>\\n    </div>\\n\\n    <div class=\\\"constraints\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ a.length ≤ 10<sup>5</sup></li>\\n            <li>1 ≤ b.length ≤ 10<sup>5</sup></li>\\n            <li>0 ≤ a[i], b[i] ≤ 10<sup>9</sup></li>\\n            <li>0 ≤ queries.length ≤ 10<sup>5</sup></li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"examples\\\">\\n        <h3>Examples</h3>\\n        <div class=\\\"example\\\">\\n            <h4>Example 1:</h4>\\n            <pre class=\\\"input\\\">Input:\\na = [1, 2, 3]\\nb = [1, 4]\\nqueries = [[1, 5], [0, 0, 2], [1, 5]]</pre>\\n            <pre class=\\\"output\\\">Output:\\n[1, 2]</pre>\\n            <div class=\\\"explanation\\\">\\n                <p>The arrays look like this initially:</p>\\n                <pre>a = [1, 2, 3] and b = [1, 4]</pre>\\n                <p>For the query <code>[1, 5]</code>, there\\'s only one way to form a sum of <em>5</em> using an element from each array: <em>5 = 1 + 4 = a[0] + b[1]</em>. So the result is <em>1</em>.</p>\\n                <p>The next query <code>[0, 0, 2]</code> adds <em>2</em> to the value of <em>b[0]</em>, so the arrays now look like this:</p>\\n                <pre>a = [1, 2, 3] and b = [3, 4]</pre>\\n                <p>For the next query <code>[1, 5]</code>, there are now two ways to form a sum of <em>5</em> using an element from each array: <em>5 = 1 + 4 = a[0] + b[1]</em> and <em>5 = 2 + 3 = a[1] + b[0]</em>. So the result is <em>2</em>.</p>\\n                <p>Since the two queries of type <code>[1, x]</code> gave results of <em>1</em> and <em>2</em> respectively, the answer is <em>[1, 2]</em>.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "company_name": "Visa fte",
        "company_id": 62
    },
    {
        "id": 487,
        "title": "Image Blur Effect",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Image Blur Effect</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are given a two-dimensional matrix of integers <em>image</em> representing a black and white image, with <em>image[i][j]</em> containing an integer from 0 to 255 to represent the intensity of a pixel at coordinate <em>(i, j)</em>. You are also given a non-negative integer parameter <em>radius</em>. Your task is to apply a blur effect to this image.</p>\n        \n        <p>To apply a blur effect to the image, replace the intensity of each pixel <em>(i, j)</em> with the average value of its original intensity <em>image[i][j]</em> and the mean intensity of its neighboring pixels (defined as <em>neighbors(i, j)</em>). Pixel <em>(k, l)</em> is included in <em>neighbors(i, j)</em> if it satisfies the conditions <em>abs(i - k) &lt;= radius</em> and <em>abs(j - l) &lt;= radius</em>.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>A two-dimensional array of integers <em>image</em>.</li>\n            <li>An integer <em>radius</em>.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a two-dimensional array of integers representing the blurred image.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ image.length ≤ 100</li>\n            <li>1 ≤ image[i].length ≤ 100</li>\n            <li>0 ≤ image[i][j] ≤ 255</li>\n            <li>0 ≤ radius ≤ 50</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\nimage = [[9, 6], [3, 0]]\nradius = 1</pre>\n            <pre class=\\\"output\\\">Output:\n[[6, 5], [4, 3]]</pre>\n            <div class=\\\"explanation\\\">\n                <p>All pixels in the original image have 3 neighbors.</p>\n                <p><em>image[0][0]</em> = 9, and its neighbors are <em>[6, 3, 0]</em> with a mean of <em>(6 + 3 + 0) / 3 = 3</em>. So, it should be updated to <em>mean(9, 3) // 2 = 6</em>.</p>\n                <p><em>image[0][1]</em> = 6, and its neighbors are <em>[9, 3, 0]</em>. So, it should be updated to <em>mean(12 // 3) = 4</em>.</p>\n                <p><em>image[1][0]</em> = 3, and its neighbors are <em>[9, 6, 0]</em> with a mean of <em>5</em>. So, it should be updated to <em>mean(3, 5) = 4</em>.</p>\n                <p><em>image[1][1]</em> = 0, and its neighbors are <em>[9, 6, 3]</em> with a mean of <em>6</em>. So, it should be updated to <em>mean(0, 6) = 3</em>.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1H8FE3FXvdUH0gjoiIbiL0wvXtSkK0ryAD5v_UAk99Jw/edit?usp=sharing",
        "solution_code": "string solution(string message, int n) {\\n    string cons = \\\"bcdfghjklmnpqrstvwxyz\\\"; int count = 0;\\n    for (int i = 0; i < message.size(); i++) {\\n        if (isalpha(message[i])) {\\n            char lower = tolower(message[i]);\\n            if (cons.find(lower) != string::npos) {\\n                count++;\\n                if (count % n == 0) {\\n                    int idx = cons.find(lower);\\n                    int nextIdx = (idx + 1) % cons.size();\\n                    if (isupper(message[i])) message[i] = toupper(cons[nextIdx]);\\n                    else message[i] = cons[nextIdx];\\n                }\\n            }\\n        }\\n    }\\n    return message;\\n}",
        "company_name": "Visa fte",
        "company_id": 62
    }
]