[
    {
        "id": 566,
        "title": "Road Construction for Full Connectivity",
        "problem_statement": "<h1>Road Construction for Full Connectivity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given N cities numbered from 0 to N-1, where each road connects two cities. Some cities may be unreachable from others. The king wants to ensure that every city is reachable from every other city.</p>\r\n<p>To achieve this, he can construct new roads, but he has a budget to build only K roads. These new roads must start and end at cities with odd numbers.</p>\r\n<p>Your task is to determine if it's possible to make the new roads such that every city becomes reachable from every other city, given the constraints.</p>\r\n<p><strong>Note:</strong> There can be multiple roads between two cities.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains three space separated integers N, M, and K, where N is the number of cities, M is the number of roads, and K is the number of roads the king can afford to build.</p>\r\n<p>The next M lines each contain two integers U and V, indicating that there exists a road between city U and city V.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print \"YES\" if the king can construct roads such that all cities are reachable from each other under the given conditions, otherwise print \"NO\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^6</code></li>\r\n    <li><code>1 <= M <= 10^6</code></li>\r\n    <li><code>0 <= K <= 10^6</code></li>\r\n    <li><code>0 <= U, V < N</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 3 1\r\n0 1\r\n1 2\r\n2 4\r\nOutput:\r\nYES</code></pre>\r\n<p><strong>Explanation:</strong>\r\nInitially, the cities are connected as follows: 0-1-2-4. City 3 is isolated.\r\nThe king has a budget of K=1 road. New roads must connect two odd-numbered cities.\r\nWe can construct a road between city 1 and city 3.\r\nAfter constructing the road, the cities will be connected as: 0-1-2-4 and 1-3. This makes all cities (0, 1, 2, 3, 4) reachable from each other.\r\nThus, the output is \"YES\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 4 1\r\n0 1\r\n1 2\r\n2 1\r\n5 1\r\nOutput:\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong>\r\nInitially, the cities are connected as follows: 0-1-2 and 1-5. Cities 3 and 4 are isolated.\r\nThe king has a budget of K=1 road. New roads must connect two odd-numbered cities.\r\nThe odd-numbered cities are 1, 3, 5.\r\nEven if we connect any two odd-numbered cities (e.g., 1-3, 1-5, 3-5), we can only connect at most two existing components. Since there are at least three isolated components (the component containing 0,1,2,5, and the isolated cities 3 and 4), and we can only add one road, it's impossible to connect all cities. For example, if we connect 1 and 3, city 4 will still be isolated.\r\nTherefore, irrespective of where we make a road, there will be at least one city which will be non-reachable.\r\nThus, the output is \"NO\".</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_11july",
        "company_id": 190
    },
    {
        "id": 567,
        "title": "Kingdom of Graphoria Network Optimization",
        "problem_statement": "<h1>Kingdom of Graphoria Network Optimization</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the mystical realm of Graphoria, the kingdom is a network of ancient towns and bridges. Each town, uniquely numbered from 1 to N, is endowed with its own reservoir of resources, represented by its weight. Meanwhile, the bridges—numbered from 1 to M—span the distances between these towns, each with a strength requirement indicated by its weight.</p>\r\n<p>The wise elders of Graphoria decree that for every bridge that remains standing, the combined resources of all the towns in the connected region (the connected component) must be at least as great as the strength requirement of that bridge. In other words, the towns must collectively be powerful enough to support the bridge.</p>\r\n<p>Your quest is to help the kingdom by removing the fewest number of bridges that is necessary so that every remaining bridge is adequately supported by the resources of its connected towns. Can you determine the minimum number of bridges that must be dismantled to ensure that the entire network of towns and bridges remains strong and secure under this decree?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains two space-separated integers N denotes the number of vertices and M denotes the number of edges.</p>\r\n<p>The second line of input contains N space separated integers X1, X2,..., XN representing the weights of the vertices.</p>\r\n<p>Each of the next M lines contains three space separated integers Ai, Bi, Yi representing an edge between vertices Ai and Bi with weight Yi.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer representing the minimum number of edges that need to be removed to satisfy the condition.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 10\r\n4 4 1 1 1 7\r\n3 5 19\r\n2 5 20\r\n4 5 8\r\n1 6 16\r\n2 3 9\r\n3 6 16\r\n3 4 1\r\n2 6 20\r\n2 4 19\r\n1 2 9\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> By analysing the graph we can see minimum we need to remove 4 edges so that the required conditions are fulfilled.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 4\r\n2 3 5 7\r\n1 2 7\r\n1 3 9\r\n2 3 12\r\n3 4 18\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Removed Edge 3 and 4 connecting vertices (2,3) and (3,4). In this case, the remaining edges in the connected component will be Edge1 and Edge2. Edge1: In the connected component where Edge1 lies having vertices 1,2 and 3, and the sum of the weights of these vertices is 2+3+5=10. The weight of Edge 1 is 7, so the condition is satisfied for Edge1. Similarly, it can be seen that the condition is also satisfied for Edge2. As the connected component containing Edge2 have vertices 1, 2 and 3 and their sum is 10. The weight of Edge2 is 9. Thus, a graph satisfying the condition can be obtained by removing two edges. The condition cannot be satisfied by removing one or less edges, so the answer is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10^3</code></li>\r\n    <li><code>N-1 &lt;= M &lt;= N*(N-1)/2</code></li>\r\n    <li><code>1 &lt;= Xi &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= Ai, Bi &lt;= N</code></li>\r\n    <li><code>1 &lt;= Yi &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_11july",
        "company_id": 190
    },
    {
        "id": 720,
        "title": "Secure Loops Detection",
        "problem_statement": "<h1>Secure Loops Detection</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the technologically advanced city of Neotera, a vast network of floating bridges connects its hovering stations across the sky. These bridges aren't just architectural marvels — they are woven with encrypted codes that safeguard inter-station transport and communications.</p>\r\n<p>The bridge codes, known as CipherStrings, are crafted from mysterious, ancient algorithms and are thought to be unbreakable. Each code is a string of lowercase English letters, deeply tied to the city's defense protocols.</p>\r\n<p>Recently, the city's master AI, ORION, detected strange disturbances — loops forming within the bridge network that reflect a symmetrical frequency signal, an echoing back like a perfect palindrome. ORION suspects these loops are remnants of an ancient \"Security Override Mechanism\" known as Secure Loops — defensive circuits once used to reset and shield the city during invasions.</p>\r\n<p>To activate this hidden defense mechanism, ORION must locate at least one of these Secure Loops, defined by a sacred triad of conditions:</p>\r\n<ul>\r\n    <li>1. The loop must connect three or more stations — forming a proper cycle.</li>\r\n    <li>2. The concatenated bridge codes along the loop must form a palindromic echo in the data stream.</li>\r\n    <li>3. That palindromic echo must also be a valid rotation of any single bridge code used in the entire network — revealing its origin and authenticity.</li>\r\n</ul>\r\n<p>You, the city's last living Bridgewalker, have been summoned to work alongside ORION. Scan the floating network, analyze the encrypted bridges, and uncover whether at least one such Secure Loop still exists in Neotera's ancient infrastructure.</p>\r\n<p>If you find one, the city may once again awaken its ancient defenses. If not... the skies may fall silent forever.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>First line of input contains an integer N, representing the number of stations.</p>\r\n<p>Second line of input contains an integer M, representing the number of bridges.</p>\r\n<p>From third line, each containing a list of M bridges, where each bridge is defined as (u, v, s), representing a directed bridge from station u to v with encrypted code s.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print \"YES\" if there exists at least one secure loop. Otherwise, print \"NO\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>1 &le; M &le; 10<sup>5</sup></li>\r\n    <li>1 &le; |s| &le; 10<sup>3</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n6\r\n1 2 ab\r\n2 3 b\r\n3 1 a\r\n1 4 cba\r\n4 1 cba\r\n2 4 aabb\r\nOutput:\r\nYES</code></pre>\r\n<p><strong>Explanation:</strong> The cycle 1 &rarr; 2 &rarr; 3 &rarr; 1 forms \"abba\", which: Is a palindrome; <strong>YES</strong> Is a rotation of \"aabb\"; <strong>YES</strong> So now the output is \"YES\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n7\r\n1 2 abc\r\n2 3 def\r\n3 4 ed\r\n4 1 cba\r\n4 5 ghi\r\n5 1 baabcdefecd\r\nOutput:\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong> The cycle 1 &rarr; 2 &rarr; 3 &rarr; 4 &rarr; 1 forms \"abcdefedcba\", which: Is a palindrome; <strong>YES</strong> Is a rotation of \"baabcdefecd\"; <strong>NO</strong> So now the output is \"NO\".</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_11july",
        "company_id": 190
    },
    {
        "id": 721,
        "title": "Parking Grid Coverage",
        "problem_statement": "<h1>Parking Grid Coverage</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A grid of size N * M is given to you. The grid represents a parking lot where vehicles are denoted by 'S' and empty cell denoted by 'E'. Also, you are given K charging points that can be placed on empty cells 'E'. Each charging point cover all the vehicles in its row and column.</p>\r\n<p>Determine if it is possible to cover all the vehicle cell using at-most K charging points. Overlapping coverage from multiple charging points is allowed. However, no two charging points can be placed on the same cell.</p>\r\n<p>Return true if it is possible to cover all vehicle cells within K charging points; otherwise, output false.</p>\r\n<p>Note: Matrix contains only 'S' and 'E'.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains 3 space separated integer N, M and K representing row size, column size and number of charging point available.</p>\r\n<p>Line Two to line rows + 1 contains String of length cols: representing rows of grid.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output contains a Boolean value true if it is possible to cover all vehicle cells within K charging points; otherwise, output false.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N, M &lt;= 12</li>\r\n    <li>1 &lt;= K &lt;= 15</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 4 2\r\nSEES\r\nSSSS\r\nSESE\r\nESEE\r\nOutput:\r\nfalse</code></pre>\r\n<p><strong>Explanation:</strong> Total vehicle cells: 9 at [(0, 0), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 2), (3, 1)]</p>\r\n<p>Charging point placed at cell (0, 1) covering entire row 0 and column 1</p>\r\n<p>Covered vehicle cells: [(0, 0), (0, 3), (1, 1), (3, 1)]</p>\r\n<p>Charging point placed at cell (2, 3) covering entire row 2 and column 3</p>\r\n<p>Covered vehicle cells: [(2, 0), (2, 2), (1, 3)]</p>\r\n<p>Covered Vehicles: 7</p>\r\n<p>Uncovered Vehicles: 2</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 5 3\r\nESSEE\r\nESESS\r\nEEEEE\r\nESSEE\r\nESSEE\r\nOutput:\r\ntrue</code></pre>\r\n<p><strong>Explanation:</strong> Total vehicle cells: 9 at [(0, 2), (0, 3), (0, 4), (1, 0), (1, 2), (1, 4), (3, 0), (3, 3), (3, 4), (4, 0), (4, 3), (4, 4)]</p>\r\n<p>Charging point placed at cell (2, 0) covering entire row 2 and column 0</p>\r\n<p>Covered vehicle cells: [(1, 0), (3, 0), (4, 0)]</p>\r\n<p>Charging point placed at cell (0, 3) covering entire row 0 and column 3</p>\r\n<p>Covered vehicle cells: [(0, 2), (0, 4), (1, 3), (3, 3), (4, 3)]</p>\r\n<p>Charging point placed at cell (4, 2) covering entire row 4 and column 2</p>\r\n<p>Covered vehicle cells: [(4, 0), (4, 3), (4, 4)]</p>\r\n<p>Covered Vehicles: 9</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_11july",
        "company_id": 190
    },
    {
        "id": 722,
        "title": "Maximize Bitwise AND and Minimize Max Subarray Sum",
        "problem_statement": "<h1>Maximize Bitwise AND and Minimize Max Subarray Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of length N and an integer M. Your goal is to maximize the result of the AND of all elements of array (i.e. <code>a[1]&amp;a[2]&amp;...&amp;a[N]</code>) and the sum of the maximum sum present in the M subarrays. You can choose an index <code>i</code> (1 &lt;= <code>i</code> &lt;= <code>N</code>) and replace <code>a[i]</code> with <code>a[i] | (2^k)</code>, where <code>k</code> belongs to <code>[0, 30]</code>. You are also allowed to perform an operation to determine how to divide this array into exactly M subarrays such that the maximum sum in a subarray is as small as possible. Here <code>&amp;</code> and <code>|</code> represents Bitwise AND and Bitwise OR respectively.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n<li>The first line of input contains an integer <code>N</code> -- represents the length of the array.</li>\r\n<li>The second line of input contains an integer <code>M</code> -- represents the number of subarrays to divide the array.</li>\r\n<li>The last line contains <code>N</code> integers <code>a1, a2, ..., aN</code> -- represents the elements of the array.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n<li>The first line of output contains the maximum result of the AND of all elements of array after performing at most <code>M</code> operations.</li>\r\n<li>The second line of output contains the maximum sum in any of the <code>M</code> subarrays after the optimal division of the array.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &lt;= N &lt;= 10^5</code></li>\r\n<li><code>1 &lt;= M &lt;= N</code></li>\r\n<li><code>1 &lt;= a[i] &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n4\r\n1 2 3 4 5\r\nOutput:\r\n4\r\n9</code></pre>\r\n<p><strong>Explanation:</strong><br>Array A: [1, 2, 3, 4, 5]<br>The bitwise AND expression (1 &amp; 2 &amp; 3 &amp; 4 &amp; 5) is equal to 0 because the bitwise AND of all elements is 0. To maximize the result, we can perform bitwise OR operations. There are many possible operations, but one optimal operation involves taking the OR with 2 for each element. This can be achieved using three operations:<br>1|2=3<br>2|2=2<br>3|2=2<br>4|2=6<br>5|2=7<br>Resulting in the array [5, 6, 7, 4, 5].<br>The maximum AND of all elements (5&amp;6&amp;7&amp;4&amp;5) is 4.<br>After three operations, the array becomes [5, 6, 7, 4, 5].<br>Now, to find the m subarrays of the array such that the maximum sum present in the m subarrays is minimized, consider the following two arrangements:<br>5 | 6 | 7 | 4, 5 -- Here, the maximum sum subarray (4, 5) is 9.<br>5, 6 | 7 | 4, 5 -- Here, the maximum sum subarray (4, 5) is 9.<br>This is the optimal division of the array<br>So, the maximum sum of a subarray in the optimal division of the array into m subarrays is 9.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n3 1 3 1\r\nOutput:\r\n3\r\n3</code></pre>\r\n<p><strong>Explanation:</strong><br>Array A: [3, 1, 3, 1]<br>The bitwise AND expression (3 &amp; 1 &amp; 3 &amp; 1) is equal to 1 because the bitwise AND of all elements is 1. To maximize the result, we can perform bitwise OR operations. There are many possible operations, but one optimal operation involves taking the OR with 2 for the element 1. This can be achieved using two operations:<br>1|2=3<br>1|2=3<br>Resulting in the array [3, 3, 3, 3].<br>The maximum AND of all elements (3&amp;3&amp;3&amp;3) is 3.<br>After two operations, the array becomes [3, 3, 3, 3].<br>Now, to find the m subarrays of the array such that the maximum sum present in the m subarrays is minimized, consider the following two arrangements:<br>3 | 3 | 3, 3 -- Here, the maximum sum subarray (3, 3) is 6.<br>3 | 3, 3 | 3 -- Here, the maximum sum subarray (3, 3) is 6.<br>The 3 | 3 | 3, 3 arrangement is optimal since it minimizes the maximum sum of the subarrays. So, the maximum sum of a subarray in the optimal division of the array into m subarrays is 3.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_11july",
        "company_id": 190
    },
    {
        "id": 723,
        "title": "Optimal Pickup Station",
        "problem_statement": "<h1>Optimal Pickup Station</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>ByteCity is a bustling metropolis where office workers thrive on food delivery services. The city's main commercial hub, Tech Avenue, is lined with N office buildings, each housing employees who rely on quick and efficient lunch deliveries. The first building is at the start of the avenue, and each subsequent building stands 100 meters further down the road. The i-th building has p_i employees who order lunch daily.</p>\r\n<p>For years, ByteEats has dominated the food delivery market with strategically placed pickup stations. There are M existing ByteEats pickup stations, each at a unique position x_i meters along the avenue. Some of these stations may even coincide with office buildings, making it difficult for competitors to attract customers.</p>\r\n<p>Now, a new challenger, FastLunch, has entered the market, determined to disrupt ByteEats' monopoly. Your job, as FastLunch's strategist, is to place a single pickup station anywhere along Tech Avenue to maximize the number of employees who choose FastLunch. Employees will pick FastLunch ONLY if their station is strictly closer to their building than any existing ByteEats station. If an existing station is at the same distance, employees will remain loyal to ByteEats.</p>\r\n<p>Given the locations of the office buildings and existing pickup stations, determine the maximum number of employees you can serve by choosing the best possible location for your pickup station.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains two space-separated integers N and M — the number of office buildings and the number of existing food delivery services.</p>\r\n<p>The second line contains N integers p_1, p_2, ..., p_N — the number of employees in each office building.</p>\r\n<p>The third line contains M integers x_1, x_2, ..., x_M — the location of each food delivery service's pickup station.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the maximum amount of lunch orders you can secure by ideally choosing the location for your new pickup station.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; N &le; 200,000</code></li>\r\n    <li><code>1 &le; M &le; 200,000</code></li>\r\n    <li><code>1 &le; p_j &le; 10^9</code></li>\r\n    <li><code>0 &le; x_j &le; 10^9</code></li>\r\n    <li><code>x_j &ne; x_k</code> for <code>j &ne; k</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4 2\r\n1 2 7 8\r\n35 157\r\nOutput:\r\n15</code></pre>\r\n<p><strong>Explanation:</strong> Placing the new pickup station at 170 meters, we analyze its distance to each building:</p>\r\n<ul>\r\n    <li>Building 1 (0 meters): The distances are 170 m (new station), 35 m (Station 1), and 157 m (Station 2). The new station is not the closest.</li>\r\n    <li>Building 2 (100 meters): The distances are 70 m (new station), 65 m (Station 1), and 57 m (Station 2). The new station is still not the closest.</li>\r\n    <li>Building 3 (200 meters): The distances are 30 m (new station), 165 m (Station 1), and 43 m (Station 2). Here, the new station is the closest.</li>\r\n    <li>Building 4 (300 meters): The distances are 130 m (new station), 265 m (Station 1), and 143 m (Station 2). Again, the new station is the closest.</li>\r\n</ul>\r\n<p>In total, the new station is closest to Buildings 3 and 4, which have a total of 15 employees (7 + 8).</p>\r\n<p>Thus, placing the pickup station at 170 meters allows the new service to secure lunch orders from 15 employees, representing the optimal choice under the given constraints.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 1\r\n2 5 6\r\n169\r\nOutput:\r\n7</code></pre>\r\n<p><strong>Explanation:</strong> In this scenario, by placing the new pickup station at 150 meters, we evaluate its proximity to the three office buildings:</p>\r\n<ul>\r\n    <li>Building 1 (0 meters): The new station is closer (150 m vs. 169 m).</li>\r\n    <li>Building 2 (100 meters): The new station is again closer (50 m vs. 69 m).</li>\r\n    <li>Building 3 (200 meters): The existing station is closer (50 m vs. 31 m).</li>\r\n</ul>\r\n<p>Thus, the new pickup station serves the first two buildings, which have a total of 7 employees (2 + 5) placing their lunch orders. Therefore, the optimal placement at 150 meters secures the maximum possible lunch orders of 7 employees.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Adobe_11july",
        "company_id": 190
    }
]