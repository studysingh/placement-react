[
    {
        "id": 480,
        "title": "Alice in Borderland",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-title\\\">\n        <h2>Alice in Borderland</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>In a distant place of Borderland, there exists a magical array <code>nums</code> of length <var>n</var> containing both positive and negative integers. Each number in the array holds a unique power. A legendary subsequence can be formed by selecting some numbers from <code>nums</code>, but the selection comes with a magical constraint.</p>\n\n        <div class=\\\"validity-rules\\\">\n            <h3>Valid Subsequence Rules</h3>\n            <p>A subsequence is deemed <strong>valid</strong> only if:</p>\n            <ul>\n                <li>For every two consecutive elements in the subsequence, <code>nums[x]</code> and <code>nums[y]</code> (where <var>x</var> < <var>y</var>) the condition <var>y</var> - <var>x</var> ≤ <var>k</var> is satisfied. This means no two selected numbers can be too far apart in the array.</li>\n            </ul>\n        </div>\n\n        <p>Your task is to find the <strong>maximum power</strong> of a valid subsequence, but there\\'s a twist. Alice describes <var>q</var> specific indices <var>i</var> (1-based) in the array, and you must determine the maximum power of any <strong>valid subsequence</strong> that <strong>includes and ends</strong> at the number at index <var>i</var>. Help Alice to complete this task.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the <code>solve()</code> function. This function takes the following three parameters and returns an integer:</p>\n        <ul>\n            <li><code>n</code>: Represents the number of elements</li>\n            <li><code>nums</code>: Represents the array nums</li>\n            <li><code>i</code>: Represents the index i</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Parameters and Constraints</h3>\n        <ul>\n            <li>The array <code>nums</code> contains both positive and negative integers</li>\n            <li>Each number in the array has a unique power</li>\n            <li>Index <var>i</var> is 1-based</li>\n            <li>The subsequence must be valid according to the given rules</li>\n            <li>The subsequence must include and end at the number at index <var>i</var></li>\n        </ul>\n    </div>\n\n    <div class=\\\"mathematical-notation\\\">\n        <h3>Mathematical Notation</h3>\n        <ul>\n            <li>For consecutive elements: If <code>nums[x]</code> and <code>nums[y]</code> are selected (x < y), then y - x ≤ k</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1XuR-lmBLp26YLei6yl_mT_NSbxmNxjq0GC6-QRPzW5o/edit?usp=sharing",
        "solution_code": "vector<int> solve(int n, vector<int> nums, int k, int q, vector<int> queries) {\\n    vector<vector<long long>> dp(n, vector<long long>(2));\\n    vector<int> result;\\n    \\n    for(int i = 0; i < n; i++) {\\n        dp[i][0] = nums[i];\\n        dp[i][1] = nums[i];\\n        \\n        for(int j = max(0, i - k); j < i; j++) {\\n            dp[i][1] = max(dp[i][1], dp[j][1] + nums[i]);\\n        }\\n    }\\n    \\n    for(int i = 0; i < q; i++) {\\n        int queryIndex = queries[i] - 1;\\n        result.push_back(dp[queryIndex][1]);\\n    }\\n    \\n    return result;\\n}\\n",
        "company_name": "Uniqode ",
        "company_id": 143
    }
]