[
    {
        "id": 1745,
        "title": "Product of Non-Zero Digits",
        "problem_statement": "<h1>Product of Non-Zero Digits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Oliver is creating a mathematical tool to calculate the product of all non-zero digits in a given number. He wants to develop a program that reads an integer input, uses a for-each loop to iterate through each digit, and computes the product of the non-zero digits.</p>\r\n<p>Can you assist Oliver in this?</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input consists of a single integer n, representing the number for which Oliver wants to calculate the product of all non-zero digits.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output prints an integer representing the product of all non-zero digits in the given integer.</p>\r\n<p>Refer to the sample output for formatting specifications.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 1089\r\nOutput: 72</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 123\r\nOutput: 6</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: 50140\r\nOutput: 20</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>10</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <numeric>\n\nclass Solution {\npublic:\n    long long solve(long long n) {\n        // Core logic to calculate the product of non-zero digits goes here.\n        // The problem statement suggests converting the number to a string\n        // and using a for-each loop.\n        std::string s = std::to_string(n);\n        long long product = 1;\n        for (char c : s) {\n            int digit = c - '0';\n            if (digit != 0) {\n                product *= digit;\n            }\n        }\n        return product;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    long long n;\n    std::cin >> n;\n    Solution sol;\n    long long result = sol.solve(n);\n    std::cout << result << std::endl;\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa_11oct",
        "company_id": 613
    },
    {
        "id": 1746,
        "title": "Array Concatenation",
        "problem_statement": "<h1>Array Concatenation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Roshni is tasked with developing a program for concatenating two arrays provided by the user. To accomplish this, she wants to create a class named <code>ArrayConcatenator</code>. This class includes a constructor to concatenate the elements of the input arrays. She wants to print the elements of the resulting array.</p>\r\n<p>Help Roshni complete the program.</p>\r\n\r\n<p><strong>Input format:</strong></p>\r\n<ul>\r\n    <li>The first line of input consists of an integer <code>N</code>, representing the number of elements of the first array.</li>\r\n    <li>The second line consists of <code>N</code> space-separated integers representing the first array elements.</li>\r\n    <li>The third line consists of an integer <code>M</code>, representing the number of elements of the second array.</li>\r\n    <li>The fourth line consists of <code>M</code> space-separated integers, representing the second array elements.</li>\r\n</ul>\r\n\r\n<p><strong>Output format:</strong></p>\r\n<p>The output prints the concatenated array of elements separated by a space. Refer to the sample output for the formatting specifications. Extra spaces and new line characters in the program output will result in the failure of the test case.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n7 8 5 6 9\r\n3\r\n1 4 3\r\nOutput:\r\n7 8 5 6 9 1 4 3</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n78 56 93 14\r\n1\r\n56\r\nOutput:\r\n78 56 93 14 56</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N, M &le; 10</code></li>\r\n    <li><code>1 &le; array elements &le; 100</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> concatenateArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n        // Core logic goes here\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n    std::vector<int> arr1(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> arr1[i];\n    }\n\n    int m;\n    std::cin >> m;\n    std::vector<int> arr2(m);\n    for (int i = 0; i < m; ++i) {\n        std::cin >> arr2[i];\n    }\n\n    Solution solution;\n    std::vector<int> result = solution.concatenateArrays(arr1, arr2);\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa_11oct",
        "company_id": 613
    },
    {
        "id": 1747,
        "title": "Bitwise XOR Flip",
        "problem_statement": "<h1>Bitwise XOR Flip</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Mandy is working on a cybersecurity project that involves basic encryption techniques. She wants to write a program that takes an integer number and performs a bitwise XOR operation to flip all the bits.</p>\r\n<p>Help Mandy in this encryption using bitwise operations.</p>\r\n\r\n<h3>Input format:</h3>\r\n<p>The input consists of an integer N, representing the number to be flipped.</p>\r\n\r\n<h3>Output format:</h3>\r\n<p>The output displays \"Result: \" followed by an integer representing the result of the bitwise XOR operation to flip all the bits.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 0\r\nOutput: Result: 255</code></pre>\r\n<p><strong>Explanation:</strong> For N = 0 (00000000 in 8-bit binary), flipping all bits results in 11111111, which is 255 in decimal. This is equivalent to 0 XOR 255.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 255\r\nOutput: Result: 0</code></pre>\r\n<p><strong>Explanation:</strong> For N = 255 (11111111 in 8-bit binary), flipping all bits results in 00000000, which is 0 in decimal. This is equivalent to 255 XOR 255.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: 135\r\nOutput: Result: 120</code></pre>\r\n<p><strong>Explanation:</strong> For N = 135 (10000111 in 8-bit binary), flipping all bits results in 01111000, which is 120 in decimal. This is equivalent to 135 XOR 255.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>In this scenario, the test cases fall under the following constraints:</p>\r\n<ul>\r\n    <li><code>0 &lt;= N &lt;= 255</code></li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>The program will be evaluated only after the \"Submit Code\" is clicked.</p>\r\n<p>Extra spaces and new line characters in the program output will result in the failure of the test case.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    int solve(int N) {\n        // Core logic to flip all bits of N using XOR\n        // Since 0 <= N <= 255, we are dealing with 8-bit numbers.\n        // Flipping all bits is equivalent to XORing with a mask of all 1s.\n        // For an 8-bit number, this mask is 255 (11111111 in binary).\n        // The operation will be N ^ 255.\n        // Placeholder for the actual implementation.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int N;\n    std::cin >> N;\n    Solution sol;\n    int result = sol.solve(N);\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa_11oct",
        "company_id": 613
    },
    {
        "id": 1748,
        "title": "Display Team Name",
        "problem_statement": "<h1>Display Team Name</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Sam, the esteemed captain of his sports team, desires to write a program that displays the name of his team. The program should prompt Sam for the team's name and subsequently present it in a refined manner. Can you assist Sam in this task?</p>\r\n<p><strong>Input format:</strong> The input consists of a string <code>s</code>, representing Sam's team name which can include letters, numbers, spaces and special characters.</p>\r\n<p><strong>Output format:</strong> The output prints \"Sam's team name is:\" followed by the team's name. Refer to the sample output for formatting specifications. Extra spaces and new line characters in the program output will result in the failure of the test case.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: Tigers\r\nOutput: Sam's team name is: Tigers</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: The Winners 2024!\r\nOutput: Sam's team name is: The Winners 2024!</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= s.length &lt;= 500</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass Solution {\npublic:\n    /**\n     * @brief Constructs the output string based on the team name.\n     * @param s The input team name.\n     * @return The formatted string for output.\n     */\n    std::string solve(const std::string& s) {\n        // Your implementation here\n        return \"Sam's team name is: \" + s;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string s;\n    std::getline(std::cin, s);\n\n    Solution solution;\n    std::cout << solution.solve(s);\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Virtusa_11oct",
        "company_id": 613
    }
]