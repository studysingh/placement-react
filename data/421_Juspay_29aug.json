[
    {
        "id": 1243,
        "title": "Parade in HackerLand",
        "problem_statement": "<h1>Parade in HackerLand</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In HackerLand, people are preparing for a parade with a rule that no red uniform can be immediately to the left of a blue one.</p>\r\n<p>Given a binary string named <code>color</code> where:</p>\r\n<ul>\r\n    <li>\"0\" represents a person in a red uniform</li>\r\n    <li>\"1\" represents a person in a blue uniform</li>\r\n</ul>\r\n<p>The goal is to remove any occurrence of \"01\" in the string through a specific process:</p>\r\n<ul>\r\n    <li>At each second, all substrings \"01\" in the string are simultaneously changed to \"10\".</li>\r\n    <li>This process repeats until no \"01\" is present in the string.</li>\r\n</ul>\r\n<p>Calculate the number of seconds it takes for the process to stop.</p>\r\n<p>Complete the <code>getSwapTime</code> function in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string color</code>: a binary string that represents the uniform colors of people</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the time to complete the process</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: color = \"0101\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>t = 0, s = \"0101\"</strong>. There are \"01\" substrings at index 0 and index 2.</li>\r\n    <li>Simultaneously, \"01\" at index 0 becomes \"10\" and \"01\" at index 2 becomes \"10\".</li>\r\n    <li><strong>t = 1, s = \"1010\"</strong>. There is an \"01\" substring at index 1.</li>\r\n    <li>This \"01\" at index 1 becomes \"10\".</li>\r\n    <li><strong>t = 2, s = \"1100\"</strong>. There are no \"01\" substrings. The process stops.</li>\r\n    <li>Therefore, the process takes 2 seconds.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: color = \"1111\"\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> There are no substrings \"01\" in the initial string. The process takes 0 seconds.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |color| <= 3 * 10^5</code> where <code>|color|</code> denotes the length of the binary string</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Juspay_29aug",
        "company_id": 421
    },
    {
        "id": 1244,
        "title": "Array Reduction 4",
        "problem_statement": "```html\r\n<h1>Array Reduction 4</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Developers are working on an optimal array algorithm that processes an array of <code>n</code> integers, referred to as <code>arr</code>, using the following steps until the array is empty:</p>\r\n<ol>\r\n    <li>Initialize an empty array called <code>result</code>.</li>\r\n    <li>Select an integer <code>k</code> such that <code>1 &lt;= k &lt;= length of the array arr</code>.</li>\r\n    <li>Append the MEX (Minimum Excluded Value) of the first <code>k</code> elements of <code>arr</code> to the <code>result</code> array.</li>\r\n    <li>Removes the first <code>k</code> elements from <code>arr</code>.</li>\r\n</ol>\r\n<p>Given an array <code>arr</code>, determine the lexicographically largest <code>result</code> array that can be obtained using the algorithm.</p>\r\n\r\n<h3>Definitions:</h3>\r\n<p>An array <code>x</code> is lexicographically greater than an array <code>y</code> if either:</p>\r\n<ul>\r\n    <li>At the first position where <code>x</code> and <code>y</code> differ, <code>x[i] &gt; y[i]</code></li>\r\n    <li><code>|x| &gt; |y|</code> and <code>y</code> is a prefix of <code>x</code> (where <code>|x|</code> denotes the length of array <code>x</code>).</li>\r\n</ul>\r\n<p>The MEX of a set of non-negative integers is the smallest non-negative integer not present in the set. For example, MEX({2,3,0}) = 1 and MEX({0,1,2,4,5}) = 3.</p>\r\n\r\n<h3>Detailed Example of Algorithm:</h3>\r\n<p>Given <code>n = 4</code>, <code>arr = [0,1,0,0]</code>, one of the optimal ways to make the array <code>result</code> lexicographically maximum is as follows:</p>\r\n<ul>\r\n    <li>Take <code>k = 2</code>, the MEX of the 1<sup>st</sup> and 2<sup>nd</sup> elements of <code>arr</code> is 2. So <code>arr = [0,0]</code> and <code>result = [2]</code>.</li>\r\n    <li>Take <code>k = 2</code>, the MEX of the 1<sup>st</sup> and 2<sup>nd</sup> elements of <code>arr</code> is 2. So <code>arr = []</code> and <code>result = [2,2]</code>.</li>\r\n</ul>\r\n<p><code>arr</code> is now empty, and the answer is <code>[2,2]</code>.</p>\r\n\r\n<h3>Function Description:</h3>\r\n<p>Complete the function <code>getMexArray</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int[] arr</code>: An array of integers</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int[]</code>: The lexicographically maximum array <code>result</code> that can be obtained using the algorithm.</li>\r\n</ul>\r\n<p>The provided code snippet for the function signature is:</p>\r\n<pre><code class='language-c++'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'getMexArray' function below.\r\n *\r\n * The function is expected to return an INTEGER_ARRAY.\r\n * The function accepts INTEGER_ARRAY arr as parameter.\r\n */\r\n\r\nvector&lt;int&gt; getMexArray(vector&lt;int&gt; arr) {\r\n\r\n}\r\n</code></pre>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>The first line contains an integer, <code>n</code>, the number of elements in <code>arr</code>.</p>\r\n<p>Each line <code>i</code> of the <code>n</code> subsequent lines (where <code>0 &lt;= i &lt; n</code>) contains an integer, <code>arr[i]</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n2\r\n2\r\n3\r\n4\r\n0\r\n1\r\n2\r\n0\r\nOutput:\r\n5\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n = 8</code>, <code>arr = [2,2,3,4,0,1,2,0]</code></p>\r\n<ul>\r\n    <li>Take <code>k = 6</code>, the MEX of the first 6 elements of <code>arr</code> is 5. So <code>arr = [2,0]</code> and <code>result = [5]</code>.</li>\r\n    <li>Take <code>k = 2</code>, the MEX of the 1<sup>st</sup> and 2<sup>nd</sup> elements of <code>arr</code> is 1. So <code>arr = []</code> and <code>result = [5,1]</code>.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n0\r\n1\r\n2\r\n3\r\n4\r\n6\r\nOutput:\r\n5\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>n = 6</code>, <code>arr = [0,1,2,3,4,6]</code></p>\r\n<ul>\r\n    <li>Take <code>k = 5</code>, the MEX of the first 5 elements of <code>arr</code> is 5. So <code>arr = [6]</code> and <code>result = [5]</code>.</li>\r\n    <li>Take <code>k = 1</code>, the MEX of the 1<sup>st</sup> element of <code>arr</code> is 0. So <code>arr = []</code> and <code>result = [5,0]</code>.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= arr[i] &lt;= n</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Juspay_29aug",
        "company_id": 421
    },
    {
        "id": 1248,
        "title": "Coolest Peak Temperature",
        "problem_statement": "```html\r\n<h1>Coolest Peak Temperature</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the Weather Monitoring Center, meteorologist Alex tracks daily temperatures over a season of n days to identify heatwaves and cooler periods. Using a sliding window approach, Alex examines the temperature data in segments, identifying heatwave peaks and analyzing their intensity.</p>\r\n<p>For each period, Alex wants to find the coolest peak temperature across different segments. Specifically, for each window size s, Alex examines all possible consecutive segments of daily temperature readings and identifies the highest temperature (peak) in each segment. Among these peaks, the coolest (minimum) peak is determined to assess the weakest heatwave.</p>\r\n<p>For each query, the task is to find the coolest peak temperature observed in all possible windows of the given size s. The goal is to efficiently process multiple queries.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>The first line contains two integers n and q, where n is the number of days with recorded temperature readings, and q is the number of queries.</p>\r\n<p>The second line contains n space-separated integers representing the daily temperature readings.</p>\r\n<p>The next q lines each contain a single integer, representing the window size for the corresponding query.</p>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>For each query, print a single integer, which is the coolest peak temperature observed in all possible windows of the specified size.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7 2\r\n80 70 85 90 95 100 90\r\n3\r\n4\r\nOutput:\r\n85\r\n90</code></pre>\r\n<p><strong>Explanation:</strong>\r\nFor the first query with window size s = 3:\r\nPossible windows and their peaks:\r\n[80, 70, 85] -> peak 85\r\n[70, 85, 90] -> peak 90\r\n[85, 90, 95] -> peak 95\r\n[90, 95, 100] -> peak 100\r\n[95, 100, 90] -> peak 100\r\nThe coolest (minimum) peak among [85, 90, 95, 100, 100] is 85.\r\n\r\nFor the second query with window size s = 4:\r\nPossible windows and their peaks:\r\n[80, 70, 85, 90] -> peak 90\r\n[70, 85, 90, 95] -> peak 95\r\n[85, 90, 95, 100] -> peak 100\r\n[90, 95, 100, 90] -> peak 100\r\nThe coolest (minimum) peak among [90, 95, 100, 100] is 90.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= temperature &lt;= 10^6</code></li>\r\n    <li><code>1 &lt;= s &lt;= n</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Juspay_29aug",
        "company_id": 421
    },
    {
        "id": 1268,
        "title": "Rita's Talk Grammar Check",
        "problem_statement": "<h1>Rita's Talk Grammar Check</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Rita has designed a simplistic language for her class project called Rita's Talk. She wants it to be extremely easy to converse with her classmates, and thus the grammar consists of these simple rules: There are three categories of words: descriptor, subject, and action. Each term in her language falls into one of these categories. There are also two classifications based on style: formal and informal. Each word is designated as either formal or informal. Descriptors end with -cio for formal style and -cia for informal style. Subjects end with -uto for formal and -uta for informal. Actions end with -arzo for formal and -arza for informal. Therefore, each term in Rita's Talk ends with one of these six suffixes. No other types of endings are permitted in Rita's Talk. A complete word is made up only of these endings, which means words like 'cio', 'uta', etc., are valid in Rita's Talk. There are no punctuation marks, tense variations, singular/plural forms, or additional grammatical complexities. A sentence is defined as either a single valid word or a complete statement. A statement can be any sequence in Rita's Talk that must meet two conditions: The sequence should start with zero or more descriptors, followed by exactly one subject, and finally, zero or more actions. Every word within the statement must have the same style. When Rita's friend Mark created a chat app supporting Rita's Talk, she hoped to incorporate grammar checking into it but needed your assistance since Mark was unavailable. Your task is to evaluate if the given series of words forms exactly one sentence in Rita's Talk.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input consists of one line containing one or more words made up of lowercase Latin letters. The total number of characters, including spaces, doesn't surpass 100,000. Consecutive words are separated by exactly one space, and no other spaces are present. The input may include words not adhering to Rita's language.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p><strong>Output:</strong> 'NO' if any word in the input does not conform to Rita's Talk or if the input is composed of more than one sentence. <strong>Output:</strong> 'YES' if the input is a single sentence in Rita's Talk.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: liala liala etra inites\r\nOutput: YES</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The input consists of one line containing one or more words.</li>\r\n    <li>Words are made up of lowercase Latin letters.</li>\r\n    <li>The total number of characters, including spaces, does not surpass 100,000.</li>\r\n    <li>Consecutive words are separated by exactly one space.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Juspay_29aug",
        "company_id": 421
    },
    {
        "id": 1269,
        "title": "Traffic Control Hubs",
        "problem_statement": "<h1>Traffic Control Hubs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a smart city, there are an infinite number of traffic control hubs numbered with positive integers starting from 1. Each hub is connected by smart roads in a unique tree-like structure:</p>\r\n<ol>\r\n    <li>There is a direct, bidirectional road between hub 1 and 2i.</li>\r\n    <li>Another direct road exists between hub i and 2i + 1.</li>\r\n</ol>\r\n<p>Given this structure, there is always a unique shortest path between any two traffic control hubs.</p>\r\n<p>Initially, passing through any road is toll-free. However, to optimize traffic flow and manage congestion, the city traffic authority occasionally imposes toll fees on certain roads along specific paths.</p>\r\n<p>The traffic authority will introduce a series of changes:</p>\r\n<ol>\r\n    <li><strong>Toll Fee Update:</strong> An update described by integers x, y, and t imposes a toll of t units on all roads along the shortest path from hub y to hub x.</li>\r\n    <li><strong>Travel Cost Calculation:</strong> A commuter travels from hub x to hub y using the shortest path, and you need to calculate the total toll fees they incur.</li>\r\n</ol>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer q (1 &le; q &le; 1,000), representing the number of events.</p>\r\n<p>The next q lines contain details of the events:</p>\r\n<ul>\r\n    <li><code>1 x y t</code> describes a toll update where all roads on the shortest path between hubs x and y increase their toll by t units.</li>\r\n    <li><code>2 x y</code> represents a travel event where a commuter moves from hub x to hub y.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each travel event (2 x y), output the total toll cost for the trip.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; q &le; 1,000</li>\r\n    <li>1 &le; x &le; 10,000</li>\r\n    <li>1 &le; y &le; 10,000</li>\r\n    <li>1 &le; t &le; 100,000</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Sample Testcase 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n1 3 4 10\r\n1 4 1 2\r\n1 3 6 8\r\n1 6 1 40\r\n2 3 7\r\n2 2 4\r\n2 1 2\r\n\r\nOutput:\r\n34\r\n0\r\n12</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Juspay_29aug",
        "company_id": 421
    }
]