[
    {
        "id": 216,
        "title": "Coding Skills: Computer Networks Topology",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Coding Skills: Computer Networks Topology</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>In network topologies under Computer Networks, there are three types of topologies:</p>\n        <ul>\n            <li>Bus topology</li>\n            <li>Ring topology</li>\n            <li>Star topology</li>\n        </ul>\n        \n        <p>You are given a dataset that has several caselets (each caselet represents a topology) and each caselet has several lines:</p>\n        <ol>\n            <li>A value \\'N\\' denoting the number of nodes in the topology.</li>\n            <li>A value \\'M\\' denoting the number of connections in the topology.</li>\n            <li>\\'M\\' lines denoting which two nodes are connected.</li>\n        </ol>\n        \n        <p>You need to find which caselet represents which topology.</p>\n        <ul>\n            <li>Return 1 if the caselet is a bus topology</li>\n            <li>Return 2 if it is a star topology</li>\n            <li>Return 3 if it is ring topology</li>\n            <li>Return -1 otherwise</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li><code>input1</code>: The value N</li>\n            <li><code>input2</code>: The value M</li>\n            <li><code>input3</code>: Array of size M containing the starting point of the connections</li>\n            <li><code>input4</code>: Array of size M containing the end point of the connections</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the type of topology the network represents.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example 1:</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">input1: 3\ninput2: 3\ninput3: [1,2,3]\ninput4: [2,3,1]</pre>\n            <pre class=\\\"output\\\">Output: 3</pre>\n            <div class=\\\"explanation\\\">\n                <p>It represents a ring topology.</p>\n            </div>\n        </div>\n\n        <h3>Example 2:</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">input1: 3\ninput2: 2\ninput3: [1,2]\ninput4: [2,3]</pre>\n            <pre class=\\\"output\\\">Output: 1</pre>\n            <div class=\\\"explanation\\\">\n                <p>It represents a bus topology.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Function Signature:</h3>\n        <pre class=\\\"cpp\\\">int topologytype(int input1, int input2, int input3[], int input4[])</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1UZYn1RJ1L6i49QWPSPKN12VZDKIWfVkezg7Uuvlsbdo/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\n\\nint topologytype(int input1, int input2, vector<int>& input3, vector<int>& input4) {\\n    int N = input1, M = input2;\\n    vector<vector<int>> adj(N+1, vector<int>());\\n    vector<int> degree(N+1, 0);\\n    \\n    for(int i=0; i<M; i++) {\\n        int u = input3[i];\\n        int v = input4[i];\\n        adj[u].push_back(v);\\n        adj[v].push_back(u);\\n        degree[u]++;\\n        degree[v]++;\\n    }\\n    \\n    vector<bool> visited(N+1, false);\\n    int start = 1;\\n    while(start <= N && degree[start]==0) start++;\\n    if(start > N) return -1;\\n    \\n    queue<int> q;\\n    q.push(start);\\n    visited[start] = true;\\n    \\n    while(!q.empty()) {\\n        int u = q.front(); \\n        q.pop();\\n        for(auto &v: adj[u]) {\\n            if(!visited[v]) {\\n                visited[v] = true;\\n                q.push(v);\\n            }\\n        }\\n    }\\n    \\n    for(int i=1; i<=N; i++) \\n        if(degree[i]>0 && !visited[i]) return -1;\\n    \\n    if(M == N) {\\n        for(int i=1; i<=N; i++) \\n            if(degree[i] != 2) return -1;\\n        return 3;\\n    }\\n    \\n    if(M == N-1) {\\n        int cnt1=0, cntN=0;\\n        for(int i=1; i<=N; i++) {\\n            if(degree[i]==1) cnt1++;\\n            else if(degree[i]==N-1) cntN++;\\n            else if(degree[i]!=2) cntN = -1;\\n        }\\n        if(cnt1 == 2) return 1;\\n        if(cntN == 1) return 2;\\n    }\\n    return -1;\\n}\\n\\nint main() {\\n    int N, M;\\n    cin >> N >> M;\\n    \\n    // Using vectors instead of arrays\\n    vector<int> input3(M);\\n    vector<int> input4(M);\\n    \\n    for(int i=0; i<M; i++) \\n        cin >> input3[i];\\n    for(int i=0; i<M; i++) \\n        cin >> input4[i];\\n        \\n    cout << topologytype(N, M, input3, input4);\\n    return 0;\\n}",
        "company_name": "ICICI",
        "company_id": 54
    }
]