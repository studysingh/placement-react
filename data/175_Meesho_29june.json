[
    {
        "id": 538,
        "title": "StackOverFlow System",
        "problem_statement": "<h1>StackOverFlow System</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are provided with the following abstract base class:</p>\r\n<pre><code class='language-cpp'>class StackOverFlow {\r\npublic:\r\n    StackOverFlow();\r\n    virtual ~StackOverFlow() = default;\r\n    virtual int addQuestion(string &content, string &author) = 0;\r\n    virtual void deleteQuestion(int id) = 0;\r\n    virtual void upVote(int id) = 0;\r\n    virtual void downVote(int id) = 0;\r\n    virtual pair&lt;string, int&gt; getQuestionById(int id) = 0;\r\n    virtual vector&lt;string&gt; getTop10QuestionsByAuthor(string &author) = 0;\r\n    explicit StackOverFlow(const int decayTime);\r\n    virtual void decayTime(int) = 0;\r\n};\r\n</code></pre>\r\n\r\n<p><strong>Function descriptions:</strong></p>\r\n<ul>\r\n    <li><code>int addQuestion(string &content, string &author)</code>\r\n        <ul>\r\n            <li>Adds a new question with the given content and author.</li>\r\n            <li>Returns the unique ID of the question.</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>void deleteQuestion(int id)</code>\r\n        <ul>\r\n            <li>Deletes the question with the given ID.</li>\r\n            <li>If it does not exist or has already been deleted, no action is taken.</li>\r\n            <li>Initially, the question had 0 votes and was not deleted.</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>void upVote(int id)</code>\r\n        <ul>\r\n            <li>Increases the vote count of the given question by 1.</li>\r\n            <li>If it does not exist or has already been deleted, no action is taken.</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>void downVote(int id)</code>\r\n        <ul>\r\n            <li>Decreases the vote count of the given question by 1.</li>\r\n            <li>If it does not exist or has already been deleted, no action is taken.</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>pair&lt;string, int&gt; getQuestionById(int id)</code>\r\n        <ul>\r\n            <li>Returns the question content and its current vote count.</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>vector&lt;string&gt; getTop10QuestionsByAuthor(string &author)</code>\r\n        <ul>\r\n            <li>Returns the top 10 questions asked by the given author, sorted by vote count in descending order. If vote counts are equal, sort by ID in ascending order.</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>explicit StackOverFlow(const int decayTime)</code>\r\n        <ul>\r\n            <li>Constructor for the system, where <code>decayTime</code> is a parameter influencing vote decay.</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>virtual void decayTime(int) = 0;</code>\r\n        <ul>\r\n            <li>This method is called to trigger the vote decay mechanism. The vote count of each question gets <strong>decreased by 1 after every <code>decayTime</code> query</strong>.</li>\r\n            <li>The timing of decay can be different for each question. For each question, decay takes place at <code>Time = Last_Update_Time_Of_That_Question + decayTime</code>.</li>\r\n            <li>Example: <code>decayTime=2</code>, question is added at time=1 and upvoted at time=2. If there is no update to this question at time t+2, decay takes place.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<p><strong>Task:</strong></p>\r\n<p>Implement a system that:</p>\r\n<ul>\r\n    <li>Allows adding, deleting, and voting on questions.</li>\r\n    <li>Maintains a collection of questions with associated vote counts and unique content IDs.</li>\r\n    <li>Handles all queries efficiently (up to 10<sup>5</sup> queries).</li>\r\n    <li>You must create a class named <code>sof</code> that inherits from the base class <code>StackOverFlow</code>.</li>\r\n    <li>You should return appropriate responses for each query as specified in the Output format section.</li>\r\n    <li>For each <code>getQuestionById</code> query, return the current state of the question.</li>\r\n</ul>\r\n\r\n<p><strong>Output format:</strong></p>\r\n<ul>\r\n    <li>For each query of type 1, print:\r\n        <ul>\r\n            <li><code>Question with id: X is added</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>For each query of type 2, print:\r\n        <ul>\r\n            <li><code>Question with id: X is deleted</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>For each query of type 3, print:\r\n        <ul>\r\n            <li><code>Question with id: X is upvoted</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>For each query of type 4, print:\r\n        <ul>\r\n            <li><code>Question with id: X is downvoted</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>For each query of type 5, print:\r\n        <ul>\r\n            <li><code>Content: &lt;content&gt;, Vote: &lt;vote&gt;</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>For each query of type 6, print:\r\n        <ul>\r\n            <li><code>&lt;content&gt;</code> (for each of the top questions, each on a new line)</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n10\r\n1 BinarySearch Alice\r\n1 Polymorphism Bob\r\n3 0\r\n3 1\r\n6 Bob\r\n5 1\r\n1 BinarySearch Alice\r\n4 0\r\n4 0\r\n6 Alice\r\n</code></pre>\r\n<pre><code class='language-text'>Output:\r\nQuestion with id: 0 is added\r\nQuestion with id: 1 is added\r\nQuestion with id: 0 is upvoted\r\nQuestion with id: 1 is upvoted\r\nContent: Polymorphism, Vote: 2\r\nContent: Polymorphism, Vote: 2\r\nQuestion with id: 2 is added\r\nQuestion with id: 0 is downvoted\r\nQuestion with id: 0 is downvoted\r\nContent: BinarySearch, Vote: 1\r\n</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<br>Time | Query | Explanation | Output\r\n<br>--- | --- | --- | ---\r\n<br>1 | 1 BinarySearch Alice | Add question \"BinarySearch\" by Alice -> ID 0 is assigned | Question with id: 0 is added\r\n<br>2 | 1 Polymorphism Bob | Add question \"Polymorphism\" by Bob -> ID 1 is assigned | Question with id: 1 is added\r\n<br>3 | 3 0 | Upvote ID 0 -> vote = 1 | Question with id: 0 is upvoted\r\n<br>4 | 3 1 | Upvote ID 1 -> vote = 2 | Question with id: 1 is upvoted\r\n<br>5 | 6 Bob | Fetch Top 10 questions by Bob -> content \"Polymorphism\" vote 2 | Content: Polymorphism, Vote: 2\r\n<br>6 | 5 1 | Fetch ID 1 content -> \"Polymorphism\" vote 2 | Content: Polymorphism, Vote: 2\r\n<br>7 | 1 BinarySearch Alice | Add question \"BinarySearch\" by Alice -> ID 2 is assigned | Question with id: 2 is added\r\n<br>8 | 4 0 | Downvote ID 0 -> vote = 0 | Question with id: 0 is downvoted\r\n<br>9 | 4 0 | Downvote ID 0 -> vote = -1 | Question with id: 0 is downvoted\r\n<br>10 | 6 Alice | Fetch Top 10 questions by Alice -> Only one question \"BinarySearch\" vote 1 | Content: BinarySearch, Vote: 1\r\n</p>\r\n\r\n<h3>Example 2 (with Decay):</h3>\r\n<pre><code class='language-text'>Input:\r\n10\r\n1 BinarySearch Alice\r\n1 Polymorphism Bob\r\n3 0\r\n3 1\r\n3 0\r\n3 1\r\n6 Bob\r\n5 1\r\n4 0\r\n4 0\r\n</code></pre>\r\n<pre><code class='language-text'>Output:\r\nQuestion with id: 0 is added\r\nQuestion with id: 1 is added\r\nQuestion with id: 0 is upvoted\r\nQuestion with id: 1 is upvoted\r\nQuestion with id: 0 is upvoted\r\nQuestion with id: 1 is upvoted\r\nContent: Polymorphism, Vote: 2\r\nContent: Polymorphism, Vote: 2\r\nQuestion with id: 0 is downvoted\r\nQuestion with id: 0 is downvoted\r\n</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<br>Time | Query | Explanation | Output\r\n<br>--- | --- | --- | ---\r\n<br>1 | 1 BinarySearch Alice | Add question \"BinarySearch\" by Alice -> ID 0 is assigned | Question with id: 0 is added\r\n<br>2 | 1 Polymorphism Bob | Add question \"Polymorphism\" by Bob -> ID 1 is assigned | Question with id: 1 is added\r\n<br>3 | 3 0 | Upvote ID 0 -> vote = 1 | Question with id: 0 is upvoted\r\n<br>4 | 3 1 | Upvote ID 1 -> vote = 2 | Question with id: 1 is upvoted\r\n<br>5 | 3 0 | Upvote ID 0 -> vote = 2 | Question with id: 0 is upvoted\r\n<br>6 | 3 1 | Upvote ID 1 -> vote = 3 | Question with id: 1 is upvoted\r\n<br>7 | 6 Bob | Fetch Top 10 questions by Bob -> content \"Polymorphism\" vote 3. <strong>Decay happens:</strong> to question with ID=0, vote = 1 | Content: Polymorphism, Vote: 3\r\n<br>8 | 5 1 | Fetch ID 1 content -> \"Polymorphism\" vote 3. <strong>Decay happens:</strong> to question with ID=0, vote = 0 | Content: Polymorphism, Vote: 3\r\n<br>9 | 4 0 | Downvote ID 0 -> vote = -1. <strong>Decay happens:</strong> to question with ID=1, vote = 2 | Question with id: 0 is downvoted\r\n<br>10 | 4 0 | Downvote ID 0 -> vote = -2. <strong>Decay happens:</strong> to question with ID=1, vote = 1 | Question with id: 0 is downvoted\r\n</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; Q &le; 10<sup>5</sup></code> (Number of queries)</li>\r\n    <li><code>1 &le; Length of content &le; 100</code></li>\r\n    <li>For <code>getTop10QuestionsByAuthor</code>, the output will be <code>min(10, top10.size())</code> questions.</li>\r\n    <li>Time Limit: 10 sec(s) for each input file</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>Note: Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains an integer <code>Q</code> â€” the number of queries.</li>\r\n    <li>The next <code>Q</code> lines contain the queries in the following format:\r\n        <ul>\r\n            <li><code>1 content author</code> // Add a new question, returns its id</li>\r\n            <li><code>2 id</code> // Delete question with given id</li>\r\n            <li><code>3 id</code> // Upvote question</li>\r\n            <li><code>4 id</code> // Downvote question</li>\r\n            <li><code>5 id</code> // Print the content and vote for the question</li>\r\n            <li><code>6 author</code> // Print the Top 10 questions asked by the given author</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_29june",
        "company_id": 175
    }
]