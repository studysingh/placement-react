[
    {
        "id": 1545,
        "title": "Valid Puzzle Placement",
        "problem_statement": "<h1>Valid Puzzle Placement</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Takashi is playing a Puzzle game. The puzzle involves placing multiple puzzle pieces on a square board and filling in all of the gaps of the board.</p>\r\n\r\n<p>The board and the pieces are characterized as follows:</p>\r\n<ul>\r\n    <li>The board is a square of size N &times; N, divided into squares of size 1 &times; 1.</li>\r\n    <li>The pieces consist of one or more tiles of size 1 &times; 1, with the tiles in a piece being connected by sharing an entire side.</li>\r\n</ul>\r\n\r\n<p>The rules of the game are as follows:</p>\r\n<ul>\r\n    <li>Pieces can only be placed so that each tile exactly overlaps a square on the board.</li>\r\n    <li>Pieces can be rotated, but not turned over.</li>\r\n    <li>Multiple pieces must not overlap on one square of the board.</li>\r\n    <li>A piece must not extend beyond the edge of the board.</li>\r\n    <li>All pieces must be used.</li>\r\n    <li>If a board cannot contain all of the pieces or contains any gaps after all of the pieces are placed, the puzzle is not considered a valid puzzle.</li>\r\n</ul>\r\n\r\n<p>In the example image provided (not included in HTML), the left side of the puzzle shows a valid piece (connected tiles), but the right side shows an invalid piece (disconnected tiles).</p>\r\n\r\n<p>Takashi has a board and some pieces, but he is not sure if they form a valid puzzle. Your task is to write a program to check whether the board and the pieces that Takashi has form a valid puzzle.</p>\r\n\r\n<p>The puzzle Takashi holds consists of a board of N &times; N and M pieces. The shape and size of each piece is given as how it would appear if it were placed at an arbitrary location on the board. Specifically, for each piece, N strings with N characters each are given. The strings consist of only the characters <code>.</code> and <code>#</code>: the character <code>.</code> indicates a square without a tile and the character <code>#</code> indicates a square with a tile. The j-th line of the i-th piece is denoted by S<sub>i,j</sub>. Note that in the input the pieces are not necessarily placed in the location they will occupy in the finished puzzle.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<pre><code class='language-text'>N M\r\nS_1,1\r\n...\r\nS_1,N\r\nS_2,1\r\n...\r\nS_2,N\r\n...\r\nS_M,1\r\n...\r\nS_M,N</code></pre>\r\n\r\n<p><strong>Output Rules:</strong></p>\r\n<p>Output <code>yes</code> if the board can be filled exactly with all of the given pieces, or <code>no</code> if it is not possible.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 3\r\n##\r\n..\r\n.#\r\n.#\r\n#.\r\n..\r\nOutput:\r\nyes</code></pre>\r\n<p><strong>Explanation:</strong> The input describes a 2x2 board (N=2) and 3 pieces (M=3). The pieces are: a 1x2 block (<code>##</code>), a single tile (<code>.#</code>), and another single tile (<code>#.</code>). Since the total number of tiles (2 + 1 + 1 = 4) matches the board size (2x2 = 4), and these pieces can be arranged to perfectly fill the 2x2 board (as shown in the example image not provided in HTML), the output is <code>yes</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n.#.\r\n.#.\r\n.#.\r\n##.\r\n##.\r\n...\r\n.##\r\n.##\r\n...\r\nOutput:\r\nno</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 4</code>, integer</li>\r\n    <li><code>1 &le; M &le; N<sup>2</sup></code>, integer</li>\r\n    <li><code>S<sub>i,j</sub></code> is a string of length <code>N</code> consisting of <code>.</code> or <code>#</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Accenture_29sep",
        "company_id": 541
    }
]