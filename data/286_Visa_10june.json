[
    {
        "id": 920,
        "title": "Bubble Explosion",
        "problem_statement": "```html\r\n<h1>Bubble Explosion</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine you are given a board of cells, each containing a bubble of a specific color. Neighboring cells of the bubble are defined as adjacent cells (on either the same row or column as the given cell) which have a common side with the given cell. For example, the neighboring cells for each of the cells A, B, and C are highlighted in corresponding color in the picture below.</p>\r\n<p>Your task is to perform a bubble explosion on the board. A bubble explosion is defined by the following rules:</p>\r\n<ul>\r\n    <li>A bubble within any given cell is eligible to explode if it has the same color as bubbles in at least 2 neighboring cells.</li>\r\n    <li>All eligible bubbles and bubbles of the same color in neighboring cells are marked for explosion.</li>\r\n    <li>All marked bubbles explode at the same time. Exploded bubbles are removed from the board, resulting in empty cells.</li>\r\n    <li>After all exploded bubbles are removed, remaining bubbles in cells above the empty cells drop down to fill all empty cells.</li>\r\n</ul>\r\n<p>You are given an initial board of cells <strong>bubbles</strong> - a multidimensional array of integers representing cells containing bubbles of various colors. Return the board state after a bubble explosion. The output should be a multidimensional array of integers with the same size as <strong>bubbles</strong>, but replacing all empty cells (without bubbles) with <strong>0</strong>.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(bubbles.length * bubbles[0].length)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: bubbles = [[3, 1, 2, 1],\r\n                  [1, 1, 1, 4],\r\n                  [3, 1, 2, 2],\r\n                  [3, 3, 3, 4]]\r\nOutput: [[0, 0, 0, 1],\r\n                   [0, 0, 0, 4],\r\n                   [0, 0, 2, 2],\r\n                   [3, 0, 2, 4]]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit 0.5 seconds (cpp)</li>\r\n    <li>Memory limit 1 GB</li>\r\n</ul>\r\n\r\n<h2>Input/Output</h2>\r\n<ul>\r\n    <li><strong>Input:</strong> array array integer bubbles\r\n        <ul>\r\n            <li>A multidimensional array of integers representing the initial board of cells containing bubbles. Integers represent colors of bubbles within cells. It is guaranteed that all cells will contain bubbles initially.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> array array integer\r\n        <ul>\r\n            <li>Return the final state of the board after a bubble explosion. The output should be a multidimensional array of integers with the same size as <strong>bubbles</strong>, with <strong>0</strong> representing empty cells without bubbles.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Guaranteed constraints:\r\n        <ul>\r\n            <li><code>1 <= bubbles.length <= 100</code></li>\r\n            <li><code>1 <= bubbles[0].length <= 100</code></li>\r\n            <li><code>1 <= bubbles[i][j] <= 10^4</code></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_10june",
        "company_id": 286
    },
    {
        "id": 921,
        "title": "Longest Common Prefix Between Two Arrays of Numbers",
        "problem_statement": "<h1>Longest Common Prefix Between Two Arrays of Numbers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two arrays of numbers, <code>firstArray</code> and <code>secondArray</code>. Return the length of the longest common prefix (LCP) between any pair of numbers from different arrays or 0 if no common prefix exists.</p>\r\n<p><strong>Note:</strong> A prefix of a number is a number formed by one or more of its digits, starting from its highest-order digit. For example, <code>123</code> is a prefix of the number <code>12345</code> and <code>2</code> is a prefix of the number <code>234</code>. A common prefix of two numbers is a number which is a prefix of both. For instance, longest common prefix (LCP) of <code>565359</code> and <code>565354</code> is <code>56535</code> and there is no common prefix of <code>123</code> and <code>456</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: firstArray = [25, 288, 2655, 544, 54, 555], secondArray = [2, 255, 266, 244, 26, 5, 54544]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The best pair is <code>544</code> from the <code>firstArray</code> and <code>54544</code> from the <code>secondArray</code> with the LCP <code>5454</code>, where <code>5454</code> is of length <code>4</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: firstArray = [25, 288, 2655, 544, 54, 555], secondArray = [2, 255, 266, 244, 26, 5, 544444]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The best pair is <code>544</code> from the <code>firstArray</code> and <code>544444</code> from the <code>secondArray</code> with the LCP <code>544</code>, where <code>544</code> is of length <code>3</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: firstArray = [817, 99], secondArray = [1999, 1969]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> No pair of numbers from different arrays has a common prefix, hence the answer is <code>0</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (C++)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li><code>firstArray</code> is an array of positive integers.</li>\r\n    <li><code>1 <= firstArray.length <= 5 * 10^4</code></li>\r\n    <li><code>1 <= firstArray[i] <= 10^9</code></li>\r\n    <li><code>secondArray</code> is an array of positive integers.</li>\r\n    <li><code>1 <= secondArray.length <= 5 * 10^4</code></li>\r\n    <li><code>1 <= secondArray[i] <= 10^9</code></li>\r\n    <li>Output is an integer representing the length of the longest common prefix (LCP) between any pair of numbers from different arrays.</li>\r\n</ul>\r\n\r\n<p>The function signature is:</p>\r\n<pre><code class='language-javascript'>int solution(Vector&lt;int&gt; firstArray, Vector&lt;int&gt; secondArray) {\r\n    // Your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Visa_10june",
        "company_id": 286
    }
]