[
    {
        "id": 1498,
        "title": "Operate the Subarray",
        "problem_statement": "<h1>Operate the Subarray</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array A consisting of N positive numbers. In one operation, you can take any subarray of the array and replace it with its sum. You can perform this operation any number of times. Your task is to print a number that denotes the maximum length of the non-decreasing array after performing the above operations.</p>\r\n<p>For example: If A = [1, 2, 6, 9], you can choose the subarray [2,6] and replace it with its sum we get A = [1, 8, 9]. Therefore in 1 operation, the array can be made Non-decreasing.</p>\r\n\r\n<h3>Input format:</h3>\r\n<p>The input consists of two lines:</p>\r\n<ul>\r\n    <li>The first line will contain an integer N.</li>\r\n    <li>The second line contains N space-separated integers denoting the array elements.</li>\r\n</ul>\r\n<p><strong>The input will be read from the STDIN by the candidate.</strong></p>\r\n\r\n<h3>Output format:</h3>\r\n<p>Print a number that denotes the maximum length of the non-decreasing array after performing the above operations.</p>\r\n<p><strong>The output will be matched to the candidate's output printed on the STDOUT.</strong></p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n5 1 6 3 4 2 8\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> We can perform 3 operations on the subarray A[2, 3], A[4, 5] and A[6, 7] respectively and get the array as A = [5, 7, 7, 10], which is non decreasing and has length 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 &lt;= N &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= A[i] &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Important Instructions</h2>\r\n<ul>\r\n    <li>Program should take input from standard input and print output to standard output.</li>\r\n    <li>Your code is judged by an automated system, do not write any additional welcome/greeting messages.</li>\r\n    <li>\"Save and Test\" only checks for basic test cases, more rigorous cases will be used to judge your code while scoring.</li>\r\n    <li>Additional score will be given for writing optimized code both in terms of memory and execution time.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Airtel_24sep",
        "company_id": 525
    },
    {
        "id": 1499,
        "title": "Tree Operations",
        "problem_statement": "<h1>Tree Operations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p><strong>Distance:</strong> Distance between two nodes is the minimum number of edges to be traversed to reach one node from another.</p>\r\n<p><strong>Height of a tree:</strong> The height of a tree is the number of edges on the longest path from the root node to a leaf.</p>\r\n<p>You are given nodes of a binary tree, its height and an integer k. Count the number of distinct pairs of leaf nodes where the distance between these leaf nodes is less than or equal to k and print the same.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>Print -1 if the input tree is empty i.e., the height of the tree is -1.</li>\r\n    <li>Print 0 if no such pair is found.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input is in the following format:</p>\r\n<ul>\r\n    <li>The first line takes an integer N.</li>\r\n    <li>The second line takes an integer R as input which represents the height of the tree (the root node is at 0th level). (If the height is equal to -1, means empty tree.)</li>\r\n    <li>Next N+1 lines contain the nodes in the tree in level order. Each line represents the nodes present in the binary tree at the i-th level.</li>\r\n    <li>1st line contains level 0 nodes. (i.e. root node)</li>\r\n    <li>2nd line contains nodes of level 1</li>\r\n    <li>3rd line contains nodes of level 2 and so on.</li>\r\n    <li>Each node is represented by an integer value. Node value of -1 denotes an empty node (no node present at that place).</li>\r\n    <li><strong>Input:</strong> will be read from the <strong>STDIN</strong> by the candidate.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the count of pairs of leaf nodes where the distance between these leaf nodes is less than or equal to k.</p>\r\n<p>The <strong>Output:</strong> will be matched to the candidate's output printed on the <strong>STDOUT</strong>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>0 &lt; k &lt;= 10</li>\r\n    <li>-1 &lt;= height of tree &lt;= 10</li>\r\n    <li>0 &lt; value of a single node &lt;= 1000</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n2\r\n3 4\r\n5 6 7 8\r\n9 10 11 -1 -1 -1 12\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Pictorial representation of the tree:</p>\r\n<pre><code class='language-text'>      2\r\n     / \\\r\n    3   4\r\n   / \\ / \\\r\n  5  6 7  8\r\n / \\     /\r\n9  10   12</code></pre>\r\n<p>Pairs of leaf nodes with a distance less than or equal to 4 are (9, 10), (9, 11), (10, 11), (7, 12).</p>\r\n<ul>\r\n    <li>Distance between 9 and 10 is 2</li>\r\n    <li>Distance between 9 and 11 is 4</li>\r\n    <li>Distance between 10 and 11 is 2</li>\r\n    <li>Distance between 7 and 12 is 3</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n2\r\n3 5\r\n4 6 1 7\r\nOutput:\r\n2</code></pre>\r\n\r\n<h2>Instructions</h2>\r\n<ul>\r\n    <li>Program should take input from standard input and print output to standard output.</li>\r\n    <li>Your code is judged by an automated system, do not write any additional welcome/greeting messages.</li>\r\n    <li>\"Save and Test\" only checks for basic test cases, more rigorous cases will be used to judge your code while scoring.</li>\r\n    <li>Additional score will be given for writing optimized code both in terms of memory and execution time.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Airtel_24sep",
        "company_id": 525
    },
    {
        "id": 1500,
        "title": "Perfume Factory",
        "problem_statement": "<h1>Perfume Factory</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At a perfume factory, every perfume bottle goes through three processes after each other, i.e., Distillation -> Enfleurage -> Extraction. The factory has P Distillation, Q Enfleurage, and R Extraction machines. Each machine can process only a single product at any time, and it takes T1 hours for Distillation, T2 hours for Enfleurage, and T3 hours for Extraction. Your task is to print the minimum hours required to produce N perfume bottles.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input consists of two lines:</p>\r\n<ul>\r\n    <li>The first line contains an integer N, representing the number of perfume bottles.</li>\r\n    <li>The second line contains six space-separated integers P, Q, R, T1, T2, T3.</li>\r\n</ul>\r\n<p>The input will be read from the STDIN by the candidate.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the minimum hours required to prepare N perfume bottles.</p>\r\n<p>The output will be matched to the candidate's output printed on the STDOUT.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10000</li>\r\n    <li>1 &le; P, Q, R, T1, T2, T3 &le; 1000</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n4 3 2 10 5 2\r\nOutput:\r\n32</code></pre>\r\n<p><strong>Explanation:</strong> There are 4 Distillation, 3 Enfleurage and 2 Extraction machines. Taking the waiting time into account, the start time for making each of the eight bottles is 0, 2, 5, 10, 12, and 15 hours respectively. The last perfume bottles will be ready after 15 + 10 + 5 + 2 = 32 hours.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n1 1 1 5 5 5\r\nOutput:\r\n15</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Airtel_24sep",
        "company_id": 525
    },
    {
        "id": 1501,
        "title": "Save the States",
        "problem_statement": "<h1>Save the States</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a map of a country in the form of an acyclic graph with m nodes. Each node represents an individual state connected to each other through bidirectional roads. During a war, the enemy has occupied the country and placed 1 tank in each of the states mentioned in the input. The tanks use bidirectional roads to travel to any state. To save any two tanks reach the same state then, the state will be destroyed. You need to stop two tanks from entering into the same state, in order to do so, you need to eliminate (optimally) the roads connecting any two states in which the tanks are placed. You need to find the least amount of time required to eliminate the connecting roads. Eliminating each road will take a certain amount of time which is given in the input.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>The number of states and tanks is always greater than 1.</li>\r\n    <li>If there are m number of states, then they are numbered from 0 to m-1, i.e, state₀, state₁, up to stateₘ₋₁.</li>\r\n    <li>The time required to eliminate the road connecting two states must always be positive and greater than 0.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt; m &lt; 200</li>\r\n    <li>1 &lt; n &lt; 200</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input is in the following format:</p>\r\n<ul>\r\n    <li>The first line contains two space-separated integers m and n, where m and n denote the number of states and the number of tanks, respectively.</li>\r\n    <li>Each of the following m-1 lines contains three space-separated integers denoting two connected states (i.e. state₁, state₂), and time, where \"time\" is required to eliminate the road connecting \"state₁\" and \"state₂\".</li>\r\n    <li>The following n lines each contain an integer denoting the state having a tank.</li>\r\n</ul>\r\n<p>The input will be read from the STDIN by the candidate.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the least amount of time required to eliminate the connecting roads to protect all the states from destruction. The output will be matched to the candidate's output printed on the STDOUT.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 4\r\n0 4 1\r\n0 5 3\r\n4 2 4\r\n4 3 2\r\n3 1 5\r\n3\r\n1\r\n2\r\n5\r\nOutput:\r\n8</code></pre>\r\n<p><strong>Explanation:</strong> The states state₀, state₁, state₂, and state₅ each contain a tank. The minimum time required to save all the states is 8, by eliminating the roads between state₀ and state₄, and state₄ and state₂, and state₃ and state₁. i.e. 1+2+5=8.</p>\r\n\r\n<h3>Sample Input:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 2\r\n1 4 10\r\n1 2 8\r\n4 3 13\r\n4 0 12\r\n0\r\n3\r\nOutput:\r\n12</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Airtel_24sep",
        "company_id": 525
    },
    {
        "id": 1502,
        "title": "Minimum Cost String",
        "problem_statement": "<h1>Minimum Cost String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string str. The string consists of lower case Latin letters ('a'-'z'). You have to convert all the characters of the string such that all the characters become equal and they should be a vowel, the following characters are vowels 'a', 'e', 'i', 'o', 'u'. The cost of changing a consonant into any vowel is 10 dollars. Let, X and Y are two vowels then the cost of converting X into Y will be |X-Y| dollars. Your task is to find and print the minimum cost to transform the string into the desired string. If the string is already equal to the desired string print -1, otherwise print the minimum cost.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n    <li>The input consists of a single line.</li>\r\n    <li>The line contains a string str.</li>\r\n    <li>The input will be read from the STDIN by the candidate</li>\r\n</ul>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>Print a number that represents the minimum cost to transform the string into the desired string if the string is already equal to the desired string then print -1. The output will be matched to the candidate's output printed on the STDOUT</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: greay\r\nOutput: 38</code></pre>\r\n<p><strong>Explanation:</strong> If we change every character to 'e' the cost will be:- 10 + 10 + |'e'-'a'| + |'e'-'y'| + |'e'-'a'| + 10 = 38.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: iii\r\nOutput: -1</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; length of the string str &le; 250</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Airtel_24sep",
        "company_id": 525
    },
    {
        "id": 1503,
        "title": "Minimum Strength to reach Destination",
        "problem_statement": "<h1>Minimum Strength to reach Destination</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a matrix <code>mat</code> of size <code>m x n</code>. Each cell of a matrix contains strength. A robot needs a positive strength to travel from the top left corner of the matrix to the bottom right corner. At any point in its journey, its strength cannot drop to 0 or less. The cells can contain either 0, positive or negative strength. Positive strength increases the robot's strength by cell value, negative strength decreases the robot's strength by cell value, and no change in strength if the cell value is 0. You are required to calculate the minimum initial strength required by the robot to travel from the source (i.e. the top left corner) to reach the destination (i.e. the bottom right corner) and print the same.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>A robot can only move one cell at a time, either down or right, i.e. to cell (i+1,j) or cell (i,j+1) and it cannot move outside the matrix.</li>\r\n    <li>mat[0][0] + mat[m-1][n-1] = 0</li>\r\n</ul>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>The input consists of two lines:</p>\r\n<ul>\r\n    <li>The first line contains two space-separated integers, i.e. the number of rows m and columns n respectively.</li>\r\n    <li>The second line contains m x n integers separated by space, i.e. elements of the matrix.</li>\r\n</ul>\r\n<p>Input will be read from the STDIN by the candidate</p>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>Print the minimum initial strength required by the robot to travel from source to destination.</p>\r\n<p>The output will be matched to the candidate's output printed on the STDOUT</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 3\r\n0 1 -3 1 -5 0\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> You are given the following matrix.</p>\r\n<pre><code class='language-text'>0  1 -3\r\n1 -5  0</code></pre>\r\n<p>Minimum strength to reach destination i.e. mat[1][2] from source i.e. mat[0][0] is 3 via path mat[0][0] -> mat[0][1] -> mat[0][2] -> mat[1][2] such that it has positive strength throughout its journey.</p>\r\n<pre><code class='language-text'>0  1 -3\r\n1 -5  0</code></pre>\r\n\r\n<h3>Sample Input/Output:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 4\r\n0 -2 3 -1 1 -4 0 -2 1 -2 -5 0\r\nOutput:\r\n2</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; number of rows &le; 20000</li>\r\n    <li>1 &le; number of columns &le; 20000</li>\r\n    <li>-10<sup>9</sup> &le; element of the matrix &le; 10<sup>9</sup></li>\r\n</ul>\r\n\r\n<h2>Instructions</h2>\r\n<ul>\r\n    <li>Program should take input from standard input and print output to standard output.</li>\r\n    <li>Your code is judged by an automated system, do not write any additional welcome/greeting messages.</li>\r\n    <li>\"Save and Test\" only checks for basic test cases, more rigorous cases will be used to judge your code while scoring.</li>\r\n    <li>Additional score will be given for writing optimized code both in terms of memory and execution time.</li>\r\n</ul>\r\n\r\n<h2>Now let's start coding</h2>\r\n<p>Language: C++ (Gcc 11.3)</p>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    // Sample code to perform I/O:\r\n    // string name;\r\n    // cin >> name; // Reading input from STDIN\r\n    // cout << name; // Writing output to STDOUT\r\n    // Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail.\r\n    // Write your C++ code here\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Airtel_24sep",
        "company_id": 525
    },
    {
        "id": 1504,
        "title": "Minimum Steps Required",
        "problem_statement": "<h1>Minimum Steps Required</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You visited your friend's home which is located at position 0. Now you want to go back home but with some constraints, you can go either 2 or 3 steps either to the right or to the left. Your task is to find the minimum number of steps required to reach your home back which is located at position N.</p>\r\n\r\n<h3>Input Format:</h3>\r\n<p>The input consists of a single line:</p>\r\n<ul>\r\n    <li>The first line contains an Integer N, the location of your home.</li>\r\n</ul>\r\n<p>The input will be read from the STDIN by the candidate.</p>\r\n\r\n<h3>Output Format:</h3>\r\n<p>Print the minimum number of steps to reach home.</p>\r\n<p>The output will be matched to the candidate's output printed on the STDOUT.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 1\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> One of the ways is to follow the following way: First, go to the right by 3 points then go to the left by 2 points. <code>0 -> 3 -> 1</code></p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> To reach position 3 from 0, you can take one step to the right by 3 points: <code>0 -> 3</code>.</p>\r\n\r\n<h2>Additional Notes</h2>\r\n<p><strong>Instructions:</strong></p>\r\n<ul>\r\n    <li>Program should take input from standard input and print output to standard output.</li>\r\n    <li>Your code is judged by an automated system, do not write any additional welcome/greeting messages.</li>\r\n    <li>\"Save and Test\" only checks for basic test cases, more rigorous cases will be used to judge your code while scoring.</li>\r\n    <li>Additional score will be given for writing optimized code both in terms of memory and execution time.</li>\r\n</ul>\r\n\r\n<p><strong>Starter Code (C++ I/O Example):</strong></p>\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\nusing namespace std;\r\nint main()\r\n{\r\n    /* Sample code to perform I/O\r\n    string name;\r\n    cin >> name; // Reading input from STDIN\r\n    cout << name << endl; // Writing output to STDOUT\r\n    */\r\n    // Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail.\r\n    // Write your C++ code here\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Airtel_24sep",
        "company_id": 525
    },
    {
        "id": 1505,
        "title": "Count Perfect Sums",
        "problem_statement": "<h1>Count Perfect Sums</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a number N. Your task is to calculate the number of perfect sums in the range 1 to N.</p>\r\n<p>A number is called a Perfect Sum if it can be expressed as the sum of a perfect square and a perfect cube. For example, 9 is a perfect sum as it can be expressed as 2² + 1³.</p>\r\n\r\n<h3>Input format:</h3>\r\n<p>The input consists of a single line:</p>\r\n<ul>\r\n    <li>The first and only line consists of a single integer N.</li>\r\n</ul>\r\n<p>The input will be read from the STDIN by the candidate</p>\r\n\r\n<h3>Output format:</h3>\r\n<p>Print the number of Perfect Sums in the range 1 to N.</p>\r\n<p>The output will be matched to the candidate's output printed on the STDOUT</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The two perfect sums are 2 and 5. As 2 can be expressed as the sum of 1² and 1³ whereas 5 can be represented as the sum of 2² and 1³.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 ≤ N ≤ 10⁵</li>\r\n</ul>\r\n\r\n<h2>Instructions</h2>\r\n<ul>\r\n    <li>Program should take input from standard input and print output to standard output.</li>\r\n    <li>Your code is judged by an automated system, do not write any additional welcome/greeting messages.</li>\r\n    <li>\"Save and Test\" only checks for basic test cases, more rigorous cases will be used to judge your code while scoring.</li>\r\n    <li>Additional score will be given for writing optimized code both in terms of memory and execution time.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Airtel_24sep",
        "company_id": 525
    }
]