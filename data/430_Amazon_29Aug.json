[
    {
        "id": 1264,
        "title": "Permutation Sorter",
        "problem_statement": "<h1>Permutation Sorter</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon engineers are testing a new tool, the Permutation Sorter, built to reorder sequences using limited operations.</p>\r\n<p>Given a permutation of integers, the objective is to sort the permutation using only two specific operations:</p>\r\n<ol>\r\n    <li>Reverse the entire permutation.</li>\r\n    <li>Transfer the first element of the permutation to the last position, i.e., change <code>arr[0], arr[1], ..., arr[n-1]</code> to <code>arr[1], arr[2], ..., arr[n-1], arr[0]</code>.</li>\r\n</ol>\r\n<p>Formally, given a permutation <code>arr</code> of size <code>n</code>, determine the minimum number of operations needed to sort the given permutation in increasing order. The permutation provided is guaranteed to be sorted using only these two operations.</p>\r\n<p><strong>Note:</strong> A permutation of length <code>n</code> is a sequence of integers from 1 to <code>n</code> containing each number exactly once.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findMinimumOperations</code> in the editor below.</p>\r\n<p><code>findMinimumOperations</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: A permutation of length <code>n</code></li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>int</code>: minimum number of operations to be performed to sort the given permutation</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 10, arr = [2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The permutation can be sorted by performing the following operations:</p>\r\n<ol>\r\n    <li>Reverse the permutation to get <code>arr = [1, 10, 9, 8, 7, 6, 5, 4, 3, 2]</code>.</li>\r\n    <li>Transfer the first element to the last position to get <code>arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</code>.</li>\r\n    <li>Reverse the permutation to get <code>arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>.</li>\r\n</ol>\r\n<p>It can be shown that the given permutation can only be sorted using a minimum of 3 operations.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, arr = [1, 3, 2]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The following operations can be performed to sort the permutation:</p>\r\n<ol>\r\n    <li>Transfer the first element to the last position to get <code>[3, 2, 1]</code>.</li>\r\n    <li>Reverse the permutation to get <code>[1, 2, 3]</code>.</li>\r\n</ol>\r\n<p>It can be shown that a minimum of 2 operations are required to sort the permutation.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 5, arr = [5, 4, 3, 2, 1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Reverse the permutation to get <code>[1, 2, 3, 4, 5]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= n &lt;= 5 * 10^5</code></li>\r\n    <li><code>1 &lt;= arr[i] &lt;= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_29Aug",
        "company_id": 430
    },
    {
        "id": 1265,
        "title": "Missing Digits Reconstruction",
        "problem_statement": "<h1>Missing Digits Reconstruction</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The software developers at Amazon are working on detecting configuration anomalies in a server. They are provided with a set of configurations represented by config, a string of concatenated decimal digits (0-9). However, some digits in these configurations have been inadvertently erased.</p>\r\n<p>These configurations were initially generated using a specific procedure involving two integer parameters, x and y.</p>\r\n<p>The procedure begins with the two numbers, x and y, and initializes a current value (cur) to 0. The following operation can be performed any number of times:</p>\r\n<ul>\r\n    <li>In each step, either x or y is added to cur.</li>\r\n    <li>Compute the unit digit of cur (cur % 10) after each addition.</li>\r\n    <li>Record this digit as part of the configuration sequence.</li>\r\n</ul>\r\n<p>Unfortunately, some of these recorded digits are missing due to data corruption, complicating the reconstruction of the original sequence. Additionally, it is known that the first character of each given configuration string corresponds to either x or y.</p>\r\n<p>The task is to identify the final configuration with the minimum possible decimal value from which the given configuration <code>config</code> can be constructed by removing specific digits. If multiple valid configurations can be formed by reconstructing the missing digits, return the one with the minimum decimal value among all possible valid configurations.</p>\r\n<p>Conversely, if no valid configuration can be restored using the described procedure, then in that case return the string '-1'.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>Each configuration is represented as a string of concatenated decimal digits (0-9) that forms a decimal number. The value of a configuration refers to the decimal number it represents.</li>\r\n    <li>The given configuration, <code>config</code>, represents the server configuration after data corruption, i.e., configuration after some of its digits have been erased from the original configuration.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= |config| &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= x, y &lt;= 9</code></li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>missingDigits</code> in the editor below.</p>\r\n<p><code>missingDigits</code> takes the following parameters:</p>\r\n<ul>\r\n    <li><code>string config</code>: a string that denotes the server configuration after data corruption.</li>\r\n    <li><code>int x</code>: an integer between 1 to 9 (inclusive) representing the first parameter that determines the server configuration.</li>\r\n    <li><code>int y</code>: an integer between 1 to 9 (inclusive) representing the second parameter that determines the server configuration.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>str</code>: the minimum possible value of the server configurations, if it is not possible to generate the given altered configuration then return '-1'.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: config = \"247\", x = 2, y = 3\r\nOutput: 247</code></pre>\r\n<p><strong>Explanation:</strong> The developers start the procedure with <code>cur = 0</code>.</p>\r\n<p>Consider two possible sequences of operations:</p>\r\n<ol>\r\n    <li><strong>Sequence 1 (x, x, y):</strong>\r\n        <ul>\r\n            <li>Add <code>x</code> (2) to <code>cur</code>. <code>cur = 2</code>. Unit digit is <code>2</code>. Generated string: <code>2</code>.</li>\r\n            <li>Add <code>x</code> (2) to <code>cur</code>. <code>cur = 4</code>. Unit digit is <code>4</code>. Generated string: <code>24</code>.</li>\r\n            <li>Add <code>y</code> (3) to <code>cur</code>. <code>cur = 7</code>. Unit digit is <code>7</code>. Generated string: <code>247</code>.</li>\r\n        </ul>\r\n        The <code>config</code> string \"247\" is a subsequence of \"247\".\r\n    </li>\r\n    <li><strong>Sequence 2 (x, y, x):</strong>\r\n        <ul>\r\n            <li>Add <code>x</code> (2) to <code>cur</code>. <code>cur = 2</code>. Unit digit is <code>2</code>. Generated string: <code>2</code>.</li>\r\n            <li>Add <code>y</code> (3) to <code>cur</code>. <code>cur = 5</code>. Unit digit is <code>5</code>. Generated string: <code>25</code>.</li>\r\n            <li>Add <code>x</code> (2) to <code>cur</code>. <code>cur = 7</code>. Unit digit is <code>7</code>. Generated string: <code>257</code>.</li>\r\n        </ul>\r\n        The <code>config</code> string \"247\" is NOT a subsequence of \"257\" because '4' is not present.\r\n    </li>\r\n</ol>\r\n<p>Among the valid generated configurations (only \"247\" from the examples shown), \"247\" has the minimum decimal value. Thus, the answer is \"247\".</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: config = \"324\", x = 2, y = 3\r\nOutput: 36924</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>config = \"324\"</code> with <code>x = 2</code> and <code>y = 3</code>.</p>\r\n<p>The operations performed start with <code>cur = 0</code>. Let <code>final</code> be the final concatenation of unit digits. Operations can be performed in the following manner:</p>\r\n<ul>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 3</code>, unit digit of <code>cur = 3</code>. Therefore <code>final = 3</code>.</li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 6</code>, unit digit of <code>cur = 6</code>. Therefore <code>final = 36</code>.</li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 9</code>, unit digit of <code>cur = 9</code>. Therefore <code>final = 369</code>.</li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 12</code>, unit digit of <code>cur = 2</code>. Therefore <code>final = 3692</code>.</li>\r\n    <li>Add <code>x</code> to <code>cur</code>, <code>cur = 14</code>, unit digit of <code>cur = 4</code>. Therefore <code>final = 36924</code>.</li>\r\n</ul>\r\n<p><code>final = 36924</code> is a valid configuration (<code>\"324\"</code> is a subsequence of <code>\"36924\"</code>). It can also be proved that <code>final</code> is the minimum decimal value across all possible configurations. Thus, the missing configuration is '36924'.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: config = \"521\", x = 5, y = 5\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> Given <code>config = \"521\"</code> with <code>x = 5</code> and <code>y = 5</code>.</p>\r\n<p>The operations performed start with <code>cur = 0</code>. Let <code>final</code> be the final concatenation of unit digits. Operations can be performed in the following manner:</p>\r\n<ul>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 5</code>, unit digit of <code>cur = 5</code>. Therefore <code>final = 5</code>.</li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 10</code>, unit digit of <code>cur = 0</code>. Therefore <code>final = 10</code>.</li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 15</code>, unit digit of <code>cur = 5</code>. Therefore <code>final = 105</code>.</li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 20</code>, unit digit of <code>cur = 0</code>. Therefore <code>final = 1050</code>.</li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 25</code>, unit digit of <code>cur = 5</code>. Therefore <code>final = 10505</code>.</li>\r\n</ul>\r\n<p>Now, it can be observed that with <code>x = 5</code> and <code>y = 5</code> it is only possible to achieve unit digits 5 and 0. Thus, it is impossible to achieve <code>config = \"521\"</code> (which contains '2' and '1'). Hence, return '-1'.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_29Aug",
        "company_id": 430
    },
    {
        "id": 1270,
        "title": "Get Subarray Median",
        "problem_statement": "<h1>Get Subarray Median</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Developers at Amazon are working on an application to test the reliability of servers. As a simulation, <code>n</code> requests are sent to the servers, and the size of the i<sup>th</sup> request is <code>request[i]</code> units.</p>\r\n<p>Given an array, <code>requests</code>, and an integer, <code>mid</code>, count the number of subarrays in <code>requests</code> with a median of <code>mid</code>.</p>\r\n<p><strong>Note:</strong> The median of an array is the middle value in that sorted array. If the size of the array is even, there are 2 middle values. In this case, the median is the element at the smaller index of the two.</p>\r\n<p>A subarray of an array is defined as any contiguous segment of the array.</p>\r\n<p>Complete the function <code>getSubarrayMedian</code> in the editor below.</p>\r\n<p><code>getSubarrayMedian</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int mid</code>: the target median</li>\r\n    <li><code>int requests[n]</code>: the sizes of the requests</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long int</code>: the number of subarrays of requests with a median of <code>mid</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> <code>requests = [1, 2, 3]</code>, <code>mid = 2</code></p>\r\n<p>All possible subarrays are: <code>[1]</code>, <code>[2]</code>, <code>[3]</code>, <code>[1,2]</code>, <code>[2,3]</code>, <code>[1,2,3]</code>.</p>\r\n<p>Let's list their medians:</p>\r\n<pre><code class='language-text'>Subarray   | Median\r\n-----------|-------\r\n[1]        | 1\r\n[2]        | 2\r\n[3]        | 3\r\n[1, 2]     | 1\r\n[2, 3]     | 2\r\n[1, 2, 3]  | 2</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 subarrays (<code>[2]</code>, <code>[2,3]</code>, <code>[1,2,3]</code>) that have a median of 2. Hence, the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: mid = 3, requests = [3, 1, 5]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The 2 subarrays that have a median of 3 are <code>[3]</code> and <code>[3, 1, 5]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: mid = 3, requests = [1, 4]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Let's list all subarrays and their medians:</p>\r\n<pre><code class='language-text'>Subarray   | Median\r\n-----------|-------\r\n[1]        | 1\r\n[4]        | 4\r\n[1, 4]     | 1</code></pre>\r\n<p>No subarrays have a median of 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= requests[i] <= 10<sup>9</sup></code></li>\r\n    <li><code>1 <= mid <= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_29Aug",
        "company_id": 430
    },
    {
        "id": 1271,
        "title": "Minimum Cost to Convert Products",
        "problem_statement": "<h1>Minimum Cost to Convert Products</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The manager of Amazon's fulfillment center is responsible for maintaining the inventory of a product in two variants, A and B, represented as 0 and 1, respectively. There are n products, where the i<sup>th</sup> product is represented by the array <code>product[i]</code> (if <code>product[i]</code> equals 1, the product is of type B. Otherwise, it is of type A). A positive integer <code>k</code> is also given, which specifies the length of the subarray that can be selected to convert a single element within that subarray to product A.</p>\r\n<p>Since variant B is no longer in demand, Amazon wants to convert all type B products to type A. The task is to convert all products in the array to variant A at the minimum cost, using the following operation as many times as needed:</p>\r\n<ul>\r\n    <li>Choose two indices, <code>l</code>, and <code>r</code> (<code>0 &le; l &le; r &lt; n</code>), such that <code>r - l + 1 = k</code>.</li>\r\n    <li>The cost of this operation is <code>product[l] + product[l+1] + ... + product[r-1] + product[r]</code>.</li>\r\n    <li>Choose an index <code>p</code> such that <code>l &le; p &le; r</code> and set <code>product[p]</code> to variant A (i.e., set it to 0).</li>\r\n</ul>\r\n<p>Given array <code>products</code> of length <code>n</code>, find the minimum cost to convert all the products in the array to variant A.</p>\r\n<p>Complete the function <code>getMinimumCost</code> in the editor below.</p>\r\n<p>The function <code>getMinimumCost</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int product[n]</code>: the products</li>\r\n    <li><code>int k</code>: the length of the subarray that can be selected</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>long int</code>: the minimum cost to turn all the products in the array to variant A.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nproduct = [1, 0, 1, 0, 1]\r\nk = 3\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The sequence of operations can be defined as follows:</p>\r\n<ul>\r\n    <li>Choose the subarray <code>[l, r] = [1, 3]</code> and set <code>product[2] = 0</code> with cost = <code>product[1] + product[2] + product[3] = 0 + 1 + 0 = 1</code>. Thus, the array becomes: <code>product = [1, 0, 0, 0, 1]</code>.</li>\r\n    <li>Choose the subarray <code>[l, r] = [0, 2]</code> and set <code>product[0] = 0</code> with cost = <code>product[0] + product[1] + product[2] = 1 + 0 + 0 = 1</code>. Thus, the array becomes: <code>product = [0, 0, 0, 0, 1]</code>.</li>\r\n    <li>Choose the subarray <code>[l, r] = [2, 4]</code> and set <code>product[4] = 0</code> with cost = <code>product[2] + product[3] + product[4] = 0 + 0 + 1 = 1</code>. Thus, the array becomes: <code>product = [0, 0, 0, 0, 0]</code>.</li>\r\n</ul>\r\n<p>The total cost is 1 + 1 + 1 = 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nproduct = [1, 1, 0, 1]\r\nk = 3\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The sequence of operations can be defined as follows:</p>\r\n<ul>\r\n    <li>Choose the subarray <code>[l, r] = [0, 2]</code> and set <code>product[1] = 0</code> with cost = <code>product[0] + product[1] + product[2] = 1 + 1 + 0 = 2</code>. Thus, the array becomes: <code>product = [1, 0, 0, 1]</code>.</li>\r\n    <li>Choose the subarray <code>[l, r] = [1, 3]</code> and set <code>product[3] = 0</code> with cost = <code>product[1] + product[2] + product[3] = 0 + 0 + 1 = 1</code>. Thus, the array becomes: <code>product = [1, 0, 0, 0]</code>.</li>\r\n    <li>Choose the subarray <code>[l, r] = [0, 2]</code> and set <code>product[0] = 0</code> with cost = <code>product[0] + product[1] + product[2] = 1 + 0 + 0 = 1</code>. Thus, the array becomes: <code>product = [0, 0, 0, 0]</code>.</li>\r\n</ul>\r\n<p>The total cost is 2 + 1 + 1 = 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; k &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>product[i] = {0, 1}</code> for all <code>0 &le; i &lt; n</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>long long getMinimumCost(vector<int> product, int k) {\r\n    // Function body to be implemented\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_29Aug",
        "company_id": 430
    }
]