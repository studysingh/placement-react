[
    {
        "id": 1534,
        "title": "Minimum Moves to Reach Last Stall",
        "problem_statement": "<h1>Minimum Moves to Reach Last Stall</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At the village fair, all the children have been asked to participate in a game. A certain number of stalls are arranged in a straight line. All the children start at the first stall, and the child who reaches the last stall earliest wins. At each stall, a token with an integer displaying which stall child can skip some stalls in between. If a token of 'X' is displayed at a stall, the child can skip go to any of the next 'X' stalls. At every stall the child visits, there is a wait time of five minutes, so the fewer stalls one visits, the more likely they are to win.</p>\r\n<p>Jaya, who was at the fair, was also to participate. Being very competitive, she wants to win desperately. Can you write a program to help her?</p>\r\n<p>The token numbers of the N stalls are given as an array A = [A<sub>0</sub>, A<sub>1</sub>, ..., A<sub>N-1</sub>]. Write a program to determine the minimum number of moves Jaya needs to reach the last stall from the first.</p>\r\n<p>Read input from STDIN and print the output to STDOUT. Do not print extraneous debug statements in the program, as these contribute to the standard output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= N <= 100</code></li>\r\n    <li><code>1 <= A<sub>i</sub> <= 100</code> for all i ranging from 1 to N.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>A single line of input consists of the array A, which has N number of space-separated positive integers denoting the tokens (so, Jaya has to move only in the forward direction).</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single line of output should print the minimum number of moves that Jaya needs to make, to reach the last stall from the first.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 4 4 2 1 4 1 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The token array, A = [4, 4, 2, 1, 4, 1, 2]. Jaya is at the 1st stall (index 0), and its token number is 4. So, Jaya can visit any of the next 4 stalls i.e. stall numbers 2, 3, 4, or 5 (indices 1, 2, 3, or 4), which have token numbers 4, 2, 1 and 4, respectively. As her first move, Jaya chooses stall 5 (index 4) whose token number is again 4. From stall 5 (index 4), she can reach stalls 6, 7, 8 or 9 (indices 5, 6, 7, or 8). Since the last stall is stall 7 (index 6), she can move from stall 5 (index 4) to stall 7 (index 6). Since she needs 2 moves to reach the last stall from the first, 2 is printed as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 2 4 1 3 2 1 1\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The token array, A = [2, 4, 1, 3, 2, 1, 1]. Jaya is at the 1st stall (index 0), and the token number is 2. So, as her first move, Jaya can visit either stall 2 (index 1) or stall 3 (index 2). She chooses stall 2 (index 1) whose token is 4. As her second move, she moves to stall 6 (index 5) which has token of 1. As her third move she visits the last stall (index 6). Hence output is 3. Alternatively, Jaya in her second move can visit stall 4 (index 3), with token 3. In her third move, she can visit the last stall (index 6). Here also output is 3. So there are two such ways, but minimum 3 moves are needed. Therefore 3 is printed as the output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ge vernova_27sep",
        "company_id": 537
    },
    {
        "id": 1535,
        "title": "Calculate Nth Term in a Given Series",
        "problem_statement": "<h1>Calculate Nth Term in a Given Series</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Consider the following series, which has a relation between X^n number and (X+1)^n number where X is a positive integer. The series starts with the terms: 90, 240, 450, 720, ...</p>\r\n<p>If N indicates a position in the series, write a program that accepts N values as input and prints the Nth position value in the series as an output.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output, and test cases will fail.</p>\r\n<p>The series can be described by the formula `30n^2 + 60n`, where `n` is the 1-based position in the series.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input will contain one integer N.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should consist of the Nth value in the sequence.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= N <= 10,000`</li>\r\n    <li>Position starts from 1</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5\r\nOutput: 1050</code></pre>\r\n<p><strong>Explanation:</strong> Given N = 5, the 5th position value in the given series is 1050, which is calculated as `30*(5^2) + 60*5 = 30*25 + 300 = 750 + 300 = 1050`. This value is printed as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 7\r\nOutput: 1890</code></pre>\r\n<p><strong>Explanation:</strong> Given N = 7, the 7th position value in the given series is 1890, which is calculated as `30*(7^2) + 60*7 = 30*49 + 420 = 1470 + 420 = 1890`. This value is printed as the output.</p>\r\n\r\n<h2>Provided Code Template (C++)</h2>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\n#include &lt;vector&gt;\r\n\r\nusing namespace std;\r\n\r\nlong PrintResults(int N) { // N is the input number\r\n    // long position = 0;\r\n    // WRITE YOUR CODE HERE\r\n    // return position;\r\n    return 0;\r\n}\r\n\r\nint main() {\r\n    int N;\r\n    cin >> N;\r\n    cout << PrintResults(N) << endl;\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ge vernova_27sep",
        "company_id": 537
    }
]