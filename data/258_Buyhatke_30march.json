[
    {
        "id": 839,
        "title": "Game On String",
        "problem_statement": "<h1>Game On String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two strings S and T check how many minimum characters in S we should change such that T occurs as a substring in S.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains a string S.</li>\r\n    <li>The next line contains a string T.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print the minimum number of characters in S that need to be changed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ncodeforces\r\nleetcode\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> We have to change a minimum of 6 characters in string S to obtain T as a substring of the given string. One possible solution is to modify string S as cleetcode. We can see it contains leetcode as a substring.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= |S|,|T| &lt;= 1000</li>\r\n    <li>The length of T is at most that of S</li>\r\n    <li>S and T consist of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Buyhatke_30march",
        "company_id": 258
    },
    {
        "id": 840,
        "title": "String Operation",
        "problem_statement": "<h1>String Operation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given n strings in an array <code>start</code> and m strings in an array <code>fin</code>. You need to check whether there is a unique combination between any string from the <code>start</code> array and a string from <code>fin</code>. A unique combination is when both strings have the same length and differ in exactly one position. The string contains a combination of 'a', 'b', and 'c'.</p>\r\n<p>Return an array of length m, which returns 'YES' or 'NO' for every string in <code>fin</code>.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains the integer n.</p>\r\n<p>Next, n lines contain n strings of array <code>start</code>.</p>\r\n<p>The next line contains integer m.</p>\r\n<p>Next, m lines contain m strings of array <code>fin</code>.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return an array containing 'YES' or 'NO' as per the problem statement.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\naaaaa\r\nacacac\r\n3\r\naabaa\r\ncccaccc\r\ncaabc\r\nOutput:\r\nYES\r\nNO\r\nNO</code></pre>\r\n<p><strong>Explanation:</strong> The string 'aabaa' is a unique combination of 'aaaaa'. Otherwise, none of the others make a unique combination with strings from the <code>start</code> array.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 5*10^3</code></li>\r\n    <li><code>1 &lt;= m &lt;= 5*10^3</code></li>\r\n    <li><code>1 &lt;= length(string) &lt;= 10^3</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Buyhatke_30march",
        "company_id": 258
    },
    {
        "id": 841,
        "title": "An Array of Numbers",
        "problem_statement": "<h1>An Array of Numbers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is an array of numbers A of length n. Return an array whose i-th element contains the smallest number other than itself that occurs as least as many times as the i-th number in array A. If there is no number that occurs as many times as the i-th element then let that number in the returned array be -1.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n    <li>The first line contains n, the length of array A.</li>\r\n    <li>The next n line contain the elements of array A.</li>\r\n</ul>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<ul>\r\n    <li>Return an array as asked in the problem</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= A_i &lt;= 100</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n10\r\n3\r\n3\r\n3\r\n2\r\n1\r\n1\r\n2\r\n3\r\n3\r\n4\r\nOutput:\r\n-1\r\n-1\r\n-1\r\n1\r\n2\r\n2\r\n1\r\n-1\r\n-1\r\n1\r\n1</code></pre>\r\n<p><strong>Explanation:</strong> For the first, second, seventh, and eighth elements, the number in array A is 3 which occurs 4 times, and there is no number that occurs at least four times other than 3 itself. So the corresponding element in the returned array is -1.</p>\r\n<p>For the third, and sixth elements, the number in array A is 2 which occurs 2 times, and 1 is the smallest number that occurs at least two times other than 2 itself. So the corresponding element in the returned array is 1.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Buyhatke_30march",
        "company_id": 258
    },
    {
        "id": 842,
        "title": "Chor Police",
        "problem_statement": "<h1>Chor Police</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The police is standing on the root of the tree, vertex 1. They are trying to catch a thief who is on the vertex x. The thief moves first and then the police. They move in turns and on every turn, they can either stand on the current vertex or move to a neighboring vertex. Police and thief know each other's position after every move.</p>\r\n<p>Police will always catch the thief. Police are trying to minimize the time and the thief is trying to maximize it.</p>\r\n<p>Find how many moves it will take to catch the thief</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>First line contains n, the number of vertices.</li>\r\n    <li>Second line contains x, the position of thief.</li>\r\n    <li>Third line contains n-1 integer.</li>\r\n    <li>Fourth line contains integer 2.</li>\r\n    <li>Next n-1 lines contains two integer numbers a and b</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &lt;= n &lt;= 10<sup>4</sup></li>\r\n    <li>2 &lt;= x &lt;= n</li>\r\n    <li>1 &lt;= a,b &lt;= n</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return the number of moves to catch the thief.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n3\r\n3\r\n2\r\n1 2\r\n2 3\r\n2 4\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Based on the edges, Thief will stay away from police for longest by standing at vertex 3 all the time.</p>\r\n<p>Thief: Stays at vertex 3.<br>Police: Go to vertex 2.<br>Thief: Stays at vertex 3.<br>Police: Go to vertex 3.<br>Total 4 moves.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Buyhatke_30march",
        "company_id": 258
    },
    {
        "id": 843,
        "title": "Tan and Test Cases",
        "problem_statement": "<h1>Tan and Test Cases</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Tan is creating test cases for an array-based problem. He has to generate an integer array, successfully created those arrays and send them to his reviewer Taru for acceptance. We all know the nature of Taru, she always changes test cases. This time she will pick a range [l, r] (both inclusive) and add a value k in those array elements.</p>\r\n<p>After doing this, the 2nd reviewer Shubhanshu will now also change some value in the array formed. First he will reverse the array formed, and then he will pick a range [l, r] (both inclusive) and subtract k from all the values in that range.</p>\r\n<p>Since we are now ready with the test cases, here comes the question. You have to find the length of all non-decreasing subarray. If two subarray has the same length we will merge it that subarray in sorted order and again repeat the above process until we cannot merge any two subarrays.</p>\r\n<p>You have to print the least number of subarray we can have and follow by the size of all those subarrays sorted in increasing order.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>First-line will contain an integer n, denoting the size of the array.</li>\r\n    <li>Next, the n line will contain an integer each.</li>\r\n    <li>Next, we have an integer Q, denoting the number of queries Taru has.</li>\r\n    <li>Next, we have an integer 3 as input denoting the size of each query.</li>\r\n    <li>Next, the Q line will have three integers (l, r, k) each separated by space.</li>\r\n    <li>Next, we have an integer P, denoting the number of queries Shubhanshu has.</li>\r\n    <li>Next, we have an integer 3 as input denoting the size of each query.</li>\r\n    <li>Next, the P line will have three integers (l, r, k) each separated by space.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 10<sup>5</sup></li>\r\n    <li>-10<sup>4</sup> &le; array elements &le; 10<sup>4</sup></li>\r\n    <li>1 &le; P, Q &le; 10<sup>5</sup></li>\r\n    <li>1 &le; l &le; r &le; N</li>\r\n    <li>-10<sup>4</sup> &le; k &le; 10<sup>4</sup></li>\r\n    <li>Array elements are indexed from 1.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>First-line will contain an integer X, denoting the number of subarrays left with us.</li>\r\n    <li>Next X line each will contain an integer, denoting the size of the subarray.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1\r\n2\r\n3\r\n4\r\n5\r\n1\r\n3\r\n4\r\n2\r\n5\r\n-1\r\n2\r\n3\r\n1\r\n2\r\n3\r\n2\r\n5\r\n-2\r\nOutput:\r\n2\r\n2\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> After the first query of the Taru array will be [5, 6, 7, 4, 5]<br>And similarly after Shubhanshu's operation will be = [1, 2, 8, 7, 7].<br>So there are two subarrays possible in non decreasing order = [[1, 2], [8]].<br>Since the length of both subarrays is not the same, therefore we can't merge them.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>Execution time limit: 4 seconds</p>\r\n\r\n<pre><code class='language-javascript'>void testCaseGenerator(vector<int> originalArray, vector<vector<int>> Q, vector<vector<int>> P) {\r\n    // Write your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Buyhatke_30march",
        "company_id": 258
    },
    {
        "id": 844,
        "title": "Sam And Friends",
        "problem_statement": "<h1>Sam And Friends</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Sam likes making sweets. He can make <code>n</code> different types of sweets. A sweet is defined by two things, first <code>A<sub>i</sub></code> which denotes the time it takes to make the <code>i</code>-th sweet, and <code>B<sub>i</sub></code> the sweetness level of the <code>i</code>-th sweet. But Sam is also a busy person, and he has only <code>m</code> days with him and on a given day he can devote at maximum <code>C<sub>j</sub></code> time on the <code>j</code>-th day. Help him decide how many sweets he can make while maximizing the total sweetness of all the sweets taken together and the number of sweets made. <strong>Note:</strong> He can make the <code>i</code>-th type of sweet only once and at most only one sweet per day.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains <code>n</code> the different types of sweet</li>\r\n    <li>The next <code>n</code> lines contain the elements of array <code>A</code></li>\r\n    <li>The next line again contains <code>n</code>.</li>\r\n    <li>After it, the next <code>n</code> lines contain the elements of array <code>B</code></li>\r\n    <li>The next line contains <code>m</code>, the number of days he has with him to prepare sweets.</li>\r\n    <li>The next <code>m</code> lines contain the elements of array <code>C</code></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n, m, A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub> &lt;= 10<sup>5</sup></code></li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p><strong>Return:</strong> an array containing two elements where its first element contains the maximum number of sweets he should make and the second element contains the maximum number of the sweetness of all the sweets taken together that he should make.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n10\r\n2\r\n5\r\n3\r\n3\r\n40\r\n90\r\n20\r\n3\r\n3\r\n5\r\n4\r\nOutput:\r\n2\r\n110</code></pre>\r\n<p><strong>Explanation:</strong> He can choose to make the second type of sweet either on day 1 or day 3 and the third type of sweet on day 2. Thus he makes 2 sweets and the total sweetness of them is 110 which is the maximum possible here.</p>\r\n\r\n<h2>Follow-up</h2>\r\n<p>Execution time limit: 4 seconds</p>\r\n<p>The function signature provided is:</p>\r\n<pre><code class='language-javascript'>vector&lt;long&gt; maximisingSweetness(vector&lt;int&gt; A, vector&lt;int&gt; B, vector&lt;int&gt; C)</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Buyhatke_30march",
        "company_id": 258
    }
]