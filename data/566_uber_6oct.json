[
    {
        "id": 1615,
        "title": "Minimum Hierarchy Height",
        "problem_statement": "<h1>Minimum Hierarchy Height</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In Uber's system, driver assignments are organized in a hierarchical tree. The root node (Driver 1) represents the central dispatcher, and each driver node may supervise other drivers.</p>\r\n<p>The height of this tree is defined as the maximum number of links between the dispatcher and any driver.</p>\r\n<p>Uber allows at most <code>max_reassignments</code> operations to restructure the hierarchy. In a single reassignment:</p>\r\n<ul>\r\n    <li>Select a driver <code>u</code> who reports to a manager <code>v</code>.</li>\r\n    <li>Remove the reporting link (<code>u</code>, <code>v</code>).</li>\r\n    <li>Reassign <code>u</code> (along with their entire team) to report directly to the dispatcher (Driver 1).</li>\r\n</ul>\r\n<p>The task is to determine the minimum possible height of the driver hierarchy after performing at most <code>max_reassignments</code> operations.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinimumHierarchyHeight</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int hierarchy_nodes</code>: the total number of drivers in the hierarchy</li>\r\n    <li><code>int hierarchy_from</code>: the starting driver of each reporting link</li>\r\n    <li><code>int hierarchy_to</code>: the ending driver of each reporting link</li>\r\n    <li><code>int max_reassignments</code>: the maximum number of driver reassignments allowed</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the minimum possible height of the hierarchy after performing at most <code>max_reassignments</code> operations</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nhierarchy_nodes = 4\r\nhierarchy_from = [3, 1, 2]\r\nhierarchy_to = [2, 3, 4]\r\nmax_reassignments = 1</code></pre>\r\n<p><strong>Explanation:</strong> The initial hierarchy forms a chain: 1 -> 3 -> 2 -> 4. The height of this tree is 3. One possible operation can be: Remove the link (2, 4) and add a link (1, 4). This results in a hierarchy where 1 -> 3 -> 2 and 1 -> 4. The maximum path from the root (1) is 1 -> 3 -> 2, which has 2 links. So, the height of the tree is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nhierarchy_nodes = 4, hierarchy_edges = 3\r\nhierarchy_from = [1, 2, 3]\r\nhierarchy_to = [2, 3, 4]\r\nmax_reassignments = 0\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The original structure is a straight chain: 1 -> 2 -> 3 -> 4. Since no reassignments are allowed, the minimum possible height remains = 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nhierarchy_nodes = 6, hierarchy_edges = 5\r\nhierarchy_from = [1, 2, 2, 3, 4]\r\nhierarchy_to = [2, 3, 4, 5, 6]\r\nmax_reassignments = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> One possible way of doing operations can be: Remove the link (2, 4) and add a link (1, 4). Remove the link (3, 2) and add a link (1, 2). This results in a hierarchy with height 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; hierarchy_nodes &le; 200,000</code></li>\r\n    <li><code>1 &le; hierarchy_from[i], hierarchy_to[i] &le; hierarchy_nodes</code></li>\r\n    <li><code>|hierarchy_from| = |hierarchy_to| = hierarchy_nodes - 1</code></li>\r\n    <li><code>0 &le; max_reassignments &le; hierarchy_nodes - 1</code></li>\r\n</ul>\r\n\r\n<h2>Code Snippet</h2>\r\n<pre><code class='language-javascript'>int getMinimumHierarchyHeight(int hierarchy_nodes, vector&lt;int&gt; hierarchy_from, vector&lt;int&gt; hierarchy_to, int max_reassignments)</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_6oct",
        "company_id": 566
    },
    {
        "id": 1616,
        "title": "Count Profitable Segments",
        "problem_statement": "<h1>Count Profitable Segments</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In Uber's trip analysis system, a profitable segment is defined as a continuous stretch of rides containing a specified number of premium rides. Each ride in the list is represented by an integer value:</p>\r\n<ul>\r\n    <li>If the value is odd, the ride is classified as premium.</li>\r\n    <li>If the value is even, the ride is classified as regular.</li>\r\n</ul>\r\n<p>Given a sequence of rides and a target number of premium rides, determine how many distinct profitable segments can be formed.</p>\r\n<p>Distinct segments are those defined by unique starting and ending positions in the ride sequence, even if the rides inside overlap.</p>\r\n\r\n<p>Complete the function <code>countProfitableSegments</code> with the following parameters:</p>\r\n<ul>\r\n    <li><code>int ridelist[n]</code>: an array representing rides taken</li>\r\n    <li><code>int targetPremiums</code>: the exact number of premium rides required for a segment to be profitable</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the total number of profitable segments</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: ridelist = [7, 10, 3, 6, 5], targetPremiums = 2\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Profitable segments include:</p>\r\n<ul>\r\n    <li><code>[7, 10, 3]</code> -> premium rides are 7 and 3</li>\r\n    <li><code>[7, 10, 3, 6]</code> -> premium rides are 7 and 3</li>\r\n    <li><code>[10, 3, 6, 5]</code> -> premium rides are 3 and 5</li>\r\n    <li><code>[3, 6, 5]</code> -> premium rides are 3 and 5</li>\r\n</ul>\r\n<p>Thus, the output is 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: ridelist = [8, 11, 14, 7, 4], targetPremiums = 1\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> There are eight distinct profitable segments with exactly 1 premium ride:</p>\r\n<ul>\r\n    <li><code>ridelist[1..1] = [11]</code></li>\r\n    <li><code>ridelist[3..3] = [7]</code></li>\r\n    <li><code>ridelist[0..1] = [8, 11]</code></li>\r\n    <li><code>ridelist[1..2] = [11, 14]</code></li>\r\n    <li><code>ridelist[2..3] = [14, 7]</code></li>\r\n    <li><code>ridelist[3..4] = [7, 4]</code></li>\r\n    <li><code>ridelist[0..2] = [8, 11, 14]</code></li>\r\n    <li><code>ridelist[1..4] = [11, 14, 7, 4]</code></li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: ridelist = [8, 11, 14, 7, 4], targetPremiums = 2\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> There are four distinct profitable segments with exactly 2 premium rides:</p>\r\n<ul>\r\n    <li><code>ridelist[1..3] = [11, 14, 7]</code></li>\r\n    <li><code>ridelist[0..3] = [8, 11, 14, 7]</code></li>\r\n    <li><code>ridelist[1..4] = [11, 14, 7, 4]</code></li>\r\n    <li><code>ridelist[0..4] = [8, 11, 14, 7, 4]</code></li>\r\n</ul>\r\n<p>Thus, the total count is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 &times; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; ridelist[i] &le; 10<sup>9</sup></code></li>\r\n    <li>All rides have distinct values</li>\r\n    <li><code>0 &le; targetPremiums &le; 2 &times; 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_6oct",
        "company_id": 566
    },
    {
        "id": 1617,
        "title": "Maximize Ride Credits",
        "problem_statement": "<h1>Maximize Ride Credits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber provides promotional ride credits to passengers. Each credit package contains a certain number of ride kilometers and has a fixed cost. A passenger has a limited budget in dollars and wants to maximize the total kilometers they can cover using these packages. Only complete packages can be purchased, and no partial packages are allowed. Determine the maximum number of ride kilometers a passenger can buy without exceeding their budget.</p>\r\n\r\n<p>Complete the function <code>maximizeRideCredits</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><strong>budget:</strong> <code>int</code> - the maximum amount of money available to spend (in dollars).</li>\r\n    <li><strong>packageKilometers:</strong> <code>List[int]</code> - the number of kilometers included in each package from different offers.</li>\r\n    <li><strong>packageCosts:</strong> <code>List[int]</code> - the cost of each package, aligned with <code>packageKilometers</code> by index.</li>\r\n</ul>\r\n<p><strong>Return:</strong> <code>int</code> - the maximum total kilometers that can be purchased within the given budget.</p>\r\n\r\n<pre><code class='language-c'>int maximizeRideCredits(int budget, int packageKilometers_count, int* packageKilometers, int packageCosts_count, int* packageCosts) {\r\n    // Complete the 'maximizeRideCredits' function below.\r\n    // ...\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: budget = 30, packageKilometers = [10, 5], packageCosts = [12, 5]\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong> A passenger can buy six packages of 5 km (6 * 5 = 30 dollars -> 30 km). Thus, the maximum kilometers achievable is 30.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nbudget = 50\r\npackageKilometers = [15, 4]\r\npackageCosts = [18, 5]\r\nOutput: 20</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nbudget = 4\r\npackageKilometers = [10]\r\npackageCosts = [2]\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> Two ride credit packages of 10 km can be purchased for 2 dollars each -> total cost 2 * 2 = 4 dollars, exactly matching the budget. Total kilometers = 2 * 10 = 20 km.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= budget &lt;= 10^4</code></li>\r\n    <li><code>1 &lt;= n &lt;= 10^4</code>, where <code>n = len(packageKilometers) = len(packageCosts)</code></li>\r\n    <li><code>1 &lt;= packageKilometers[i] &lt;= 20</code></li>\r\n    <li><code>1 &lt;= packageCosts[i] &lt;= 200</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_6oct",
        "company_id": 566
    },
    {
        "id": 1618,
        "title": "Select Best Driver Block",
        "problem_statement": "<h1>Select Best Driver Block</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An operations team must select a contiguous block of drivers to cover an upcoming surge window. Each driver has a remaining available drive time (in minutes) for the shift. When assigning a contiguous block of drivers of fixed size, the block's effective availability is constrained by the least-available driver inside that block (the block bottleneck). The team will evaluate every contiguous block of the given size and then choose the block with the highest effective availability so that the surge window is served reliably. Given an array of integers representing each driver's remaining available minutes in line on a route, and an integer <code>groupSize</code> representing the number of adjacent drivers to select, determine the maximum effective availability (i.e., the maximum among minima of all contiguous blocks of size <code>groupSize</code>).</p>\r\n\r\n<p>Complete the function <code>selectBestDriverBlock</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><strong><code>groupSize</code></strong>: <code>int</code> — required number of adjacent drivers to form a block.</li>\r\n    <li><strong><code>availability_count</code></strong>: <code>int</code> — the number of drivers (length of the <code>availability</code> list).</li>\r\n    <li><strong><code>availability</code></strong>: <code>int*</code> — list of non-negative integers where <code>availability[i]</code> is the remaining available minutes for the <code>i</code>-th driver along the route.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code> — the maximum effective availability (minutes) among all contiguous blocks of size <code>groupSize</code>. If <code>groupSize</code> equals 0 (not expected under constraints), return 0.</li>\r\n</ul>\r\n\r\n<p>For example, given <code>groupSize = 3</code>, <code>nDrivers = 7</code>, and <code>availability = [12, 7, 9, 15, 6, 10, 8]</code>:</p>\r\n<p>Consider contiguous blocks of size 3:</p>\r\n<ul>\r\n    <li>Block <code>[12, 7, 9]</code> -> minimum = 7</li>\r\n    <li>Block <code>[7, 9, 15]</code> -> minimum = 7</li>\r\n    <li>Block <code>[9, 15, 6]</code> -> minimum = 6</li>\r\n    <li>Block <code>[15, 6, 10]</code> -> minimum = 6</li>\r\n    <li>Block <code>[6, 10, 8]</code> -> minimum = 6</li>\r\n</ul>\r\n<p>The maximum among these minima is 7. So the function returns 7.</p>\r\n\r\n<p>The function signature provided in the editor is:</p>\r\n<pre><code class='language-javascript'>int selectBestDriverBlock(int groupSize, int availability_count, int* availability)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ngroupSize = 2\r\nnDrivers = 4\r\navailability = [8, 2, 4, 6]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Contiguous blocks of size <code>groupSize = 2</code> are:</p>\r\n<ul>\r\n    <li><code>[8, 2]</code> -> minimum = 2</li>\r\n    <li><code>[2, 4]</code> -> minimum = 2</li>\r\n    <li><code>[4, 6]</code> -> minimum = 4</li>\r\n</ul>\r\n<p>The maximum among these minima is 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ngroupSize = 4\r\nnDrivers = 8\r\navailability = [3, 6, 2, 8, 7, 4, 5, 9]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Contiguous blocks of size <code>groupSize = 4</code> are:</p>\r\n<ul>\r\n    <li><code>[3, 6, 2, 8]</code> -> minimum = 2</li>\r\n    <li><code>[6, 2, 8, 7]</code> -> minimum = 2</li>\r\n    <li><code>[2, 8, 7, 4]</code> -> minimum = 2</li>\r\n    <li><code>[8, 7, 4, 5]</code> -> minimum = 4</li>\r\n    <li><code>[7, 4, 5, 9]</code> -> minimum = 4</li>\r\n</ul>\r\n<p>The maximum among these minima is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= nDrivers <= 10^5</code></li>\r\n    <li><code>1 <= groupSize <= nDrivers</code></li>\r\n    <li><code>1 <= availability[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_6oct",
        "company_id": 566
    },
    {
        "id": 1619,
        "title": "Maximize Driver Earnings",
        "problem_statement": "<h1>Maximize Driver Earnings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber operations must assign ride requests to drivers to maximize total earnings for a given day. Each ride request has an associated profit, represented as an integer value. Ride requests arrive sequentially throughout the day and must be considered in order.</p>\r\n<p>Dispatch rules allow only specific groupings of consecutive ride requests to be assigned together:</p>\r\n<ul>\r\n    <li>Up to x single-ride assignments (size 1 subarray)</li>\r\n    <li>Up to y two-ride bundles (size 2 subarray)</li>\r\n    <li>Up to z three-ride bundles (size 3 subarray)</li>\r\n</ul>\r\n<p>Each assignment or bundle selected contributes to the sum of its rides' profits. No two assignments may overlap. The goal is to maximize the total profit from all selected assignments.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: requestCount = 6, rideProfits = [3, 7, -2, 5, 4, 6], x = 1, y = 1, z = 2\r\nOutput: 25</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The best two-bundle is [3, 7] = 10.</li>\r\n    <li>The best three-bundle is [5, 4, 6] = 15.</li>\r\n    <li>These two do not overlap, so together they give 10 + 15 = 25. Maximum total profit = 25.</li>\r\n</ul>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: requestCount = 5\r\n       rideProfits = [2, 1, 5, -2, 4]\r\n       x = 1\r\n       y = 1\r\n       z = 1\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For rideProfits = [2, 1, 5, -2, 4] with x=1, y=1, z=1:</li>\r\n    <li>Best three-bundle is [2, 1, 5] = 8.</li>\r\n    <li>Best single is [4] = 4.</li>\r\n    <li>Together, they are non-overlapping and give 8 + 4 = 12.</li>\r\n    <li>Maximum profit = 12.</li>\r\n</ul>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: requestCount = 7\r\n       rideProfits = [-7, 7, -2, 4, 0, 7, -1]\r\n       x = 1\r\n       y = 1\r\n       z = 0\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For rideProfits = [-7, 7, -2, 4, 0, 7, -1] with x=1, y=1, z=0:</li>\r\n    <li>Only one two-ride bundle can be chosen.</li>\r\n    <li>Best two-bundle is [-2, 4] = 2, [0, 7] = 7, [-7, 7] = 0, [7, -2] = 5.</li>\r\n    <li>Maximum among those is [4] = 4.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>maximizeDriverEarnings</code> in the editor below.</p>\r\n<p>The function is expected to return an <code>INTEGER</code>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>rideProfits</code>: list of integers, size <code>requestCount</code>, where each element represents the profit from a ride.</li>\r\n    <li><code>x</code>: integer, maximum allowed single-ride assignments.</li>\r\n    <li><code>y</code>: integer, maximum allowed two-ride bundles.</li>\r\n    <li><code>z</code>: integer, maximum allowed three-ride bundles.</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int maximizeDriverEarnings(vector&lt;int&gt; rideProfits, int x, int y, int z) {\r\n    // Function body to be implemented\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= requestCount &lt;= 200</code></li>\r\n    <li><code>-10<sup>5</sup> &lt;= rideProfits[i] &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= x,y,z &lt;= 20</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_6oct",
        "company_id": 566
    },
    {
        "id": 1620,
        "title": "Largest Partner Cluster Product",
        "problem_statement": "<h1>Largest Partner Cluster Product</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber Eats delivery partners are often linked to restaurants they frequently pick up from. Each restaurant hub is represented by an ID from 1 to 100. If two delivery partners both pick up from the same restaurant, they are considered connected through that hub.</p>\r\n<p>Connections are transitive within a restaurant hub:</p>\r\n<ul>\r\n    <li>If Partner A picks up from the same restaurant as Partner B, and Partner B picks up from the same restaurant as Partner C, then Partner A is also connected to Partner C through that restaurant.</li>\r\n</ul>\r\n<p>The goal is to determine the maximum product of two partner IDs in the largest cluster connected through a single restaurant hub.</p>\r\n\r\n<p><strong>Illustrative Example:</strong></p>\r\n<p>Consider the following connections for restaurant hub 51:</p>\r\n<pre><code class='language-text'>From | To | Company\r\n-----|----|--------\r\n1    | 2  | 51\r\n7    | 3  | 51\r\n5    | 6  | 51\r\n10   | 8  | 51\r\n6    | 9  | 51\r\n2    | 3  | 51</code></pre>\r\n<p>In this example, all links use the same restaurant hub (51), but not all delivery partners are in the same cluster. When the network is analyzed, we find that:</p>\r\n<ul>\r\n    <li>The largest connected cluster is [1, 2, 3, 7], where:\r\n        <ul>\r\n            <li>Partner 1 and Partner 2 both pick up from restaurant 51</li>\r\n            <li>Partner 2 and Partner 3 both pick up from restaurant 51</li>\r\n            <li>Partner 3 and Partner 7 both pick up from restaurant 51</li>\r\n        </ul>\r\n    </li>\r\n    <li>This means Partners 1, 2, 3, and 7 are part of the same connected cluster through restaurant 51.</li>\r\n    <li>The largest possible product of two IDs from this cluster is 3 * 7 = 21.</li>\r\n</ul>\r\n\r\n<p>Complete the function <code>largestPartnerClusterProduct</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int partnerCount</code>: the total number of delivery partners.</li>\r\n    <li><code>int restaurantFrom[i]</code>: the first partner in the i-th restaurant connection.</li>\r\n    <li><code>int restaurantTo[i]</code>: the second partner in the i-th restaurant connection.</li>\r\n    <li><code>int restaurantIds[i]</code>: the restaurant hub that links both partners in the i-th connection.</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int</code>: the product of the maximum two friend numbers in the largest group.</p>\r\n\r\n<pre><code class='language-cpp'>int largestPartnerClusterProduct(int partnerCount, vector<int> restaurantFrom, vector<int> restaurantTo, vector<int> restaurantIds) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\npartnerCount = 6\r\nrestaurantFrom = [1, 2, 4, 5]\r\nrestaurantTo = [2, 3, 5, 6]\r\nrestaurantIds = [10, 10, 20, 20]\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Restaurant 10 links partners {1, 2, 3}. The maximum product of two partners in this cluster is 2 * 3 = 6.</li>\r\n    <li>Restaurant 20 links partners {4, 5, 6}. The maximum product of two partners in this cluster is 5 * 6 = 30.</li>\r\n    <li>Both clusters have a size of 3, which is the largest cluster size. The maximum product from these largest clusters is 30.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= partnerCount <= 100</code></li>\r\n    <li><code>1 <= restaurantFrom[i], restaurantTo[i] <= partnerCount</code></li>\r\n    <li><code>1 <= restaurantIds[i] <= 100</code></li>\r\n    <li><code>restaurantFrom[i] != restaurantTo[i]</code></li>\r\n    <li>A pair of partners may be linked through more than one restaurant hub.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "uber_6oct",
        "company_id": 566
    }
]