[
    {
        "id": 1394,
        "title": "Lock Code",
        "problem_statement": "<h1>Lock Code</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of integers <code>codeSequence</code> of length <code>n</code> and an integer <code>maxValue</code>. A locking system allows you to modify any number in the array to any integer less than or equal to <code>maxValue</code> at a cost of 1 per change.</p>\r\n<p>Two numbers are co-prime if their greatest common divisor (GCD) is 1. To unlock the repository, you need to select a number from the array that is co-prime with all other numbers in the array.</p>\r\n<p>The lock's code is calculated as the maximum possible value of: selected number - total modification cost</p>\r\n<p>Your task is to determine the lock code by selecting an optimal number from the array after modifications that is co-prime with all other numbers in the array.</p>\r\n\r\n<p>For example:</p>\r\n<pre><code class='language-text'>n = 3\r\ncodeSequence = [3, 2, 4]\r\nmaxValue = 6</code></pre>\r\n<p><strong>Optimally:</strong></p>\r\n<ul>\r\n    <li>Change the element at the third position to 5 at the cost of 1 unit: <code>codeSequence' = [3, 2, 5]</code>.</li>\r\n    <li>Choose the element 5 since it is co-prime with both 2 and 3.</li>\r\n    <li>Calculate lock code = selected number - cost = 5 - 1 = 4.</li>\r\n</ul>\r\n<p>Return 4 as the answer.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>decryptCodeLock</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int codeSequence[n]</code>: the array presented by the code lock</li>\r\n    <li><code>int maxValue</code>: the maximum possible value for any element in the array</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the lock code</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>3</sup></code></li>\r\n    <li><code>1 <= maxValue <= 10<sup>9</sup></code></li>\r\n    <li><code>1 <= codeSequence[i] <= maxValue</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\ncodeSequence = [1, 2, 3]\r\nmaxValue = 6\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Optimally, change the second and third elements to 5 and 6 at a cost of 2 units, resulting in [1, 5, 6]. The number 6 is coprime with both 1 and 5. The lock's code is 6 - 2 (cost) = 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\ncodeSequence = [2, 4, 6, 8]\r\nmaxValue = 8\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> Optimally, change the third element to 7 at a cost of 1 unit, resulting in [2, 4, 7, 8]. The number 7 is coprime with 2, 4, and 8. The lock's code is 7 - 1 (cost) = 6.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Typeface_10sep",
        "company_id": 486
    },
    {
        "id": 1395,
        "title": "Pipeline Response Time Sum",
        "problem_statement": "<h1>Pipeline Response Time Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An array <code>responseTime</code> of <code>n</code> software components is given, where <code>responseTime[i]</code> represents the time taken by the <code>i</code>th component to complete its task. A subarray of components is called a pipeline.</p>\r\n<p>The response time of a pipeline is defined as:</p>\r\n<ul>\r\n<li><strong>Pipeline Response Time</strong> = (Maximum Response Time in the Pipeline) Ã— (Number of Components in the Pipeline)</li>\r\n</ul>\r\n<p>Return the sum of these response times for all possible pipelines modulo (10<sup>9</sup> + 7).</p>\r\n<p>Complete the function <code>getResponseTimeSum</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n<li><code>int responseTime[n]:</code> the response times of each software component</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n<li><code>int:</code> the sum of response times of all subgroups of <code>n</code> components modulo (10<sup>9</sup> + 7).</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><code>n = 3</code></p>\r\n<p><code>responseTime = [2, 3, 4]</code></p>\r\n<p>The response times of the pipelines are:</p>\r\n<ul>\r\n<li><code>[2]: 2 * 1 = 2</code></li>\r\n<li><code>[3]: 3 * 1 = 3</code></li>\r\n<li><code>[4]: 4 * 1 = 4</code></li>\r\n<li><code>[2, 3]: 3 * 2 = 6</code></li>\r\n<li><code>[3, 4]: 4 * 2 = 8</code></li>\r\n<li><code>[2, 3, 4]: 4 * 3 = 12</code></li>\r\n</ul>\r\n<p>The sum of response times = 2 + 3 + 4 + 6 + 8 + 12 = 35.</p>\r\n<p>Return 35 modulo (10<sup>9</sup> + 7) or 35.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\nresponseTime = [1, 2]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> Here are the calculated response times for each pipeline:</p>\r\n<ul>\r\n<li><code>[1]:</code> The pipeline contains 1 element of response time 1, so 1 * 1 = 1.</li>\r\n<li><code>[2]:</code> The pipeline contains 1 element of response time 2, so 2 * 1 = 2.</li>\r\n<li><code>[1, 2]:</code> The pipeline contains 2 elements, and their maximum is 2, so 2 * 2 = 4.</li>\r\n</ul>\r\n<p>Sum: 1 + 2 + 4 = 7.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nresponseTime = [3, 1, 2]\r\nOutput: 25</code></pre>\r\n<p><strong>Explanation:</strong> Here are the calculated response times for each pipeline:</p>\r\n<ul>\r\n<li><code>[3]:</code> The pipeline contains 1 element of response time 3, so 3 * 1 = 3.</li>\r\n<li><code>[1]:</code> The pipeline contains 1 element of response time 1, so 1 * 1 = 1.</li>\r\n<li><code>[2]:</code> The pipeline contains 1 element of response time 2, so 2 * 1 = 2.</li>\r\n<li><code>[3, 1]:</code> The pipeline contains 2 elements of maximum response time 3, so 3 * 2 = 6.</li>\r\n<li><code>[1, 2]:</code> The pipeline contains 2 elements of maximum response time 2, so 2 * 2 = 4.</li>\r\n<li><code>[3, 1, 2]:</code> The pipeline contains 3 elements of maximum response time 3, so 3 * 3 = 9.</li>\r\n</ul>\r\n<p>Sum: 3 + 1 + 2 + 6 + 4 + 9 = 25.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &le; n &le; 3 * 10<sup>5</sup></code></li>\r\n<li><code>1 &le; responseTime[i] &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Typeface_10sep",
        "company_id": 486
    }
]