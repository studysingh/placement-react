[
    {
        "id": 293,
        "title": "Space Race 2025",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Space Race 2025</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The year is 2025. The space race is in full motion. Elon Musk and Jeff Bezos have already launched their rockets into space. Bill Gates on the other hand, is struggling to even get started. However, his good friend Elon, offers him his secret rocket fuel formula if Gates is able to solve a particular problem.</p>\n\n        <p>There are A planets. Jeff\\'s space company is not very good so he can only jump from the ith planet to the (i+1)th planet and (i+2)th planet. Let XJ be the array of integers representing the number of ways to get to the ith planet if Jeff starts from the 1st planet. XJ[0] would be 1. Since the values can be very large, consider them all modulo 1e9+7.</p>\n\n        <p>Elon\\'s space company is quite advanced compared to Jeff\\'s. So from the ith planet, Elon\\'s rocket can jump to all planets such that:</p>\n        <ul>\n            <li>For every set bit in XJ[i]\\'s binary representation, Elon\\'s rocket when at the ith planet can jump ahead by values in the range [2<sup>k</sup>, 2<sup>k+1</sup>)</li>\n            <li>Let XJ[i] be 5. It\\'s binary representation would be 101. Thus, from the ith planet, Elon\\'s rocket will be able to jump ahead by [2<sup>0</sup>, 2<sup>1</sup>) ∪ [2<sup>2</sup>, 2<sup>3</sup>)] where ∪ is union. If i was, let\\'s say, equal to 23 and XJ[i] was equal to 5 then from there, the rocket can jump to all values in these ranges [24, 25) ∪ [27, 31].</li>\n        </ul>\n\n        <p>Let XE be the array of integers that denote the number of ways to get to the ith planet using Elon\\'s rocket, starting from the 1st planet. Elon asks you to calculate this array. Since the values can be very large, consider them all modulo 1e9 + 7. XE[0] = 1</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first and only argument is the integer A, denoting the number of planets.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an array of integers as per the given problem.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ A ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\nA = 3</pre>\n            <pre class=\\\"output\\\">Output:\n1 1 2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>XJ[0] = 1, and XJ[1] = 1 too. So from both the 0th and 1st index, we can jump ahead by [1, 2].</p>\n                <p>Therefore, XE[1] = 1, and XE[2] = 2. XE[0] = 1, as given in the problem statement.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input:\nA = 1</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>XE[0] = 1, as given in the problem statement.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Function Template</h3>\n        <pre class=\\\"cpp\\\"><code>vector&lt;int&gt; Solution::solve(int A) {\n    // Write your code here\n}</code></pre>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <p class=\\\"note\\\"><i>Note: You only need to implement the given function. Do not read input; instead use the arguments to the function. Do not print the output; instead return values as specified.</i></p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1cWaL8Ao1bTZsTt7ucu-xLJ_DqoPFyw3s99XWtE5BAoU/edit?usp=sharing",
        "solution_code": "#include <vector>\\nusing namespace std;\\n\\nvector<int> solve(int A) {\\n    const int MOD = 1e9 + 7;\\n    vector<int> XE(A, 0);\\n    XE[0] = 1;\\n\\n    for (int i = 0; i < A; ++i) {\\n        int xei = XE[i];\\n        int temp = xei;\\n        int k = 0;\\n        while (temp > 0) {\\n            if (temp & 1) {\\n                int l = 1 << k;\\n                int r = 1 << (k + 1);\\n                for (int d = l; d < r; ++d) {\\n                    if (i + d < A) {\\n                        XE[i + d] = (XE[i + d] + xei) % MOD;\\n                    } else {\\n                        break;\\n                    }\\n                }\\n            }\\n            temp >>= 1;\\n            ++k;\\n        }\\n    }\\n    return XE;\\n}",
        "company_name": "Media net",
        "company_id": 86
    },
    {
        "id": 294,
        "title": "Infinity Stones AvPpg",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Infinity Stones AvPpg</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Thanos is obsessed with destroying the universe. But in order to do that he has to collect k infinity stones. In order to avoid fighting, he decides to behave civilised this time. As you are his most trusted ally, he gives you the task to bring him infinity stones.</p>\n        <p>There are N shops A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub> where you can buy these infinity stones. Each shop A<sub>i</sub> sells the j<sup>th</sup> nanocrystal of size A<sub>ij</sub>. You can only take integral amount of stones from any shop. But since the avengers are coming you will only have the time to visit any two shops. You can buy any type of nanocrystal in any amount from these 2 shops. Each crystal of any type from any shop costs 1 dollar. Since fighting the war is financially challenging, Thanos only gave you 5 dollars.</p>\n        <p>Find the maximum size of all the infinity stones you can make. Since the answer can be large, output modulo 1e9 + 7.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10<sup>5</sup></li>\n            <li>1 ≤ k ≤ 7</li>\n            <li>1 ≤ A<sub>ij</sub> ≤ 10<sup>5</sup></li>\n            <li>1 ≤ S ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>First argument contains a 2D array A of size N * k.</p>\n        <p>Second argument contains an integer S.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a single integer, the value of the maximum size of infinity stone that you can make.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\nA = [[9, 4, 1],\n     [2, 5, 10],\n     [6, 8, 3]]\nS = 10</pre>\n            <pre class=\\\"output\\\">Output:\n24</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>We can use shop 2 and 3... total cost for size = 24. 24/6 + 24/8 + ceil(24/10) = 4 + 3 + 3 = 10.</p>\n                <p>We can prove that it is the optimal answer.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input:\nA = [[4, 1],\n     [1, 4]]\nS = 10</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>We will use shop1 and shop2. We can prove that it is the optimal answer.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Function Template</h3>\n        <pre class=\\\"cpp\\\"><code>int Solution::solve(vector&lt;vector&lt;int&gt;&gt; &amp;A, int B) {\n    // Write your code here\n}</code></pre>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <p class=\\\"note\\\"><i>Note: You only need to implement the given function. Do not read input; instead use the arguments to the function. Do not print the output; instead return values as specified.</i></p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1s1BpDaXLJ6gccbgIWUXEha0CKeEL-sjNTYqnl3bfPBw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Media net",
        "company_id": 86
    }
]