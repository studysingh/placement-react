[
    {
        "id": 483,
        "title": "Sharing Bread",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Queue: Sharing Bread</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You have a large loaf of brown bread of length <em>L</em> and <em>N</em> members in your family, including you.</p>\n        <p>You must share your bread with your family members. The <em>i</em>th family member wants a bread of length <em>A[i]</em>.</p>\n        <p>Repeat the operation below to cut the loaf into lengths as the <em>i</em>th member wants:</p>\n        <ul>\n            <li>Choose a loaf of length <em>K</em> and an integer <em>X</em> between 1 and <em>K</em> (inclusive).</li>\n            <li>Cut the loaf into two loaves of lengths <em>X</em> and <em>K - X</em>.</li>\n            <li>This operation incurs a cost of <em>K</em>.</li>\n        </ul>\n        <p>Each member must receive a loaf of the length exactly they want, but it is allowed to leave some loaves undistributed.</p>\n        <p>Find the minimum cost to distribute/share loaves with all family members.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains two space-separated integers, <em>N</em> and <em>L</em>, denoting the number of family members and the length of the loaf of bread you have.</p>\n        <p>The second line contains <em>N</em> space-separated integers of array <em>A[i]</em>, denoting the length of bread that the <em>i</em>th family member wants.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer that is the minimum cost to distribute/share loaves with all family members.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 2 × 10<sup>5</sup></li>\n            <li>1 ≤ L ≤ 10<sup>5</sup></li>\n            <li>1 ≤ A[i] ≤ L</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Sample Input</h4>\n            <pre class=\\\"input\\\">5 7\n1 2 1 2 1</pre>\n            <h4>Sample Output</h4>\n            <pre class=\\\"output\\\">4</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this example, the minimum cost to distribute the loaves is 4.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Sa0eRMwm6TBbG7qJ9jGkJAN_UEEovh_XQoRMLODulC0/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint solve(int M, int L, int A[]) {\\n    long long sum_A = 0;\\n    vector<long long> segments;\\n    \\n    for(int i = 0; i < M; i++) {\\n        segments.push_back(A[i]);\\n        sum_A += A[i];\\n    }\\n    \\n    if(sum_A > L) {\\n        return -1;\\n    }\\n    \\n    if(sum_A < L) {\\n        segments.push_back(L - sum_A);\\n    }\\n    \\n    priority_queue<long long, vector<long long>, greater<long long>> minHeap;\\n    \\n    for(long long seg : segments) {\\n        minHeap.push(seg);\\n    }\\n    \\n    long long total_cost = 0;\\n    \\n    while(minHeap.size() > 1) {\\n        long long a = minHeap.top();\\n        minHeap.pop();\\n        long long b = minHeap.top();\\n        minHeap.pop();\\n        long long c = a + b;\\n        total_cost += c;\\n        minHeap.push(c);\\n    }\\n    \\n    return total_cost;\\n}\\n",
        "company_name": "JK Tech",
        "company_id": 145
    }
]