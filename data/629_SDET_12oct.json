[
    {
        "id": 1781,
        "title": "Merge Sorted Lists",
        "problem_statement": "<h1>Merge Sorted Lists</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two sorted linked lists. Your task is to merge these two sorted linked lists into a single sorted linked list.</p>\r\n<p>Take a function <code>merge_sorted_lists</code> that takes two linked lists and returns a new linked list that contains all the elements from the two input lists, sorted in non-decreasing order.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li><p>The first line contains an integer <code>n1</code>, which is the number of elements in the first set.</p></li>\r\n    <li><p>The next <code>n1</code> lines contain the elements of the first set.</p></li>\r\n    <li><p>The line after the last element of the first set contains an integer <code>n2</code>, which is the number of elements in the second set.</p></li>\r\n    <li><p>The following <code>n2</code> lines contain the elements of the second set.</p></li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li><p>Return a single linked list represented by a Python list, containing all the integers from both input lists, sorted in non-decreasing order.</p></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Each linked list contains at most 10<sup>5</sup> elements.</li>\r\n    <li>The elements in the linked lists are integers and are within the range of -10<sup>9</sup> to 10<sup>9</sup>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n1\r\n3\r\n5\r\n7\r\n4\r\n2\r\n4\r\n6\r\n8\r\nOutput:\r\n1\r\n2\r\n3\r\n4\r\n4\r\n5\r\n6\r\n7\r\n8</code></pre>\r\n<p><strong>Explanation:</strong> Given two sorted linked lists:</p>\r\n<ul>\r\n    <li><code>list1 = [1, 3, 5, 7]</code></li>\r\n    <li><code>list2 = [2, 4, 6, 8]</code></li>\r\n</ul>\r\n\r\n<p>For reference, the structure of a <code>SinglyLinkedListNode</code> is:</p>\r\n<pre><code class='language-javascript'>struct SinglyLinkedListNode {\r\n    int data;\r\n    SinglyLinkedListNode* next;\r\n};</code></pre>\r\n\r\n<p>The function signature to be completed is:</p>\r\n<pre><code class='language-javascript'>SinglyLinkedListNode* merge_sorted_lists(SinglyLinkedListNode* list1, SinglyLinkedListNode* list2) {\r\n    // Write your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n\nstruct SinglyLinkedListNode {\n    int data;\n    SinglyLinkedListNode* next;\n\n    SinglyLinkedListNode(int node_data) {\n        this->data = node_data;\n        this->next = nullptr;\n    }\n};\n\nclass Solution {\npublic:\n    SinglyLinkedListNode* merge_sorted_lists(SinglyLinkedListNode* list1, SinglyLinkedListNode* list2) {\n        // Write your code here\n        return nullptr;\n    }\n};\n\nvoid print_list(SinglyLinkedListNode* node) {\n    bool first = true;\n    while (node) {\n        if (!first) {\n            std::cout << \" \";\n        }\n        std::cout << node->data;\n        node = node->next;\n        first = false;\n    }\n    std::cout << std::endl;\n}\n\nSinglyLinkedListNode* build_list_from_input() {\n    int n;\n    std::cin >> n;\n    if (n == 0) {\n        return nullptr;\n    }\n    SinglyLinkedListNode* head = nullptr;\n    SinglyLinkedListNode* tail = nullptr;\n    for (int i = 0; i < n; ++i) {\n        int item;\n        std::cin >> item;\n        SinglyLinkedListNode* new_node = new SinglyLinkedListNode(item);\n        if (!head) {\n            head = new_node;\n        } else {\n            tail->next = new_node;\n        }\n        tail = new_node;\n    }\n    return head;\n}\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    SinglyLinkedListNode* list1 = build_list_from_input();\n    SinglyLinkedListNode* list2 = build_list_from_input();\n\n    Solution sol;\n    SinglyLinkedListNode* result = sol.merge_sorted_lists(list1, list2);\n\n    print_list(result);\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "SDET_12oct",
        "company_id": 629
    },
    {
        "id": 1782,
        "title": "Logical Reasoning: Wax Statue",
        "problem_statement": "<h1>Logical Reasoning: Wax Statue</h1>\r\n<h2>Problem Description</h2>\r\n<p>In the Navato language, the words</p>\r\n<ul>\r\n    <li>'godabim' means <strong>kidney stones</strong>.</li>\r\n    <li>'romzbim' means <strong>kidney beans</strong>.</li>\r\n    <li>'romzbako' means <strong>wax beans</strong>.</li>\r\n</ul>\r\n<p>Based on this information, which word could mean 'wax statue'?</p>\r\n\r\n<h1>Logical Reasoning: Mango Code</h1>\r\n<h2>Problem Description</h2>\r\n<p>If MANGO is coded as 13114715, and PEAR is coded as 165118, what is the code for GRAPE?</p>\r\n\r\n<h1>Verbal Aptitude: Liberate</h1>\r\n<h2>Problem Description</h2>\r\n<p>Choose the option which is farthest in meaning from the underlined word.</p>\r\n<p>We <strong>CARRIED ON</strong> the search for the missing person.</p>\r\n\r\n<h1>Quantitative Aptitude: Salary Distribution</h1>\r\n<h2>Problem Description</h2>\r\n<p>A company has a total salary fund of $24000 to be distributed among 30 employees. Each employee receives either a $500 or $1000 salary.</p>\r\n<p>Determine the number of employees who receive a $500 salary.</p>\r\n\r\n<h1>Verbal Aptitude: Doctrines</h1>\r\n<h2>Problem Description</h2>\r\n<p>Choose the option that matches the meaning of the statement in the question.</p>\r\n<p>Opinion contrary to accepted doctrines.</p>\r\n\r\n<h1>OOP: Feature</h1>\r\n<h2>Problem Description</h2>\r\n<p>You wish to perform the following without users of the class changing their code.</p>\r\n<ol>\r\n    <li>Change the internal representation and data structures</li>\r\n    <li>Put constraints on values</li>\r\n    <li>Perform arbitrary side effects</li>\r\n</ol>\r\n<p>Which of the following OOPS features will let you perform them?</p>\r\n\r\n<h1>Quantitative Aptitude: Time and Work</h1>\r\n<h2>Problem Description</h2>\r\n<p>Varun, Ranveer, and Rohit can complete a piece of work in 24, 36, and 18 days, respectively. In how many days will,</p>\r\n<ul>\r\n    <li>Varun alone</li>\r\n    <li>Ranveer alone</li>\r\n    <li>Varun and Rohit together complete the work?</li>\r\n</ul>\r\n<p>(Round to the nearest Integer)</p>\r\n\r\n<h1>OOPS: Diamond Inheritance Constructor Calls</h1>\r\n<h2>Problem Description</h2>\r\n<p>In multiple inheritance with a diamond shape, the base class has a constructor logging \"Base created\". Without virtual inheritance, how many times will this log appear when creating the most derived object?</p>\r\n\r\n<h1>Logical Reasoning: Coded</h1>\r\n<h2>Problem Description</h2>\r\n<p>In the given coding scheme:</p>\r\n<ul>\r\n    <li>'horse is black' is coded as %@$</li>\r\n    <li>'horse in field' is coded as #%&</li>\r\n    <li>'black board field' is coded as $&*</li>\r\n</ul>\r\n<p>What is the code for 'board is black'?</p>\r\n\r\n<h1>Quantitative Aptitude: Five-Digit Numbers</h1>\r\n<h2>Problem Description</h2>\r\n<p>Five-digit numbers are to be formed using the first four prime numbers and the second smallest composite number. Each digit must be used exactly once. How many such numbers can be formed?</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <numeric>\n\n// It appears the user has provided a list of aptitude questions instead of a single\n// competitive programming problem with a clear input/output format.\n// I will generate boilerplate for the \"Quantitative Aptitude: Salary Distribution\" problem,\n// assuming the fixed values are instead provided as input.\n//\n// Problem Generalization:\n// A company has a total salary fund of S to be distributed among N employees.\n// Each employee receives either a salary of A or B.\n// Determine the number of employees who receive salary A.\n//\n// Assumed Input Format:\n// A single line with four integers: S N A B\n// Example from problem: 24000 30 500 1000\n\nclass Solution {\npublic:\n    /**\n     * @param total_salary The total salary fund.\n     * @param num_employees The total number of employees.\n     * @param salary_a The first salary option.\n     * @param salary_b The second salary option.\n     * @return The number of employees who receive salary_a.\n     */\n    int solve(long long total_salary, int num_employees, int salary_a, int salary_b) {\n        // Core logic to solve the problem will be implemented here.\n        // Let x be the number of employees with salary_a.\n        // Let y be the number of employees with salary_b.\n        // We have a system of two linear equations:\n        // 1) x + y = num_employees\n        // 2) x * salary_a + y * salary_b = total_salary\n        // The goal is to find x.\n        return 0; // Placeholder\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    long long total_salary;\n    int num_employees;\n    int salary_a;\n    int salary_b;\n\n    std::cin >> total_salary >> num_employees >> salary_a >> salary_b;\n\n    Solution solution;\n    int result = solution.solve(total_salary, num_employees, salary_a, salary_b);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "SDET_12oct",
        "company_id": 629
    },
    {
        "id": 1783,
        "title": "Big Hall",
        "problem_statement": "```html\r\n<h1>Big Hall</h1>\r\n<h2>Problem Description</h2>\r\n<p>Mr. Dell has constructed a large hall on the third floor of his house for the purpose of conducting physics coaching classes. The dimensions of the hall are in the ratio of 3:2:5:2. If the height of the hall is one meter less than its breadth, what would be the length of the longest bamboo that can be placed in the hall?</p>\r\n\r\n<h1>Odd</h1>\r\n<h2>Problem Description</h2>\r\n<p>From the following list of religious structures, identify the item that does not belong with the others.</p>\r\n<ul>\r\n    <li>Cathedral</li>\r\n    <li>Temple</li>\r\n    <li>Monastery</li>\r\n    <li>Mosque</li>\r\n</ul>\r\n\r\n<h1>Stack Operations</h1>\r\n<h2>Problem Description</h2>\r\n<p>Consider the following pseudo-code that uses a stack.</p>\r\n<pre><code class='language-text'>declare a stack of characters\r\nwhile ( there are more characters in the word to read )\r\n{\r\n    read a character\r\n    push the character on the stack\r\n}\r\nwhile ( the stack is not empty )\r\n{\r\n    pop a character off the stack\r\n    write the character to the screen\r\n}</code></pre>\r\n<p>What is the output for input \"doselectquiz\" ?</p>\r\n\r\n<h1>Insertion Sort Complexity</h1>\r\n<h2>Problem Description</h2>\r\n<p>What's the worst-case time complexity of insertion sort?</p>\r\n\r\n<h1>Stack Overflow</h1>\r\n<h2>Problem Description</h2>\r\n<p>A stack is implemented using an array `arr = {11, 12, 13, 14, 15}` of size 5. Assuming 0-based indexing and that the stack is currently full, what would be the index of the <strong>top</strong> if the element <strong>10</strong> is to be pushed onto the stack?</p>\r\n\r\n<h1>AVL Tree Operations</h1>\r\n<h2>Problem Description</h2>\r\n<p>Please complete the following statement with an appropriate response: AVL trees guarantee an upper bound of ____ for both insertion and deletion operations.</p>\r\n\r\n<h1>Counting Divisible Prefixes</h1>\r\n<h2>Problem Description</h2>\r\n<p>What would the following code do?</p>\r\n<pre><code class='language-text'>r = 0\r\nnMultiples = 0\r\nfor i = 1 to n: // n is the length of the string\r\n    r = (10 * r + str[i]) % a\r\n    if r == 0\r\n        nMultiples++\r\nreturn nMultiples</code></pre>\r\n\r\n<h1>Seating Arrangement</h1>\r\n<h2>Problem Description</h2>\r\n<p>Five friends A, B, C, D, and E are sitting in a row. A is to the immediate left of B. C is at the extreme right. Who is sitting next to D if D is in the middle?</p>\r\n\r\n<h1>Exception Message</h1>\r\n<h2>Problem Description</h2>\r\n<p>Consider the code snippet given below:</p>\r\n<pre><code class='language-java'>class DoSelectLab {\r\n    public static void main(String[] args) {\r\n        int i = 10;\r\n        System.out.println(10/0);\r\n    }\r\n}</code></pre>\r\n<p>Which of the following exception messages will you get if you execute this Java code?</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cmath>\n#include <iomanip>\n\nclass Solution {\npublic:\n    double solve(int d) {\n        // Core logic to calculate the length of the longest bamboo will go here.\n        return 0.0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int t;\n    std::cin >> t;\n    while (t--) {\n        // Based on the problem \"Big Hall\", the dimensions are derived from a fixed\n        // ratio and a condition \"height is one meter less than its breadth\".\n        // A plausible interpretation for a competitive programming problem is that\n        // this difference is a variable input.\n        int d;\n        std::cin >> d;\n\n        Solution solution;\n        double result = solution.solve(d);\n\n        std::cout << std::fixed << std::setprecision(10) << result << std::endl;\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "SDET_12oct",
        "company_id": 629
    },
    {
        "id": 1784,
        "title": "Java: Exception Message",
        "problem_statement": "<h1>Java: Exception Message</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Consider the code snippet given below: Which of the following exception messages will you get if you execute this Java code?</p>\r\n<pre><code class='language-javascript'>class DoSelectLab {\r\n    public static void main(String[] args) {\r\n        int i = 10;\r\n        System.out.println(10/0);\r\n    }\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: (Executing the provided Java code)\r\nOutput: ArithmeticException</code></pre>\r\n<p><strong>Explanation:</strong> The expression <code>10/0</code> attempts to divide by zero, which results in an <code>ArithmeticException</code> at runtime in Java.</p>\r\n\r\n<h1>Java: Class Constructor Rules</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>What are the rules for creating a Java Constructor? (Select all that apply)</p>\r\n\r\n<h1>DSA: Shifting Operations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of integers:</p>\r\n<pre><code class='language-text'>a = {4, 4, 0, 1, 1}</code></pre>\r\n<p>An operation is defined as a 'right circular shift by 1 position'. Perform operation <code>n</code> times (where <code>n</code> is a non-negative integer), and find the smallest possible value of <code>a[0] + a[2]</code> after <code>n</code> shifts. What is the value of <code>n</code>?</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = [4, 4, 0, 1, 1]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n<li>Initial array: <code>[4, 4, 0, 1, 1]</code>. Sum <code>a[0] + a[2] = 4 + 0 = 4</code>.</li>\r\n<li>After 1 right circular shift: <code>[1, 4, 4, 0, 1]</code>. Sum <code>a[0] + a[2] = 1 + 4 = 5</code>.</li>\r\n<li>After 2 right circular shifts: <code>[1, 1, 4, 4, 0]</code>. Sum <code>a[0] + a[2] = 1 + 4 = 5</code>.</li>\r\n<li>After 3 right circular shifts: <code>[0, 1, 1, 4, 4]</code>. Sum <code>a[0] + a[2] = 0 + 1 = 1</code>.</li>\r\n<li>After 4 right circular shifts: <code>[4, 0, 1, 1, 4]</code>. Sum <code>a[0] + a[2] = 4 + 1 = 5</code>.</li>\r\n</ul>\r\nThe smallest possible value of <code>a[0] + a[2]</code> is 1, which occurs after 3 right circular shifts. Therefore, <code>n = 3</code>.</p>\r\n\r\n<h1>Java: Thread Race Condition</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Consider the following Java code snippet:</p>\r\n<pre><code class='language-javascript'>class Sample extends Thread\r\n{\r\n    Thread t1, t2;\r\n    Sample()\r\n    {\r\n        t1 = new Thread(this, \"Thread_1\");\r\n        t2 = new Thread(this, \"Thread_2\");\r\n        t1.start();\r\n        t2.start();\r\n    }\r\n    public void run()\r\n    {\r\n        t2.setPriority(Thread.MAX_PRIORITY);\r\n        System.out.print(t1.equals(t2));\r\n    }\r\n}\r\nclass MultiThreadDemo\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        new Sample();\r\n    }\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: (Executing the provided Java code)\r\nOutput: false</code></pre>\r\n<p><strong>Explanation:</strong>\r\nIn Java, the <code>Thread.equals()</code> method (inherited from <code>Object.equals()</code>) by default checks for object identity (i.e., if two references point to the exact same object in memory).\r\nHere, <code>t1</code> and <code>t2</code> are distinct <code>Thread</code> objects created with <code>new Thread(...)</code>. Even though they are created from the same <code>Runnable</code> (<code>this</code>, which is the <code>Sample</code> instance), they are separate <code>Thread</code> instances. Therefore, <code>t1.equals(t2)</code> will return <code>false</code>.\r\nThe <code>t2.setPriority(Thread.MAX_PRIORITY)</code> call affects the thread's scheduling priority but does not change its object identity or its equality comparison with another distinct thread object.</p>\r\n\r\n<h1>Java: Boolean Object Equality</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Predict the correct output for the following Java program (Java 15 or earlier):</p>\r\n<pre><code class='language-javascript'>// Java Version: 15 or earlier\r\npublic class Temp {\r\n    public static void main(String[] args) {\r\n        int result = 0;\r\n\r\n        Boolean b1 = new Boolean(\"TRUE\");\r\n        Boolean b2 = new Boolean(\"true\");\r\n        Boolean b3 = new Boolean(\"True\");\r\n        Boolean b4 = new Boolean(\"false\");\r\n\r\n        if (b1 == b2) result = 1;\r\n        if (b1.equals(b2)) result = result + 10;\r\n        if (b2 == b4) result = result + 100;\r\n        if (b2.equals(b4)) result = result + 1000;\r\n        if (b2.equals(b3)) result = result + 10000;\r\n\r\n        System.out.println(result);\r\n    }\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: (Executing the provided Java code)\r\nOutput: 10010</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe code initializes <code>result = 0</code> and creates four <code>Boolean</code> objects using <code>new Boolean(...)</code>. Creating <code>Boolean</code> objects with <code>new</code> always creates new distinct objects in memory, even if their underlying boolean values are the same.\r\n<ul>\r\n<li><code>Boolean b1 = new Boolean(\"TRUE\");</code> (value: <code>true</code>)</li>\r\n<li><code>Boolean b2 = new Boolean(\"true\");</code> (value: <code>true</code>)</li>\r\n<li><code>Boolean b3 = new Boolean(\"True\");</code> (value: <code>true</code>)</li>\r\n<li><code>Boolean b4 = new Boolean(\"false\");</code> (value: <code>false</code>)</li>\r\n</ul>\r\nLet's evaluate the conditions:\r\n<ul>\r\n<li><code>if (b1 == b2)</code>: <code>false</code>, because <code>b1</code> and <code>b2</code> are distinct objects. <code>result</code> remains 0.</li>\r\n<li><code>if (b1.equals(b2))</code>: <code>true</code>, because both <code>b1</code> and <code>b2</code> represent the boolean value <code>true</code>. <code>result = 0 + 10 = 10</code>.</li>\r\n<li><code>if (b2 == b4)</code>: <code>false</code>, because <code>b2</code> and <code>b4</code> are distinct objects. <code>result</code> remains 10.</li>\r\n<li><code>if (b2.equals(b4))</code>: <code>false</code>, because <code>b2</code> represents <code>true</code> and <code>b4</code> represents <code>false</code>. <code>result</code> remains 10.</li>\r\n<li><code>if (b2.equals(b3))</code>: <code>true</code>, because both <code>b2</code> and <code>b3</code> represent the boolean value <code>true</code>. <code>result = 10 + 10000 = 10010</code>.</li>\r\n</ul>\r\nFinally, <code>System.out.println(result)</code> prints <code>10010</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <limits>\n\nclass Solution {\npublic:\n    int solve(std::vector<int>& a) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement is ambiguous about the input format.\n    // It provides an example `a = [4, 4, 0, 1, 1]`.\n    // A standard competitive programming input format would be the size of the array\n    // followed by its elements. We will assume this format.\n    int n;\n    // Reading the size of the array.\n    // For the given example, you would input 5.\n    std::cin >> n;\n    std::vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> a[i];\n    }\n\n    Solution solution;\n    int result = solution.solve(a);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "SDET_12oct",
        "company_id": 629
    },
    {
        "id": 1786,
        "title": "Taru and Directions",
        "problem_statement": "<h1>Taru and Directions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string consisting of instructions in the form of characters N, E, W, and S, denoting North, East, West, and South. In one move Taru can follow an order which Tan has given. An order is defined as a single character denoting that Taru has to move in that direction.</p>\r\n<p>Tan has given Taru a set of instructions in the form of a string. Since the number of instructions can be large Taru decided to skip all irrelevant steps. Irrelevant steps can be defined as EW (as going in the east and again in the west doesn't make any change in overall position). Similarly, there are many more instructions like these.</p>\r\n<p>You have to help Taru in removing all those irrelevant instructions.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>You can remove instructions that are on the same axis. N and S are on the same axis and E and W are on the same axis so that Tan could not know that Taru has skipped some instructions.</li>\r\n    <li>N and S will only be removed if they are consecutive and same for EW or WE.</li>\r\n    <li>After each removal, re-check the updated string for any new removable pairs.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first and only line will contain a string containing the instructions.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>Return a single string denoting the minimum number of operations that Taru has to perform. If no instruction is required to perform then you should return \"HURRAY\" (without quotes).</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>0 &le; |s| &le; 10<sup>6</sup></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: NNSWS\r\nOutput: NWS</code></pre>\r\n<p><strong>Explanation:</strong> Taru can skip moving to the north and then again to the south as their relative position change is 0 and it will not affect the final destination.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: NNSS\r\nOutput: HURRAY</code></pre>\r\n<p><strong>Explanation:</strong> Two norths and two south direction will Taru to the starting point so just return HURRAY.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n\nclass Solution {\npublic:\n    std::string solve(const std::string& s) {\n        // Core logic to simplify the path goes here.\n        std::string result = \"\";\n        for (char c : s) {\n            if (result.empty()) {\n                result.push_back(c);\n            } else {\n                char last = result.back();\n                if ((last == 'N' && c == 'S') || (last == 'S' && c == 'N') ||\n                    (last == 'E' && c == 'W') || (last == 'W' && c == 'E')) {\n                    result.pop_back();\n                } else {\n                    result.push_back(c);\n                }\n            }\n        }\n        return result;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string s;\n    std::cin >> s;\n\n    Solution solution;\n    std::string result = solution.solve(s);\n\n    if (result.empty()) {\n        std::cout << \"HURRAY\" << std::endl;\n    } else {\n        std::cout << result << std::endl;\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "SDET_12oct",
        "company_id": 629
    }
]