[
    {
        "id": 1458,
        "title": "Code Question 1",
        "problem_statement": "<h1>Code Question 1</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An e-commerce partner on Amazon's platform faces an operational challenge due to fluctuations in daily processing needs. To solve this, Amazon allocates a set of <code>n</code> processing facilities, each identified by a unique integer from 1 to <code>n</code>.</p>\r\n<p>Amazon selects which processing facility to activate based on comparisons between consecutive days' processing volumes.</p>\r\n<ul>\r\n<li>If the processing volume increases compared to the previous day, Amazon activates a processing facility with a higher identifier.</li>\r\n<li>If the processing volume decreases, Amazon activates a processing facility with a lower identifier.</li>\r\n<li>If the processing volume remains the same as the previous day, then Amazon activates a processing facility with an identifier equal to the one used on the previous day.</li>\r\n</ul>\r\n<p>The resource allocation cost for the partner is calculated by counting the number of unique processing facilities used.</p>\r\n<p>Your task is to determine the minimum number of unique processing facilities that Amazon needs to use to handle the given processing volumes over <code>n</code> days.</p>\r\n<p>Complete the function <code>determineMinimumFacilities</code> in the editor below.</p>\r\n<p>It has the following parameters:</p>\r\n<ul>\r\n<li><code>int dailyVolume[n]</code>: an integer array denoting the processing volumes over <code>n</code> days</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n<li><code>int</code>: an integer denoting the minimum number of unique processing facilities that Amazon needs to use</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, dailyVolume = [10, 20, 30, 15, 10]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Amazon can activate the processing facilities in the sequence: <code>[1, 2, 3, 2, 1]</code>, resulting in a cost of 3 since the unique processing facilities used are <code>[1, 2, 3]</code>.</p>\r\n<p>It's worth noting that alternative sequences of processing facilities may also meet the processing volumes over <code>n</code> days. For example, a sequence like <code>[4, 5, 8, 5, 4]</code> would have the unique facilities <code>[4, 5, 8]</code>, also incurring a cost of 3.</p>\r\n<p>However, it is guaranteed that no sequence can achieve a cost lower than 3, as this is the minimum number of unique processing facilities required to handle the processing volumes.</p>\r\n<p>Hence, the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4\r\ndailyVolume = [100, 85, 93, 106]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Amazon can use the processing facilities in the following order: <code>[3, 2, 3, 4]</code>, thus incorporating 3 different processing facilities.</p>\r\n<p>It's worth noting that alternative sequences of processing facilities may also meet the processing volumes over <code>n</code> days. For example, a sequence like <code>[1, 2, 1, 2, 3]</code> would have the unique facilities <code>[1, 2, 3]</code>, also incurring a cost of 3.</p>\r\n<p>However, it is guaranteed that no sequence can achieve a cost lower than 3, as this is the minimum number of unique processing facilities required to handle the processing volumes.</p>\r\n<p>Hence, the answer is 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 9\r\ndailyVolume = [100, 200, 150, 250, 175, 192, 130, 200, 199]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Amazon can use the processing facilities in the order: <code>[6, 9, 6, 9, 6, 9, 6, 9, 6]</code>, thus incorporating 2 different processing facilities.</p>\r\n<p>It's worth noting that alternative sequences of processing facilities may also meet the processing volumes over <code>n</code> days. For example, a sequence like <code>[1, 2, 1, 2, 1, 2, 1, 2, 1]</code> would have the unique facilities <code>[1, 2]</code>, also incurring a cost of 2.</p>\r\n<p>However, it is guaranteed that no sequence can achieve a cost lower than 2, as this is the minimum number of unique processing facilities required to handle the processing volumes.</p>\r\n<p>Hence, the answer is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n<li><code>1 &le; dailyVolume[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>The first line contains an integer, <code>n</code>, denoting the number of days.</p>\r\n<p>Each line <code>i</code> of the <code>n</code> subsequent lines contains an integer, <code>dailyVolume[i]</code>, the processing volumes for processing facilities on the <code>i</code>th day.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_19sep",
        "company_id": 511
    },
    {
        "id": 1459,
        "title": "Maximize Storage Efficiency",
        "problem_statement": "<h1>Maximize Storage Efficiency</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're managing Amazon's cloud storage system. There are <code>n</code> tasks that need to be processed, and the <code>i<sup>th</sup></code> task is broken into <code>num_segments[i]</code> segments. The cloud storage is divided into <code>m</code> storage units. The segments are allocated to these units with the following rules:</p>\r\n<ul>\r\n    <li>Each segment is stored in exactly one storage unit.</li>\r\n    <li>Each storage unit must hold at least one segment.</li>\r\n    <li>A storage unit cannot contain segments from more than one task.</li>\r\n</ul>\r\n<p>The storage efficiency is measured by the minimum number of segments that any storage unit contains.</p>\r\n<p>Your task is to organize the segments in such a way that this storage efficiency is maximized.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMaxStorageEfficiency</code> in the editor below with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int num_segments[n]</code>: the number of segments a process is divided into</li>\r\n    <li><code>long m</code>: the number of storage units</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum storage efficiency</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n7\r\n10\r\n5\r\n4\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 tasks that need to be processed. Task 1 has 7 segments, Task 2 has 10 segments, and Task 3 has 5 segments.</p>\r\n<p>One of the optimal ways to allocate is:</p>\r\n<ul>\r\n    <li>Storage unit 1: all 7 segments from task 1</li>\r\n    <li>Storage unit 2: 5 segments from task 2</li>\r\n    <li>Storage unit 3: 5 segments from task 2</li>\r\n    <li>Storage unit 4: 5 segments from task 3</li>\r\n</ul>\r\n<p>The minimum segments in any storage unit is 5 in storage units 2, 3, and 4. It can be proved that we cannot achieve a higher value for the minimum segment in any storage unit. Hence, the answer is 5.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n4\r\n3\r\n5\r\n3\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> As <code>m = 3</code> (= <code>n</code>), the only way to store the processes is -</p>\r\n<ul>\r\n    <li>Store 4 segments of task 1 in storage unit 1.</li>\r\n    <li>Store 3 segments of task 2 in storage unit 2.</li>\r\n    <li>Store 5 segments of task 3 in storage unit 3.</li>\r\n</ul>\r\n<p>Hence, the storage efficiency is 3.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n1\r\n2\r\n3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The only way to store the processes is -</p>\r\n<ul>\r\n    <li>Store 1 segment of task 1 in storage unit 1.</li>\r\n    <li>Store 1 segment of task 2 in storage unit 2.</li>\r\n    <li>Store 1 segment of task 2 in storage unit 3.</li>\r\n</ul>\r\n<p>Hence, the storage efficiency is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; num_segments[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>n &le; m &le; &sum; num_segments[i]</code></li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>The first line contains an integer, <code>n</code>, the number of processes.</p>\r\n<p>Each of the next <code>n</code> lines contains an integer <code>num_segments[i]</code>.</p>\r\n<p>The next line contains an integer <code>m</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_19sep",
        "company_id": 511
    }
]