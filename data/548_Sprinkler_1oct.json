[
    {
        "id": 1560,
        "title": "Gambler's Dice",
        "problem_statement": "<h1>Gambler's Dice</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an n-ary perfect tree with k levels. You need to mark each node of this tree with a number on dice such that resulting tree is Gambler Friendly.</p>\r\n<p>A tree is Gambler Friendly if following holds:</p>\r\n<p>For every node of tree, let say it is marked with a number p (1 &lt;= p &lt;= 6), then every adjacent node of this tree is marked with a number q that is adjacent to p on dice.</p>\r\n<p>(i.e. p and q are adjacent on dice and p != q)</p>\r\n<p><strong>Note:</strong> a number is not adjacent to itself on dice.</p>\r\n<p>You need to calculate number of possible ways to paint tree such that it is Gambler Friendly. Since the number can be very large, print it modulo 10<sup>9</sup> + 7.</p>\r\n<p><strong>Input Format:</strong> 2 space separated integers, n and k</p>\r\n<p><strong>Note for reference:</strong> Following is a perfect binary tree with 4 levels.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 3 3\r\nOutput: 188663296</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>2 &lt;= n &lt;= 10<sup>5</sup></li>\r\n<li>1 &lt;= k &lt;= 10<sup>5</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Sprinkler_1oct",
        "company_id": 548
    },
    {
        "id": 1561,
        "title": "Robot Run",
        "problem_statement": "<h1>Robot Run</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're given a 2D plane of size N * N and a set of coins placed on random points of that plane. You have built a robot named Samuel which can identify the coins placed on the plane and grab them for you. The only problem with Samuel is that he can only walk in a straight line. You can configure him to start from any point on the plane. Configure Samuel's direction such that he can grab you the maximum number of coins possible.</p>\r\n<p>Each point on the plane can either contain one coin or none.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains 2 integers N and Q, where N * N will be the size of the plane and Q will be the number of coins which are placed on the plane.</p>\r\n<p>The next Q lines contain 2 integers X and Y each representing the position of a coin on the plane (X,Y) will be the representation of the coin placement.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return the maximum number of coins that Samuel can grab for you.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5 6\r\n1 1\r\n3 2\r\n5 3\r\n4 1\r\n2 3\r\n1 4\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> there are multiple directions that you can choose, but to get the maximum coins from the plane on a straight line you should choose (0,0), (0,0), (4,1).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= N <= 10^4</code></li>\r\n<li><code>1 <= Q <= 1000</code></li>\r\n<li><code>0 <= Xi, Yi <= N</code></li>\r\n</ul>\r\n\r\n<h2>Notes</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n<p>Time Limit: 5.0 sec(s) for each input file</p>\r\n<p>Memory Limit: 256 MB</p>\r\n<p>Source Limit: 1024 KB</p>\r\n<p>Score is assigned if any testcase passes</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Sprinkler_1oct",
        "company_id": 548
    },
    {
        "id": 1562,
        "title": "String Transformation",
        "problem_statement": "<h1>String Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two strings S and T of the same length. You need to determine if it's possible to transform string S into T with the following rule any number of times: You can map a character from string S to a character of String T and replace all the occurrences of that character in string S.</p>\r\n\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>All occurrences of a character must be replaced with another character while preserving the order of characters.</li>\r\n    <li>No two characters may map to the same character, but a character may map to itself.</li>\r\n</ul>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>The first line of input contains an integer N, the number of test cases.</p>\r\n<p>For every test case:</p>\r\n<ul>\r\n    <li>The first line contains string S.</li>\r\n    <li>The second line contains string T.</li>\r\n</ul>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>For every test case, return a boolean in a new line, indicating if it's possible to transform S into T.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"egg\", T = \"add\"\r\nOutput: true</code></pre>\r\n<p><strong>Explanation:</strong> 'e' can be mapped to 'a', and 'g' can be mapped to 'd'. Replacing all these occurrences will convert S into T.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = \"foo\", T = \"bar\"\r\nOutput: false</code></pre>\r\n<p><strong>Explanation:</strong> 'f' can be mapped to 'b', but 'o' cannot be mapped with 'a' and 'r' both, since we're looking for unique mapping.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: S = \"paper\", T = \"title\"\r\nOutput: true</code></pre>\r\n<p><strong>Explanation:</strong> 'p' can be mapped to 't', 'a' can be mapped to 'i', 'e' can be mapped to 'l', 'r' can be mapped to 'e'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10</li>\r\n    <li>1 &lt;= S.length &lt;= 10<sup>5</sup></li>\r\n    <li>S.length == T.length</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Sprinkler_1oct",
        "company_id": 548
    }
]