[
    {
        "id": 1752,
        "title": "Get Smallest String",
        "problem_statement": "<h1>Get Smallest String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a binary string <code>dataSequence</code> and an integer <code>maxSwaps</code>. The adjacent characters in the string can be swapped at most <code>maxSwaps</code> times.</p>\r\n<p>Your task is to determine the alphabetically smallest string that can be achieved by performing at most <code>maxSwaps</code> swaps.</p>\r\n<p><strong>Note:</strong> A string is said to be alphabetically smaller than another if it appears before it in dictionary order, comparing character by character from left to right.</p>\r\n\r\n<p>Complete the function <code>getSmallestString</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string dataSequence</code>: the binary string</li>\r\n    <li><code>int maxSwaps</code>: the maximum number of adjacent swaps that can be performed</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>string</code>: the alphabetically smallest binary string after at most <code>maxSwaps</code> swaps.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dataSequence = \"1111100\", maxSwaps = 5\r\nOutput: \"0111110\"</code></pre>\r\n<p><strong>Explanation:</strong> The underlined characters are selected for swapping. An optimal sequence of swaps is shown below:</p>\r\n<table border=\"1\">\r\n    <thead>\r\n        <tr>\r\n            <th>Swap Number</th>\r\n            <th>Before swapping</th>\r\n            <th>After swapping</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>1</td>\r\n            <td>1111100</td>\r\n            <td>1111010</td>\r\n        </tr>\r\n        <tr>\r\n            <td>2</td>\r\n            <td>1111010</td>\r\n            <td>1110110</td>\r\n        </tr>\r\n        <tr>\r\n            <td>3</td>\r\n            <td>1110110</td>\r\n            <td>1101110</td>\r\n        </tr>\r\n        <tr>\r\n            <td>4</td>\r\n            <td>1101110</td>\r\n            <td>1011110</td>\r\n        </tr>\r\n        <tr>\r\n            <td>5</td>\r\n            <td>1011110</td>\r\n            <td>0111110</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>The alphabetically smallest possible string is <code>\"0111110\"</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |dataSequence| &lt;= 2 * 10^5</code>, where <code>| |</code> denotes the length of the string.</li>\r\n    <li><code>1 &lt;= maxSwaps &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>def getSmallestString(dataSequence, maxSwaps):\r\n    # Write your code here\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::string getSmallestString(std::string dataSequence, long long maxSwaps) {\n        // Core logic to be implemented here\n        int n = dataSequence.length();\n        std::vector<int> zero_indices;\n        for (int i = 0; i < n; ++i) {\n            if (dataSequence[i] == '0') {\n                zero_indices.push_back(i);\n            }\n        }\n\n        std::string result = dataSequence;\n        int current_pos = 0;\n        for (int zero_idx : zero_indices) {\n            int swaps_needed = zero_idx - current_pos;\n            if (maxSwaps >= swaps_needed) {\n                maxSwaps -= swaps_needed;\n                // Conceptually move the '0'\n                // In the result string, this means placing a '0' at current_pos\n                // and shifting the '1's\n            } else {\n                // Not enough swaps to bring this '0' all the way to the front\n                // Move it as far as possible\n                int new_pos = zero_idx - maxSwaps;\n                maxSwaps = 0;\n                // Place this '0' at its new position\n                // and break\n                break;\n            }\n            current_pos++;\n        }\n        \n        // The actual implementation requires careful string manipulation\n        // or building the new string.\n        // A placeholder for the logic:\n        int zero_ptr = 0;\n        for (int i = 0; i < n && zero_ptr < zero_indices.size(); ++i) {\n            int original_idx = zero_indices[zero_ptr];\n            int swaps_needed = original_idx - i;\n            if (maxSwaps >= swaps_needed) {\n                maxSwaps -= swaps_needed;\n                dataSequence.erase(original_idx, 1);\n                dataSequence.insert(i, \"0\");\n                zero_ptr++;\n            }\n        }\n        \n        return dataSequence;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string dataSequence;\n    long long maxSwaps;\n\n    std::cin >> dataSequence;\n    std::cin >> maxSwaps;\n\n    Solution sol;\n    std::string result = sol.getSmallestString(dataSequence, maxSwaps);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "ibm_11oct",
        "company_id": 615
    },
    {
        "id": 1753,
        "title": "Minimum Cost to Complete Projects",
        "problem_statement": "```html\r\n<h1>Minimum Cost to Complete Projects</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A client has posted multiple web development projects on a freelancing website, and different developers have submitted bids for these projects. Given the information about project bids, determine the minimum total cost for the client to complete all projects.</p>\r\n<p>Return the minimum possible cost for completing all projects. If any project does not receive any bids, return -1.</p>\r\n<p>For example, consider the following scenario:</p>\r\n<ul>\r\n    <li><code>numProjects = 5</code> projects.</li>\r\n    <li><code>projectID = [0, 1, 2, 3, 4]</code></li>\r\n</ul>\r\n<p><code>projectID</code> is aligned with <code>bid[]</code></p>\r\n<ul>\r\n    <li>The first web developer bid 6 for project 0.</li>\r\n    <li>The second web developer bid 7 for project 0.</li>\r\n    <li>The third web developer bid 6 for project 1.</li>\r\n    <li>The fourth web developer bid 9 for project 2.</li>\r\n</ul>\r\n<p>There is only one choice of who to hire for project 3, and it will cost 7. Likewise, there is only one choice for project 4, which will cost 8. For project 0, it is optimal to hire the first web developer, instead of the fourth, and doing so will cost 6. So the final answer is 7 + 8 + 6 = 21.</p>\r\n<p>If instead there were four projects, the answer would be -1 since there were no bids received on the fourth project.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>minCost</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int numProjects</code>: the total number of projects labeled from 0 to <code>numProjects - 1</code>.</li>\r\n    <li><code>int projectID[]</code>: the projects that the freelancers bid on.</li>\r\n    <li><code>int bid[]</code>: the bid amounts posted by the freelancers.</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>long</code>: the minimum cost the client can spend to complete all projects, or -1 if any project has no bids.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: numProjects = 3\r\n       projectID = [0, 1, 0, 3, 1]\r\n       bid = [4, 34, 40, 7, 4]\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong> The bids are as follows:</p>\r\n<ul>\r\n    <li>The first web developer bid 4 for project 0.</li>\r\n    <li>The second web developer bid 34 for project 1.</li>\r\n    <li>The third web developer bid 40 for project 0.</li>\r\n    <li>The fourth web developer bid 7 for project 2.</li>\r\n    <li>The fifth web developer bid 4 for project 1.</li>\r\n</ul>\r\n<p>To complete project 0, the minimum bid is 4.</p>\r\n<p>To complete project 1, the minimum bid is 4.</p>\r\n<p>To complete project 2, the minimum bid is 7.</p>\r\n<p>Total minimum cost = 4 + 4 + 7 = 15.</p>\r\n<p><em>(Note: There is an inconsistency between the provided sample output (11) and the calculated total minimum cost in the explanation (15). Additionally, the explanation refers to \"project 2\" having a bid of 7, while the input <code>projectID</code> array contains a '3' at the corresponding index, which would be out of bounds for <code>numProjects = 3</code> if interpreted strictly. The explanation's logic for calculating 15 assumes <code>projectID[3]</code> should be 2.)</em></p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= numProjects <= 5 * 10^5</code></li>\r\n    <li><code>0 <= projectID[i] < numProjects</code></li>\r\n    <li><code>1 <= bid[i] <= 10^9</code></li>\r\n    <li><code>1 <= bids <= 10^5</code> (where <code>bids</code> is the number of elements in <code>projectID</code> and <code>bid</code> arrays)</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\nlong minCost(int numProjects, std::vector<int> projectID, std::vector<int> bid) {\r\n    // Complete the 'minCost' function below.\r\n    // The function is expected to return a LONG_INTEGER.\r\n    // The function accepts the following parameters:\r\n    //  1. INTEGER numProjects\r\n    //  2. INTEGER_ARRAY projectID\r\n    //  3. INTEGER_ARRAY bid\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <limits>\n\nclass Solution {\npublic:\n    long minCost(int numProjects, std::vector<int>& projectID, std::vector<int>& bid) {\n        // Core logic to be implemented here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int numProjects;\n    std::cin >> numProjects;\n\n    int bids_count;\n    std::cin >> bids_count;\n\n    std::vector<int> projectID(bids_count);\n    for (int i = 0; i < bids_count; ++i) {\n        std::cin >> projectID[i];\n    }\n\n    std::vector<int> bid(bids_count);\n    for (int i = 0; i < bids_count; ++i) {\n        std::cin >> bid[i];\n    }\n\n    Solution solver;\n    long result = solver.minCost(numProjects, projectID, bid);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "ibm_11oct",
        "company_id": 615
    }
]