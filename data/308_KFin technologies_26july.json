[
    {
        "id": 965,
        "title": "Trim A Tree",
        "problem_statement": "<h1>Trim A Tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A farmer has a tree with N nodes. He wants to trim the tree using an operation T to t-N-s. In one operation he will choose any edge and delete it. From the resulting two connected components(i.e. trees) keep one and discard the other.</p>\r\n<p>Additionally, the farmer has an array A which gives the score of each node of a certain degree present in the tree. The farmer wants to apply the operation such that the total score of the tree left is maximum.</p>\r\n<p>The total score of the tree left is defined as the sum of values of A as per the degree of each node left in the tree. This means that a node of degree 1 left in the final tree will contribute A[1] to the total score.</p>\r\n<p>Find the maximum possible score for the tree left.</p>\r\n\r\n<h3>Notes:</h3>\r\n<ul>\r\n    <li>A Tree is an undirected connected graph with N vertices and N-1 edge with no loops or multiple edges and the description of the edges in two arrays U and V where there is an edge between node U<sub>i</sub> and node V<sub>i</sub>.</li>\r\n    <li>It is given that the array A follows 0-based indexing.</li>\r\n</ul>\r\n\r\n<p>Complete the <code>calculateMaxScore</code> function in the editor below. It has the following parameter(s):</p>\r\n<ul>\r\n    <li><strong>N</strong>: INTEGER, The number of nodes in the tree.</li>\r\n    <li><strong>A</strong>: INTEGER ARRAY, The score of each degree.</li>\r\n    <li><strong>U</strong>: INTEGER ARRAY, The description of the edges.</li>\r\n    <li><strong>V</strong>: INTEGER ARRAY, The description of the edges.</li>\r\n</ul>\r\n<p>The function must return an INTEGER denoting the maximum score of the tree left.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^5</code></li>\r\n    <li><code>N-1 <= M <= N-1</code></li>\r\n    <li><code>-10^4 <= A[i] <= 10^4</code></li>\r\n    <li><code>1 <= U[i] <= N</code></li>\r\n    <li><code>1 <= V[i] <= N</code></li>\r\n</ul>\r\n\r\n<h2>Input format for debugging</h2>\r\n<ul>\r\n    <li>The first line contains an integer, N, denoting the number of elements in A.</li>\r\n    <li>The next line contains an integer, M, denoting the size of U and V.</li>\r\n    <li>Each line i of the N subsequent lines (where 0 <= i < N) contains an integer describing A[i].</li>\r\n    <li>Each line i of the M subsequent lines (where 0 <= i < M) contains an integer describing U[i].</li>\r\n    <li>Each line i of the M subsequent lines (where 0 <= i < M) contains an integer describing V[i].</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n3\r\n10\r\n1\r\n2\r\n3\r\n1\r\n2\r\n3\r\n4\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> We get the best score by performing any two operations to obtain a graph with a single node.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n3\r\n-10\r\n1\r\n-2\r\n-3\r\n1\r\n2\r\n3\r\n1\r\n2\r\n3\r\n4\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Choose the edge 2-3 and keep the connected component of node 2. The degrees of the resulting tree is {1,1}. Hence the score is 1+1=2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n4\r\n-5\r\n-1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n3\r\n4\r\n5\r\n1\r\n2\r\n3\r\n4\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Choose the edge 3-5 and keep the connected component of node 3. The degrees of the resulting tree are {2,2,1}. Hence the score is -1 + -1 + 1 + 0.</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\nusing namespace std;\r\n\r\nstring trim(string);\r\n\r\n// using ll = long long;\r\n// vector&lt;vector&lt;int&gt;&gt; adj;\r\n// vector&lt;int&gt;A;\r\n\r\nint calculateMaxScore(int N, vector&lt;int&gt; A, vector&lt;int&gt; U, vector&lt;int&gt; V) {\r\n    // Write your code here\r\n    return 0; // Placeholder\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n\r\n    string inputline;\r\n\r\n    getline(cin, inputline);\r\n    int N = stoi(trim(inputline));\r\n\r\n    getline(cin, inputline);\r\n    int M = stoi(trim(inputline));\r\n\r\n    vector&lt;int&gt; A(N);\r\n    for (int j = 0; j < N; j++) {\r\n        getline(cin, inputline);\r\n        A[j] = stoi(trim(inputline));\r\n    }\r\n\r\n    vector&lt;int&gt; U(M);\r\n    for (int j = 0; j < M; j++) {\r\n        getline(cin, inputline);\r\n        U[j] = stoi(trim(inputline));\r\n    }\r\n\r\n    vector&lt;int&gt; V(M);\r\n    for (int j = 0; j < M; j++) {\r\n        getline(cin, inputline);\r\n        V[j] = stoi(trim(inputline));\r\n    }\r\n\r\n    int result = calculateMaxScore(N, A, U, V);\r\n\r\n    cout &lt;&lt; result &lt;&lt; \"\\n\";\r\n\r\n    return 0;\r\n}\r\n\r\n/* utility functions. Don't modify these */\r\nstring trim(string str) {\r\n    if (str.empty())\r\n        return str;\r\n\r\n    size_t firstScan = str.find_first_not_of(' ');\r\n    size_t first = firstScan == string::npos ? str.length() : firstScan;\r\n    size_t last = str.find_last_not_of(' ');\r\n    return str.substr(first, last - first + 1);\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "KFin technologies_26july",
        "company_id": 308
    }
]