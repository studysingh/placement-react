[
    {
        "id": 1715,
        "title": "The Tilted Ledger of Skyport",
        "problem_statement": "<h1>The Tilted Ledger of Skyport</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a long row of rain-terrace columns in Skyport, where the width of each column is 1 and the height of the i<sup>th</sup> column is <code>height[i]</code>.</p>\r\n<p>An earthquake occurred, which caused the ground to rise, hence columns also rose along with it. Some of the columns got cracks as well.</p>\r\n<p>Ground can rise from either left or right in a slope <code>s</code>. If <code>s > 0</code>, the ground rises to the right. If <code>s < 0</code>, it rises to the left. The new height of columns due to this slope can be calculated as:</p>\r\n<pre><code class='language-text'>H[i] = height[i] + s * i</code></pre>\r\n<p>After overnight rain, due to the gaps in the columns, some rainwater remained trapped in the morning. Since there were cracks in the columns as well due to the earthquake, it limits the amount of water that the gaps in the columns can hold after rain. The maximum amount of water the gap above the i-th column can hold due to cracks in adjacent columns causing the leak is represented by <code>cap[i]</code>.</p>\r\n<p><strong>You are given:</strong></p>\r\n<ul>\r\n    <li><code>n</code> — number of columns in a straight line</li>\r\n    <li><code>s</code> — the slope of the ground</li>\r\n    <ul>\r\n        <li>If <code>s > 0</code>, the ground rises to the right</li>\r\n        <li>If <code>s < 0</code>, it rises to the left</li>\r\n    </ul>\r\n    <li><code>height[i]</code> — height of the i-th column</li>\r\n    <li><code>cap[i]</code> — maximum amount of water the gap above i-th column can hold.</li>\r\n</ul>\r\n<p><strong>Your task:</strong> Compute the total water retained across all columns after the storm.</p>\r\n\r\n<h2>Input Format</h2>\r\n<pre><code class='language-text'>n s\r\nheight[0] height[1] ... height[n-1]\r\ncap[0] cap[1] ... cap[n-1]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>|s| &le; 10<sup>9</sup></code></li>\r\n    <li><code>0 &le; height[i], cap[i] &le; 10<sup>9</sup></code></li>\r\n    <li>Each column has width 1.</li>\r\n    <li>Use 64-bit arithmetic.</li>\r\n</ul>\r\n\r\n<h2>Output</h2>\r\n<p>Print a single integer: the total water that remains on the columns after the storm.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5 1\r\n3 0 2 0 4\r\n10 10 10 10 10\r\nOutput: 3</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 5 0\r\n3 0 2 0 4\r\n1 1 0 2 5\r\nOutput: 3</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long solve(int n, long long s, const std::vector<long long>& height, const std::vector<long long>& cap) {\n        // Core logic to compute the total water retained will go here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    long long s;\n    std::cin >> n >> s;\n\n    std::vector<long long> height(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> height[i];\n    }\n\n    std::vector<long long> cap(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> cap[i];\n    }\n\n    Solution solution;\n    long long result = solution.solve(n, s, height, cap);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Inmobi_10oct",
        "company_id": 602
    }
]