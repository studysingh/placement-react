[
    {
        "id": 1198,
        "title": "Minimum Cores for CPU Scheduling",
        "problem_statement": "<h1>Minimum Cores for CPU Scheduling</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>CPU scheduling algorithms are used to efficiently manage the execution of processes. A core can handle one process at a time, but CPUs often have multiple cores.</p>\r\n<p>Given n processes, where the i<sup>th</sup> process starts at <code>start[i]</code> and finishes at <code>end[i]</code> (both inclusive), determine the minimum number of cores needed to handle all processes.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, start = [1, 2, 3], end = [3, 3, 5]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Using 2 cores, the first and second processes finish at time 3. The third process starts at 3. Given the conflict, there must be at least 1 more core.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, start = [1, 4, 7], end = [2, 4, 10]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Using 1 core, processes run from 1 to 2, from 4 to 4, and from 7 to 10. There are no conflicts.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= start[i] &lt;= end[i] &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>start.length == end.length</code></li>\r\n    <li>The number of processes, <code>n</code>, is <code>start.length</code>.</li>\r\n</ul>\r\n\r\n<p>The function signature is provided as:</p>\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'getMinCores' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts following parameters:\r\n *  1. INTEGER_ARRAY start\r\n *  2. INTEGER_ARRAY end\r\n */\r\n\r\nint getMinCores(vector&lt;int&gt; start, vector&lt;int&gt; end) {\r\n\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jpmc_9aug",
        "company_id": 406
    },
    {
        "id": 1199,
        "title": "Game Winner",
        "problem_statement": "```html\r\n<h1>Game Winner</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A chess tournament has n participants numbered 1 to n, each with a unique potential value, <code>potential[i]</code>. Initially, participants queue in order from 1 to n. In each game, the first two participants in the queue compete. The participant with the higher potential wins. The winner remains at the front of the queue, while the loser goes to the end. The tournament continues until a player wins <code>k</code> consecutive games.</p>\r\n<p>Given the potential of the participants and the deciding factor <code>k</code>, find the potential of the winning player.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> Consider n = 4 participants have potential = [3, 2, 1, 4], and k = 2.</p>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Initial position of participants: [1, 2, 3, 4].</li>\r\n    <li>Participants 1 and 2 compete. Their potentials are 3 and 2. Player 1 wins due to the higher potential. Player 1 stays at the front of the queue, and player 2 moves to the back. Now their positions are [1, 3, 4, 2].</li>\r\n    <li>Participants 1 and 3 compete. Their potentials are 3 and 1. 1 wins a second consecutive game. Since k = 2, player 1 has won enough consecutive games.</li>\r\n</ul>\r\n<p><strong>Output:</strong> 3</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\npotential = [1, 3, 2, 4, 5]\r\nk = 2\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Initial position of participants: [1, 2, 3, 4, 5].</li>\r\n    <li><code>potential[1] = 1</code>, <code>potential[2] = 3</code>. Player 2 wins. The positions of participants after match 1: [2, 3, 4, 5, 1].</li>\r\n    <li><code>potential[2] = 3</code>, <code>potential[3] = 2</code>. Player 2 wins. Since <code>k = 2</code>, Player 2 is the winner.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\npotential = [3, 2, 1, 4]\r\nk = 3\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The game proceeds as follows:</p>\r\n<ul>\r\n    <li><strong>Initial:</strong> Queue: [Player 1 (pot 3), Player 2 (pot 2), Player 3 (pot 1), Player 4 (pot 4)]</li>\r\n    <li><strong>Match 1:</strong> Player 1 (pot 3) vs Player 2 (pot 2). Player 1 wins.\r\n        <ul>\r\n            <li>Winner: Player 1 (pot 3). Consecutive wins: 1.</li>\r\n            <li>Loser: Player 2 (pot 2) moves to end.</li>\r\n            <li>Queue: [Player 1 (pot 3), Player 3 (pot 1), Player 4 (pot 4), Player 2 (pot 2)]</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Match 2:</strong> Player 1 (pot 3) vs Player 3 (pot 1). Player 1 wins.\r\n        <ul>\r\n            <li>Winner: Player 1 (pot 3). Consecutive wins: 2.</li>\r\n            <li>Loser: Player 3 (pot 1) moves to end.</li>\r\n            <li>Queue: [Player 1 (pot 3), Player 4 (pot 4), Player 2 (pot 2), Player 3 (pot 1)]</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Match 3:</strong> Player 1 (pot 3) vs Player 4 (pot 4). Player 4 wins.\r\n        <ul>\r\n            <li>Winner: Player 4 (pot 4). Consecutive wins: 1 (Player 1's streak resets).</li>\r\n            <li>Loser: Player 1 (pot 3) moves to end.</li>\r\n            <li>Queue: [Player 4 (pot 4), Player 2 (pot 2), Player 3 (pot 1), Player 1 (pot 3)]</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Match 4:</strong> Player 4 (pot 4) vs Player 2 (pot 2). Player 4 wins.\r\n        <ul>\r\n            <li>Winner: Player 4 (pot 4). Consecutive wins: 2.</li>\r\n            <li>Loser: Player 2 (pot 2) moves to end.</li>\r\n            <li>Queue: [Player 4 (pot 4), Player 3 (pot 1), Player 1 (pot 3), Player 2 (pot 2)]</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Match 5:</strong> Player 4 (pot 4) vs Player 3 (pot 1). Player 4 wins.\r\n        <ul>\r\n            <li>Winner: Player 4 (pot 4). Consecutive wins: 3.</li>\r\n            <li>Since <code>k = 3</code>, Player 4 has won enough consecutive games.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Therefore, the winning player's potential is 4.</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jpmc_9aug",
        "company_id": 406
    }
]