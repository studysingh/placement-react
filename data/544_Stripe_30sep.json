[
    {
        "id": 1550,
        "title": "Card Range Obfuscation",
        "problem_statement": "<h1>Card Range Obfuscation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Payment card numbers are composed of eight to nineteen digits, the leading six of which are referred to as the bank identification number (BIN). Stripe's card metadata API exposes information about different card brands within each BIN range, by returning a mapping of card intervals to brands.</p>\r\n<p>However, a given BIN range may have gaps at the beginning, middle, or end of the range where no valid cards are present. This information can be used by fraudsters to test for valid credit cards with a high degree of probability. To prevent fraudsters from abusing the data gaps, we must fill in missing values by extending the returned intervals to cover the entire range.</p>\r\n<p>A BIN range refers to all the 16-digit card numbers starting with a given BIN: for example, a BIN of 424242 has a range of 4242420000000000 to 4242429999999999, inclusive.</p>\r\n<p>An interval is a subset of a BIN range, also inclusive.</p>\r\n<p>In this problem, we'll be taking as input a 6-digit BIN and a list of 10-digit intervals within the BIN range corresponding to brands. We'll return a list of sorted intervals covering the entire BIN range (i.e. for a BIN of 424242, covering 4242420000000000 to 4242429999999999, inclusive).</p>\r\n\r\n<h2>Input format</h2>\r\n<p>Your input will consist of one line containing a six-digit BIN, one line containing a positive integer N, and N lines containing intervals and their corresponding brands.</p>\r\n<p>The format of each interval is start, end, brand, where start and end are the 10 digits following the input BIN and brand is an alphanumeric string.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example:</h3>\r\n<pre><code class='language-text'>Input:\r\n777777\r\n2\r\n1000000000,3999999999,VISA\r\n4000000000,5999999999,MASTERCARD\r\nOutput:\r\n7777770000000000,7777773999999999,VISA\r\n7777774000000000,7777779999999999,MASTERCARD</code></pre>\r\n\r\n<h2>Output format</h2>\r\n<p>Your output will consist of one or more lines containing the resulting intervals and their corresponding brands. The output intervals should be sorted by start.</p>\r\n\r\n<h2>Part 1</h2>\r\n<p>For the first set of testcases, you'll be given a set of non-overlapping intervals with gaps on the lower end and/or higher end of the BIN range. You're expected to extend the lowest interval to the lower boundary of the BIN range, and the highest interval to the higher boundary of the BIN range. This will be sufficient to solve the first 4 test cases.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Explanation:</strong> the VISA interval was extended on the lower and higher ends to cover the BIN range.</p>\r\n<pre><code class='language-text'>Input:\r\n424242\r\n1\r\n5000000000,6555555555,VISA\r\nOutput:\r\n4242420000000000,4242429999999999,VISA</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Explanation:</strong> the VISA interval was extended on the lower end and the Mastercard interval was extended on the higher end.</p>\r\n<pre><code class='language-text'>Input:\r\n424242\r\n2\r\n4000000000,8999999999,MASTERCARD\r\n1000000000,3999999999,VISA\r\nOutput:\r\n4242420000000000,4242423999999999,VISA\r\n4242424000000000,4242429999999999,MASTERCARD</code></pre>\r\n\r\n<h2>Part 2</h2>\r\n<p>For the second set of testcases, the set of non-overlapping intervals can also contain gaps in between known intervals. In these cases, the interval on the lower end of the gap will be extended to fill the gap. This will be sufficient to solve the next 4 test cases.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Explanation:</strong> the VISA interval was extended on the higher end to fill the gap, up to the Mastercard interval.</p>\r\n<pre><code class='language-text'>Input:\r\n424242\r\n2\r\n0000000000,3700000000,VISA\r\n6100000000,9999999999,MASTERCARD\r\nOutput:\r\n4242420000000000,4242426099999999,VISA\r\n4242426100000000,4242429999999999,MASTERCARD</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Explanation:</strong> the VISA interval was extended on the higher end to fill the gap up to the Mastercard interval. The Mastercard interval is extended on the higher end to fill the gap up to the Amex interval. The VISA interval is extended on the lower end following the requirements in Part 1.</p>\r\n<pre><code class='language-text'>Input:\r\n424242\r\n3\r\n1000000000,1299999999,VISA\r\n1900000000,9999999999,AMEX\r\n1500000000,1699999999,MASTERCARD\r\nOutput:\r\n4242420000000000,4242421499999999,VISA\r\n4242421500000000,4242421899999999,MASTERCARD\r\n4242421900000000,4242429999999999,AMEX</code></pre>\r\n\r\n<h2>Part 3</h2>\r\n<p>For the third set of testcases, the input may contain intervals that are proper subsets of other intervals. When extending an interval to cover a gap, you should only extend the covering interval. This will be sufficient to solve the next 2 testcases.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Explanation:</strong> the first Visa interval and second CB interval are extended.</p>\r\n<pre><code class='language-text'>Input:\r\n424242\r\n4\r\n1000000000,5000000000,VISA\r\n2000000000,4000000000,CB\r\n6000000000,9000000000,CB\r\n7000000000,8000000000,VISA\r\nOutput:\r\n4242420000000000,4242425999999999,VISA\r\n4242426000000000,4242426999999999,CB\r\n4242427000000000,4242428000000000,VISA\r\n4242428100000000,4242429999999999,CB</code></pre>\r\n\r\n<h2>Part 4</h2>\r\n<p>For the fourth set of testcases, adjacent intervals (i.e. intervals with no gaps in between) with the same brand after extending should be merged into one interval in the output. This will be sufficient to solve the next 3 testcases.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Explanation:</strong> the two adjacent VISA intervals were merged.</p>\r\n<p><strong>Input:</strong> (Input data for this example is not fully visible in the provided image.)</p>\r\n<p><strong>Output:</strong> (Output data for this example is not visible in the provided image.)</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Stripe_30sep",
        "company_id": 544
    }
]