[
    {
        "id": 1288,
        "title": "Minimum Operations to Make Array a Tree",
        "problem_statement": "<h1>Minimum Operations to Make Array a Tree</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In Hackerland, a town can be represented as a tree graph. An array <code>arr</code> can represent a town if:</p>\r\n<ol>\r\n    <li>There exists exactly one index <code>i</code> such that <code>arr[i] == -1</code> (representing the root node).</li>\r\n    <li>If we create a graph of <code>n</code> nodes such that node <code>arr[i]</code> is connected to node <code>i</code> (with 1-based indexing), then the graph forms a tree.</li>\r\n</ol>\r\n<p>Given an adjacency list <code>arr</code> of <code>n</code> integers, you can change <code>arr[i]</code> to any integer in one operation. Find the minimum number of operations required to make the array represent a town of Hackerland.</p>\r\n<p>Complete the function <code>findMinOperations</code> in the editor with the following parameter:</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: the parents of each node</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<p><code>int</code>: the minimum number of operations required to make <code>arr</code> a tree</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [2,1,3]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Change <code>arr[0]</code> to 3 and <code>arr[2]</code> to -1. The final array is <code>[3, 1, -1]</code>. Node 3 is the root of the tree since <code>arr[2]</code> (which corresponds to node 3 in 1-based indexing) is -1. The minimum number of operations is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [6,5,8,4]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Change <code>arr[0]</code> to -1, <code>arr[2]</code> to 4, and <code>arr[3]</code> to 1. The final array is <code>[-1, 4, 1, 1]</code>. There are multiple ways to create a valid parent array using 4 operations, like converting <code>arr</code> to <code>[-1, 1, 4, 1]</code> or <code>[-1, 3, 4, 1]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 <= arr[i] <= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Linkedin_31aug",
        "company_id": 445
    },
    {
        "id": 1289,
        "title": "Count Integers with Divisible Digit Sum",
        "problem_statement": "<h1>Count Integers with Divisible Digit Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Find the number of positive integers less than or equal to <code>k</code> such that the sum of their digits is divisible by <code>m</code>.</p>\r\n<p>Since the answer can be large, report it modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>countIntegers</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>long k</code>: test the range from 1 through <code>k</code></li>\r\n    <li><code>int m</code>: the target sum</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the count of numbers that are less than or equal to <code>k</code> such that their sum of the digits is divisible by <code>m</code>, modulo (10<sup>9</sup> + 7)</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: k = 30, m = 4</code></pre>\r\n<p><strong>Explanation:</strong> The numbers less than or equal to 30 with a sum of digits divisible by 4 are:</p>\r\n<ul>\r\n    <li>4 (sum = 4)</li>\r\n    <li>8 (sum = 8)</li>\r\n    <li>13 (sum = 1+3 = 4)</li>\r\n    <li>17 (sum = 1+7 = 8)</li>\r\n    <li>22 (sum = 2+2 = 4)</li>\r\n    <li>26 (sum = 2+6 = 8)</li>\r\n</ul>\r\n<pre><code class='language-text'>Output: 6 (6 modulo (10^9 + 7) = 6)</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: k = 20, m = 5\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The values in the range whose sum of digits is divisible by 5 are 5, 14, and 19.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: k = 10, m = 2\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The values in the range whose sum of digits is divisible by 2 are 2, 4, 6, 8.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; k &le; 10<sup>15</sup></code></li>\r\n    <li><code>1 &le; m &le; 100</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Linkedin_31aug",
        "company_id": 445
    },
    {
        "id": 1290,
        "title": "Maximum Redundancy",
        "problem_statement": "<h1>Maximum Redundancy</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are n servers in a data center. The operational status of each server is given by the binary string <code>servers</code>, where <code>servers[i] = '1'</code> if the i-th server is operational, and <code>servers[i] = '0'</code> if it is not.</p>\r\n<p>The data center can perform at most one operation: select a consecutive sequence of servers and switch their operational status. This means that operational servers in the selected sequence become non-operational, and non-operational servers become operational.</p>\r\n<p>The redundancy of the system refers to the number of unique values representing the number of operational servers across all possible configurations after the operation. Each distinct count of operational servers contributes to this redundancy. Determine the maximum redundancy of this system.</p>\r\n\r\n<p><strong>Function Parameters:</strong></p>\r\n<ul>\r\n<li><code>string servers</code>: a string indicating the operational status of servers.</li>\r\n</ul>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n<li><code>int</code>: the number of distinct operational servers at any moment.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: servers = \"0011\"</code></pre>\r\n<p><strong>Explanation:</strong> The initial number of active servers is 2. We can perform the following operations (including no operation) to achieve different counts of active servers:</p>\r\n<ul>\r\n<li><strong>Operation on substring range [2,3]:</strong> Servers \"0011\" become \"0000\". Number of active servers: 0.</li>\r\n<li><strong>Operation on substring range [3,3]:</strong> Servers \"0011\" become \"0010\". Number of active servers: 1.</li>\r\n<li><strong>No operation:</strong> Servers \"0011\". Number of active servers: 2.</li>\r\n<li><strong>Operation on substring range [0,2]:</strong> Servers \"0011\" become \"1101\". Number of active servers: 3.</li>\r\n<li><strong>Operation on substring range [0,1]:</strong> Servers \"0011\" become \"1111\". Number of active servers: 4.</li>\r\n</ul>\r\n<p>Hence, the data center can achieve {0, 1, 2, 3, 4} different numbers of operational servers. It is not possible to have any other number of operational servers concurrently. Therefore, the function should return 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: servers = \"0110\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The initial number of active servers is 2. We can perform the following operations (including no operation) to achieve different counts of active servers:</p>\r\n<ul>\r\n<li><strong>Operation on substring range [1,2]:</strong> Servers \"0110\" become \"0000\". Number of active servers: 0.</li>\r\n<li><strong>Operation on substring range [1,1]:</strong> Servers \"0110\" become \"0010\". Number of active servers: 1.</li>\r\n<li><strong>No operation:</strong> Servers \"0110\". Number of active servers: 2.</li>\r\n<li><strong>Operation on substring range [0,0]:</strong> Servers \"0110\" become \"1110\". Number of active servers: 3.</li>\r\n</ul>\r\n<p>Hence, the data center can achieve {0, 1, 2, 3} different numbers of operational servers. Therefore, the function should return 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= |servers| <= 3 * 10^5</code></li>\r\n<li>The string <code>servers</code> contains only characters '0' and '1'.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Linkedin_31aug",
        "company_id": 445
    },
    {
        "id": 1291,
        "title": "Maximum Reliability Connections",
        "problem_statement": "<h1>Maximum Reliability Connections</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A distributed system is represented as a connected tree graph with the following properties:</p>\r\n<ul>\r\n    <li><code>g_nodes</code> servers numbered from <code>0</code> to <code>g_nodes - 1</code>.</li>\r\n    <li><code>g_nodes - 1</code> connections forming a tree structure.</li>\r\n    <li>Each connection links servers <code>g_from[i]</code> and <code>g_to[i]</code> with reliability <code>g_weight[i]</code>.</li>\r\n</ul>\r\n<p>To reduce maintenance costs, the developers need to remove some connections so that no server has more than <code>k</code> connections attached to it. Your task is to:</p>\r\n<ul>\r\n    <li>Determine which connections to remove.</li>\r\n    <li>Ensure no server has more than <code>k</code> connections after removal.</li>\r\n    <li>Calculate the maximum possible total reliability (sum of <code>g_weight</code> values) of the remaining connections.</li>\r\n</ul>\r\n<p><strong>Note:</strong> The total reliability is the sum of the <code>g_weight</code> values for all connections that remain after the removal process.</p>\r\n\r\n<p>Complete the function <code>getMaxReliability</code> with the following parameters:</p>\r\n<ul>\r\n    <li><code>int k</code>: An integer representing the maximum allowed connections per server.</li>\r\n    <li><code>int g_nodes</code>: The number of nodes (servers) in the graph.</li>\r\n    <li><code>vector&lt;int&gt; g_from</code>: A list where <code>g_from[i]</code> is one end of an edge.</li>\r\n    <li><code>vector&lt;int&gt; g_to</code>: A list where <code>g_to[i]</code> is the other end of an edge.</li>\r\n    <li><code>vector&lt;int&gt; g_weight</code>: A list where <code>g_weight[i]</code> is the weight (reliability) of the edge.</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>long int</code>: The maximum total reliability of the remaining connections.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ng_nodes = 5\r\ng_from = [0, 0, 2, 2]\r\ng_to = [1, 2, 3, 4]\r\ng_weight = [10, 5, 30, 15]\r\nk = 2\r\nOutput: 55</code></pre>\r\n<p><strong>Explanation:</strong> The initial graph has edges (0,1) weight 10, (0,2) weight 5, (2,3) weight 30, (2,4) weight 15. Node 0 has 2 connections, Node 1 has 1, Node 2 has 3, Node 3 has 1, Node 4 has 1. Since k=2, Node 2 exceeds the limit. We can remove the edge connecting nodes 0 and 2 (weight 5). After removal, Node 0 has 1 connection, Node 1 has 1, Node 2 has 2, Node 3 has 1, Node 4 has 1. All nodes now have at most k=2 edges. The total reliability of the remaining connections is 30 + 15 + 10 = 55.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nk = 0\r\ng_nodes = 3\r\ng_from = [0, 0]\r\ng_to = [1, 2]\r\ng_weight = [4, 10]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Each server is allowed to keep at most k = 0 connections, so we must remove all the connections. Thus, the total reliability of the remaining connections is 0.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nk = 2\r\ng_nodes = 4\r\ng_from = [0, 1, 2]\r\ng_to = [1, 2, 3]\r\ng_weight = [1, 1, 1]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> No servers have more than k = 2 connections, so we can keep all the edges. The total reliability is 1 + 1 + 1 = 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= g_nodes &lt;= 10^6</code></li>\r\n    <li><code>0 &lt;= g_from[i] &lt; g_nodes</code></li>\r\n    <li><code>0 &lt;= g_to[i] &lt; g_nodes</code></li>\r\n    <li><code>1 &lt;= g_weight[i] &lt;= 10^6</code></li>\r\n    <li><code>0 &lt;= k &lt;= g_nodes</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Linkedin_31aug",
        "company_id": 445
    },
    {
        "id": 1292,
        "title": "Maximum Profit with K Months",
        "problem_statement": "<h1>Maximum Profit with K Months</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You need to analyze the performance of investments in a stock. The profit and loss (PnL) for each month is represented in an array where each value indicates the profit earned (positive value) or loss incurred (negative value) in that month.</p>\r\n<p>Your task is to find the maximum net profit that can be gained from any contiguous segment of months, with the constraint that the segment cannot exceed a given number of months <code>k</code>.</p>\r\n<p>Complete the function <code>getMaxProfit</code> in the editor. The function is expected to return a <code>long_int</code>, representing the sum of a contiguous subarray of size <code>k</code> or less that has the largest sum.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>pnl</code>: An integer array representing monthly profits and losses.</li>\r\n    <li><code>k</code>: An integer representing the maximum number of months to consider.</li>\r\n</ul>\r\n<p>The C++ function signature is:</p>\r\n<pre><code class='language-cpp'>long getMaxProfit(vector&lt;int&gt; pnl, int k)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: pnl = [-3, 4, 3, -2, 2, 5], k = 4\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> The optimal subarray is <code>[3, -2, 2, 5]</code> with a total profit of 3 + (-2) + 2 + 5 = 8. While the subarray <code>[4, 3, -2, 2, 5]</code> has a higher profit of 12, its length (5) exceeds the constraint <code>k = 4</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: pnl = [4, 3, -2, 9, -4, 2, 7], k = 6\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> We can select the subarray <code>[3, -2, 9, -4, 2, 7]</code> with a sum of 15 and size 6, which is equal to <code>k</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: pnl = [2, 5, -7, 8, -6, 4, 1, -9], k = 5\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> We can select the subarray <code>[2, 5, -7, 8]</code> with a sum of 8 and size 4, which is less than <code>k</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10^5</code></li>\r\n    <li><code>-10^9 &le; pnl[i] &le; 10^9</code></li>\r\n    <li><code>1 &le; k &le; n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Linkedin_31aug",
        "company_id": 445
    }
]