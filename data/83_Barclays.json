[
    {
        "id": 288,
        "title": "Project Work Weeks",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <h1>Project Work Weeks</h1>\\n        <p>\\n            An employee in an organization has begun working on N projects (numbered 0 to N-1). Each week he/she can work on a single module of one of the projects. The modules are chosen by the employee based on the number of modules from different projects. A project can have at most C modules. The modules of the projects are such that it can be completed in a week.\\n        </p>\\n        <p>\\n            Write an algorithm to determine the number of weeks the employee can work on projects following the above-mentioned rules.\\n        </p>\\n    </div>\\n    \\n    <div class=\\\\\\\"input-format\\\\\\\">\\n        <h3>Input Format</h3>\\n        <p>\\n            The first line of the input consists of an integer <code>num</code>, representing the number of projects (N). The next line consists of N space-separated integers: <code>projC<sub>0</sub>, projC<sub>1</sub>, ..., projC<sub>N-1</sub></code>, representing the number of modules of the projects.\\n        </p>\\n    </div>\\n    \\n    <div class=\\\\\\\"output-format\\\\\\\">\\n        <h3>Output Format</h3>\\n        <p>\\n            Print an integer representing the maximum number of weeks the employee can work on the projects.\\n        </p>\\n    </div>\\n    \\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ num ≤ 10<sup>4</sup></li>\\n            <li>1 ≤ projC<sub>i</sub> ≤ 10<sup>7</sup></li>\\n            <li>Σ projC<sub>i</sub> ≤ 10<sup>5</sup></li>\\n            <li>0 ≤ i &lt; num</li>\\n        </ul>\\n    </div>\\n    \\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Examples</h3>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n7\\n2 3 3</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n11</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>\\n                    The employee can work on the projects for a maximum of 11 weeks by choosing modules optimally.\\n                </p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1XTXOfxQwEGV8enzFNb_6yLihjb4OHJQT_NgkuORhGPU/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 292,
        "title": "Product Frequency Analysis",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Product Frequency Analysis</h2>\n        <div class=\\\"language-info\\\">\n            <span class=\\\"compiler\\\">GCC 5.5.0</span>\n            <span class=\\\"language\\\">C</span>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The manager of the grocery company tagGrocery wishes to identify which products are most frequently purchased by the customers. He selects N customers that purchase combo bags of products. Each combo bag consists of M products and each product is labeled with a productID.</p>\n        <p>He needs to find the productIDs of the products that are purchased by all the N customers in common.</p>\n        <p>Write an algorithm to help the manager find the lexicographically sorted productIDs of the products that are most frequently purchased by all the N customers.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of the input consists of two space-separated integers - <code>customers</code> and <code>products</code>, representing the number of customers selected by the manager (N) and the number of products in the bag of the customer (M), respectively.</p>\n        <p>Next N lines consist of M space-separated integers - <code>tag[0]</code>, <code>tag[1]</code>, ..., <code>tag[M-1]</code>, representing the productIDs of the products that are present in the combo bag of each customer.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print space-separated integers representing the lexicographically sorted productIDs of the products that are most frequently purchased by all the N customers.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ customers, products ≤ 10³</li>\n            <li>0 ≤ tag[i] ≤ 10⁹</li>\n            <li>0 ≤ i ≤ products -1</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 4\n8 2 3 2\n2 3 4 8\n8 3 11 12\n2 3 6 8</pre>\n            <pre class=\\\"output\\\">Output:\n3 8</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The products with the productIDs 3 and 8 are purchased by all the N customers. So, the output is [3 8].</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <p>Note: We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use printf() to debug your code. The printf() may not work in case of syntax/runtime error.</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/15sPfr7AUDpOVEqpmDJgG6BhvRl_oJuGOiyK81wqsMNU/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 299,
        "title": "Minimum Cable Length",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <div class=\\\\\\\"problem-header\\\\\\\">\\n        <h1>Minimum Cable Length</h1>\\n    </div>\\n\\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <p>The computer systems of N employees of a company are arranged in a row. A technical fault in the power supply has caused some of the systems to turn OFF while the others remain ON. Because of this, the employees whose systems are OFF are unable to work. The company does not like to see its employees sitting idle. So until the technical team can find the actual cause of the breakdown, the technical head Adam has devised a temporary workaround for the OFF systems at a minimum cost. Adam decides to connect all the OFF systems to the nearest ON system with the shortest possible length of cable. To make this happen, he calculates the distance of each system from the first system.</p>\\n        \\n        <p>Write an algorithm to help Adam find the minimum length of cable he needs to turn all the systems ON.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"input-format\\\\\\\">\\n        <h3>Input Format</h3>\\n        <p>The first line of the input consists of an integer <code>systemState_size</code>, representing the number of systems (N).</p>\\n        <p>The second line consists of N space-separated integers <code>systemState[1], systemState[2], ..., systemState[N]</code> representing the initial state of each system, ON (1) or OFF (0).</p>\\n        <p>The third line consists of an integer <code>dist_size</code>, representing the number of distances (M).</p>\\n        <p>The last line consists of M space-separated integers <code>dist[1], dist[2], ..., dist[M]</code>, representing the distance of each system from the first system.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"output-format\\\\\\\">\\n        <h3>Output Format</h3>\\n        <p>Print an integer representing the minimum length of cable Adam needs to turn all the systems ON. If no cable is needed then print 0.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ <code>systemState_size</code>, <code>dist_size</code> ≤ 10<sup>5</sup></li>\\n            <li>1 ≤ <code>dist[i]</code> ≤ 10<sup>9</sup></li>\\n            <li>1 ≤ <em>i</em> ≤ <code>dist_size</code></li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"note\\\\\\\">\\n        <h3>Note</h3>\\n        <p>It is guaranteed that at least one system is ON and none of the systems are faulty.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Example</h3>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n3\\n1 0 0\\n3\\n1 5 6</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n5</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>Length of cable required to connect the 2nd system to the 1st system = 4.</p>\\n                <p>Length of cable required to connect the 3rd system to the 2nd system = 1.</p>\\n                <p>Total length of cable = 5 (4+1).</p>\\n                <p>So, the output is 5.</p>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\\\\\"code-template\\\\\\\">\\n        <h3>Code Template</h3>\\n        <pre class=\\\\\\\"cpp\\\\\\\"><code>// Header Files\\n#include &lt;iostream&gt;\\n#include &lt;string&gt;\\n#include &lt;vector&gt;\\nusing namespace std;\\n\\nint minLength(vector&lt;int&gt; systemState, vector&lt;int&gt; dist) {\\n    int answer;\\n    // Write your code here\\n    return answer;\\n}\\n\\nint main() {\\n    // Input for systemState\\n    int systemState_size;\\n    cin &gt;&gt; systemState_size;\\n    vector&lt;int&gt; systemState;\\n    for (int idx = 0; idx &lt; systemState_size; idx++) {\\n        int temp;\\n        cin &gt;&gt; temp;\\n        systemState.push_back(temp);\\n    }\\n\\n    // Input for dist\\n    int dist_size;\\n    cin &gt;&gt; dist_size;\\n    vector&lt;int&gt; dist;\\n    for (int idx = 0; idx &lt; dist_size; idx++) {\\n        int temp;\\n        cin &gt;&gt; temp;\\n        dist.push_back(temp);\\n    }\\n\\n    return 0;\\n}</code></pre>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/15002bzhDFkyGyaPyyl7pA3CRsvMd2M58r8u1xkwzT1Y/edit?usp=sharing",
        "solution_code": "#include <iostream>\\n#include <vector>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\nll minLength(vector<int> systemState, vector<int> dist) {\\n    int N = systemState.size();\\n    vector<ll> prefix_diffs(N, 0);\\n    for(int i = 1; i < N; ++i){\\n        prefix_diffs[i] = prefix_diffs[i-1] + (ll)(dist[i] - dist[i-1]);\\n    }\\n    \\n    vector<int> on_indices;\\n    for(int i = 0; i < N; ++i){\\n        if(systemState[i] == 1){\\n            on_indices.push_back(i);\\n        }\\n    }\\n    \\n    ll total_sum = 0;\\n    \\n    int first_ON = on_indices[0];\\n    if(first_ON > 0){\\n        total_sum += prefix_diffs[first_ON - 1];\\n    }\\n    \\n    for(int i = 1; i < on_indices.size(); ++i){\\n        int prev_ON = on_indices[i-1];\\n        int current_ON = on_indices[i];\\n        if(current_ON - prev_ON > 1){\\n            total_sum += prefix_diffs[current_ON - 1] - prefix_diffs[prev_ON];\\n        }\\n    }\\n    \\n    int last_ON = on_indices.back();\\n    if(last_ON < N - 1){\\n        total_sum += prefix_diffs[N - 1] - prefix_diffs[last_ON];\\n    }\\n    \\n    return total_sum;\\n}",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 300,
        "title": "Distance Covered by City Buses",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Distance Covered by City Buses</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The city bus stations are located at equal distances (unit distance) from each other along a straight road. Each station has a unique station ID. The buses do not travel to all of the bus stations. The highway administration needs to determine the total distance that the buses cover.</p>\n        \n        <p>Given the IDs of the bus stations that have a bus operating between them, write an algorithm to help the administration find the distance covered by all the city buses.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of the input consists of two space-separated integers <code>num</code> and <code>constM</code>, representing the number of buses (N) and <code>constM</code> is always 2.</p>\n        <p>Next N lines consist of <code>constM</code> space-separated integers - <code>busStop0</code> and <code>busStop1</code>, representing the IDs of the bus stations that have a bus operating between them.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the distance covered by the buses.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 ≤ <code>num</code> ≤ 10<sup>5</sup></li>\n            <li>1 ≤ <code>busStop0</code> &lt; <code>busStop1</code> ≤ 10<sup>6</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3 2\n2 3\n3 5\n6 7</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The buses cover the distance between the bus stations: [2,3], [3,4], [5,6], [6,7].</p>\n                <p>Thus, the total distance covered by the city buses is 4 units. So, the output is 4.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>// Header Files\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n/*\n * busStop, a 2D array representing the IDs of the bus stations having a bus operating between them.\n */\nint distanceCovered(vector&lt;vector&lt;int&gt;&gt; busStops) {\n    int answer;\n    // Write your code here\n    return answer;\n}\n\nint main() {\n    // Input for busStops\n    int busStops_row;\n    int busStops_col;\n    cin &gt;&gt; busStops_row;\n    cin &gt;&gt; busStops_col;\n\n    vector&lt;vector&lt;int&gt;&gt; busStops;\n    for (int idx = 0; idx &lt; busStops_row; idx++) {\n        vector&lt;int&gt; temp_vector;\n        for (int jdx = 0; jdx &lt; busStops_col; jdx++) {\n            int temp;\n            cin &gt;&gt; temp;\n            temp_vector.push_back(temp);\n        }\n        busStops.push_back(temp_vector);\n    }\n\n    return 0;\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1RjEFTY7LEeXhVOAawKgJNfg1CcDkA5LnIKZcBgpaUyc/edit?usp=sharing",
        "solution_code": "#include<iostream>\\n#include<string>\\n#include<vector>\\n#include<algorithm>\\nusing namespace std;\\n\\nint dist(vector<vector<int>> stops) {\\n    int n = stops.size(), total = 0;\\n    if(n == 0) return 0;\\n    vector<pair<int, int>> iv;\\n    for(int i = 0; i < n; i++) {\\n        int a = min(stops[i][0], stops[i][1]);\\n        int b = max(stops[i][0], stops[i][1]);\\n        iv.push_back({a, b});\\n    }\\n    sort(iv.begin(), iv.end());\\n    int s = iv[0].first, e = iv[0].second;\\n    for(int i = 1; i < iv.size(); i++) {\\n        if(iv[i].first <= e) {\\n            e = max(e, iv[i].second);\\n        } else {\\n            total += e - s;\\n            s = iv[i].first;\\n            e = iv[i].second;\\n        }\\n    }\\n    total += e - s;\\n    return total;\\n}\\n\\nint main() {\\n    int rows, cols;\\n    cin >> rows >> cols;\\n    vector<vector<int>> stops;\\n    for(int i = 0; i < rows; i++) {\\n        vector<int> v;\\n        for(int j = 0; j < cols; j++) {\\n            int t;\\n            cin >> t;\\n            v.push_back(t);\\n        }\\n        stops.push_back(v);\\n    }\\n    cout << dist(stops) << endl;\\n}",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 301,
        "title": "Oil Pipeline Network",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Oil Pipeline Network</h1>\n        <div class=\\\"language-info\\\">\n            <span class=\\\"language\\\">Java</span>\n            <span class=\\\"version\\\">JDK 1.8</span>\n        </div>\n    </div>\n\n    <div class=\\\"important-note\\\">\n        <p><strong>Note:</strong> The main class name must be \\\"Solution\\\".</p>\n        <p>We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use System.out.println() to debug your code. The System.out.println() may not work in case of syntax/runtime error.</p>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Theon is an energy engineer. His job is to transport oil from the base refinery to the main storage units through a network of pipes. The network is in the form of a tree, where the base refinery is the root and the main storage units are the leaves. The pipes are connected to the storage units via internal connection stations. The pipes can have different transfer rates [liter of oil per unit of time]. He wishes to determine the maximum amount of oil that can be transported via the network at any given time.</p>\n        \n        <p>Write an algorithm to help Theon find the maximum amount of oil that can be transported via the network at any given time.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer - <code>num</code>, representing the number of stations in the network (N).</li>\n            <li>The second line consists of an integer - <code>baseR</code>, representing the index of the base refinery in the network (S).</li>\n            <li>The third line consists of two space-separated integers - <code>numCon</code> and <code>charCon</code>, representing the number of connections in the network (<code>numCon</code>(M) is always equal to N-1) and given characteristics of each connection (<code>charCon</code>(P) is always equal to 3), respectively.</li>\n            <li>The next M lines consist of P space-separated integers - <code>start</code>, <code>end</code> and <code>rate</code>, representing the starting node of the pipe, the ending node of the pipe, and the transfer rate of the pipe, respectively.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the maximum amount of oil that can be transported via the network at any given time.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>3 ≤ <code>num</code> ≤ 10<sup>5</sup></li>\n            <li>1 ≤ <code>baseR</code> ≤ 10<sup>5</sup></li>\n            <li>1 ≤ <code>rate</code> ≤ 10<sup>3</sup></li>\n            <li><code>numCon</code> = num-1</li>\n            <li><code>charCon</code> = 3</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n4\n5 3\n4 2 10\n4 6 20\n4 1 30\n1 3 50\n1 5 80</pre>\n            <pre class=\\\"output\\\">Output:\n60</pre>\n            <div class=\\\"explanation\\\">\n                <p>The network forms a tree structure with node 4 as the base refinery. The maximum flow that can be achieved through this network is 60 units of oil per unit time.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"java\\\"><code>public class Solution {\n    public int findMaxFlow(int num, int baseR, int[][] pipes) {\n        // Write your code here\n        return 0;\n    }\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1SWQVWs3mHdF7fD7Nxo0Ntxq_dkJmQ2lyeqlFvLmqVJk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 302,
        "title": "Minimum Possible Length",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Minimum Possible Length</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The task is to calculate the minimum possible length of cable required to connect a starting retailer to a head retailer through a series of intermediate retailers. The retailers are positioned along the X-axis, and the head retailer is located at a specific coordinate.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>An integer <code>posK</code>, representing the position of the starting retailer.</li>\n            <li>A list <code>retailerXCord</code> of integers, representing the X-coordinates of the retailers.</li>\n            <li>An integer <code>headXCord</code>, representing the X-coordinate of the head retailer.</li>\n            <li>An integer <code>headYCord</code>, representing the Y-coordinate of the head retailer.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a double representing the minimum possible length of cable required.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ <code>posK</code> ≤ 10<sup>5</sup></li>\n            <li>1 ≤ <code>retailerXCord[i]</code> ≤ 10<sup>5</sup></li>\n            <li>1 ≤ <code>headXCord</code>, <code>headYCord</code> ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nposK = 2\nretailerXCord = [1, 3, 5]\nheadXCord = 6\nheadYCord = 8</pre>\n            <pre class=\\\"output\\\">Output:\n10.0</pre>\n            <div class=\\\"explanation\\\">\n                <p>The minimum cable length is calculated based on the positions of the retailers and the head retailer.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>// Header Files\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\n/*\n * posK is the position of the starting retailer.\n * retailerXCord is a list representing the X-coordinates of retailers.\n * headXCord is the X-coordinate of the head retailer.\n * headYCord is the Y-coordinate of the head retailer.\n */\ndouble minPossLen(int posK, vector&lt;int&gt; retailerXCord, int headXCord, int headYCord) {\n    double answer;\n    // Write your code here\n    return answer;\n}\n\nint main() {\n    // Input for posK\n    int posK;\n    cin &gt;&gt; posK;\n\n    // Input for retailerXCord\n    int retailerXCord_size;\n    cin &gt;&gt; retailerXCord_size;\n    vector&lt;int&gt; retailerXCord;\n    for (int idx = 0; idx &lt; retailerXCord_size; idx++) {\n        int temp;\n        cin &gt;&gt; temp;\n        retailerXCord.push_back(temp);\n    }\n\n    // Input for headXCord and headYCord\n    int headXCord, headYCord;\n    cin &gt;&gt; headXCord &gt;&gt; headYCord;\n\n    return 0;\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1x5yM_UhQQkZv5DXCJfFRjlCxOBDa4e80SfZnO1WQ7qQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 303,
        "title": "Maximum Toll Revenue Road",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Maximum Toll Revenue Road</h1>\n        <div class=\\\"language-info\\\">\n            <span class=\\\"language\\\">CPP</span>\n            <span class=\\\"version\\\">GCC 5.5.0</span>\n        </div>\n    </div>\n\n    <div class=\\\"important-note\\\">\n        <p><strong>Note:</strong> We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error.</p>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>In a state, N cities with unique city codes from 1 to N are connected by N-1 roads. The road network is in the form of a tree, where each road connects two cities. A path is a road or a combination of roads connecting any two cities. Each road has a toll booth that collects a toll equal to the maximum number of paths of which that particular road is part. The state transportation authority wants to identify the road on which the maximum toll revenue is collected.</p>\n        \n        <p>Write an algorithm to help the transportation authority identify the pair of cities connected by the road on which the maximum toll revenue is collected. The output should be sorted in increasing order. If more than one road collects the same total revenue, output the pair of cities that have the smaller city code.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer - <code>num</code>, representing the number of cities in the state (N).</li>\n            <li>The next line consists of two space-separated integers - <code>roads</code> and <code>numCities</code>, representing the number of roads (R) and the number of cities directly connected by a road (X=2 always), respectively.</li>\n            <li>The next R lines consist of X space-separated integers - <code>city1</code> and <code>city2</code>, representing the cities connected by a road.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print two space-separated sorted integers representing the cities connected by the road on which the maximum toll revenue is collected. If two or more toll booths collect the same total revenue, print the pair of cities with lexicographically smaller codes.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ <code>num</code> ≤ 10<sup>5</sup></li>\n            <li><code>roads</code> = num - 1</li>\n            <li><code>numCities</code> = 2</li>\n            <li>1 ≤ <code>city1</code>, <code>city2</code> ≤ num</li>\n        </ul>\n    </div>\n\n    <div class=\\\"note\\\">\n        <h3>Note</h3>\n        <p>There is only one path between any two cities. One city can be connected to at most 10 other cities.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n4 2\n1 2\n2 3\n3 4\n4 5</pre>\n            <pre class=\\\"output\\\">Output:\n2 3</pre>\n            <div class=\\\"explanation\\\">\n                <p>The road between cities 2 and 3 has the maximum toll revenue as it is part of the most paths.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1in3J7vAOiGAQjYDSyIDonpoV5iE7-XbrrfboY5tA444/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 304,
        "title": "Common Town Name",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Common Town Name</h1>\n        <div class=\\\"language-info\\\">\n            <span class=\\\"language\\\">CPP</span>\n            <span class=\\\"version\\\">GCC 5.5.0</span>\n        </div>\n    </div>\n\n    <div class=\\\"important-note\\\">\n        <p>We emphasize the submission of a fully working code over partially correct but efficient code. Once <strong>submitted</strong>, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error.</p>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>There are N people living in a state. In this state, people add their town name before their first name. Write an algorithm to find the name of the town of the given N people where the name of the town is the common substring and has the maximum length.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer - <code>size</code>, representing the given number of people (N).</li>\n            <li>The second line consists of N space-separated strings representing the first names of the people.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a string in lowercase letters representing the name of the town of the given N people where the name of the town is the common substring and has the maximum length. If no such common prefix is found, then do not print anything.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 ≤ <code>size</code> ≤ 10<sup>5</sup></li>\n            <li>0 ≤ len < 10<sup>6</sup>; where len is the length of the string</li>\n        </ul>\n    </div>\n\n    <div class=\\\"note\\\">\n        <h3>Note</h3>\n        <p>The names of the people are spelled using English letters and are case insensitive.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\nRosewood rose rosy rosemarry roshh</pre>\n            <pre class=\\\"output\\\">Output:\nros</pre>\n            <div class=\\\"explanation\\\">\n                <p>\\\"Ros\\\" is the common starting substring with the maximum length in the peoples\\' names.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nstring findCommonTown(int size, vector&lt;string&gt; names) {\n    // Write your code here\n    return \\\"\\\";\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1eISkTjCiNd_9l8VFM5qOr0U0OTXHI03AtqEgGx2Jt9E/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 306,
        "title": "String Occurrence Counter",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>String Occurrence Counter</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The current selected programming language is C. We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use <code>printf()</code> to debug your code. The <code>printf()</code> may not work in case of syntax/runtime error. The version of GCC being used is 5.5.0.</p>\n        \n        <p>You are given two strings containing only English letters. Write an algorithm to count the number of occurrences of the second string in the first string. (You may disregard the case of the letters.)</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of the input consists of a string <code>parent</code>, representing the first string.</p>\n        <p>The second line consists of a string <code>sub</code>, representing the second string.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the number of occurrences of <code>sub</code> in <code>parent</code>. If no occurrence of <code>sub</code> is found in <code>parent</code> then print 0.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nTimisplayinginthehouseofTimwiththe\nTim</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Tim occurs 3 times in the first string. So, the output is 3.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp-code\\\">\n// Header Files\n#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nint countoccur(string parent, string sub) {\n    int answer;\n    // Write your code here\n    \n    return answer;\n}\n\nint main() {\n    //input for parent\n    string parent;\n    getline(cin,parent);\n    \n    //input for sub\n    // [Rest of the code template...]\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1-sQUWCtCPSy6Fz6DCX_BdG0hSXpkcoLe0A_OeuP4REo/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 307,
        "title": "Beautiful Houses",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Beautiful Houses</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The current selected programming language is C++14. We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of GCC being used is 5.5.0.</p>\n\n        <p>The city authorities are examining the houses in a residential area for a city planning scheme. The area is depicted in an aerial view and divided into a N × M grid. If a grid cell contains some part of a house roof, it is assigned a value 1; if not, then the cell represents a vacant plot and is assigned the value 0.</p>\n\n        <p>Clusters of adjacent grid cells with value 1 represent a single house. Diagonally placed grids with value 1 do not represent a single house.</p>\n\n        <p>\\\"Beautiful house\\\" is a special kind of house that is surrounded by vacant plots on all sides: horizontally, vertically and diagonally. You may assume that all four boundaries of the given grid are surrounded by vacant plots.</p>\n\n        <p>Write an algorithm to determine the number of \\\"beautiful houses\\\".</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of the input consists of two space-separated integers - <code>rows</code> and <code>cols</code> representing the number of rows (N) and the number of columns in the grid (M), respectively.</p>\n        <p>The next N lines consist of M space-separated integers representing the grid.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the number of \\\"beautiful houses\\\".</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The elements of the grid consist of 0s and 1s only.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\n4 4\n1 0 1 1\n0 0 1 0\n1 0 1 1\n1 0 1 0</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>There are 3 beautiful houses that are completely surrounded by vacant plots.</p>\n                <p>So, the output is 3.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input:\n5 7\n1 0 0 0 0 1 1\n0 1 0 0 0 1 0\n0 0 1 0 0 1 1\n1 0 0 1 0 1 1\n1 0 0 0 0 0 0</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>There are 2 beautiful houses that are completely surrounded by vacant plots.</p>\n                <p>So, the output is 2.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1a6ObhfeoSAcS7Uo3_-5OXWIybmRe2wFqovizi26Cf7E/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 310,
        "title": "Project Work Schedule",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Project Work Schedule</h1>\n        <div class=\\\"metadata\\\">\n            <p>Language: CPP | GCC Version: 5.5.0</p>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>An employee in an organization has begun working on N projects (numbered 0 to N-1). Each week he/she can work on a single module of one of the projects. The modules that are chosen to work on in two successive weeks should come from different projects. A project can have at most C modules. The modules of the projects are such that a module is completed in a week.</p>\n\n        <p>Write an algorithm to determine the number of weeks the employee can work on projects following the above mentioned rules.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer <code>num</code>, representing the number of projects (N).</li>\n            <li>The next line consists of N space-separated integers <code>projC[0], projC[1], ..., projC[N-1]</code>, representing the number of modules of the projects.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the maximum number of weeks the employee can work on the projects.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ num ≤ 10<sup>5</sup></li>\n            <li>1 ≤ projC ≤ 10<sup>5</sup></li>\n            <li>1 ≤ projC[i] ≤ 10<sup>5</sup></li>\n            <li>0 ≤ i < num</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n1 2 3</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>// Header Files\n#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nint workingweeks(vector&lt;int&gt; projC)\n{\n    int answer;\n    // Write your code here\n    \n    return answer;\n}\n\nint main()\n{\n    //input for projC\n    int projC_size;\n    cin >> projC_size;\n    vector&lt;int&gt; projC;\n    for (int idx = 0; idx < projC_size; idx++)\n    {\n        int temp;\n        cin >> temp;\n        projC.push_back(temp);\n    }\n    // ... rest of the code\n}</code></pre>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <h3>Important Notes</h3>\n        <ul>\n            <li>We emphasize the submission of a fully working code over partially correct but efficient code.</li>\n            <li>Once submitted, you cannot review this problem again.</li>\n            <li>The code may not work in case of syntax/runtime error.</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1_FlcjJAQ20RVjrE_SMlAN3TMYVUdiYc1mQPpnMh7EnQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 320,
        "title": "Matrix Product Submatrices",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Matrix Product Submatrices</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Given a matrix A[1..N][1..M] of integers, the product of a submatrix of A is the product of all the elements of the submatrix. Write an algorithm to find the number of non-empty submatrices that contain the top left element of matrix A (i.e. submatrices B[1..X][1..Y] for 1 ≤ X ≤ N, 1 ≤ Y ≤ M) with a product ≤ K.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line consists of two space-separated integers - <code>rows</code> and <code>columns</code>, representing the number of rows in the matrix (N) and the number of columns in the matrix (M), respectively.</li>\n            <li>The next N lines consist of M space-separated integers representing the elements of the matrix A.</li>\n            <li>The last line consists of an integer - <code>maxK</code>, representing the maximum permissible product of the elements of a submatrix (K).</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the number of submatrices that contain the top left element of the given matrix with a product less than or equal to K.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ rows, columns ≤ 1000</li>\n            <li>0 ≤ maxK ≤ 10<sup>6</sup></li>\n            <li>0 ≤ X ≤ 1000, where X is the element of the matrix A.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">2 3\n1 2 3\n1 2 3\n3</pre>\n            <pre class=\\\"output\\\">3</pre>\n            <div class=\\\"explanation\\\">\n                <p>Submatrices are [1], [1 2], [1</p>\n                <p style=\\\"margin-left: 20px;\\\">1]</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"code cpp\\\">// Header Files\n#include&lt;iostream&gt;\n#include&lt;string&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\n/*\n * matA is matrix A.\n * maxK is maximum permissible product of the elements of a submatrix.\n */\nint prodSubMat (vector&lt;vector&lt;int&gt; &gt; matA, int maxK)\n{\n    int answer;\n    // Write your code here\n    \n    return answer;\n}</pre>\n    </div>\n</div>\n\n<style>\n.problem-container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n    font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\n}\n\n.code {\n    background-color: #f5f5f5;\n    padding: 15px;\n    border-radius: 4px;\n    font-family: Consolas, Monaco, \\'Courier New\\', monospace;\n    overflow-x: auto;\n}\n\npre {\n    white-space: pre-wrap;\n    word-wrap: break-word;\n}\n\ncode {\n    background-color: #f0f0f0;\n    padding: 2px 4px;\n    border-radius: 4px;\n}\n\n.explanation {\n    margin-top: 10px;\n    padding: 10px;\n    background-color: #f8f9fa;\n    border-left: 3px solid #007bff;\n}\n\n.constraints ul {\n    list-style-type: none;\n    padding-left: 0;\n}\n\n.constraints li {\n    margin: 8px 0;\n}\n\nsup {\n    font-size: 75%;\n    vertical-align: super;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1FhzcOVLZmIJ4XRiNCOn8F7U2PTx4IHd0EVqq5rb0OEI/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 321,
        "title": "Satellite Communication Network",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Satellite Communication Network</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A space organization has N satellites in orbit. The satellites are assigned IDs from 0 to N-1. A satellite can transfer data to any other satellite that lies within its bandwidth range.</p>\n        \n        <p>A team at organization is working on a project involving satellite communications. In this project, they wish to transfer data from the main satellite with ID 0 to all the other satellites. But because the transfer of data requires an enormous amount of power, a satellite can transfer data to only one other satellite at a time. Then, the satellite can connect to the server at organization which will help to connect this satellite to other satellites near it.</p>\n        \n        <p>Only a fixed number of satellites can be in the bandwidth range of a satellite at a time. The team wishes to determine the minimum number of iterations of data transfer necessary to connect all the satellites.</p>\n        \n        <p>Write an algorithm to help the team to determine the minimum number of iterations of data transfer necessary to connect all the satellites.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of two space-separated integers:\n                <ul>\n                    <li><code>numSatellite</code> [N] - representing the number of satellites</li>\n                    <li><code>constK</code> - representing the constant K (always 2)</li>\n                </ul>\n            </li>\n            <li>The next N-1 lines consist of <code>constK</code> space-separated integers representing the satellite that can transfer data and the satellite that can receive the data, respectively.</li>\n            <li>The last line consists of an integer <code>maxSatellites</code> representing the maximum number of satellites that can be connected to one satellite.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an integer representing the minimum number of iterations of data transfer necessary to connect all the satellites.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10<sup>5</sup></li>\n            <li>constK is always 2</li>\n            <li>0 ≤ satellite IDs < N</li>\n            <li>1 ≤ maxSatellites ≤ N</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">5 2\n0 1\n1 2\n2 3\n3 4\n2</pre>\n            <pre class=\\\"output\\\">3</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this example:</p>\n                <ul>\n                    <li>First iteration: Satellite 0 transfers data to Satellite 1</li>\n                    <li>Second iteration: Satellites 0 and 1 transfer data to Satellites 2 and 3</li>\n                    <li>Third iteration: Any connected satellite transfers data to Satellite 4</li>\n                </ul>\n                <p>Therefore, minimum 3 iterations are required to connect all satellites.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n<style>\n.problem-container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n    font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;\n}\n\n.problem-title {\n    color: #2c3e50;\n    border-bottom: 2px solid #eee;\n    padding-bottom: 10px;\n}\n\ncode {\n    background-color: #f7f9fa;\n    padding: 2px 4px;\n    border-radius: 4px;\n    font-family: Consolas, Monaco, \\'Courier New\\', monospace;\n    color: #e83e8c;\n}\n\npre {\n    background-color: #f8f9fa;\n    padding: 15px;\n    border-radius: 4px;\n    overflow-x: auto;\n}\n\n.example {\n    margin: 20px 0;\n    padding: 15px;\n    border: 1px solid #eee;\n    border-radius: 4px;\n}\n\n.explanation {\n    margin-top: 10px;\n    padding: 10px;\n    background-color: #f8f9fa;\n    border-left: 3px solid #007bff;\n}\n\nul ul {\n    margin-top: 5px;\n    margin-bottom: 5px;\n}\n\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n    top: -0.5em;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1ZpcCcA7jYfQ4HivxbI-ehi7bdZMY70vfahV707GktRs/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 380,
        "title": "Binary String Conversion",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Binary String Conversion</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 900px;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            background: #f9f9f9;\n        }\n        h1, h3 {\n            color: #333;\n        }\n        pre {\n            background: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        ul {\n            margin: 0;\n            padding-left: 20px;\n        }\n        .example {\n            margin-top: 20px;\n        }\n        .example .input, .example .output {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\\\"problem-container\\\">\n        <h1>Binary String Conversion</h1>\n\n        <div class=\\\"problem-description\\\">\n            <p>\n                Emerson is very fond of strings, and he keeps trying to reverse them. His mother gives him two binary strings and asks him to convert the binary string <code>str1</code> into <code>str2</code> by applying the following rules:\n            </p>\n            <ol>\n                <li>Step 1: Reverse any substring of length 2 (of <code>str1</code>) and get <code>str1\\'</code> ( <code>str1\\'</code> != <code>str1</code> ).</li>\n                <li>Step 2: Reverse any substring of length 3 (of <code>str1</code>) and get <code>str1\\'\\'</code> ( <code>str1\\'\\'</code> != <code>str1\\'</code> ).</li>\n                <li>Step 3: Reverse any substring of length 4 (of <code>str1</code>) and get <code>str1\\'\\'\\'</code> ( <code>str1\\'\\'\\'</code> != <code>str1\\'\\'</code> ).</li>\n                <li>Step 4, Step 5, and so on.</li>\n            </ol>\n            <p>\n                Write an algorithm to help Emerson convert the binary string <code>str1</code> into <code>str2</code> in the minimum number of steps.\n            </p>\n        </div>\n\n        <div class=\\\"input-format\\\">\n            <h3>Input Format</h3>\n            <p>\n                The first line of the input consists of a binary string - <code>str1</code>.<br>\n                The second line consists of a binary string - <code>str2</code>.\n            </p>\n        </div>\n\n        <div class=\\\"output-format\\\">\n            <h3>Output Format</h3>\n            <p>\n                Print an integer representing the minimum number of steps required to convert <code>str1</code> into <code>str2</code>. If there is no such way of conversion, then print <code>-1</code>.\n            </p>\n        </div>\n\n        <div class=\\\"constraints\\\">\n            <h3>Constraints</h3>\n            <ul>\n                <li>2 &le; N &le; 30; where N is the length of the strings.</li>\n            </ul>\n        </div>\n\n        <div class=\\\"examples\\\">\n            <h3>Example</h3>\n\n            <div class=\\\"example\\\">\n                <pre class=\\\"input\\\">Input:\n1010\n0011</pre>\n                <pre class=\\\"output\\\">Output:\n2</pre>\n                <div class=\\\"explanation\\\">\n                    <p>\n                        Step 1: String <code>str1</code> → 1010 → 1001 (Reverse substring of length 2)<br>\n                        Step 2: String <code>str1</code> → 1001 → 0011 (Reverse substring of length 3)<br>\n                        String <code>str1</code> is converted to string <code>str2</code> in two steps; so the output is <code>2</code>.\n                    </p>\n                </div>\n            </div>\n        </div>\n\n        <div class=\\\"note\\\">\n            <h3>Note</h3>\n            <p>\n                At any step, Emerson can reverse only one substring.<br>\n                The strings <code>str1</code> and <code>str2</code> consist of only 0s and 1s.\n            </p>\n        </div>\n    </div>\n</body>\n</html>\n",
        "google_doc_link": "https://docs.google.com/document/d/1ASY2my7rne14sipUkiaye0Q0WsQvJga01amoFA9-GaA/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 382,
        "title": "Find the Soldier\\'s ID at Kth Position",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Find Soldier ID at Kth Position</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 900px;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            background: #f9f9f9;\n        }\n        h1, h3 {\n            color: #333;\n        }\n        pre {\n            background: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        ul {\n            margin: 0;\n            padding-left: 20px;\n        }\n        .example {\n            margin-top: 20px;\n        }\n        .example .input, .example .output {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\\\"problem-container\\\">\n        <h1>Find the Soldier\\'s ID at Kth Position</h1>\n\n        <div class=\\\"problem-description\\\">\n            <p>\n                There are N soldiers standing in a line, with IDs from <strong>1</strong> to <strong>N</strong> in ascending order. The soldiers are participating in an exercise consisting of <strong>Q</strong> actions. During the <em>i-th</em> action, the Major calls two numbers, <code>row<sub>i</sub></code> and <code>col<sub>i</sub></code>. \n                The soldiers at the <code>row<sub>i</sub></code>-th and <code>col<sub>i</sub></code>-th positions swap places, and this process continues until all specified positions swap as per the given input.\n            </p>\n            <p>\n                Write an algorithm to find the ID of the soldier at the <code>K</code>-th position in the line after all actions are completed.\n            </p>\n        </div>\n\n        <div class=\\\"input-format\\\">\n            <h3>Input Format</h3>\n            <ul>\n                <li>The first line of input consists of an integer <code>num</code>, representing the number of soldiers (<strong>N</strong>).</li>\n                <li>The second line consists of two space-separated integers - <code>actions</code> and <code>numSoldiers</code>, representing the number of actions (<strong>Q</strong>) and the number of soldiers called.</li>\n                <li>The next <strong>Q</strong> lines each consist of two space-separated integers - <code>row<sub>i</sub></code> and <code>col<sub>i</sub></code>, representing the positions of soldiers for each action.</li>\n                <li>The final line consists of an integer <code>posSoldier</code>, representing the position of the soldier whose ID is to be found.</li>\n            </ul>\n        </div>\n\n        <div class=\\\"output-format\\\">\n            <h3>Output Format</h3>\n            <p>\n                Print an integer representing the ID of the soldier at the <code>K</code>-th position in the line after all actions.\n            </p>\n        </div>\n\n        <div class=\\\"constraints\\\">\n            <h3>Constraints</h3>\n            <ul>\n                <li>1 &le; <code>posSoldier</code> &le; <code>num</code> ≤ 10<sup>9</sup></li>\n                <li>1 &le; <code>actions</code> ≤ 10<sup>5</sup></li>\n                <li>1 &le; <code>row<sub>i</sub></code>, <code>col<sub>i</sub></code> ≤ <code>num</code></li>\n                <li>1 &le; <code>i</code> ≤ <code>actions</code></li>\n            </ul>\n        </div>\n\n        <div class=\\\"examples\\\">\n            <h3>Example</h3>\n\n            <div class=\\\"example\\\">\n                <pre class=\\\"input\\\">Input:\n10\n2 2\n1 5\n6 10\n1</pre>\n                <pre class=\\\"output\\\">Output:\n5</pre>\n                <div class=\\\"explanation\\\">\n                    <p>\n                        Step 1: After the first action, the positions of soldiers are <code>5 4 3 2 1 6 7 8 9 10</code>.<br>\n                        Step 2: After the second action, the positions of soldiers are <code>5 4 3 2 1 10 9 8 7 6</code>.<br>\n                        The soldier at position <strong>1</strong> is now <strong>5</strong>. Hence, the output is <strong>5</strong>.\n                    </p>\n                </div>\n            </div>\n        </div>\n\n        <div class=\\\"code-block\\\">\n            <h3>Sample Code Template (C++)</h3>\n            <pre>\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint soldierAtK(int num, vector&lt;vector&lt;int&gt;&gt; soldierPosition, int posSoldier) {\n    int answer;\n    // Write your code here\n    \n    return answer;\n}\n\nint main() {\n    int num;\n    cin &gt;&gt; num;\n\n    int actions, numSoldiers;\n    cin &gt;&gt; actions &gt;&gt; numSoldiers;\n\n    vector&lt;vector&lt;int&gt;&gt; soldierPosition;\n    for (int idx = 0; idx &lt; actions; idx++) {\n        vector&lt;int&gt; temp_vector;\n        for (int jdx = 0; jdx &lt; numSoldiers; jdx++) {\n            int temp;\n            cin &gt;&gt; temp;\n            temp_vector.push_back(temp);\n        }\n        soldierPosition.push_back(temp_vector);\n    }\n\n    int posSoldier;\n    cin &gt;&gt; posSoldier;\n\n    cout &lt;&lt; soldierAtK(num, soldierPosition, posSoldier) &lt;&lt; endl;\n    return 0;\n}\n            </pre>\n        </div>\n    </div>\n</body>\n</html>\n",
        "google_doc_link": "https://docs.google.com/document/d/1zZUL5_eUPETLkCX68YUUIwVlnQtUTYGopxuD5MACsAQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 384,
        "title": "Minimum Projects to Zero Out Error Scores",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Minimum Projects to Zero Out Error Scores</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 900px;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            background: #f9f9f9;\n        }\n        h1, h3 {\n            color: #333;\n        }\n        pre {\n            background: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        ul {\n            margin: 0;\n            padding-left: 20px;\n        }\n        .example {\n            margin-top: 20px;\n        }\n        .example .input, .example .output {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\\\"problem-container\\\">\n        <h1>Minimum Projects to Zero Out Error Scores</h1>\n\n        <div class=\\\"problem-description\\\">\n            <p>\n                Ethan is the leader of a team with <strong>N</strong> members. Each team member has an initial error score based on their past work. Ethan wants to reduce the error score of all team members to <strong>zero</strong> by assigning them projects to complete.\n            </p>\n            <p>\n                The rules for decreasing the error scores are as follows:\n                <ul>\n                    <li>Whenever a team member completes a project successfully, their error score decreases by a count <strong>P</strong>.</li>\n                    <li>The error scores of all other team members with error scores greater than zero decrease by a count <strong>Q</strong>.</li>\n                </ul>\n                Write an algorithm to determine the minimum number of projects that the team must complete to make the error scores of all team members zero. If no projects are required, print <code>0</code>.\n            </p>\n        </div>\n\n        <div class=\\\"input-format\\\">\n            <h3>Input Format</h3>\n            <ul>\n                <li>The first line consists of an integer <code>errorScore_size</code>, representing the number of team members (<strong>N</strong>).</li>\n                <li>The second line consists of <strong>N</strong> space-separated integers, <code>errorScore</code>, representing the initial error scores of the team members.</li>\n                <li>The third line consists of an integer <code>compP</code>, representing the count <strong>P</strong> by which the error score of the project-completing team member decreases.</li>\n                <li>The last line consists of an integer <code>othQ</code>, representing the count <strong>Q</strong> by which the error scores of the other team members decrease.</li>\n            </ul>\n        </div>\n\n        <div class=\\\"output-format\\\">\n            <h3>Output Format</h3>\n            <p>\n                Print an integer representing the minimum number of projects required to make the error scores of all team members zero. If no projects are needed, print <code>0</code>.\n            </p>\n        </div>\n\n        <div class=\\\"constraints\\\">\n            <h3>Constraints</h3>\n            <ul>\n                <li>1 &le; <code>errorScore_size</code> &le; 2 &times; 10<sup>5</sup></li>\n                <li>1 &le; <code>othQ</code> &le; <code>compP</code> &le; 10<sup>9</sup></li>\n                <li>0 &le; <code>errorScore</code> &le; 10<sup>9</sup></li>\n            </ul>\n        </div>\n\n        <div class=\\\"examples\\\">\n            <h3>Example</h3>\n\n            <div class=\\\"example\\\">\n                <pre class=\\\"input\\\">Input:\n3\n6 4 1\n4\n1</pre>\n                <pre class=\\\"output\\\">Output:\n3</pre>\n                <div class=\\\"explanation\\\">\n                    <p>\n                        Firstly, the first team member completes a project successfully, reducing the scores to <code>2 3 0</code>.<br>\n                        Next, the second team member completes a project, reducing the scores to <code>1 0 0</code>.<br>\n                        Finally, the first team member completes another project, reducing all scores to <code>0 0 0</code>.<br>\n                        Hence, the minimum number of projects required is <strong>3</strong>.\n                    </p>\n                </div>\n            </div>\n        </div>\n\n        <div class=\\\"code-block\\\">\n            <h3>Sample C++ Code Template</h3>\n            <pre>\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint minProject(vector&lt;int&gt; errorScore, int compP, int othQ) {\n    int answer = 0;\n    // Write your code here\n\n    return answer;\n}\n\nint main() {\n    // Input for errorScore\n    int errorScore_size;\n    cin &gt;&gt; errorScore_size;\n\n    vector&lt;int&gt; errorScore;\n    for (int idx = 0; idx &lt; errorScore_size; idx++) {\n        int temp;\n        cin &gt;&gt; temp;\n        errorScore.push_back(temp);\n    }\n\n    // Input for compP\n    int compP;\n    cin &gt;&gt; compP;\n\n    // Input for othQ\n    int othQ;\n    cin &gt;&gt; othQ;\n\n    int result = minProject(errorScore, compP, othQ);\n    cout &lt;&lt; result;\n    return 0;\n}\n            </pre>\n        </div>\n    </div>\n</body>\n</html>\n",
        "google_doc_link": "https://docs.google.com/document/d/1OPa02dIZLDaPkm4wuDmqTLLkbCpLVH2J0ZEzaZgzEM8/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 385,
        "title": "Circular Dinner Arrangement",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>Question</h2>\n        <p>\n            The current selected programming language is <strong>C++14</strong>. We emphasize the submission of a fully working code over partially correct but efficient code. Once <strong>submitted</strong>, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of <strong>GCC</strong> being used is <strong>5.5.0</strong>.\n        </p>\n        <p>\n            A University has invited <strong>N</strong> alumni to a dinner. The dinner table is circular in shape. The university has assigned each alumnus an invitation ID from 1 to <strong>N</strong>. Each alumnus likes exactly one fellow alumnus and will attend the dinner only if he/she can be seated next to that person.\n        </p>\n        <p>\n            You are asked to plan the seating arrangement. Write an algorithm to find the maximum number of alumni who will attend the dinner.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer - <code>personId_size</code>, representing the number of alumni (<strong>N</strong>).</li>\n            <li>The second line consists of <strong>N</strong> space-separated integers representing the ID of the person whom the <em>i<sup>th</sup></em> alumnus likes.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print an integer representing the maximum number of alumni who can attend the dinner.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ personId_size ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ i ≤ personId_size</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n2 3 4 1</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    1<sup>st</sup> alumnus likes the person with ID 2.<br>\n                    2<sup>nd</sup> likes the person with ID 3.<br>\n                    3<sup>rd</sup> likes the person with ID 4.<br>\n                    4<sup>th</sup> likes the person with ID 1.<br>\n                    A maximum of 4 alumni can be seated around the circular table in the following manner:<br>\n                    <strong>1 - 2 - 3 - 4</strong>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1bgA7LdAQO-FPiSMCeir_wI4qZ6Hy7140hWjJkWxhxxo/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 399,
        "title": "Prime Numbers within Range",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Prime Numbers within Range</h1>\n        <p>\n            A prime number is divisible only by 1 and itself. The teacher writes a positive integer \n            on the board. Write an algorithm to find all the prime numbers from 2 to the given \n            positive number.\n        </p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer <code>num</code>, representing the number written on the board.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print space-separated integers representing the prime numbers requested by the teacher \n            in increasing order. If no prime number exists within the given range, then do not print anything.\n        </p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 &lt; num &lt; 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n11</pre>\n            <pre class=\\\"output\\\">Output:\n2 3 5 7 11</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    For the given number <code>11</code>, the prime numbers within the range are \n                    <code>2, 3, 5, 7, and 11</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Lucky Customers Gift Basket</h1>\n        <p>\n            The manager of a supermarket wishes to hold an event at which he will distribute gift baskets \n            to lucky customers. Each gift basket contains a pair of products. Each basket contains different \n            product pairs, but the overall value of the baskets may be the same. There are N types of products, \n            and each product has a price. The gift baskets will be awarded to the customers that pick a product \n            pair that has a difference in price equal to the given integer value <code>K</code>.\n        </p>\n        <p>\n            Write an algorithm to help the Manager find the total number of lucky customers who will win a gift basket.\n        </p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer <code>list_input_size</code>, representing the types of products (N).</li>\n            <li>The second line consists of N space-separated integers \n                - <code>list_input[0], list_input[1], ..., list_input[N-1]</code>, representing the price of the products.</li>\n            <li>The last line consists of an integer <code>K_input</code>, representing the given value K.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print an integer representing the total number of lucky customers who will win a gift basket.\n        </p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ list_input_size ≤ 10<sup>6</sup></code></li>\n            <li><code>0 ≤ K_input ≤ 10<sup>9</sup></code></li>\n            <li><code>0 ≤ list_input[0], list_input[1], ..., list_input[N-1] ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n10 15 23 14 2 15\n13</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    There are 3 pairs with a difference of <code>13</code>: \n                    the pairs are <code>{10, 23}</code>, <code>{15, 2}</code>, and <code>{2, 15}</code>.\n                    So, the output is <code>3</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1BhkVGpmijghmX-SDsnh0vDTmxu0VPaGj1f__YVBNh0I/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 400,
        "title": "Magic Mirror and Rotated Words",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Magic Mirror and Rotated Words</h1>\n        <p>\n            Charlie has a magic mirror. The mirror shows right rotated versions of a given word. \n            To generate different right-rotations of a word, write the word in a circle in clockwise order, \n            then start reading from any given character in clockwise order till you have covered all the characters.\n        </p>\n        <p>\n            For example: In the word <code>\\\"sample\\\"</code>, if we start with <code>\\'p\\'</code>, \n            we get the right rotated word as <code>\\\"plesam\\\"</code>. There are six such right rotations \n            of <code>\\\"sample\\\"</code> including itself.\n        </p>\n        <p>\n            The inputs to the function <code>isSameReflection</code> consist of two strings, \n            <code>word1</code> and <code>word2</code>. The function returns <code>1</code> \n            if <code>word1</code> and <code>word2</code> are right rotations of the same word, \n            and <code>-1</code> if they are not. Both <code>word1</code> and <code>word2</code> \n            will strictly contain characters between <code>a-z</code>.\n        </p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains a string <code>word1</code>.</li>\n            <li>The second line contains a string <code>word2</code>.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return <code>1</code> if the two words are right rotations of the same word, and <code>-1</code> otherwise.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ |word1|, |word2| ≤ 10<sup>5</sup></code></li>\n            <li><code>word1</code> and <code>word2</code> consist of lowercase English letters <code>(a-z)</code>.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nsample\nplesam</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    The word <code>\\\"sample\\\"</code> can be right-rotated to form <code>\\\"plesam\\\"</code>. \n                    Therefore, the output is <code>1</code>.\n                </p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nsample\npsamle</pre>\n            <pre class=\\\"output\\\">Output:\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    The word <code>\\\"sample\\\"</code> cannot be right-rotated to form <code>\\\"psamle\\\"</code>. \n                    Therefore, the output is <code>-1</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1t9QLV63AcSNXZ4QY8SCfMkB79Lau099iWGSSOkqh0TU/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 401,
        "title": "Find the Town Name as the Longest Common Substring",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Find the Town Name as the Longest Common Substring</h1>\n        <p>\n            There are <code>N</code> people living in a state. In this state, people concatenate their town name before their first name. \n            <strong>Write an algorithm to find the name of the town</strong> of the given <code>N</code> people where the name of the town \n            is the common substring and has the maximum length.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer <code>size</code>, representing the given number of people (<code>N</code>).</li>\n            <li>The second line consists of <code>N</code> space-separated strings representing the first names of the people.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print a string in lowercase letters representing the name of the town of the given <code>N</code> people \n            where the name of the town is the common substring and has the maximum length. \n            If no such common prefix is found, then do not print anything.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>0 ≤ size ≤ 10<sup>5</sup></code></li>\n            <li><code>0 &lt; len &lt; 10<sup>6</sup></code>, where <code>len</code> is the length of the string.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"note\\\">\n        <h3>Note</h3>\n        <p>\n            The names of the people are spelled in English letters and are case insensitive.\n        </p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\nRosewood rose rosy rosemary roshh</pre>\n            <pre class=\\\"output\\\">Output:\nros</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    In this case, the longest common substring among all the given words is <code>\\\"ros\\\"</code>. \n                    Therefore, the output is <code>ros</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1orjSTVKgkzbdJgjpZy0mOf1dFcmeFtKrfOSi-E03ScI/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 402,
        "title": "Find the Total Number of Lucky Customers",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Find the Total Number of Lucky Customers</h1>\n        <p>\n            The manager of a supermarket wishes to hold an event at which he will distribute gift baskets to lucky customers. \n            Each gift basket contains a pair of products. Each basket contains different product pairs, but the overall value of \n            the baskets may be the same. There are <code>N</code> types of products and each product has a price. \n            The gift baskets will be awarded to the customers that pick a product pair that has a difference in price \n            equal to the given integer value <code>K</code>.\n        </p>\n        <p>\n            Write an algorithm to help the Manager find the total number of lucky customers who will win a gift basket.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer <code>list_input_size</code>, representing the types of products (<code>N</code>).</li>\n            <li>The second line consists of <code>N</code> space-separated integers - <code>list_input[0], list_input[1], ..., list_input[N-1]</code>, representing the price of the products.</li>\n            <li>The last line consists of an integer <code>K_input</code>, representing the given value <code>K</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print an integer representing the total number of lucky customers who will win a gift basket.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ list_input_size ≤ 10<sup>6</sup></code></li>\n            <li><code>0 ≤ K_input ≤ 10<sup>9</sup></code></li>\n            <li><code>0 ≤ list_input[0], list_input[1], ..., list_input[N-1] ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n10 15 23 14 2 15\n13</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    There are 3 pairs with a difference of <code>13</code>; the pairs are:\n                </p>\n                <ul>\n                    <li><code>{10, 23}</code></li>\n                    <li><code>{15, 2}</code></li>\n                    <li><code>{2, 15}</code></li>\n                </ul>\n                <p>So, the output is <code>3</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1LAiUUBz6jrOyiTX73HvG2DIes8XDElLt-NaKLy4kbfg/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 403,
        "title": "Faulty Street Lights",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Faulty Street Lights</h1>\n        <p>\n            Mr. Woods, an electrician for Timberland city, has made some faulty connections on eight street lights. \n            The errors cause a street light to go <strong>OFF</strong> if the street lights adjacent to that light were both \n            <strong>ON</strong> (represented as <code>1</code>) or both <strong>OFF</strong> (represented as <code>0</code>) \n            on the previous night. Otherwise, the light will go ON as normal. \n        </p>\n        <p>\n            The two street lights at the end of the road have only a single adjacent street light, \n            so the light at the end can be assumed to be always <strong>OFF</strong>. \n            The state of the lights on a particular day is considered for the following day, not for the same day.\n        </p>\n        <p>\n            Because of this fault, people are having difficulty driving on the road at night. They have filed \n            a complaint to the Head of the Federal Highway Administration. Based on this complaint the head \n            has ordered a report of the state of street lights after <code>M</code> days.\n        </p>\n        <p>\n            Write an algorithm to output the state of the street lights after the given <code>M</code> days.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of input consists of an integer <code>currentState_size</code>, representing the number of street lights <code>(N)</code>.</li>\n            <li>The next line consists of <code>N</code> space-separated integers - <code>currentState</code>, representing the current state of the street lights (either <code>0</code> or <code>1</code>).</li>\n            <li>The last line consists of an integer <code>days</code>, representing the number of days <code>(M)</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print <code>8</code> space-separated integers representing the state of the street lights after <code>M</code> days.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ days ≤ 10^6</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n8\n1 1 0 1 1 1 1 1\n2</pre>\n            <pre class=\\\"output\\\">Output:\n0 0 0 0 1 1 0</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Adjacent to the street light at position <code>0</code> are street lights <code>0</code> (assumption) and <code>1</code>. \n                    So on the next day, it will be <code>1</code>. The street light at position <code>1</code> has its adjacent street lights \n                    both <code>1</code>. So on the next day, it will be <code>0</code>.\n                </p>\n                <p>\n                    Similarly, the remaining street lights follow the rule for subsequent days. After two days, \n                    the state of the street lights becomes <code>0 0 0 0 1 1 0</code>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1siykEJd5mEMp61CV0VChvn5kKMWM1J3y8dbUfqmBtrA/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 404,
        "title": "Maximize Consecutive Normal Readings",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Maximize Consecutive Normal Readings</h1>\n        <p>\n            A big bio-research project is going on. The scientists involved are testing a new serum. \n            They are performing initial research on animals, noting the effects of the serum, before attempting \n            trials on actual human beings. The main criterion in their test is body temperature.\n        </p>\n        <p>\n            If the body temperature is above or below a certain parameter after receiving the serum, \n            the scientists will note it as zero. If it is within the normal level, they will note it as one. \n            After completing all the readings, they can change the abnormal body temperature back to a normal \n            level, but only for <code>K</code> times, so that the possible number of consecutive normal readings is maximized.\n        </p>\n        <p>\n            The scientists wish to find the number of different ways to change the readings so as to get \n            the maximized consecutive normal reading.\n        </p>\n        <p>\n            You are given all the readings of the scientists. Write an algorithm to find how many consecutive \n            times the temperature reading can be of a normal level.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of input consists of a string representing the readings noted by the scientists.</li>\n            <li>The second line of input consists of an integer <code>changeK</code>, representing the number of changes they can make (<code>K</code>).</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the number of different possible ways to get the longest consecutive normal temperature reading.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ string size ≤ 10^5</code></li>\n            <li><code>0 ≤ changeK ≤ string size</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[Sample input]</pre>\n            <pre class=\\\"output\\\">Output:\n[Sample output]</pre>\n            <div class=\\\"explanation\\\">\n                <p>[Explanation if any]</p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1L3n7ItbmNAVUQQ347XpaDx4i4J9ubHBW3ywwQZhKqUk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 408,
        "title": "The Maximum Length",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>The Maximum Length</h1>\n        <p>\n            The first line of the input consists of an integer - <code>size</code>, representing the given number of people (<code>N</code>).<br>\n            The second line consists of <code>N</code> space-separated strings representing the first names of the people.\n        </p>\n        <p>\n            Print a string in lowercase letters representing the name of the town of the given <code>N</code> people where the name of the town is the common substring and has the maximum length. If no such common prefix is found, then do not print anything.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <code>size</code>, the number of people.</li>\n            <li>The second line contains <code>N</code> space-separated strings representing the first names.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print a string representing the name of the town, which is the common substring with the maximum length. If no such common substring exists, print nothing.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>0 ≤ size ≤ 10<sup>5</sup></code></li>\n            <li><code>0 &lt; len &lt; 10<sup>6</sup></code>, where <code>len</code> is the length of the string.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\nRosewood rose rosy rosemary roshh</pre>\n            <pre class=\\\"output\\\">Output:\nros</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    The common substring with the maximum length in the list of people names is \\\"ros\\\".\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1_C8axx1cEuYpM4snUta0-sCyRgUmUVMmm7Kn2KPzaQE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 415,
        "title": "Minimize Team Error Scores",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Minimize Team Error Scores</h1>\n        <p>\n            Ethan is the leader of a team with <em>N</em> members. He has assigned an error score to each member in his team based on the bugs that he has found in that particular team member’s task. Because the error score has increased to a significantly large value, he wants to give all the team members a chance to improve their error scores, thereby improving their reputation in the organization.\n        </p>\n        <p>\n            Ethan introduces a new rule: whenever a team member completes a project successfully, the error score of that member decreases by a count <em>P</em> and the error score of all the other team members whose score is greater than zero decreases by a count <em>Q</em>.\n        </p>\n        <p>\n            Write an algorithm to help Ethan find the minimum number of projects that the team must complete in order to make the error score of all the team members zero.\n        </p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of the input consists of an integer <code>errorScore_size</code>, representing the total number of team members (<em>N</em>).</li>\n            <li>The second line consists of <em>N</em> space-separated integers <code>errorScore</code>, representing the initial error scores of the team members.</li>\n            <li>The third line consists of an integer <code>compP</code>, representing the count by which the error score of the team member who completes a project successfully decreases (<em>P</em>).</li>\n            <li>The last line consists of an integer <code>othQ</code>, representing the count by which the error score of the other team members decreases (<em>Q</em>).</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Print the minimum number of projects the team must complete to make the error score of all the team members zero.\n        </p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ errorScore_size ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ errorScore[i] ≤ 10<sup>9</sup></code></li>\n            <li><code>1 ≤ compP ≤ 10<sup>5</sup></code></li>\n            <li><code>1 ≤ othQ ≤ 10<sup>5</sup></code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n10 20 15 5 25\n5\n2</pre>\n            <pre class=\\\"output\\\">Output:\n15</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    Here we have 5 team members with error scores <code>10, 20, 15, 5, 25</code>. When a member completes a project, their score decreases by <code>5</code> and all other scores greater than zero decrease by <code>2</code>. Ethan calculates the minimum number of projects required to bring all scores to zero.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1JRxWPZG9sPQlfugBxHLRAzFcyjoB2rP8XrpK2O91E38/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 418,
        "title": "Maximum Oil Transport in a Network",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Maximum Oil Transport in a Network</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>\n            The current selected programming language is <strong>C++14</strong>. We emphasize the submission of a fully working code over partially correct but efficient code. Once submitted, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of <code>GCC</code> being used is <strong>5.5.0</strong>.\n        </p>\n        <p>\n            Theon is an energy engineer. His job is to transport oil from the base refinery to the main storage units through a network of pipes. The network is in the form of a tree, where the base refinery is the root and the main storage units are the leaves. The pipes are connected to the storage units via internal connecting stations. The pipes can have different transfer rates [liter of oil per unit of time]. He wishes to determine the maximum amount of oil that can be transported via the network at any given time.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>\n            The first line of the input consists of an integer <code>num</code>, representing the number of stations in the network (<code>N</code>).\n        </p>\n        <p>\n            The second line consists of an integer <code>baseR</code>, representing the index of the base refinery in the network (<code>S</code>).\n        </p>\n        <p>\n            The third line consists of two space-separated integers <code>numCon</code> and <code>charCon</code>, representing the number of connections in the network (<code>M</code>) and given characteristics of each connection (<code>P</code>).\n        </p>\n        <p>\n            The next <code>M</code> lines consist of <code>P</code> space-separated integers <code>start</code>, <code>end</code>, and <code>rate</code>, representing the starting node of the pipe; the ending node of the pipe; and the transfer rate of the pipe, respectively.\n        </p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            The output should be the maximum amount of oil that can be transported via the network at any given time.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ N ≤ 10^5</code></li>\n            <li><code>1 ≤ S ≤ N</code></li>\n            <li><code>1 ≤ M ≤ N - 1</code></li>\n            <li><code>1 ≤ rate ≤ 10^6</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n1\n4 3\n1 2 10\n1 3 5\n2 4 15</pre>\n            <pre class=\\\"output\\\">Output:\n15</pre>\n            <div class=\\\"explanation\\\">\n                <p>The maximum amount of oil that can be transported from the base refinery to the storage units is 15 liters per unit of time.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Fq6j8aZzSntD0dbTbaro9TjP35jFnP0R_aPGOYs4pM0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    },
    {
        "id": 422,
        "title": "Maximum Toll Revenue",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Maximum Toll Revenue</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>In a state, <strong>N</strong> cities with unique city codes from 1 to <strong>N</strong> are connected by <strong>N - 1</strong> roads. The road network is in the form of a tree in which each road connects two cities. A path is a road, or a combination of roads, connecting any two cities. Each road has a toll booth that collects a total equal to the maximum number of paths of which that particular road is part. The state transportation authority wishes to identify the road on which the maximum toll revenue is collected.</p>\n        <p>Write an algorithm to help the transportation authority identify the pair of cities connected by the road with the maximum toll revenue collected. The roads should be sorted in increasing order. If more than one road collects the same total revenue, then output the pair of cities that have the smaller city code.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of the input consists of an integer <strong>num</strong>, representing the number of cities in the state (<strong>N</strong>).</p>\n        <p>The next line consists of two space-separated integers <strong>roads</strong> and <strong>numCities</strong>, representing the number of roads (<strong>R</strong>) and the number of cities directly connected by a road (2 ≤ <strong>numCities</strong> ≤ 2), respectively.</p>\n        <p>The next <strong>R</strong> lines consist of <strong>X</strong> space-separated integers <strong>city1</strong> and <strong>city2</strong> representing the cities connected by a road.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print two space-separated sorted integers representing the cities connected by the road on which the maximum toll revenue is collected. If two or more toll booths collect the same total revenue, then print the pair of cities with lexicographically smaller codes.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>2 ≤ num ≤ 10<sup>5</sup></code></li>\n            <li><code>roads = num - 1</code></li>\n            <li><code>1 ≤ city1, city2 ≤ num</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n4 2\n1 2\n1 3\n2 4\n2 5</pre>\n            <pre class=\\\"output\\\">Output:\n2 4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The maximum toll revenue is collected between cities 2 and 4.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1GFWHiaMMP-G2QvBDi1a3qnX0OjFzznjSqkStbGnYAC4/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Barclays ",
        "company_id": 83
    }
]