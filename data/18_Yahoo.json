[
    {
        "id": 129,
        "title": "Tennis Game State Calculator",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Tennis Game State Calculator</h1>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <h2>Problem Description</h2>\n        <p>Write a program which returns the current state of a tennis game.</p>\n\n<div class=\\\"rules-section\\\">\n            <h3>Tennis Rules</h3>\n            <p>A tennis game is played as follows:</p>\n            <ul>\n                <li>First score = 15 points</li>\n                <li>Second score = 30 points</li>\n                <li>Third score = 40 points</li>\n            </ul>\n\n<p>After a player reaches 40 points, he or she can:</p>\n            <ul>\n                <li>Enter a <strong>DEUCE</strong> state if both players have scored the same number of times</li>\n                <li>Enter an <strong>ADVANTAGE</strong> state if both players scored at least three times AND the player scored one time more than his or her opponent</li>\n                <li><strong>WIN</strong> the game if he or she has scored at least four times AND two times more than the other player</li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Function Parameters</h3>\n        <pre class=\\\"function-signature\\\">compute_game_state(nameP1, nameP2, wins)</pre>\n        <ul>\n            <li><code>nameP1</code>: the name of the first player as a string</li>\n            <li><code>nameP2</code>: the name of the second player as a string</li>\n            <li><code>wins</code>: a vector of strings listing the name of each ball\\'s winner</li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Expected Result</h3>\n        <p>The current state of the game as a string:</p>\n        <ul>\n            <li><code>P1 0 - P2 0</code> (with players\\' names in the same order as given in parameters)</li>\n            <li><code>P1 15 - P2 30</code></li>\n            <li><code>15a</code> (in case of a 15-15 draw)</li>\n            <li><code>30a</code> (in case of a 30-30 draw)</li>\n            <li><code>P2 WINS</code></li>\n            <li><code>DEUCE</code></li>\n            <li><code>P1 ADVANTAGE</code></li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example-container\\\">\n            <div class=\\\"example-input\\\">\n                <h4>Parameters:</h4>\n                <pre>\nBob\nAnna\nBob, Anna, Bob</pre>\n            </div>\n            <div class=\\\"example-output\\\">\n                <h4>Result:</h4>\n                <pre>Bob 30 - Anna 15</pre>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"starter-code\\\">\n        <h3>Starter Code</h3>\n        <pre class=\\\"code-block cpp\\\">\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;unistd.h&gt;\n\nusing namespace std;\n\nstring compute_game_state(string nameP1, string nameP2, vector&lt;string&gt; wins)\n{\n    // Write your code here\n    // To debug: cerr &lt;&lt; \\\"Debug messages...\\\" &lt;&lt; endl;\n    return \\\"\\\";\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Cxrppkk_hxbwdXiUGQEYdEpYXdM2qi2cQxwA0AfxlZE/edit?usp=sharing",
        "solution_code": "#include <iostream>\\n#include <string>\\n#include <vector>\\n#include <algorithm>\\n\\nusing namespace std;\\n\\nstring compute_game_state(string nameP1, string nameP2, vector<string> wins)\\n{\\n    int p1 = 0, p2 = 0;\\n    for(const auto& w : wins){\\n        if(w == nameP1) p1++;\\n        else if(w == nameP2) p2++;\\n    }\\n    auto get_score = [&](int p) -> string {\\n        switch(p){\\n            case 0: return \\\"0\\\";\\n            case 1: return \\\"15\\\";\\n            case 2: return \\\"30\\\";\\n            case 3: return \\\"40\\\";\\n            default: return \\\"40\\\";\\n        }\\n    };\\n    if(p1 >=4 && p1 >= p2 +2){\\n        return nameP1 + \\\" WINS\\\";\\n    }\\n    if(p2 >=4 && p2 >= p1 +2){\\n        return nameP2 + \\\" WINS\\\";\\n    }\\n    if(p1 >=3 && p2 >=3){\\n        if(p1 == p2){\\n            return \\\"DEUCE\\\";\\n        }\\n        if(p1 == p2 +1){\\n            return nameP1 + \\\" ADVANTAGE\\\";\\n        }\\n        if(p2 == p1 +1){\\n            return nameP2 + \\\" ADVANTAGE\\\";\\n        }\\n    }\\n    if(p1 == p2 && p1 <3){\\n        return to_string(p1 * 15) + \\\"a\\\";\\n    }\\n    return nameP1 + \\\" \\\" + get_score(p1) + \\\" - \\\" + nameP2 + \\\" \\\" + get_score(p2);\\n}",
        "company_name": "Yahoo",
        "company_id": 18
    },
    {
        "id": 130,
        "title": "Duodigit Numbers",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Duodigit Numbers</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>We call an integer a \\\"duodigit\\\" if its decimal representation uses no more than two different digits. For example, <code>12</code> is a duodigit, but <code>102</code> is not.</p>\n\n<p>Implement the function <code>isDuoDigit(number)</code> which returns a string:</p>\n        <ul>\n            <li><code>\\'y\\'</code> if <code>number</code> is a duodigit</li>\n            <li><code>\\'n\\'</code> otherwise</li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Parameters</h3>\n        <ul>\n            <li><code>number</code> (int): an integer</li>\n        </ul>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Return Value</h3>\n        <p><code>result</code> (string): a string, \\'y\\' if the number is a duodigit, \\'n\\' if it is not.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>-200,000 ≤ number ≤ 200,000</li>\n            <li>Available RAM: 512MB</li>\n            <li>Timeout: 1 second</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <p>These numbers are duodigits:</p>\n        <ul>\n            <li>12</li>\n            <li>110</li>\n            <li>-37333</li>\n            <li>1</li>\n            <li>2020</li>\n        </ul>\n\n<p>These numbers are not duodigits:</p>\n        <ul>\n            <li>102</li>\n            <li>-2021</li>\n        </ul>\n\n<div class=\\\"example\\\">\n            <h4>Sample Input/Output</h4>\n            <pre class=\\\"input\\\">Input: 12</pre>\n            <pre class=\\\"output\\\">Output: \\\"y\\\"</pre>\n        </div>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre><code>string isDuoDigit(int number)</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1h86jjWnyJawVtONOQF0LWdT-sGTl01Q17ICBL9zlBPc/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Yahoo",
        "company_id": 18
    },
    {
        "id": 131,
        "title": "Check Digit Calculator",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-title\\\">\n        <h2>Check Digit Calculator</h2>\n    </div>\n\n<div class=\\\"problem-description\\\">\n        <p>In order to detect errors on identification numbers, a check digit is often added at the end of that number.</p>\n\n<p>Implement the function <code>compute_check_digit(identificationNumber)</code> that takes a number (as a string) and returns the check digit, using the following algorithm:</p>\n\n<ul>\n            <li>Sum the digits in the even-numbered positions (positions 0, 2, 4, etc.)</li>\n            <li>Multiply the result by three</li>\n            <li>Add the digits in the odd-numbered positions to the result (positions 1, 3, 5, etc.)</li>\n            <li>Take the last digit of the result</li>\n            <li>If it\\'s not 0, subtract this digit from 10. Otherwise, keep it as 0</li>\n            <li>Return the result</li>\n        </ul>\n\n<p class=\\\"note\\\"><em>(Assuming that the first digit on the left has the position 0)</em></p>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>Given the identification number <strong>39847</strong>:</p>\n            <ul>\n                <li>Sum the digits in the even-numbered positions: 3 + 8 + 7 = 18</li>\n                <li>Multiplied by three: 18 × 3 = 54</li>\n                <li>Add the digits in the odd-numbered positions: 54 + (9 + 4) = 67</li>\n                <li>Last digit: 7</li>\n                <li>Subtract 7 from 10: 10 - 7 = 3</li>\n            </ul>\n            <p>The expected result is <strong>3</strong> for 39847.</p>\n        </div>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The length of <code>identification_number</code> can vary from 1 to 12 characters.</li>\n        </ul>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n#include &lt;unistd.h&gt;\n\nusing namespace std;\n\nint compute_check_digit(string identificationNumber)\n{\n    // Write your code here\n    return -1;\n}</code></pre>\n    </div>\n\n<div class=\\\"test-cases\\\">\n        <h3>Test Cases</h3>\n        <ul>\n            <li>Example: 39847</li>\n            <li>2 digits only: 34</li>\n            <li>Test result: 343428</li>\n            <li>Test result different than 0: 983468</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1lrCJF7gZyH1wExvcTtZVuy62IwMNRgBC6JnPYv-x_aw/edit?usp=sharing",
        "solution_code": "#include <iostream>\\n#include <string>\\n#include <vector>\\n#include <algorithm>\\n#include <unistd.h>\\n\\nusing namespace std;\\n\\nint compute_check_digit(string identificationNumber)\\n{\\n    int even_sum = 0, odd_sum = 0;\\n    for(int i = 0; i < identificationNumber.length(); i++) {\\n        int digit = identificationNumber[i] - \\'0\\';\\n        if(i % 2 == 0) even_sum += digit;\\n        else odd_sum += digit;\\n    }\\n    int total = even_sum * 3 + odd_sum;\\n    int last_digit = total % 10;\\n    if(last_digit != 0) return 10 - last_digit;\\n    else return 0;\\n}",
        "company_name": "Yahoo",
        "company_id": 18
    },
    {
        "id": 132,
        "title": "Back to School Shopping",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1 class=\\\"problem-title\\\">Back to School Shopping</h1>\n\n<div class=\\\"problem-description\\\">\n        <p>It\\'s back-to-school time!</p>\n\n<p>In order to buy school supplies for your kids, you have to go to 4 different types of shop:</p>\n        <ul>\n            <li>a bookshop to buy a workbook,</li>\n            <li>a school shop to buy some glue,</li>\n            <li>a sport store to buy a pair of sneakers,</li>\n            <li>a stationery store to buy a pencil.</li>\n        </ul>\n\n<p>Shopping for school isn\\'t a fun hobby for you, so you started to search for the shortest path. Then you realized your town has many shops of these types, and it may take too long to evaluate all the paths one by one.</p>\n\n<p>So, before searching for the best path, you just want to count them.</p>\n\n<p>The type of a shop is encoded in an integer from 0 to 3:</p>\n        <ul>\n            <li>Type 0 is bookshop</li>\n            <li>Type 1 is school shop</li>\n            <li>Type 2 is sport store</li>\n            <li>Type 3 is stationery</li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>As input, you get a description of your town in the following form:</p>\n        <ul>\n            <li><code>shops</code>: a list of integers, telling the shop types. For example <code>[2, 3, 1, 1, 0]</code> means the shop at index 0 is a sport store, the shop at index 1 is a stationery store, the shops at indexes 2 and 3 are school shops, etc.</li>\n            <li><code>roads</code>: a list of a couple of 2 integers showing the roads between shops. For example <code>[[0, 1], [0, 3]]</code> means there is a road between the shop of index 0 and the shop of index 1, then another road between the shop of index 0 and the shop of index 3.</li>\n        </ul>\n        <p>All roads are bi-directional. There is at most 1 road between 2 shops.</p>\n    </div>\n\n<div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>You must return the number of valid paths. A valid path visits exactly one shop of each type, in any order, by using the available roads.</p>\n        <p>Visiting the same 4 shops in two different orders counts as two valid paths.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>length(shops) ≤ 50</li>\n            <li>0 ≤ shops[i] ≤ 3</li>\n            <li>length(roads) ≤ 250</li>\n            <li>2 ≤ length(roads[i]) ≤ 2</li>\n            <li>Available RAM: 512MB</li>\n            <li>Timeout: 1 second</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nshops = [1, 0, 3, 2, 2]\nroads = [[0, 1], [1, 2], [1, 4], [2, 3], [2, 4]]</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n            <div class=\\\"explanation\\\">\n                <p>The valid paths are:</p>\n                <pre>[0, 1, 2, 3]\n[0, 1, 2, 4]\n[0, 1, 4, 2]\n[3, 2, 1, 0]\n[4, 2, 1, 0]\n[2, 4, 1, 0]</pre>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"code\\\">int countPaths(vector&lt;int&gt; shops, vector&lt;vector&lt;int&gt;&gt; roads)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ycw9FVb8JMG_vKFOlF2j_Ka-yY_HeHrDy2ebmP8tOok/edit?usp=sharing",
        "solution_code": "#include <string>\\n#include <unordered_map>\\n#include <vector>\\n#include <set>\\n#include <locale>\\nusing namespace std;\\n\\nint countPaths(vector<int> shops, vector<vector<int>> roads) {\\n    int n = shops.size();\\n    vector<vector<int>> adj(n, vector<int>());\\n    for(auto &road : roads){\\n        adj[road[0]].push_back(road[1]);\\n        adj[road[1]].push_back(road[0]);\\n    }\\n    vector<vector<long long>> dp(16, vector<long long>(n, 0));\\n    for(int u=0; u<n; u++){\\n        int t = shops[u];\\n        dp[1 << t][u] = 1;\\n    }\\n    for(int mask=1; mask<16; mask++){\\n        for(int u=0; u<n; u++){\\n            if(dp[mask][u]==0) continue;\\n            for(auto &v : adj[u]){\\n                int t = shops[v];\\n                if((mask & (1 << t)) ==0){\\n                    dp[mask | (1 << t)][v] += dp[mask][u];\\n                }\\n            }\\n        }\\n    }\\n    long long res =0;\\n    for(int u=0; u<n; u++) res += dp[15][u];\\n    return res;\\n}",
        "company_name": "Yahoo",
        "company_id": 18
    }
]