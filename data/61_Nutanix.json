[
    {
        "id": 234,
        "title": "Multi-Core Cache Simulator",
        "problem_statement": "<div class=\\\"problem-container\\\">\\n    <h2>Multi-Core Cache Simulation</h2>\\n    \\n    <div class=\\\"problem-description\\\">\\n        <p>You are tasked with simulating a multi-core system with N cores, where each core has its own L1 cache and there is a shared L2 cache across all cores. The system employs Least Recently Used (LRU) eviction policies for both L1 and L2 caches. There are M single-threaded processes, each identified by a unique Process ID (pid). These processes can be scheduled to run on any of the N cores in the system.</p>\\n\\n        <h4>Cache Behavior Rules:</h4>\\n        <ul>\\n            <li>When a process is scheduled on a core, all the writes always go to L1 cache on that core. If the L1 cache is full, then the least recently used entry is evicted from L1 cache and added to L2 cache to accommodate the new entry. The system should also handle updates on an existing key.</li>\\n            <li>For reads, the system first checks the L1 cache on the core where the process is running, if not found returns from there else checks in L2 cache. Entries are not moved from L2 to L1 cache on a read.</li>\\n        </ul>\\n\\n        <h4>Process Migration:</h4>\\n        <p>Process migration occurs when a process is moved from one core to another or from a scheduler queue to a core. When a new process is scheduled on a core that is already running another process, the current process is preempted and displaced by the new process.</p>\\n\\n        <h4>Important Notes:</h4>\\n        <ul>\\n            <li>Different processes on different cores can have the same key and they should be treated as separate keys in L2 cache.</li>\\n            <li>An invalidated cache entry is never pushed into L2 cache from L1 cache.</li>\\n            <li>Overwrites on the same key from a process can render existing cache entries invalidated in the system but eviction policy will strictly stick to considering only access times.</li>\\n            <li>For a particular key of a process only one cache entry should be valid in the system.</li>\\n            <li>If read is done on an invalid cache entry then it\\'s access time is not updated.</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"input-format\\\">\\n        <h3>Input Format</h3>\\n        <p>The first line contains three integers N, M and Q, where N is the number of cores, M is the number of single threaded processes and Q is the number of queries.</p>\\n        <p>The second line contains two integers L1_CAPACITY and L2_CAPACITY, representing the capacities of the L1 and L2 caches respectively.</p>\\n        <p>The next Q lines contain queries in the following format:</p>\\n        <ol>\\n            <li>Read query: R pid key</li>\\n            <li>Write query: W pid key value</li>\\n            <li>Migrate Process query: M pid core_id</li>\\n        </ol>\\n        <p>Cores will be numbered from 0 to N-1 and Process Ids will be numbered from 0 to M-1.</p>\\n    </div>\\n\\n    <div class=\\\"output-format\\\">\\n        <h3>Output Format</h3>\\n        <p>For every read query print one of the following output based on where the value for the key is found:</p>\\n        <ol>\\n            <li>VALUE FOUND IN L1 CACHE: {value}</li>\\n            <li>VALUE FOUND IN L2 CACHE: {value}</li>\\n            <li>CACHE MISS</li>\\n        </ol>\\n    </div>\\n\\n    <div class=\\\"constraints\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>1 ≤ num_cores ≤ 64</li>\\n            <li>1 ≤ num_process ≤ 100</li>\\n            <li>1 ≤ num_queries ≤ 1e5</li>\\n            <li>1 ≤ l1_capacity ≤ 1e3</li>\\n            <li>0 ≤ l2_capacity ≤ 1e4</li>\\n            <li>1 ≤ key ≤ 1e4</li>\\n            <li>1 ≤ value ≤ 1e5</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\"examples\\\">\\n        <h3>Example</h3>\\n        <div class=\\\"example\\\">\\n            <pre class=\\\"input\\\">Input:\\n2 3 15\\n2 1\\nM 0 1\\nM 1 0\\nW 0 100 10\\nW 1 200 50\\nW 1 201 55\\nR 1 200\\nW 1 202 60\\nM 2 1\\nW 2 300 80\\nR 1 201\\nR 2 300\\nM 0 1\\nR 0 100</pre>\\n            <pre class=\\\"output\\\">Output:\\nVALUE FOUND IN L1 CACHE: 50\\nVALUE FOUND IN L2 CACHE: 55\\nVALUE FOUND IN L1 CACHE: 80\\nVALUE FOUND IN L1 CACHE: 10\\nCACHE MISS</pre>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/13VtEk-E2ji6-YXxjhvF5x7KJ5yjzQiPnjSqaJLncHYA/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Nutanix",
        "company_id": 61
    }
]