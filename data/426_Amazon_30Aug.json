[
    {
        "id": 1252,
        "title": "Minimize Cleaning Cost",
        "problem_statement": "<h1>Minimize Cleaning Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Data Scientists at Amazon are working on cleaning a machine learning dataset. The dataset is represented as a string <code>dataset</code> consisting of an even number of lowercase English letters. The goal is to clean the dataset efficiently by performing specific operations.</p>\r\n<p>Here's how the operations work:</p>\r\n<ul>\r\n    <li>In each operation, two characters from the dataset are selected and removed.</li>\r\n    <li>In each operation, an associated cost:\r\n        <ul>\r\n            <li><code>matchCost</code>: the cost of removing two identical characters</li>\r\n            <li><code>mismatchCost</code>: the cost of removing two different characters</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The task is to determine the optimal strategy that minimizes the total cost to completely clean up the dataset. In other words, find the minimum cost required to remove all characters and make the dataset empty.</p>\r\n\r\n<p>Complete the function <code>minimizeCleaningCost</code> in the editor below.</p>\r\n<p><code>minimizeCleaningCost</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string dataset</code>: a string that denotes a machine learning dataset</li>\r\n    <li><code>int matchCost</code>: the cost of operation when the removed characters are equal</li>\r\n    <li><code>int mismatchCost</code>: the cost of operation when the removed characters are unequal</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum cost to clean up the dataset or make the string empty</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"loio\", matchCost = 2, mismatchCost = 4\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initial String: dataset = \"loio\"</p>\r\n<p><strong>Operation 1:</strong></p>\r\n<ul>\r\n    <li><strong>Action:</strong> Remove the first ('l') and third ('i') characters of the dataset, resulting in the string dataset = \"oo\".</li>\r\n    <li><strong>Cost:</strong> <code>mismatchCost = 4</code> (since both removed characters, 'l' and 'i', are different).</li>\r\n</ul>\r\n<p><strong>Operation 2:</strong></p>\r\n<ul>\r\n    <li><strong>Action:</strong> Delete the remaining characters of \"oo\", making dataset an empty string.</li>\r\n    <li><strong>Cost:</strong> <code>matchCost = 2</code> (since the removed characters, 'o' and 'o', are the same).</li>\r\n</ul>\r\n<p><strong>Total Cost:</strong> <code>mismatchCost + matchCost = 4 + 2 = 6</code>.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: dataset = \"aaabca\", matchCost = 3, mismatchCost = 2\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>In the first operation, the first and second characters ('a' and 'a') are deleted from the dataset, resulting in dataset = \"abca\". The cost of this operation is <code>matchCost = 3</code> because both removed characters are equal to 'a'.</li>\r\n    <li>In the next operation, the first ('a') and third ('c') characters are deleted, making dataset = \"ba\". The cost of this operation is <code>mismatchCost = 2</code> because the removed characters are not equal.</li>\r\n    <li>In the final operation, the remaining two characters ('b' and 'a') are deleted, making the dataset an empty string. The cost of this operation is <code>mismatchCost = 2</code> because the removed characters are not equal.</li>\r\n</ul>\r\n<p>Hence, the total cost is 3 + 2 + 2 = 7.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: dataset = \"xxch\", matchCost = 5, mismatchCost = 5\r\nOutput: 5</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= |dataset| <= 10<sup>5</sup></code></li>\r\n    <li><code>|dataset|</code> is even</li>\r\n    <li><code>1 <= matchCost, mismatchCost <= 10<sup>4</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_30Aug",
        "company_id": 426
    },
    {
        "id": 1253,
        "title": "Longest Wildcard Match",
        "problem_statement": "<h1>Longest Wildcard Match</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon is developing a string matching library. You are to develop a service that finds the longest substring that matches a given regex.</p>\r\n<p>More formally, you are given two strings, a text string <code>sourceString</code>, and a regex expression <code>pattern</code>. The string <code>pattern</code> contains exactly one wildcard character ('*'). A wildcard character ('*') matches any sequence of zero or more lowercase English characters. A regex matches some string if it is possible to replace the wildcard character with some sequence of characters such that the regex expression becomes equal to the string. No other character can be changed. For example, <code>a*b</code> can match <code>ab</code>, <code>acb</code>, <code>accb</code>, <code>acccb</code>, and <code>abbbb</code>. whereas it does not match the strings <code>aab</code>, <code>aaab</code>, <code>ac</code>.</p>\r\n<p>Return the length of the longest substring of <code>sourceString</code> that matches the expression <code>pattern</code>. Return -1 if there is no such substring.</p>\r\n<p><strong>Note:</strong> A substring is a contiguous sequence of characters within a string.</p>\r\n<p>Complete the function <code>findMaxRegexMatch</code> in the editor below.</p>\r\n<p><code>findMaxRegexMatch</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>sourceString</code>: a string</li>\r\n    <li><code>pattern</code>: a string</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the length of the longest substring of <code>sourceString</code> that matches <code>pattern</code> or -1 if there is none.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: sourceString = \"hackerrank\", pattern = \"ack*r\"\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The following substrings match pattern:</p>\r\n<ul>\r\n    <li><code>\"acker\"</code>, we can replace <code>*</code> with <code>\"\"</code> and pattern becomes equal to <code>\"acker\"</code>; length = 5</li>\r\n    <li><code>\"ackerr\"</code>, we can replace <code>*</code> with <code>\"er\"</code> and pattern becomes equal to <code>\"ackerr\"</code>; length = 6</li>\r\n</ul>\r\n<p>Return the length of the longest matching substring, 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: sourceString = \"programming\", pattern = \"r*in\"\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>\"rammin\"</code>, length = 6. We can replace <code>*</code> with <code>\"amm\"</code>.</li>\r\n    <li><code>\"rogrammin\"</code>, length = 9. We can replace <code>*</code> with <code>\"ogramm\"</code>.</li>\r\n</ul>\r\n<p>The longest match is <code>\"rogrammin\"</code> with length 9.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: sourceString = \"debug\", pattern = \"ug*eb\"\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> No substring of <code>sourceString</code> begins with 'u' and ends with 'eb'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= sourceString.length, pattern.length <= 10^6</code></li>\r\n    <li><code>sourceString</code> contains lowercase English letters only.</li>\r\n    <li><code>pattern</code> contains lowercase English letters and exactly one wildcard ('*') character.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_30Aug",
        "company_id": 426
    },
    {
        "id": 1260,
        "title": "Minimize Cleaning Cost",
        "problem_statement": "<h1>Minimize Cleaning Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Data Scientists at Amazon work on cleaning a machine learning dataset. The dataset is represented as a string dataset consisting of an even number of lowercase English letters. The goal is to clean the dataset efficiently by performing specific operations.</p>\r\n<p>Here's how the operations work:</p>\r\n<ul>\r\n    <li>In each operation, two characters from the dataset are selected and removed.</li>\r\n    <li>Each operation has an associated cost:\r\n        <ul>\r\n            <li><code>matchCost</code>: the cost of removing two identical characters.</li>\r\n            <li><code>mismatchCost</code>: the cost of removing two different characters.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The task is to determine the optimal sequence of operations that minimize the total cost to completely clean up the dataset. In other words, find the minimum cost required to remove all characters and make the dataset empty.</p>\r\n<p>Complete the function <code>minimizeCleaningCost</code> in the editor below.</p>\r\n<p><code>minimizeCleaningCost</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string dataset</code>: a string that denotes a machine learning dataset</li>\r\n    <li><code>int matchCost</code>: the cost of operation when the removed characters are equal</li>\r\n    <li><code>int mismatchCost</code>: the cost of operation when the removed characters are unequal</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum cost to clean up the dataset or make the string empty</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"aaabca\", matchCost = 3, mismatchCost = 2\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong>\r\nIn the first operation, the first and second characters are deleted from the dataset, resulting in dataset = \"abca\". The cost of this operation is <code>matchCost = 3</code> because both removed characters are equal to 'a'.\r\nIn the next operation, the first and third characters are deleted, making dataset = \"bc\". The cost of this operation is <code>mismatchCost = 2</code> because the removed characters are not equal.\r\nIn the final operation, the remaining two characters are deleted, making the dataset an empty string. The cost of this operation is <code>mismatchCost = 2</code> because the removed characters are not equal.\r\nHence, the total cost is 3 + 2 + 2 = 7.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"xxch\", matchCost = 5, mismatchCost = 5\r\nOutput: 5</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= |dataset| &lt;= 10^5</code></li>\r\n    <li><code>|dataset|</code> is even</li>\r\n    <li><code>1 &lt;= matchCost, mismatchCost &lt;= 10^4</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_30Aug",
        "company_id": 426
    },
    {
        "id": 1261,
        "title": "Longest Regex Match Substring",
        "problem_statement": "<h1>Longest Regex Match Substring</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon is developing a string matching library. You are to develop a service that finds the longest substring that matches a given regex.</p>\r\n<p>More formally, you are given two strings, a text string <code>sourceString</code>, and a regex expression <code>pattern</code>. The string <code>pattern</code> contains exactly one wildcard character ('*'). A wildcard character ('*') matches any sequence of zero or more lowercase English characters. A regex matches some string if it is possible to replace the wildcard character with some sequence of characters such that the regex expression becomes equal to the string. No other character can be changed. For example, regex 'a*b' matches 'ab', 'aab', 'aaab', 'b', and 'aaaab'. It does not match 'acb', 'a*c', 'b*a'.</p>\r\n<p>Return the length of the longest substring of <code>sourceString</code> that matches the expression <code>pattern</code>. Return -1 if there is no such substring.</p>\r\n<p><strong>Note:</strong> A substring is a contiguous sequence of characters within a string.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>findMaxRegexMatch</code> in the editor below.</p>\r\n<p><code>findMaxRegexMatch</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>sourceString</code>: a string</li>\r\n    <li><code>pattern</code>: a string</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the length of the longest substring of <code>sourceString</code> that matches <code>pattern</code> or -1 if there is none</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Given <code>sourceString = \"hackerrank\"</code>, <code>pattern = \"ack*r\"</code></p>\r\n<p>The following substrings match <code>pattern</code>:</p>\r\n<ul>\r\n    <li><code>\"ackerr\"</code>, length = 6. We can replace <code>\"*\"</code> with <code>\"err\"</code></li>\r\n    <li><code>\"ackerrank\"</code>, length = 9. We can replace <code>\"*\"</code> with <code>\"errank\"</code></li>\r\n</ul>\r\n<p>Return the length of the longest matching substring, 9.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: sourceString = \"programming\", pattern = \"r*in\"\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>\"rammin\"</code>, length = 6. We can replace <code>\"*\"</code> with <code>\"amm\"</code></li>\r\n    <li><code>\"rogrammin\"</code>, length = 9. We can replace <code>\"*\"</code> with <code>\"ogramm\"</code></li>\r\n</ul>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: sourceString = \"debug\", pattern = \"ug*eb\"\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> No substring of <code>sourceString</code> begins with 'u' and ends with 'eb'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= sourceString.length, pattern.length <= 10^6</code></li>\r\n    <li><code>sourceString</code> contains lowercase English letters only.</li>\r\n    <li><code>pattern</code> contains lowercase English letters and exactly one wildcard ('*') character.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_30Aug",
        "company_id": 426
    }
]