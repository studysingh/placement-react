[
    {
        "id": 1030,
        "title": "Get Max Traffic Time",
        "problem_statement": "<h1>Get Max Traffic Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a client-server architecture with N clients and one server, each client starts interacting with the server at a specific time and stops at a specific time. The maximum traffic time is defined as the highest number of concurrent interactions with the server.</p>\r\n<p>Determine the earliest time when the maximum number of clients are interacting with the server.</p>\r\n<p><strong>Note:</strong> The endpoint is also included in the interaction.</p>\r\n\r\n<p>Complete the function <code>getMaxTrafficTime</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int start[n]</code>: interaction start times</li>\r\n    <li><code>int stop[n]</code>: interaction stop times</li>\r\n</ul>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the earliest time of maximum concurrent interactions</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p>Suppose <strong>Input:</strong> <code>start = [1, 6, 2, 9]</code> and <code>stop = [8, 7, 6, 10]</code></p>\r\n<p>The interaction timeline would be:</p>\r\n<pre><code class='language-text'>Time | Connection          | Active Clients\r\n-----|---------------------|---------------\r\n1    | Client 1 joined     | 1\r\n2    | Client 3 joined     | 1, 3\r\n3    |                     | 1, 3\r\n4    |                     | 1, 3\r\n5    |                     | 1, 3\r\n6    | Client 2 joined     | 1, 2, 3\r\n7    | Client 3 Left       | 1, 2\r\n8    | Client 2 Left       | 1\r\n9    | Client 1 Left and Client 4 Joined | 4\r\n10   |                     | 4\r\n11   | Client 4 Left       |</code></pre>\r\n<p><strong>Explanation:</strong> The maximum number of concurrent interactions is 3 which happens first at the 6th second. We return 6.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nstart = [2, 3, 7, 4, 7]\r\nstop = [4, 5, 8, 7, 10]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> At time t=4, the first, second, and fourth clients are connected to the server. At time t=7, the third, fourth, and fifth clients are connected. The maximum number of concurrent connections is 3, and the earliest time this occurs is 4.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nstart = [1, 1, 1]\r\nstop = [5, 5, 5]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> All three clients are connected to the server at t=1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= start[i] <= stop[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jpmc_27july",
        "company_id": 334
    },
    {
        "id": 1031,
        "title": "Maximum of Minimums",
        "problem_statement": "<h1>Maximum of Minimums</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array, for each subarray of a specified length, find the smallest element in the subarray. Among all these smallest elements, determine the largest one.</p>\r\n<p>The subarrays are formed by taking consecutive elements starting from each position in the array, with each subarray having the specified length. The last valid subarray ends exactly at the last element of the array.</p>\r\n<p>Complete the <code>maxMin</code> function in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: an array of integers</li>\r\n    <li><code>int k</code>: the subarray length</li>\r\n</ul>\r\n<p>The function is expected to return an <code>INTEGER</code> indicating the maximum of the minima of the subarrays.</p>\r\n<pre><code class='language-cpp'>int maxMin(vector<int> arr, int k)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\narr = [1, 2, 3, 4, 5]\r\nk = 2\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> For subarray size k=2, the subarrays are [1, 2], [2, 3], [3, 4], and [4, 5]. Their minima are [1, 2, 3, 4]. The final answer is 4, the maximum of these.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\narr = [1, 2, 3, 1, 2]\r\nk = 1\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Each element of arr = [1, 2, 3, 1, 2] is an array of size k=1 and its minimum. The maximum of these minima is 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\narr = [1, 1, 1]\r\nk = 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The two subarrays of size k=2 are [1, 1], [1, 1]. Their minima are [1, 1], and the maximum of these is 1.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\narr = [2, 5, 4, 6, 8]\r\nk = 3\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The subarrays of arr = [2, 5, 4, 6, 8] of size k=3 are [2, 5, 4], [5, 4, 6], and [4, 6, 8]. Their minima are [2, 4], and the maximum of these is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= arr[i] <= 10^9</code> (where <code>0 <= i < n</code>)</li>\r\n    <li><code>1 <= k <= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jpmc_27july",
        "company_id": 334
    }
]