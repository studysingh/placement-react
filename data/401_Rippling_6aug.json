[
    {
        "id": 1187,
        "title": "Minimum Time to Execute Processes",
        "problem_statement": "<h1>Minimum Time to Execute Processes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are <code>n</code> processes to be executed, each with a specific size given by <code>processSize[i]</code> for <code>0 &lt;= i &lt; n</code>. Additionally, there are <code>m</code> processors, each with a different size given by <code>capacity[j]</code> for <code>0 &lt;= j &lt; m</code>.</p>\r\n<p>A processor can execute a task in 1 second if the task size is less than or equal to its capacity; otherwise, it cannot execute the task. A processor can execute multiple processes one after the other, but needs to pause for 1 second after completing each one. Multiple processors can work on different tasks simultaneously.</p>\r\n<p>Determine the minimum time required to execute all the processes, or return -1 if it is not possible to execute them all.</p>\r\n<p>Complete the function <code>getMinimumTime</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int processSize[n]:</code> the size of each process</li>\r\n    <li><code>int capacity[m]:</code> the capacity of each processor</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int:</code> the minimum time required to execute all the processes, or -1 if there is no way to execute all processes</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, processSize = [2, 5, 3], m = 3, capacity = [6, 2, 4]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The optimal way to assign processes is to give the first processor the second process, the second processor the first process, and the third processor the third process. All of them complete their processes in 1 second. Therefore, the minimum time required is 1 second.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nprocessSize = [2, 5, 8]\r\nm = 3\r\ncapacity = [6, 7, 4]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> No processor has the required capacity to process the third process, so there is no way to process them all.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nprocessSize = [1, 2, 3, 4, 6]\r\nm = 3\r\ncapacity = [4, 7, 4]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>Assign the second and third processes to the first processor. It completes the first process in 1 second, then pauses for another second, before completing the third process. Therefore, it takes 3 seconds to complete all of its work.</li>\r\n    <li>Assign the first and fifth processes to the second processor. It also completes its processes in 3 seconds.</li>\r\n    <li>The fourth process is completed by the third processor in 1 second.</li>\r\n</ul>\r\nHence, all of the processes are completed in 3 seconds.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n, m &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= processSize[i], capacity[j] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Rippling_6aug",
        "company_id": 401
    },
    {
        "id": 1188,
        "title": "Minimize Process Execution Time",
        "problem_statement": "<h1>Minimize Process Execution Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given n processes that need to be executed. Among these n processes, k are classified as high-priority processes, with their indices (1-based) represented in the array high_priority[k].</p>\r\n<p>An OS scheduler is responsible for overseeing the execution of all processes. When a scheduler assigns a set of processes to a processor, it has two options:</p>\r\n<ul>\r\n    <li>If the assigned processes are greater than 1 and even, it can divide the array of processes, denoted as p, into two contiguous subarrays of equal length, p1 and p2, such that p = [p1, p2]. The scheduler will then allocate p1 to one processor and p2 to another.</li>\r\n    <li>Alternatively, the scheduler can choose to execute the assigned array of processes, p.</li>\r\n</ul>\r\n<p>The time required for process execution is determined based on the following criteria:</p>\r\n<ol>\r\n    <li>If the assigned processes do not include any high-priority processes, the scheduler will take <em>normal_time</em> seconds to complete all the assigned processes.</li>\r\n    <li>If there are high-priority processes among the assigned tasks (denoted as x), it will take (<em>priority_time</em> * x * l) seconds to complete them, where l is the total number of assigned processes.</li>\r\n</ol>\r\n<p>The total time required to execute all processes is the sum of the time taken by all processors for their assigned tasks. The task is to minimize the total execution time by optimizing the assignment of processes to processors within the operating system and return this minimum possible execution time.</p>\r\n\r\n<h2>Illustrative Example</h2>\r\n<p>n = 4<br>\r\nk = 1<br>\r\nnormal_time = 2<br>\r\npriority_time = 2<br>\r\nhigh_priority = [1]</p>\r\n<p>One of the optimal ways is as follows:</p>\r\n<ul>\r\n    <li>Assign a processor to [1, 2], which will execute the processes in (2 * 1 * 2) = 4 seconds.</li>\r\n    <li>Assign a processor to [3, 4], which will execute the processes in 2 seconds.</li>\r\n</ul>\r\n<p>Hence, the total time taken is 6 seconds.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinimumTime</code> in the editor below.</p>\r\n<p><code>getMinimumTime</code> takes the following parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: the total number of processes</li>\r\n    <li><code>int high_priority[k]</code>: the indices of the high-priority processes</li>\r\n    <li><code>int normal_time</code>: the time factor for completing non-high-priority processes</li>\r\n    <li><code>int priority_time</code>: the time factor for completing high-priority processes</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum total execution time by optimizing the assignment of processes to processors within the operating system</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>9</sup></code></li>\r\n    <li><code>n</code> is a power of 2</li>\r\n    <li><code>1 &le; k &le; min(n, 10<sup>5</sup>)</code></li>\r\n    <li><code>1 &le; high_priority[i] &le; n</code></li>\r\n    <li><code>1 &le; normal_time, priority_time &le; 10<sup>4</sup></code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, k = 2, high_priority = [1, 4], normal_time = 1, priority_time = 5\r\nOutput: 12</code></pre>\r\n<p><strong>Explanation:</strong> One of the optimal approaches involves assigning each of the four processors to one of the four processes.</p>\r\n<p>The time taken to complete a high-priority project will be (5 * 1 * 1) = 5 seconds.</p>\r\n<p>As a result, the total time required to complete all the processes will be (5 + 1 + 1 + 5) = 12 seconds.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Rippling_6aug",
        "company_id": 401
    }
]