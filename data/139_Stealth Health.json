[
    {
        "id": 475,
        "title": "Find Available Ticket Number",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Find Available Ticket Number</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Implement a generator function <code>promiseAccumulation()</code> that receives an arbitrary number of promises.</p>\n        <ul>\n            <li>If the promise is resolved, it yields the returned value.</li>\n            <li>If the promise is rejected, it yields <code>-1</code> and stops yielding values.</li>\n        </ul>\n        <p>For example, there are 3 promises: <code>{Promise.resolve(10), Promise.reject(), Promise.resolve(20)}</code>. The generator function should yield <code>10</code>, then <code>-1</code>, and stop.</p>\n        <p><strong>Note:</strong> The generator function should stop yielding after it encounters a reject. It is guaranteed that the test cases include a maximum of 1 rejected promise.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>Complete the function <code>promiseAccumulation()</code> in the editor below. <code>promiseAccumulation()</code> should yield an integer value based on the value in <code>promiseArr</code>.</p>\n        <p><code>promiseAccumulation()</code> has a single parameter <code>promiseArr</code>: an array of promises.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The function should yield the resolved values of the promises or <code>-1</code> if a promise is rejected.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 50</code></li>\n            <li><code>1 ≤ x ≤ 100</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\npromiseArr = [Promise.resolve(1), Promise.resolve(2), Promise.reject(), Promise.resolve(3)]</pre>\n            <pre class=\\\"output\\\">Output:\n1\n2\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>The first two promises resolve to 1 and 2, and the third promise rejects, yielding -1.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1i5cOJ3Fo6dyMsK8EZ-vTJPMXc-JS6DA4hzmlOBpJDGE/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\n\\nint main(){\\n    int n;\\n    cin>>n;\\n    for(int i=0;i<n;i++){\\n        int x;\\n        cin>>x;\\n        if(x == -1){\\n            cout<<-1<<\\'\\\\n\\';\\n            break;\\n        }\\n        else{\\n            cout<<x<<\\'\\\\n\\';\\n        }\\n    }\\n}",
        "company_name": "Stealth Health",
        "company_id": 139
    }
]