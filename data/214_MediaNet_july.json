[
    {
        "id": 654,
        "title": "Powerful Permutation",
        "problem_statement": "<h1>Powerful Permutation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an integer array A of length N. You can create any permutation P of length N.</p>\r\n<p>Using this permutation you can create an array Z - [A<sub>p0</sub>, A<sub>p1</sub>, ..., A<sub>pn</sub>]</p>\r\n<p>Now we will create a power array X of size 20 using this Z array.</p>\r\n<p>X[i] = maximum j such that &forall; k &le; j (Z[k] & 2<sup>i</sup>) &ne; 0 where 1 &le; i &le; 20</p>\r\n<p>A power array F will be greater than a power array G if there exists an index i such that F[i] > G[i] given that &forall; j < i, F[j] = G[j].</p>\r\n<p>Find the largest possible power array for any permutation.</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first argument is an integer array A.</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>Return an integer array of size 20 which is the greatest power array that can be formed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = [1, 2, 3, 4, 5]\r\nOutput: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1]</code></pre>\r\n<p><strong>Explanation:</strong> The optimal arrangement will be = [5, 4, 3, 2, 1]</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = [4, 16, 36, 30]\r\nOutput: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0]</code></pre>\r\n<p><strong>Explanation:</strong> The optimal arrangement will be = [36, 30, 4, 16]</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 &le; N &le; 2 x 10<sup>5</sup></li>\r\n<li>0 &le; A[i] < 2<sup>20</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "MediaNet_july",
        "company_id": 214
    },
    {
        "id": 655,
        "title": "Fire nation's fury I",
        "problem_statement": "<h1>Fire nation's fury I</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the world where avataar is missing, the fire nation has started a war against all other kingdoms. The fire nation has N cities numbered from 1 to N connected with some roads. Given arrays A and B of size N-1, there is a bidirectional road from A[i] to B[i] and we can reach each city from any other city. We consider city with index 1 (1 based index) as the root city.</p>\r\n<p>These cities need to work together in order to conquer the world but they are very egoistic. Each city is associated with some jealousy value.</p>\r\n<p>i<sup>th</sup> city's jealousy value will be equal to number of cities with index > i in its subtree.</p>\r\n<p>The Fire Lord gave you a very important task. Find the total sum of all the jealousy values of all the cities.</p>\r\n<p>Since the answer can be big, return the output % 1000000007</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10<sup>5</sup></li>\r\n    <li>1 &lt;= A[i], B[i] &lt;= N</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>First argument contains A.</p>\r\n<p>Second argument contains B.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return a single integer as the answer to question</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nA = [1 2 3]\r\nB = [4 3 2]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Node 1 is jealous of 2, 3, 4.</p>\r\n<p>Node 2 is jealous of 3.</p>\r\n<p>Total jealousy = 3 + 1 = 4</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nA = [1 6 4 2 7 3]\r\nB = [5 1 5 5 4 6]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Node 1 is jealous of 2, 3, 4, 5, 6, 7.</p>\r\n<p>Node 4 is jealous of 7.</p>\r\n<p>Node 5 is jealous of 7.</p>\r\n<p>Total jealousy = 6 + 1 + 1 = 8</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "MediaNet_july",
        "company_id": 214
    },
    {
        "id": 656,
        "title": "Vanish the Gems",
        "problem_statement": "<h1>Vanish the Gems</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In front of you there is a treasure containing many gems, soon you realise that they are not precious as they seem! Infact they are cursed with black magic and bring bad luck with them so you try to minimise the bad luck you get.</p>\r\n<p>You have the power to destroy 1 gem in 1 second. You can destroy gems in any order.</p>\r\n<p>You are given a 2D array A, where for i<sup>th</sup> gem it takes A[i][0] seconds to give A[i][1] units of bad luck. At any instant, only one gem can give you the bad luck, and you can decide the order in which you want to receive the bad luck. Once the receiving of bad luck starts from any gem it cannot be destroyed and it automatically vanishes after giving A[i][1] units of bad luck.</p>\r\n<p>Although while receiving bad luck from any gem, you can choose to destroy any other gem which is available in the treasure. There is no time lapse in between receiving of bad lucks from any two gems. As soon as one gem finishes giving bad luck, you have to choose second gem from the treasure to receive the bad luck.</p>\r\n<p>Return the maximum amount of bad luck that you can <strong>avoid/destroy</strong>.</p>\r\n<p><strong>Note:</strong> Receiving bad luck is a continuous process. And at any instant you <strong>cannot</strong> receive bad luck from more than one gem. If you are recieving bad luck from any gem then you can choose second gem only after A[i][0] seconds.</p>\r\n<p><strong>Input Format:</strong> First argument is 2D array A containing information about each gem.</p>\r\n<p><strong>Output Format:</strong> Return a single integer the maximum amount of bad luck destroyed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = [[0, 1], [0, 10]]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Destroying a gem will take 1 unit of time, so we cannot destroy any bad luck at all, since both of the gems take 0 seconds to give bad luck.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = [[0, 10], [1, 4], [1, 3], [1, 20]]\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong> We can destroy 1st and 4th gem in 2 seconds while receiving bad luck from 2nd and 3rd.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |A| <= 2x10^5</code></li>\r\n    <li><code>|A[i]| == 2</code></li>\r\n    <li><code>0 <= A[i][0] <= 2x10^5</code></li>\r\n    <li><code>1 <= A[i][1] <= 10^6</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "MediaNet_july",
        "company_id": 214
    },
    {
        "id": 657,
        "title": "Matrix Pass-code",
        "problem_statement": "<h1>Matrix Pass-code</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>GOAT-master got arrested in a police chaos. He is trying to escape the high-tech prison he is held captive in. He needs a pass-code for disabling the systems in order to escape. Pass-code is the solution of matrix problem given below. Help him finding the pass-code.</p>\r\n<p>You are given a matrix of order N x M. Each cell in a matrix has a value A[i][j] >= 0, which is either positive or equal to -1 (representing blocked cell).</p>\r\n<p>You can traverse from a cell in any direction (up, down, left, or right) if there is no blockage (i.e., the destination cell is not -1).</p>\r\n<p>Cells which are not blocked have distinct values.</p>\r\n<p>For any cell A[i][j], its 'sed-value' S[i][j] is defined as sum of values of cells A[x][y] which are multiple of A[i][j] but not reachable from A[i][j]. For blocked cells, sed-value is 0.</p>\r\n<p>Pass-code P is sum of sed-values of all the cells, modulo 100000007.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: [[1 3 -1 5], [-1 -1 -1 -1], [2 6 -1 10], [8 7 -1 11]]\r\nOutput: 68</code></pre>\r\n<p><strong>Explanation:</strong> The explanation content for this example is not visible in the provided image.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: [[1]]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The explanation content for this example is not visible in the provided image.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 1e3</code></li>\r\n    <li><code>1 <= M <= 1e3</code></li>\r\n    <li><code>A[i][j] = -1</code> for blocked cells only.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>First argument is a 2-D array of integers denoting the above matrix.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "MediaNet_july",
        "company_id": 214
    },
    {
        "id": 658,
        "title": "Rainwater Harvesting",
        "problem_statement": "<h1>Rainwater Harvesting</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an N x M matrix of positive integers representing the height of each unit cell in a 2D elevation map. Return the volume of water that is able to trap after raining.</p>\r\n<p><strong>Input:</strong> The first and the only argument given is the integer matrix A.</p>\r\n<p><strong>Output:</strong> Return the volume of water that is trapped after raining.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = [\r\n    [1, 4, 3, 1, 3, 2],\r\n    [3, 2, 1, 3, 2, 4],\r\n    [2, 3, 3, 2, 3, 1]\r\n]\r\nOutput: 4</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N, M &lt;= 110</code></li>\r\n    <li><code>1 &lt;= A[i] &lt;= 19999</code></li>\r\n</ul>\r\n\r\n<p>The method signature for the solution is:</p>\r\n<pre><code class='language-cpp'>int Solution::solve(vector&lt;vector&lt;int&gt;&gt; &amp;A) {\r\n    \r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "MediaNet_july",
        "company_id": 214
    },
    {
        "id": 659,
        "title": "Orange Tax",
        "problem_statement": "<h1>Orange Tax</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You live in Orange town. There are a lot of markets around that are connected with roads. These markets sell oranges at some prices. The town is not very well developed and they still use carts to transport goods from one place to the other. The roads connect two markets together and have one attribute associated with them. The attribute is the price to go from one market to the other in an empty cart. The town also has a tax factor, the tax factor is the number by which the price associated with a road needs to be multiplied, so it can go from one market to the other if you are carrying oranges in your cart. So if a road's original price was 5 coins and tax factor of the town was 6 then in an empty cart it would take 5 coins to travel the road but if the cart contained oranges, it would cost 5 x 6 = 30 coins.</p>\r\n<p>You wonder what would be the cheapest way to buy oranges if you were initially at each market. You can either buy at the market you're at or travel to some other market, buy oranges there, and travel back to the original market.</p>\r\n<p>You are given an integer A denoting the number of total markets in orange town.<br>An integer array B denoting the price of purchasing oranges at each market.<br>A 2-D array C containing the information about the roads where each row contains three values. The first two values denote the market numbers that are bi-directionally connected via a road and the third value is the price.<br>You are also given an integer D, this is the tax factor for the Orange town.</p>\r\n<p>Find and return the required array where each element is the minimum cost to buy oranges at each market such that the starting and ending point is that market.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= A <= 10^5</code></li>\r\n    <li><code>B.size() == A</code></li>\r\n    <li><code>1 <= B[i] <= 10^4</code></li>\r\n    <li><code>1 <= C.size() <= 2 * 10^5</code></li>\r\n    <li><code>1 <= C[0], C[1] <= A</code></li>\r\n    <li><code>1 <= C[2] <= 10^3</code></li>\r\n    <li><code>1 <= D <= 5</code></li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Input:</strong></p>\r\n<p>The first argument is the integer A.<br>The second argument is the integer array B.<br>The third argument is the 2-D integer array C.<br>The fourth argument is the integer D.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p><strong>Output:</strong></p>\r\n<p>Return an integer array as per the given problem.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nA = 4\r\nB = [3, 1, 10, 1]\r\nC = [[2, 1, 2], [3, 1, 2], [4, 1, 4], [3, 2, 1], [4, 1, 4], [4, 2, 2], [4, 3, 1]]\r\nD = 1\r\nOutput: [3, 1, 3, 1]</code></pre>\r\n<p><strong>Explanation:</strong> For 1st, 2nd, and 4th market, there is no better way. For the third market, since 3 and 2 are connected with a road that costs only 1. We can use that road to travel to 2 for cost 1 and buy oranges from market 2 for cost 1, and travel back for cost 1 * 1 for a final cost of 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nA = 2\r\nB = [1, 3]\r\nC = [[1, 2, 3]]\r\nD = 1\r\nOutput: [1, 3]</code></pre>\r\n<p><strong>Explanation:</strong> 1 and 3 are already their respective minimum costs.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "MediaNet_july",
        "company_id": 214
    }
]