[
    {
        "id": 643,
        "title": "Minimum Overall Complexity",
        "problem_statement": "<h1>Minimum Overall Complexity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alex is attending a software engineering conference in which various lectures are presented. The subject matter of each lecture has a certain complexity. Alex has planned the order of lectures they would like to attend, but now they need to schedule these into several days. Their goal is to attend at least one lecture every day and to plan the lectures in a way that minimizes the overall complexity of the conference. (Each day's complexity is defined as the complexity of the most complex lecture attended that day.) Given the complexity levels of the lectures, as well as how many days the conference is being held, what is the overall minimum complexity that can be achieved with optimal planning?</p>\r\n\r\n<p>For example, let's say there are n = 5 lectures, where complexity = [1, 5, 3, 2, 4], and the length of the conference is days = 2. (Note that complexity denotes both the complexity of each lecture as well as the order in which they need to be attended.) The best option is to attend the first lecture on the first day and the rest on the second day. The complexity of the first day would be 1, since that's the only lecture, and the complexity of the second day would be 5, because that's the complexity level of the most complex lecture that day. Therefore, the answer is 1 + 5 = 6.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function `findMinComplexity` in the editor below.</p>\r\n<p><code>findMinComplexity</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int complexity[]</code>: an array of integers denoting the order and complexity of the lectures</li>\r\n    <li><code>int days</code>: the number of days the conference is being held</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum overall complexity level that can be achieved with optimal planning</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int findMinComplexity(vector&lt;int&gt; complexity, int days) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: complexity = [30, 10, 40, 20, 50], days = 2\r\nOutput: 80</code></pre>\r\n<p><strong>Explanation:</strong> Alex can attend the first and second lectures on the first day (with complexities 30 and 10) and the rest on the second day (with complexities 40, 20, and 50). The overall complexity would be calculated as max(30, 10) + max(40, 20, 50), which would be 30 + 50 = 80.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: complexity = [74303, 20452, 66120, 44483, 5370, 68585], days = 5\r\nOutput: 234830</code></pre>\r\n<p><strong>Explanation:</strong> The best option is to attend the third and fourth lectures on the same day (with complexities 66120 and 44483), and the remaining four subjects on the other days. The overall complexity would be calculated as 74303 + 20452 + max(66120, 44483) + 5370 + 68585, which is 234830.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 300</code> (where n is the size of <code>complexity</code> array)</li>\r\n    <li><code>1 &lt;= days &lt;= n</code></li>\r\n    <li><code>1 &lt;= complexity[i] &lt;= 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_10july",
        "company_id": 211
    },
    {
        "id": 644,
        "title": "JSON Difference",
        "problem_statement": "<h1>JSON Difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Develop a simple service to compare two JSON (JavaScript Object Notation) objects and identify differences in their key-value pairs.</p>\r\n<p>To keep the prototype straightforward:</p>\r\n<ul>\r\n    <li>Each JSON object will contain only key-value pairs (no nested objects or arrays).</li>\r\n    <li>Given two JSON strings, <code>json1</code> and <code>json2</code>, determine the list of keys where the values differ.</li>\r\n    <li>Ignore keys that appear in only one of the JSON objects.</li>\r\n    <li>The output should be a list of differing keys, sorted in alphabetical order.</li>\r\n</ul>\r\n<p>Complete the function <code>getJSONDiff</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>json1</code>: the first JSON string</li>\r\n    <li><code>json2</code>: the second JSON string</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>string[]</code>: a sorted list of keys that have different associated values in the two JSONs</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: json1 = '{\"name\":\"Alex\",\"age\":\"25\",\"city\":\"NewYork\"}', json2 = '{\"name\":\"Alex\",\"age\":\"30\",\"city\":\"LosAngeles\",\"country\":\"USA\"}'\r\nOutput: [\"age\", \"city\"]</code></pre>\r\n<p><strong>Explanation:</strong> The \"age\" and \"city\" keys have different values. The \"country\" key does not appear in both JSONs. Return the sorted list [\"age\", \"city\"].</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: json1 = '{\"hacker\":\"rank\",\"input\":\"output\"}', json2 = '{\"hacker\":\"ranked\",\"input\":\"wrong\"}'\r\nOutput: [\"hacker\", \"input\"]</code></pre>\r\n<p><strong>Explanation:</strong> Neither key's values are the same in both strings.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: json1 = '{\"hacker\":\"rank\",\"input\":\"output\"}', json2 = '{\"hacker\":\"rank\",\"input\":\"output\"}'\r\nOutput: []</code></pre>\r\n<p><strong>Explanation:</strong> Both values match in both strings, so return an empty list.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |json1|, |json2| <= 10^5</code></li>\r\n    <li>There are no white spaces in the string.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_10july",
        "company_id": 211
    }
]