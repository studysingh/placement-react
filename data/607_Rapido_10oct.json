[
    {
        "id": 1729,
        "title": "Collecting coins",
        "problem_statement": "<h1>Collecting coins</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>John is playing a battle royale game in which the game consists of N heroes and M villains. The powers of the heroes and the villains are represented by arrays A and B, respectively. A hero can defeat a villain if his power is greater than or equal to the villain's power. A hero gains some number of coins corresponding to the villain he defeated. After defeating a particular villain, the coins are represented by an array C of size M.</p>\r\n<p>Find out the number of coins each hero can collect by defeating any villains in the game.</p>\r\n\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>The health of a hero doesn't get reduced after defeating a villain.</li>\r\n    <li>A villain can be defeated by multiple heroes.</li>\r\n</ul>\r\n\r\n<p><strong>Function Description:</strong></p>\r\n<p>Complete the solve function. This function takes the following 5 parameters and returns an array of N integers that represents the answer to the task as described above in the problem statement:</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents the number of heroes in the game</li>\r\n    <li><strong>M:</strong> Represents the number of villains in the game</li>\r\n    <li><strong>A:</strong> Represents an array of N integers denoting the powers of the N heroes in the game</li>\r\n    <li><strong>B:</strong> Represents an array of M integers denoting the powers of the M villains in the game</li>\r\n    <li><strong>C:</strong> Represents an array of M integers denoting the number of coins a hero gets after he defeats the ith villain in the game</li>\r\n</ul>\r\n\r\n<p><strong>Input format:</strong></p>\r\n<p><strong>Note:</strong> This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line contains 2 space-separated integers denoting the function parameters N and M respectively.</li>\r\n    <li>The second line contains N space-separated integers denoting the values of the function parameter A.</li>\r\n    <li>The third line contains M space-separated integers denoting the values of the function parameter B.</li>\r\n    <li>The fourth line contains M space-separated integers denoting the values of the function parameter C.</li>\r\n</ul>\r\n\r\n<p><strong>Output format:</strong></p>\r\n<p>Return an array of N space-separated integers denoting the maximum number of coins each hero can collect in the game.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 4\r\n1 3 5 2 4\r\n1 4 2 9\r\n1 2 8 4\r\nOutput:\r\n1 9 11 9 11</code></pre>\r\n<p><strong>Explanation:</strong> For the given sample input, we have N=5 heroes and M=4 villains.\r\nHero powers <strong>A</strong> = [1, 3, 5, 2, 4]\r\nVillain powers <strong>B</strong> = [1, 4, 2, 9]\r\nCoins <strong>C</strong> = [1, 2, 8, 4]\r\n</p>\r\n<ul>\r\n    <li><strong>Hero 0 (power 1):</strong> Can defeat Villain 0 (power 1). Coins: C[0] = 1. Total = 1.</li>\r\n    <li><strong>Hero 1 (power 3):</strong> Can defeat Villain 0 (power 1), Villain 2 (power 2). Coins: C[0] + C[2] = 1 + 8 = 9. Total = 9.</li>\r\n    <li><strong>Hero 2 (power 5):</strong> Can defeat Villain 0 (power 1), Villain 1 (power 4), Villain 2 (power 2). Coins: C[0] + C[1] + C[2] = 1 + 2 + 8 = 11. Total = 11.</li>\r\n    <li><strong>Hero 3 (power 2):</strong> Can defeat Villain 0 (power 1), Villain 2 (power 2). Coins: C[0] + C[2] = 1 + 8 = 9. Total = 9.</li>\r\n    <li><strong>Hero 4 (power 4):</strong> Can defeat Villain 0 (power 1), Villain 1 (power 4), Villain 2 (power 2). Coins: C[0] + C[1] + C[2] = 1 + 2 + 8 = 11. Total = 11.</li>\r\n</ul>\r\n<p>Therefore, the output is [1, 9, 11, 9, 11].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N, M &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; A<sub>i</sub> &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; B<sub>i</sub>, C<sub>i</sub> &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<long long> solve(int N, int M, const std::vector<int>& A, const std::vector<int>& B, const std::vector<int>& C) {\n        // Core logic goes here\n        return std::vector<long long>(N);\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N, M;\n    std::cin >> N >> M;\n\n    std::vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i];\n    }\n\n    std::vector<int> B(M);\n    for (int i = 0; i < M; ++i) {\n        std::cin >> B[i];\n    }\n\n    std::vector<int> C(M);\n    for (int i = 0; i < M; ++i) {\n        std::cin >> C[i];\n    }\n\n    Solution solution;\n    std::vector<long long> result = solution.solve(N, M, A, B, C);\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Rapido_10oct",
        "company_id": 607
    },
    {
        "id": 1730,
        "title": "Card Selection Combinatorics",
        "problem_statement": "<h1>Card Selection Combinatorics</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You possess a deck consisting of 10 different card categories. Each category features a distinct digit ranging from 0 through 9. For every digit, you have exactly K identical cards available. Your complete deck contains 10&times;K cards in total.</p>\r\n<p>Your task is to pick exactly N cards from this 10&times;K card collection and calculate how many distinct combinations of N cards are achievable.</p>\r\n<p>Each combination must comprise precisely N cards. Two combinations are deemed identical if they contain the same cards, regardless of the sequence in which the cards appear.</p>\r\n<p><strong>Note:</strong> Given that the result may be extremely large, output the answer modulo (10<sup>9</sup>+7).</p>\r\n\r\n<p>Implement the <code>solve</code> function. This function accepts the following 2 parameters and outputs the total number of ways:</p>\r\n<ul>\r\n    <li><strong>N:</strong> Denotes the quantity of cards that must be chosen</li>\r\n    <li><strong>K:</strong> Indicates the number of cards available for each digit type</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int solve (int N, int K) {\r\n    // Write your code here\r\n}</code></pre>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains two space-separated integers N and K.</li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>Print the result representing the count of distinct combinations of N cards modulo (10<sup>9</sup>+7).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 10 1\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given</p>\r\n<ul>\r\n    <li>N = 10</li>\r\n    <li>K = 1</li>\r\n</ul>\r\n<p>Approach</p>\r\n<p>Since K = 1, there is 1 card of each type from 0 to 9. Since N = 10, you need to determine ways to choose 10 cards.</p>\r\n<p>There is only 1 way to do so that is pick up all 10 cards (one card from each type from 0 to 9).</p>\r\n<p>Thus, the answer is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N, K &le; 10<sup>9</sup></code></li>\r\n    <li><code>N &le; 10 &times; K</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param N The quantity of cards that must be chosen.\n     * @param K The number of cards available for each digit type.\n     * @return The total number of ways to choose N cards modulo (10^9 + 7).\n     */\n    long long solve(int N, int K) {\n        // Write your code here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N, K;\n    std::cin >> N >> K;\n\n    Solution solution;\n    long long result = solution.solve(N, K);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Rapido_10oct",
        "company_id": 607
    },
    {
        "id": 1731,
        "title": "Multiple",
        "problem_statement": "<h1>Multiple</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two boxes of chocolate containing A and B chocolates representing the number of chocolates Alex and Drake have, respectively. Drake is the younger child and will only be happy if he receives a multiple of what Alex gets. You decided to buy some extra chocolates.</p>\r\n<p>Mathematically, The share of chocolates will be <code>k * (A + X) = (B - Y)</code> for some non-negative integer X and Y and some positive integer k.</p>\r\n<p>What is the minimum number of extra chocolates (X + Y) that you need to buy?</p>\r\n<p><strong>Note:</strong> The original chocolates (A and B) cannot be transferred among each other.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the function <code>solution</code>. The function takes 2 parameters and returns the solution:</p>\r\n<ul>\r\n    <li>A: Represents the number of initial chocolates in Alex's box</li>\r\n    <li>B: Represents the number of initial chocolates in Drake's box</li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains A, denoting the number of initial chocolates in Alex's box.</li>\r\n    <li>The second line contains B, denoting the number of initial chocolates in Drake's box.</li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>Print an integer representing the minimum number of extra chocolates you must buy.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n16\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given</p>\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li>A = 8</li>\r\n    <li>B = 16</li>\r\n</ul>\r\n<p><strong>Output:</strong> 0</p>\r\n<p><strong>Approach:</strong></p>\r\n<p>For the given test case, if you let X=0 and Y=0, then B+Y=16 will be a multiple of A+X=8. Here, you have X+Y=0, and there is no way to make X+Y smaller, so the answer is 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; A, B &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits</h3>\r\n<ul>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages</h3>\r\n<p>Bash, C, C++14, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long solve(long long A, long long B) {\n        // Core logic goes here\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    long long A, B;\n    std::cin >> A;\n    std::cin >> B;\n\n    Solution solution;\n    long long result = solution.solve(A, B);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Rapido_10oct",
        "company_id": 607
    }
]