[
    {
        "id": 224,
        "title": "Delivery Route Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Delivery Route Optimization</h2>\n        <div class=\\\"time-limit\\\">Time Limit: 1 second</div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Mr. Kim, engineer at Samsung Electronics Service Center, plans to visit N customers to deliver refrigerators on his way home after work. Locations of his office, his home, and each customer are represented by two-dimensional coordinates (x, y) where (0≤x≤100, 0≤y≤100). The distance between two locations (x1, y1) and (x2, y2) is calculated by |x1-x + |y1-y2| where |x| denotes the absolute value of x. The locations of his office, his home, and the customers are all distinct.</p>\n        \n        <p>You should find the optimal path for Mr. Kim to take off from his office, visit all N customers and return to his home among all possible paths.</p>\n        \n        <p>Given the coordinates of his office, his home, and customers (between 2 and 10 customers), write a program that finds a path with the shortest moving distance among the paths that start at his office, visit all customers, and end at his home. Your program should only find the moving distance of the shortest path.</p>\n        \n        <p class=\\\"note\\\">Finding a shortest path \\'efficiently\\' is not your goal, which means you could look for all possible paths as you find your solution. If you can figure out all possible cases systematically, you will certainly get the perfect score.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>N, the number of customers, is 2≤N≤10</li>\n            <li>All N+2 coordinates including those of Mr. Kim\\'s office and home are distinct and values of the coordinates (x, y) are integers that are \\'0\\' or more and \\'100\\' or less. (0≤x≤100, 0≤y≤100)</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>10 test cases will be given throughout 20 lines with each test case consisting of two lines. The first line of each test case has N, the number of customers, and the following line has an ordered enumeration of coordinates of Mr. Kim\\'s office, home and N customers. A coordinate is a set of two numbers (x, y) where \\'x\\' is separated from \\'y\\' by a space.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print answers for each of the 10 test cases in 10 lines. Start each line with \\'#x\\' where \\'x\\' is the test case number, leave a space and write the distance of the shortest path.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Input/Output</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">5\n0 0 100 100 70 40 30 10 10 5 90 70 50 20</pre>\n            <pre class=\\\"output\\\">#1 200</pre>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">6\n88 81 85 80 19 22 31 15 27 29 30 10 20 26 5 14</pre>\n            <pre class=\\\"output\\\">#2 304</pre>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">10\n39 9 97 61 35 93 62 64 96 39 36 36 9 59 59 96 61 7 64 43 43 58 1 36</pre>\n            <pre class=\\\"output\\\">#3 366</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1PaiuJFEe1p-_UjTvgTf3TMnCuyiTDWvQJBUYAQHnrUk/edit?usp=sharing",
        "solution_code": "#include<iostream>  \\n#include<climits> \\nusing namespace std; \\n\\nint x_coords[20], y_coords[20], n, ans;\\nint destination_x, destination_y, source_x, source_y;\\n\\nint distance(int u, int v){\\n    return abs(x_coords[u] - x_coords[v]) + abs(y_coords[u] - y_coords[v]);\\n}\\n\\nvoid optimalPath(int current, bool visited[], int nodesVisited, int currentValue){\\n    if(currentValue >= ans) return;\\n    if(nodesVisited == n){\\n        int totalDistance = currentValue + distance(current, n + 1);\\n        if(totalDistance < ans){\\n            ans = totalDistance;\\n        }\\n        return;\\n    }\\n    for(int i = 1; i <= n; i++){\\n        if(!visited[i]){\\n            visited[i] = true;\\n            optimalPath(i, visited, nodesVisited + 1, currentValue + distance(current, i));\\n            visited[i] = false;\\n        }\\n    }\\n}\\n\\nint main(){ \\n    ios::sync_with_stdio(false);\\n    cin.tie(NULL);\\n\\n    int tCases; \\n    cin >> tCases;\\n\\n    for(int testCase = 1; testCase <= tCases; testCase++){ \\n        ans = INT32_MAX;\\n        cin >> destination_x >> destination_y >> source_x >> source_y;\\n        x_coords[n + 1] = destination_x;\\n        y_coords[n + 1] = destination_y;\\n        x_coords[0] = source_x;\\n        y_coords[0] = source_y;\\n        cin >> n;\\n        for(int i = 1; i <= n; i++){\\n            cin >> x_coords[i] >> y_coords[i];\\n        }\\n        bool visited[n + 2];\\n        for(int i = 0; i < n + 2; i++) visited[i] = false;\\n        optimalPath(0, visited, 0, 0);\\n        cout << \\\"#\\\" << testCase << \\\" \\\" << ans << \\\"\\\\n\\\"; \\n    } \\n    return 0; \\n}",
        "company_name": "Samsung Research ",
        "company_id": 58
    },
    {
        "id": 308,
        "title": "Interstellar II",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Interstellar II</h1>\n        <div class=\\\"metadata\\\">\n            <p>Execution time: 5sec(C/C++/JAVA), 15sec(Python) within for maximum 50 test cases combined</p>\n            <p>Memory: maximum 256MB is available for heap, global, and static combined (Note that maximum 1MB is available for stack)</p>\n            <p>Submissions: 10 times</p>\n            <p>Evaluation criteria: The number of correct test cases</p>\n        </div>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The era of traveling the great universe through the use of wormholes has come.</p>\n        \n        <div class=\\\"problem-image\\\">\n            <img src=\\\"wormhole-diagram.jpg\\\" alt=\\\"Diagram showing wormhole concept with grid coordinates\\\">\n        </div>\n\n        <p>All of the locations in the universe are given as 2-dimensional coordinates of (X, Y). The spacecraft can only move to the parallel directions to the X-axis or Y-axis and it takes 1 second to move 1 distance.</p>\n\n        <div class=\\\"formula\\\">\n            <p>Therefore, the time that the spacecraft needs to move from (x1, y1) to (x2, y2) is as follows:</p>\n            <code>Time = |x2 - x1| + |y2 - y1|</code>\n        </div>\n\n        <p>There are N wormholes in the outer space. Ki, the time to pass through each wormhole, is different for each. The wormhole can be passed through bi-directionally.</p>\n        \n        <p>For the sake of convenience, the two entrances of the wormhole can be called Gate A and Gate B.</p>\n\n        <div class=\\\"important-notes\\\">\n            <ul>\n                <li>Not all wormholes have to be used to reach the destination point. Also, it is okay if none of the wormholes are used.</li>\n                <li>It is also okay not to use a wormhole even though the spacecraft gets to the point of a wormhole.</li>\n            </ul>\n        </div>\n\n        <p>Samsung Electronics is developing an automatic navigation system which will be loaded on the spacecraft.</p>\n        <p><strong>Given the starting and destination point (location) of the spacecraft and the information on each wormhole, find the minimum time from the starting to the destination point.</strong></p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>In the first line, T, the number of test cases is given. From the next lines on, each test case are given.</p>\n        <p>In the first line of each test case, N, the number of wormholes is given.</p>\n        <p>In the second line, the starting [x, y] and destination [x, y] point of the spacecraft are given.</p>\n        <p>From the third line to the \\'N+1\\'th line on, each information on the wormhole is given.</p>\n        <p>The coordinates [x, y] for Gate A and [x, y] for Gate B of each wormhole, as well as the time to pass through the wormhole are given.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print \\\"#T\\\" for Test Case T, leave a space and print the correct answer. (T means the number of test cases and starts from 1).</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The number of wormholes, N, is greater or equal to 0 and less or equal to 5. (0 ≤ N ≤ 5)</li>\n            <li>The time to pass through a wormhole, Ki, is greater or equal to 0 and less or equal to 3,000. (0 ≤ Ki ≤ 3,000)</li>\n            <li>X, Y, the coordinate of the universe is greater or equal to 0 and less or equal to 1,000. (0 ≤ X, Y ≤ 1,000)</li>\n            <li>Not in any case are the starting and destination points of the spacecraft, the location of the wormholes the same.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">5        // number of test cases T = 5\n0         // Test Case 1, N = 0\n0 0 60 60 // starting point(0,0), destination point(60,60)\n1         // Test Case 2, N = 1\n0 0 2 0   // starting point(0,0), destination point(2,0)\n1 0 1 2 0 // 1st wormhole, Gate A(1,0), Gate B(1,2), time to pass through 0\n1         // Test Case 3, N = 1\n0 0 60 60\n40 40 20 20 10\n2         // Test Case 4, N = 2\n100 50 10 5  // starting point (100,50), destination point(10,5)\n80 40 10 6 10 // 1st wormhole, Gate A(80,40), Gate B(10,6), time to pass through 10\n80 10 70 40 5 // 2nd wormhole, Gate A(80,10), Gate B(70,40), time to pass through 5\n3         // Test Case 5, N = 3\n500 500 1000 1000\n501 501 999 999 1000\n1 1 499 499 100\n1000 999 0 0 200</pre>\n            <pre class=\\\"output\\\">#1 120\n#2 2    // Wormhole can be ignored\n#3 90\n#4 41\n#5 305</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/13tNO-0Ic_oH44zhDfIw0FHe3GDO0CtfJkHsrNyrluFo/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\nconst ll INF = 1e18;\\n\\nll manhattan(pair<int, int> a, pair<int, int> b) {\\n    return abs((ll)a.first - b.first) + abs((ll)a.second - b.second);\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(NULL);\\n    \\n    int T;\\n    cin >> T;\\n    \\n    for(int tc = 1; tc <= T; tc++){\\n        int N;\\n        cin >> N;\\n        \\n        pair<int, int> s, e;\\n        cin >> s.first >> s.second >> e.first >> e.second;\\n        \\n        struct Wormhole {\\n            pair<int, int> a;\\n            pair<int, int> b;\\n            ll k;\\n        };\\n        vector<Wormhole> wh(N);\\n        for(int i = 0; i < N; i++){\\n            cin >> wh[i].a.first >> wh[i].a.second\\n                >> wh[i].b.first >> wh[i].b.second\\n                >> wh[i].k;\\n        }\\n        \\n        int total = 2 + 2*N;\\n        vector<pair<int, int>> nodes(total);\\n        nodes[0] = s;\\n        nodes[1] = e;\\n        for(int i = 0; i < N; i++){\\n            nodes[2 + 2*i] = wh[i].a;\\n            nodes[2 + 2*i +1] = wh[i].b;\\n        }\\n        \\n        vector<vector<pair<int, ll>>> adj(total, vector<pair<int, ll>>());\\n        for(int i = 0; i < total; i++){\\n            for(int j = 0; j < total; j++){\\n                if(i == j) continue;\\n                ll dist = manhattan(nodes[i], nodes[j]);\\n                adj[i].emplace_back(j, dist);\\n            }\\n        }\\n        for(int i = 0; i < N; i++){\\n            int a = 2 + 2*i;\\n            int b = 2 + 2*i +1;\\n            ll k = wh[i].k;\\n            adj[a].emplace_back(b, k);\\n            adj[b].emplace_back(a, k);\\n        }\\n        \\n        vector<ll> dist(total, INF);\\n        dist[0] = 0;\\n        priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;\\n        pq.emplace(0, 0);\\n        \\n        while(!pq.empty()){\\n            pair<ll, int> curr = pq.top();\\n            pq.pop();\\n            \\n            ll d = curr.first;\\n            int u = curr.second;\\n            \\n            if(u == 1){\\n                break;\\n            }\\n            \\n            if(d > dist[u]){\\n                continue;\\n            }\\n            \\n            for(auto &[v, cost] : adj[u]){\\n                if(dist[v] > dist[u] + cost){\\n                    dist[v] = dist[u] + cost;\\n                    pq.emplace(dist[v], v);\\n                }\\n            }\\n        }\\n        \\n        cout << \\\"#\\\" << tc << \\\" \\\" << dist[1] << \\\"\\\\n\\\";\\n    }\\n}",
        "company_name": "Samsung Research ",
        "company_id": 58
    }
]