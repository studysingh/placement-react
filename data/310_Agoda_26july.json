[
    {
        "id": 967,
        "title": "Minimum Operations to Connect All Computers",
        "problem_statement": "<h1>Minimum Operations to Connect All Computers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A set of computers may be connected by ethernet cables, with each cable connecting exactly two distinct computers. Computers are considered connected if they have either a direct or indirect connection to each other.</p>\r\n<p>Initially, some groups of computers are connected to each other, but others may be disconnected. You can perform one type of operation: remove a cable between any two computers and use it to connect any other pair of computers.</p>\r\n<p>Determine the minimum number of such operations required to connect all computers. If it is not possible to connect all computers, return -1.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: comp_nodes = 4, comp_edges = 3, comp_from = [1,1,3], comp_to = [2,3,2]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Initially, there are connections between computers (1,2), (1,3), and (2,3), but computer 4 is disconnected. By removing the cable between computers 2 and 3 and placing it between computers 2 and 4, all computers become connected. The minimum number of operations required is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: comp_nodes = 2, comp_edges = 1, comp_from = [1], comp_to = [2]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> All the computers are connected.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: comp_nodes = 4, comp_edges = 2, comp_from = [1,2], comp_to = [3,4]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> It is not possible to connect all computers.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= comp_nodes <= 10^5</code></li>\r\n    <li><code>1 <= comp_edges <= 10^5</code></li>\r\n    <li><code>1 <= comp_from[i], comp_to[i] <= comp_nodes</code></li>\r\n    <li><code>comp_from[i] != comp_to[i]</code></li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>minOperations</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int comp_nodes</code>: the number of computers</li>\r\n    <li><code>vector&lt;int&gt; comp_from</code>: one end of each connection</li>\r\n    <li><code>vector&lt;int&gt; comp_to</code>: the other end of each connection</li>\r\n</ul>\r\n<p>The function is expected to return an <code>INTEGER</code>.</p>\r\n<p>The function accepts an UNWEIGHTED_INTEGER_GRAPH <code>comp</code> as parameter.</p>\r\n<pre><code class='language-cpp'>int minOperations(int comp_nodes, vector&lt;int&gt; comp_from, vector&lt;int&gt; comp_to) {\r\n    // Complete the 'minOperations' function below.\r\n    // ...\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Agoda_26july",
        "company_id": 310
    },
    {
        "id": 968,
        "title": "Maximum Team Size",
        "problem_statement": "```html\r\n<h1>Maximum Team Size</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given <code>n</code> employees, the time when the <code>i</code>-th employee starts working is represented by the array <code>startTime[i]</code> and the time when they finish the work is represented by the array <code>endTime[i]</code>.</p>\r\n<p>The <code>i</code>-th employee can interact with the <code>P</code>-th employee if their working hours overlap. A team can only be formed if at least one employee of the team can interact with all other team members.</p>\r\n<p>Determine the maximum size of such a team.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMaximumTeamSize</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of employees</li>\r\n    <li><code>int startTime[]</code>: an array representing the start times of employees' work</li>\r\n    <li><code>int endTime[]</code>: an array representing the end times of employees' work</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the maximum possible team size</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4\r\nstartTime = [2, 5, 6, 8]\r\nendTime = [3, 6, 10, 9]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The working hours are: Employee 0: [2,3], Employee 1: [5,6], Employee 2: [6,10], Employee 3: [8,9].\r\nConsider the group [1, 2, 3]. Employee 2 (working hours [6,10]) overlaps with Employee 1 ([5,6]) and Employee 3 ([8,9]).\r\nSpecifically, Employee 2 overlaps with Employee 1 at time 6, and with Employee 3 over the interval [8,9].\r\nSince Employee 2 can interact with all other members (Employee 1 and Employee 3) in the group [1, 2, 3], this forms a valid team of size 3. A team with more than 3 employees is impossible. Therefore, the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5\r\nstartTime = [1, 2, 8, 8, 10]\r\nendTime = [6, 10, 12, 9, 11]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The working hours are: Employee 0: [1,6], Employee 1: [2,10], Employee 2: [8,12], Employee 3: [8,9], Employee 4: [10,11].\r\nConsider the group of employees [0, 1, 2, 3]. Employee 1 (working hours [2,10]) can interact with:\r\n<ul>\r\n    <li>Employee 0 ([1,6]): Overlap [2,6]</li>\r\n    <li>Employee 2 ([8,12]): Overlap [8,10]</li>\r\n    <li>Employee 3 ([8,9]): Overlap [8,9]</li>\r\n</ul>\r\nSince Employee 1 can interact with all other members (Employee 0, Employee 2, and Employee 3) in the group [0, 1, 2, 3], this forms a valid team of size 4. The maximum possible team size is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= startTime[i], endTime[i] <= 10^9</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Agoda_26july",
        "company_id": 310
    },
    {
        "id": 969,
        "title": "Palindromic Sequences",
        "problem_statement": "<h1>Palindromic Sequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Palindromic sequences are used as test cases to assess the performance of a machine-learning algorithm for detecting and manipulating palindromic patterns. Given an array of integers <code>data[n]</code>, the objective is to convert the array into a palindromic sequence for training the ML algorithm.</p>\r\n\r\n<p>The operation for manipulating the array is:</p>\r\n<ul>\r\n    <li>Choose two integers <code>x</code> and <code>y</code>.</li>\r\n    <li>Replace every occurrence of <code>x</code> in the array with <code>y</code>.</li>\r\n</ul>\r\n\r\n<p>The task is to determine the minimum number of operations required to transform the <code>data</code> array into a palindrome.</p>\r\n\r\n<p>Complete the <code>getMinOperations</code> function in the editor with the following parameter:</p>\r\n<ul>\r\n    <li><code>int data[n]</code>: the data to be preprocessed to test a machine learning algorithm</li>\r\n</ul>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the minimum number of operations required to make the array a palindrome</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 6, data = [1, 2, 3, 3, 1, 4]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Initially, <code>data = [1, 2, 3, 3, 1, 4]</code>.</p>\r\n<p>Operation 1: Replace all occurrences of <code>1</code> with <code>4</code>. The array becomes <code>[4, 2, 3, 3, 4, 4]</code>.</p>\r\n<p>Operation 2: Replace all occurrences of <code>2</code> with <code>4</code>. The array becomes <code>[4, 4, 3, 3, 4, 4]</code>.</p>\r\n<p>The array <code>[4, 4, 3, 3, 4, 4]</code> is a palindrome. Therefore, the minimum operations needed in this case is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: data = [1, 3, 3, 2, 1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> In a single operation, all occurrences of <code>3</code> can be replaced with <code>2</code>, resulting in the array <code>[1, 2, 2, 2, 1]</code>, which is a palindromic array.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: data = [2, 4, 5, 7, 4, 5, 5]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Initially, <code>data = [2, 4, 5, 7, 4, 5, 5]</code>.</p>\r\n<p>Operation 1: Replace all occurrences of <code>2</code> with <code>5</code>. The array becomes <code>[5, 4, 5, 7, 4, 5, 5]</code>.</p>\r\n<p>Operation 2: Replace all occurrences of <code>4</code> with <code>5</code>. The array becomes <code>[5, 5, 5, 7, 5, 5, 5]</code>.</p>\r\n<p>The array <code>[5, 5, 5, 7, 5, 5, 5]</code> is a palindrome. Therefore, the minimum operations needed in this case is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= data[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Agoda_26july",
        "company_id": 310
    }
]