[
    {
        "id": 619,
        "title": "Seating Arrangement Scatter Value",
        "problem_statement": "<h1>Seating Arrangement Scatter Value</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Malathi is a teacher who teaches Grade 2. She has fifteen students in her class, with one seat left empty. The assigned seating arrangement is a 4x4 grid, with students represented by uppercase letters 'A' to 'O' and the empty seat by a '.' (dot). The assigned arrangement is as follows:</p>\r\n<pre><code class='language-text'>A B C D\r\nE F G H\r\nI J K L\r\nM N O .</code></pre>\r\n<p>Every morning, the students come in and sit in any seat randomly. When Malathi arrives, she moves all the children to their assigned seats. Since this happens on a daily basis, Malathi wants to understand how different the daily random seating is compared to the assigned seating. To measure this, she wants to calculate the \"scatter\" of the seating arrangement.</p>\r\n<p>To calculate the scatter, one needs to measure the Manhattan distance for each student (and the empty seat) between their current position and their assigned position, and sum up all these distances. The Manhattan distance between two seats at positions (r1, c1) and (r2, c2) is defined as the sum of absolute differences between the rows and columns: |r1 - r2| + |c1 - c2|.</p>\r\n<p>Write a program that calculates the scatter value of the given seating arrangement.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the standard output and test cases will fail.</p>\r\n\r\n<p>The assigned positions (0-indexed) are:</p>\r\n<ul>\r\n    <li>A: (0,0) B: (0,1) C: (0,2) D: (0,3)</li>\r\n    <li>E: (1,0) F: (1,1) G: (1,2) H: (1,3)</li>\r\n    <li>I: (2,0) J: (2,1) K: (2,2) L: (2,3)</li>\r\n    <li>M: (3,0) N: (3,1) O: (3,2) .: (3,3)</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input will consist of four lines, each containing four characters. Together, the 16 characters will include the uppercase letters 'A' to 'O' and a '.' (dot).</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single line of output should contain the scatter value.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nABCD\r\nEFGH\r\nIJKL\r\nM.NO\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong>\r\nLet's compare the current positions from the input to their assigned positions (0-indexed):</p>\r\n<ul>\r\n    <li>'A' through 'L' are in their assigned positions, so their individual Manhattan distances are 0.</li>\r\n    <li>For the last row (row 3):\r\n        <ul>\r\n            <li>Character 'M': Current (3,0), Assigned (3,0). Distance = |3-3| + |0-0| = 0.</li>\r\n            <li>Character '.': Current (3,1), Assigned (3,3). Distance = |3-3| + |1-3| = 0 + 2 = 2.</li>\r\n            <li>Character 'N': Current (3,2), Assigned (3,1). Distance = |3-3| + |2-1| = 0 + 1 = 1.</li>\r\n            <li>Character 'O': Current (3,3), Assigned (3,2). Distance = |3-3| + |3-2| = 0 + 1 = 1.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The total scatter value is the sum of all individual distances: 0 + ... + 0 + 2 + 1 + 1 = 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The seating arrangement is always a 4x4 grid, and assigned seating is fixed as given above.</li>\r\n    <li>The empty seat is also to be included in the scatter calculation.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_10july",
        "company_id": 204
    },
    {
        "id": 620,
        "title": "Max Different Roads",
        "problem_statement": "<h1>Max Different Roads</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Five friends are planning an adventure across a exotic country filled with mountains, forests, and lakes. The country is divided into N places (labeled 1 to N), which are connected by M bidirectional roads. The friends want to make a trip to be as adventurous as possible - that is, they want to see as many of the country as possible without taking the same road twice. They can start the trip from any place, but need to end the trip at place 1. They can choose to skip certain places or roads. They can also visit a place multiple times, but will not go through a road more than once.</p>\r\n<p>Given the above constraints, write a program to find the maximum number of roads the friends can go through in a single trip.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; N &le; 100</li>\r\n    <li>1 &le; M &le; 2N - 2</li>\r\n    <li>1 &le; A[i], B[i] &le; N, where A[i] and B[i] represent places.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input will contain two integers N and M - the number of places and roads, respectively.</p>\r\n<p>The next M lines each contain two integers A[i] and B[i] - representing a bidirectional road between places A[i] and B[i].</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should contain a single integer - the maximum number of different roads that can be used in a single path ending at place 1.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7 7\r\n1 2\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\nOutput:\r\n7</code></pre>\r\n<p><strong>Explanation:</strong> Given N=7 and M=7. The roads between places are (1,2), (1,3), (2,3), (3,4), (4,5), (5,6) and (6,7). So 7 different roads can be used.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_10july",
        "company_id": 204
    },
    {
        "id": 621,
        "title": "Zeta Sum Calculation",
        "problem_statement": "<h1>Zeta Sum Calculation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A list of N integers is given. Your task is to calculate the 'zeta sum' of the list by using the following process until the list becomes empty:</p>\r\n\r\n<ul>\r\n    <li>\r\n        <p><strong>Step 1 (First element):</strong></p>\r\n        <ul>\r\n            <li>Multiply the first element by 1 (its position).</li>\r\n            <li>Add the largest element currently in the list to this product to get the zeta sum of this element.</li>\r\n            <li>Delete the first element from the list.</li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <p><strong>Step 2 (Last element):</strong></p>\r\n        <ul>\r\n            <li>Multiply the last element by its current position in the list (position counting always starts from 1).</li>\r\n            <li>Add the largest element currently in the list to this product to get the zeta sum of this element.</li>\r\n            <li>Delete the last element from the list.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<p>Repeat these two steps alternately on the remaining list until no elements remain. The zeta sum of the list is the sum of the zeta sums of all the elements in the list.</p>\r\n\r\n<p>Write a program that accepts N integers and prints the final zeta sum of the list.</p>\r\n\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>Constraints are mentioned but not fully visible in the provided image.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_10july",
        "company_id": 204
    },
    {
        "id": 625,
        "title": "File Grouping and Sorting",
        "problem_statement": "<h1>File Grouping and Sorting</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string <code>S</code> which contains a set of filenames separated by single spaces, where each filename consists of a file name and an extension, separated by a dot (<code>.</code>). Your task is to write a program that groups the files by their extension, and then sorts the files within each group as per ASCII norms. The groups should be sorted by their extension, and each group of files should be printed in a new line.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output, and test cases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>A single line of input will contain a string <code>S</code> that contains space-separated file names in the format \"filename.extension\".</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output consists of <code>N</code> lines, where each line represents a group of filenames that share the same extension, where:</p>\r\n<ul>\r\n    <li>Each group (line) contains filenames with the same extension, sorted as per ASCII and separated by spaces.</li>\r\n    <li>The groups (lines) are ordered by their extension names, and sorted as per ASCII.</li>\r\n    <li><code>N</code> is the total number of distinct extensions (i.e., groups) present in <code>S</code>.</li>\r\n    <li>There should be no extra blank lines and no trailing newline after the last group.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: test_9.png test1.jpg test1.mp4 test5.png testT01.jpg\r\nOutput: testO1.jpg test1.jpg\r\ntest1.mp4\r\ntest5.png test_9.png</code></pre>\r\n<p><strong>Explanation:</strong> Given S is \"test_9.png test1.jpg test1.mp4 test5.png testT01.jpg\". The files are grouped by extension, then sorted within groups, and finally groups are sorted by extension.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: front.py a_py file10.txt file_1.js sample.html sample.mp4 back.py test.html 1234.py Action.js RESULT.xml data.docx DATA.docx action.js\r\nOutput: action.JS\r\nDATA.docx data.docx\r\nsample.html test.html\r\nAction.js action.js file_1.js\r\nsample.mp4\r\n1234.py back.py file_a.py front.py\r\nfile10.txt\r\nRESULT.xml</code></pre>\r\n<p><strong>Explanation:</strong> After grouping and sorting based on the extension of each file we get the output as above.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>4 &lt;= The length of S &lt;= 1200</code></li>\r\n    <li><code>The number of file names in S can be from 2 to 100</code></li>\r\n    <li>Each filename in <code>S</code> will be in the format \"filename.extension\"</li>\r\n    <li>The file name consists only of letters, underscores (<code>_</code>) and numbers (0-9), and will always start with a letter or a number.</li>\r\n    <li>The dot (<code>.</code>) will only be used as a separator between the filename and extension.</li>\r\n    <li>The filenames and extensions are case-sensitive.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_10july",
        "company_id": 204
    },
    {
        "id": 626,
        "title": "File Grouping and Sorting",
        "problem_statement": "<h1>File Grouping and Sorting</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string <code>S</code> which contains a set of filenames separated by single spaces, where each filename consists of a file name and an extension, separated by a dot (<code>.</code>). Your task is to write a program that groups the files by their extension, and then sorts the files within each group as per ASCII norms. The groups should be sorted by their extension, and each group of files should be printed in a new line.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not write arbitrary strings anywhere in the program, as these contribute to the standard output, and test cases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>A single line of input will contain a string <code>S</code> that contains space-separated file names in the format \"filename.extension\".</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output consists of <code>N</code> lines, where each line represents a group of filenames that share the same extension, where:</p>\r\n<ul>\r\n    <li>Each group (line) contains filenames with the same extension, sorted as per ASCII and separated by spaces.</li>\r\n    <li>The groups (lines) are ordered by their extension names, and sorted as per ASCII.</li>\r\n    <li><code>N</code> is the total number of distinct extensions (i.e., groups) present in <code>S</code>.</li>\r\n    <li>There should be no extra blank lines and no trailing newline after the last group.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: test_9.png test1.jpg test1.mp4 test5.png testT01.jpg\r\nOutput: testO1.jpg test1.jpg\r\ntest1.mp4\r\ntest5.png test_9.png</code></pre>\r\n<p><strong>Explanation:</strong> Given S is \"test_9.png test1.jpg test1.mp4 test5.png testT01.jpg\". The files are grouped by extension, then sorted within groups, and finally groups are sorted by extension.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: front.py a_py file10.txt file_1.js sample.html sample.mp4 back.py test.html 1234.py Action.js RESULT.xml data.docx DATA.docx action.js\r\nOutput: action.JS\r\nDATA.docx data.docx\r\nsample.html test.html\r\nAction.js action.js file_1.js\r\nsample.mp4\r\n1234.py back.py file_a.py front.py\r\nfile10.txt\r\nRESULT.xml</code></pre>\r\n<p><strong>Explanation:</strong> After grouping and sorting based on the extension of each file we get the output as above.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>4 &lt;= The length of S &lt;= 1200</code></li>\r\n    <li><code>The number of file names in S can be from 2 to 100</code></li>\r\n    <li>Each filename in <code>S</code> will be in the format \"filename.extension\"</li>\r\n    <li>The file name consists only of letters, underscores (<code>_</code>) and numbers (0-9), and will always start with a letter or a number.</li>\r\n    <li>The dot (<code>.</code>) will only be used as a separator between the filename and extension.</li>\r\n    <li>The filenames and extensions are case-sensitive.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_10july",
        "company_id": 204
    },
    {
        "id": 627,
        "title": "Question 12",
        "problem_statement": "<h1>Question 12</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A list of N integers is given. Your task is to calculate the \"zeta sum\" of the process until the list becomes empty:</p>\r\n\r\n<p><strong>Step 1 [First element]:</strong></p>\r\n<ul>\r\n    <li>Multiply the first element by 1 (its position).</li>\r\n    <li>Add the largest element currently in the list to this product to get the zeta sum of this element.</li>\r\n    <li>Delete the first element from the list.</li>\r\n</ul>\r\n\r\n<p><strong>Step 2 [Last element]:</strong></p>\r\n<ul>\r\n    <li>Multiply the last element by its current position in the list (position counting always starts from 1).</li>\r\n    <li>Add the largest element currently in the list to this product to get the zeta sum of this element.</li>\r\n    <li>Delete the last element from the list.</li>\r\n</ul>\r\n\r\n<p>Repeat these two steps alternately on the remaining list until no elements remain. The zeta sum of the list is the total of the zeta sums of all the elements in the list.</p>\r\n\r\n<p>Write a program that accepts N integers and prints the total \"zeta sum\" of the list.</p>\r\n\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 3500</code></li>\r\n    <li><code>1 <= Value of each element <= 10^4</code></li>\r\n    <li>Counting positions always starts from 1.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input will contain N, the total number of elements in the list.</p>\r\n<p>The second line of input will contain N integers, each separated by a single space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should contain the total \"zeta sum\" of the list.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3 1 4\r\nOutput:\r\n21</code></pre>\r\n<p><strong>Explanation:</strong> Given N = 3 and A = [3, 1, 4]. The first and last elements are deleted alternately as follows.</p>\r\n<p>The first element is 3. Its position is 1. The largest element in the list is 4, so zeta sum of first element = (3*1+4).</p>\r\n<p>Element 3 is deleted, and the remaining list is [1, 4].</p>\r\n<p>The last element is 4. Its position is 2. The largest element in the remaining list is 4, so zeta sum = (4*2+4).</p>\r\n<p>Element 4 is deleted.</p>\r\n<p>The remaining list contains one element 1. Its position is 1. The largest element in the list is 1, so zeta sum = (1*1+1).</p>\r\n<p>The total zeta sum of the list is (3*1+4) + (4*2+4) + (1*1+1) = 21.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n2 3 1 4\r\nOutput:\r\n30</code></pre>\r\n<p><strong>Explanation:</strong> Given N = 4 and A as 2, 3, 1, 4. The first and last elements are deleted alternately as follows.</p>\r\n<p>The first element is 2. Its position is 1. The largest element in the list is 4, so zeta sum of first element = (2*1+4).</p>\r\n<p>Element 2 is deleted, and the remaining list is [3, 1, 4].</p>\r\n<p>The last element is 4. Its position is 3. The largest element in the remaining list is 4, so zeta sum = (4*3+4).</p>\r\n<p>Element 4 is deleted, and the remaining list contains [3, 1].</p>\r\n<p>The first element is 3. Its position is 1. The largest element in the remaining list is 3, so zeta sum = (3*1+3).</p>\r\n<p>Element 3 is deleted, and the remaining list contains [1].</p>\r\n<p>The remaining element is 1. Its position is 1. The largest element in the list is 1, so zeta sum = (1*1+1).</p>\r\n<p>The total zeta sum is (2*1+4) + (4*3+4) + (3*1+3) + (1*1+1) = 30.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_10july",
        "company_id": 204
    },
    {
        "id": 628,
        "title": "Maximum Roads in Adventure Trip",
        "problem_statement": "<h1>Maximum Roads in Adventure Trip</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Five friends are planning an adventure trip across a scenic country filled with mountains, forests, and lakes. The country is divided into N places (labeled 1 to N), which are connected by M bidirectional roads. The friends want their trip to be as adventurous as possible — that is, they want to see as much of the country as possible without taking the same road twice. They can start the trip from any place, but need to end the trip at Place 1. They can choose to skip certain places or roads. They can also visit a place multiple times, but will not go through a road more than once.</p>\r\n<p>Given the above constraints, write a program to find the maximum number of roads the friends can go through in a single trip.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. Do not print arbitrary strings anywhere in the program, as these contribute to the output and test cases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input will contain two integers N and M — the number of places and roads, respectively.</p>\r\n<p>The next M lines each contain two integers A[i] and B[i] — representing a bidirectional road between places A[i] and B[i].</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should contain a single integer — the maximum number of different roads that can be used in a single path ending at place 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= N <= 100</code></li>\r\n    <li><code>1 <= M <= 2N - 2</code></li>\r\n    <li><code>1 <= A[i], B[i] <= N</code>, where <code>A[i]</code> and <code>B[i]</code> represent places.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n7 7\r\n1 2\r\n2 3\r\n3 1\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> Given N = 7 and M = 7. The roads between places are given as (1,2), (2,3), (3,1), (3,4), (4,5), (5,6), and (6,7). The best option is to start from 7 and end at 1, i.e., 7->6->5->4->3->2->1 so that a total of 6 roads are covered. All other routes cover fewer roads, hence the output is 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n7 10\r\n1 7\r\n7 6\r\n6 5\r\n5 4\r\n4 3\r\n3 2\r\n2 1\r\n6 2\r\n5 2\r\n4 2\r\nOutput:\r\n8</code></pre>\r\n<p><strong>Explanation:</strong> Given N = 7 and M = 10. The roads between places are given as (1,7), (7,6), (6,5), (5,4), (4,3), (3,2), (2,1), (6,2), (5,2), and (4,2). By following the rules given, out of all the possible ways, we get a few longest routes as:</p>\r\n<ul>\r\n    <li>1 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1, or</li>\r\n    <li>1 -> 2 -> 3 -> 4 -> 2 -> 5 -> 6 -> 7 -> 1, or</li>\r\n    <li>1 -> 2 -> 5 -> 4 -> 3 -> 2 -> 6 -> 7 -> 1 and so on.</li>\r\n</ul>\r\n<p>All these use 8 roads, which is printed as the output.</p>\r\n\r\n<h2>Code Snippet (C++)</h2>\r\n<pre><code class='language-cpp'>#include &lt;iostream&gt;\r\n#include &lt;vector&gt;\r\nusing namespace std;\r\n\r\nint PrintResults(int N, int M, const vector&lt;int&gt;&amp; A, const vector&lt;int&gt;&amp; B) { // N and M represents\r\n// number of places and roads, two integers A[i] and B[i] represents a bidirectional road between\r\n// places A[i] and B[i]\r\n    int max_path_length = 0;\r\n\r\n    return max_path_length;\r\n}\r\n\r\nint main() {\r\n    int N, M;\r\n    cin >> N >> M;\r\n    vector&lt;int&gt; A(M), B(M);\r\n\r\n    for (int i = 0; i &lt; M; ++i) {\r\n        cin >> A[i] >> B[i];\r\n    }\r\n\r\n    cout &lt;&lt; PrintResults(N, M, A, B) &lt;&lt; endl;\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman Sachs_10july",
        "company_id": 204
    }
]