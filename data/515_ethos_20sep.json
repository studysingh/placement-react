[
    {
        "id": 1472,
        "title": "Track Command Position",
        "problem_statement": "<h1>Track Command Position</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A network contains `n` nodes, where node 1 is the root node. The network structure is represented as a tree, with each node (except the root) having exactly one parent specified by the array `par`, where `par[i]` represents the parent of node `(i+1)` (0-based indexing).</p>\r\n<p>Commands propagate through the network as follows:</p>\r\n<ul>\r\n    <li>A node sends the command to its direct child nodes in ascending order of their indices.</li>\r\n    <li>Each child node propagates the command to its subtree using the same process.</li>\r\n    <li>The propagation stops when all nodes in the subtree have received the command.</li>\r\n</ul>\r\n<p>Given `q` queries, each query `(startNodeID, nodeID)` asks for the `nodeID`-th node in the sequence of command propagation starting from node `startNodeID`. Return the `nodeID`-th node or `-1` if fewer than `nodeID` nodes receive the command. Each query is processed independently.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function `getAnswersToQueries` in the editor with the following parameters:</p>\r\n<ul>\r\n    <li>`int par[n]`: Each `par[i]` represents the parent of the `i`-th node.</li>\r\n    <li>`int query[q][2]`: Each `query[i]` consists of [`startNodeID`, `nodeID`].</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>vector<int> getAnswersToQueries(vector<int> par, vector<vector<int>> query) {\r\n    // Complete the getAnswersToQueries function below.\r\n    // The function is expected to return an INTEGER_ARRAY.\r\n    // The function accepts following parameters:\r\n    //  1. INTEGER_ARRAY par\r\n    //  2. 2D_INTEGER_ARRAY query\r\n}</code></pre>\r\n\r\n<h3>Returns</h3>\r\n<p>`int[]`: an array of integers of size `q` representing answers to the queries.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 9\r\npar = [-1, 1, 1, 3, 5, 3, 5, 7]\r\nq = 4\r\nquery = [[1, 5], [7, 2], [9, 2], [3, 6]]\r\n\r\nOutput: [8, 9, -1, 9]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe tree structure for `n=9` and `par = [-1, 1, 1, 3, 5, 3, 5, 7]` is:</p>\r\n<p>Node 1 is the root.</p>\r\n<pre><code class='language-text'>    1\r\n   /|\\\r\n  2 3 4\r\n    |\r\n    5\r\n   / \\\r\n  6   7\r\n      |\r\n      8\r\n      |\r\n      9\r\n</code></pre>\r\n<p>If node 1 sends a command, the nodes receive it in the following order: [1, 2, 3, 6, 8, 7, 9, 4].</p>\r\n<p>If node 5 sends a command, the nodes receive it in the following order: [5, 7, 9].</p>\r\n<p>If node 7 sends a command, the nodes receive it in the following order: [7, 9].</p>\r\n<p>If node 9 sends a command, the nodes receive it in the following order: [9].</p>\r\n<p>So, on processing the queries:</p>\r\n<ul>\r\n    <li>1. <strong>query[0] = [1, 5]</strong>: If node 1 sends a command, the 5th node receiving it would be 8.</li>\r\n    <li>2. <strong>query[1] = [7, 2]</strong>: If node 7 sends a command, the 2nd node receiving it would be 9.</li>\r\n    <li>3. <strong>query[2] = [9, 2]</strong>: If node 9 sends a command, there's no 2nd node to receive it.</li>\r\n    <li>4. <strong>query[3] = [3, 6]</strong>: If node 3 sends a command, the 6th node receiving it would be 9.</li>\r\n</ul>\r\n<p>Hence, the array returned = [8, 9, -1, 9].</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\npar = [-1, 1, 1, 2, 2]\r\nq = 2\r\nquery = [[1, 3], [3, 3]]\r\n\r\nOutput: [4, 5]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe tree structure for `n=5` and `par = [-1, 1, 1, 2, 2]` is:</p>\r\n<pre><code class='language-text'>    1\r\n   / \\\r\n  2   3\r\n / \\\r\n4   5\r\n</code></pre>\r\n<p>If node 1 sends a command, the nodes receive it in the following order: [1, 2, 4, 3, 5].</p>\r\n<p>If node 2 sends a command, the nodes receive it in the following order: [2, 4, 5].</p>\r\n<p>If node 3 sends a command, the nodes receive it in the following order: [3, 5].</p>\r\n<p>So, on processing the queries:</p>\r\n<ul>\r\n    <li>1. <strong>query[0] = [1, 3]</strong>: If node 1 sends a command, the 3rd node, node 4, receives it.</li>\r\n    <li>2. <strong>query[1] = [3, 3]</strong>: If node 3 sends a command, the 3rd node, node 5, receives it.</li>\r\n</ul>\r\n<p>Hence, the array returned = [4, 5].</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 7\r\npar = [-1, 1, 1, 2, 3, 1, 6]\r\nq = 3\r\nquery = [[2, 4], [7, 1], [1, 6]]\r\n\r\nOutput: [-1, 7, 6]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe tree structure for `n=7` and `par = [-1, 1, 1, 2, 3, 1, 6]` is:</p>\r\n<pre><code class='language-text'>    1\r\n   /|\\\r\n  2 3 6\r\n  | | |\r\n  4 5 7\r\n</code></pre>\r\n<p>If node 2 sends a command, the nodes receive it in the following order: [2, 4].</p>\r\n<p>If node 7 sends a command, the nodes receive it in the following order: [7].</p>\r\n<p>If node 1 sends a command, the nodes receive it in the following order: [1, 2, 4, 3, 5, 6, 7].</p>\r\n<p>So, on processing the queries:</p>\r\n<ul>\r\n    <li>1. <strong>query[0] = [2, 4]</strong>: If node 2 sends a command, there is no 4th node to receive it.</li>\r\n    <li>2. <strong>query[1] = [7, 1]</strong>: If node 7 sends a command, the 1st node, node 7, receives it.</li>\r\n    <li>3. <strong>query[2] = [1, 6]</strong>: If node 1 sends a command, the 6th node, node 6, receives it.</li>\r\n</ul>\r\n<p>Hence, the array returned = [-1, 7, 6].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`2 <= n <= 10^5`</li>\r\n    <li>`par[0] = -1` and `1 <= par[i] <= n` for all nodes except the root node.</li>\r\n    <li>`1 <= q <= 2 * 10^5`</li>\r\n    <li>`1 <= query[i][0] <= n`</li>\r\n    <li>`1 <= query[i][1] <= n`</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ethos_20sep",
        "company_id": 515
    },
    {
        "id": 1473,
        "title": "REST API: Finest Food Outlets",
        "problem_statement": "<h1>REST API: Finest Food Outlets</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Use the HTTP GET method to retrieve information from a database of food outlets. Query <code>https://jsonmock.hackerrank.com/api/food_outlets?city=&lt;city&gt;&amp;page=&lt;page_no&gt;</code> to find all the records for a city. The query result is paginated. To access additional pages, append <code>&amp;page=&lt;num&gt;</code> to the URL, where <code>&lt;num&gt;</code> is the page number.</p>\r\n\r\n<p>The response is a JSON object with the following 5 fields:</p>\r\n<ul>\r\n    <li><code>page</code>: The current page of the results. (Number)</li>\r\n    <li><code>per_page</code>: The maximum number of results returned per page. (Number)</li>\r\n    <li><code>total</code>: The total number of results. (Number)</li>\r\n    <li><code>total_pages</code>: The total number of pages with results. (Number)</li>\r\n    <li><code>data</code>: Either an empty array or an array with a single object that contains the food outlets' records.</li>\r\n</ul>\r\n\r\n<p>In data, each food outlet has the following schema:</p>\r\n<ul>\r\n    <li><code>id</code>: outlet ID (Number)</li>\r\n    <li><code>name</code>: Name of the outlet (String)</li>\r\n    <li><code>city</code>: The city in which the outlet is located (String)</li>\r\n    <li><code>estimated_cost</code>: The estimated cost of the food in the particular outlet (Number).</li>\r\n    <li><code>user_rating</code>: An object containing the user ratings for the outlet. The object has the following schema:\r\n        <ul>\r\n            <li><code>average_rating</code>: The average user rating for the outlet (Number)</li>\r\n            <li><code>votes</code>: The number of people who voted for the outlet (Number)</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<p>Given the city name as <code>city</code> and minimum vote count as <code>votes</code>, filter the results by city name. Find the food outlet with the highest rating and whose vote count is greater than or equal to the required minimum votes. In case of a tie in the rating, return the one with the maximum vote count.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>findFinestFoodOutlet</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string city</code>: name of the city whose outlets have to be filtered</li>\r\n    <li><code>integer votes</code>: number of votes</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>string</code>: the winning restaurant</p>\r\n\r\n<p><strong>Note:</strong> Please review the header in the code stub to see available libraries for API requests in the selected language. Required libraries can be imported in order to solve the question. Check our full list of supported libraries at <a href=\"https://www.hackerrank.com/environment\">https://www.hackerrank.com/environment</a>.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ncity = Seattle\r\nvotes = 500\r\nOutput: Cafe Juanita</code></pre>\r\n<p><strong>Explanation:</strong> In Seattle, results are filtered to those with votes >= 500. There are 4 food outlets whose rating is 4.9. Cafe Juanita has 16203 votes.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ncity = Miami\r\nvotes = 1000\r\nOutput: Pirates of Grill</code></pre>\r\n<p><strong>Explanation:</strong> In Miami, results are filtered to those with votes >= 1000. There are 5 food outlets whose rating is 4.8. Pirates of Grill has 4809 votes.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ethos_20sep",
        "company_id": 515
    },
    {
        "id": 1474,
        "title": "Pod Failure",
        "problem_statement": "<h1>Pod Failure</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A deployment automation team is analyzing pod failures. There are n logs where the i<sup>th</sup> log is denoted by <code>logs[i]</code> containing two integers.</p>\r\n<p>The log types are:</p>\r\n<ul>\r\n    <li><code>[1, k]</code>: An unused pod was activated with a load of k requests</li>\r\n    <li><code>[2, k]</code>: Load of k requests was added to all active pods</li>\r\n    <li><code>[3, 0]</code>: One pod with the least load failed</li>\r\n</ul>\r\n<p>For each log of type 3, find the load of the failed pod.</p>\r\n<p>Complete the function <code>findFailedPods</code> in the editor with the following parameters:</p>\r\n<pre><code class='language-cpp'>vector&lt;long&gt; findFailedPods(vector&lt;vector&lt;int&gt;&gt; logs) {\r\n\r\n}</code></pre>\r\n<p><strong>Return:</strong></p>\r\n<p><code>long[k]</code>: the loads of the failed pods with the least load</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 0:</h3>\r\n<pre><code class='language-text'>Input: logs = [[1, 15], [2, 21], [1, 30], [3, 0], [3, 0]]\r\nOutput: [30, 36]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Initially, there are no active pods.</li>\r\n    <li>For <code>[1, 15]</code>: A pod is activated with a load of 15 requests. Active pods: <code>[15]</code>.</li>\r\n    <li>For <code>[2, 21]</code>: All active pods have their load increased by 21 requests. Active pods: <code>[15+21] = [36]</code>.</li>\r\n    <li>For <code>[1, 30]</code>: A pod is activated with a load of 30 requests. Active pods: <code>[36, 30]</code>.</li>\r\n    <li>For <code>[3, 0]</code>: The pod with the least load (30) fails. The load 30 is recorded. Active pods: <code>[36]</code>.</li>\r\n    <li>For <code>[3, 0]</code>: The pod with the least load (36) fails. The load 36 is recorded. Active pods: <code>[]</code>.</li>\r\n    <li>Therefore, the failed loads are <code>[30, 36]</code>.</li>\r\n</ul>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: logs = [[1, 3], [1, 5], [3, 0], [2, 2], [3, 0]]\r\nOutput: [3, 7]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Initially, there are no active pods.</li>\r\n    <li>For <code>[1, 3]</code>: A pod is activated with a load of 3 requests. Active pods: <code>[3]</code>.</li>\r\n    <li>For <code>[1, 5]</code>: A pod is activated with a load of 5 requests. Active pods: <code>[3, 5]</code>.</li>\r\n    <li>For <code>[3, 0]</code>: The pod with the least load (3) fails. The load 3 is recorded. Active pods: <code>[5]</code>.</li>\r\n    <li>For <code>[2, 2]</code>: All active pods have their load increased by 2 requests. Active pods: <code>[5+2] = [7]</code>.</li>\r\n    <li>For <code>[3, 0]</code>: The pod with the least load (7) fails. The load 7 is recorded. Active pods: <code>[]</code>.</li>\r\n    <li>Therefore, the failed loads are <code>[3, 7]</code>.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: logs = [[1, 1], [1, 2], [2, 3], [1, 3], [3, 0], [2, 2], [3, 0]]\r\nOutput: [3, 6]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Initially, there are no active pods.</li>\r\n    <li>For <code>[1, 1]</code>: A pod is activated with a load of 1 request. Active pods: <code>[1]</code>.</li>\r\n    <li>For <code>[1, 2]</code>: A pod is activated with a load of 2 requests. Active pods: <code>[1, 2]</code>.</li>\r\n    <li>For <code>[2, 3]</code>: All active pods have their load increased by 3 requests. Active pods: <code>[1+3, 2+3] = [4, 5]</code>.</li>\r\n    <li>For <code>[1, 3]</code>: A pod is activated with a load of 3 requests. Active pods: <code>[4, 5, 3]</code>.</li>\r\n    <li>For <code>[3, 0]</code>: The pod with the least load (3) fails. The load 3 is recorded. Active pods: <code>[4, 5]</code>.</li>\r\n    <li>For <code>[2, 2]</code>: All active pods have their load increased by 2 requests. Active pods: <code>[4+2, 5+2] = [6, 7]</code>.</li>\r\n    <li>For <code>[3, 0]</code>: The pod with the least load (6) fails. The load 6 is recorded. Active pods: <code>[7]</code>.</li>\r\n    <li>Therefore, the failed loads are <code>[3, 6]</code>.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= logs[i][0] &lt;= 3</code></li>\r\n    <li><code>1 &lt;= logs[i][1] &lt;= 10<sup>9</sup></code> for ",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ethos_20sep",
        "company_id": 515
    }
]