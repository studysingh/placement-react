[
    {
        "id": 569,
        "title": "Triangle Summation",
        "problem_statement": "<h1>Triangle Summation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A student has created an innovative project for a science fair. To protect his work from being copied, the student decides to encrypt the project details from a sequence of digits.</p>\r\n<p>The student devises an encryption method he calls 'Triangle Summation'. When a sequence of digits (representing some aspect of his project) is input into his encryption system, it adds up the adjacent digits. The system then takes the rightmost digit (the least significant digit) from each sum and uses it for the next step. As a result, the number of digits in each step decreases by one. This process continues until only two digits remain, and this pair of digits forms the encrypted code for his project.</p>\r\n<p>Given the initial sequence of digits, your task is to determine the encrypted code using the student's 'Triangle Summation' method. The output should be a string representing the encrypted code.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: numbers = [4, 5, 6, 7]\r\nOutput: 04</code></pre>\r\n<p><strong>Explanation:</strong> Encryption occurs as follows:</p>\r\n<ul>\r\n    <li>Initial sequence: [4, 5, 6, 7]</li>\r\n    <li>First step (sum adjacent digits, take least significant digit):\r\n        <ul>\r\n            <li>4 + 5 = 9</li>\r\n            <li>5 + 6 = 11 -> 1</li>\r\n            <li>6 + 7 = 13 -> 3</li>\r\n        </ul>\r\n        New sequence: [9, 1, 3]\r\n    </li>\r\n    <li>Second step:\r\n        <ul>\r\n            <li>9 + 1 = 10 -> 0</li>\r\n            <li>1 + 3 = 4</li>\r\n        </ul>\r\n        New sequence: [0, 4]\r\n    </li>\r\n</ul>\r\n<p>Since only two digits remain, the process stops. Hence, the encrypted number formed is 04.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: numbers = [1, 2, 3, 4]\r\nOutput: 82</code></pre>\r\n<p><strong>Explanation:</strong> The encryption occurs as follows: [1, 2, 3, 4] -> [3, 5, 7] -> [8, 2].</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: numbers = [4, 5]\r\nOutput: 45</code></pre>\r\n<p><strong>Explanation:</strong> The number of digits in the sequence is already equal to 2 so the number remains unchanged.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getTriangleSummation</code> in the editor below.</p>\r\n<p><code>getTriangleSummation</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int numbers[n]</code>: the initial sequence of digits</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>string</code>: the encrypted number represented as a string of 2 characters.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= numbers.length <= 5 * 10^3</code></li>\r\n    <li><code>0 <= numbers[i] <= 9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DeShaw_5july",
        "company_id": 192
    },
    {
        "id": 570,
        "title": "Minimum Indices to Cover Positions",
        "problem_statement": "<h1>Minimum Indices to Cover Positions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array <code>arr[]</code> of length <code>n</code>.</p>\r\n<p>You can choose a set of indices and for each chosen index <code>i</code>, you can perform one of the following actions:</p>\r\n<ul>\r\n    <li>Cover positions from <code>max(i - arr[i] + 1, 0)</code> to <code>i</code>.</li>\r\n    <li>Cover positions from <code>i</code> to <code>min(i + arr[i] - 1, n - 1)</code>.</li>\r\n</ul>\r\n<p>Your task is to find the minimum number of indices to choose so that all positions from <code>0</code> to <code>n - 1</code> are covered.</p>\r\n<p>Complete the function <code>getMinIndices</code> in the editor below.</p>\r\n<p><code>getMinIndices</code> has the following parameter:</p>\r\n<p><code>int arr[]</code>: the elements of arr</p>\r\n<p>Returns</p>\r\n<p><code>int</code>: the minimum number of indices needed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 2, arr = [2, 1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> If we choose index 0 and use it to the right, it covers positions 0 to min(0 + 2 - 1, 2 - 1) = 0 to 1, i.e., both positions 0 and 1. Hence, the answer is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr[] size n = 4, arr = [1, 2, 1, 1]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One way to cover all positions is:</p>\r\n<ul>\r\n    <li>Choose index 1 and use it to the left -> covers positions 0 and 1.</li>\r\n    <li>Choose index 2 and use it to the right -> covers position 2.</li>\r\n    <li>Choose index 3 and use it to the right -> covers position 3.</li>\r\n</ul>\r\n<p>All positions 0 to 3 are now covered using 3 indices. Hence, the answer is 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: arr[] size n = 4, arr = [1, 2, 3, 4]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> If we choose index 3 and use it to the left, it covers positions from max(3 - 4 + 1, 0) = 0 to 3, covering all positions [0, 1, 2, 3]. Hence, the answer is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 500</code></li>\r\n    <li><code>1 <= arr[i] <= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DeShaw_5july",
        "company_id": 192
    },
    {
        "id": 571,
        "title": "Question 3",
        "problem_statement": "<h1>Question 3</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an integer array <code>arr</code> of length <code>n</code>. A subarray <code>arr[i]</code> is considered good if it contains at least one integer that appears exactly once within the subarray.</p>\r\n<p>You can select any element in <code>arr[]</code> and replace it with any integer. Find the minimum number of elements needed to be replaced so that every subarray of the array becomes good.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [1, 2, 1, 2]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Replace 0th element (0-based indexing) with 3 to get [3, 2, 1, 2]. Now, every subarray contains at least one element that appears exactly once within it. Thus, the answer is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [4, 4, 4, 4]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Replace 0th and 2nd element (0-based indexing) with 3 and 5 respectively to get [3, 4, 5, 4]. Now, every subarray contains at least one element that appears exactly once within it. Thus, the answer is 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 5, arr = [1, 3, 2, 1, 2]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> Every subarray already contains at least one element that appears exactly once in it. Thus, the answer is 0.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinReplacement</code> in the editor below.</p>\r\n<p><code>getMinReplacement</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int arr[]</code>: the elements of arr.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of replacement needed.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>1 &lt;= arr[i] &lt;= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "DeShaw_5july",
        "company_id": 192
    }
]