[
    {
        "id": 386,
        "title": "Task Scheduling Optimisation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>Task Scheduling Optimisation</h1>\n        <p>You are building a task scheduling system for a high-performance computing cluster. Each task has a priority and an estimated execution time. The goal is to efficiently schedule tasks based on their priority while maintaining a circular priority deque to minimize task switching overhead.</p>\n        <p>Design a data structure and algorithm to manage the task scheduling efficiently. Implement a Circular Priority Dequeue to maintain tasks in the order of their priority. This should ensure that the highest priority task is always scheduled next. Tasks with the same priority should be executed in a first-come, first-served manner.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function description</h3>\n        <p>Your task is to implement the following operations:</p>\n        <ul>\n            <li><code>enqueue(task, priority, execution_time):</code> Add a new task with the given priority and estimated execution time to the Circular Priority Dequeue.</li>\n            <li><code>dequeue():</code> Remove and return the highest priority task from the Circular Priority Dequeue.</li>\n            <li><code>execute_next_task():</code> Execute the next highest priority task in the Circular Priority Dequeue. This should remove the task from the Circular Priority Dequeue and return the task information.</li>\n            <li><code>is_empty():</code> Check if the Circular Priority Dequeue is empty.</li>\n            <li><code>size():</code> Get the number of tasks in the Circular Priority Dequeue.</li>\n        </ul>\n        <p>The algorithm should be implemented as a circular data structure to minimize the overhead of scheduling and descheduling tasks.</p>\n    </div>\n\n    <div class=\\\"rules\\\">\n        <h3>Rules</h3>\n        <ul>\n            <li>Priority is an integer (higher value indicates higher priority).</li>\n            <li>Execution time is a positive integer (time required to complete the task).</li>\n            <li>The circular priority deque should efficiently manage tasks with a large number of tasks.</li>\n            <li>Optimize the algorithm for task scheduling based on priority and minimize the execution time overhead.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"task\\\">\n        <h3>Task</h3>\n        <p>You are given <strong>M</strong> Queries:</p>\n        <ul>\n            <li>If Query is of type 1, Dequeue and return the Task name Dequeued.</li>\n            <li>If Query is of type 2, Execute the next task and return the Task name executed.</li>\n            <li>If Query is of type 3, Return the Size of the remaining Dequeue.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains <strong>N</strong> the number of tasks.</p>\n        <p>The second line contains <strong>N</strong> space-separated TaskNames.</p>\n        <p>The third line contains <strong>N</strong> space-separated Priorities associated with these TaskNames.</p>\n        <p>The fourth line contains <strong>N</strong> space-separated Execution times associated with these TaskNames.</p>\n        <p>The fifth line contains <strong>M</strong> the number of Queries.</p>\n        <p>The sixth line contains <strong>M</strong> space-separated Queries.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>For Each Query, task is to return/output the correct Operation based String on running the Query.</p>\n        <p>i.e., Dequeue / Execute a Task / Return Size of Dequeue.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ <strong>N</strong> ≤ 26</li>\n            <li><strong>TaskName.length</strong> = 1</li>\n            <li>1 ≤ <strong>Priority</strong> ≤ 100</li>\n            <li>1 ≤ <strong>ExecTime</strong> ≤ 1000</li>\n            <li>1 ≤ <strong>M</strong> ≤ 20</li>\n            <li><strong>Query</strong> ∈ {1, 2, 3}</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\nA B C D E\n3 3 3 1 5\n10 20 30 10 20\n6\n1 2 3 1 2 3</pre>\n            <pre class=\\\"output\\\">Output:\nDequeued: E\nExecuted: A\nSize: 3\nDequeued: B\nExecuted: C\nSize: 1</pre>\n            <div class=\\\"explanation\\\">\n                <p><strong>Explanation:</strong></p>\n                <p>E has highest priority, so it is Dequeued first.</p>\n                <p>A has next most priority, so it is executed next.</p>\n                <p>Size of Dequeue at this point is 3.</p>\n                <p>B has next most priority, however as it comes first, it is Dequeued.</p>\n                <p>C comes next after B, though it has equal priority, it is then executed.</p>\n                <p>Size of Dequeue at this point is 1, with only D remaining.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"notes\\\">\n        <h3>Note</h3>\n        <p>Your code must be able to print the sample output from the provided sample input. However, your code is run on hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\n    </div>\n\n    <div class=\\\"limits\\\">\n        <h3>Limits</h3>\n        <p>Time Limit: 1.0 sec(s) for each input file</p>\n        <p>Memory Limit: 256 MB</p>\n        <p>Source Limit: 1024 KB</p>\n    </div>\n\n    <div class=\\\"scoring\\\">\n        <h3>Scoring</h3>\n        <p>Score is assigned if any testcase passes.</p>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1e1fIa_RmK4wVNsF0o9fnUtTzLQiW_UIGli3oX02Smdc/edit?usp=sharing",
        "solution_code": "",
        "company_name": "CARS24",
        "company_id": 115
    },
    {
        "id": 387,
        "title": "Substring Match Optimizer",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>Matching Substring</h2>\n        <p>\n            Given two strings <i>A</i> and <i>B</i>. Your task is to remove a few characters from string <i>A</i> so that the number of substrings of <i>A</i> that are matching string <i>B</i> is exactly <i>K</i>.\n        </p>\n        <p>\n            Find the least number of characters that must be removed from string <i>A</i> so that the mentioned condition is satisfied.\n        </p>\n        <p>\n            <b>Note:</b> Both the strings <i>A</i> and <i>B</i> contain lowercase English letters, that is, <code>a-z</code> only.\n        </p>\n    </div>\n    \n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>\n            Complete the <code>solve</code> function provided in the editor. This function takes the following <b>3 parameters</b> and returns the answer:\n        </p>\n        <ul>\n            <li><b>K:</b> Represents the integer value</li>\n            <li><b>A:</b> Represents the first string</li>\n            <li><b>B:</b> Represents the second string</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>\n            <b>Note:</b> Use this input format if you are testing against custom input or writing code in a language where we don’t provide boilerplate code.\n        </p>\n        <ul>\n            <li>The first line contains <b>T</b>, which represents the number of test cases.</li>\n            <li>For each test case:</li>\n            <ul>\n                <li>The first line contains <b>K</b> denoting the number of substrings that must be exactly matched.</li>\n                <li>The second line contains string <b>A</b>.</li>\n                <li>The third line contains string <b>B</b>.</li>\n            </ul>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            For each test case in a separate line, print the answer. Print <b>-1</b> if it is not possible to determine the answer.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ T ≤ 100</li>\n            <li>1 ≤ K ≤ 10</li>\n            <li>1 ≤ length of string A ≤ 5000</li>\n            <li>1 ≤ length of string B ≤ 10</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n1\n2\naaaa\naa</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>\n                    The first line represents the number of test cases, t = 1.<br>\n                    <b>The first test case:</b><br>\n                    There are 3 substrings in string <i>A</i> which matches with <i>B</i>. If you remove one of the <code>a</code> from <i>A</i>, then only two substrings match with <i>B</i>.\n                </p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1aG3USdda8klUfAKTJWRslYri21ugnQ4zyJsNfaUrnRY/edit?usp=sharing",
        "solution_code": "",
        "company_name": "CARS24",
        "company_id": 115
    },
    {
        "id": 388,
        "title": "Task Scheduling Using Circular Priority Dequeue",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Task Scheduling Using Circular Priority Dequeue</h1>\n    <div class=\\\"problem-description\\\">\n        <p><strong>Rules:</strong></p>\n        <p>Priority is an integer (higher value indicates higher priority). Execution time is a positive integer (time required to complete the task). The circular priority dequeue should efficiently manage tasks with a large number of tasks.</p>\n        <p>You need to optimize the algorithm for task scheduling based on priority and minimize the execution time overhead.</p>\n    </div>\n\n    <div class=\\\"task\\\">\n        <h3>Task</h3>\n        <p>You are given M Queries:</p>\n        <ul>\n            <li>If Query is of type 1:<br> Dequeue and return the Task name Dequeued.</li>\n            <li>If Query is of type 2:<br> Execute the next task and return the Task name executed.</li>\n            <li>If Query is of type 3:<br> Return the Size of the remaining Dequeue.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains <strong>N</strong>, the number of tasks.</li>\n            <li>The second line contains <strong>N</strong> space-separated TaskNames.</li>\n            <li>The third line contains <strong>N</strong> space-separated Priorities associated with these TaskNames.</li>\n            <li>The fourth line contains <strong>N</strong> space-separated Execution times associated with these TaskNames.</li>\n            <li>The fifth line contains <strong>M</strong>, the number of Queries.</li>\n            <li>The sixth line contains <strong>M</strong> space-separated Queries.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>For each query, task is to return/output the correct operation based on the query:</p>\n        <ul>\n            <li>Dequeue</li>\n            <li>Execute a Task</li>\n            <li>Return Size of Dequeue</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 &le; N &le; 26</li>\n            <li>TaskName.length = 1</li>\n            <li>1 &le; Priority &le; 100</li>\n            <li>1 &le; ExecTime &le; 1000</li>\n            <li>1 &le; M &le; 20</li>\n            <li>Query = 1 || 2 || 3</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\nA B C D E\n3 4 2 1 5\n10 20 30 40 50\n3\n1 2 3</pre>\n            <pre class=\\\"output\\\">Output:\nA\nB\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p><strong>Explanation:</strong></p>\n                <p>First, Task A is dequeued. Next, Task B is executed. Finally, the size of the remaining Dequeue is 3.</p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1MB21GBeQ-X402JgcpUvsOBfP9nFGQKoe8pKt2-TjsvM/edit?usp=sharing",
        "solution_code": "",
        "company_name": "CARS24",
        "company_id": 115
    }
]