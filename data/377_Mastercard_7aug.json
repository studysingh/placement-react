[
    {
        "id": 1132,
        "title": "Wobble the Text",
        "problem_statement": "<h1>Wobble the Text</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A word game 'Wobble the Text' requires two players to start the game. In this game, Player1 is given a few alphabet tiles and he has to arrange the tiles in a sequence such that it forms a word in English E1. Post arranging the words, to calculate the score of Player1 by using following steps:</p>\r\n<p>I) Arrange the characters in alphabetical order. The point scored by an individual tile is the number of steps the tile has moved from its original position of E1.</p>\r\n<p>II) A special score S is calculated by using the ASCII value of the last tile character and S is added to the score of each tile.</p>\r\n<p>III) The final score F of the player is then calculated by adding the digits of respective points of all tiles.</p>\r\n<p>Player2 has to start his/her game with f1th character from (A to Z). f1 is calculated by adding digits of F.</p>\r\n<p>If Player1 word is given as an input to your program print the score of player1 and starting character of player 2</p>\r\n<p>You must read the input from STDIN (standard input) and write the output to STDOUT (standard output). Do not print any arbitrary strings while reading the input or printing the output as those would contribute to STDOUT.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: question\r\nOutput:\r\n55\r\nJ</code></pre>\r\n<p><strong>Explanation:</strong> The word formed by Player1 is 'question'.</p>\r\n<p>After arranging them in alphabetical order becomes einoqsttu. Here:</p>\r\n<ul>\r\n    <li>i -> 4 places to the left</li>\r\n    <li>n -> 5 places to the left</li>\r\n    <li>o -> 3 places to the right</li>\r\n    <li>q -> 4 places to the right</li>\r\n    <li>s -> 2 places to the right</li>\r\n    <li>t -> 2 places to the right and</li>\r\n    <li>u -> 6 places to the right.</li>\r\n</ul>\r\n<p>The tiles have their individual movement scores now as 2, 4, 5, 3, 4, 2, 2, and 6.</p>\r\n<p>The special point of the last letter of the word, 'u' (ASCII 117), is added to the individual points making them 119, 121, 122, 120, 121, 119, 119, 123.</p>\r\n<p>The final score will be 1 + 1 + 9 + 1 + 2 + 1 + 2 + 2 + 1 + 2 + 0 + 1 + 2 + 1 + 1 + 9 + 1 + 1 + 9 + 1 + 2 + 2 + 3 = 55.</p>\r\n<p>To determine the letter with which Player2 should form his word, the final score's digits are added: 5 + 5 = 10.</p>\r\n<p>The 10th letter of the English alphabet is J, to be displayed as the second line of output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: application\r\nOutput:\r\n81\r\nI</code></pre>\r\n<p><strong>Explanation:</strong> The word formed by Player1 is 'application'.</p>\r\n<p>After arranging in alphabetical order becomes aaciilnoppt. Here:</p>\r\n<ul>\r\n    <li>a has not moved</li>\r\n    <li>p -> 7 place to the right</li>\r\n    <li>p -> 7 place to the right</li>\r\n    <li>l -> 2 places to the right</li>\r\n    <li>i -> 1 place to the left</li>\r\n    <li>c -> 3 place to the left</li>\r\n    <li>a -> 5 places to the left</li>\r\n    <li>t -> 3 place to the right</li>\r\n    <li>i -> 4 place to the left</li>\r\n    <li>o -> 2 place to the left</li>\r\n    <li>n -> 4 place to the right.</li>\r\n</ul>\r\n<p>The tiles have their individual movement scores now as 0, 7, 7, 2, 1, 3, 5, 3, 4, 2, and 4.</p>\r\n<p>The special point of the last letter of the word, 't' (ASCII 116), is added to the individual points making them 116, 123, 123, 118, 117, 119, 121, 119, 120, 118, 120.</p>\r\n<p>The final score will be 1+1+6+1+2+3+1+2+3+1+1+8+1+1+7+1+1+9+1+2+1+1+9+1+2+0+1+1+8+1+2+0 = 81.</p>\r\n<p>To determine the letter with which Player2 should form his word, the final score's digits are added: 8 + 1 = 9.</p>\r\n<p>The 9th letter of the English alphabet is I, to be displayed as the second line of output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The input word should be in lower case having not more than 15 letters.</li>\r\n    <li>Only letters (without spaces) are allowed.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mastercard_7aug",
        "company_id": 377
    },
    {
        "id": 1133,
        "title": "Cipher Message Decryption",
        "problem_statement": "<h1>Cipher Message Decryption</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Ramesh is constantly worried about his email conversations being subject to a 'man in the middle' attack and his companions getting leaked. Since he is familiar with encryption, he invents a substitution cipher for himself. The resulting encrypted text has the same English alphabets but in a different permutation. This cipher uses a string Str to convert the 'Original Message' into a 'Cipher Message'. Once the cipher is built, Ramesh starts building the decryption program to decode the 'Cipher Message' back to the 'Original Message'.</p>\r\n<p>For example, say Str = \"bmdhjlezcjpxrunadkdwgy\" and Cipher Message is = \"bszag_wq_qdgwgy\". By comparing \"abcdefghijklmnopqrstuvwxyz\" (the original English alphabet string) with given Str \"bmdhjlezcjpxrunadkdwgy\", we see that 'a' (in Original Message) becomes 'b' (in original message), 'b' becomes 'm' and so on until 'z' becomes 'y'. Thus, in the cipher message \"bszag_wq_qdgwgy\", we see that 'B' should be replaced with 'M' (Upper and lower case letters should be converted to the same case), 'S' is replaced with 'D', 'Z' is replaced with 'H' and so on to get the original message. Thus, after all the replacements, we see the output is \"Maybe_we_should\".</p>\r\n<p>Next, all the underscore ('_') characters are replaced with space (' ') characters. Thus, the final output, which is the Original Message, is \"Maybe we should\".</p>\r\n<p>Help Ramesh by writing the decryption program that decrypts multiple 'Cipher Messages' into 'Original Messages'.</p>\r\n<p>Read the input from STDIN and print the output to STDOUT. The input reading and output printing code may already be provided in the box, please check.</p>\r\n<p>Do not write arbitrary strings anywhere in the program, as these contribute to the standard output and testcases will fail.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains N and Str, separated by a single white space.</p>\r\n<p>The next N lines of input contain the N \"Cipher Messages\", one in each line.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output contains the \"Original Messages\", one in each line, in the same sequence as the input.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 1 ohsdugyjpzlkxnearmqitcvbfw\r\nBnkka!\r\nOutput: Hello!</code></pre>\r\n<p><strong>Explanation:</strong> N = 1, Str = \"ohsdugyjpzlkxnearmqitcvbfw\", Cipher message = \"Bnkka!\". When we compare Str with \"abcdefghijklmnopqrstuvwxyz\", we see that 'H', 'e', 'l', 'l', 'o' should replace 'B', 'n', 'k', 'k', 'a' respectively. Thus, \"Bnkka!\" is converted to \"Hello!\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 2 tgxnuasvfphkleozidjbwcoqyrn\r\nMfdvn_Qi_xoeyn_fmm_yqbka_aknd_gfx_goznakqdb.\r\nZqf_Goznakqdb.\r\nOutput: Lance: If you're all right, then say something.\r\nMia: Something.</code></pre>\r\n<p><strong>Explanation:</strong> N = 2, Str = \"tgxnuasvfphkleozidjbwcoqyrn\", Cipher messages = \"Mfdvn_Qi_xoeyn_fmm_yqbka_aknd_gfx_goznakqdb.\" and \"Zqf_Goznakqdb.\". When we compare Str with \"abcdefghijklmnopqrstuvwxyz\", we get the decoded strings shown in the output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>I) 1 <= N <= 1000, the number of cipher messages to be decrypted</li>\r\n    <li>II) Str is always a permutation of \"abcdefghijklmnopqrstuvwxyz\"</li>\r\n    <li>III) Each message can have a maximum of 1000 characters and is never empty.</li>\r\n    <li>IV) A message can contain only lower and upper-case letters (a-z, A-Z), underscores ('_'), single quote, hyphen, and punctuation symbols: comma (','), period ('.'), exclamation-mark ('!'), question-mark ('?').</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Mastercard_7aug",
        "company_id": 377
    }
]