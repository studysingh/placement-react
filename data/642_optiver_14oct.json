[
    {
        "id": 1820,
        "title": "Squirrel Research",
        "problem_statement": "<h1>Squirrel Research</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Researches are studying the behavior of squirrels in a forest, where they compete to hide and collect nuts in hidden locations. You are tasked with implementing a tracker that can simulate this behavior. Your system is initialized with a list of locations and their capacities, and should support the following actions:</p>\r\n<ul>\r\n    <li>Register a nut has been hid by a squirrel in a location.</li>\r\n    <li>Register how nuts are retrieved by a squirrel from a location.</li>\r\n</ul>\r\n\r\n<p>Complete the functions described below in the <code>SquirrelResearch</code> class. Keep in mind that:</p>\r\n<ul>\r\n    <li>If any constraint is violated when performing an operation, the operation must fail.</li>\r\n    <li>If a constraint is said to be 'guaranteed', you may assume it is never violated.</li>\r\n    <li>Action functions include a timestamp indicating when such action has taken place. They are guaranteed to be globally ever increasing.</li>\r\n    <li>Timestamps are represented as number of seconds since the Unix Epoch (Jan 1, 1970 UTC), using floating-point values valid to the millisecond precision. They are guaranteed to be positive numbers and fit into 32 bits.</li>\r\n    <li>Weights are represented in grams, using floating-point values valid to the milligram precision.</li>\r\n</ul>\r\n\r\n<h3><code>SquirrelResearch(locations: dict[string, integer])</code></h3>\r\n<p>Initializes the class with all available hiding locations. This represents the constructor of the class in whatever programming language is being used.</p>\r\n<ul>\r\n    <li><code>locations</code> is a map where the key is the location's unique identifier, and the value is the location's number of levels. Hiding locations are shaped like a cone, forming storage levels that grow in size according to the Fibonacci sequence starting from the 3rd digit. For example, a location with 3 levels can fit up to 6 nuts: 1 at deepest level, 2 at the middle level, and 3 at the top level.</li>\r\n</ul>\r\n\r\n<h3><code>hide_nut(timestamp: float, location_id: string, nut_id: string, nut_weight: float, time_to_expire: float) -> bool</code></h3>\r\n<p>A squirrel attempts to hide a nut in a location. Returns <code>true</code> if the operation succeeds, and <code>false</code> otherwise.</p>\r\n<ul>\r\n    <li>Locations are filled from the deepest level upwards. Only once a level is completely filled, nuts start filling up the next level.</li>\r\n    <li><code>nut_id</code> is a unique string identifier for a nut. If a nut is already hidden (anywhere), the operation fails.</li>\r\n    <li>If the location is full or invalid, the operation fails.</li>\r\n    <li><code>time_to_expire</code> represents the time it takes for this nut to expire, starting at <code>timestamp</code>. In other words, a nut is considered expired immediately after <code>timestamp + time_to_expire</code>. It's represented in seconds using floating-point values valid to the millisecond precision.</li>\r\n</ul>\r\n\r\n<h3><code>retrieve_nut(timestamp: float, location_id: string, max_squirrel_capacity_in_nuts: integer) -> list[string]</code></h3>\r\n<p>A squirrel attempts to retrieve nuts from a location. Returns a list with the <code>nut_id</code>s retrieved (in order of retrieval) if the operation succeeds, and an empty list otherwise.</p>\r\n<ul>\r\n    <li><code>max_squirrel_capacity_in_nuts</code> indicates the maximum number of nuts the current squirrel can retrieve.</li>\r\n    <li>Nuts are retrieved first by level, starting from the upmost level with nuts. Per level, heavier nuts are retrieved first. If the upmost level is occupied by less than 50% of its total capacity, the next level becomes reachable and the squirrel will prefer nuts from there if they're heavier. If there's a tie on weight, the nut with the smallest id (alphabetically) is retrieved first.</li>\r\n    <li>Retrieved and discarded nuts are removed from the location.</li>\r\n    <li>Once retrieved, a <code>nut_id</code> may be used again to identify other nuts.</li>\r\n    <li>If the location is empty or invalid, the operation fails.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<p><strong>Input Format for Custom Testing:</strong></p>\r\n<p>Input to the program is specified using a simple text format. The format and details of parsing are not relevant to answering the question but custom input can be used to help with development and debugging.</p>\r\n<p>The first line must always be in the format below:</p>\r\n<pre><code class='language-text'>Init &lt;location_id&gt;:levels &lt;location_id&gt;:levels ... &lt;location_id&gt;:levels</code></pre>\r\n<p>Each subsequent input line may contain one of the instructions as in the format below:</p>\r\n<pre><code class='language-text'>HideNut &lt;timestamp&gt; &lt;location_id&gt; &lt;nut_id&gt; &lt;nut_weight&gt; &lt;time_to_expire&gt;\r\nRetrieveNut &lt;timestamp&gt; &lt;location_id&gt; &lt;max_squirrel_capacity_in_nuts&gt;</code></pre>\r\n<p>An example input and its expected output is described below.</p>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nInit pineTree:3 oakTree:1\r\nHideNut 100 pineTree nut1 0.3 600\r\nHideNut 101 pineTree nut2 0.4 600\r\nHideNut 110 oakTree nut3 0.3 600\r\nHideNut 115 pineTree nut4 0.3 600\r\nHideNut 140 oakTree nut5 0.35 600\r\nRetrieveNut 141 oakTree 3\r\nRetrieveNut 142 pineTree 5\r\n\r\nOutput:\r\nHideNut=True\r\nHideNut=True\r\nHideNut=True\r\nHideNut=True\r\nHideNut=False\r\nRetrieveNut=['nut3']\r\nRetrieveNut=['nut2', 'nut4', 'nut1']</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Two locations are registered: <code>pineTree</code> with 3 levels, and <code>oakTree</code> with 1 level.</li>\r\n    <li>A squirrel hides <code>nut1</code> in <code>pineTree</code>. This is the first nut to be hidden there, so it ends up at the deepest level. This nut weighs 0.3 grams and will expire 600 seconds after <code>timestamp=100</code>.</li>\r\n    <li><code>nut2</code> is then hidden in <code>pineTree</code>, ending up on the second level. This nut weighs 0.4 grams and will expire 600 seconds after <code>timestamp 101</code>.</li>\r\n    <li><code>nut3</code> is hidden in <code>oakTree</code>.</li>\r\n    <li><code>nut4</code> is hidden in <code>pineTree</code>, <code>pineTree</code>'s second level contains 1 nut, and it can hold 2, so <code>nut4</code> still ends up on the second level.</li>\r\n    <li>A squirrel attempts to hide <code>nut5</code> in <code>oakTree</code>, but it fails because the location is full.</li>\r\n    <li>A squirrel retrieves from <code>oakTree</code>, which contains only 1 nut: <code>nut3</code>.</li>\r\n    <li>A squirrel retrieves from <code>pineTree</code>, starting for the highest level and the heaviest nut: <code>nut2</code>. After that, the highest level is still at 50% capacity with 1 nut, so the next level can't be reached. The remaining nut from the highest level is then retrieved, <code>nut4</code>, and finally the last nut, in the deepest level, is retrieved: <code>nut1</code>.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Guaranteed input constraints for the total number of instructions given to the program: <code>1 &lt; N &lt; 2^15</code></li>\r\n    <li>Guaranteed input constraints for <code>SquirrelResearch</code> constructor:\r\n        <ul>\r\n            <li><code>1 &lt;= levels &lt; 2^8</code> (for each location)</li>\r\n            <li><code>0 &lt; Q &lt; 2^20</code>, where <code>Q</code> is the length of locations (number of locations)</li>\r\n        </ul>\r\n    </li>\r\n    <li>Input constraints for <code>hide_nut</code>:\r\n        <ul>\r\n            <li><code>0 &lt; nut_weight &lt; 20</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>Input constraints for <code>retrieve_nut</code>:\r\n        <ul>\r\n            <li><code>1 &lt;= max_squirrel_capacity_in_nuts &lt; 2^10</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>Timestamps are positive numbers and fit into 32 bits.</li>\r\n    <li>Weights are positive, floating-point values valid to the milligram precision.</li>\r\n    <li><code>time_to_expire</code> is positive, floating-point values valid to the millisecond precision.</li>\r\n</ul>\r\n\r\n<pre><code class='language-javascript'>#include &lt;map&gt;\r\n#include &lt;string&gt;\r\n#include &lt;vector&gt;\r\n#include &lt;unordered_map&gt;\r\n\r\nclass SquirrelResearch {\r\npublic:\r\n    SquirrelResearch(const std::unordered_map<std::string, int>& locations) {\r\n        // Your code here\r\n    }\r\n\r\n    bool hide_nut(double timestamp, const std::string& location_id, const std::string& nut_id, double nut_weight, double time_to_expire) {\r\n        // Your code here\r\n        return false;\r\n    }\r\n\r\n    std::vector<std::string> retrieve_nut(double timestamp, const std::string& location_id, int max_squirrel_capacity_in_nuts) {\r\n        // Your code here\r\n        return {};\r\n    }\r\n};\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <unordered_map>\n#include <sstream>\n#include <map>\n\nclass SquirrelResearch {\npublic:\n    SquirrelResearch(const std::unordered_map<std::string, int>& locations) {\n        // Your code here\n    }\n\n    bool hide_nut(double timestamp, const std::string& location_id, const std::string& nut_id, double nut_weight, double time_to_expire) {\n        // Your code here\n        return false;\n    }\n\n    std::vector<std::string> retrieve_nut(double timestamp, const std::string& location_id, int max_squirrel_capacity_in_nuts) {\n        // Your code here\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string line;\n    std::getline(std::cin, line);\n    std::stringstream ss(line);\n    std::string token;\n    \n    ss >> token; // \"Init\"\n\n    std::unordered_map<std::string, int> locations;\n    while (ss >> token) {\n        size_t colon_pos = token.find(':');\n        if (colon_pos != std::string::npos) {\n            std::string location_id = token.substr(0, colon_pos);\n            int levels = std::stoi(token.substr(colon_pos + 1));\n            locations[location_id] = levels;\n        }\n    }\n\n    SquirrelResearch solution(locations);\n\n    std::string command;\n    while (std::cin >> command) {\n        if (command == \"HideNut\") {\n            double timestamp;\n            std::string location_id;\n            std::string nut_id;\n            double nut_weight;\n            double time_to_expire;\n            std::cin >> timestamp >> location_id >> nut_id >> nut_weight >> time_to_expire;\n            bool result = solution.hide_nut(timestamp, location_id, nut_id, nut_weight, time_to_expire);\n            std::cout << \"HideNut=\" << (result ? \"True\" : \"False\") << std::endl;\n        } else if (command == \"RetrieveNut\") {\n            double timestamp;\n            std::string location_id;\n            int max_squirrel_capacity_in_nuts;\n            std::cin >> timestamp >> location_id >> max_squirrel_capacity_in_nuts;\n            std::vector<std::string> result = solution.retrieve_nut(timestamp, location_id, max_squirrel_capacity_in_nuts);\n            \n            std::cout << \"RetrieveNut=[\";\n            for (size_t i = 0; i < result.size(); ++i) {\n                std::cout << result[i];\n                if (i < result.size() - 1) {\n                    std::cout << \", \";\n                }\n            }\n            std::cout << \"]\" << std::endl;\n        }\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "optiver_14oct",
        "company_id": 642
    }
]