[
    {
        "id": 1173,
        "title": "Maximize Dispatch Credits",
        "problem_statement": "<h1>Maximize Dispatch Credits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon operates numerous warehouses, with each warehouse holding <code>inventory[i]</code> units of a particular product. You and your co-worker are responsible for dispatching these items to fulfill customer orders, following a specific process:</p>\r\n<ol>\r\n    <li>When dispatching from warehouse <code>i</code>, you begin by reducing the inventory of the <code>i</code>th warehouse by <code>dispatch1</code> units.</li>\r\n    <li>After your dispatch, your co-worker reduces the inventory by <code>dispatch2</code> units.</li>\r\n    <li>This process repeats until the inventory of the <code>i</code>th warehouse reaches zero or becomes negative (i.e., <code>inventory[i] &le; 0</code>).</li>\r\n    <li>For every warehouse that is emptied during your dispatch, you and your co-worker collectively earn 1 credit.</li>\r\n</ol>\r\n<p>Your co-worker has the option to skip their turn, but they can only do this a limited number of times, defined by <code>skips</code>.</p>\r\n<p>Your task is to determine the best strategy to maximize the total credits that both you and your co-worker can earn together.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\ninventory = [10, 6, 12, 8, 15, 1]\r\ndispatch1 = 2\r\ndispatch2 = 3\r\nskips = 3</code></pre>\r\n<p><strong>Explanation:</strong> An optimal dispatch strategy is as follows:</p>\r\n<ol>\r\n    <li>Your co-worker skips 2 turns, allowing you to empty the inventory of the 1st warehouse (Inventory: 10 &rarr; 8 &rarr; 5 &rarr; 3 &rarr; 1 &rarr; -1).</li>\r\n    <li>Your co-worker doesn't skip any turns, and you empty the inventory of the 2nd warehouse (Inventory: 6 &rarr; 4 &rarr; 1 &rarr; -1).</li>\r\n    <li>Your co-worker doesn't skip any turns, and you empty the inventory of the 3rd warehouse (Inventory: 12 &rarr; 10 &rarr; 7 &rarr; 5 &rarr; 2 &rarr; 0).</li>\r\n    <li>Your co-worker skips 1 turn, and you drain the inventory of the 4th warehouse (Inventory: 8 &rarr; 6 &rarr; 3 &rarr; 1 &rarr; -1).</li>\r\n    <li>Your co-worker doesn't skip any turns, and you empty the inventory of the 5th warehouse (Inventory: 15 &rarr; 13 &rarr; 10 &rarr; 8 &rarr; 5 &rarr; 3 &rarr; 0).</li>\r\n    <li>Your co-worker doesn't skip any turns, and you empty the inventory of the 6th warehouse (Inventory: 1 &rarr; -1).</li>\r\n</ol>\r\n<p>As a result, the 1st, 2nd, 3rd, 4th, and 6th warehouses were completely dispatched by you, and the two of you collectively earned 5 credits, which is the maximum possible in this scenario.</p>\r\n<pre><code class='language-text'>Output: 5</code></pre>\r\n\r\n<p>Complete the function <code>getMaximumCredits</code> in the editor below.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_6july",
        "company_id": 395
    },
    {
        "id": 1174,
        "title": "Missing Digits in Configuration",
        "problem_statement": "<h1>Missing Digits in Configuration</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The software developers at Amazon are working on detecting configuration anomalies in a server. They are provided with a set of configurations represented by <code>config</code>, a string of concatenated decimal digits (0-9). However, some digits in these configurations have been inadvertently erased.</p>\r\n<p>These configurations were initially generated using a specific procedure involving two integer parameters, <code>x</code> and <code>y</code>.</p>\r\n<p>The procedure begins with the two numbers, <code>x</code> and <code>y</code>, and initializes a current value (<code>cur</code>) to 0. The following operation can be performed any number of times.</p>\r\n<ul>\r\n    <li>In each step, either <code>x</code> or <code>y</code> is added to <code>cur</code>.</li>\r\n    <li>Compute the unit digit of (<code>cur</code> % 10) after each addition.</li>\r\n    <li>Record this digit as part of the configuration sequence.</li>\r\n</ul>\r\n<p>Unfortunately, some of these recorded digits are missing due to data corruption, complicating the reconstruction of the original sequence. Additionally, it is known that the first character of each given configuration string corresponds to either <code>x</code> or <code>y</code>.</p>\r\n<p>The task is to identify the final configuration with the minimum possible decimal value from which the given configuration <code>config</code> can be constructed by removing specific digits of the final configuration. If multiple valid configurations can be formed by reconstructing the missing digits, return the one with the minimum decimal value among all possible valid configurations.</p>\r\n<p>Conversely, if no valid configuration can be restored using the described procedure, then in that case return the string \"1\".</p>\r\n\r\n<h2>Note</h2>\r\n<ul>\r\n    <li>Each configuration is represented as a string of concatenated decimal digits (0-9) that forms a decimal number. The value of a configuration refers to the decimal number it represents.</li>\r\n    <li>The given configuration <code>config</code> represents the server configuration after data corruption, i.e., configuration after some of its digits have been erased from the original configuration.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: config = \"27\", x = 2, y = 3</code></pre>\r\n<p><strong>Explanation:</strong> The developers start the procedure with <code>cur = 0</code>. Performing the operation 3 times, let <code>final</code> be the final configuration generated after a series of operations.</p>\r\n<ul>\r\n    <li>Add <code>x</code> to <code>cur</code>, <code>cur = 2</code>, unit digit of <code>cur = 2</code>, and <code>final = 2</code></li>\r\n    <li>Add <code>x</code> to <code>cur</code>, <code>cur = 4</code>, unit digit of <code>cur = 4</code>, and <code>final = 24</code></li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 7</code>, unit digit of <code>cur = 7</code>, and <code>final = 247</code></li>\r\n</ul>\r\n<p>After three operations, the resulting configuration is 247. However, we can also derive a different configuration as follows:</p>\r\n<ul>\r\n    <li>Add <code>x</code> to <code>cur</code>, <code>cur = 2</code>, unit digit of <code>cur = 2</code>, and <code>final = 2</code></li>\r\n    <li>Add <code>y</code> to <code>cur</code>, <code>cur = 5</code>, unit digit of <code>cur = 5</code>, and <code>final = 25</code></li>\r\n    <li>Add <code>x</code> to <code>cur</code>, <code>cur = 7</code>, unit digit of <code>cur = 7</code>, and <code>final = 257</code></li>\r\n</ul>\r\n<p>In this case, the final configuration obtained is 257.</p>\r\n<p>Recall that configurations are derived by selectively removing certain digits from the final configuration and the task is to identify the final configuration with the minimum possible value from which the given configuration can be constructed by removing specific digits. In this case, 247 serves as the answer since 247 is indeed the minimum valid final value possible.</p>\r\n<pre><code class='language-text'>Output: \"247\"</code></pre>\r\n\r\n<p>Complete the function <code>missingDigits</code> in the editor below.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_6july",
        "company_id": 395
    },
    {
        "id": 1186,
        "title": "countLowerValueItems",
        "problem_statement": "<h1>countLowerValueItems</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An Amazon fulfillment center receives a large number of orders each day. Each order is associated with a range of prices of items that need to be picked from the warehouse and packed into a box. There are <code>n</code> items in the warehouse, which are represented as an array <code>items[n]</code>. The value of <code>items[i]</code> represents the value of the <code>i</code>th item in the warehouse, and subsequently there are <code>m</code> orders. The <code>start_index</code> and <code>end_index</code> for the <code>k</code>th order are represented in the arrays <code>startIndex[i]</code> and <code>endIndex[i]</code>. Also <code>startIndex[i]</code> and <code>endIndex[i]</code> are 0-index based.</p>\r\n<p>For each order, all the items are picked from the inclusive range from <code>startIndex[i]</code> through <code>endIndex[i]</code>. Given array <code>items</code>, <code>startIndex</code>, <code>endIndex</code>, and <code>query</code>. For each <code>query[j]</code>, find the count of elements in the range with a value strictly less than <code>query[j]</code>.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countLowerValueItems</code> in the editor below.</p>\r\n<p><code>countLowerValueItems</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int items[n]</code>: the value of each item</li>\r\n    <li><code>int startIndex[m]</code>: the start index for each order</li>\r\n    <li><code>int endIndex[m]</code>: the end index for each order</li>\r\n    <li><code>int query[q]</code>: query values</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<ul>\r\n    <li><code>long output[q]</code>: the answer for each query, the number of picked items having a value strictly less than <code>query[i]</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p>Given, <code>n = 5</code>, <code>items = [1, 2, 5, 4, 5]</code>, <code>m = 3</code>, <code>startIndex = [0, 0, 1]</code>, <code>endIndex = [1, 2, 2]</code> and <code>query = [2, 4]</code>.</p>\r\n<p><strong>Order Processing:</strong></p>\r\n<ul>\r\n    <li><strong>1st Order:</strong> <code>startIndex = 0</code>, <code>endIndex = 1</code>. Picked items: <code>[1, 2]</code> (from <code>items[0]</code> to <code>items[1]</code>).</li>\r\n    <li><strong>2nd Order:</strong> <code>startIndex = 0</code>, <code>endIndex = 2</code>. Picked items: <code>[1, 2, 5]</code> (from <code>items[0]</code> to <code>items[2]</code>).</li>\r\n    <li><strong>3rd Order:</strong> <code>startIndex = 1</code>, <code>endIndex = 2</code>. Picked items: <code>[2, 5]</code> (from <code>items[1]</code> to <code>items[2]</code>).</li>\r\n</ul>\r\n<p>Over the 3 orders, the combined picked items are <code>[1, 2, 1, 2, 5, 2, 5]</code>.</p>\r\n<pre><code class='language-text'>Input: items = [1,2,5,4,5], startIndex = [0,0,1], endIndex = [1,2,2], query = [2,4]\r\nOutput: [2,5]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For the first query (<code>query[0] = 2</code>), 2 picked items have values strictly less than 2 (which are 1, 1).</li>\r\n    <li>For the second query (<code>query[1] = 4</code>), 5 picked items have values strictly less than 4 (which are 1, 2, 1, 2, 2).</li>\r\n</ul>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\nitems = [1, 2, 3, 2, 4, 1]\r\nm = 2\r\nstartIndex = [2, 0]\r\nendIndex = [4, 0]\r\nq = 2\r\nquery = [5, 3]\r\n\r\nOutput:\r\n4\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>In the first move, pick items from index 2 to 4, items = <code>[3, 2, 4]</code>.</li>\r\n    <li>In the second move, pick the items from index 0, items = <code>[1]</code>.</li>\r\n</ul>\r\n<p>The picked items are <code>[3, 2, 4, 1]</code>.</p>\r\n<ul>\r\n    <li>For the first query (<code>query[0] = 5</code>), all 4 items have values strictly less than 5.</li>\r\n    <li>For the second query (<code>query[1] = 3</code>), 2 items have values strictly less than 3 (which are 2, 1).</li>\r\n</ul>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nitems = [4, 4, 5, 3, 2]\r\nm = 4\r\nstartIndex = [0, 1, 0, 2]\r\nendIndex = [1, 2, 3, 4]\r\nq = 3\r\nquery = [5, 4, 1]\r\n\r\nOutput:\r\n8\r\n3\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>In the first move, pick the items at indexes 0 and 1. (<code>items[0..1] = [4, 4]</code>)</li>\r\n    <li>In the second move, pick the items at indexes 1 and 2. (<code>items[1..2] = [4, 5]</code>)</li>\r\n    <li>In the third move, pick the items at indexes 0, 1, 2, and 3. (<code>items[0..3] = [4, 4, 5, 3]</code>)</li>\r\n    <li>In the fourth move, pick the items at indexes 2, 3, and 4. (<code>items[2..4] = [5, 3, 2]</code>)</li>\r\n</ul>\r\n<p>The picked elements are <code>[4, 4, 4, 5, 4, 4, 5, 3, 5, 3, 2]</code>.</p>\r\n<ul>\r\n    <li>For the first query (<code>query[0] = 5</code>), 8 items were picked and had values strictly less than 5 (which are 4, 4, 4, 4, 4, 3, 3, 2).</li>\r\n    <li>For the second query (<code>query[1] = 4</code>), 3 items were picked with values strictly less than 4 (which are 3, 3, 2).</li>\r\n    <li>For the third query (<code>query[2] = 1</code>), 0 items were picked with values strictly less than 1.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= items[i] &lt;= 10^9</code>, where <code>0 &lt;= i &lt; n</code></li>\r\n    <li><code>0 &lt;= m &lt;= 10^5</code></li>\r\n    <li><code>0 &lt;= startIndex[i] &lt;= endIndex[i] &lt; n</code>, where <code>0 &lt;= i &lt; m</code></li>\r\n    <li><code>1 &lt;= q &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= query[i] &lt;= 10^9</code>, where <code>0 &lt;= i &lt; q</code></li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>#include &lt;bits/stdc++.h&gt;\r\n\r\n/*\r\n * Complete the 'countLowerValueItems' function below.\r\n *\r\n * The function is expected to return a LONG_INTEGER_ARRAY.\r\n * The function accepts following parameters:\r\n *  1. INTEGER_ARRAY items\r\n *  2. INTEGER_ARRAY startIndex\r\n *  3. INTEGER_ARRAY endIndex\r\n *  4. INTEGER_ARRAY query\r\n */\r\n\r\nvector<long> countLowerValueItems(vector<int> items, vector<int> startIndex, vector<int> endIndex, vector<int> query) {\r\n\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_6july",
        "company_id": 395
    }
]