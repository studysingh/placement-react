[
    {
        "id": 950,
        "title": "Optimize Data Cleaning",
        "problem_statement": "<h1>Optimize Data Cleaning</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a data cleaning pipeline, engineers optimize text datasets by alternately removing substrings:</p>\r\n<ul>\r\n    <li>Alex removes substrings with an odd number of vowels in the first step, followed by Chris removing substrings with an even number of vowels in the next step.</li>\r\n</ul>\r\n<p>Alex always goes first, then the engineers take turns optimally until no valid substring remains. The goal is to determine which engineer removes the last substring.</p>\r\n<p>Implement a function <code>optimizeDataCleaning</code> to determine the outcome of the cleaning process for each dataset, assuming alternating and optimal cleaning.</p>\r\n<p>The function <code>optimizeDataCleaning</code> takes the following input:</p>\r\n<pre><code class='language-cpp'>vector&lt;string&gt; datasets</code></pre>\r\n<p>Each string represents a dataset.</p>\r\n<p>The function should return an array of strings specifying the result of the cleaning process for each dataset.</p>\r\n<p><strong>Note:</strong> Vowels are 'a', 'e', 'i', 'o', and 'u'.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example:</h3>\r\n<p>Given <code>n = 2</code> and <code>datasets = [\"git\", \"dry\"]</code></p>\r\n<ol>\r\n    <li>For the <code>datasets[0] = \"git\"</code>, Alex removes the entire string, leaving it empty. Since no valid moves are left, Chris cannot make a move, and Alex performs the final removal.</li>\r\n    <li>For the <code>datasets[1] = \"dry\"</code>, the string contains no vowels. Since Alex cannot make any moves, Chris is considered to have made the final removal.</li>\r\n</ol>\r\n<p>Hence the answer is <code>[\"Alex\", \"Chris\"]</code>.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\ndatasets = [\"lgzpc\", \"lchxlo\", \"xrwrzg\"]\r\n\r\nOutput:\r\nChris\r\nAlex\r\nChris</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Chris takes the first and third datasets which contain no vowels. Since Alex cannot make a move, Chris is considered to have made the final valid removal.</p>\r\n<p>In the second dataset, <code>datasets[1] = \"lchxlo\"</code>, there is exactly one vowel 'o'. Alex removes the entire string.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 1\r\ndatasets = [\"cim\"]\r\n\r\nOutput:\r\nAlex</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Alex removes the entire string since it contains an odd number of vowels.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 100</code></li>\r\n    <li><code>1 <= datasets[i].length <= 10^5</code></li>\r\n    <li>All strings in the datasets consist of lowercase English letters only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ubs_10march",
        "company_id": 300
    },
    {
        "id": 951,
        "title": "Texture Image Transformation",
        "problem_statement": "<h1>Texture Image Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working with a model represented as a binary texture image. This texture is represented as an n x n grid where each 1 in the grid is a black pixel, and 0 is a white pixel.</p>\r\n<p>There are three transformations to apply to the model's texture in this order:</p>\r\n<ol>\r\n    <li><strong>Rotation:</strong> The texture image can be rotated by 90, 180, or 270 degrees clockwise specified in the variable <code>rotation</code>.</li>\r\n    <li><strong>Vertical Flip:</strong> If <code>verticalFlip = 1</code>, flip the image along its horizontal axis. The pixels will appear in reverse order from top to bottom.</li>\r\n    <li><strong>Horizontal Flip:</strong> If <code>horizontalFlip = 1</code>, flip the image along its vertical axis. The pixels will appear in reverse order from left to right.</li>\r\n</ol>\r\n<p>Implement a function that applies the transformations and returns the final image.</p>\r\n<p>The function <code>getFinalImage</code> will take the following inputs:</p>\r\n<ul>\r\n    <li><code>int image[n][n]</code>: the texture image to process</li>\r\n    <li><code>int rotation</code>: the rotation parameter</li>\r\n    <li><code>int verticalFlip</code>: the vertical flip parameter</li>\r\n    <li><code>int horizontalFlip</code>: the horizontal flip parameter</li>\r\n</ul>\r\n<p>The function should return a binary matrix representing the final texture image after performing all three operations in order.</p>\r\n<pre><code class='language-javascript'>vector<vector<int>> getFinalImage(vector<vector<int>> image, int rotation, int verticalFlip, int horizontalFlip)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3, rotation = 270, verticalFlip = 0, horizontalFlip = 1\r\nimage = [\r\n  [1, 0, 0],\r\n  [0, 1, 1],\r\n  [0, 0, 1]\r\n]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Rotate the image by 270 degrees:</p>\r\n<pre><code class='language-text'>[\r\n  [1, 1, 0],\r\n  [0, 1, 0],\r\n  [0, 0, 1]\r\n]</code></pre>\r\n<p>Since <code>verticalFlip</code> is 0, the image is not flipped vertically.</p>\r\n<p>Perform the horizontal flip:</p>\r\n<pre><code class='language-text'>[\r\n  [1, 1, 0],\r\n  [0, 1, 0],\r\n  [0, 0, 1]\r\n]</code></pre>\r\n<pre><code class='language-text'>Output:\r\n[\r\n  [1, 1, 0],\r\n  [0, 1, 0],\r\n  [0, 0, 1]\r\n]</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2, image = [[1,0],[0,1]], rotation = 90, verticalFlip = 1, horizontalFlip = 0</code></pre>\r\n<pre><code class='language-text'>Output:\r\n[\r\n  [1, 0],\r\n  [0, 1]\r\n]</code></pre>\r\n<p><strong>Explanation:</strong> The texture image after applying the rotation 90 degrees results in [[0,1],[1,0]]. The texture image after applying the vertical flip results in [[1,0],[0,1]].</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2, image = [[1,1],[0,1]], rotation = 180, verticalFlip = 0, horizontalFlip = 1</code></pre>\r\n<pre><code class='language-text'>Output:\r\n[\r\n  [0, 1],\r\n  [1, 1]\r\n]</code></pre>\r\n<p><strong>Explanation:</strong> The texture image after applying the rotation 180 degrees results in [[1,0],[1,1]]. The texture image after applying the horizontal flip results in [[0,1],[1,1]].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 20</code></li>\r\n    <li><code>image[i][j]</code> is either 0 or 1.</li>\r\n    <li><code>image</code> is a square matrix.</li>\r\n    <li><code>horizontalFlip, verticalFlip</code> is either 0 or 1.</li>\r\n    <li><code>rotation</code> is either 90, 180, or 270.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ubs_10march",
        "company_id": 300
    }
]