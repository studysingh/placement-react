[
    {
        "id": 1930,
        "title": "Code Question 1",
        "problem_statement": "<h1>Code Question 1</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a newly planned city, where a city is located at each integral coordinate in a 2-dimensional plane, there are <code>n</code> Amazon retailers. The <code>i<sup>th</sup></code> retailer residing in the city at the coordinate <code>(x<sub>i</sub>, y<sub>i</sub>)</code> can deliver to all the cities covered by the rectangle having the 4 corner points <code>(0, 0)</code>, <code>(x<sub>i</sub>, 0)</code>, <code>(0, y<sub>i</sub>)</code>, <code>(x<sub>i</sub>, y<sub>i</sub>)</code>. We say that a point <code>(a, b)</code> is covered by a rectangle if it lies inside the rectangle or on its boundaries. Note that no 2 retailers reside in the same city.</p>\r\n<p>Given <code>q</code> requests of the form <code>(a, b)</code>, determine the number of retailers who can deliver to the city at the coordinate <code>(a, b)</code>.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>findNumRetailers</code> in the editor below.</p>\r\n<p><code>findNumRetailers</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int retailers[n][2]</code>: the retailers' coordinates</li>\r\n    <li><code>int requests[q][2]</code>: the coordinates of cities to deliver to</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int array[q]</code>: the <code>i<sup>th</sup></code> element is the answer to the <code>i<sup>th</sup></code> query</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nretailers = [[1, 2], [2, 3], [1, 5]]\r\nrequests = [[1, 1], [1, 4]]\r\nOutput: [3, 1]</code></pre>\r\n<p><strong>Explanation:</strong> In this example, we have 3 retailers in the cities (1, 2), (2, 3), and (1, 5).</p>\r\n<ul>\r\n    <li>For the first request, (1, 1):\r\n        <ul>\r\n            <li>Retailer (1,2) covers (0,0) to (1,2). (1,1) is covered.</li>\r\n            <li>Retailer (2,3) covers (0,0) to (2,3). (1,1) is covered.</li>\r\n            <li>Retailer (1,5) covers (0,0) to (1,5). (1,1) is covered.</li>\r\n        </ul>\r\n        All 3 retailers can deliver to the city at the coordinate (1, 1).\r\n    </li>\r\n    <li>For the second request, (1, 4):\r\n        <ul>\r\n            <li>Retailer (1,2) covers (0,0) to (1,2). (1,4) is not covered (4 > 2).</li>\r\n            <li>Retailer (2,3) covers (0,0) to (2,3). (1,4) is not covered (4 > 3).</li>\r\n            <li>Retailer (1,5) covers (0,0) to (1,5). (1,4) is covered.</li>\r\n        </ul>\r\n        Only the third retailer can deliver to the city at the coordinate (1, 4).\r\n    </li>\r\n</ul>\r\n<p>Hence, the answer for this example will be <code>[3, 1]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p>This example is derived from the \"Sample Input For Custom Testing\" section.</p>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\nretailers = [[1, 8], [2, 6]]\r\nq = 2\r\nrequests = [[1, 7], [1, 6]]\r\nOutput:\r\n1\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For the first request, (1, 7):\r\n        <ul>\r\n            <li>Retailer (1,8) covers (0,0) to (1,8). (1,7) is covered.</li>\r\n            <li>Retailer (2,6) covers (0,0) to (2,6). (1,7) is not covered (7 > 6).</li>\r\n        </ul>\r\n        Only the first retailer can deliver to the city at the coordinates (1, 7).\r\n    </li>\r\n    <li>For the second request, (1, 6):\r\n        <ul>\r\n            <li>Retailer (1,8) covers (0,0) to (1,8). (1,6) is covered.</li>\r\n            <li>Retailer (2,6) covers (0,0) to (2,6). (1,6) is covered.</li>\r\n        </ul>\r\n        Both the retailers can deliver to the city at the coordinates (1, 6).\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n, q &le; 7.5 * 10<sup>4</sup></code></li>\r\n    <li><code>1 &le; retailers[i][0] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; retailers[i][1] &le; 100</code></li>\r\n    <li><code>0 &le; requests[i][0] &le; 10<sup>9</sup></code></li>\r\n    <li><code>0 &le; requests[i][1] &le; 100</code></li>\r\n    <li>No two retailers share the same coordinates.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Amazon_17oct",
        "company_id": 682
    },
    {
        "id": 1931,
        "title": "Total Packing Efficiency",
        "problem_statement": "<h1>Total Packing Efficiency</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the Amazon distribution center, there is a collection of <code>n</code> products, each with a distinct volume. The challenge is to evaluate the \"packing efficiency\" of the collection, aiming for proper utilization of space.</p>\r\n<p>More specifically, there is an array <code>volumes</code>, where <code>volumes[i]</code> represents the volume of the <code>i</code><sup>th</sup> product.</p>\r\n<p>The \"packing efficiency\" of a subarray <code>B = [products[l], products[l+1], ..., products[r]]</code> is defined by the number of indices <code>i</code> that satisfy these conditions:</p>\r\n<ul>\r\n    <li><code>l <= i <= r</code></li>\r\n    <li>For every index <code>j</code> such that <code>i < j <= r</code>, <code>volumes[i] > volumes[j]</code></li>\r\n</ul>\r\n<p>The total packing efficiency of the entire collection is calculated by summing the packing efficiency across all subarrays of a given size <code>k</code>.</p>\r\n<p>Given an array 'volumes' of size 'n' and an integer 'k', compute the total packing efficiency of the collection.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\nvolumes = [3,6,2,9,4,1]\r\nk = 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>For <code>volumes = [3,6,2,9,4,1]</code> and <code>k = 3</code>, we consider all subarrays of size 3:</p>\r\n<ul>\r\n    <li><code>B = [3,6,2]</code>: Elements 6 (at index 1) and 2 (at index 2) satisfy the conditions.\r\n        <ul>\r\n            <li>For 6 (index 1): <code>6 > 2</code>. Satisfies.</li>\r\n            <li>For 2 (index 2): No elements to its right. Satisfies.</li>\r\n        </ul>\r\n        So, the efficiency of this subarray is 2.\r\n    </li>\r\n    <li><code>B = [6,2,9]</code>: Element 9 (at index 2) satisfies the conditions.\r\n        <ul>\r\n            <li>For 9 (index 2): No elements to its right. Satisfies.</li>\r\n        </ul>\r\n        So, the efficiency of this subarray is 1.\r\n    </li>\r\n    <li><code>B = [2,9,4]</code>: Elements 9 (at index 1) and 4 (at index 2) satisfy the conditions.\r\n        <ul>\r\n            <li>For 9 (index 1): <code>9 > 4</code>. Satisfies.</li>\r\n            <li>For 4 (index 2): No elements to its right. Satisfies.</li>\r\n        </ul>\r\n        So, the efficiency of this subarray is 2.\r\n    </li>\r\n    <li><code>B = [9,4,1]</code>: Elements 9 (at index 0), 4 (at index 1), and 1 (at index 2) satisfy the conditions.\r\n        <ul>\r\n            <li>For 9 (index 0): <code>9 > 4</code> and <code>9 > 1</code>. Satisfies.</li>\r\n            <li>For 4 (index 1): <code>4 > 1</code>. Satisfies.</li>\r\n            <li>For 1 (index 2): No elements to its right. Satisfies.</li>\r\n        </ul>\r\n        So, the efficiency of this subarray is 3.\r\n    </li>\r\n</ul>\r\n<p>The total packing efficiency of the collection is 2 + 1 + 2 + 3 = 8.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3 (Note: The explanation below implies n=5, volumes=[10,4,8,2,8])\r\nvolumes = [10,4,8]\r\nk = 3\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Assuming <code>volumes = [10,4,8,2,8]</code> and <code>k = 3</code>, we consider all subarrays of size 3:</p>\r\n<ul>\r\n    <li><code>B = [10,4,8]</code>: Elements 10 (at index 0) and 8 (at index 2) satisfy the conditions.\r\n        <ul>\r\n            <li>For 10 (index 0): <code>10 > 4</code> and <code>10 > 8</code>. Satisfies.</li>\r\n            <li>For 8 (index 2): No elements to its right. Satisfies.</li>\r\n        </ul>\r\n        So, the efficiency of the subarray is 2.\r\n    </li>\r\n    <li><code>B = [4,8,2]</code>: Elements 8 (at index 1) and 2 (at index 2) satisfy the conditions.\r\n        <ul>\r\n            <li>For 8 (index 1): <code>8 > 2</code>. Satisfies.</li>\r\n            <li>For 2 (index 2): No elements to its right. Satisfies.</li>\r\n        </ul>\r\n        So, the efficiency of the subarray is 2.\r\n    </li>\r\n    <li><code>B = [8,2,8]</code>: Only the last element 8 (at index 2) satisfies the conditions.\r\n        <ul>\r\n            <li>For 8 (index 0): <code>8 > 2</code> (true), but <code>8 > 8</code> (false). Fails.</li>\r\n            <li>For 2 (index 1): <code>2 > 8</code> (false). Fails.</li>\r\n            <li>For 8 (index 2): No elements to its right. Satisfies.</li>\r\n        </ul>\r\n        So, the efficiency of the subarray is 1.\r\n    </li>\r\n</ul>\r\n<p>So, the total packing efficiency of the collection is 2 + 2 + 1 = 5.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findTotalEfficiency</code> in the editor below.</p>\r\n<p><code>findTotalEfficiency</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int volumes[n]</code>: an array of integers representing the volume of each product.</li>\r\n    <li><code>int k</code>: the size of the subarray.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the total efficiency of the collection of n products.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 5 * 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Amazon_17oct",
        "company_id": 682
    },
    {
        "id": 1932,
        "title": "System Stabilization Time",
        "problem_statement": "<h1>System Stabilization Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon operates a massive distributed system that handles millions of requests per second across services like Prime Video, Alexa, and AWS.</p>\r\n<p>Each request flows through a chain of servers represented as nodes in a pipeline. These nodes are categorized by the type of service they handle (e.g., authentication, video streaming, storage), where the <em>i</em><sup>th</sup> node is represented by the string element <code>pipeline[i]</code>.</p>\r\n<p>Due to a critical service outage caused by a bug, one specific category of service, represented by the character <code>failedService</code>, begins to disrupt operations. Every second, all instances of the <code>failedService</code> terminate the service node immediately preceding them in the pipeline to isolate the issue. Terminated services are then removed from the pipeline.</p>\r\n<p>Your task is to determine how long it will take for the system to stabilize, i.e., when no further disruptions occur.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: pipeline = \"database\", failedService = 'a'\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Here's how the system stabilizes over time:</p>\r\n<ul>\r\n    <li><strong>1. Initial state (time = 0):</strong>\r\n        <ul>\r\n            <li><code>pipeline = \"database\"</code></li>\r\n        </ul>\r\n        The <code>failedService 'a'</code> is at indices 1, 3, and 5 (0-based indexing).\r\n    </li>\r\n    <li><strong>2. At Time = 1:</strong>\r\n        <ul>\r\n            <li>The services that will be terminated in the current pipeline are as follows:\r\n                <ul>\r\n                    <li><code>'a'</code> at index 1 removes index 0 (<code>'d'</code>).</li>\r\n                    <li><code>'a'</code> at index 3 removes index 2 (<code>'t'</code>).</li>\r\n                    <li><code>'a'</code> at index 5 removes index 4 (<code>'s'</code>).</li>\r\n                </ul>\r\n            </li>\r\n            <li>Thus, the original pipeline was <code>\"database\"</code>. After removing characters at indices 0, 2, 4, the string pipeline becomes <code>\"aaase\"</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>3. At Time = 2:</strong> <code>pipeline = \"aaase\"</code>, the <code>failedService 'a'</code> is at indices 0, 1, and 2 (0-based indexing).\r\n        <ul>\r\n            <li>The services that will be terminated in the current pipeline are as follows:\r\n                <ul>\r\n                    <li><code>'a'</code> at index 1 removes index 0 (<code>'a'</code>).</li>\r\n                    <li><code>'a'</code> at index 2 removes index 1 (<code>'a'</code>).</li>\r\n                </ul>\r\n            </li>\r\n            <li>Note that there is no index that precedes 0. The string pipeline becomes <code>\"aaase\"</code> --> <code>\"ase\"</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>4. At Time = 3:</strong> <code>pipeline = \"ase\"</code>, the <code>failedService 'a'</code> is at index 0 (0-based indexing). Since there is no index that precedes 0, the string pipeline remains as it is, and no service will be terminated.</li>\r\n</ul>\r\n<p>Since no service will be terminated after time 2, the system is stabilized. Therefore, the answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: pipeline = \"acebbbb\", failedService = 'b'\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>At time = 0:</strong> <code>pipeline = \"acebbbb\"</code></li>\r\n    <li><strong>At time = 1:</strong> The <code>failedService 'b'</code> instances are at indices 3, 4, 5, 6. They will terminate services at indices 2, 3, 4, and 5. The string pipeline will become <code>\"acb\"</code>.</li>\r\n    <li><strong>At time = 2:</strong> The <code>failedService 'b'</code> instance is at index 2. It will terminate the service at index 1. The string pipeline will become <code>\"ab\"</code>.</li>\r\n    <li><strong>At time = 3:</strong> The <code>failedService 'b'</code> instance is at index 1. It will terminate the service at index 0. The string pipeline will become <code>\"b\"</code>.</li>\r\n    <li><strong>At time = 4:</strong> The <code>failedService 'b'</code> instance is at index 0. There is no index preceding 0. No services will be terminated.</li>\r\n</ul>\r\n<p>Now, no more services will be terminated. Hence, the time taken is 4.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getTimeToStablize</code> in the editor below.</p>\r\n<p><code>getTimeToStablize</code> takes the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string pipeline</code>: the categories of services in the pipeline.</li>\r\n    <li><code>char failedService</code>: the category of the failed service causing disruptions.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the time required for the pipeline to stabilize, i.e., when no further disruptions occur.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code>, where <code>n</code> is the length of the <code>pipeline</code> string.</li>\r\n    <li>It is guaranteed that the string <code>pipeline</code> consists of lowercase English letters.</li>\r\n    <li>It is guaranteed that the character <code>failedService</code> is a lowercase English letter.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Amazon_17oct",
        "company_id": 682
    }
]