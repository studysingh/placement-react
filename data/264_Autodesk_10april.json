[
    {
        "id": 858,
        "title": "Query Processing and Triple Counting",
        "problem_statement": "<h1>Query Processing and Triple Counting</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an empty array of integers, <code>numbers</code>, your task is to process a list of <code>queries</code>.</p>\r\n<p>Specifically, there are two types of queries:</p>\r\n<ul>\r\n    <li><code>\"+x\"</code>: Append the integer <code>x</code> to <code>numbers</code>. Note that <code>numbers</code> may contain multiple instances of the same integer.</li>\r\n    <li><code>\"-x\"</code>: Remove all instances of the integer <code>x</code> from <code>numbers</code>.</li>\r\n</ul>\r\n<p>After processing each query, count the number of triples <code>(x, y, z)</code> in <code>numbers</code> which meet this condition: both <code>x - y</code> and <code>y - z</code> are equal to a given <code>diff</code>. Note that elements in <code>numbers</code> can be rearranged to form triples to meet the condition.</p>\r\n<p>The final output should be an array of counts, where each element is the number of valid triples after processing the corresponding query in <code>queries</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: queries = [\"+4\", \"+5\", \"+6\", \"+4\", \"+3\", \"-4\"], diff = 1\r\nOutput: [0, 0, 1, 2, 4, 0]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>First, process <code>queries[0] = \"+4\"</code> and append 4 to <code>numbers</code>, resulting in <code>numbers = [4]</code>. There are no triples yet, so append 0 to the output.</li>\r\n    <li>Next, process <code>queries[1] = \"+5\"</code> and append 5 to <code>numbers</code>, resulting in <code>numbers = [4, 5]</code>. There are no triples yet, so append 0 to the output.</li>\r\n    <li>Process <code>queries[2] = \"+6\"</code> and append 6 to <code>numbers</code>, resulting in <code>numbers = [4, 5, 6]</code>. These can form the triple <code>(6, 5, 4)</code> which meets the condition (6 - 5 = 1 and 5 - 4 = 1, where <code>diff = 1</code>), so append 1 to the output.</li>\r\n    <li>Process <code>queries[3] = \"+4\"</code> and append 4 to <code>numbers</code>, resulting in <code>numbers = [4, 5, 6, 4]</code>. Now, there are two ways to form the triple <code>(6, 5, 4)</code> which meets the condition, so append 2 to the output.</li>\r\n    <li>Process <code>queries[4] = \"+3\"</code> and add 3 to <code>numbers</code>, resulting in <code>numbers = [4, 5, 6, 4, 3]</code>. Now, there are two ways to form the triple <code>(6, 5, 4)</code> and two ways to form the triple <code>(5, 4, 3)</code> which meet the condition, so append 4 to the output.</li>\r\n    <li>Process <code>queries[5] = \"-4\"</code> and remove all instances of 4 from <code>numbers</code>, resulting in <code>numbers = [5, 6, 3]</code>. There are no way to form triples which can meet the condition, so append 0 to the output.</li>\r\n</ul>\r\n<p>Finally, the output is <code>[0, 0, 1, 2, 4, 0]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>All integers in queries are guaranteed to be in the range of <code>[-10^3, 10^3]</code>.</li>\r\n    <li>It is also guaranteed that for each <code>\"-x\"</code> query, the specified <code>x</code> exists in <code>numbers</code>.</li>\r\n    <li>It is guaranteed that the answer for each query will fit in a standard integer type.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 859,
        "title": "Highest Rating Price Ratio Item",
        "problem_statement": "<h1>Highest Rating Price Ratio Item</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two arrays of positive integers containing information about some items on the market - one with their prices, and the second with their ratings (from 1 to 5). Where <code>prices[i]</code> corresponds to the price of the <code>i</code>th item, and <code>ratings[i]</code> corresponds to the rating of the <code>i</code>th item.</p>\r\n<p>Find the item with the highest ratio of <code>rating / price</code> and return its index. If this ratio is equal across multiple items, return the item with the lowest index.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(prices.length)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: prices = [7, 5, 2, 11], ratings = [3, 4, 1, 3]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>3 / 7</code> is approximately <code>0.43</code></li>\r\n    <li><code>4 / 5</code> is approximately <code>0.80</code></li>\r\n    <li><code>1 / 2</code> is approximately <code>0.50</code></li>\r\n    <li><code>3 / 11</code> is approximately <code>0.27</code></li>\r\n</ul>\r\n<p>The highest ratio is <code>4 / 5</code> for the item at index <code>1</code>. So the answer is <code>1</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: prices = [6, 5, 4, 3], ratings = [4, 3, 1, 2]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>4 / 6</code> is approximately <code>0.66</code></li>\r\n    <li><code>3 / 5</code> is approximately <code>0.60</code></li>\r\n    <li><code>1 / 4</code> is approximately <code>0.25</code></li>\r\n    <li><code>2 / 3</code> is approximately <code>0.66</code></li>\r\n</ul>\r\n<p>There are two items with the highest ratio <code>4 / 6</code> (at index 0) and <code>2 / 3</code> (at index 3). Since <code>0 < 3</code>, the answer is <code>0</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= prices[i] <= 100</code></li>\r\n    <li><code>ratings.length = prices.length</code></li>\r\n    <li><code>1 <= ratings[i] <= 5</code></li>\r\n    <li>Execution time limit: 4 seconds (py3)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 860,
        "title": "Team Competition Ranking",
        "problem_statement": "<h1>Team Competition Ranking</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Consider a competition that uses a point system to determine the team rankings. After a match, the winning team receives 3 points, the losing team receives 0 points, or, if tied, both teams receive 1 point.</p>\r\n<p>The team that accumulates the most points wins the competition. However, if there is a tie, the team with the highest goal difference among the tied teams is the winner. Goal difference is calculated as <code>scored - conceded</code> goals.</p>\r\n<p>You are given 4 arrays of the same length <code>wins</code>, <code>draws</code>, <code>scored</code>, and <code>conceded</code>. Within each array, the <code>i</code>-th element represents the corresponding metric for the <code>i</code>-th team (i.e., goals scored <code>scored[i]</code>, goals conceded <code>conceded[i]</code>, matches won <code>wins[i]</code>, and matches tied <code>draws[i]</code> during the competition (for each <code>i</code> in <code>0, 1, ..., wins.length - 1</code>).</p>\r\n<p>Your task is to determine the indices of the winning team and the team in second place. Return an array of exactly two integers, where the first is the index of the winning team and the second is the index of the team in second place.</p>\r\n<p>It is guaranteed that there will only be one winning team and one team in second place.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(wins.length) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: wins = [2,1,0], draws = [1,5,6], scored = [20,15,10], conceded = [20,10,15]\r\nOutput: [1,0]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>The team with index 0 received <code>2 * 3 + 1 * 1 = 7</code> points.</li>\r\n    <li>The team with index 1 received <code>1 * 3 + 5 * 1 = 8</code> points.</li>\r\n    <li>The team with index 2 received <code>0 * 3 + 6 * 1 = 6</code> points.</li>\r\n</ul>\r\nAs <code>8 > 7 > 6</code>, the team with index 1 is the winner and the team with index 0 is in second place. So, the answer is <code>[1,0]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: wins = [3,1,2,2], draws = [1,5,4,4], scored = [30,10,20,40], conceded = [32,13,18,37]\r\nOutput: [3,2]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>The team with index 0 received <code>3 * 3 + 1 * 1 = 10</code> points.</li>\r\n    <li>The team with index 1 received <code>1 * 3 + 5 * 1 = 8</code> points.</li>\r\n    <li>The team with index 2 received <code>2 * 3 + 4 * 1 = 10</code> points.</li>\r\n    <li>The team with index 3 received <code>2 * 3 + 4 * 1 = 10</code> points.</li>\r\n</ul>\r\nThree teams are tied with the highest number of points: Teams with indices 0, 2 and 3.\r\n<ul>\r\n    <li>The team with index 0 has a goal difference of <code>30 - 32 = -2</code>.</li>\r\n    <li>The team with index 2 has a goal difference of <code>20 - 18 = 2</code>.</li>\r\n    <li>The team with index 3 has a goal difference of <code>40 - 37 = 3</code>.</li>\r\n</ul>\r\nAs <code>3 > 2 > -2</code>, the team with index 3 is the winner and the team with index 2 is in second place. So, the answer is <code>[3,2]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= wins.length <= 100</code></li>\r\n    <li><code>0 <= wins[i] <= 1000</code></li>\r\n    <li><code>draws.length = wins.length</code></li>\r\n    <li><code>0 <= draws[i] <= 1000</code></li>\r\n    <li><code>scored.length = wins.length</code></li>\r\n    <li><code>0 <= scored[i] <= 1000</code></li>\r\n    <li><code>conceded.length = wins.length</code></li>\r\n    <li><code>0 <= conceded[i] <= 1000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 864,
        "title": "Subarrays Matching Pattern",
        "problem_statement": "<h1>Subarrays Matching Pattern</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of integers <code>numbers</code> and an array <code>pattern</code> representing a comparison, find how many subarrays of <code>numbers</code> match the given pattern. <code>pattern</code> can only contain the following integers:</p>\r\n<ul>\r\n    <li><code>pattern[i] = 1</code>, represents that the number corresponding to this element of the pattern is greater than the previous one.</li>\r\n    <li><code>pattern[i] = 0</code>, represents that the number corresponding to this element of the pattern is equal to the previous one.</li>\r\n    <li><code>pattern[i] = -1</code>, represents that the number corresponding to this element of the pattern is less than the previous one.</li>\r\n</ul>\r\n<p>It is guaranteed that <code>numbers.length > pattern.length</code>.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(numbers.length * pattern.length)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: numbers = [4, 1, 3, 4, 4, 5, 5, 1], pattern = [1, 0, -1]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Let's check all possible subarrays of length <code>pattern.length + 1</code> (which is 3 in this case). Note that the subarray <code>[4, 1, 3]</code>, starting with <code>numbers[0] = 4</code> does not need to be checked, as there is nothing to compare the first element with.</p>\r\n<ul>\r\n    <li>Subarray <code>[1, 3, 4]</code> doesn't satisfy the pattern. <code>pattern[0] = 1</code> means that the first element of the subarray should be greater than the previous one, but <code>numbers[1] = 1 < numbers[0] = 4</code>.</li>\r\n    <li>Subarray <code>[3, 4, 4]</code> doesn't satisfy the pattern. <code>pattern[1] = 0</code> means that the second element of the subarray should be equal to the previous one, but <code>numbers[3] = 4 != numbers[2] = 3</code>.</li>\r\n    <li>Subarray <code>[4, 4, 5]</code> doesn't satisfy the pattern. <code>pattern[2] = -1</code> means that the third element of the subarray should be less than the previous one, but <code>numbers[5] = 5 > numbers[4] = 4</code>.</li>\r\n    <li>Following the same logic, subarray <code>[4, 5, 5]</code> satisfies the pattern, because:\r\n        <ul>\r\n            <li><code>numbers[5] = 5 > numbers[4] = 4</code> and <code>pattern[0] = 1</code>.</li>\r\n            <li><code>numbers[6] = 5 == numbers[5] = 5</code> and <code>pattern[1] = 0</code>.</li>\r\n            <li><code>numbers[7] = 1 < numbers[6] = 5</code> and <code>pattern[2] = -1</code>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Since there is a single subarray that satisfies the given pattern, the answer is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution Time Limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory Limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.integer numbers</code>\r\n        <ul>\r\n            <li>An array of integers.</li>\r\n            <li><code>2 <= numbers.length <= 10^5</code></li>\r\n            <li><code>0 <= numbers[i] <= 10^9</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> <code>array.integer pattern</code>\r\n        <ul>\r\n            <li>An array of integers, containing only -1, 0 and 1s.</li>\r\n            <li><code>1 <= pattern.length < numbers.length - 1</code></li>\r\n            <li><code>-1 <= pattern[i] <= 1</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>integer</code>\r\n        <ul>\r\n            <li>The number of subarrays within the <code>numbers</code> that satisfies the given pattern.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 865,
        "title": "Race Elimination",
        "problem_statement": "<h1>Race Elimination</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>All the competitors in a stock car race have completed their qualifying laps. Each lap, the driver with the current slowest \"best\" time is eliminated (that is, the highest personal best time). If multiple drivers tie for the slowest time, they are all are eliminated.</p>\r\n<p>You are given a two-dimensional string array with each driver's name and lap time in seconds for each lap. Your task is to return the drivers in the order in which they were eliminated, ending with the last driver or drivers remaining. When multiple drivers are eliminated on the same lap, their names should be listed alphabetically.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(laps.length * laps[0].length) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: laps = [[\"Harold 114\", \"Gina 155\", \"Juan 160\"], [\"Juan 157\", \"Gina 158\", \"Harold 160\"], [\"Harold 148\", \"Gina 150\", \"Juan 151\"]]\r\nOutput: [\"Juan\", \"Harold\", \"Gina\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>After the first lap, Harold's best time is 114, Gina's best time is 155 and Juan's best time is 160. Juan is eliminated, leaving Harold and Gina.</li>\r\n    <li>After the second lap, Harold's best time is still 114 and Gina's best time is 155 so Harold is eliminated.</li>\r\n    <li>Gina is the only racer remaining on the third lap.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: laps = [[\"Gina 155\", \"Eddie 160\", \"Joy 161\", \"Harold 162\"], [\"Harold 152\", \"Gina 153\", \"Joy 160\", \"Eddie 161\"], [\"Eddie 150\", \"Joy 152\", \"Gina 153\", \"Harold 154\"], [\"Harold 148\", \"Gina 150\", \"Eddie 153\", \"Joy 155\"]]\r\nOutput: [\"Harold\", \"Eddie\", \"Joy\", \"Gina\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>After the first lap, Gina's best time is 155, Eddie's best time is 160, Joy's best time is 161, and Harold's best time is 162. Harold is eliminated.</li>\r\n    <li>After the second lap, Gina's best time is 153, Eddie's best time is 160, and Joy's best time is also 160. Eddie and Joy are eliminated.</li>\r\n    <li>Because Eddie and Joy were eliminated on the same round, their names are listed alphabetically in the output.</li>\r\n    <li>Gina is the only racer remaining on the third lap and fourth lap.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li><strong>Input:</strong> <code>laps</code> (An array of string arrays of driver's name and lap time. It is guaranteed that the same drivers will appear in every lap. All <code>laps[i][j]</code> are guaranteed to be given in format \"NAME TIME\" (e.g. \"JOHN 123\").)</li>\r\n    <li><code>laps.length >= 1</code></li>\r\n    <li><code>laps[i].length >= 1</code></li>\r\n    <li><code>laps[i].length <= 300</code></li>\r\n    <li><code>1 <= TIME <= 10^9</code></li>\r\n    <li><strong>Output:</strong> <code>string[]</code> (Return the list of drivers sorted in the order which they were eliminated, and ordered alphabetically in the case of ties.)</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 866,
        "title": "Construct 2-Character Strings",
        "problem_statement": "<h1>Construct 2-Character Strings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array `a` containing a list of strings. Your task is to construct an array of the same length where each element is a 2-character string formed by the first character of `a[i]` concatenated with the last character of `a[i+1]`.</p>\r\n<p>If there is no `a[i+1]`, cycle back to the beginning of the array. In other words, for the final element, consider the first character of `a[a.length - 1]` with the last character of `a[0]`.</p>\r\n<p>Return the resulting array of 2-character strings.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than `sum(a[i].length)` will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = [\"cat\", \"dog\", \"ferret\", \"scorpion\"]\r\nOutput: [\"cg\", \"dt\", \"fn\", \"st\"]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>For `a[0]` (\"cat\"), take 'c'. For `a[1]` (\"dog\"), take 'g'. Result: \"cg\".</li>\r\n    <li>For `a[1]` (\"dog\"), take 'd'. For `a[2]` (\"ferret\"), take 't'. Result: \"dt\".</li>\r\n    <li>For `a[2]` (\"ferret\"), take 'f'. For `a[3]` (\"scorpion\"), take 'n'. Result: \"fn\".</li>\r\n    <li>For `a[3]` (\"scorpion\"), take 's'. For `a[0]` (\"cat\", cycled), take 't'. Result: \"st\".</li>\r\n</ul>\r\n</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: a = [\"I\", \"have\", \"a\", \"nice\", \"surprise\"]\r\nOutput: [\"Ie\", \"ha\", \"ae\", \"ne\", \"sI\"]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>For `a[0]` (\"I\"), take 'I'. For `a[1]` (\"have\"), take 'e'. Result: \"Ie\".</li>\r\n    <li>For `a[1]` (\"have\"), take 'h'. For `a[2]` (\"a\"), take 'a'. Result: \"ha\".</li>\r\n    <li>For `a[2]` (\"a\"), take 'a'. For `a[3]` (\"nice\"), take 'e'. Result: \"ae\".</li>\r\n    <li>For `a[3]` (\"nice\"), take 'n'. For `a[4]` (\"surprise\"), take 'e'. Result: \"ne\".</li>\r\n    <li>For `a[4]` (\"surprise\"), take 's'. For `a[0]` (\"I\", cycled), take 'I'. Result: \"sI\".</li>\r\n</ul>\r\n</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: a = [\"singularity\"]\r\nOutput: [\"sy\"]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nSince there is only one element, `a[0]` (\"singularity\"), its first character 's' is combined with the last character 'y' from `a[0]` itself (due to cycling back to the beginning). Result: \"sy\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`execution time limit 0.5 seconds (cpp)`</li>\r\n    <li>`memory limit 1 GB`</li>\r\n    <li><strong>Input:</strong> `array.string a`</li>\r\n    <li>An array of strings consisting of alphanumeric characters.</li>\r\n    <li>`1 <= a.length <= 100`</li>\r\n    <li>`1 <= a[i].length <= 100`</li>\r\n    <li><strong>Output:</strong> `array.string`</li>\r\n    <li>Return the resulting array of 2-character strings.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 867,
        "title": "Unique Bytes in Data Segments",
        "problem_statement": "<h1>Unique Bytes in Data Segments</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A team of astronauts on a spaceship is receiving important data from Earth for their research. The data is being transmitted in segments that contain specific parts of the file, and each segment represents a byte range in the form of a two-dimensional array <code>segments[i]</code>. For each segment <code>segments[i]</code>, the range is given in an array of two integers: <code>segments[i][0]</code> is the index of the first byte in the i-th segment, and <code>segments[i][1]</code> is the index of the last byte in the i-th segment. Both indices are inclusive.</p>\r\n<p>Your task is to calculate the total number of unique bytes received for the entire file after each segment is received. Keep in mind that segments can overlap with or completely encapsulate previous ones.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: segments = [[1, 1], [2, 2], [3, 3]]\r\nOutput: [1, 2, 3]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>The first segment only contains the byte 1, so the total number of unique bytes received becomes 1 after this segment.</li>\r\n    <li>The second segment only contains the byte 2, so the total becomes 2 after this segment.</li>\r\n    <li>The third segment only contains the byte 3, making the total 3 after this segment.</li>\r\n</ul></p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: segments = [[1, 2], [3, 5]]\r\nOutput: [2, 5]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>The first segment contains bytes 1 to 2, so the total number of unique bytes received becomes 2.</li>\r\n    <li>The second segment adds bytes 3 to 5, increasing the total to 5.</li>\r\n</ul></p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: segments = [[1, 9], [4, 15], [8, 15], [13, 14]]\r\nOutput: [9, 15, 15, 15]</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>The first segment contains bytes 1 to 9, so the total is 9.</li>\r\n    <li>The second segment adds bytes 4 to 15. The union of [1,9] and [4,15] is [1,15], making the total 15 unique bytes.</li>\r\n    <li>The third segment adds bytes 8 to 15. The union of [1,15] and [8,15] is still [1,15], keeping the total at 15 unique bytes.</li>\r\n    <li>The remaining segments do not change the total as these bytes have already been received.</li>\r\n</ul></p>\r\n\r\n<h2>Input/Output</h2>\r\n<p><strong>Execution time limit:</strong> 4 seconds (py3)</p>\r\n<p><strong>Memory limit:</strong> 1 GB</p>\r\n<p><strong>Input:</strong> <code>segments</code> array.array.integer64</p>\r\n<p>An array of arrays, each representing the indices of the first and last bytes contained in each data segment.</p>\r\n<p><strong>Output:</strong> <code>array.integer64</code></p>\r\n<p>An array of integers representing the cumulative total number of unique bytes received after each data segment.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= segments.length <= 1000</code></li>\r\n    <li><code>segments[i].length = 2</code></li>\r\n    <li><code>1 <= segments[i][0] <= segments[i][1] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 868,
        "title": "Fantasy Card Duel",
        "problem_statement": "<h1>Fantasy Card Duel</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine a fantasy card duel between two strategists. Each player has a deck, <code>playerDeckA</code> and <code>playerDeckB</code>, and each card contains a creature with a power value between 1 to 10. During each round, the top cards from both players' decks determine the victor of that round. Here are some simple rules:</p>\r\n<ul>\r\n    <li>Each player reveals the top card of their deck.</li>\r\n    <li>If the creature's power from <code>playerDeckA</code> is greater than or equal to the one from <code>playerDeckB</code>, the first player claims victory in that round. Both cards are moved to the bottom of <code>playerDeckA</code>'s deck, with <code>playerDeckA</code>'s card placed first, followed by <code>playerDeckB</code>'s card.</li>\r\n    <li>If the creature's power from <code>playerDeckA</code> is less than the one from <code>playerDeckB</code>, the second player claims victory in that round. Both cards are moved to the bottom of <code>playerDeckB</code>'s deck, with <code>playerDeckB</code>'s card placed first, followed by <code>playerDeckA</code>'s card.</li>\r\n    <li>The game ends when a player's deck is empty, leaving them unable to draw another creature for battle.</li>\r\n</ul>\r\n<p>Determine how many rounds this duel lasts. It's guaranteed that the showdown will conclude at some point.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(<code>playerDeckA.length</code>²) will fit within the execution time limit.</p>\r\n<p>The function signature is expected to be <code>solution(playerDeckA, playerDeckB)</code>, where <code>playerDeckA</code> and <code>playerDeckB</code> are arrays of integers, and the function should return an integer representing the total number of rounds.</p>\r\n<p><strong>Execution Time Limit:</strong> 4 seconds (Python 3)<br>\r\n<strong>Memory Limit:</strong> 1 GB</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: playerDeckA = [1], playerDeckB = [2]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The output should be <code>solution(playerDeckA, playerDeckB) = 1</code>.</p>\r\n<p>Breakdown of each round:</p>\r\n<ul>\r\n    <li>Round 1:\r\n        <ul>\r\n            <li><code>playerDeckA</code> plays 1, whereas <code>playerDeckB</code> presents a 2. The decks temporarily become empty.</li>\r\n            <li><code>playerDeckB</code> wins, and 2 and 1 move to the bottom of <code>playerDeckB</code>.</li>\r\n            <li><code>playerDeckA</code> becomes empty.</li>\r\n            <li><code>playerDeckB</code> becomes <code>[2, 1]</code>.</li>\r\n            <li>With <code>playerDeckA</code> empty, the duel is over, resulting in a single round.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: playerDeckA = [1, 2], playerDeckB = [1, 1]\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The output should be <code>solution(playerDeckA, playerDeckB) = 6</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= playerDeckA.length <= 100</code></li>\r\n    <li><code>1 <= playerDeckA[i] <= 10</code></li>\r\n    <li><code>playerDeckA.length = playerDeckB.length</code></li>\r\n    <li><code>1 <= playerDeckB[i] <= 10</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 869,
        "title": "Character Health Simulation",
        "problem_statement": "<h1>Character Health Simulation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine a video game where the player controls a character to go through several levels. The character has an initial health value of <code>initialHealth</code>, and this value changes as the player goes through levels of the game.</p>\r\n<p>You are given an array of integers <code>deltas</code> defining each health value change. Specifically, the <code>i</code>-th level (0-indexed) changes the character's current health value by <code>deltas[i]</code>.</p>\r\n<p>Note that whenever the current health value becomes less than <code>0</code>, it immediately gets set to <code>0</code>. Similarly, whenever the current health value becomes greater than <code>100</code>, it immediately gets set to <code>100</code>.</p>\r\n<p>Your task is to return the character's final health value after the player goes through all levels of the game.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(deltas.length)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: initialHealth = 12, deltas = [-4, -12, 6, 2]\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> Let's consider each level:</p>\r\n<ul>\r\n    <li>At the beginning, the current health value is <code>currentHealth = initialHealth = 12</code>.</li>\r\n    <li>After completing the 0th level, the current health value becomes <code>currentHealth + deltas[0] = 12 + -4 = 8</code>.</li>\r\n    <li>After completing the 1st level, the current health value becomes <code>currentHealth + deltas[1] = 8 + -12 = -4</code>, but since the health value cannot be less than <code>0</code>, it gets set to <code>0</code>.</li>\r\n    <li>After completing the 2nd level, the current health value becomes <code>currentHealth + deltas[2] = 0 + 6 = 6</code>.</li>\r\n    <li>After completing the 3rd level, the current health value becomes <code>currentHealth + deltas[3] = 6 + 2 = 8</code> which is the final answer.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds</li>\r\n    <li>Memory limit: 1 GB</li>\r\n</ul>\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li><code>initialHealth</code>: An integer representing the initial health value of the player.\r\n        <ul>\r\n            <li><code>0 <= initialHealth <= 100</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><code>deltas</code>: An array of integers representing changes to the current health value after the player completes each level.\r\n        <ul>\r\n            <li><code>1 <= deltas.length <= 100</code></li>\r\n            <li><code>-100 <= deltas[i] <= 100</code></li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p><strong>Output:</strong></p>\r\n<ul>\r\n    <li>An integer representing the final health value of the player.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    },
    {
        "id": 870,
        "title": "Longest Diagonal Segment",
        "problem_statement": "<h1>Longest Diagonal Segment</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a matrix of integers, with each element containing either 0, 1, or 2, your task is to find the longest diagonal segment which matches the following pattern: 1, 2, 0, 2, 0, ... (where the first element is 1, and then 2 and 0 are repeating infinitely).</p>\r\n<p>The diagonal segment:</p>\r\n<ul>\r\n    <li>May start and end at any matrix element.</li>\r\n    <li>May go toward any possible diagonal direction.</li>\r\n</ul>\r\n<p>Diagonal segments should start from an element containing 1. There are four elements containing 1 in this matrix, so four possible starting points for diagonal segments. Try starting from all of these elements one by one, and moving in all directions to find the longest possible diagonal segment which matches the specified pattern.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(matrix.length * matrix[0].length³) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: matrix = [[0, 0, 1, 1], [2, 2, 2, 0], [2, 1, 0, 1]]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> A diagonal segment starting with '1' at (0,2) and moving diagonally down-left (1,1), then (2,0) matches the pattern '1, 2, 0'. The length of this segment is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: matrix = [[2, 1, 2, 2, 0], [0, 2, 0, 2, 0], [0, 0, 0, 0, 0], [0, 2, 2, 2, 2]]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> A diagonal segment starting with '1' at (0,1) and moving diagonally down-right (1,2), then (2,3), then (3,4) matches the pattern '1, 2, 0, 2'. The length of this segment is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.array.integer matrix</code>\r\n        <ul>\r\n            <li>A matrix consisting of integers 0, 1, and/or 2.</li>\r\n            <li>Guaranteed constraints:\r\n                <ul>\r\n                    <li><code>1 &lt;= matrix.length &lt;= 100</code></li>\r\n                    <li><code>1 &lt;= matrix[i].length &lt;= 100</code></li>\r\n                    <li><code>0 &lt;= matrix[i][j] &lt;= 2</code></li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>integer</code>\r\n        <ul>\r\n            <li>The length of the longest diagonal segment within the matrix which matches the following pattern: 1, 2, 0, 2, 0, ...</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Autodesk_10april",
        "company_id": 264
    }
]