[
    {
        "id": 1767,
        "title": "String Motor",
        "problem_statement": "<h1>String Motor</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A String Motor is a device that takes a string S and a value K from the user as input and returns a string as an output. The output string is the string obtained by rotating the input string by k characters in the backward direction.</p>\r\n<p>For example, if the input string is \"doselect\" and k is 2, then the output string would be \"selectdo\".</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li><p>The first line contains a string S.</p></li>\r\n    <li><p>The second line contains an integer K.</p></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><p><code>1 &lt;= S.size() &lt;= 10<sup>5</sup></code></p></li>\r\n    <li><p><code>0 &lt;= K &lt;= S.size()</code></p></li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li><p>Output must contain a single string.</p></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: S = \"doselect\", K = 2\r\nOutput: \"selectdo\"</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The input string S is \"doselect\". The rotation value K is 2.</p>\r\n<p>Step-by-step rotation process:</p>\r\n<ol>\r\n    <li><p>Since the rotation is backward by 2 characters, you take the substring starting at index 2 to the end of the string:</p>\r\n    <pre><code class='language-text'>S[2:] = \"select\"</code></pre></li>\r\n    <li><p>Then append the substring from the start of the string up to index 1 (which is K - 1):</p>\r\n    <pre><code class='language-text'>S[0:2] = \"do\"</code></pre></li>\r\n    <li><p>Concatenate these two parts:</p>\r\n    <pre><code class='language-text'>\"select\" + \"do\" = \"selectdo\"</code></pre></li>\r\n    <li><p>This is the rotated string, which is the required output.</p></li>\r\n</ol>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: S = \"abcdefg\", K = 3\r\nOutput: \"defgabc\"</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Rotate backward by 3 means:</p>\r\n<p>Substring from index 3 to end: \"defg\"</p>\r\n<p>Append substring from start to index 2: \"abc\"</p>\r\n<p>Result: \"defgabc\"</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::string solve(const std::string& s, int k) {\n        // TODO: Implement the string rotation logic here\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string s;\n    std::cin >> s;\n\n    int k;\n    std::cin >> k;\n\n    Solution solution;\n    std::string result = solution.solve(s, k);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Infoedge_12oct",
        "company_id": 621
    },
    {
        "id": 1768,
        "title": "Sum-Two Pairs",
        "problem_statement": "<h1>Sum-Two Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Recently you were taught about the importance of double pairs. Double pairs are pairs of 2 numbers, such that one of them is double the other. You are given an array, wherein all integers are unique. You have to find the number of such pairs.</p>\r\n<p>Return the number of such pairs.</p>\r\n<p><strong>Input Format:</strong></p>\r\n<ul>\r\n<li>The first line consists of an integer, N.</li>\r\n<li>The next N lines are array elements.</li>\r\n</ul>\r\n<p><strong>Output Format:</strong></p>\r\n<p>The output should be an integer, denoting the number of such double pairs in the array.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5\r\n6\r\n7\r\n12\r\n14\r\n28\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> We see the following 3 pairs : (6-12), (7-14) and (14-28) hence the number of pairs is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 4\r\n1\r\n2\r\n4\r\n8\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>(1, 2)</li>\r\n<li>(2, 4)</li>\r\n<li>(4, 8)</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>The number of array elements N: 1 &le; N &le; 10<sup>4</sup>.</li>\r\n<li>The array elements: arr[i]: 1 &le; arr[i] &le; 10<sup>4</sup>.</li>\r\n<li>Execution time limit: 10 seconds.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <unordered_set>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int solve(const std::vector<int>& arr) {\n        // Core logic to find the number of double pairs goes here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::vector<int> arr(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> arr[i];\n    }\n\n    Solution solution;\n    int result = solution.solve(arr);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Infoedge_12oct",
        "company_id": 621
    }
]