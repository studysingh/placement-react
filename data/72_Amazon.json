[
    {
        "id": 272,
        "title": "Pascal Triangle Encryption",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Pascal Triangle Encryption</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>In order to ensure maximum security, the developers at Amazon employ multiple encryption methods to keep user data protected.</p>\n        \n        <p>In one method, numbers are encrypted using a scheme called \\'Pascal Triangle\\'. When an array of digits is fed to this system, it sums the adjacent digits. It then takes the rightmost digit (least significant digit) of each addition for the next step. Thus, the number of digits in each step is reduced by 1. This procedure is repeated until there are only 2 digits left, and this sequence of 2 digits forms the encrypted number.</p>\n        \n        <p>Given the initial sequence of the digits of numbers, find the encrypted number. You should report a string of digits representing the encrypted number.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>findNumber</code> in the editor below.</p>\n        \n        <p><code>findNumber</code> has the following parameter:</p>\n        <ul>\n            <li><code>int numbers[]</code>: the initial sequence of digits</li>\n        </ul>\n\n        <h4>Returns</h4>\n        <p><code>string</code>: the encrypted number represented as a string of 2 characters.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ numbers.length ≤ 10<sup>3</sup></li>\n            <li>0 ≤ numbers[i] ≤ 9</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\nnumbers[] size, n = 4\nnumbers = [4, 5, 6, 7]</pre>\n            <pre class=\\\"output\\\">Output:\n04</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Encryption Process:</h4>\n                <p>First level: 4+5=9, 5+6=11(1), 6+7=13(3)</p>\n                <p>Second level: 9+1=10(0), 1+3=4</p>\n                <p>Final result: 04</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input:\nnumbers[] size, n = 2\nnumbers = [4, 5]</pre>\n            <pre class=\\\"output\\\">Output:\n45</pre>\n            <div class=\\\"explanation\\\">\n                <p>The number of digits in the sequence is already equal to 2 so the number remains unchanged.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"sample-test-format\\\">\n        <h3>Input Format For Custom Testing</h3>\n        <p>The first line contains an integer n, the size of the array numbers.</p>\n        <p>Each of the next n lines contains an integer numbers[i].</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1_gYa8gWRKKbiDAh3gGI9fOtbJsu9hvCCUdPMMcy3ITM/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nstring findNumber(vector<int> numbers) {\\n    while (numbers.size() > 2) {\\n        vector<int> new_numbers;\\n        for(int i = 0; i < numbers.size() - 1; ++i) {\\n            int sum = numbers[i] + numbers[i+1];\\n            new_numbers.push_back(sum % 10);\\n        }\\n        numbers = new_numbers;\\n    }\\n    \\n    string encrypted = \\\"\\\";\\n    encrypted += to_string(numbers[0]);\\n    encrypted += to_string(numbers[1]);\\n    \\n    return encrypted;\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    \\n    int n;\\n    cin >> n;\\n    vector<int> numbers(n);\\n    for(int i = 0; i < n; ++i){\\n        cin >> numbers[i];\\n    }\\n    \\n    string result = findNumber(numbers);\\n    cout << result;\\n}",
        "company_name": "Amazon ",
        "company_id": 72
    },
    {
        "id": 489,
        "title": "```html\n\n\n\nCourse Structure Analysis\n\nbody {\n    f...",
        "problem_statement": "```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Course Structure Analysis</title>\n<style>\nbody {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 20px;\n}\npre {\n    background-color: #f4f4f4;\n    padding: 10px;\n    border: 1px solid #ddd;\n    overflow-x: auto;\n}\n.code-highlight {\n    color: darkblue;\n    font-weight: bold;\n}\n</style>\n</head>\n<body>\n\n<h2>Course Structure Analysis</h2>\n\n<h3>Problem Statement</h3>\n\n<p>The department of mathematics has <code>n</code> courses. The difficulty of the <code>i</code><sup>th</sup> course is represented by the array <code>difficulty[i]</code>.\nA \"course structure\" can be created by removing a non-empty subarray from the original array of course difficulties. A subarray is defined as a contiguous segment of the array.\nA \"well-organized\" course structure is one where the remaining courses (after removing the subarray) are non-empty and sorted in increasing order of difficulty.\nGiven the array <code>difficulty</code>, your task is to find the number of \"well-organized\" course structures that can be created.</p>\n\n<h3>Examples</h3>\n\n<h4>Example 1</h4>\n<p>Input: <code>difficulty = [1, 2, 1, 2]</code><br>\nOutput: <code>3</code><br>\nExplanation: The well-organized course structures are obtained by removing the following subarrays:</p>\n<ul>\n    <li>Removing <code>[1, 2]</code> results in <code>[1, 2]</code>, which is sorted.</li>\n    <li>Removing <code>[1, 2, 1]</code> results in <code>[2]</code>, which is sorted.</li>\n    <li>Removing <code>[2]</code> results in <code>[1, 1, 2]</code>, which is sorted.</li>\n</ul>\n\n<h4>Example 2</h4>\n<p>Input: <code>difficulty = [1, 2, 3, 4, 5]</code><br>\nOutput: <code>14</code><br>\nExplanation: Any subarray removal results in a well-organized structure.</p>\n\n<h4>Example 3</h4>\n<p>Input: <code>difficulty = [5, 4, 3, 2, 1]</code><br>\nOutput: <code>0</code><br>\nExplanation: No subarray removal results in a well-organized structure.</p>\n\n<h3>Constraints</h3>\n\n<ul>\n    <li><code>1 <= n <= 1000</code></li>\n    <li><code>1 <= difficulty[i] <= 1000</code></li>\n</ul>\n\n<h3>Expected Output</h3>\n\n<p>The function should return a <code>long</code> integer representing the number of well-organized course structures.</p>\n\n<h3>Code Stub (C++)</h3>\n\n<pre><code>\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nlong getNumCourseStructures(vector&lt;int&gt; difficulty) {\n    long count = 0;\n    int n = difficulty.size();\n\n    for (int i = 0; i &lt; n; ++i) {\n        for (int j = i; j &lt; n; ++j) {\n            vector&lt;int&gt; remaining;\n            for (int k = 0; k &lt; n; ++k) {\n                if (k &lt; i || k &gt; j) {\n                    remaining.push_back(difficulty[k]);\n                }\n            }\n\n            if (remaining.empty()) continue; // Course structure must be non-empty\n\n            bool sorted = true;\n            for (size_t k = 1; k &lt; remaining.size(); ++k) {\n                if (remaining[k] &lt; remaining[k - 1]) {\n                    sorted = false;\n                    break;\n                }\n            }\n\n            if (sorted) {\n                count++;\n            }\n        }\n    }\n\n    return count;\n}\n\nint main() {\n    vector&lt;int&gt; difficulty1 = {1, 2, 1, 2};\n    cout &lt;&lt; \"Number of well-organized structures for [1, 2, 1, 2]: \" &lt;&lt; getNumCourseStructures(difficulty1) &lt;&lt; endl;  // Expected: 3\n\n    vector&lt;int&gt; difficulty2 = {1, 2, 3, 4, 5};\n    cout &lt;&lt; \"Number of well-organized structures for [1, 2, 3, 4, 5]: \" &lt;&lt; getNumCourseStructures(difficulty2) &lt;&lt; endl;  // Expected: 14\n\n    vector&lt;int&gt; difficulty3 = {5, 4, 3, 2, 1};\n    cout &lt;&lt; \"Number of well-organized structures for [5, 4, 3, 2, 1]: \" &lt;&lt; getNumCourseStructures(difficulty3) &lt;&lt; endl;  // Expected: 0\n\n\n    return 0;\n}\n</code></pre>\n\n</body>\n</html>\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon ",
        "company_id": 72
    },
    {
        "id": 490,
        "title": "Well-Organized Course Structures",
        "problem_statement": "```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Well-Organized Course Structures</title>\n<style>\nbody {\n  font-family: Arial, sans-serif;\n  line-height: 1.6;\n  margin: 20px;\n}\npre {\n  background-color: #f4f4f4;\n  padding: 10px;\n  border: 1px solid #ddd;\n  overflow-x: auto;\n}\n.important {\n  font-weight: bold;\n}\n</style>\n</head>\n<body>\n\n<h1>Well-Organized Course Structures</h1>\n\n<h2>Problem Statement</h2>\n\n<p>The Department of Mathematics has <span class=\"important\">n</span> courses, where the difficulty of the <span class=\"important\">i<sup>th</sup></span> course is represented by the array <span class=\"important\">difficulty[i]</span>. A course structure can be created in the following way:</p>\n\n<ul>\n  <li>A non-empty subarray of courses is chosen from the given array of courses.</li>\n  <li>The chosen subarray of courses is removed from the original array of courses.</li>\n</ul>\n\n<p>A course structure is defined to be <span class=\"important\">well-organized</span> if the array of courses in the course structure is non-empty and is sorted in increasing order of difficulty (i.e., each element is greater than or equal to the previous element).</p>\n\n<p>Given <span class=\"important\">n</span> courses and an array <span class=\"important\">difficulty</span>, find the number of well-organized course structures that can be created with the given array of courses.</p>\n\n<p><span class=\"important\">Note:</span> A subarray is defined as any contiguous segment of the array.</p>\n\n<h2>Examples</h2>\n\n<p><strong>Example 1:</strong></p>\n<p>Given <span class=\"important\">n = 4</span> and <span class=\"important\">difficulty = [1, 2, 1, 2]</span>.</p>\n<p>The well-organized course structures are created as follows:</p>\n\n<pre>\nSubarray Removed | Course Structure after removing subarray | Is Well-Organized?\n-------------------|-------------------------------------------|--------------------\n[1, 2]             | [1, 2]                                      | Yes\n[1, 2, 1]          | [2]                                         | Yes\n[2]              | [1, 1, 2]                                     | Yes\n[1, 1] | [2, 2] | Yes\n</pre>\n\n<p>So, the answer is 4.</p>\n\n<p><strong>Example 2:</strong></p>\n<p>Given <span class=\"important\">n = 3</span> and <span class=\"important\">difficulty = [1, 3, 2]</span>.</p>\n<p>The well-organized course structures are created as follows:</p>\n\n<pre>\nSubarray Removed | Course Structure after removing subarray | Is Well-Organized?\n-------------------|-------------------------------------------|--------------------\n[1]              | [3, 2]                                      | No\n[3]              | [1, 2]                                      | Yes\n[2]              | [1, 3]                                      | No\n[1, 3]             | [2]                                         | Yes\n[3, 2]             | [1]                                         | Yes\n[1, 3, 2]             | []                                         | No\n</pre>\n\n<p>So, the answer is 3.</p>\n<h2>Constraints</h2>\n\n<ul>\n  <li><span class=\"important\">1 &lt;= n &lt;= 1000</span></li>\n  <li><span class=\"important\">1 &lt;= difficulty[i] &lt;= 1000</span></li>\n</ul>\n\n<h2>Expected Output</h2>\n\n<p>Return the number of well-organized course structures as a <span class=\"important\">long</span> integer.</p>\n\n<h2>Function Signature (C++)</h2>\n\n<pre><code>\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nlong getNumCourseStructures(std::vector&lt;int&gt; difficulty) {\n  // Your code here\n  return 0; // Placeholder return value\n}\n\nint main() {\n  // Example usage\n  std::vector&lt;int&gt; difficulty = {1, 2, 1, 2};\n  long result = getNumCourseStructures(difficulty);\n  std::cout &lt;&lt; \"Number of well-organized course structures: \" &lt;&lt; result &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>\n\n</body>\n</html>\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon ",
        "company_id": 72
    },
    {
        "id": 491,
        "title": "Well-Organized Course Structures",
        "problem_statement": "```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Well-Organized Course Structures</title>\n<style>\nbody {\n  font-family: Arial, sans-serif;\n  line-height: 1.6;\n  margin: 20px;\n}\nh1, h2 {\n  color: #333;\n}\n.problem-statement {\n  margin-bottom: 20px;\n}\n.code-example {\n  background-color: #f4f4f4;\n  padding: 10px;\n  border: 1px solid #ddd;\n  overflow-x: auto;\n  font-family: 'Courier New', monospace;\n}\n.constraints {\n  margin-top: 10px;\n}\n</style>\n</head>\n<body>\n\n<h1>Well-Organized Course Structures</h1>\n\n<div class=\"problem-statement\">\n  <h2>Problem Statement</h2>\n  <p>\n  The department of mathematics has <i>n</i> courses, where the difficulty of the <i>i</i><sup>th</sup> course is represented by the array <code>difficulty[i]</code>. A course structure can be created in the following way:\n  </p>\n  <ul>\n    <li>A non-empty subarray of courses is chosen from the given array of courses.</li>\n    <li>The chosen subarray of courses is removed from the original array of courses.</li>\n  </ul>\n  <p>\n  A course structure is defined to be <b>well-organized</b> if the array of courses in the course structure is non-empty and is sorted in increasing order of difficulty. Given <i>n</i> courses, and an array <code>difficulty</code>, find the <b>number</b> of well-organized course structures that can be created with the given array of courses.\n  </p>\n  <p>\n  <b>Note:</b> A subarray is defined as any contiguous segment of the array.\n  </p>\n</div>\n\n<h2>Example</h2>\n<p>\nGiven <code>n = 4</code> and <code>difficulty = [1, 2, 1, 2]</code>. The well-organized course structures are obtained by removing the following subarrays:\n<ul>\n  <li>Removing <code>[1, 2]</code> results in <code>[1, 2]</code>, which is well-organized.</li>\n  <li>Removing <code>[1, 2, 1]</code> results in <code>[2]</code>, which is well-organized.</li>\n  <li>Removing <code>[2]</code> results in <code>[1, 1, 2]</code>, which is well-organized.</li>\n  <li>Removing <code>[2,1]</code> results in <code>[1,2]</code>, which is well-organized.</li>\n   <li>Removing <code>[1]</code> results in <code>[2, 1, 2]</code>, which is <b>not</b> well-organized.</li>\n   <li>Removing <code>[1,2,1,2]</code> results in <code>[]</code>, which is <b>not</b> well-organized.</li>\n</ul>\nTherefore, the answer is 4.\n</p>\n\n<h2>Constraints</h2>\n<ul class=\"constraints\">\n  <li><code>1 &lt;= n &lt;= 100</code></li>\n  <li><code>1 &lt;= difficulty[i] &lt;= 100</code></li>\n</ul>\n\n<h2>Function Signature</h2>\n<div class=\"code-example\">\n<pre><code>\nlong getNumCourseStructures(vector&lt;int&gt; difficulty) {\n  // Write your code here\n}\n</code></pre>\n</div>\n\n<h2>Expected Output</h2>\n<p>\nThe function should return a <code>long</code> representing the number of well-organized course structures.\n</p>\n\n<h2>Sample Test Cases</h2>\n\n<ol>\n  <li>\n    <b>Input:</b> <code>difficulty = [1, 2, 1, 2]</code><br>\n    <b>Output:</b> <code>4</code>\n  </li>\n  <li>\n    <b>Input:</b> <code>difficulty = [1, 2, 3, 4, 5]</code><br>\n    <b>Output:</b> <code>14</code>\n  </li>\n  <li>\n    <b>Input:</b> <code>difficulty = [5, 4, 3, 2, 1]</code><br>\n    <b>Output:</b> <code>0</code>\n  </li>\n    <li>\n    <b>Input:</b> <code>difficulty = [1, 1, 1, 1, 1]</code><br>\n    <b>Output:</b> <code>0</code>\n  </li>\n      <li>\n    <b>Input:</b> <code>difficulty = [1, 2, 2, 3, 4]</code><br>\n    <b>Output:</b> <code>14</code>\n  </li>\n</ol>\n\n</body>\n</html>\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon ",
        "company_id": 72
    },
    {
        "id": 492,
        "title": "Well-Organized Course Structures",
        "problem_statement": "```html\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<title>Well-Organized Course Structures</title>\r\n<style>\r\nbody {\r\n    font-family: Arial, sans-serif;\r\n    line-height: 1.6;\r\n    margin: 20px;\r\n}\r\nh1 {\r\n    color: #333;\r\n}\r\nh2 {\r\n    color: #444;\r\n}\r\np {\r\n    margin-bottom: 10px;\r\n}\r\npre {\r\n    background-color: #f4f4f4;\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n    overflow-x: auto;\r\n}\r\ncode {\r\n    font-family: 'Courier New', monospace;\r\n}\r\n.important {\r\n    font-weight: bold;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n\r\n<h1>Well-Organized Course Structures</h1>\r\n\r\n<h2>Problem Statement</h2>\r\n\r\n<p>The department of mathematics has <code>n</code> courses, where the difficulty of the <code>i<sup>th</sup></code> course is represented by the array <code>difficulty[i]</code>.</p>\r\n\r\n<p>A course structure can be created in the following way:</p>\r\n\r\n<ul>\r\n    <li>A non-empty subarray of courses is chosen from the given array of courses.</li>\r\n    <li>The chosen subarray of courses is removed from the original array of courses.</li>\r\n</ul>\r\n\r\n<p>A course structure is defined to be <span class=\"important\">well-organized</span> if the array of courses in the course structure is non-empty and is sorted in increasing order of difficulty.</p>\r\n\r\n<p>Given <code>n</code> courses, and an array <code>difficulty</code>, find the number of well-organized course structures that can be created with the given array of courses.</p>\r\n\r\n<p><span class=\"important\">Note:</span> A subarray is defined as any contiguous segment of the array.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<p>Given <code>n = 4</code> and <code>difficulty = [1, 2, 1, 2]</code>.</p>\r\n\r\n<p>Different course structures can be created as follows (this is shown in the image, but for clarity):</p>\r\n\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Subarray removed</th>\r\n      <th>Course Structure after removing subarray</th>\r\n      <th>Is Well-Organized?</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr>\r\n      <td><code>[1]</code></td>\r\n      <td><code>[2, 1, 2]</code></td>\r\n      <td>No</td>\r\n    </tr>\r\n    <tr>\r\n      <td><code>[1, 2]</code></td>\r\n      <td><code>[1, 2]</code></td>\r\n      <td>Yes</td>\r\n    </tr>\r\n     <tr>\r\n      <td><code>[1, 2, 1]</code></td>\r\n      <td><code>[2]</code></td>\r\n      <td>Yes</td>\r\n    </tr>\r\n    <tr>\r\n      <td><code>[1, 2, 1, 2]</code></td>\r\n      <td><code>[]</code></td>\r\n      <td>No</td>\r\n    </tr>\r\n       <tr>\r\n      <td><code>[2]</code></td>\r\n      <td><code>[1, 1, 2]</code></td>\r\n      <td>Yes</td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<p>The well-organized course structures are <code>[1, 2]</code>, <code>[2]</code>, and <code>[1, 1, 2]</code> so the answer is 3.</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n<p><code>difficulty = [1, 2, 3, 4]</code></p>\r\n<p>The answer is 10.</p>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n<p><code>difficulty = [4, 3, 2, 1]</code></p>\r\n<p>The answer is 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 1000</code></li>\r\n    <li><code>1 &lt;= difficulty[i] &lt;= 1000</code></li>\r\n</ul>\r\n\r\n<h2>Expected Output</h2>\r\n\r\n<p>Return the number of well-organized course structures that can be created.</p>\r\n\r\n<h2>Function Signature</h2>\r\n\r\n<pre><code>\r\nlong getNumCourseStructures(vector&lt;int&gt; difficulty) {\r\n    // Write your code here\r\n}\r\n</code></pre>\r\n\r\n<h2>Code Stub (C++)</h2>\r\n\r\n<pre><code>\r\n#include &lt;iostream&gt;\r\n#include &lt;vector&gt;\r\n#include &lt;algorithm&gt;\r\n\r\nusing namespace std;\r\n\r\nlong getNumCourseStructures(vector&lt;int&gt; difficulty) {\r\n    long count = 0;\r\n    int n = difficulty.size();\r\n\r\n    for (int i = 0; i &lt; n; ++i) {\r\n        for (int j = i; j &lt; n; ++j) {\r\n            vector&lt;int&gt; remainingCourses;\r\n            for (int k = 0; k &lt; n; ++k) {\r\n                if (k &lt; i || k &gt; j) {\r\n                    remainingCourses.push_back(difficulty[k]);\r\n                }\r\n            }\r\n\r\n            if (remainingCourses.empty()) {\r\n                continue;\r\n            }\r\n\r\n            bool isWellOrganized = true;\r\n            for (size_t k = 1; k &lt; remainingCourses.size(); ++k) {\r\n                if (remainingCourses[k] &lt; remainingCourses[k - 1]) {\r\n                    isWellOrganized = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isWellOrganized) {\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nint main() {\r\n    vector&lt;int&gt; difficulty1 = {1, 2, 1, 2};\r\n    cout << \"Example 1: \" << getNumCourseStructures(difficulty1) << endl;\r\n\r\n    vector&lt;int&gt; difficulty2 = {1, 2, 3, 4};\r\n    cout << \"Example 2: \" << getNumCourseStructures(difficulty2) << endl;\r\n\r\n    vector&lt;int&gt; difficulty3 = {4, 3, 2, 1};\r\n    cout << \"Example 3: \" << getNumCourseStructures(difficulty3) << endl;\r\n\r\n    return 0;\r\n}\r\n</code></pre>\r\n\r\n</body>\r\n</html>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon ",
        "company_id": 72
    },
    {
        "id": 525,
        "title": "Slot Machine 2.0",
        "problem_statement": "```html\r\n<h1>Slot Machine 2.0</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A slot machine has multiple wheels that are spun n times.</p>\r\n<p>In each spin, each wheel may have multiple stops from 1 to 9 and show one random number on the machine's dashboard.</p>\r\n<p>Given the number of spins n, determine the minimum number of stops on each wheel to produce the numbers displayed on the dashboard for each spin. Then, calculate the total stops.</p>\r\n<pre><code class='language-javascript'>/*\r\n * Complete the 'slotwheels' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts STRING_ARRAY history as parameter.\r\n */\r\n\r\npublic static int slotwheels(List&lt;String&gt; history) {\r\n    // Function body would go here\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4\r\nhistory = ['137', '364', '115', '724']\r\nOutput: 14</code></pre>\r\n<p><strong>Explanation:</strong> The spins on a slot machine with 4 wheels are recorded as an array history.</p>\r\n<pre><code class='language-text'>1 3 7\r\n3 6 4\r\n1 1 5\r\n7 2 4</code></pre>\r\n<p>One wheel needs to have at least 7 stops to produce the numbers displayed on the dashboard for 1st spin and 4th spin. Remove the highest value from each of the rows.</p>\r\n<pre><code class='language-text'>1 3\r\n3 4\r\n1 1\r\n2 4</code></pre>\r\n<p>One wheel needs to have at least 4 stops to produce the numbers displayed on the dashboard for 2nd spin and 4th spin. Remove the highest value from each of the rows. Using the same logic, the final wheel needs 3 stops. Total stops are 7 + 4 + 3 = 14.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4\r\nhistory = ['1112', '1211', '1111', '1111']\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The spins on a slot machine with 4 wheels are recorded as an array history.</p>\r\n<pre><code class='language-text'>1 1 1 2\r\n1 2 1 1\r\n1 1 1 1\r\n1 1 1 1</code></pre>\r\n<p>One wheel needs to have at least 2 stops to produce the numbers displayed on the dashboard for 1st spin and 3rd spin. Remove the highest value from each of the rows:</p>\r\n<pre><code class='language-text'>1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1</code></pre>\r\n<p>Using the same logic, 3 wheels need to have 1 stop each. Total stops are 2 + 1 + 1 + 1 = 5.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 50</code></li>\r\n    <li><code>1 &lt;= |history[i]| &lt;= 50</code></li>\r\n    <li>All <code>history[i]</code> in a test case are of equal length.</li>\r\n    <li>All characters in each <code>history[i]</code> are <code>[0-9]</code>.</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon ",
        "company_id": 72
    }
]