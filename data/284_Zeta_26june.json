[
    {
        "id": 915,
        "title": "Zeta Grid Chef's Counter",
        "problem_statement": "```html\r\n<h1>Zeta Grid Chef's Counter</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In Zeta, renowned for its diverse array of streetside food vendors, one stands out above all others for its delectable offerings: the chef's counter!</p>\r\n<p>You're determined to find the counter, but its exact location remains a mystery. All you know is that it's situated at some street intersection in Zeta. Your intuition tells you that people from all corners of Zeta are converging towards that intersection. Thus, your task is to pinpoint the intersection where the highest number of people are heading.</p>\r\n<p>For this problem, Zeta is represented as a regular grid, with its axes aligned to cardinal directions and bounded between 0 and Q, inclusive, on each axis. West-east streets correspond to gridlines y = 0, y = 1, y = 2, ..., y = Q, while south-north streets correspond to gridlines x = 0, x = 1, x = 2, ..., x = Q. People move exclusively along these streets. Intersections occur where these lines meet, such as (0, 0) and (1, 2). The shortest distance between two intersections is calculated using the Zeta World distance, which is the sum of the absolute horizontal difference and the absolute vertical difference between the two sets of coordinates.</p>\r\n<p>You have the coordinates of P people, all positioned at intersections, along with the compass direction each person is headed: north (increasing y-direction), south (decreasing y-direction), east (increasing x-direction), or west (decreasing x-direction). A person is considered to be moving towards a street intersection if their current movement leads them along the shortest path to that intersection within the Zeta grid. For instance, if a person is situated at (x0, y0) and moving north, they are advancing towards all street intersections with coordinates (x, y) where y > y0.</p>\r\n<p>You suspect that the chef counter is located at the intersection towards which the highest number of people are traveling. Additionally, you believe that the more southern and western parts of the world are more probable locations for the chef counter. Therefore, if there are multiple intersections with the same highest count of people traveling towards them, you will opt for the one with the smallest non-negative x-coordinate. If there are still ties, you will select the intersection with the smallest non-negative y-coordinate among those with the same x-coordinate. This approach ensures you prioritize intersections located in the southern and western regions of the world. Which intersection will you ultimately choose?</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= P &lt;= 500</code></li>\r\n    <li><code>1 &lt;= Q &lt;= 105</code></li>\r\n    <li><code>0 &lt;= Xi &lt;= Q</code>, for all i.</li>\r\n    <li><code>0 &lt;= Yi &lt;= Q</code>, for all i.</li>\r\n    <li>For all i, if <code>Xi = 0</code>, <code>Di != W</code>.</li>\r\n    <li>For all i, if <code>Yi = 0</code>, <code>Di != S</code>.</li>\r\n    <li>For all i, if <code>Xi = Q</code>, <code>Di != E</code>.</li>\r\n    <li>For all i, if <code>Yi = Q</code>, <code>Di != N</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1 10\r\n5 5 N\r\nOutput:\r\n0 6</code></pre>\r\n<p><strong>Explanation:</strong> There is only one person, and he is moving north from (5, 5). This means that all street corners with y >= 6 are possible locations for the Chef's Counter. Out of all the possibilities, we choose the one with lowest x >= 0 and then lowest y >= 6.</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_26june",
        "company_id": 284
    },
    {
        "id": 916,
        "title": "Bitwise Operations Count",
        "problem_statement": "<h1>Bitwise Operations Count</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Karan has two non-negative integers N and X. He now wants to find the number of integers K such that 0 ≤ K ≤ N, and (N ⊕ K) & X = 0.</p>\r\n<p>Note that '⊕' denotes the bitwise XOR operator and '&' denotes the bitwise AND operator.</p>\r\n<p>Help Karan in finding the total required count.</p>\r\n\r\n<p><strong>Input Format:</strong></p>\r\n<p>The first line of input will contain a single integer T, denoting the number of test cases.</p>\r\n<p>Each test case consists of a single line of input containing N and X denoting the two integers as described in the statement.</p>\r\n\r\n<p><strong>Output Format:</strong></p>\r\n<p>For each test case, output the total number of integers K which satisfy the requirements mentioned.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 4, X = 5\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> For N=4, X=5, we need to find the number of K, which satisfy 0 ≤ K ≤ 4, and (4 ⊕ K) & 5 = 0.</p>\r\n<p>Let's check values of K from 0 to 3 (as shown in the original explanation):</p>\r\n<ul>\r\n    <li>K=0 (000<sub>2</sub>): (100<sub>2</sub> ⊕ 000<sub>2</sub>) & 101<sub>2</sub> = 100<sub>2</sub> & 101<sub>2</sub> = 100<sub>2</sub> ≠ 0</li>\r\n    <li>K=1 (001<sub>2</sub>): (100<sub>2</sub> ⊕ 001<sub>2</sub>) & 101<sub>2</sub> = 101<sub>2</sub> & 101<sub>2</sub> = 101<sub>2</sub> ≠ 0</li>\r\n    <li>K=2 (010<sub>2</sub>): (100<sub>2</sub> ⊕ 010<sub>2</sub>) & 101<sub>2</sub> = 110<sub>2</sub> & 101<sub>2</sub> = 100<sub>2</sub> ≠ 0</li>\r\n    <li>K=3 (011<sub>2</sub>): (100<sub>2</sub> ⊕ 011<sub>2</sub>) & 101<sub>2</sub> = 111<sub>2</sub> & 101<sub>2</sub> = 101<sub>2</sub> ≠ 0</li>\r\n</ul>\r\n<p>So, we have looked at all values of K and found no value which satisfies the requirements. So the answer is 0.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 1, X = 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> For N=1, X=2, we need to find the number of K, which satisfy 0 ≤ K ≤ 1, and (1 ⊕ K) & 2 = 0.</p>\r\n<p>Let's check values of K from 0 to 1:</p>\r\n<ul>\r\n    <li>K=0 (00<sub>2</sub>): (01<sub>2</sub> ⊕ 00<sub>2</sub>) & 010<sub>2</sub> = 01<sub>2</sub> & 010<sub>2</sub> = 00<sub>2</sub> = 0</li>\r\n</ul>\r\n<p>So, there is only one value of K (K=0), which satisfies the requirements. So the answer is 1.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: N = 8, X = 4\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> For N=8, X=4, we need to find the number of K, which satisfy 0 ≤ K ≤ 8, and (8 ⊕ K) & 4 = 0.</p>\r\n<p>Let's check values of K from 0 to 7 (as shown in the original explanation):</p>\r\n<ul>\r\n    <li>K=0 (0000<sub>2</sub>): (1000<sub>2</sub> ⊕ 0000<sub>2</sub>) & 100<sub>2</sub> = 1000<sub>2</sub> & 100<sub>2</sub> = 0000<sub>2</sub> = 0</li>\r\n    <li>K=1 (0001<sub>2</sub>): (1000<sub>2</sub> ⊕ 0001<sub>2</sub>) & 100<sub>2</sub> = 1001<sub>2</sub> & 100<sub>2</sub> = 0000<sub>2</sub> = 0</li>\r\n    <li>K=2 (0010<sub>2</sub>): (1000<sub>2</sub> ⊕ 0010<sub>2</sub>) & 100<sub>2</sub> = 1010<sub>2</sub> & 100<sub>2</sub> = 0000<sub>2</sub> = 0</li>\r\n    <li>K=3 (0011<sub>2</sub>): (1000<sub>2</sub> ⊕ 0011<sub>2</sub>) & 100<sub>2</sub> = 1011<sub>2</sub> & 100<sub>2</sub> = 0000<sub>2</sub> = 0</li>\r\n    <li>K=4 (0100<sub>2</sub>): (1000<sub>2</sub> ⊕ 0100<sub>2</sub>) & 100<sub>2</sub> = 1100<sub>2</sub> & 100<sub>2</sub> = 0100<sub>2</sub> ≠ 0</li>\r\n    <li>K=5 (0101<sub>2</sub>): (1000<sub>2</sub> ⊕ 0101<sub>2</sub>) & 100<sub>2</sub> = 1101<sub>2</sub> & 100<sub>2</sub> = 0100<sub>2</sub> ≠ 0</li>\r\n    <li>K=6 (0110<sub>2</sub>): (1000<sub>2</sub> ⊕ 0110<sub>2</sub>) & 100<sub>2</sub> = 1110<sub>2</sub> & 100<sub>2</sub> = 0100<sub>2</sub> ≠ 0</li>\r\n    <li>K=7 (0111<sub>2</sub>): (1000<sub>2</sub> ⊕ 0111<sub>2</sub>) & 100<sub>2</sub> = 1111<sub>2</sub> & 100<sub>2</sub> = 0100<sub>2</sub> ≠ 0</li>\r\n</ul>\r\n<p>So, we have looked at all values of K and there is a total of 4 values that satisfy the requirements. So the answer is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 ≤ T ≤ 10<sup>5</sup></code></li>\r\n    <li><code>1 ≤ N, X ≤ 2<sup>30</sup> - 1</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_26june",
        "company_id": 284
    },
    {
        "id": 917,
        "title": "Optimal Item Distribution Game",
        "problem_statement": "<h1>Optimal Item Distribution Game</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An individual, whom we shall refer to as Player A, has a set of n items, each associated with a positive weight represented by the values <code>arr[i]</code>, where <code>i</code> ranges from 1 to n. Player A has at their disposal three distinct containers, labeled 1 to 3, which are initially empty. Player A's objective is to allocate these items into the containers, ensuring that each container contains at least one item.</p>\r\n<p>Subsequently, another individual, whom we shall refer to as Player B, will be tasked with selecting one item from each of the three containers. Let's denote the weight of the item selected from container <code>j</code> as <code>wj</code>. The score, which quantifies the outcome, will be determined by summing the absolute differences between the weights of the items. Player B selects from each container. The scoring formula is given as <code>|w1 - w2| + |w2 - w3|</code>, where <code>|x|</code> represents the absolute value of <code>x</code>.</p>\r\n<p>It is a known fact that Player B will strategically select the items to minimize the overall score. The objective is to find the maximum achievable score Player A can secure if they distribute the items optimally across the containers.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3 1 5 2 3\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> In the given test case, one way of achieving a final score of 6 is to do the following:</p>\r\n<ul>\r\n    <li>Put items 1, 4, and 5 into container 1.</li>\r\n    <li>Put item 2 into container 2.</li>\r\n    <li>Put item 3 into container 3.</li>\r\n</ul>\r\n<p>If Player A distributes the items that way, a way Player B can take the items is:</p>\r\n<ul>\r\n    <li>Take item 5 from container 1.</li>\r\n    <li>Take item 3 from container 2.</li>\r\n    <li>Take item 2 from container 3.</li>\r\n</ul>\r\n<p>The score is <code>|5 - 3| + |3 - 5| = 6</code>. It can be shown that Player B cannot get a smaller score from this distribution that results in a final score bigger than 6.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= arr[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Zeta_26june",
        "company_id": 284
    }
]