[
    {
        "id": 450,
        "title": "Message Requirement Fulfillment",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Message Requirement Fulfillment</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>During the processing of messages in a system, a requirement is set for each message based on its price and the number of available seats. The system needs to determine whether each message fulfills the requirement and send appropriate responses.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer <code>n</code>, the number of messages.</p>\n        <p>The second line contains the requirement in the format: <code>REQUIREMENT id price seats</code>.</p>\n        <p>The next <code>n</code> lines contain the messages in the format: <code>DATA id price</code>.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>For each message, output a single integer:</p>\n        <ul>\n            <li><strong>0</strong> if the message does not fulfill the requirement.</li>\n            <li>The number of seats requested if the requirement is fulfilled.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 100</code></li>\n            <li><code>1 ≤ price ≤ 1000</code></li>\n            <li><code>1 ≤ seats ≤ 10</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n10\nREQUIREMENT 1 100 3\nDATA 1 1\nDATA 1 110\nDATA 1 3\nDATA 0 0\nDATA 2 1\nDATA 2 2\nDATA 2 90\nDATA 2 4\nDATA 0 0\nDATA 0 0</pre>\n            <pre class=\\\"output\\\">Output:\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>The message with id 1 does not fulfill the requirement because the price of 110 is higher than the required 100.</p>\n                <p>The message with id 2 does fulfill the requirement. The requirement is fulfilled once the number of available seats is received, so an order message for original message id 2 and 3 seats (as per the requirement) is sent. At all other times, no message is being sent (0).</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/10q2URjFmlHu-EkGXa8_R_J7tpBTDjlRQsCUCn4CzOwc/edit?usp=sharing",
        "solution_code": "#include <fstream>\\n#include <numeric>\\n#include <sstream>\\n#include <iostream>\\n#include <optional>\\n#include <algorithm>\\n#include <unordered_map>\\n#include <queue>\\n#include <cstdint>\\n\\nusing Data = uint32_t;\\n\\nstruct Requirement {\\n    Data artistId;\\n    Data ticketPrice;\\n    Data numberOfSeats;\\n};\\n\\nstruct PartialMessage {\\n    int packetNumber = 0;\\n    Data artistId = 0;\\n    Data ticketPrice = 0;\\n    Data availableSeats = 0;\\n};\\n\\nclass ConcertTicketBuyer {\\npublic:\\n    ConcertTicketBuyer() = default;\\n\\n    void OnNewRequirement(Data artistId, Data ticketPrice, Data availableSeats) {\\n        requirements.emplace_back(Requirement{artistId, ticketPrice, availableSeats});\\n    }\\n\\n    Data ProcessData(Data messageId, Data data) {\\n        if (!orderPackets.empty()) {\\n            Data packet = orderPackets.front();\\n            orderPackets.pop();\\n            return packet;\\n        }\\n\\n        if (messageId == 0) {\\n            return 0;\\n        }\\n\\n        auto& pm = partialMessages[messageId];\\n\\n        switch (pm.packetNumber) {\\n            case 0:\\n                pm.artistId = data;\\n                pm.packetNumber++;\\n                break;\\n            case 1:\\n                pm.ticketPrice = data;\\n                pm.packetNumber++;\\n                break;\\n            case 2:\\n                pm.availableSeats = data;\\n                pm.packetNumber++;\\n                break;\\n        }\\n\\n        if (pm.packetNumber == 3) {\\n            for (const auto& req : requirements) {\\n                if (pm.artistId == req.artistId && pm.ticketPrice <= req.ticketPrice && pm.availableSeats >= req.numberOfSeats) {\\n                    orderPackets.push(messageId);\\n                    orderPackets.push(req.numberOfSeats);\\n                }\\n            }\\n            partialMessages.erase(messageId);\\n        }\\n\\n        return orderPackets.empty() ? 0 : ProcessData(0, 0);\\n    }\\n\\nprivate:\\n    std::vector<Requirement> requirements;\\n    std::unordered_map<Data, PartialMessage> partialMessages;\\n    std::queue<Data> orderPackets;\\n};",
        "company_name": "Optiver",
        "company_id": 132
    }
]