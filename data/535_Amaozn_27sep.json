[
    {
        "id": 1530,
        "title": "Maximum Isolation",
        "problem_statement": "<h1>Maximum Isolation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Amazon's research laboratory, <code>k</code> engineers need to be assigned to workstations based on their expertise sets.</p>\r\n<p>Each engineer has a specific expertise, represented by a character in the expertise string. Engineers appear in the order they need to be assigned. The laboratory has a row of <code>j</code> available workstations, each tagged with the expertise it supports, represented by the <code>workspace</code> string. The <code>i</code><sup>th</sup> character of <code>workspace</code> shows the expertise accepted by the <code>i</code><sup>th</sup> workstation.</p>\r\n<h3>Assignment Rules:</h3>\r\n<ul>\r\n    <li>Each engineer must be assigned to a compatible workstation (matching their expertise).</li>\r\n    <li>Engineers must be placed in the same order as they appear in the expertise string.</li>\r\n    <li>Workstations assigned to engineers don't have to be next to each other, i.e., (they do not need to be contiguous).</li>\r\n</ul>\r\n<p><strong>Goal:</strong> Find the maximum isolation of any valid assignment.</p>\r\n<p>Isolation is defined as the largest gap (in workstation indices) between any two adjacent engineers. More formally, if engineers are assigned to workstations at positions <code>q<sub>1</sub>, q<sub>2</sub>, q<sub>3</sub>, ..., q<sub>k</sub></code>, then: isolation = <code>max(q(i+1) - q(i) - 1)</code> for <code>1 &lt;= i &lt; k</code>. It is guaranteed that a valid assignment exists for every engineer.</p>\r\n<p>Complete the function <code>calculateMaxDistance</code> in the editor below.</p>\r\n<p><code>calculateMaxDistance</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string expertise</code>: contains the expertise of each of the <code>k</code> engineers.</li>\r\n    <li><code>string workspace</code>: contains the expertise of engineers that can work in the workstations.</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int Maximum Isolation",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amaozn_27sep",
        "company_id": 535
    },
    {
        "id": 1531,
        "title": "Get Minimum Removals",
        "problem_statement": "<h1>Get Minimum Removals</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon developers are building a prototype feature that helps customers manage their cart within a given budget.</p>\r\n<p>You are given:</p>\r\n<ul>\r\n<li>An integer <code>budget</code>, representing the budget of the customer.</li>\r\n<li>An integer array <code>cart_items</code> of length <code>n</code>, where <code>cart_items[i]</code> represents the price of the <code>i<sup>th</sup></code> item.</li>\r\n</ul>\r\n<p>For each index <code>i</code> (<code>0 <= i < n</code>), consider the sub-cart containing items from index <code>0</code> to <code>i</code> (inclusive), i.e., <code>sub-cart = cart_items[0...i]</code>.</p>\r\n<p>For this sub-cart, determine the minimum number of items required to remove so that the total price of cart items does not exceed the <code>budget</code>.</p>\r\n<p><strong>Note that the item at index <code>i</code> cannot be removed.</strong></p>\r\n<p>The task is to return an array of length <code>n</code>, where the value at index <code>i</code> is the minimum number of removals required for the sub-cart ending at <code>i</code>.</p>\r\n\r\n<p>Complete the function <code>getMinRemovals</code> in the editor below.</p>\r\n<p><code>getMinRemovals</code> has the following parameters:</p>\r\n<ul>\r\n<li><code>int cart_items[n]</code>: the prices of the items in the cart</li>\r\n<li><code>int budget</code>: the budget for purchases</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<p><code>int[n]</code>: the minimum number of items to be removed for each index.</p>\r\n\r\n<pre><code class='language-python'>def getMinRemovals(cart_items, budget):\r\n    # Write your code here\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Suppose, <code>n = 3</code>, <code>cart_items = [2, 3, 7]</code>, and <code>budget = 8</code>.</p>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li>For index 0, the sub-cart is <code>[2]</code>. Sum is 2, which is <code><= 8</code>. No items need to be removed. Removals: 0.</li>\r\n<li>For index 1, the sub-cart is <code>[2, 3]</code>. Sum is <code>2 + 3 = 5</code>, which is <code><= 8</code>. No items need to be removed. Removals: 0.</li>\r\n<li>For index 2, the sub-cart is <code>[2, 3, 7]</code>. Sum is <code>2 + 3 + 7 = 12</code>, which is <code>> 8</code>. The item at index 2 (value 7) cannot be removed. To make the sum <code><= 8</code>, we must remove other items. Removing 2 and 3 results in a sum of 7 (<code><= 8</code>). This requires removing 2 items. Removals: 2.</li>\r\n</ul>\r\n<p>Hence, the answer is <code>[0, 0, 2]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, cart_items = [1, 2, 3, 4], budget = 5\r\nOutput: [0, 0, 1, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li><strong>Index i = 0:</strong> Sub-cart <code>[1]</code>. Sum <code>1 <= 5</code>. Remove 0 items.</li>\r\n<li><strong>Index i = 1:</strong> Sub-cart <code>[1, 2]</code>. Sum <code>1 + 2 = 3 <= 5</code>. Remove 0 items.</li>\r\n<li><strong>Index i = 2:</strong> Sub-cart <code>[1, 2, 3]</code>. Sum <code>1 + 2 + 3 = 6 > 5</code>. Item <code>cart_items[2] = 3</code> cannot be removed. To get sum <code><= 5</code>, we need to remove 1 item (e.g., remove 1 or 2). If we remove 1, sum is <code>2 + 3 = 5</code>. If we remove 2, sum is <code>1 + 3 = 4</code>. Minimum removals: 1.</li>\r\n<li><strong>Index i = 3:</strong> Sub-cart <code>[1, 2, 3, 4]</code>. Sum <code>1 + 2 + 3 + 4 = 10 > 5</code>. Item <code>cart_items[3] = 4</code> cannot be removed. To get sum <code><= 5</code>, we need to remove 2 items (e.g., remove 1 and 2 to make sum <code>3 + 4 = 7</code>, remove 1 and 3 to make sum <code>2 + 4 = 6</code>, remove 1 and 4 to make sum <code>2 + 3 = 5</code>, remove 2 and 3 to make sum <code>1 + 4 = 5</code>). Minimum removals: 2.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 4, cart_items = [6, 1, 4, 5], budget = 6\r\nOutput: [0, 1, 1, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n<li><strong>Index i = 0:</strong> Sub-cart <code>[6]</code>. Sum <code>6 <= 6</code>. Remove 0 items.</li>\r\n<li><strong>Index i = 1:</strong> Sub-cart <code>[6, 1]</code>. Sum <code>6 + 1 = 7 > 6</code>. Item <code>cart_items[1] = 1</code> cannot be removed. To get sum <code><= 6</code>, we must remove 6. Sum becomes <code>1 <= 6</code>. Minimum removals: 1.</li>\r\n<li><strong>Index i = 2:</strong> Sub-cart <code>[6, 1, 4]</code>. Sum <code>6 + 1 + 4 = 11 > 6</code>. Item <code>cart_items[2] = 4</code> cannot be removed. To get sum <code><= 6</code>, we need to remove 1 item. If we remove 6, sum becomes <code>1 + 4 = 5 <= 6</code>. Minimum removals: 1.</li>\r\n<li><strong>Index i = 3:</strong> Sub-cart <code>[6, 1, 4, 5]</code>. Sum <code>6 + 1 + 4 + 5 = 16 > 6</code>. Item <code>cart_items[3] = 5</code> cannot be removed. To get sum <code><= 6</code>, we need to remove 2 items. If we remove 6 and 4, sum becomes <code>1 + 5 = 6 <= 6</code>. Minimum removals: 2.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n<li><code>1 <= cart_items[i] <= budget <= 10<sup>9</sup></code></li>\r\n<li><code>1 <= total <= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amaozn_27sep",
        "company_id": 535
    }
]