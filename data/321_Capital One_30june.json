[
    {
        "id": 997,
        "title": "Word from Skeletons",
        "problem_statement": "<h1>Word from Skeletons</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string <code>word</code> consisting of lowercase English letters, and a list of strings <code>skeletons</code> consisting of <code>-</code> characters and lowercase English letters. Every <code>skeleton</code> will always be the same length as <code>word</code>.</p>\r\n<p>Your task is to return a list of skeletons that can form the given <code>word</code>. A skeleton can form a word if all <code>-</code> characters can be replaced with other characters taken from the same skeleton to make the string equal to the <code>word</code>. If no strings within <code>skeletons</code> can form the given <code>word</code> by doing this, return an empty list. The matching skeletons should be returned in the same order they appear in <code>skeletons</code> and the list of skeletons may not all be unique.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(skeletons.length x word.length^2)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: word = \"hello\", skeletons = [\"he-lo\", \"he--o\", \"-ell-\", \"hello\"]\r\nOutput: [\"he-lo\", \"hello\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>\"he-lo\"</code> IS a skeleton of <code>\"hello\"</code>. There is one <code>-</code> character, which should be an <code>l</code>. There is an <code>l</code> in the skeleton in the fourth position.</li>\r\n    <li><code>\"he--o\"</code> is NOT a skeleton of <code>\"hello\"</code>. There are two <code>-</code> characters, which should both be <code>l</code>, but there are no <code>l</code> characters in the skeleton.</li>\r\n    <li><code>\"-ell-\"</code> is NOT a skeleton of <code>\"hello\"</code>. There are two <code>-</code> characters, which should be <code>h</code> and <code>o</code>, but there are no other <code>h</code> or <code>o</code> characters in the skeleton.</li>\r\n    <li><code>\"hello\"</code> is a skeleton of <code>\"hello\"</code> as they already match.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Input:</strong> <code>string word</code>\r\n        <ul>\r\n            <li>A word string consisting of English lowercase letters.</li>\r\n            <li><code>0 &lt; word.length &lt;= 100</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> <code>array.string skeletons</code>\r\n        <ul>\r\n            <li>An array of strings consisting of <code>-</code> characters and lowercase English letters.</li>\r\n            <li><code>1 &lt;= skeletons.length &lt;= 100</code>.</li>\r\n            <li><code>skeletons[i].length = word.length</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>array.string</code>\r\n        <ul>\r\n            <li>An array of strings from <code>skeletons</code> that can form the given <code>word</code> by substituting <code>-</code> characters with other characters in the same <code>skeleton</code> string. If no <code>skeletons</code> string match the specified condition, return an empty list.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Execution time limit:</strong> 4 seconds (py3)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_30june",
        "company_id": 321
    },
    {
        "id": 998,
        "title": "Draw Figures on Grid",
        "problem_statement": "<h1>Draw Figures on Grid</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You have a sheet of <code>n x m</code> grid paper and you'd like to draw a cool design on it. You've decided on a block motif similar to tetris pieces. Specifically, your picture will include the following five types of figures:</p>\r\n<p>The shapes are:</p>\r\n<ul>\r\n    <li><strong>Figure A:</strong> A 1x1 square block, represented as:\r\n<pre><code class='language-text'>#</code></pre>\r\n    </li>\r\n    <li><strong>Figure B:</strong> A 1x3 horizontal rectangular block, represented as:\r\n<pre><code class='language-text'># # #</code></pre>\r\n    </li>\r\n    <li><strong>Figure C:</strong> A 2x2 square block, represented as:\r\n<pre><code class='language-text'># #\r\n# #</code></pre>\r\n    </li>\r\n    <li><strong>Figure D:</strong> An L-shaped block (3x2), represented as:\r\n<pre><code class='language-text'>. #\r\n# #\r\n# .</code></pre>\r\n    </li>\r\n    <li><strong>Figure E:</strong> A T-shaped block (2x3), represented as:\r\n<pre><code class='language-text'># # #\r\n. # .</code></pre>\r\n    </li>\r\n</ul>\r\n<p>The array <code>figures</code> contains a list of letters representing the types of figures you'd like to include in your design. Your task is to create a matrix of integers representing the grid paper, and draw the figures on it according to the following rules:</p>\r\n<ul>\r\n    <li>Start with a matrix of all 0s, and use the <strong>1-based index</strong> of each figure to represent it on the grid. For example, if <code>figures[0] = 'E'</code> then the shape added to the grid will be marked with <code>1</code>s. If <code>figures[1] = 'D'</code>, its blocks will be marked with <code>2</code>s, and so on.</li>\r\n    <li>Place the figures on the grid in the order they appear in <code>figures</code>. The figures must not overlap any other figures that have already been placed, and they may not be rotated.</li>\r\n    <li>Of all the available locations, choose the one with the lowest row index.</li>\r\n    <li>If there are multiple possible locations with the lowest row index, choose the one among them with the lowest column index.</li>\r\n    <li>It's guaranteed that all figures will fit on the grid.</li>\r\n</ul>\r\n<p>Return a matrix of integers representing the grid paper after all the figures have been drawn.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(n * m * figures.length)</code> will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, m = 4, figures = ['D', 'B', 'A', 'C']\r\nOutput: [[1, 1, 2, 2],\r\n         [1, 1, 3, 0],\r\n         [1, 4, 4, 0],\r\n         [0, 4, 4, 0]]</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, m = 5, figures = ['A', 'D', 'E']\r\nOutput: [[1, 2, 0, 0, 0],\r\n         [0, 2, 2, 3, 0],\r\n         [0, 2, 3, 3, 3]]</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_30june",
        "company_id": 321
    },
    {
        "id": 999,
        "title": "Fruit Orchard Duplicate Pairs",
        "problem_statement": "<h1>Fruit Orchard Duplicate Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're an inspector at a large fruit orchard. After harvesting, the fruits are laid out in a long conveyor belt. Your job is to identify sections of the conveyor belt that have a significant number of duplicate fruits. Specifically, you need to count the number of contiguous sections of the belt where you can form at least k pairs of identical fruits based on their position on the belt. Each fruit at a specific position can be part of at most one pair when counting towards the k pairs.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: fruits = [0, 1, 0, 1, 0], k = 2\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 contiguous sections where you can find at least k = 2 pairs of identical fruits:</p>\r\n<ul>\r\n    <li><code>fruits[0..3] = [0, 1, 0, 1]</code>: One pair of fruit type 0 (at positions 0 and 2) and one pair of fruit type 1 (at positions 1 and 3).</li>\r\n    <li><code>fruits[1..4] = [1, 0, 1, 0]</code>: One pair of fruit type 1 (at positions 0 and 2 within this section) and one pair of fruit type 0 (at positions 1 and 3 within this section).</li>\r\n    <li><code>fruits[0..4] = [0, 1, 0, 1, 0]</code>: We can form one pair of fruit type 0 (e.g., at indices 0 and 2) and one pair of fruit type 1 (at indices 1 and 3). Note that it is not possible to form both a pair with the 0 at index 0 and the 0 at index 2, and a pair with the 0 at index 2 and the 0 at index 4, at the same time, since each fruit can belong to only one pair.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: fruits = [2, 2, 2, 2, 2, 2], k = 1\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> There is only 1 applicable contiguous section <code>fruits[0..5] = [2, 2, 2, 2, 2, 2]</code>, where you can form at least three pairs of fruit type 2 (e.g., the fruit at position 0 with position 1, position 2 with position 3, and position 4 with position 5).</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: fruits = [1, 3, 3, 1], k = 1\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> There are 4 contiguous sections where you can find at least k = 1 pair of identical fruits:</p>\r\n<ul>\r\n    <li><code>fruits[0..2] = [1, 3, 3]</code> (a pair of fruit type 3 at positions 1 and 2)</li>\r\n    <li><code>fruits[0..3] = [1, 3, 3, 1]</code> (a pair of fruit type 3 at positions 1 and 2)</li>\r\n    <li><code>fruits[1..2] = [3, 3]</code> (a pair of fruit type 3 at positions 0 and 1 within this section)</li>\r\n    <li><code>fruits[1..3] = [3, 3, 1]</code> (a pair of fruit type 3 at positions 0 and 1 within this section)</li>\r\n</ul>\r\n\r\n<h2>Input/Output</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.integer fruits</code>\r\n        <p>An array of integers representing the sequence of fruits on the conveyor belt.</p>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; fruits.length &le; 2000</code></li>\r\n    <li><code>0 &le; fruits[i] &le; 10^9</code></li>\r\n    <li><strong>Input:</strong> <code>integer k</code>\r\n        <p>A positive integer representing the minimum number of pairs to count.</p>\r\n    </li>\r\n    <li><code>1 &le; k &le; fruits.length / 2</code></li>\r\n    <li><strong>Output:</strong> <code>integer</code>\r\n        <p>Return the number of contiguous sections which contain at least k pairs of identical fruits.</p>\r\n    </li>\r\n</ul>\r\n\r\n<p><strong>C++ Syntax Tips:</strong></p>\r\n<pre><code class='language-cpp'>// Prints help message to the console\r\n// Returns a string\r\nstd::string helloWorld(std::string name) {\r\n    std::cout &lt;&lt; \"This prints to the console when you run tests\" &lt;&lt; std::endl;\r\n    return \"Hello, \" + name;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_30june",
        "company_id": 321
    },
    {
        "id": 1000,
        "title": "Newspaper Page Formatting",
        "problem_statement": "<h1>Newspaper Page Formatting</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are formatting the text on a newspaper page. You have to align the text on the page properly. The text is provided to you in the following format:</p>\r\n<ul>\r\n    <li><strong><code>paragraphs</code></strong> is an array of paragraphs, where each paragraph is represented as an array containing portions of text.</li>\r\n    <li><strong><code>width</code></strong> represents the maximum number of characters each line of the newspaper page can include.</li>\r\n</ul>\r\n<p>Your task is to produce a newspaper page according to the following specifications:</p>\r\n<ul>\r\n    <li>Start a new line for each paragraph, <code>paragraphs[i]</code>.</li>\r\n    <li>Add all paragraph words <code>paragraphs[i][j]</code> in order. When words are together on a line, they should be separated by 1 space.\r\n        <ul>\r\n            <li>Every paragraph word <code>paragraphs[i][j]</code> is guaranteed to contain only lowercase and uppercase English letters.</li>\r\n        </ul>\r\n    </li>\r\n    <li>You can't break up words. So, if adding the next word would cause you to exceed <code>width</code>, start a new line.</li>\r\n    <li>If a line has less than <code>width</code> characters, align the text to the center by adding spaces around it:\r\n        <ul>\r\n            <li>If the amount of leftover space on the line is even, add an equal number of spaces before and after the text.</li>\r\n            <li>If the amount of leftover space on the line is odd, add an equal number of spaces before and after the text. You'll have an extra space left over; add it after the text.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Include a rectangular border of asterisks (<code>*</code> characters) around the top, bottom, left, and right edges of the resulting newspaper page. These characters don't count towards the <code>width</code> but are added for aesthetic reasons.</li>\r\n</ul>\r\n<p>Return the resulting newspaper page as an array of strings. It is guaranteed that it is possible to format the paragraphs as described.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(paragraphs.length * paragraphs[0].length * width) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: paragraphs = [[\"hello\", \"world\"], [\"How\", \"areYou\", \"doing\"], [\"Please\", \"look\", \"and\", \"align\", \"to\", \"the\", \"center\"]], width = 16\r\nOutput:\r\n******************\r\n*      hello world     *\r\n*   How areYou doing   *\r\n* Please look and      *\r\n*     align to the     *\r\n*        center        *\r\n******************</code></pre>\r\n<p><strong>Explanation:</strong> Let's consider all paragraphs:</p>\r\n<ul>\r\n    <li><code>paragraphs[0] = [\"hello\", \"world\"]</code>\r\n        <ul>\r\n            <li>Both words fit on one line with a combined length of 11, including the separating space.</li>\r\n            <li>Since <code>width = 16</code>, there are <code>16 - 11 = 5</code> leftover spaces on the line. We'll need to align the text to center.</li>\r\n            <li>Because 5 is odd; the line should have 2 leading spaces and 3 trailing spaces.</li>\r\n            <li>The line: \"  hello world   \"</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>paragraphs[1] = [\"How\", \"areYou\", \"doing\"]</code>\r\n        <ul>\r\n            <li>All three words fit on one line with a length of 16, including separating spaces.</li>\r\n            <li>There are no leftover spaces, so the result is \"How areYou doing\".</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>paragraphs[2] = [\"Please\", \"look\", \"and\", \"align\", \"to\", \"the\", \"center\"]</code>\r\n        <ul>\r\n            <li>The words \"Please\", \"look\", \"and\" are too long to combine (the result would have a length of 21 > 16), so we'll start a new line with \"align\".</li>\r\n            <li>Furthermore, the words \"align\", \"to\", \"the\", and \"center\" would have a combined length of 19 > 16 which is also too long, so \"center\" will also be on a new line.</li>\r\n            <li>Per line, the amount of leftover space is 1, 4, and 10. The result of this paragraph is therefore:\r\n                <pre><code class='language-text'>\"Please look and \"\r\n\"    align to the    \"\r\n\"        center        \"</code></pre>\r\n            </li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>To create the border, we'll add an asterisk (<code>*</code> character) to the beginning and end of each line, and we'll also add a string of <code>width + 2</code> asterisks before the first paragraph and after the last.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= paragraphs.length <= 20</code></li>\r\n    <li><code>1 <= paragraphs[i].length <= 10</code></li>\r\n    <li><code>1 <= paragraphs[i][j].length <= width</code></li>\r\n    <li><code>5 <= width <= 50</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_30june",
        "company_id": 321
    },
    {
        "id": 1001,
        "title": "Time Machine Travel Cost",
        "problem_statement": "<h1>Time Machine Travel Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine that you have a time machine. You are given an array <code>years</code>. You start in the year <code>years[0]</code>. First, you want to travel to <code>years[1]</code>, then to <code>years[2]</code>, and so on. Your task is to calculate the total time required to visit all the years from the list in order.</p>\r\n\r\n<p>The time required to travel from year A to year B is calculated as follows:</p>\r\n<ul>\r\n    <li>0 hours if A = B</li>\r\n    <li>1 hour if A &lt; B (going forwards in time)</li>\r\n    <li>2 hours if A &gt; B (going backwards in time)</li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(years.length<sup>2</sup>) will fit within the execution time limit.</p>\r\n\r\n<p>The input <code>years</code> is an array of integers representing the list of years to travel through.</p>\r\n<p>The output is an integer representing the total number of hours required to visit all the given years in order.</p>\r\n<p>Execution time limit: 0.5 seconds (C++)<br>Memory limit: 1 GB</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: years = [2000, 1990, 2005, 2050]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>First, you go from 2000 to 1990, which requires 2 hours (2000 &gt; 1990).</li>\r\n    <li>Then you go from 1990 to 2005, which requires 1 hour (1990 &lt; 2005).</li>\r\n    <li>Then you go from 2005 to 2050, which requires 1 hour (2005 &lt; 2050).</li>\r\n</ul>\r\nIn total, you need 2 + 1 + 1 = 4 hours.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: years = [2000, 2021, 2005]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>First, you go from 2000 to 2021, which requires 1 hour (2000 &lt; 2021).</li>\r\n    <li>Then you go from 2021 to 2005, which requires 2 hours (2021 &gt; 2005).</li>\r\n</ul>\r\nIn total, you need 1 + 2 = 3 hours.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: years = [2021, 2021, 2005]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>First, you go from 2021 to 2021, which requires 0 hours as the trip takes place within the same year (2021 = 2021).</li>\r\n    <li>Then you go from 2021 to 2005, which requires 2 hours (2021 &gt; 2005).</li>\r\n</ul>\r\nIn total, you need 0 + 2 = 2 hours.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; years.length &le; 100</code></li>\r\n    <li><code>1 &le; years[i] &le; 10<sup>4</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_30june",
        "company_id": 321
    }
]