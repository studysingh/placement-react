[
    {
        "id": 1774,
        "title": "Two Positive Integers Sum to N",
        "problem_statement": "<h1>Two Positive Integers Sum to N</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an integer N, you want to find two positive integers A and B such that:</p>\r\n<ul>\r\n    <li>A + B = N</li>\r\n    <li>neither A nor B contains any 0 in its decimal representation.</li>\r\n</ul>\r\n<p>Write a function:</p>\r\n<pre><code class='language-javascript'>class Solution { public int[] solution(int N); }</code></pre>\r\n<p>that, given an integer N, returns a two-element array containing A and B, which fulfills the criteria described above.</p>\r\n<p>In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N = 12\r\nOutput: [7, 5]</code></pre>\r\n<p><strong>Explanation:</strong> Some other valid results could be [5, 7], [6, 6], [4, 8], [8, 4]. It may not return [10, 2], as the first number in this pair contains a zero.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N = 104\r\nOutput: [31, 73]</code></pre>\r\n<p><strong>Explanation:</strong> Some other valid results could be [62, 42] or [42, 62]. It may not return [50, 54] or [104, 0] though.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: N = 200\r\nOutput: [134, 66]</code></pre>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: N = 3\r\nOutput: [2, 1]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N is an integer within the range [2..500,000].</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> solution(int N) {\n        // Core logic to be implemented here.\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    Solution sol;\n    std::vector<int> result = sol.solution(N);\n\n    if (result.size() == 2) {\n        std::cout << result[0] << \" \" << result[1] << \"\\n\";\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Citi_12oct",
        "company_id": 626
    },
    {
        "id": 1775,
        "title": "Longest Switching Slice",
        "problem_statement": "<h1>Longest Switching Slice</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>We call an array <em>switching</em> if all numbers in even positions are equal and all numbers in odd positions are equal.</p>\r\n<p>For example: <code>[3, -7, 3, -7]</code> and <code>[4, 4, 4, 4]</code> are switching, but <code>[5, 5, 4, 5]</code> and <code>[-3, 2, 3]</code> are not switching.</p>\r\n<p>What is the length of the longest switching slice (continuous fragment) in a given array A?</p>\r\n<p>Write a function:</p>\r\n<pre><code class='language-javascript'>def solution(A):</code></pre>\r\n<p>that, given an array A consisting of N integers, returns the length of the longest switching slice in A.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: A = [3, 2, 3, 2]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The whole array is switching. (Note: The length of the array is 4, but the problem states the function should return 5).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: A = [7, 4, -2, 4, -2]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The longest switching slice is <code>[4, -2, 4, -2]</code>, which has a length of 4.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: A = [7, -5, -5, -5, 7, -1, 7]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There are two switching slices of equal length: <code>[-5, -5, -5]</code> and <code>[7, -1, 7]</code>. Both have a length of 3.</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'>Input: A = [4]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> A single-element slice is also a switching slice.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>Write an efficient algorithm for the following assumptions:</p>\r\n<ul>\r\n    <li>N is an integer within the range <code>[1..100,000]</code>.</li>\r\n    <li>Each element of array A is an integer within the range <code>[-1,000,000,000..1,000,000,000]</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int longestSwitchingSlice(const std::vector<int>& A) {\n        // Core logic to find the length of the longest switching slice goes here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    std::cout.tie(NULL);\n\n    // The problem description implies the input is a single array 'A'.\n    // In a typical competitive programming setup, we would first read the size of the array.\n    // Assuming the first line of input is the number of elements, N.\n    int n;\n    std::cin >> n;\n    std::vector<int> A(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> A[i];\n    }\n\n    Solution solution;\n    int result = solution.longestSwitchingSlice(A);\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Citi_12oct",
        "company_id": 626
    }
]