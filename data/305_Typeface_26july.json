[
    {
        "id": 959,
        "title": "Minimum Travel Cost",
        "problem_statement": "<h1>Minimum Travel Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The country of Hackerland is depicted as a graph with g_nodes cities, numbered from 1 to g_nodes. These cities are interconnected by g_edges bidirectional roads, where the i<sup>th</sup> road connects city g_from[i] to city g_to[i], and the fuel required to travel this road is g_weight[i] units. Vehicles in Hackerland have unlimited fuel capacity, and the cost of one unit of fuel in the k<sup>th</sup> city is given by arr[k]. Any amount of fuel can be purchased in any city.</p>\r\n<p>Given two cities A and B (1 &le; A, B &le; g_nodes), determine the minimum cost to travel from city A to city B. If travel between these cities is impossible, return -1.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ng_nodes = 5\r\ng_from = [4, 5, 4, 1, 3, 4]\r\ng_to = [1, 3, 5, 5, 1, 2]\r\ng_weight = [1, 1, 8, 1, 3, 9]\r\narr = [9, 1, 3, 2, 3]\r\nA = 3\r\nB = 2\r\nOutput: 27</code></pre>\r\n<p><strong>Explanation:</strong> Nodes are labeled &lt;city number&gt;:&lt;fuel cost&gt;.</p>\r\n<p>One optimal path is 3 &rarr; 5 &rarr; 1 &rarr; 4 &rarr; 2. Buy 3 units of fuel at city 5 with a cost of 3 * 3 = 9 and 9 units at city 4 for 9 * 2 = 18. The total cost is 9 + 18 = 27.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; A, B &le; g_nodes</code></li>\r\n    <li>Cities are numbered from 1 to <code>g_nodes</code>.</li>\r\n    <li><code>g_from</code>, <code>g_to</code>, and <code>g_weight</code> arrays will have the same length, representing <code>g_edges</code> bidirectional roads.</li>\r\n    <li>The <code>arr</code> array will have <code>g_nodes</code> elements, where <code>arr[k]</code> represents the cost of unit fuel in city <code>k+1</code> (assuming 0-indexed array for 1-indexed cities).</li>\r\n    <li>The values in <code>g_from</code>, <code>g_to</code> will be between 1 and <code>g_nodes</code>.</li>\r\n    <li>The values in <code>g_weight</code> and <code>arr</code> will be positive integers.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Typeface_26july",
        "company_id": 305
    },
    {
        "id": 960,
        "title": "Minimum Complexity Level",
        "problem_statement": "<h1>Minimum Complexity Level</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alex is attending a software engineering conference in which various lectures are presented. The subject matter of each lecture has a certain complexity. Alex has planned the order of lectures they would like to attend, but now they need to schedule these into several days. Their goal is to attend at least one lecture every day and to plan the lectures in a way that minimizes the overall complexity of the conference. (Each day's complexity is defined as the complexity of the most complex lecture attended that day.) Given the complexity levels of the lectures, as well as how many days the conference is being held, what is the overall minimum complexity that can be achieved with optimal planning?</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, complexity = [30,10,40,20,50], days = 2\r\nOutput: 80</code></pre>\r\n<p><strong>Explanation:</strong> Alex can attend the first and second lectures on the first day (with complexities 30 and 10) and the rest on the second day (with complexities 40, 20, and 50). The overall complexity would be calculated as max(30, 10) + max(40, 20, 50) = 30 + 50 = 80.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5, complexity = [1,5,3,2,4], days = 2\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The best option is to attend the first lecture on the first day and the rest on the second day. The complexity of the first day would be 1, since that's the only lecture, and the complexity of the second day would be 5, because that's the complexity level of the most complex lecture that day. Therefore, the answer is 1 + 5 = 6.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findMinComplexity</code> in the editor below.</p>\r\n<p><code>findMinComplexity</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int complexity[]</code>: an array of integers denoting the order and complexity of the lectures</li>\r\n    <li><code>int days</code>: the number of days the conference is being held</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>int</code>: the minimum overall complexity level that can be achieved with optimal planning.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 300</code></li>\r\n    <li><code>1 <= days <= n</code></li>\r\n    <li><code>1 <= complexity[i] <= 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Typeface_26july",
        "company_id": 305
    }
]