[
    {
        "id": 1580,
        "title": "Earliest Service Times",
        "problem_statement": "```html\r\n<h1>Earliest Service Times</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber is testing a city ride network simulation, where intersections are represented as nodes in a graph, and the roads connecting them are represented as edges.</p>\r\n<p>The city has <code>n</code> intersections, labeled 1 to <code>n</code>, and <code>m</code> bidirectional roads.</p>\r\n<p>The i-th road connects <code>road_end1[i]</code> and <code>road_end2[i]</code> and takes <code>traveling_time[i]</code> minutes to drive across.</p>\r\n<p>However, due to traffic regulations, each intersection <code>i</code> closes permanently at time <code>close_time[i]</code> and cannot be entered afterwards.</p>\r\n<p>If a driver arrives at an intersection at the exact time it closes, it is considered unreachable.</p>\r\n<p>A ride starts at intersection 1 at time 0. Your task is to determine the earliest time each intersection can be reached. If an intersection is unreachable, return -1.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: \r\nn = 4, m = 4\r\nclose_time = [1, 2, 7, 9]\r\nroad_end1 = [1, 1, 2, 3]\r\nroad_end2 = [2, 3, 3, 4]\r\ntraveling_time = [2, 5, 1, 3]\r\n\r\nOutput: [0, -1, 5, 8]\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The ride starts at vertex 1 at time 0. Vertex 1 closes at time 1. The arrival time for vertex 1 is 0.</li>\r\n    <li>To reach vertex 2 from vertex 1, it takes 2 minutes. The arrival time would be 0 + 2 = 2. However, vertex 2 closes at time 2. Since arrival time must be strictly less than closing time, vertex 2 is unreachable from this path. It is unreachable overall.</li>\r\n    <li>To reach vertex 3 from vertex 1, it takes 5 minutes. The arrival time is 0 + 5 = 5. This is before vertex 3 closes at time 7, so this is a valid path.</li>\r\n    <li>To reach vertex 4, we must first go to vertex 3 (arriving at time 5). The travel from vertex 3 to vertex 4 takes 3 minutes. The arrival time at vertex 4 is 5 + 3 = 8. This is before vertex 4 closes at time 9.</li>\r\n</ul>\r\n<p>The resulting array of earliest arrival times is [0, -1, 5, 8].</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nclose_time = [3, 2, 5, 7]\r\nm = 4\r\nroad_end1 = [1, 1, 2, 3]\r\nroad_end2 = [2, 3, 4, 4]\r\ntraveling_time = [3, 4, 1, 2]\r\n\r\nOutput: [0, -1, 4, 6]\r\n</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n, m &le; 300000</code></li>\r\n    <li><code>1 &le; close_time[i] &le; 3 * 10<sup>14</sup></code></li>\r\n    <li><code>1 &le; road_end1[i], road_end2[i] &le; n</code></li>\r\n    <li><code>road_end1[i] != road_end2[i]</code></li>\r\n    <li><code>1 &le; traveling_time[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1581,
        "title": "Graph Construction (Network of Hubs)",
        "problem_statement": "```html\r\n<h1>Graph Construction (Network of Hubs)</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber's city infrastructure team is analyzing a network of service hubs across a metropolitan area. Each hub is connected in a tree-like structure (no cycles, all hubs connected).</p>\r\n<p>Each hub is assigned a unique integer value that represents its operational efficiency score.</p>\r\n<p>Uber's operations team needs to answer multiple queries about sub-networks of hubs. Specifically, they want to count how many hubs within a given sub-network (including the queried hub itself and all hubs beneath it in the hierarchy) have a prime efficiency score.</p>\r\n<ul>\r\n    <li>An efficiency score of 1 is not considered prime.</li>\r\n</ul>\r\n<p><strong>Graph Construction (Network of Hubs)</strong></p>\r\n<ul>\r\n    <li>There are n hubs, numbered 1 through n.</li>\r\n    <li>The hubs are connected with m = n - 1 undirected links, forming a tree.</li>\r\n    <li>Hub 1 is always considered the main root hub of the network.</li>\r\n</ul>\r\n\r\n<p><strong>Function Description</strong></p>\r\n<p>Complete the function <code>efficiencyScores</code> in the editor. The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of nodes in the tree, labeled 1 to n</li>\r\n    <li><code>int first[m]</code>: one node of each pair in an edge</li>\r\n    <li><code>int second[m]</code>: the other node of each pair in an edge</li>\r\n    <li><code>int efficiency_scores[n]</code>: the data value for each node</li>\r\n    <li><code>int hub_queries[q]</code>: the node numbers to query</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int[]</code>: the results of each query, aligned by index.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>The following example is based on the tree structure and values shown in the problem description images.</p>\r\n<div style=\"text-align: center;\">\r\n  <img src=\"https://i.imgur.com/uR438yB.png\" alt=\"Sample Tree Structure\" style=\"max-width: 400px;\"/>\r\n  <p><em>Sample Tree</em></p>\r\n</div>\r\n<pre><code class='language-text'>Input:\r\nn = 10\r\nfirst = [1, 1, 2, 2, 5, 6, 6, 8, 8]\r\nsecond = [2, 8, 4, 5, 6, 3, 7, 9, 10]\r\nefficiency_scores = [17, 29, 3, 20, 11, 8, 3, 23, 5, 15]\r\nhub_queries = [1, 8, 9, 6, 4, 3]\r\n\r\nOutput: [7, 5, 2, 1, 0, 1]\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>The problem asks to count the number of nodes with prime efficiency scores within the sub-tree of each queried hub. The efficiency scores for nodes 1-10 correspond to the <code>efficiency_scores</code> array.</p>\r\n<p>The nodes with prime scores are: 1 (score 17), 2 (score 29), 3 (score 3), 5 (score 11), 7 (score 3), 8 (score 23), and 9 (score 5).</p>\r\n<p>For the first query on hub 1, its sub-tree contains all nodes. There are 7 nodes with prime scores in this sub-tree. Thus, the first output value is 7.</p>\r\n<p>The rest of the output array contains the results for the remaining queries on hubs 8, 9, 6, 4, and 3 respectively.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>m = n - 1</code></li>\r\n    <li><code>1 &le; first[i], second[i] &le; n</code></li>\r\n    <li><code>1 &le; efficiency_scores[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>first[i] &ne; second[i]</code></li>\r\n    <li><code>1 &le; q &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; hub_queries[i] &le; n</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1582,
        "title": "Schedule Ride Requests",
        "problem_statement": "```html\r\n<h1>Schedule Ride Requests</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Uber, each driver maintains a queue of ride requests. Requests arrive one by one, and each new request may need to be inserted into a specific position in the queue, based on factors such as rider priority, promotions, or dispatch logic.</p>\r\n<p>When a new request is added to the queue at a given position:</p>\r\n<ul>\r\n  <li>The existing requests at that position and beyond are shifted one spot to the right to make space.</li>\r\n  <li>The queue always grows until all requests are inserted.</li>\r\n</ul>\r\n<p>Your task is to determine the final sequence of ride requests in the driver's queue after all insertions are completed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>n = 5\r\nindex = [0, 1, 2, 1, 2]\r\nrequest = [0, 1, 2, 3, 4]\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Step-by-step insertion process:</p>\r\n<ol>\r\n  <li>Insert request 0 at position 0: [0]</li>\r\n  <li>Insert request 1 at position 1: [0, 1]</li>\r\n  <li>Insert request 2 at position 2: [0, 1, 2]</li>\r\n  <li>Insert request 3 at position 1: [0, 3, 1, 2]</li>\r\n  <li>Insert request 4 at position 2: [0, 3, 4, 1, 2]</li>\r\n</ol>\r\n<p>The final sequence is [0, 3, 4, 1, 2].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong> index = [0, 1, 1], request = [0, 1, 2]\r\n<strong>Output:</strong> [0, 2, 1]\r\n</code></pre>\r\n<p><strong>Explanation:</strong> The output array goes through the following steps: [0] &rarr; [0, 1] &rarr; [0, 2, 1].</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong> index = [0, 0], request = [0, 1]\r\n<strong>Output:</strong> [1, 0]\r\n</code></pre>\r\n<p><strong>Explanation:</strong> The output array goes through the following steps: [0] &rarr; [1, 0].</p>\r\n\r\n<h3>Example 4:</h3>\r\n<pre><code class='language-text'><strong>Input:</strong> index = [0, 1, 0], request = [0, 1, 2]\r\n<strong>Output:</strong> [2, 0, 1]\r\n</code></pre>\r\n<p><strong>Explanation:</strong> The output array goes through the following steps: [0] &rarr; [0, 1] &rarr; [2, 0, 1].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n  <li><code>1 &le; n &le; 2 &times; 10<sup>5</sup></code></li>\r\n  <li><code>0 &le; index[i], request[i] &le; n</code> where <code>0 &le; i &lt; n</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1583,
        "title": "1. Binary Autocomplete",
        "problem_statement": "```html\r\n<h1>1. Binary Autocomplete</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The programming interface for a legacy motor controller accepts commands as binary strings of variable length. The console has a very primitive autocomplete/autocorrect feature: as a new command is entered one character at a time, it will display the previously entered command that shares the <strong>longest common prefix</strong>. If multiple commands are tied, it displays the <strong>most recent one</strong>. If there is no previous command that shares a common prefix, it will display the <strong>most recent</strong> command.</p>\r\n<p>Given a sequence of commands entered into the console, for each command, determine the index of the command last displayed by the autocomplete as it was entered. Return 0 if there is none.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: command = [\"000\", \"1110\", \"01\", \"001\", \"110\", \"11\"]\r\nOutput: [0, 1, 1, 1, 2, 5]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>'000' - 0 (No command has previously been entered)</li>\r\n    <li>'1110' - 1 (There is no previous command that shares a common prefix, so the last command is shown)</li>\r\n    <li>'01' - 1 ('000' shares the prefix '0' with the first command)</li>\r\n    <li>'001' - 1 ('000' shares the prefix '00' with the first command)</li>\r\n    <li>'110' - 2 ('1110' shares the prefix '11' with the second command)</li>\r\n    <li>'11' - 5 ('11' shares the prefix '11' with the fifth command most recently)</li>\r\n</ol>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: command = [\"100110\", \"1001\", \"1001111\"]\r\nOutput: [0, 1, 1]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>'100110' - 0 (No command has previously been entered)</li>\r\n    <li>'1001' - 1 (The first command shares the prefix '1001')</li>\r\n    <li>'1001111' - 1 (The first command shares the prefix '10011')</li>\r\n</ol>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: command = [\"1\", \"10\", \"11010\"]\r\nOutput: [0, 1, 2]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>'1' - 0 (No command has previously been entered)</li>\r\n    <li>'10' - 1 (The most recent command shares the prefix '1')</li>\r\n    <li>'11010' - 2 (The most recent command shares the prefix '1')</li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &le; n &le; 10<sup>5</sup></li>\r\n    <li>1 &le; |command[i]| &le; 30 where (0 &le; i &lt; n)</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1584,
        "title": "Biohazard",
        "problem_statement": "```html\r\n<h1>Biohazard</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A biological researcher is studying bacteria interactions where certain bacteria are poisonous to others. The samples are arranged consecutively in a row numbered from 1 to n. Given lists detailing which bacteria are poisonous to others, your task is to determine the number of intervals within the row that contain only samples capable of coexisting.</p>\r\n<p>A pair of bacteria, <code>poisonous[i]</code> and <code>allergic[i]</code>, cannot coexist in the same interval. This means any interval containing both <code>poisonous[i]</code> and <code>allergic[i]</code> is invalid.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, allergic = [2, 1, 3], poisonous = [3, 3, 1]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe poisonous relationships are:</p>\r\n<ul>\r\n    <li>Bacteria 3 is poisonous to Bacteria 2.</li>\r\n    <li>Bacteria 3 is poisonous to Bacteria 1.</li>\r\n    <li>Bacteria 1 is poisonous to Bacteria 3.</li>\r\n</ul>\r\n<p>The bacteria are arranged in a row: [1, 2, 3].</p>\r\n<p>The pairs that cannot coexist are (3, 2) and (3, 1).\r\nThe valid intervals (subarrays of [1, 2, 3]) are those that do not contain any of these pairs. The valid intervals are [1], [2], [3], and [1, 2]. The intervals [1, 3], [2, 3], and [1, 2, 3] are invalid because they contain a poisonous pair. There are 4 valid intervals.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, allergic = [1, 2], poisonous = [3, 4]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe poisonous pairs are (3, 1) and (4, 2). The bacteria are arranged as [1, 2, 3, 4].\r\nThe valid intervals are [1], [2], [3], [4], [1, 2], [2, 3], and [3, 4]. Any interval containing {1, 3} or {2, 4} is invalid. There are 7 valid intervals.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 5, allergic = [1, 2], poisonous = [3, 5]\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong>\r\nBacterium 3 is poisonous to bacterium 1, and 5 is poisonous to 2. The intervals that can coexist are [1], [1, 2], [2], [2, 3], [2, 3, 4], [3], [3, 4], [3, 4, 5], [4], [4, 5], and [5]. There are a total of 11 valid intervals.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; m &le; 10<sup>5</sup></code>, where <code>m</code> is the number of poisonous pairs (i.e., the size of <code>allergic</code> and <code>poisonous</code> arrays).</li>\r\n    <li><code>1 &le; allergic[i], poisonous[i] &le; n</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1585,
        "title": "Minimum Total Travel Time",
        "problem_statement": "```html\r\n<h1>Minimum Total Travel Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Uber, drivers are often required to complete multiple pickups or drop-offs in a specific sequence before reaching their final destination.</p>\r\n<p>The city is represented as an undirected road network graph, where intersections are nodes and roads are weighted edges representing travel times.</p>\r\n<ul>\r\n    <li>The driver always starts at node 1 (their initial location).</li>\r\n    <li>The final destination (the last rider drop-off) is always node <code>r_nodes</code>.</li>\r\n    <li>The driver must visit two required stops in order:\r\n        <ol>\r\n            <li>First stop at node x (e.g., rider pickup).</li>\r\n            <li>Second stop at node y (e.g., intermediate rider drop-off).</li>\r\n        </ol>\r\n    </li>\r\n</ul>\r\n<p>You are given:</p>\r\n<ul>\r\n    <li><code>r_nodes</code>: the number of intersections in the city.</li>\r\n    <li><code>r_from[i]</code> and <code>r_to[i]</code>: the two intersections connected by the i-th road.</li>\r\n    <li><code>r_weight[i]</code>: the travel time along that road.</li>\r\n</ul>\r\n<p><strong>Task</strong></p>\r\n<p>Compute the minimum total travel time for the driver to go from:<br>\r\nStart (node 1) &rarr; Stop x &rarr; Stop y &rarr; Final Destination (node <code>r_nodes</code>)</p>\r\n<p>The driver may pass through intersections multiple times if necessary.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nr_nodes = 5\r\nr_from = [1, 2, 3, 4, 5, 3]\r\nr_to = [2, 3, 4, 5, 1, 5]\r\nr_weight = [9, 11, 6, 1, 4, 10]\r\nx = 2\r\ny = 3\r\n\r\nOutput: 27</code></pre>\r\n<p><strong>Explanation:</strong> The problem requires finding the sum of the shortest paths for three segments: 1 to x, x to y, and y to r_nodes.</p>\r\n<ul>\r\n    <li>The shortest path from node 1 to node x (2) has a cost of 9 (direct edge 1-2).</li>\r\n    <li>The shortest path from node x (2) to node y (3) has a cost of 11 (direct edge 2-3).</li>\r\n    <li>The shortest path from node y (3) to node r_nodes (5) is via node 4 (path 3-4-5), with a cost of 6 + 1 = 7.</li>\r\n</ul>\r\n<p>The total minimum travel time is 9 + 11 + 7 = 27.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nr_nodes = 4\r\nr_from = [1, 1, 2, 2, 3]\r\nr_to = [2, 4, 3, 4, 4]\r\nr_weight = [6, 9, 11, 10, 6]\r\nx = 2\r\ny = 3\r\n\r\nOutput: 23</code></pre>\r\n<p><strong>Explanation:</strong> For the given graph, the ride has to go from junction 1 to junction <code>r_nodes</code> (4), and the path should include junctions 2 and 3 in that order.\r\nThe optimal path is 1 &rarr; 2 &rarr; 3 &rarr; 4.</p>\r\n<ul>\r\n    <li>The shortest path from node 1 to node x (2) has a cost of 6.</li>\r\n    <li>The shortest path from node x (2) to node y (3) has a cost of 11.</li>\r\n    <li>The shortest path from node y (3) to node r_nodes (4) has a cost of 6.</li>\r\n</ul>\r\n<p>The total cost of this path is 6 + 11 + 6 = 23.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>4 &le; r_nodes &le; 10<sup>5</sup></code></li>\r\n    <li><code>4 &le; r_edges &le; min(10<sup>5</sup>, (r_nodes * (r_nodes - 1)) / 2)</code></li>\r\n    <li><code>1 &le; r_weight[i] &le; 10<sup>3</sup></code></li>\r\n    <li><code>2 &le; x &le; r_nodes - 1</code></li>\r\n    <li><code>2 &le; y &le; r_nodes - 1</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1586,
        "title": "Maximum Riders",
        "problem_statement": "```html\r\n<h1>Maximum Riders</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber operates a premium airport service that transports riders to and from the airport. The car can carry multiple riders at once. On each round trip, the driver starts from the Uber hub (0,0), drives to the airport (n-1, n-1), and then returns back to the hub, potentially picking up more riders along the way.</p>\r\n<p>The city map is represented as an n x n grid, where:</p>\r\n<ul>\r\n    <li><code>0</code>: an empty road cell (valid for travel).</li>\r\n    <li><code>1</code>: a road cell with a rider waiting to be picked up.</li>\r\n    <li><code>-1</code>: a blocked road (obstruction, not passable).</li>\r\n</ul>\r\n\r\n<p><strong>Movement Rules:</strong></p>\r\n<ul>\r\n    <li>The Uber driver always starts at the hub (0,0).</li>\r\n    <li>To reach the airport (n-1, n-1), the driver can only move right (→) or down (↓) along valid roads.</li>\r\n    <li>On the return trip back to the hub, the driver can only move left (←) or up (↑) along valid roads.</li>\r\n    <li>If the driver passes through a road cell with a rider (<code>1</code>), that rider is picked up immediately, and the cell becomes empty (<code>0</code>).</li>\r\n    <li>If there is no valid route between the hub and the airport, no riders can be collected.</li>\r\n</ul>\r\n<p>The goal is to calculate the maximum number of riders that can be picked up during the complete round trip.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: city = [[0, 1, -1], [1, 0, -1], [1, 1, 1]]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The driver can collect a maximum of 5 riders by taking the following path: (0, 0) → (0, 1) → (1, 1) → (2, 1) → (2, 2) → (2, 1) → (2, 0) → (1, 0) → (0, 0).</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: city = [[0, 1, 1], [1, 0, 1], [1, 1, 1]]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The driver can collect all 7 riders. One possible optimal path is shown below:</p>\r\n<pre><code>0 → 1 → 1\r\n↑   ↓   ↓\r\n1   0   1\r\n↑   ↑   ↓\r\n1 ← 1 ← 1</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: city = [[0, 1, 1], [1, 0, -1], [1, 1, -1]]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The cell at (2, 2) is blocked. Since the airport is at (n-1, n-1), there is no valid path to the airport, so no riders can be collected.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 100</code>, where <code>n</code> is the number of rows and columns in <code>city</code>.</li>\r\n    <li><code>city[i][j]</code> is <code>-1</code>, <code>0</code>, or <code>1</code>.</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1587,
        "title": "Minimize Maximum Distance to Hub",
        "problem_statement": "```html\r\n<h1>Minimize Maximum Distance to Hub</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber is planning to roll out driver hubs across a new city. The city is modeled as a grid, where each cell represents a neighborhood. A driver hub allows nearby drivers to recharge, rest, and get support.</p>\r\n<p>The objective is to place exactly <code>n</code> driver hubs such that the maximum distance any neighborhood has to its nearest hub is minimized. Movement across the grid is restricted to up, down, left, and right only (no diagonal shortcuts).</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>findMinDistance</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int w</code>: the width of the grid</li>\r\n    <li><code>int h</code>: the height of the grid</li>\r\n    <li><code>int n</code>: the number of driver hubs to place</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the maximum value among the shortest distances to the closest driver hub for each cell.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider a grid with:</p>\r\n<ul>\r\n    <li><code>w = 4</code> (width)</li>\r\n    <li><code>h = 4</code> (height)</li>\r\n    <li><code>n = 3</code> (number of driver hubs)</li>\r\n</ul>\r\n<p><strong>Explanation:</strong> An optimal placement would ensure that any lot is within two units distance of a driver hub. In the distance grid below, offices are marked as cells with distance 0:</p>\r\n<pre><code class='language-text'>1 0 1 2\r\n2 1 2 1\r\n1 0 1 0\r\n2 1 2 1</code></pre>\r\n<p>This represents one of several optimal solutions. The grid could be rotated for another optimal solution.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; w, h</code></li>\r\n    <li><code>w * h &le; 28</code></li>\r\n    <li><code>1 &le; n &le; 6</code></li>\r\n    <li><code>n &le; w * h</code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1588,
        "title": "Receipt Printing Optimization",
        "problem_statement": "```html\r\n<h1>Receipt Printing Optimization</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In Uber's internal accounting system, each trip generates a receipt that must be printed and archived. Uber offers <code>n</code> types of receipt paper packs, where each pack type <code>i</code> contains 2<sup>i</sup> receipt sheets and costs <code>paperCost[i]</code> units.</p>\r\n<p>The finance team is expected to print at least <code>requiredReceipts</code> number of trip receipts. They can purchase any number of paper packs of any type, even multiple packs of the same type, while minimizing the total cost.</p>\r\n<p>Implement a function that chooses the most cost-effective combination of paper packs such that they have at least the required number of receipt sheets.</p>\r\n<p>The function <code>getMinimumPaperCost</code> takes the following input:</p>\r\n<ul>\r\n    <li><code>int paperCost[]</code>: The cost of each type of paper pack.</li>\r\n    <li><code>int requiredReceipts</code>: The minimum number of receipts that must be printed.</li>\r\n</ul>\r\n<p>The function should return a long integer representing the minimum total cost to purchase paper packs that provide at least <code>requiredReceipts</code> sheets.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: paperCost = [2, 5, 7, 11, 25], requiredReceipts = 26\r\nOutput: 37</code></pre>\r\n<p><strong>Explanation:</strong> An optimal strategy:</p>\r\n<ul>\r\n    <li>Buy 2 packs of type 0 (2 * 2<sup>0</sup> = 2 sheets)</li>\r\n    <li>Buy 3 packs of type 3 (3 * 2<sup>3</sup> = 24 sheets)</li>\r\n</ul>\r\n<p>Total sheets = 2 + 24 = 26. Total cost = 2 * 2 + 3 * 11 = 37. It is guaranteed that no other strategy would cost lesser than 37.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: paperCost = [4, 3, 2, 1, 10], requiredReceipts = 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the most cost-efficient strategy is to buy 1 unit of type 3, which provides 8 receipt sheets (more than the required 2 units) at the cost = 1. Hence, the answer is 1.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: paperCost = [10, 9, 8, 10], requiredReceipts = 14\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> The most cost-effective strategy is to purchase 2 units of type 3, which provides 8 receipt sheets for each unit of paper pack purchased. So, total receipt sheets: 2 * 8 = 16 units (meets the requirement of at least 14 units) and the total cost incurred: 2 * 10 = 20. It is guaranteed that no other buying strategy would cost lesser than 20. Hence, the answer is 20.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 30</code></li>\r\n    <li><code>1 &le; paperCost[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; requiredReceipts &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1589,
        "title": "Signal Blocks",
        "problem_statement": "```html\r\n<h1>Signal Blocks</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Uber is testing a new multi-port charging strip used in electric vehicle hubs. Each port can handle a limited type of charge signal identified by characters 'a', 'e', 'i', 'o', and 'u', which correspond to different current frequencies.</p>\r\n<p>A diagnostic system logs these signals in a string <code>logSignals</code>. You need to find how many contiguous signal blocks:</p>\r\n<ul>\r\n    <li>Contains only these five signal types (i.e., no other characters), and</li>\r\n    <li>Includes all five signal types at least once within the block.</li>\r\n</ul>\r\n<p>Implement a function that determines the number of such contiguous signal blocks.</p>\r\n<p>The function <code>countCompleteSignalBlocks</code> takes the following input:</p>\r\n<ul>\r\n    <li><code>string logSignals</code>: log of signal types (lowercase letters)</li>\r\n</ul>\r\n<p>The function should return a long integer denoting the number of contiguous blocks with only the five signal types and each appearing at least once.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: logSignals = \"aeioaexaaeiou\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> In this scenario, all the contiguous signal blocks in the given <code>logSignals</code> are: \"aaeiou\", \"aaeuio\", \"aeuiou\", \"aeuio\". Hence, the answer is 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: logSignals = \"aaeioux\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are two valid contiguous signal blocks:\r\n<ul>\r\n    <li><code>logSignals[0:5]</code> = \"aaeiou\"</li>\r\n    <li><code>logSignals[1:5]</code> = \"aeiou\"</li>\r\n</ul>\r\nHence, the answer is 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: logSignals = \"axyzaeiou\"\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> There is only one valid contiguous signal block:\r\n<ul>\r\n    <li><code>logSignals[4:8]</code> = \"aeiou\"</li>\r\n</ul>\r\nHence, the answer is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; |logSignals| &le; 10<sup>5</sup></li>\r\n    <li><code>logSignals[i]</code> is in the range ascii 'a' - 'z' (where 0 &le; i &lt; |logSignals|)</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1590,
        "title": "Uber Green Zone Expansion",
        "problem_statement": "```html\r\n<h1>Uber Green Zone Expansion</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In order to promote sustainability, Uber is planning to expand its Green Zones: areas where only electric vehicles (EVs) are allowed to pick up riders. The city map has <code>road_nodes</code> number of zones connected by roads (<code>road_from</code>, <code>road_to</code>, and <code>road_weight</code> (road length)).</p>\r\n<p>Each zone is operated by a local Uber partner, listed in the <code>partner</code> array. If Uber signs a contract with a partner, all zones they manage become Green Zones. To prevent EV charging overload and rider confusion, no two active Green Zones can be within <code>minGap</code> of each other (measured by shortest road distance).</p>\r\n<p>Implement a function that calculates how many different partner group combinations can be activated without violating the distance rule.</p>\r\n<p>The function <code>countGreenZonePlans</code> takes the following inputs:</p>\r\n<ul>\r\n    <li><code>int road_nodes</code>: Total number of zones in the city</li>\r\n    <li><code>int road_from[n]</code>: an array representing one endpoint of each road</li>\r\n    <li><code>int road_to[n]</code>: an array representing the other endpoint of each road</li>\r\n    <li><code>int road_weight[n]</code>: an array representing the length of each road</li>\r\n    <li><code>int minGap</code>: Minimum distance required between any two active Green Zones</li>\r\n    <li><code>int partner[]</code>: an array representing the nodes where partners are located</li>\r\n</ul>\r\n<p>The function should return an integer denoting the number of valid partner combinations that result in feasible Green Zone deployments.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>road_nodes = 3\r\nroad_from = [1, 2, 1]\r\nroad_to = [2, 3, 3]\r\nroad_weight = [3, 2, 5]\r\nminGap = 4\r\npartner = [1, 2, 3]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 partners located at nodes 1, 2, and 3. The shortest distances between them are:</p>\r\n<ul>\r\n    <li>dist(1, 2) = 3</li>\r\n    <li>dist(2, 3) = 2</li>\r\n    <li>dist(1, 3) = 5</li>\r\n</ul>\r\n<p>The minimum required gap is 4. The valid combinations of partners are:</p>\r\n<ul>\r\n    <li>{Partner at node 1}</li>\r\n    <li>{Partner at node 2}</li>\r\n    <li>{Partner at node 3}</li>\r\n    <li>{Partner at node 1, Partner at node 3} (since dist(1, 3) = 5 &ge; 4)</li>\r\n</ul>\r\n<p>The combinations {1, 2} and {2, 3} are invalid because their distances are less than 4. The total number of valid plans is 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>road_nodes = 2\r\nroad_from = [1]\r\nroad_to = [2]\r\nroad_weight = [5]\r\nminGap = 4\r\npartner = [1, 2]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There are two partners at nodes 1 and 2. The distance between them is 5, which is greater than the minimum gap of 4. Therefore, any combination of these partners is valid. The valid non-empty combinations are {1}, {2}, and {1, 2}. The total is 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>road_nodes = 2\r\nroad_from = [1]\r\nroad_to = [2]\r\nroad_weight = [5]\r\nminGap = 10\r\npartner = [1, 2]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are two partners at nodes 1 and 2. The distance between them is 5, which is less than the minimum gap of 10. Therefore, they cannot be activated together. The valid combinations are activating each partner individually: {1} and {2}. The total is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; road_nodes &le; 1000</code></li>\r\n    <li><code>1 &le; n &le; min(1000, (road_nodes * (road_nodes + 1))/2)</code>, where <code>n</code> is the number of roads.</li>\r\n    <li><code>1 &le; road_weight[i] &le; 1000</code></li>\r\n    <li><code>1 &le; minGap &le; 1000</code></li>\r\n    <li><code>1 &le; partner.length &le; 10</code></li>\r\n    <li>There are no self-loops and there is at most one edge between any 2 nodes.</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1591,
        "title": "Find the Winner!",
        "problem_statement": "```html\r\n<h1>Find the Winner!</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your task is to determine the winner of a card game played between Andrea and Maria. Both players have a deck of <code>n</code> cards. The cards are represented by two integer arrays, <code>andrea</code> and <code>maria</code>.</p>\r\n<p>The game proceeds as follows:</p>\r\n<ol>\r\n    <li>At the beginning of the game, a string <code>s</code> is chosen, which is either \"Even\" or \"Odd\".</li>\r\n    <li>If <code>s</code> is \"Even\", the game is played only on the cards at even indices (0, 2, 4, ...).</li>\r\n    <li>If <code>s</code> is \"Odd\", the game is played only on the cards at odd indices (1, 3, 5, ...).</li>\r\n    <li>In each round (for each applicable index <code>i</code>), the players compare their cards. Andrea's score changes by (<code>andrea[i] - maria[i]</code>), and Maria's score changes by (<code>maria[i] - andrea[i]</code>).</li>\r\n    <li>After all applicable rounds are played, the player with the higher total score is declared the winner. If their scores are equal, it's a tie.</li>\r\n</ol>\r\n<p>Complete the function <code>winner</code> which takes the two arrays of card values and the starting call string <code>s</code>, and returns the name of the winner (\"Andrea\", \"Maria\") or \"Tie\".</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: andrea = [1, 2, 3], maria = [2, 1, 3], s = \"Even\"\r\nOutput: \"Maria\"</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe starting call is \"Even\", so the game is played on indices 0 and 2.\r\n</p>\r\n<ul>\r\n    <li>When i = 0, Andrea gets <code>andrea[0] - maria[0]</code> = 1 - 2 = -1 point. Maria gets <code>maria[0] - andrea[0]</code> = 2 - 1 = 1 point.</li>\r\n    <li>When i = 2, Andrea gets <code>andrea[2] - maria[2]</code> = 3 - 3 = 0 points. Maria gets <code>maria[2] - andrea[2]</code> = 3 - 3 = 0 points.</li>\r\n</ul>\r\n<p>At the end of the game, Andrea's cumulative score is -1, and Maria's is 1. Since Maria's score is greater, she is the winner.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: andrea = [1, 2, 3], maria = [2, 1, 3], s = \"Odd\"\r\nOutput: \"Andrea\"</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe starting call is \"Odd\", so the game is played only on index 1.\r\n</p>\r\n<ul>\r\n    <li>When i = 1, Andrea gets <code>andrea[1] - maria[1]</code> = 2 - 1 = 1 point. Maria gets <code>maria[1] - andrea[1]</code> = 1 - 2 = -1 point.</li>\r\n</ul>\r\n<p>At the end of the game, Andrea's score is 1, and Maria's is -1. Andrea wins.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 10<sup>5</sup></code>, where <code>n</code> is the number of cards.</li>\r\n    <li><code>andrea.length == maria.length == n</code></li>\r\n    <li><code>1 &le; andrea[i], maria[i] &le; 10<sup>3</sup></code>, where <code>0 &le; i &lt; n</code></li>\r\n    <li><code>s</code> is either \"Even\" or \"Odd\".</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1592,
        "title": "Count Swaps During Custom Sorting",
        "problem_statement": "```html\r\n<h1>Count Swaps During Custom Sorting</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Analyze the efficiency of the following sorting algorithm by counting the number of swaps it performs.</p>\r\n<p>For an array <em>arr</em> of size <em>n</em>:</p>\r\n<ol>\r\n    <li>Find the smallest pair of indices 0 &le; i &lt; j &le; n-1 such that arr[i] &gt; arr[j], where \"smallest\" means lexicographical ordering of pairs (i, j).</li>\r\n    <li>If no such pair exists, the algorithm stops.</li>\r\n    <li>Otherwise, swap arr[i] and arr[j] and search for the next pair.</li>\r\n</ol>\r\n<p>Your task is to determine how many swaps this algorithm performs to sort a given array.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [5, 1, 4, 2]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The algorithm performs these swaps:</p>\r\n<ul>\r\n    <li>[5, 1, 4, 2] &rarr; [1, 5, 4, 2] (swap indices 0 and 1)</li>\r\n    <li>[1, 5, 4, 2] &rarr; [1, 4, 5, 2] (swap indices 1 and 2)</li>\r\n    <li>[1, 4, 5, 2] &rarr; [1, 4, 2, 5] (swap indices 2 and 3)</li>\r\n    <li>[1, 4, 2, 5] &rarr; [1, 2, 4, 5] (swap indices 1 and 2)</li>\r\n</ul>\r\n<p>The total number of swaps is 4.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [7, 1, 2]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> [7, 1, 2] &rarr; [1, 7, 2] &rarr; [1, 2, 7]</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: arr = [2, 7, 12]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The array is already sorted, so no swaps are made.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; n &le; 10<sup>5</sup></li>\r\n    <li>1 &le; arr[i] &le; 10<sup>9</sup></li>\r\n    <li>All elements of arr are distinct.</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1593,
        "title": "Server Management",
        "problem_statement": "```html\r\n<h1>Server Management</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A company manages a network of <code>n</code> servers to handle incoming requests. Each server can handle a specified number of requests represented by an array, <code>serverCapacity</code>. However, the actual incoming requests for each server, represented by <code>incomingRequests</code>, may exceed the capacity of some servers, leading to potential overload and performance degradation.</p>\r\n<p>To optimize load distribution and ensure efficient server utilization, the company plans to double the capacity of any <code>k</code> servers. The task is to determine the maximum total number of requests that can be handled by all the servers after implementing these changes.</p>\r\n<p>Complete the function <code>getMaxRequests</code> which takes the following parameters:</p>\r\n<ul>\r\n    <li><code>int serverCapacity[n]</code>: the capacity of each server</li>\r\n    <li><code>int incomingRequests[n]</code>: the number of incoming requests for each server</li>\r\n    <li><code>int k</code>: the number of servers whose capacity is doubled</li>\r\n</ul>\r\n<p>The function should return a <code>long</code> integer representing the maximum number of total requests that can be handled by all the servers after modifications.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nserverCapacity = [10, 4, 3, 7]\r\nincomingRequests = [3, 10, 4, 5]\r\nk = 2\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> If the second and third server capacities are doubled, the number of requests served is 3 + 8 + 4 + 5 = 20. There is no way to handle all 10 requests with the second server.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nserverCapacity = [5, 3, 7, 10, 12]\r\nincomingRequests = [3, 2, 5, 8, 10]\r\nk = 2\r\nOutput: 28</code></pre>\r\n<p><strong>Explanation:</strong> It can be seen that <code>serverCapacity[i] > incomingRequests[i]</code> for all the servers. Therefore, the maximum number of requests handled by the servers is the sum of all the incoming requests: 3 + 2 + 5 + 8 + 10 = 28.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nserverCapacity = [12, 4, 8, 8, 10]\r\nincomingRequests = [15, 5, 14, 13, 19]\r\nk = 5\r\nOutput: 66</code></pre>\r\n<p><strong>Explanation:</strong> The capacity can be doubled for all the servers. It can be seen that <code>2 * serverCapacity[i] > incomingRequests[i]</code> for all the servers. Therefore, the maximum number of requests handled by the servers is the sum of all the incoming requests: 15 + 5 + 14 + 13 + 19 = 66.</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1594,
        "title": "Maximize the Power",
        "problem_statement": "```html\r\n<h1>Maximize the Power</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array <code>arr</code> of non-negative integers and an array <code>power</code> of <code>k</code> integers where <code>k</code> is an even number, perform the following operations:</p>\r\n<ol>\r\n    <li>Select two integers <code>i</code> and <code>j</code> from the indices of the current <code>power</code> array.</li>\r\n    <li>If <code>power[i] &le; power[j]</code>, add the sum of the subarray <code>arr[power[i]...power[j]]</code> to the total power.</li>\r\n    <li>If <code>power[i] &gt; power[j]</code>, add the sum of the subarray <code>arr[power[j]...power[i]]</code> to the total power.</li>\r\n    <li>Delete the elements at indices <code>i</code> and <code>j</code> from <code>power</code>, reducing its length by 2 for the next operation.</li>\r\n</ol>\r\n<p>Starting with 0 initial power, maximize the final power after exactly <code>k/2</code> operations. Return the maximum power modulo (10<sup>9</sup> + 7).</p>\r\n<p><strong>Note:</strong> Subarray <code>arr[i...j]</code> denotes the elements <code>arr[i], arr[i+1], ..., arr[j]</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [3, 5, 6, 0, 7], power = [3, 1, 0, 2]\r\nOutput: 25\r\n</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe size of power, <code>k=4</code>, so we perform <code>k/2 = 2</code> operations.\r\nOne optimal approach is shown:</p>\r\n<ul>\r\n    <li><strong>Operation 1:</strong> Choose elements 3 and 0 from <code>power</code> (these are at indices 0 and 2). The subarray is <code>arr[0...3]</code>, and its sum is 3 + 5 + 6 + 0 = 14. The total power is now 14. The remaining elements in <code>power</code> are [1, 2].</li>\r\n    <li><strong>Operation 2:</strong> Choose the remaining elements 1 and 2 from <code>power</code>. The subarray is <code>arr[1...2]</code>, and its sum is 5 + 6 = 11. The total power is now 14 + 11 = 25.</li>\r\n</ul>\r\n<p>The maximum power possible is 25.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [2, 4, 2, 1, 6], power = [4, 1, 1, 3]\r\nOutput: 28\r\n</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: arr = [1, 2, 3, 4], power = [0, 0]\r\nOutput: 1\r\n</code></pre>\r\n<p><strong>Explanation:</strong> There is only one way to perform the operation. We pair the two elements in <code>power</code>. The values are <code>power[0]=0</code> and <code>power[1]=0</code>. We add the sum of subarray <code>arr[0...0]</code> which is 1 to the total power, making it 1.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumPower</code> in the editor.</p>\r\n<pre><code class='language-cpp'>int getMaximumPower(vector&lt;int&gt; arr, vector&lt;int&gt; power)</code></pre>\r\n<p><code>getMaximumPower</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>vector&lt;int&gt; arr</code>: An array of integers.</li>\r\n    <li><code>vector&lt;int&gt; power</code>: An array of integers.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum power modulo (10<sup>9</sup> + 7).</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; n &le; 10<sup>5</sup></li>\r\n    <li>2 &le; k &le; 10<sup>5</sup>, k is even.</li>\r\n    <li>0 &le; arr[i] &le; 10<sup>9</sup>, for 0 &le; i &lt; n</li>\r\n    <li>0 &le; power[i] &lt; n</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1595,
        "title": "Song Popularity",
        "problem_statement": "```html\r\n<h1>Song Popularity</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As part of enhancing a music streaming platform's user experience, implement a feature that ranks songs by their popularity. Given <em>n</em> users and <em>m</em> songs, each user <em>i</em> has a preference list, <code>pref[i]</code>, which is a permutation of numbers 0 to <em>m</em>-1, indicating the user's preference for a song. If <em>a</em> < <em>b</em>, the user prefers song <code>pref[i][a]</code> over song <code>pref[i][b]</code>.</p>\r\n<p>To rank the songs, use the following approach. Song <em>x</em> is said to <strong>beat</strong> song <em>y</em> if <em>x</em> is preferred over <em>y</em> by more than half of the users or if exactly half of the users prefer <em>x</em> over <em>y</em>, and <em>x</em> has a smaller id.</p>\r\n<p>Song <em>x</em> is considered more popular than song <em>y</em> if <em>x</em> beats more songs than <em>y</em>. If <em>x</em> and <em>y</em> beat the same number of songs, select the song with a lower id.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Suppose n = 3, m = 3, pref = [[0, 1, 2], [0, 2, 1], [1, 2, 0]]</p>\r\n<p><strong>User Song Preferences:</strong></p>\r\n<ul>\r\n    <li>User 0: Song 0 > Song 1 > Song 2</li>\r\n    <li>User 1: Song 0 > Song 2 > Song 1</li>\r\n    <li>User 2: Song 1 > Song 2 > Song 0</li>\r\n</ul>\r\n<p><strong>Comparisons:</strong></p>\r\n<ul>\r\n    <li><strong>Song 0 vs Song 1:</strong> Users 0 and 1 prefer Song 0. (2/3 users) -> Song 0 beats Song 1.</li>\r\n    <li><strong>Song 0 vs Song 2:</strong> Users 0 and 1 prefer Song 0. (2/3 users) -> Song 0 beats Song 2.</li>\r\n    <li><strong>Song 1 vs Song 2:</strong> Users 0 and 2 prefer Song 1. (2/3 users) -> Song 1 beats Song 2.</li>\r\n</ul>\r\n<p><strong>Ranking:</strong></p>\r\n<ul>\r\n    <li>Song 0 beats 2 songs (1, 2).</li>\r\n    <li>Song 1 beats 1 song (2).</li>\r\n    <li>Song 2 beats 0 songs.</li>\r\n</ul>\r\n<p>It is established that Song 0 > Song 1 > Song 2. Hence the answer is [0, 1, 2].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nm = 4\r\nsong_preferences = [[0, 1, 3, 2], [0, 2, 3, 1], [0, 2, 3, 1], [2, 1, 0, 3], [0, 3, 1, 2]]\r\n\r\nOutput: [0, 1, 3, 2]\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Song 0 beats 3 songs (1, 2, and 3).</li>\r\n    <li>Song 1 beats 2 songs (2 and 3).</li>\r\n    <li>Song 2 beats 1 song (3).</li>\r\n    <li>Song 3 beats 1 song (2).</li>\r\n</ul>\r\n<p>Sorting by the number of songs beaten (descending), we get song 0 (3 wins), then song 1 (2 wins). Songs 2 and 3 are tied with 1 win. The final order is [0, 1, 3, 2].</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nm = 3\r\nsong_preferences = [[2, 0, 1], [0, 2, 1], [0, 1, 2], [2, 1, 0]]\r\n\r\nOutput: [0, 2, 1]\r\n</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Song 0 beats 2 songs (1 and 2).</li>\r\n    <li>Song 1 beats 0 songs.</li>\r\n    <li>Song 2 beats 1 song (1).</li>\r\n</ul>\r\n<p>Sorting by the number of songs beaten (descending) gives the order: Song 0 (2 wins), Song 2 (1 win), Song 1 (0 wins). The final order is [0, 2, 1].</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getPopularityOrder</code> in the editor.</p>\r\n<p><code>getPopularityOrder</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int song_preferences[n][m]</code>: the preference lists of the users</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int[m]</code>: the popularity order of the songs</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; n &le; 400</li>\r\n    <li>1 &le; m &le; 400</li>\r\n    <li><code>song_preferences[i]</code> is a permutation of numbers 0, 1, ..., m - 1</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    },
    {
        "id": 1596,
        "title": "Academic Decathlon",
        "problem_statement": "```html\r\n<h1>Academic Decathlon</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Students are being selected for an academic decathlon team. A team is selected by choosing a start level and a size for a team to be uniform. The difference between any two consecutive skill levels (when arranged in increasing order) must be either 0 or 1.</p>\r\n<p>Your task is to find the maximum possible team size.</p>\r\n<p>Complete the function <code>findMaxTeamSize</code> which takes an array of integers <code>skills</code> representing the skill levels of each student and should return an integer representing the maximum possible size of the team.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: skills = [4, 13, 2, 3]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There are two valid teams possible: {2, 3, 4} and {13}. These have team sizes of 3 and 1, respectively. The maximum possible team size is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: skills = [10, 12, 13, 9, 14]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Valid teams, sorted are {9, 10}, and {12, 13, 14}. These teams have team sizes 2 and 3, respectively, so the maximum team size is 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; n &le; 10<sup>5</sup></li>\r\n    <li>1 &le; skills[i] &le; 10<sup>9</sup></li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Uber_all",
        "company_id": 556
    }
]