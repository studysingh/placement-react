[
    {
        "id": 1039,
        "title": "Convert String to Binary",
        "problem_statement": "<h1>Convert String to Binary</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string Str with only small case alphabets in it. Write a program that converts it into a binary string by replacing characters as per the given table:</p>\r\n<pre><code class='language-text'>Character | Value\r\n----------|------\r\na, b, c, g, e | 0\r\nf, g, h, u | 0\r\ni, j, k, l, o | 0\r\np, q, r, s, t | 0\r\nu, v, w, x, y | 1</code></pre>\r\n<p>And, display the resultant binary string as an output.</p>\r\n<p>Read the input from STDIN and write the output to STDOUT. You should not write arbitrary strings while reading the input and while printing as these contribute to the standard output.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The only line of input consists of a string with only small case alphabets in it.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should display the resultant number after conversion.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Input string Str must be in small case alphabets and no other special characters are allowed.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: helloworld\r\nOutput: 1000000100</code></pre>\r\n<p><strong>Explanation:</strong> After converting the given string into a binary string \"helloworld\" as per the problem statement, the resultant binary string will be \"1000000100\".</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: miraculous\r\nOutput: 0110000001</code></pre>\r\n<p><strong>Explanation:</strong> After converting the given string into a binary string \"miraculous\" as per the problem statement, the resultant binary string will be \"0110000001\".</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "IDFC_27july",
        "company_id": 337
    },
    {
        "id": 1040,
        "title": "Count Divisible Shifted Numbers",
        "problem_statement": "<h1>Count Divisible Shifted Numbers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Alaina, struggling with math class, attempted to distract herself by typing the number N1 on her phone. Caught by the teacher, she was tasked with generating all possible numbers by shifting the unit digit to the last digit repeatedly. To make the exercise more challenging, the teacher then instructed Alaina to identify how many of these generated numbers were divisible by another number N2.</p>\r\n<p>Now, Alaina needs your help to create a program that accepts two inputs, N1 and N2, and outputs the resultant number after applying the shifting operation. Your program should assist Alaina in efficiently solving this problem for various pairs of N1 and N2 values as provided in her homework.</p>\r\n<p>Read the input from STDIN and write the output to STDOUT. You should not write arbitrary strings while reading the input and while printing as these contribute to the standard output.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 <= N1 <= 10^18</li>\r\n    <li>1 <= N2 <= 1,000</li>\r\n    <li>N1 allows only numbers in it.</li>\r\n    <li>If N1 starts with 0 then it must be considered as a number only. i.e. 012 should be considered as 12.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>A single line input consists of two integers N1 and N2, separated by a single white space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single line of output that has a number which indicates the number of values produced from N1 are divisible by N2</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: N1 = 515, N2 = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> From the given Sample Input 1, we have:</p>\r\n<p>Alaina typed the number 515 on her phone and she needed to generate all possible numbers by shifting unit digit to the last position such as 515, 551, 155. Among them, only 515 and 155 are divisible by 5 so only 2 numbers are divisible</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: N1 = 2424, N2 = 4\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> From the given Sample Input 2, we have:</p>\r\n<p>Alaina typed the number 2424 on her phone and she needed to generate all possible numbers by shifting unit digit to the last position such as 2424, 4242, 2424, 4242. Among them, all 4 numbers are divisible by 2, 4242.</p>\r\n\r\n<p>Here's a code snippet for the function signature:</p>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\n#include &lt;algorithm&gt;\r\n#include &lt;set&gt;\r\n\r\nusing namespace std;\r\n\r\nlong long int finalCount(long long int n, int x) {\r\n    int count = 0;\r\n    // WRITE YOUR CODE HERE\r\n    return count;\r\n}\r\n\r\nint main() {\r\n    long long int n;\r\n    int x;\r\n    cin >> n >> x;\r\n    cout << finalCount(n, x) << endl;\r\n    return 0;\r\n}\r\n</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "IDFC_27july",
        "company_id": 337
    },
    {
        "id": 1041,
        "title": "Sum of Perfect Squares Matching Pattern",
        "problem_statement": "<h1>Sum of Perfect Squares Matching Pattern</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Sumit was cleaning his house and found an old book of math problems. In one of the pages was given a set of numbers with some digits missing. The places where the digits were missing were indicated with '_' (an underscore). At the end of the page was a clue to fill in the missing digits - \"All these numbers are perfect squares\".</p>\r\n<p>Following the clue, Sumit wants to identify the sum of all the perfect squares that matches the given pattern P. Can you help him with a program to do so?</p>\r\n<p>Read the input from STDIN and write the output to STDOUT. You should not write arbitrary strings while reading the input and while printing as these contribute to the standard output.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>A single line of input consists of the pattern P.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single line of output prints the sum of all the perfect squares that match the pattern.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Length of the pattern, P <= 13</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 1_0_5\r\nOutput: 11025</code></pre>\r\n<p><strong>Explanation:</strong> Here, 11025 matches the pattern 1_0_5 and its sum is 11025, so it will print 11025 as an output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 12_4_9\r\nOutput: 247858</code></pre>\r\n<p><strong>Explanation:</strong> 1296, 127449 are perfect squares, 120409 and 127449, match the input pattern 12_4_9 and their sum is 120409 + 127449 = 247858, so it will print 247858 as an output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "IDFC_27july",
        "company_id": 337
    }
]