[
    {
        "id": 955,
        "title": "Count Good Subsequences",
        "problem_statement": "<h1>Count Good Subsequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A subsequence is formed by deleting zero or more characters from a string and concatenating the remaining characters. A subsequence is considered 'good' if the frequency of each character in the subsequence is the same.</p>\r\n<p>Given a string of n English letters, determine how many good subsequences it contains. Since the answer can be large, compute it modulo (10<sup>9</sup>+7).</p>\r\n<p><strong>Note:</strong> An empty subsequence is not considered a good subsequence.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: word = \"abca\"</code></pre>\r\n<p><strong>Explanation:</strong> From this string, we can form 15 non-empty subsequences. The only subsequences that are not good are:</p>\r\n<ul>\r\n    <li>\"aba\" (character 'a' appears twice, 'b' appears once)</li>\r\n    <li>\"aca\" (character 'a' appears twice, 'c' appears once)</li>\r\n    <li>\"abca\" (character 'a' appears twice, 'b' and 'c' appear once each)</li>\r\n</ul>\r\n<p>The total number of good subsequences = 15 - 3 = 12, and the answer is 12 modulo (10<sup>9</sup>+7) = 12.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: word = \"abcd\"\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> All of the non-empty subsequences are good subsequences. They are \"a\", \"b\", \"c\", \"d\", \"ab\", \"ac\", \"ad\", \"bc\", \"bd\", \"cd\", \"abc\", \"abd\", \"acd\", \"bcd\", and \"abcd\".</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countGoodSubsequences</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string word</code>: a string that consists of only lowercase Latin letters</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of good subsequences modulo (10<sup>9</sup>+7)</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int countGoodSubsequences(string word) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= length of word <= 10<sup>5</sup></code></li>\r\n    <li><code>word[i]</code> is in the range <code>[a-z]</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Servicenow_8june",
        "company_id": 303
    },
    {
        "id": 956,
        "title": "Get Elements From 2D Array",
        "problem_statement": "```html\r\n<h1>Get Elements From 2D Array</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A two-dimensional array is represented as a one-dimensional array of integers. The first integer of the array denotes the length of each row of the 2D array. The remaining integers are the elements of the array, arranged row by row.</p>\r\n<p>Multiple queries will be made about the 2D array. Each query contains the row and column coordinates of an element to retrieve.</p>\r\n<p>Complete the function <code>getElements</code> in the editor. The function is expected to return an <code>INTEGER_ARRAY</code>. The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>int arr[n]</code>: an array of integers</li>\r\n    <li><code>int queries[q][2]</code>: the row and column positions queried</li>\r\n</ul>\r\n<p>The function should return an array of answers to each query, aligned with queries by index.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], queries = [[1, 1], [1, 2], [2, 1], [2, 2]]\r\nOutput: [1, 2, 6, 7]</code></pre>\r\n<p><strong>Explanation:</strong> The first value, <code>arr[0] = 5</code>, represents the length of each row of the 2D array. The next 10 elements, <code>arr[1]</code> through <code>arr[10]</code>, form 2 rows of a 2D array as illustrated below. The coordinates of the top left element, <code>arr[1]</code>, are (1, 1).</p>\r\n<pre><code class='language-text'>1 2 3 4 5\r\n6 7 8 9 10</code></pre>\r\n<p>Processing each query:</p>\r\n<ul>\r\n    <li>The value at position [1, 1] is 1.</li>\r\n    <li>The value at position [1, 2] is 2.</li>\r\n    <li>The value at position [2, 1] is 6.</li>\r\n    <li>The value at position [2, 2] is 7.</li>\r\n</ul>\r\n<p>The return array is <code>[1, 2, 6, 7]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: arr = [4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], queries = [[3, 2], [2, 1]]\r\nOutput: [10, 5]</code></pre>\r\n<p><strong>Explanation:</strong> Rows are <code>arr[0] = 4</code> columns each. The representation of the array as a 2D array is:</p>\r\n<pre><code class='language-text'>1 2 3 4\r\n5 6 7 8\r\n9 10 11 12</code></pre>\r\n<p>The element at (3, 2) is 10, and at (2, 1) is 5.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 1000</code> (where <code>n</code> is the total length of the 1D array <code>arr</code>)</li>\r\n    <li><code>1 <= arr[0] <= 100</code> (<code>arr[0]</code> is the length of each row)</li>\r\n    <li><code>-100 <= arr[i] <= 100</code> where <code>1 <= i < n</code></li>\r\n    <li><code>1 <= q <= n - 1</code> (where <code>q</code> is the number of queries)</li>\r\n    <li><code>1 <= queries[i][0] <= rows</code> where <code>0 <= i < q</code> (row index is 1-based)</li>\r\n    <li><code>1 <= queries[i][1] <= columns</code> where <code>0 <= i < q</code> (column index is 1-based)</li>\r\n</ul>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Servicenow_8june",
        "company_id": 303
    },
    {
        "id": 957,
        "title": "Minimum Task Cost",
        "problem_statement": "<h1>Minimum Task Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A group of workers gathered to complete a task. Each worker has an efficiency rating. They will be grouped in pairs so an even number of workers are required. The cost of a pair is the absolute difference of the efficiencies assigned to the workers. The cost of the task is the sum of the costs of all pairs formed. There are an odd number of workers to choose from, so one worker will not be paired. Select the worker to exclude so the task's cost is minimized.</p>\r\n<p>Given n workers and efficiency for each worker, find a configuration of the workers such that the cost of the task is the minimum possible. Return the minimum cost as the answer.</p>\r\n\r\n<p>Complete the function <code>findMinCost</code> in the editor below.</p>\r\n<p><code>findMinCost</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int efficiency[n]</code>: the efficiency of each worker</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum possible cost</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: efficiency = [4, 2, 8, 1, 9]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Using 1-based indexing, if worker 1 is excluded and the indices of the pairs are (2, 4) and (3, 5), the cost of the task is |2 - 1| + |8 - 9| = 2. This is the minimum possible cost.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5, efficiency = [4, 1, 2, 16, 8]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> Exclude worker 4 and make the pairs (2, 3) and (1, 5). The cost of the task is |1 - 2| + |4 - 8| = 5.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= efficiency[i] &lt;= 10^9</code></li>\r\n    <li><code>n</code> is odd</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Servicenow_8june",
        "company_id": 303
    }
]