[
    {
        "id": 339,
        "title": "Balanced Bracket Sequence",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Balanced Bracket Sequence</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Balanced Bracket Sequence</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Given a dataset of strings containing only parentheses <code>()</code>, the data represented by the string is valid if it is a balanced bracket sequence. An adjustment to the string can be made: at most one bracket can be moved from its original place to any other position in the string. The task is to determine whether, for each string, it is possible to balance the bracket sequence in 1 move or less.</p>\n        <p>Return an array of the size of the dataset, where the <code>i-th</code> integer is <code>1</code> if the string can be converted into a balanced string, and <code>0</code> otherwise.</p>\n        <p><strong>Note:</strong> A string <code>s</code> is a balanced bracket sequence if:</p>\n        <ul>\n            <li><code>s</code> is empty.</li>\n            <li><code>s</code> is equal to <code>(t)</code>, where <code>t</code> is a balanced bracket sequence.</li>\n            <li><code>s</code> is equal to <code>t1 + t2</code>, where <code>t1</code> and <code>t2</code> are balanced bracket sequences.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An integer <code>n</code> representing the number of strings in the dataset.</li>\n            <li>A list of <code>n</code> strings, where each string contains only parentheses <code>()</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an array of integers of size <code>n</code>, where the <code>i-th</code> integer is <code>1</code> if the corresponding string can be transformed into a balanced bracket sequence with at most one move, and <code>0</code> otherwise.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 2 * 10^5</li>\n            <li>1 ≤ length of each string ≤ 2 * 10^5</li>\n            <li>Each string consists of only the characters <code>()</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nn = 3\ndataset = [\\\"()\\\", \\\")(\\\", \\\"())\\\"]</pre>\n            <pre class=\\\"output\\\">Output:\n[1, 0, 1]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <ul>\n                    <li>The first string <code>\\\"()\\\"</code> is already balanced, so the output is <code>1</code>.</li>\n                    <li>The second string <code>\\\")(\\\"</code> cannot be balanced with only one move, so the output is <code>0</code>.</li>\n                    <li>The third string <code>\\\"())\\\"</code> can be balanced by moving one bracket, so the output is <code>1</code>.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1jc8gZ84Kh51pwbRVaRZCUIJh4Y9XBphs8swb1qI3TbU/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 353,
        "title": "UDP Network Protocol Simulation",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>UDP Network Protocol Simulation</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>UDP Network Protocol Simulation</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Implement a prototype of a UDP network protocol. There is a 2D array of size <code>n x 2</code>, <code>requests</code>. At time <code>t = requests[i][0]</code>, <code>requests[i][1]</code> packets are to be sent over the network. The network can hold at most <code>max_packets</code> packets in the pipeline. It delivers the data to the client at a rate of <code>rate</code> packets per second, i.e., <code>rate</code> packets are removed from the queue and delivered to the client every second.</p>\n        <p>If the number of packets exceeds <code>max_packets</code> at any time, the packets remaining at that time are dropped.</p>\n        <p>Given the array <code>requests</code>, and the integers <code>max_packets</code> and <code>rate</code>, find the total number of packets that are dropped.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>A 2D array <code>requests</code> of size <code>n x 2</code>, where each row represents a request with two integers:\n                <ul>\n                    <li><code>requests[i][0]</code>: The time at which the packets are to be sent.</li>\n                    <li><code>requests[i][1]</code>: The number of packets to be sent at that time.</li>\n                </ul>\n            </li>\n            <li>An integer <code>max_packets</code>: The maximum number of packets the network can hold in the pipeline.</li>\n            <li>An integer <code>rate</code>: The rate at which packets are delivered to the client per second.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the total number of packets that are dropped.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10^5</li>\n            <li>1 ≤ max_packets ≤ 10^9</li>\n            <li>1 ≤ rate ≤ 10^9</li>\n            <li>1 ≤ requests[i][0] ≤ 10^9</li>\n            <li>1 ≤ requests[i][1] ≤ 10^9</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nrequests = [[1, 10], [2, 15], [3, 5]]\nmax_packets = 10\nrate = 5</pre>\n            <pre class=\\\"output\\\">Output:\n10</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>At time <code>t = 1</code>, 10 packets are sent. The network can hold up to 10 packets, so no packets are dropped.</p>\n                <p>At time <code>t = 2</code>, 15 packets are sent. The network can only hold 10 packets, so 5 packets are dropped.</p>\n                <p>At time <code>t = 3</code>, 5 packets are sent. The network can hold up to 10 packets, so no packets are dropped.</p>\n                <p>The total number of packets dropped is 5 + 5 = 10.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1n4-rLQwKXlE9cMylomT-IKjbYqY-6guzkaR9Ur3p2nw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 355,
        "title": "Minimum Difference in Measurements",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Minimum Difference in Measurements</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Minimum Difference in Measurements</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Given a set of distinct measurements taken at different times, find the minimum possible difference between any two measurements. Print all pairs of measurements that have this minimum difference in ascending order, with the pairs\\' elements ordered ascending. For example, if <code>a < b</code>, the pair is <code>(a, b)</code>. The values should have a single space between them.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An array of integers <code>measurements[n]</code>, where each element represents a distinct measurement.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print all pairs of measurements that have the minimum difference in ascending order, with each pair on a new line and the elements of the pair separated by a space.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The array <code>measurements</code> will contain at least two elements.</li>\n            <li>The elements in the array are integers.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nmeasurements = [-1, 3, 6, -5, 0]</pre>\n            <pre class=\\\"output\\\">Output:\n0 3\n3 6</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The minimum absolute difference between any two elements in the array is 3, and there are two pairs with that difference: (0, 3) and (3, 6). These pairs are printed in ascending order.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1awaSg75iCyJxRhPPNTiZ5Mrjo8AJd-qkXKZcVMBeyJg/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 356,
        "title": "Balanced Bracket Sequence Problem",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Balanced Bracket Sequence Problem</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>Balanced Bracket Sequence Problem</h2>\n        <p>Given a dataset of strings containing only parentheses \\'(\\' and \\')\\', the data represented by the string is valid if it is a balanced bracket sequence. One adjustment to the string can be made: at most one bracket can be moved from its original place to any other position in the string. The task is to determine whether, for each string, it is possible to balance the bracket sequence in 1 move or less. Return an array of the size of the dataset, where the integer is 1 if the string can be converted into a balanced string, and 0 otherwise.</p>\n        <p><strong>Note:</strong> A string <em>s</em> is a balanced bracket sequence if:</p>\n        <ul>\n            <li><em>s</em> is equal to <em>t</em> where <em>t</em> is a balanced bracket sequence.</li>\n            <li><em>s</em> is equal to <em>tt</em>, i.e., concatenation of <em>t</em> and <em>t</em>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer <em>n</em>, the number of strings in the dataset. Each of the next <em>n</em> lines contains a string consisting of characters \\'(\\' and \\')\\' only.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an array of size <em>n</em>, where each element is 1 if the corresponding string can be converted into a balanced bracket sequence with at most one move, and 0 otherwise.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 100</li>\n            <li>Each string length ≤ 100</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n(\n)\n</pre>\n            <pre class=\\\"output\\\">Output:\n0\n1\n</pre>\n            <div class=\\\"explanation\\\">\n                <p>For dataset[0] = \\\"(\\\", it is not possible to convert the string to a balanced bracket sequence.</p>\n                <p>For dataset[1] = \\\")\\\", the first bracket can be moved to the last position to obtain \\\"()\\\", which is a balanced bracket sequence.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1JrVr4CvnoUgSKjkSjOMo3tLdaD7uxvKNU9txqmnGKOk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 391,
        "title": "Count Valid Substrings",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Question 1: Count Valid Substrings</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>A binary string <strong>S</strong> (containing only 0s and 1s) encodes an encryption key represented by the count of <em>valid</em> substrings in <strong>S</strong>.</p>\n        <p>A substring is <strong>valid</strong> if it meets the following conditions:</p>\n        <ul>\n            <li>No two adjacent characters are the same.</li>\n            <li>Its length is between <code>minLength</code> and <code>maxLength</code>, inclusive.</li>\n        </ul>\n        <p>Return the number of valid substrings, which represents the encryption key for <strong>S</strong>.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>A string <strong>S</strong>, containing only binary characters (0s and 1s).</li>\n            <li>Two integers <strong>minLength</strong> and <strong>maxLength</strong>, representing the minimum and maximum length for a valid substring.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a single integer, the count of valid substrings in <strong>S</strong>.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 &le; |S| &le; 2 × 10<sup>5</sup></li>\n            <li>1 &le; minLength &le; maxLength &le; |S|</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nS = \\\"1011\\\", minLength = 2, maxLength = 3</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"5\\\">\n                    <thead>\n                        <tr>\n                            <th>Substring</th>\n                            <th>Length</th>\n                            <th>Is valid?</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr><td>\\\"1\\\"</td><td>1</td><td>No (Length &lt; minLength)</td></tr>\n                        <tr><td>\\\"0\\\"</td><td>1</td><td>No (Length &lt; minLength)</td></tr>\n                        <tr><td>\\\"10\\\"</td><td>2</td><td>Yes</td></tr>\n                        <tr><td>\\\"01\\\"</td><td>2</td><td>Yes</td></tr>\n                        <tr><td>\\\"11\\\"</td><td>2</td><td>No (Adjacent repeating)</td></tr>\n                        <tr><td>\\\"101\\\"</td><td>3</td><td>Yes</td></tr>\n                        <tr><td>\\\"011\\\"</td><td>3</td><td>No (Adjacent repeating)</td></tr>\n                    </tbody>\n                </table>\n                <p>Thus, the encryption key for this string is <strong>3</strong>.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nS = \\\"1010\\\", minLength = 2, maxLength = 2</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"5\\\">\n                    <thead>\n                        <tr>\n                            <th>Substring</th>\n                            <th>Length</th>\n                            <th>Is valid?</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr><td>\\\"1\\\"</td><td>1</td><td>No (Length &lt; minLength)</td></tr>\n                        <tr><td>\\\"0\\\"</td><td>1</td><td>No (Length &lt; minLength)</td></tr>\n                        <tr><td>\\\"10\\\"</td><td>2</td><td>Yes</td></tr>\n                        <tr><td>\\\"01\\\"</td><td>2</td><td>Yes</td></tr>\n                        <tr><td>\\\"10\\\"</td><td>2</td><td>Yes</td></tr>\n                        <tr><td>\\\"101\\\"</td><td>3</td><td>No (Length &gt; maxLength)</td></tr>\n                    </tbody>\n                </table>\n                <p>Thus, the encryption key for this string is <strong>3</strong>.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nS = \\\"110\\\", minLength = 1, maxLength = 3</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <table border=\\\"1\\\" cellspacing=\\\"0\\\" cellpadding=\\\"5\\\">\n                    <thead>\n                        <tr>\n                            <th>Substring</th>\n                            <th>Length</th>\n                            <th>Is valid?</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr><td>\\\"1\\\"</td><td>1</td><td>Yes</td></tr>\n                        <tr><td>\\\"1\\\"</td><td>1</td><td>Yes</td></tr>\n                        <tr><td>\\\"0\\\"</td><td>1</td><td>Yes</td></tr>\n                        <tr><td>\\\"11\\\"</td><td>2</td><td>No (Adjacent repeating)</td></tr>\n                        <tr><td>\\\"10\\\"</td><td>2</td><td>Yes</td></tr>\n                        <tr><td>\\\"110\\\"</td><td>3</td><td>No</td></tr>\n                    </tbody>\n                </table>\n                <p>Thus, the encryption key for this string is <strong>4</strong>.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>countValidSubstrings</code>:</p>\n        <pre><code>long countValidSubstrings(string S, int minLength, int maxLength)</code></pre>\n        <p><strong>Parameters:</strong></p>\n        <ul>\n            <li><code>string S</code>: The binary string.</li>\n            <li><code>int minLength</code>: The minimum length for a valid substring.</li>\n            <li><code>int maxLength</code>: The maximum length for a valid substring.</li>\n        </ul>\n        <p><strong>Returns:</strong></p>\n        <p><code>long</code>: The encryption key for the given string.</p>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1P1ua4d5SrpfBfmVlWVylVM8Zrh5reI1Fj5EalZ0Su_M/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 392,
        "title": "Maximize Positive Meetings",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Question 1: Maximize Positive Meetings</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>A product manager has to organize <strong>n</strong> meetings with different people. Meeting with each person results in an <strong>increase</strong> or <strong>decrease</strong> in the effectiveness index of the manager. The manager wants to organize the meetings such that the index remains positive for as many meetings as possible.</p>\n        <p>Find the maximum number of meetings for which the effectiveness index is positive. The index at the beginning is <strong>0</strong>.</p>\n        <p><strong>Note:</strong> After the meetings begin, the index must remain above <strong>0</strong> to be positive.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <strong>n</strong>, the number of elements in the effectiveness array.</li>\n            <li>Each of the <strong>n</strong> subsequent lines contains an integer, <strong>effectiveness[i]</strong>, which represents the increase or decrease in effectiveness for each meeting.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer, the maximum possible number of meetings while maintaining a positive index.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 &le; n &le; 10<sup>5</sup></li>\n            <li>-10<sup>9</sup> &le; effectiveness[i] &le; 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n-3\n0\n2\n1</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>One optimal rearrangement is {2, 0, 1, -3}. The index is positive for the first three meetings, after which it becomes zero. Therefore, the maximum number of meetings with a positive index is <strong>3</strong>.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n-3\n0\n-2</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>There is no arrangement that produces a positive index.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>maxMeetings</code>:</p>\n        <pre><code>int maxMeetings(vector&lt;int&gt; effectiveness)</code></pre>\n        <p>The function has the following parameter:</p>\n        <ul>\n            <li><code>vector&lt;int&gt; effectiveness</code>: an array representing the increase or decrease in effectiveness for each meeting.</li>\n        </ul>\n        <p><strong>Returns:</strong></p>\n        <p><code>int</code>: The maximum possible number of meetings while maintaining a positive index.</p>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1YJq-O2MnjmYAh6HLgf-PTQe652a1A1iS9eghr2WG4uQ/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint maxMeetings(vector<int> effectiveness) {\\n    sort(effectiveness.begin(), effectiveness.end(), greater<int>());\\n    \\n    long long cumulative_sum = 0;\\n    int count = 0;\\n    \\n    for(auto &e : effectiveness){\\n        cumulative_sum += e;\\n        if(cumulative_sum > 0){\\n            count++;\\n        }\\n        else{\\n            break;\\n        }\\n    }\\n    \\n    return count;\\n}",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 393,
        "title": "UDP Network Protocol",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Question 2: UDP Network Protocol</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>Implement a prototype of a UDP network protocol.</p>\n        <p>There is a 2D array of size <code>n x 2</code>, <strong>requests</strong>. At time <code>t = requests[i][0]</code>, <code>requests[i][1]</code> packets are to be sent over the network. The network can hold at most <code>max_packets</code> packets in the pipeline. It delivers data to the client at <code>rate</code> packets per second. That is, every second, <code>rate</code> packets are removed from the queue and delivered to the client.</p>\n        <p>If the number of packets exceeds <code>max_packets</code> at any time, the packets remaining at that time are dropped.</p>\n        <p>Given the array <code>requests</code> and the integers <code>max_packets</code> and <code>rate</code>, find the total number of packets that are dropped.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <strong>n</strong>, the number of elements in <strong>requests</strong>.</li>\n            <li>Each of the <strong>n</strong> lines contains two space-separated integers <code>requests[i][0]</code> and <code>requests[i][1]</code>.</li>\n            <li>The next line contains an integer <code>max_packets</code>, the capacity of the pipeline.</li>\n            <li>The last line contains an integer <code>rate</code>, the per-second transmission rate.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer, the total number of packets that are dropped.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 &le; <code>n</code> &le; 3 × 10<sup>5</sup></li>\n            <li>1 &le; <code>max_packets</code> &le; 10<sup>9</sup></li>\n            <li>1 &le; <code>rate</code> &le; 10<sup>5</sup></li>\n            <li>1 &le; <code>requests[i][0]</code>, <code>requests[i][1]</code> &le; 10<sup>9</sup></li>\n            <li>All <code>requests[i][0]</code> values are pairwise distinct.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n1 8\n4 9\n6 7\n7 16\n7 7\n2\n10</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>At time <code>t = 1</code>, 8 packets arrive. 2 packets are delivered, and 6 packets are left. At time <code>t = 4</code>, 9 packets arrive, making the total 15. The pipeline capacity is exceeded, and 1 packet is dropped.</p>\n                <p>Similar logic is applied at each time step. The total packets dropped are <strong>4</strong>.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n1 5\n3 5\n5\n3</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>The 5 packets sent at <code>t = 1</code> are delivered in the first two seconds. The next 5 packets sent at <code>t = 3</code> are also delivered without any drops.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n1 8\n2 10\n3 4\n7\n5</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n            <div class=\\\"explanation\\\">\n                <p>The total number of dropped packets, calculated step-by-step, is <strong>6</strong>.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getNumberOfDroppedPackets</code>:</p>\n        <pre><code>long getNumberOfDroppedPackets(vector&lt;vector&lt;int&gt;&gt; requests, int max_packets, int rate)</code></pre>\n        <p>The function has the following parameters:</p>\n        <ul>\n            <li><code>vector&lt;vector&lt;int&gt;&gt; requests</code>: A 2D array where each row contains time and packets.</li>\n            <li><code>int max_packets</code>: The maximum pipeline capacity.</li>\n            <li><code>int rate</code>: The number of packets delivered per second.</li>\n        </ul>\n        <p><strong>Returns:</strong></p>\n        <p><code>long</code>: The total number of packets that are dropped.</p>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1CUdfEZLCnRNt4QyOx1ACLpjSdzpgKC_Yd9WCnKEuhOE/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\nlong int getNumberOfDroppedPackets(vector<vector<int>> requests, int max_packets, int rate) {\\n    if(requests.empty()) return 0;\\n    sort(requests.begin(), requests.end());\\n    long long total_dropped = 0;\\n    long long queue = 0;\\n    long long last_time = requests[0][0];\\n  \\n    queue += requests[0][1];\\n    if(queue > max_packets){\\n        total_dropped += (queue - max_packets);\\n        queue = max_packets;\\n    }\\n    \\n    for(int i=1;i<requests.size();i++){\\n        long long current_time = requests[i][0];\\n        long long time_diff = current_time - last_time;\\n        long long delivered = min(queue, (long long)rate * time_diff);\\n        queue -= delivered;\\n        queue += requests[i][1];\\n        if(queue > max_packets){\\n            total_dropped += (queue - max_packets);\\n            queue = max_packets;\\n        }\\n        last_time = current_time;\\n    }\\n    return total_dropped;\\n}\\n",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 395,
        "title": "Binary Substring Key",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>1. Question 1</h1>\n\n    <div class=\\\"problem-description\\\">\n        <p>A binary string <strong>S</strong> (containing only 0s and 1s) encodes an encryption key represented by the count of <em>valid</em> substrings in <strong>S</strong>.</p>\n        <p>A substring is <em>valid</em> if it meets the following conditions:</p>\n        <ul>\n            <li>No two adjacent characters are the same.</li>\n            <li>Its length is between <strong>minLength</strong> and <strong>maxLength</strong>, inclusive.</li>\n        </ul>\n        <p>Return the number of valid substrings, which represents the encryption key for <strong>S</strong>.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <p><strong>S = \\\"1011\\\", minLength = 2, maxLength = 3</strong></p>\n        <table border=\\\"1\\\">\n            <thead>\n                <tr>\n                    <th>Substring</th>\n                    <th>Length</th>\n                    <th>Is valid?</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>\\\"1\\\"</td>\n                    <td>1</td>\n                    <td>No (Length &lt; minLength)</td>\n                </tr>\n                <tr>\n                    <td>\\\"0\\\"</td>\n                    <td>1</td>\n                    <td>No (Length &lt; minLength)</td>\n                </tr>\n                <tr>\n                    <td>\\\"1\\\"</td>\n                    <td>1</td>\n                    <td>No (Length &lt; minLength)</td>\n                </tr>\n                <tr>\n                    <td>\\\"10\\\"</td>\n                    <td>2</td>\n                    <td>Yes</td>\n                </tr>\n                <tr>\n                    <td>\\\"01\\\"</td>\n                    <td>2</td>\n                    <td>Yes</td>\n                </tr>\n                <tr>\n                    <td>\\\"11\\\"</td>\n                    <td>2</td>\n                    <td>No (Adjacent repeating)</td>\n                </tr>\n                <tr>\n                    <td>\\\"101\\\"</td>\n                    <td>3</td>\n                    <td>Yes</td>\n                </tr>\n                <tr>\n                    <td>\\\"011\\\"</td>\n                    <td>3</td>\n                    <td>No (Adjacent repeating)</td>\n                </tr>\n                <tr>\n                    <td>\\\"1011\\\"</td>\n                    <td>3</td>\n                    <td>No (Adjacent repeating)</td>\n                </tr>\n            </tbody>\n        </table>\n        <p>Thus, the encryption key for this string is <strong>3</strong>.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>countValidSubstrings</code> in the editor below.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>A string <code>S</code> in binary format.</li>\n            <li>An integer <code>minLength</code>: the minimum length for a valid substring.</li>\n            <li>An integer <code>maxLength</code>: the maximum length for a valid substring.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a single long integer: the encryption key for <strong>S</strong>.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 &le; |S| &le; 2 &times; 10<sup>5</sup></li>\n            <li>1 &le; minLength &le; maxLength &le; |S|</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Case 0</h3>\n        <pre class=\\\"input\\\">Input:\n1010\n2\n2</pre>\n        <pre class=\\\"output\\\">Output:\n3</pre>\n        <div class=\\\"explanation\\\">\n            <p>Valid substrings: \\\"10\\\", \\\"01\\\", \\\"10\\\". Total = 3.</p>\n        </div>\n\n        <h3>Sample Case 1</h3>\n        <pre class=\\\"input\\\">Input:\n110\n1\n3</pre>\n        <pre class=\\\"output\\\">Output:\n4</pre>\n        <div class=\\\"explanation\\\">\n            <table border=\\\"1\\\">\n                <thead>\n                    <tr>\n                        <th>Substring</th>\n                        <th>Length</th>\n                        <th>Is valid?</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>\\\"1\\\"</td>\n                        <td>1</td>\n                        <td>Yes</td>\n                    </tr>\n                    <tr>\n                        <td>\\\"1\\\"</td>\n                        <td>1</td>\n                        <td>Yes</td>\n                    </tr>\n                    <tr>\n                        <td>\\\"0\\\"</td>\n                        <td>1</td>\n                        <td>Yes</td>\n                    </tr>\n                    <tr>\n                        <td>\\\"11\\\"</td>\n                        <td>2</td>\n                        <td>No</td>\n                    </tr>\n                    <tr>\n                        <td>\\\"10\\\"</td>\n                        <td>2</td>\n                        <td>Yes</td>\n                    </tr>\n                    <tr>\n                        <td>\\\"110\\\"</td>\n                        <td>3</td>\n                        <td>No</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n    <div class=\\\"solution-template\\\">\n        <h3>Solution Template</h3>\n        <pre><code>long countValidSubstrings(string S, int minLength, int maxLength) {\n    // Write your solution here\n}</code></pre>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1lLpff6hDQxUlpu7naFwJ80Jtg-MafFwZmaXnnJLNbgk/edit?usp=sharing",
        "solution_code": "long countValidSubstrings(string S, int minLength, int maxLength) {\\n    int n = S.length();\\n    long total = 0;\\n    int current_length = 0;\\n\\n    for(int i = 0; i < n; i++) {\\n        if(i == 0 || S[i] != S[i-1]){\\n            current_length += 1;\\n        }\\n        else{\\n            current_length = 1;\\n        }\\n\\n        if(current_length >= minLength){\\n            int valid_max = min(maxLength, current_length);\\n            int count = valid_max - minLength + 1;\\n            if(count > 0){\\n                total += count;\\n            }\\n        }\\n    }\\n\\n    return total;\\n}",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 396,
        "title": "Distinct Pair Difference",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h1>2. Question 2</h1>\n        <p>A number of bids are received for a project. Determine the number of distinct pairs of project costs where their absolute difference is some target value. Two pairs are distinct if they differ in at least one value.</p>\n        <h2>Example</h2>\n        <p><strong>n = 3</strong></p>\n        <p><strong>projectCosts = [1, 3, 5]</strong></p>\n        <p><strong>target = 2</strong></p>\n        <p>There are 2 pairs <code>[1, 3]</code> and <code>[3, 5]</code> with the target difference <code>target = 2</code>. Therefore, 2 is returned.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains an integer <code>n</code>, the number of elements in the array.</li>\n            <li>The second line contains <code>n</code> space-separated integers, representing the array <code>projectCosts</code>.</li>\n            <li>The third line contains an integer <code>target</code>, the absolute difference.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an integer representing the number of distinct pairs with an absolute difference of <code>target</code>.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>5 ≤ n ≤ 10<sup>5</sup></code></li>\n            <li><code>0 &lt; projectCosts[i] ≤ 2 × 10<sup>9</sup></code></li>\n            <li>Each <code>projectCosts[i]</code> is distinct, i.e., unique within the array.</li>\n            <li><code>1 ≤ target ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n1 5 3 4 2\n2</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>The following pairs meet the target difference of 2:</p>\n                <ul>\n                    <li>(1, 3)</li>\n                    <li>(5, 3)</li>\n                    <li>(4, 2)</li>\n                </ul>\n                <p>Therefore, the output is <code>3</code>.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n10\n363374326 364147530 61825163 107306571 128124602 139946991 428047635 491595254 879792181 106926279\n1</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>There are no pairs with a target difference of <code>1</code>, so the output is <code>0</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>\n",
        "google_doc_link": "https://docs.google.com/document/d/1l0CagVJ62oRlYD2FeYpkHqEq-hdep7DO0Cnh5x0RRXs/edit?usp=sharing",
        "solution_code": "int countPairs(vector<int> projectCosts, int target){\\n    unordered_set<long long> s;\\n    for(auto x: projectCosts) s.insert(x);\\n    int count =0;\\n    for(auto x: projectCosts){\\n        if(s.find((long long)x + target) != s.end()) count++;\\n    }\\n    return count;\\n}",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 429,
        "title": "Edge Computing Resource Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Edge Computing Resource Optimization</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>In an edge computing environment, required hardware includes edge devices, input peripherals, and bundles that encompass both types. Each resource comes at a cost, with edge devices priced at <code>edgeDeviceCost</code>, peripherals at <code>inputPeripheralCost</code>, and bundles at <code>bundleCost</code>.</p>\n        <p>The challenge is to optimize the procurement of resources. The objective is to ensure the provision of the right quantities of edge devices and peripherals, allowing for a degree of flexibility and accommodating extra equipment. This flexibility is provided to meet the requirements of the environment, which necessitates <code>x</code> edge devices and <code>y</code> peripherals. The primary goal is to minimize costs while simultaneously guaranteeing that the edge computing environment is equipped with all the essential resources. Compute and return the total expenditure.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li><code>edgeDeviceCost</code>: Cost of each edge device.</li>\n            <li><code>inputPeripheralCost</code>: Cost of each input peripheral.</li>\n            <li><code>bundleCost</code>: Cost of each bundle.</li>\n            <li><code>x</code>: Number of edge devices required.</li>\n            <li><code>y</code>: Number of peripherals required.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a single integer representing the total expenditure.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ edgeDeviceCost, inputPeripheralCost, bundleCost ≤ 10<sup>6</sup></code></li>\n            <li><code>1 ≤ x, y ≤ 10<sup>5</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nedgeDeviceCost = 1\ninputPeripheralCost = 2\nbundleCost = 2\nx = 2\ny = 1</pre>\n            <pre class=\\\"output\\\">Output:\n5</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this example, the total cost is calculated based on the number of edge devices and peripherals required, considering the costs of each resource.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1GvxF-2FwGPK0SYUDuihqcOyAZ1Q3X4mjDkqQxJIw_O0/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 430,
        "title": "Valid Substrings in Binary String",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Valid Substrings in Binary String</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A binary string <code>S</code> (containing only 0s and 1s) encodes an encryption key represented by the count of <strong>valid substrings</strong> in <code>S</code>.</p>\n        <p>A substring is <strong>valid</strong> if it meets the following conditions:</p>\n        <ul>\n            <li>No two adjacent characters are the same.</li>\n            <li>Its length is between <code>minLength</code> and <code>maxLength</code>, inclusive.</li>\n        </ul>\n        <p>Return the number of valid substrings, which represents the encryption key for <code>S</code>.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>A binary string <code>S</code>.</li>\n            <li>An integer <code>minLength</code>.</li>\n            <li>An integer <code>maxLength</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a single integer representing the count of valid substrings.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ |S| ≤ 10<sup>5</sup></code> (length of the string)</li>\n            <li><code>1 ≤ minLength ≤ maxLength ≤ |S|</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nS = \\\"1011\\\"\nminLength = 2\nmaxLength = 3</pre>\n            <pre class=\\\"output\\\">Output:\n5</pre>\n            <div class=\\\"explanation\\\">\n                <p>Valid substrings are: \\\"10\\\", \\\"01\\\", \\\"11\\\", \\\"10\\\", \\\"101\\\".</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1a1bQmwkYvHuaYT3hFfXRrdRIDwggNWnG7sdnMEqNZyo/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 431,
        "title": "Maximum Meetings with Positive Effectiveness Index",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Maximum Meetings with Positive Effectiveness Index</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A product manager has to organize <code>n</code> meetings with different people. Meeting with each person results in an increase or decrease in the effectiveness index of the manager. The manager wants to organize the meetings such that the index remains positive for as many meetings as possible. Find the maximum number of meetings for which the effectiveness index is positive. The index at the beginning is <code>0</code>.</p>\n        <p><strong>Note:</strong> After the meetings begin, the index must remain above <code>0</code> to be positive.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>An integer <code>n</code>, the number of meetings.</li>\n            <li>An array <code>effectiveness</code> of size <code>n</code>, where each element represents the increase or decrease in effectiveness for each meeting.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a single integer representing the maximum possible number of meetings while maintaining a positive index.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10<sup>5</sup></code></li>\n            <li><code>-10<sup>3</sup> ≤ effectiveness[i] ≤ 10<sup>3</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nn = 4\neffectiveness = [1, 20, 3, -2]</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>One optimal meeting order is <code>[3, 2, 1, -20]</code>. The index is positive for the first three meetings, after which it is <code>3 - 2 - 1 = 1</code>. So, the answer is <code>3</code>. There is no way to have <code>4</code> meetings with a positive index.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1-j8-PsDHSlnPkySo4Ll3fiHGVg4Zi-hl33sz_by4BDE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 448,
        "title": "Maximum Sum Downward Tree Path",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Maximum Sum Downward Tree Path</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Given a tree with <code>n</code> nodes, rooted at node <code>0</code> (nodes are numbered from <code>0</code> to <code>n-1</code>), with values assigned to nodes such that <code>values[i]</code> denotes the value of node <code>i</code>, find the maximal sum of values along any path starting at some node <code>u</code> and going only down the tree. In other words, only consider paths <code>u<sub>1</sub>, u<sub>2</sub>, ..., u<sub>k</sub></code> where each node <code>u<sub>i</sub></code> is a child of node <code>u<sub>i-1</sub></code> for <code>1 ≤ i ≤ k</code>. For example, given the following tree (labeled node number / value):</p>\n        <img src=\\\"tree_example.png\\\" alt=\\\"Tree Example\\\" />\n        <p>Two possible paths are <code>0 → 1 → 2</code> which has a sum of <code>5 + 7 + (-10) + 4 = 6</code> and <code>1 → 2 → 3</code> with a sum of <code>7 + (-10) + 4 = 1</code>. The highest sum path is <code>0 → 4</code> with a sum of <code>5 + 15 = 20</code>.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>Complete the function <code>bestSumDownwardTreePath</code> in the editor below. It must return an integer that denotes the largest sum of values along a path down the tree from any node <code>u</code>.</p>\n        <p><code>bestSumDownwardTreePath</code> has the following parameters:</p>\n        <ul>\n            <li><code>parent[parent[0], parent[1], ..., parent[n-1]]</code>: an array of integers where each <code>parent[i]</code> represents the parent node for node <code>i</code>; <code>parent[i] = -1</code> means node <code>i</code> is the root.</li>\n            <li><code>values[values[0], values[1], ..., values[n-1]]</code>: an array of integers where each <code>values[i]</code> is the value of node <code>i</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the maximum sum if the compression is possible or <code>-1</code> if it is not.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 1000</code></li>\n            <li><code>1 ≤ values[i] ≤ 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n0 -1 0\n5 7 -10 4</pre>\n            <pre class=\\\"output\\\">Output:\n20</pre>\n            <div class=\\\"explanation\\\">\n                <p>The maximum sum path is <code>0 → 4</code> with a sum of <code>5 + 15 = 20</code>.</p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n-1 0\n10 10</pre>\n            <pre class=\\\"output\\\">Output:\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>There are not enough nodes to form a valid path.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ugR4BacBQLx9SndFEQ7pUhZr-H0RKBNWVFTRNP-MD9o/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 451,
        "title": "Client-Server Architecture Traffic Management",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Client-Server Architecture Traffic Management</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>There is a client-server architecture with <code>n</code> clients and one server. Each client starts its interaction with the server at the second <code>start[i]</code> and stops at the second <code>end[i]</code>. The maximum traffic is defined as the maximum number of concurrent interactions with the server.</p>\n        <p>Find the earliest time at which the maximum number of clients are interacting with the server.</p>\n        <p><strong>Note:</strong> The endpoint is also included in the interaction.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer <code>n</code>, the number of clients.</p>\n        <p>The second line contains <code>REQUIREMENT</code> followed by three integers: <code>id</code>, <code>price</code>, and <code>seats</code>.</p>\n        <p>The next <code>n</code> lines contain the data in the format: <code>DATA id price</code>.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>For each message, output a single integer:</p>\n        <ul>\n            <li><strong>0</strong> if the message does not fulfill the requirement.</li>\n            <li>The number of seats requested if the requirement is fulfilled.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 100</code></li>\n            <li><code>1 ≤ price ≤ 1000</code></li>\n            <li><code>1 ≤ seats ≤ 10</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n10\nREQUIREMENT 1 100 3\nDATA 1 1\nDATA 1 110\nDATA 1 3\nDATA 0 0\nDATA 2 1\nDATA 2 2\nDATA 2 90\nDATA 2 4\nDATA 0 0\nDATA 0 0</pre>\n            <pre class=\\\"output\\\">Output:\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0</pre>\n            <div class=\\\"explanation\\\">\n                <p>The message with id 1 does not fulfill the requirement because the price of 110 is higher than the required 100.</p>\n                <p>The message with id 2 does fulfill the requirement. The requirement is fulfilled once the number of available seats is received, so an order message for original message id 2 and 3 seats (as per the requirement) is sent. At all other times, no message is being sent (0).</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1aeOhzYLhTTA3La3ZE90esBjpAHiLbiVkmRBor3O1Jyk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 452,
        "title": "Binary String Substring Count",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Binary String Substring Count</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A binary string is a string consisting only of 0s and 1s. A substring is a contiguous group of characters within a string.</p>\n        <p>Given a binary string, find the number of substrings that contain an equal number of 0s and 1s and all the 0s and 1s are grouped together. Note that duplicate substrings are also counted in the answer. For example, <code>\\'0011\\'</code> has two overlapping substrings that meet the criteria: <code>\\'0011\\'</code> and <code>\\'01\\'</code>.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of a single binary string <code>s</code>.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the number of valid substrings that meet the criteria.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ |s| ≤ 100</code>, where <code>|s|</code> is the length of the string.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\ns = \\\"011001\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The substrings \\\"01\\\", \\\"10\\\", \\\"1100\\\", and \\\"01\\\" have equal numbers of 0s and 1s with all 0s and 1s grouped consecutively. Hence, the answer is 4.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1NiAJy5i_YLxIrNvRDu-igsqeJBUbb_bA2WxkF5fDDjg/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 453,
        "title": "Faulty Server Detection and Replacement",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Faulty Server Detection and Replacement</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Implement a prototype service to automate the detection and replacement of faulty servers to improve the availability of an application.</p>\n        <p>There are <code>n</code> servers with ids <code>s<sub>1</sub>, s<sub>2</sub>, ..., s<sub>n</sub></code>, and an array of strings, <code>logs</code>, of size <code>m</code>. Log format is <code>&lt;server_id&gt; &lt;success/error&gt;</code>: the id of the server, and the status of the processed request. If a particular server id logs an error for three consecutive requests, it is considered faulty and is replaced with a new server with the same id.</p>\n        <p>Given <code>n</code> and the array <code>logs</code>, find the number of times a faulty server was replaced.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer <code>n</code>, the number of servers.</p>\n        <p>The second line contains an array of strings <code>logs</code> of size <code>m</code>.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the number of times a server was replaced.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 100</code></li>\n            <li><code>1 ≤ m ≤ 1000</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n[\\\"s1 error\\\", \\\"s1 error\\\", \\\"s2 error\\\", \\\"s1 error\\\", \\\"s1 error\\\", \\\"s1 error\\\", \\\"s2 success\\\"]</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>The server <code>s1</code> is detected as faulty after logging three consecutive errors and is replaced once.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1CoUS4xR93kHYXvNGGmiTVmKIBoaVaXBOms4h0NvBlHY/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 457,
        "title": "Count Pairs",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <h2>Count Pairs</h2>\\n    \\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <p>A number of bids are received for a project. Determine the number of distinct pairs of project costs where their absolute difference is some target value. Two pairs are distinct if they differ in at least one value.</p>\\n        \\n        <h3>Example</h3>\\n        <p>Given:</p>\\n        <pre>n = 3\\nprojectCosts = [1, 3, 5]\\ntarget = 2</pre>\\n        <p>There are 2 pairs <code>[1, 3]</code> and <code>[3, 5]</code> with the target difference <code>target = 2</code>. Therefore, <strong>2</strong> is returned.</p>\\n    </div>\\n    \\n    <div class=\\\\\\\"input-format\\\\\\\">\\n        <h3>Input Format</h3>\\n        <p>Complete the function <code>countPairs</code> in the editor below:</p>\\n        <ul>\\n            <li><code>int projectCosts[n]</code>: array of integers</li>\\n            <li><code>int target</code>: the target difference</li>\\n        </ul>\\n    </div>\\n    \\n    <div class=\\\\\\\"output-format\\\\\\\">\\n        <h3>Output Format</h3>\\n        <p>Return <code>int</code>: the number of distinct pairs in <code>projectCosts</code> with an absolute difference of <code>target</code>.</p>\\n    </div>\\n    \\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li><code>3 ≤ n ≤ 10<sup>5</sup></code></li>\\n            <li><code>0 ≤ projectCosts[i] ≤ 2 × 10<sup>9</sup></code></li>\\n            <li><code>1 ≤ target ≤ 10<sup>9</sup></code></li>\\n        </ul>\\n    </div>\\n    \\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Examples</h3>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n3\\n1 3 5\\n2</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n2</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>There are two pairs with an absolute difference of 2: <code>[1, 3]</code> and <code>[3, 5]</code>.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1_JQw4FGu3DvynKudOXR_ZqhnE2t9xBIkIf-LUoPk550/edit?usp=sharing",
        "solution_code": "int countPairs(vector<int> projectCosts, int target){\\n    unordered_set<long long> s;\\n    for(auto x: projectCosts) s.insert(x);\\n    int count =0;\\n    for(auto x: projectCosts){\\n        if(s.find((long long)x + target) != s.end()) count++;\\n    }\\n    return count;\\n}",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 458,
        "title": "Minimum Cost Calculation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Minimum Cost Calculation</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>In an edge computing environment, required hardware includes edge devices, input peripherals, and bundles that encompass both types. Each resource comes at a cost, with edge devices priced at <code>edgeDeviceCost</code>, peripherals at <code>inputPeripheralCost</code>, and bundles at <code>bundleCost</code>.</p>\n        <p>The challenge is to optimize the procurement of resources. The objective is to ensure the provision of the right quantities of edge devices and peripherals, allowing for a degree of flexibility, and accommodating extra equipment. This flexibility is provided to meet the requirements of the environment, which necessitates <code>x</code> edge devices and <code>y</code> peripherals. The primary goal is to minimize costs while simultaneously guaranteeing that the edge computing environment is equipped with all the essential resources. Compute and return the total expenditure.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The function <code>getMinimumCost</code> accepts the following parameters:</p>\n        <ul>\n            <li><code>int edgeDeviceCost</code>: cost of an edge device</li>\n            <li><code>int inputPeripheralCost</code>: cost of an input peripheral</li>\n            <li><code>int bundleCost</code>: cost of a bundle</li>\n            <li><code>int x</code>: number of edge devices required</li>\n            <li><code>int y</code>: number of peripherals required</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a <code>long</code> integer representing the minimum total expenditure.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ x, y ≤ 10<sup>5</sup></code></li>\n            <li><code>0 ≤ edgeDeviceCost, inputPeripheralCost, bundleCost ≤ 2 × 10<sup>9</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n1\n2\n2\n2\n2</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>The most cost-effective strategy is to purchase 1 edge device and 1 bundle pack with a total of 1 + 2 = 3 units. Any other approach results in a higher cost. The minimum total expenditure is 3 units.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Cj14l5_gIFBjEWtVPbfIGVnCmairNXGFhBXWRWxvjNA/edit?usp=sharing",
        "solution_code": "long calcMinCost(int dP, int pP, int pC, int dQ, int pQ) {\\n    long indCost = static_cast<long>(dP) * dQ + static_cast<long>(pP) * pQ;\\n    int bCnt = std::min(dQ, pQ);\\n    long bCost = static_cast<long>(pC) * bCnt;\\n    int remD = std::max(0, dQ - bCnt);\\n    int remP = std::max(0, pQ - bCnt);\\n    long combCost = bCost + static_cast<long>(dP) * remD + static_cast<long>(pP) * remP;\\n    return std::min(indCost, combCost);\\n}\\n",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 467,
        "title": "Test Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Test Optimization</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>A student is taking a test on <code>n</code> different subjects. For each <code>i<sup>th</sup></code> subject, they have already answered <code>answered[i]</code> questions and have time to answer a total of <code>q</code> more questions overall. For each <code>i<sup>th</sup></code> subject, the number of questions answered has to be at least <code>needed[i]</code> in order to pass. Determine the maximum number of subjects the student can pass if the <code>q</code> additional answers are optimally distributed among the subjects.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains two integers <code>n</code> and <code>q</code>, where:</p>\n        <ul>\n            <li><code>n</code> is the number of subjects.</li>\n            <li><code>q</code> is the number of additional questions the student can answer.</li>\n        </ul>\n        <p>The second line contains <code>n</code> space-separated integers representing <code>needed[i]</code>.</p>\n        <p>The third line contains <code>n</code> space-separated integers representing <code>answered[i]</code>.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer representing the maximum number of subjects the student can pass.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 100</code></li>\n            <li><code>0 ≤ q ≤ 1000</code></li>\n            <li><code>0 ≤ needed[i], answered[i] ≤ 100</code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2 1\n4 5\n2 4</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this example, the student can pass one subject by answering one additional question in the second subject.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1MUwPGJStBrwOrqnVSXK15mEuu6G7xdOpGL8xK5S7e-Y/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 468,
        "title": "Internet Gateway Firewall Query",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Internet Gateway Firewall Query</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>As part of data center software development, create a query that returns a list of all Internet gateways that meet the following criteria:</p>\n        <ul>\n            <li>They have more than one firewall assigned.</li>\n            <li>Their assigned firewalls have cumulatively reached the maximum allowed number of traffic rules.</li>\n        </ul>\n        <p>The result should have the following columns:</p>\n        <ul>\n            <li><code>gateway_id</code> - Internet gateway ID</li>\n            <li><code>total_rules_count</code> - the sum of all firewall rules for a specific Internet gateway</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of the necessary data tables that include information about gateways and firewalls.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The output should return the list of Internet gateways that meet the specified criteria, formatted as described above.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Each Internet gateway can be assigned one or more firewalls, while a particular firewall can belong to only one specific Internet gateway.</li>\n            <li>Only Internet gateways that have more than one firewall assigned should be included in the result.</li>\n            <li>Only Internet gateways whose assigned firewalls in total have reached the maximum allowed number of traffic rules should be included in the result.</li>\n            <li>The maximum number of traffic rules allowed is 100.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[Sample input]</pre>\n            <pre class=\\\"output\\\">Output:\n[Sample output]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation of the output if necessary.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1jyXXVCt2z-FMUAIxbEpHcvvYhBMzAMVZgWXGVrCa2nE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    },
    {
        "id": 469,
        "title": " Total Session Duration Query",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Total Session Duration Query</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>An employee of the Trust and Security department of InternetBank needs a report of the total duration of user sessions for a specific city.</p>\n        <p>Write a query to get the city names along with the total session duration for each city. The total session duration is the sum of all user session durations in that city.</p>\n        <p>The output should be structured as <code>cities.name</code> and <code>duration</code>.</p>\n        <p>The output is sorted ascending by duration.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of the necessary data tables that include information about cities and user sessions.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The output should return the city names along with the total session duration for each city, formatted as specified above.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Each city can have multiple user sessions.</li>\n            <li>The maximum number of user sessions per city is not specified but should be manageable within typical database limits.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[Sample input]</pre>\n            <pre class=\\\"output\\\">Output:\n[Sample output]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation of the output if necessary.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1GMhuOj8W2ClXQz8x9h6Z4XO8BZVSuUNBMP40cIkf_Ug/edit?usp=sharing",
        "solution_code": "",
        "company_name": "IBM",
        "company_id": 104
    }
]