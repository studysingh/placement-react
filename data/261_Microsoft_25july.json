[
    {
        "id": 852,
        "title": "Final Price",
        "problem_statement": "<h1>Final Price</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A shopkeeper arranges items in a list for a sale. Starting from the left, each item is sold at its full price minus the price of the first item to its right that is of equal or lower price. If no such item exists, the current item is sold at its full price. Print the sum of the final cost for all items, then on the next line, print space-separated, 0-based indices of items that are sold at full price, in ascending order.</p>\r\n<p>For example, consider the item prices [2, 3, 1, 2, 4, 2].</p>\r\n<ul>\r\n    <li>Items at indices 0 and 1 are each discounted by 1 unit, the first equal or lower price to their right.</li>\r\n    <li>Item 2, priced at 1 unit, sells at full price as there are no equal or lower-priced items to its right.</li>\r\n    <li>Item 3, priced at 2 units, is discounted by 2 units to 0.</li>\r\n    <li>Item 4, priced at 4 units, is discounted by 2 units to 2.</li>\r\n    <li>The final item, priced at 2 units, is sold at full price as there are no items to its right.</li>\r\n</ul>\r\n<p>The total cost amounts to 1 + 2 + 1 + 0 + 2 + 2 = 8 units, with full price items at indices [2, 5] using 0-based indexing. The output is:</p>\r\n<pre><code class='language-text'>8\r\n2 5</code></pre>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function `finalPrice` in the editor with the following parameter(s):</p>\r\n<pre><code class='language-text'>int prices[n]: an array of item prices</code></pre>\r\n\r\n<h2>Returns</h2>\r\n<p>None. Instead, print the total cost of all items on the first line. On the second line, print a space-separated list of integers representing the indices of the items purchased at full price, in ascending index order.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= prices[i] &lt;= 10^9</code>, where <code>0 &lt;= i &lt; n</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: prices = [5, 1, 3, 4, 6, 2]\r\nOutput: 14\r\n1 5</code></pre>\r\n<p><strong>Explanation:</strong> The prices of the items are given by the array:</p>\r\n<pre><code class='language-text'>index   0  1  2  3  4  5\r\nprices = [5, 1, 3, 4, 6, 2]</code></pre>\r\n<p>We can find the discount on each item:</p>\r\n<ul>\r\n    <li><code>prices[0] = 5</code>, first lower or equal price to the right = <code>prices[1] = 1</code>, discounted price = <code>5 - 1 = 4</code></li>\r\n    <li><code>prices[1] = 1</code>, no lower or equal price to the right, so no discount, price = <code>1</code></li>\r\n    <li><code>prices[2] = 3</code>, first lower or equal = <code>prices[5] = 2</code>, discounted price = <code>3 - 2 = 1</code></li>\r\n    <li><code>prices[3] = 4</code>, first lower or equal = <code>prices[5] = 2</code>, discounted price = <code>4 - 2 = 2</code></li>\r\n    <li><code>prices[4] = 6</code>, first lower or equal = <code>prices[5] = 2</code>, discounted price = <code>6 - 2 = 4</code></li>\r\n    <li><code>prices[5] = 2</code>, no lower or equal to the right, so no discount, price = <code>2</code></li>\r\n</ul>\r\n<p>The final discounted price is 4 + 1 + 1 + 2 + 4 + 2 = 14. There is no discount for items 1 or 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: prices = [1, 3, 3, 2, 5]\r\nOutput: 9\r\n0 3 4</code></pre>\r\n<p><strong>Explanation:</strong> The prices of the items are given by the array:</p>\r\n<pre><code class='language-text'>index   0  1  2  3  4\r\nprices = [1, 3, 3, 2, 5]</code></pre>\r\n<p>We can find the discount on each item:</p>\r\n<ul>\r\n    <li><code>prices[0] = 1</code>, no lower or equal price to the right, no discount, price = <code>1</code></li>\r\n    <li><code>prices[1] = 3</code>, first lower or equal to the right = <code>prices[3] = 2</code>, discounted price = <code>3 - 2 = 1</code></li>\r\n    <li><code>prices[2] = 3</code>, first lower or equal to the right = <code>prices[3] = 2</code>, discounted price = <code>3 - 2 = 1</code></li>\r\n    <li><code>prices[3] = 2</code>, no lower or equal price to the right, no discount, price = <code>2</code></li>\r\n    <li><code>prices[4] = 5</code>, no lower or equal price to the right, no discount, price = <code>5</code></li>\r\n</ul>\r\n<p>The final discounted price is 1 + 1 + 1 + 2 + 5 = 9. There is no discount for items 0, 3, or 4.</p>\r\n\r\n<pre><code class='language-java'>public static void finalPrice(List&lt;Integer&gt; prices) {\r\n    // Write your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_25july",
        "company_id": 261
    },
    {
        "id": 853,
        "title": "Maximum Combined Reward Points",
        "problem_statement": "<h1>Maximum Combined Reward Points</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Two interns at HackerRank are assigned to complete a total of <code>n</code> tasks. Each task can be completed by either intern. The first intern earns <code>reward_1[i]</code> points for finishing the <code>i</code>-th task, while the second intern earns <code>reward_2[i]</code> points for the same task.</p>\r\n<p>To maximize the total reward points for both interns, determine the highest possible combined reward points if the first intern is required to complete <code>k</code> tasks, and the second intern completes the remaining tasks.</p>\r\n<p>Note: The <code>k</code> tasks for the first intern can be any of the <code>n</code> tasks.</p>\r\n<p>Complete the function <code>getMaximumRewardPoints</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int k</code>: the number of tasks that have to be completed by intern 1</li>\r\n    <li><code>int reward_1[n]</code>: the reward points earned by intern 1 for each task</li>\r\n    <li><code>int reward_2[n]</code>: the reward points earned by intern 2 for each task</li>\r\n</ul>\r\n<p>The function is expected to return an <code>int</code>, representing the maximum possible combined reward points when intern 1 completes exactly <code>k</code> tasks.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 5, k = 3, reward_1 = [5, 4, 3, 2, 1], reward_2 = [1, 2, 3, 4, 5]\r\nOutput: 21</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 completes 3 tasks, while intern 2 completes the other 2. To maximize the points, intern 1 takes the first 3 tasks, and intern 2 takes the last 2 tasks. The total reward points are 5 + 4 + 3 (from intern 1) + 4 + 5 (from intern 2) = 21, which is the maximum possible. So, the answer is 21.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 4, k = 2, reward_1 = [2, 3, 4, 2], reward_2 = [1, 1, 1, 1]\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> Intern 1 has to complete 2 tasks, and intern 2 completes the remaining 2 tasks. In order to maximize the points gained, intern 1 completes the second and third tasks, while intern 2 completes the first and fourth tasks. Total reward points gained = 4 + 3 (from intern 1) + 1 + 1 (from intern 2) = 9.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>0 <= k <= n</code></li>\r\n    <li><code>1 <= reward_1[i] <= 10^4</code></li>\r\n    <li><code>1 <= reward_2[i] <= 10^4</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_25july",
        "company_id": 261
    },
    {
        "id": 880,
        "title": "Token Authentication System",
        "problem_statement": "<h1>Token Authentication System</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a session-based authentication system that manages user sessions with unique tokens and configurable time-to-live (TTL) values. Each token has an expiration time calculated by adding the TTL (in seconds) to the creation time. Tokens can be renewed before expiration to extend their validity.</p>\r\n<p>The system must support these three operations:</p>\r\n<ul>\r\n    <li><strong>generate &lt;token_id&gt; &lt;current_time&gt;</strong>: At the current time, creates a new token with the specified id.</li>\r\n    <li><strong>renew &lt;token_id&gt; &lt;current_time&gt;</strong>: At the current time, extends an existing, unexpired token's expiration time. The request is ignored if the token has expired or does not exist.</li>\r\n    <li><strong>count &lt;current_time&gt;</strong>: Returns the number of unexpired tokens at the current time.</li>\r\n</ul>\r\n<p><strong>Important Note:</strong> Token expiration is evaluated before processing any actions at the same timestamp. If a token's expiration time exactly matches the current time, the token is considered expired and cannot be renewed or counted.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> <code>time_to_live = 5</code>, <code>queries = [\"generate aaa 1\", \"renew aaa 2\", \"count 6\", \"generate bbb 7\", \"renew bbb 8\", \"renew bbb 10\", \"count 15\"]</code></p>\r\n<pre><code class='language-text'>Output: [1,0]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nAt <code>t = 6</code>, the only unexpired token is \"aaa\". At <code>t = 15</code>, all tokens have expired, so the count of unexpired tokens is 0.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Input:</strong> <code>time_to_live = 3</code>, <code>queries = [\"generate token1 3\", \"count 4\", \"generate token2 6\", \"count 7\", \"generate token3 11\", \"count 41\"]</code></p>\r\n<pre><code class='language-text'>Output: [1,1,0]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe <code>time_to_live</code> is 3 seconds.</p>\r\n<ol>\r\n    <li>At <code>t=3</code>, a token with <code>id=\"token1\"</code> is generated. Its expiration time is <code>3 + 3 = 6</code>. Current active tokens: <code>{token1: 6}</code>.</li>\r\n    <li>At <code>t=4</code>, a <code>count</code> query is performed. <code>token1</code> is still active (expires at 6). The count is 1. Output: <code>[1]</code>.</li>\r\n    <li>At <code>t=6</code>, a token with <code>id=\"token2\"</code> is generated. Before processing this action, <code>token1</code> expires at <code>t=6</code>, so it is removed. Then <code>token2</code> is generated, expiring at <code>6 + 3 = 9</code>. Current active tokens: <code>{token2: 9}</code>.</li>\r\n    <li>At <code>t=7</code>, a <code>count</code> query is performed. <code>token2</code> is still active (expires at 9). The count is 1. Output: <code>[1, 1]</code>.</li>\r\n    <li>At <code>t=11</code>, a token with <code>id=\"token3\"</code> is generated. Before processing this action, <code>token2</code> expires at <code>t=9</code>, so it is removed. Then <code>token3</code> is generated, expiring at <code>11 + 3 = 14</code>. Current active tokens: <code>{token3: 14}</code>.</li>\r\n    <li>At <code>t=41</code>, a <code>count</code> query is performed. Before processing this action, <code>token3</code> expires at <code>t=14</code>, so it is removed. No active tokens. The count is 0. Output: <code>[1, 1, 0]</code>.</li>\r\n</ol>\r\n\r\n<h3>Example 3:</h3>\r\n<p><strong>Input:</strong> <code>time_to_live = 9</code>, <code>queries = [\"generate token1 3\", \"renew token1 5\", \"generate token2 7\", \"renew token2 8\", \"generate token3 9\", \"count 12\"]</code></p>\r\n<pre><",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_25july",
        "company_id": 261
    }
]