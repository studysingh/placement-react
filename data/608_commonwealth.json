[
    {
        "id": 1732,
        "title": "Pass the Ball",
        "problem_statement": "<h1>Pass the Ball</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Assume that a group of N players are playing a game. In this game, a player must pass the ball to another player. A player P holds the ball at the beginning of the game. A maximum of X moves are allowed while passing the ball such that it ends up with the same player who started the game. Given below is the condition that must be followed by all the players while passing the ball:</p>\r\n<ul>\r\n    <li>A player K1 can pass the ball to another player K2 if K1 divides K2 or K2 divides K1.</li>\r\n</ul>\r\n<p>Your task is to find and return an integer value representing the number of possible ways to complete the game.</p>\r\n<p><strong>Note:</strong> A game is considered as 'complete' if the ball ends up with the player who started it.</p>\r\n\r\n<h2>Input Specification</h2>\r\n<p>input1: An integer value N, representing the number of players.</p>\r\n<p>input2: An integer value P, representing the player who starts the game.</p>\r\n<p>input3: An integer value X, representing the maximum number of moves allowed to pass the ball.</p>\r\n\r\n<h2>Output Specification</h2>\r\n<p>Return an integer value representing the number of possible ways to complete the game.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ninput1: 3\r\ninput2: 2\r\ninput3: 2\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 players in the game and, initially, the 2nd player has the ball. A maximum of 2 moves are allowed, so the game can be completed in the following way:</p>\r\n<ul>\r\n    <li>2 -> 1 -> 2 Here, player 2 can pass the ball to player 1 as 1 divides 2. For the same reason, player 1 can pass the ball to player 2.</li>\r\n</ul>\r\n<p>Since there is only 1 possible way to complete the game, 1 is returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ninput1: 3\r\ninput2: 2\r\ninput3: 4\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 players in the game and, initially, the 2nd player has the ball. There is a maximum of 4 moves allowed, so the game can be completed in the following way:</p>\r\n<ul>\r\n    <li>2 -> 1 -> 2 -> 1 -> 2</li>\r\n    <li>2 -> 1 -> 3 -> 1 -> 2 (Assuming 1 can pass to 3, and 3 can pass to 1, as 1 divides 3)</li>\r\n    <li>2 -> 3 -> 1 -> 3 -> 2 (Assuming 2 can pass to 3, and 3 can pass to 1, and 1 can pass to 3, and 3 can pass to 2)</li>\r\n</ul>\r\n<p>The image cuts off the full explanation, but based on the output '3', there are three distinct paths that satisfy the conditions.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>N is an integer representing the number of players.</li>\r\n    <li>P is an integer representing the starting player.</li>\r\n    <li>X is an integer representing the maximum number of moves allowed.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param N An integer value representing the number of players.\n     * @param P An integer value representing the player who starts the game.\n     * @param X An integer value representing the maximum number of moves allowed to pass the ball.\n     * @return An integer value representing the number of possible ways to complete the game.\n     */\n    int solve(int N, int P, int X) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N, P, X;\n    std::cin >> N;\n    std::cin >> P;\n    std::cin >> X;\n\n    Solution solution;\n    int result = solution.solve(N, P, X);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "commonwealth",
        "company_id": 608
    }
]