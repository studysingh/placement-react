[
    {
        "id": 1400,
        "title": "Infection Sequences",
        "problem_statement": "<h1>Infection Sequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a town with <code>n</code> houses aligned in a straight line, numbered from 1 to <code>n</code> from left to right, a virus is spreading from <code>m</code> initially infected houses. Each day, an infected house spreads the virus to its immediate uninfected neighbors.</p>\r\n<p>Specifically, if house number <code>X</code> is infected on day <code>i</code>, then houses <code>X+1</code> and <code>X-1</code> will become infected on day <code>i+1</code> if they are not already infected. Eventually, all houses will become infected. The sequence in which the houses get infected is called the infection sequence.</p>\r\n<p>Given an integer <code>n</code> and an integer array <code>infectedHouses</code> representing the initially infected houses, determine the total number of distinct infection sequences possible, modulo (10<sup>9</sup> + 7).</p>\r\n\r\n<p>Complete the function <code>getInfectionSequencesCount</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of houses</li>\r\n    <li><code>int infectedHouses[m]</code>: the currently infected houses</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of infection sequences modulo (10<sup>9</sup> + 7)</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>int getInfectionSequencesCount(int n, std::vector&lt;int&gt; infectedHouses) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 5\r\ninfectedHouses = [1, 5]</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initially, houses 1 and 5 are infected.</p>\r\n<p>On Day 1, both houses numbers 2 and 4 become infected.</p>\r\n<p>On Day 2, house number 3 is infected. Now all the houses are infected.</p>\r\n<p>There is no way that house number 3 can be infected before houses 2 and 4. The 2 possible infection sequences are [2,4,3] and [4,2,3]. Return 2 modulo (10<sup>9</sup>+7) = 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Input:</strong></p>\r\n<pre><code class='language-text'>n = 6\r\ninfectedHouses = [3, 5]</code></pre>\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initially, houses 3 and 5 are infected. The houses look like this : [1,2,3,4,5,6].</p>\r\n<p>On Day 1, houses numbers 2,4,6 get infected. The houses look like this : [1,2,3,4,5,6].</p>\r\n<p>On Day 2, house number 1 gets infected. All the houses are infected now.</p>\r\n<p>The 6 possible infection sequences are : [2,4,6,1], [2,6,4,1], [4,2,6,1], [4,6,2,1], [6,2,4,1], [6,4,2,1].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; m &le; n-1</code></li>\r\n    <li><code>1 &le; infectedHouses[i] &le; n</code></li>\r\n    <li>All elements of the array are distinct.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_8sep",
        "company_id": 489
    }
]