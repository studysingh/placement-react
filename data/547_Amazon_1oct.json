[
    {
        "id": 1558,
        "title": "Code Question 1",
        "problem_statement": "<h1>Code Question 1</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your team at Amazon is building a quiz-style application to help students prepare for certification exams. Each quiz module tests one or more subjects and limits the number of answers students can provide. You have been asked to examine the impact of this limit on the ability of students to pass certain subjects within quiz modules. To do this, please review and solve for the following: imagine a student has already answered <code>answered[i]</code> questions in each of the <code>n</code> subjects, and still has time to answer a total of <code>q</code> more questions overall. For each <code>i<sup>th</sup></code> subject, the number of questions answered has to be at least <code>needed[i]</code> in order to pass. Determine the maximum number of subjects the student can pass if the <code>q</code> additional answered questions are optimally distributed among the subjects.</p>\r\n\r\n<p>For example, consider that there are <code>n = 2</code> subjects and <code>needed = [4, 5]</code> answered questions, respectively, to pass. Imagine the student has answered <code>answered = [2, 4]</code> questions in the two subjects so far, and can answer another <code>q = 1</code> question across all subjects combined. In that case, the best outcome is to answer an additional question in the second subject in order to pass it, as 2 more answers are required to pass the first subject. The maximum number of subjects that can be passed is 1.</p>\r\n\r\n<p>Complete the function <code>findMaximumNum</code> in the editor below. The function must return an integer that represents the maximum number of subjects that can be passed.</p>\r\n\r\n<p>The function <code>findMaximumNum</code> has the following parameters:</p>\r\n<ul>\r\n<li><code>answered[0]...answered[n-1]</code>: an array of integers</li>\r\n<li><code>needed[0]...needed[n-1]</code>: an array of integers</li>\r\n<li><code>q</code>: an integer</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>int findMaximumNum(vector<int> answered, vector<int> needed, int q) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nanswered = [24, 27, 0]\r\nneeded = [51, 52, 100]\r\nq = 100\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The questions still needed for each subject are <code>[max(0, 51-24), max(0, 52-27), max(0, 100-0)] = [27, 25, 100]</code>. To pass the first two subjects, <code>27 + 25 = 52</code> additional questions are required. Since <code>q = 100</code>, we have enough questions to pass these two subjects. To pass the third subject alone would require <code>100</code> questions. Optimally, we can pass 2 subjects.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nanswered = [24, 27, 0]\r\nneeded = [51, 52, 97]\r\nq = 200\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The questions still needed for each subject are <code>[max(0, 51-24), max(0, 52-27), max(0, 97-0)] = [27, 25, 97]</code>. To pass all three subjects, a total of <code>27 + 25 + 97 = 149</code> additional questions are required. Since <code>q = 200</code> and <code>149 <= 200</code>, there are enough questions to pass all three subjects. The remaining <code>200 - 149 = 51</code> questions can be distributed at random.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n<li><code>0 <= answered[i] <= 10<sup>9</sup></code></li>\r\n<li><code>0 <= needed[i] <= 10<sup>9</sup></code></li>\r\n<li><code>0 <= q <= 10<sup>9</sup></code></li>\r\n<li><code>0 <= answered[i] <= needed[i]</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_1oct",
        "company_id": 547
    },
    {
        "id": 1559,
        "title": "Distinct Stock Profit Pairs",
        "problem_statement": "<h1>Distinct Stock Profit Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A financial analyst for Amazon Web Services (AWS) is responsible for a portfolio of profitable stocks represented by an array. Each item in the array represents the yearly profit of a corresponding stock. The Amazonian gathers all distinct pairs of stocks that yielded the target profit. Distinct pairs are pairs that differ in at least one element. Given the array of profits, find the number of distinct pairs of stocks where the sum of each pair's profits is exactly equal to the target profit.</p>\r\n<p>Complete the function <code>getDistinctPairs</code> in the editor below.</p>\r\n<p><code>getDistinctPairs</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int stocksProfit[n]</code>: an array of integers representing the stocks profits</li>\r\n    <li><code>target</code>: an integer representing the yearly target profit</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the total number of pairs determined</li>\r\n</ul>\r\n<p>The function signature is:</p>\r\n<pre><code class='language-javascript'>int getDistinctPairs(vector&lt;int&gt; stocksProfit, long target)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: stocksProfit = [5, 7, 9, 12, 11, 6, 6, 3], target = 12\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> There are 4 pairs of stocks that have the sum of their profits equal to the target 12. Note that because there are two instances of 6 in <code>stocksProfit</code> there are two pairs matching (6, 6). <code>stocksProfit</code> indices 2 and 7, and indices 3 and 8, but only one can be included. There are 3 distinct pairs of stocks: (6, 6), (3, 9), and the return value is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: stocksProfit = [1, 3, 46, 1, 3, 9], target = 47\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> There are 4 pairs where <code>stocksProfit[i] + stocksProfit[j] = 47</code>:</p>\r\n<ol>\r\n    <li>(<code>stocksProfit[0] = 1</code>, <code>stocksProfit[2] = 46</code>)</li>\r\n    <li>(<code>stocksProfit[2] = 46</code>, <code>stocksProfit[0] = 1</code>)</li>\r\n    <li>(<code>stocksProfit[3] = 1</code>, <code>stocksProfit[2] = 46</code>)</li>\r\n    <li>(<code>stocksProfit[2] = 46</code>, <code>stocksProfit[3] = 1</code>)</li>\r\n</ol>\r\n<p>Since all four pairs contain the same values, there is only 1 distinct pair of stocks: (1, 46).</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: stocksProfit = [6, 3, 9, 3, 6], target = 12\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are 5 pairs where <code>stocksProfit[i] + stocksProfit[j] = 12</code>:</p>\r\n<ol>\r\n    <li>(<code>stocksProfit[0] = 6</code>, <code>stocksProfit[1] = 6</code>)</li>\r\n    <li>(<code>stocksProfit[0] = 6</code>, <code>stocksProfit[4] = 6</code>)</li>\r\n    <li>(<code>stocksProfit[1] = 3</code>, <code>stocksProfit[2] = 9</code>)</li>\r\n    <li>(<code>stocksProfit[2] = 9</code>, <code>stocksProfit[1] = 3</code>)</li>\r\n    <li>(<code>stocksProfit[3] = 3</code>, <code>stocksProfit[2] = 9</code>)</li>\r\n    <li>(<code>stocksProfit[4] = 6</code>, <code>stocksProfit[0] = 6</code>)</li>\r\n</ol>\r\n<p>The first 2 pairs are the same, as are the last 4. There are only 2 distinct pairs of stocks: (3, 9) and (6, 6).</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 5 * 10^5</code></li>\r\n    <li><code>0 &lt;= stocksProfit[i] &lt;= 10^9</code></li>\r\n    <li><code>0 &lt;= target &lt;= 5 * 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_1oct",
        "company_id": 547
    }
]