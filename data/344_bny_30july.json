[
    {
        "id": 1056,
        "title": "Largest Subset",
        "problem_statement": "<h1>Largest Subset</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a scheduling system, there are n events represented by two arrays, start and finish, both of size n. The i<sup>th</sup> event begins at start[i] and ends at finish[i] (where 0 &lt;= i &lt; n).</p>\r\n<p>A subset of these events is considered high-priority if at least one event within it overlaps or intersects with every other event in the subset.</p>\r\n<p>Determine the maximum size of a high-priority subset of events.</p>\r\n\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>Events that overlap at their start or end times are considered to intersect.</li>\r\n    <li>There may be multiple events with the same start and end times.</li>\r\n</ul>\r\n\r\n<p><strong>Function Description:</strong></p>\r\n<p>Complete the function <code>getSubSetLength</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: integer</li>\r\n    <li><code>int start[n]</code>: event start times</li>\r\n    <li><code>int finish[n]</code>: event end times</li>\r\n</ul>\r\n\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: length of the largest high-priority subset of events</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nstart = [1, 2, 3, 4]\r\nfinish = [2, 3, 5, 5]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The largest high-priority subset is { [2, 3], [3, 5], [4, 5] } where event [3, 5] intersects the remaining events in the subset. Therefore, the largest size of such a subset is possible is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nstart = [1, 3, 4, 6, 9]\r\nfinish = [2, 8, 5, 7, 10]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The largest high-priority subset is { [3, 8], [4, 5], [6, 7] } where event [3, 8] intersects the remaining events in the subset.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nstart = [1, 2, 4]\r\nfinish = [7, 5, 6]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The largest high-priority subset is { [1, 7], [2, 5], [4, 6] } where event [2, 5] intersects the remaining events in the subset.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= start[i] &lt;= finish[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<p><strong>Input Format for Custom Testing:</strong></p>\r\n<p>The first line contains an integer, n, denoting the number of events.</p>\r\n<p>Each of the next n lines contains an integer describing start[i].</p>\r\n<p>The next line contains integer n, denoting the number of events.</p>\r\n<p>Each of the next n lines contains an integer describing finish[i].</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "bny_30july",
        "company_id": 344
    },
    {
        "id": 1057,
        "title": "Merge Networks",
        "problem_statement": "<h1>Merge Networks</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Developers are working on a new mapping library to help road planning. They are working on a new approach to minimize distances between places. Currently, there are two networks of places, networkA and networkB. networkA has <code>networkA_nodes</code> nodes and <code>networkA_edges</code> edges. networkB has <code>networkB_nodes</code> nodes and <code>networkB_edges</code> edges. <code>networkA_from[i]</code> and <code>networkA_to[i]</code> is an undirected edge from <code>networkA_from[i]</code> to <code>networkA_to[i]</code> in networkA. <code>networkB_from[i]</code> and <code>networkB_to[i]</code> is an undirected edge from <code>networkB_from[i]</code> to <code>networkB_to[i]</code> in networkB.</p>\r\n<p>Their goal is to add one edge that connects a node in each network to minimize the maximum distance between any two nodes. Determine that distance.</p>\r\n<p>Given that one new road (or undirected edge) connecting one of the places in networkA and another in networkB is to be added in such a way that maximum distance between any two different places in the new network is minimized. Find the minimum possible required distance.</p>\r\n<p><strong>Note:</strong> The distance between two nodes is defined as the number of edges in the simple path from one node to another. A simple path is a sequence of nodes connected by edges, and no node is used more than once in the sequence.</p>\r\n<p>Complete the function <code>calculateMin</code> in the editor below. It must return an answer to the challenge as an integer.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nnetworkA_nodes = 3\r\nnetworkA_from = [1, 1]\r\nnetworkA_to = [2, 3]\r\nnetworkB_nodes = 2\r\nnetworkB_from = [1]\r\nnetworkB_to = [2]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> This image illustrates the two networks joined from nodes A1 and B2. The table shows the maximum distances for all possible connections between networks.</p>\r\n<pre><code class='language-text'>Network A | Network B | Maximum Distance | Node A | Node B\r\n----------|-----------|------------------|--------|-------\r\n1         | 1         | 4                | 3      | 3\r\n1         | 2         | 3                | 3      | 3\r\n1         | 3         | 4                | 3      | 1\r\n2         | 1         | 5                | 3      | 3\r\n2         | 2         | 4                | 3      | 3\r\n2         | 3         | 5                | 3      | 1\r\n3         | 1         | 5                | 2      | 3\r\n3         | 2         | 4                | 2      | 3\r\n3         | 3         | 5                | 2      | 1</code></pre>\r\n<p>In the first row, networks A and B are connected through A1 and B1. The maximum distance of 4 is between nodes A3 and B3. The minimum value in the 'Maximum Distance' column is the answer: 3.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nnetworkA_nodes = 2, networkA_edges = 1\r\nnetworkA_from = [1], networkA_to = [2]\r\nnetworkB_nodes = 2, networkB_edges = 1\r\nnetworkB_from = [1], networkB_to = [2]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One way to join the networks is to add an edge between nodes 1A and 1B. The maximum distance is 3.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nnetworkA_nodes = 4, networkA_edges = 3\r\nnetworkA_from = [1, 3, 1], networkA_to = [2, 3, 4]\r\nnetworkB_nodes = 2, networkB_edges = 1\r\nnetworkB_from = [1], networkB_to = [2]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One way to achieve this configuration is to add an edge between nodes 1A and 1B. The maximum distance is 3 between any of node 1A, 2A, or 3A and node 2B.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>The function has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int networkA_nodes</code>: the number of nodes in network A</li>\r\n    <li><code>vector&lt;int&gt; networkA_from</code>: one end of the edge in network A</li>\r\n    <li><code>vector&lt;int&gt; networkA_to</code>: the other end of the edge in network A</li>\r\n    <li><code>int networkB_nodes</code>: the number of nodes in network B</li>\r\n    <li><code>vector&lt;int&gt; networkB_from</code>: one end of the edge in network B</li>\r\n    <li><code>vector&lt;int&gt; networkB_to</code>: the other end of the edge in network B</li>\r\n</ul>\r\n<p>Additional constraints:</p>\r\n<ul>\r\n    <li><code>1 &lt;= networkA_nodes, networkB_nodes &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= networkA_from[i], networkA_to[i] &lt;= networkA_nodes</code></li>\r\n    <li><code>1 &lt;= networkB_from[i], networkB_to[i] &lt;= networkB_nodes</code></li>\r\n    <li><code>1 &lt;= networkA_edges, networkB_edges</code> (The number of edges is implied by the size of `networkA_from`/`to` and `networkB_from`/`to` arrays)</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<ul>\r\n    <li><code>int</code>: the minimum possible maximum distance between two nodes after adding the edge as described.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "bny_30july",
        "company_id": 344
    }
]