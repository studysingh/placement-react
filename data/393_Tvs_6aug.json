[
    {
        "id": 1169,
        "title": "Wall Painting Combinations",
        "problem_statement": "<h1>Wall Painting Combinations</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Sonya is an artist tasked with painting a mural in an environmentally sensitive area. Due to strict environmental regulations, certain paints can be used on specific sections of the wall while others cannot. Sonya needs to ensure that the entire mural is painted while adhering to these constraints.</p>\r\n<p>Given N sections on wall and M paint types, you're provided with a list of environmental constraints (1 for allowed, 0 for restricted) for each paint type and a set of available paint types for each section.</p>\r\n<p>The goal is to find how many valid combinations of paint she can use to cover all sections of the wall without violating any environmental regulations.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer N represent the number of sections on the wall.</p>\r\n<p>The second line contains an integer M represent the number of paint types.</p>\r\n<p>The third line contains M space-separated integers where 1 means the paint type is allowed and 0 means it is restricted.</p>\r\n<p>The next N lines describe the allowed paint types for each section. Each line starts with an integer k, followed by k space-separated integers representing the allowed paint types (1-based index).</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer representing the number of valid combinations of paint to cover all sections of the wall without violating any environmental regulations.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= N &lt;= 10^6</li>\r\n    <li>1 &lt;= M &lt;= 100</li>\r\n    <li>restrictions[i] = 0 or 1</li>\r\n    <li>1 &lt;= k &lt;= M</li>\r\n    <li>1 &lt;= allowedPaints[i] &lt;= M</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n3\r\n1 0 1\r\n2 1 2\r\n1 2\r\n2 1 3\r\n1 3\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Restrictions:</p>\r\n<ul>\r\n    <li>'1' - Paint type 1 is allowed.</li>\r\n    <li>'0' - Paint type 2 is restricted.</li>\r\n    <li>'1' - Paint type 3 is allowed.</li>\r\n</ul>\r\n<p>Section 1: Can use paint type 1 (paint type 2 is restricted).</p>\r\n<p>Section 2: Can use paint type 1 (paint type 2 is restricted).</p>\r\n<p>Section 3: Can use paint type 1 (paint type 2 is restricted).</p>\r\n<p>Section 4: Can use paint type 3 (paint type 2 is restricted).</p>\r\n<p>In this test case, paint type 2 is restricted globally. However, sections 1, 2, and 3 only allow paint types 1 and 2. Since paint type 2 is restricted, only paint type 1 can be used for sections 1, 2, and 3. Section 4 allows paint types 1 and 3.</p>\r\n<p>If we try to paint section 1 with paint type 1, section 2 with paint type 1, section 3 with paint type 1, and section 4 with paint type 3, this would be a valid combination.</p>\r\n<p>Therefore, there are 0 valid combinations.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n1 0\r\n2 1 2\r\n2 1 2\r\n2 1 2\r\nOutput:\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Restrictions:</p>\r\n<ul>\r\n    <li>'1' - Paint type 1 is allowed.</li>\r\n    <li>'0' - Paint type 2 is restricted.</li>\r\n</ul>\r\n<p>Section 1: Can use paint type 1 (paint type 2 is restricted).</p>\r\n<p>Section 2: Can use paint type 1 (paint type 2 is restricted).</p>\r\n<p>Section 3: Can use paint type 1 (paint type 2 is restricted).</p>\r\n<p>Since all sections can be painted with paint type 1 (as it is allowed), there is only 1 valid combination:</p>\r\n<ul>\r\n    <li>Paint section 1 with paint type 1.</li>\r\n    <li>Paint section 2 with paint type 1.</li>\r\n    <li>Paint section 3 with paint type 1.</li>\r\n</ul>\r\n<p>Thus, the output is 1.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tvs_6aug",
        "company_id": 393
    },
    {
        "id": 1170,
        "title": "Energy Efficient Drone Delivery",
        "problem_statement": "<h1>Energy Efficient Drone Delivery</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are the operator of a drone delivery service, tasked with delivering packages across several cities. Each city has a designated energy supply, and each path between cities consumes a certain amount of fuel. Your goal is to plan the most fuel-efficient delivery route while maximizing the energy supply collected along the way.</p>\r\n<p>You can only deliver to one city at a time.</p>\r\n<p>Direct roads between cities are the only way to travel between them.</p>\r\n<p>You are not allowed to return to a city you've already visited.</p>\r\n<p>Some cities may be connected by multiple roads.</p>\r\n<p>Your objective is to start from a designated \"initial city\" and reach a \"target city\" while collecting the maximum total energy and minimizing the fuel consumed.</p>\r\n<p><strong>Note:</strong> The graph is a directed acyclic graph (DAG).</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains three integers N, M, and P representing the number of cities, the number of roads, and the number of initial-target city pairs, respectively.</p>\r\n<p>The second line contains N space-separated integers E1, E2, ..., EN; representing the energy supply in each city.</p>\r\n<p>The next M lines each contain three integers u, v, and f, representing a road between city u and city v, with fuel consumption f.</p>\r\n<p>The next P lines each contain two integers start and end, representing a pair of initial and target cities.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each initial-target city pair, display two space-separated integers which represent the maximum total energy supply collected, and the minimum fuel consumed to reach the target.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= N &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= M &lt;= 10^4</code></li>\r\n    <li><code>1 &lt;= Ei &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= u, v, start, end &lt;= N</code></li>\r\n    <li><code>1 &lt;= f &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= P &lt;= 10^2</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 7 1\r\n25 15 30 40 35 20\r\n1 2 4\r\n1 3 6\r\n2 4 5\r\n3 4 2\r\n4 5 1\r\n5 6 3\r\n1 6\r\nOutput:\r\n150 12</code></pre>\r\n<p><strong>Explanation:</strong> The path from city 1 -> 3 -> 4 -> 5 -> 6 provides the maximum energy. Energy: 25 + 30 + 40 + 35 + 20 = 150, and Fuel: 6 + 2 + 1 + 3 = 12.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3 1\r\n30 40 50\r\n1 2 10\r\n2 3 20\r\n1 3 25\r\n1 3\r\nOutput:\r\n120 30</code></pre>\r\n<p><strong>Explanation:</strong> There is only one direct path from city 1 -> 2 -> 3 with an energy of 30 + 40 + 50 = 120 and a fuel of 10 + 20 = 30.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tvs_6aug",
        "company_id": 393
    },
    {
        "id": 1171,
        "title": "Drone Delivery Service",
        "problem_statement": "<h1>Drone Delivery Service</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are the operator of a drone delivery service, tasked with delivering packages across several cities. Each city has a designated energy supply, and each path between cities consumes a certain amount of fuel. Your goal is to plan the most fuel-efficient delivery route while maximizing the energy supply collected along the way.</p>\r\n<p>The constraints are as follows:</p>\r\n<ul>\r\n    <li>You can only deliver to one city at a time.</li>\r\n    <li>Direct roads between cities are the only way to travel between them.</li>\r\n    <li>You are not allowed to return to a city you've already visited.</li>\r\n    <li>Some cities may be connected by multiple roads.</li>\r\n</ul>\r\n<p>Your objective is to start from a designated \"initial city\" and reach a \"target city\" while collecting the maximum total energy and minimizing the fuel consumed.</p>\r\n<p><strong>Note:</strong> The graph is a directed acyclic graph (DAG).</p>\r\n\r\n<h3>Input Format</h3>\r\n<p>The first line of input contains three integers N, M, and P representing the number of cities, the number of roads, and the number of initial-target city pairs, respectively.</p>\r\n<p>The second line contains N space-separated integers E1, E2, ..., EN; representing the energy supply in each city.</p>\r\n<p>The next M lines each contain three integers u, v, and f, representing a road between city u and city v, with fuel consumption f.</p>\r\n<p>The next P lines each contain two integers start and end, representing a pair of initial and target cities.</p>\r\n\r\n<h3>Output Format</h3>\r\n<p>For each initial-target city pair, display two space-separated integers which represent the maximum total energy collected, and the minimum fuel consumed to reach the target.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= N <= 10^3</code></li>\r\n    <li><code>1 <= M <= 10^4</code></li>\r\n    <li><code>1 <= Ei <= 10^3</code></li>\r\n    <li><code>1 <= u, v, start, end <= N</code></li>\r\n    <li><code>1 <= f <= 10^3</code></li>\r\n    <li><code>1 <= P <= 10^2</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6 7 1\r\n25 15 30 40 35 20\r\n1 2 4\r\n1 3 6\r\n2 4 5\r\n3 4 2\r\n4 5 1\r\n5 6 3\r\n3 6 7\r\n1 6\r\nOutput:\r\n150 12</code></pre>\r\n<p><strong>Explanation:</strong> The path from city 1 -> 3 -> 4 -> 5 -> 6 provides the maximum energy: 25 + 30 + 40 + 35 + 20 = 150, and Fuel: 6 + 2 + 1 + 3 = 12.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3 1\r\n30 40 50\r\n1 2 10\r\n2 3 20\r\n1 3 25\r\n1 3\r\nOutput:\r\n120 30</code></pre>\r\n<p><strong>Explanation:</strong> There is only one direct path from city 1 -> 2 -> 3 with an energy of 30 + 40 + 50 = 120 and a fuel of 10 + 20 = 30.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tvs_6aug",
        "company_id": 393
    }
]