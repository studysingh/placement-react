[
    {
        "id": 1087,
        "title": "Maximum Lucky Number",
        "problem_statement": "<h1>Maximum Lucky Number</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon.com is distributing coupons in the form of a lottery system for loyal customers. The coupons are called \"lucky numbers\" and the customer with the largest lucky number gets the best discount. Devise a method to determine the maximum possible lucky number. A positive integer is a lucky number if its decimal representation contains only digits x and y. For example, if x = 2 and y = 5, then 2, 552, and 5225 are lucky numbers, and 3, 24, 57 and 389 are not.</p>\r\n<p>Given two different digits x and y and a positive integer n, determine the maximum possible lucky number, the sum of whose digits is n. It is guaranteed that at least one lucky number exists for the given x, y, and n.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: x = 3, y = 4, n = 13\r\nOutput: 4333</code></pre>\r\n<p><strong>Explanation:</strong> The lucky numbers formed using digits 3 and 4 whose digits sum to 13 are 3334, 3343, 3433, 4333. The maximum among these is 4333.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: x = 7, y = 5, n = 22\r\nOutput: 7555</code></pre>\r\n<p><strong>Explanation:</strong> The lucky numbers formed using digits 7 and 5 whose digits sum to 22 are combinations of these digits. For example, one 7 and three 5s (7 + 5 + 5 + 5 = 22) form the number 7555. To maximize the number, we prioritize placing the larger digit (7) at the most significant position, followed by the next largest possible digits (5s). Thus, 7555 is the maximum lucky number.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: x = 4, y = 8, n = 20\r\nOutput: 44444</code></pre>\r\n<p><strong>Explanation:</strong> The lucky numbers formed using digits 4 and 8 whose digits sum to 20 are combinations of these digits. For example, five 4s (4+4+4+4+4 = 20) form the number 44444. Other combinations include one 8 and three 4s (8+4+4+4 = 20) forming 8444, or two 8s and one 4 (8+8+4 = 20) forming 884. Among these, 44444 is the maximum lucky number because it has the most digits, and when comparing numbers with different lengths, the one with more digits is generally larger.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>6</sup></code></li>\r\n    <li><code>x</code> and <code>y</code> are different digits (<code>0 &le; x, y &le; 9</code>).</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_31july",
        "company_id": 356
    },
    {
        "id": 1092,
        "title": "Code Question 1",
        "problem_statement": "<h1>Code Question 1</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon operates numerous warehouses, with each warehouse holding <code>inventory[i]</code> units of a particular product. You and your co-worker are responsible for dispatching these items to fulfill customer orders, following a specific process:</p>\r\n<ol>\r\n    <li>When dispatching from warehouse <code>i</code>, you begin by reducing the inventory of the <code>i<sup>th</sup></code> warehouse by <code>dispatch1</code> units.</li>\r\n    <li>After your dispatch, your co-worker reduces the inventory by <code>dispatch2</code> units.</li>\r\n    <li>This process repeats until the inventory of the <code>i<sup>th</sup></code> warehouse reaches zero or becomes negative (i.e., <code>inventory[i] &le; 0</code>).</li>\r\n    <li>For every warehouse that is emptied during your dispatch, you and your co-worker collectively earn 1 credit.</li>\r\n</ol>\r\n<p>Your co-worker has the option to skip their turn, but they can only do this a limited number of times, defined by <code>skips</code>.</p>\r\n<p>Your task is to determine the best strategy to maximize the total credits that both you and your co-worker can earn together.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumCredits</code> in the editor below.</p>\r\n<p><code>getMaximumCredits</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int inventory[n]</code>: An array of integers denoting the inventory level of each warehouse.</li>\r\n    <li><code>int dispatch1</code>: An integer indicating your dispatch level per turn.</li>\r\n    <li><code>int dispatch2</code>: An integer indicating your co-worker's dispatch level per turn.</li>\r\n    <li><code>int skips</code>: An integer specifying the maximum number of times your co-worker can skip their turn.</li>\r\n</ul>\r\n\r\n<h2>Return</h2>\r\n<p><code>int</code>: the maximum number of credits both of you can achieve collectively.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\ninventory = [10, 6, 12, 8, 15, 1]\r\ndispatch1 = 2\r\ndispatch2 = 3\r\nskips = 3</code></pre>\r\n<p><strong>Explanation:</strong> An optimal dispatch strategy is as follows:</p>\r\n<ol>\r\n    <li>Your co-worker skips 2 turns, allowing you to empty the inventory of the 1<sup>st</sup> warehouse (inventory: 10 &rarr; 8 &rarr; 5 &rarr; 3 &rarr; 1 &rarr; -1).</li>\r\n    <li>Your co-worker doesn't skip any turns, and you empty the inventory of the 2<sup>nd</sup> warehouse (inventory: 6 &rarr; 4 &rarr; 1 &rarr; -1).</li>\r\n    <li>Your co-worker doesn't skip any turns, and you empty the inventory of the 3<sup>rd</sup> warehouse (inventory: 12 &rarr; 10 &rarr; 7 &rarr; 5 &rarr; 2 &rarr; 0).</li>\r\n    <li>Your co-worker skips 1 turn, and you drain the inventory of the 4<sup>th</sup> warehouse (inventory: 8 &rarr; 6 &rarr; 3 &rarr; 1 &rarr; -1).</li>\r\n    <li>Your co-worker doesn't skip any turns, and they empty the inventory of the 5<sup>th</sup> warehouse (inventory: 15 &rarr; 13 &rarr; 10 &rarr; 8 &rarr; 5 &rarr; 3 &rarr; 0).</li>\r\n    <li>Your co-worker doesn't skip any turns, and you empty the inventory of the 6<sup>th</sup> warehouse (inventory: 1 &rarr; -1).</li>\r\n</ol>\r\n<p>As a result, the 1<sup>st</sup>, 2<sup>nd</sup>, 3<sup>rd</sup>, and 4<sup>th</sup> warehouses were completely dispatched by you, and the two of you collectively earned 5 credits, which is the maximum possible in this scenario.</p>\r\n<pre><code class='language-text'>Output: 5</code></pre>\r\n<p>Hence, the answer is 5.</p>\r\n\r\n<h3>Example 2 (Sample Input for Custom Testing):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\ninventory = [10, 10]\r\ndispatch1 = 1\r\ndispatch2 = 1\r\nskips = 2</code></pre>\r\n<p><strong>Explanation:</strong> An optimal way to empty the warehouses would be:</p>\r\n<ol>\r\n    <li>Your co-worker does not skip any turns, and you empty the 1<sup>st</sup> warehouse (inventory: 10 &rarr; 0).</li>\r\n    <li>Your co-worker does not skip any turns and empties the 2<sup>nd</sup> warehouse (inventory: 10 &rarr; 0).</li>\r\n</ol>\r\n<p>As a result, the 1<sup>st</sup> warehouse was emptied on your turn, earning both you and your co-worker 1 credit, which is the maximum possible.</p>\r\n<pre><code class='language-text'>Output: 1</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; inventory[i] &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; dispatch1, dispatch2, skips &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_31july",
        "company_id": 356
    },
    {
        "id": 1093,
        "title": "Minimize Grid Inconvenience",
        "problem_statement": "<h1>Minimize Grid Inconvenience</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon has multiple delivery centers all over the world. A city is given in the form of a grid where the delivery centers are marked as <code>1</code> and all other places are marked as <code>0</code>. Distance between two cells is defined as the maximum absolute distance between x-coordinates and y-coordinates. For example, distance between <code>(1,2)</code> and <code>(0,4)</code> is <code>max(|1-0|, |2-4|) = 2</code>.</p>\r\n<p>The inconvenience of the grid is defined as the maximum distance of any place marked <code>0</code> from its nearest delivery center.</p>\r\n<p>Amazon is planning to open a new delivery center to reduce the inconvenience of the grid. Minimize the inconvenience of the grid by converting at most one <code>0</code> (any place) to <code>1</code> (a delivery center) and report this minimum value.</p>\r\n<p>Consider the following illustration:</p>\r\n<pre><code class='language-text'>Input Grid:\r\nn = 2 (rows), m = 4 (columns)\r\ngrid = [[0, 0, 0, 1],\r\n        [0, 0, 0, 1]]\r\n\r\nVisual Representation:\r\n0 0 0 1\r\n0 0 0 1</code></pre>\r\n<p>Distances from each cell to the nearest delivery center (1s) are shown below. The initial inconvenience of the grid (maximum distance for any 0) is 3.</p>\r\n<pre><code class='language-text'>3 2 1 0\r\n3 2 1 0</code></pre>\r\n<p>It is optimal to convert cell <code>(0,0)</code> to a delivery center, resulting in the following grid:</p>\r\n<pre><code class='language-text'>1 0 0 1\r\n0 0 0 1</code></pre>\r\n<p>Now, the inconvenience is 1, with distances from each cell to its nearest 1 as:</p>\r\n<pre><code class='language-text'>0 1 1 0\r\n1 1 1 0</code></pre>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMinInconvenience</code> in the editor below.</p>\r\n<p><code>getMinInconvenience</code> has the following parameter:</p>\r\n<ul>\r\n    <li><code>int grid[n][m]</code>: 2D binary matrix</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum inconvenience possible</li>\r\n</ul>\r\n<pre><code class='language-cpp'>int getMinInconvenience(vector<vector<int>> grid) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n, m &le; 500</code></li>\r\n    <li><code>0 &le; grid[i][j] &le; 1</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n4\r\n0 0 0 0\r\n0 0 0 0\r\n0 0 0 0\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to convert cell <code>(1,1)</code> to <code>1</code>, resulting in the grid:</p>\r\n<pre><code class='language-text'>0 0 0 0\r\n0 1 0 0\r\n0 0 0 0</code></pre>\r\n<p>where the distance of each cell from its nearest <code>1</code> is:</p>\r\n<pre><code class='language-text'>1 1 1 2\r\n1 0 1 1\r\n1 1 1 2</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n1\r\n0\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to convert the only <code>0</code> to <code>1</code>. After conversion, the grid becomes <code>[[1]]</code>. There are no <code>0</code>s, so the inconvenience is <code>0</code>.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_31july",
        "company_id": 356
    }
]