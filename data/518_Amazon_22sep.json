[
    {
        "id": 1481,
        "title": "Code Question 1",
        "problem_statement": "<h1>Code Question 1</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Amazon's research laboratory, k engineers need to be assigned to workstations based on their expertise sets.</p>\r\n<ul>\r\n    <li>Each engineer has a specific expertise, represented by a character in the <strong>expertise</strong> string. Engineers appear in the order they need to be assigned.</li>\r\n    <li>The laboratory has a row of j available workstations, each tagged with the expertise it supports, represented by the <strong>workspace</strong> string. The i<sup>th</sup> character of workspace shows the expertise accepted by the i<sup>th</sup> workstation.</li>\r\n</ul>\r\n\r\n<p><strong>Assignment Rules:</strong></p>\r\n<ul>\r\n    <li>Each engineer must be assigned to a compatible workstation (matching their <strong>expertise</strong>).</li>\r\n    <li>Engineers must be placed in the same order as they appear in the <strong>expertise</strong> string.</li>\r\n    <li>Workstations assigned to engineers don't have to be next to each other, i.e., (they do not need to be contiguous).</li>\r\n</ul>\r\n\r\n<p><strong>Goal:</strong> Find the maximum <strong>isolation</strong> of any valid assignment.</p>\r\n\r\n<p><strong>Isolation</strong> is defined as the largest gap (in workstation indices) between any two adjacent engineers. More formally, if engineers are assigned to workstations at positions q<sub>0</sub>, q<sub>1</sub>, ..., q<sub>k-1</sub> then: <strong>isolation</strong> = max(q[i + 1] - q[i] - 1) for 0 &le; i &lt; k-1. This represents the maximum number of unassigned workstations between any two consecutively assigned engineers. It is guaranteed that a valid assignment exists for every engineer.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: k = 3, expertise = \"bab\", j = 6, workspace = \"babcab\"</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe engineers have expertise \"bab\" and the available workstations are \"babcab\".\r\nFollowing are some possible assignments (underlined letters represent assigned workstations):\r\n</p>\r\n<pre><code class='language-text'>babcab (E1 at W0, E2 at W1, E3 at W2)\r\nIsolation: 0 workstations between any two adjacent engineers.\r\n   (q = [0, 1, 2]. Gaps: (1-0)-1=0, (2-1)-1=0. Max isolation = 0)\r\n\r\nbabcab (E1 at W0, E2 at W1, E3 at W5)\r\nIsolation: 3 workstations between 2nd and 3rd engineer (W1 and W5).\r\n   (q = [0, 1, 5]. Gaps: (1-0)-1=0, (5-1)-1=3. Max isolation = 3)\r\n\r\nbabcab (E1 at W0, E2 at W4, E3 at W5)\r\nIsolation: 3 workstations between 1st and 2nd engineer (W0 and W4).\r\n   (q = [0, 4, 5]. Gaps: (4-0)-1=3, (5-4)-1=0. Max isolation = 3)\r\n\r\nbabcab (E1 at W2, E2 at W4, E3 at W5)\r\nIsolation: 1 workstation between 1st and 2nd engineer (W2 and W4).\r\n   (q = [2, 4, 5]. Gaps: (4-2)-1=1, (5-4)-1=0. Max isolation = 1)\r\n\r\nMaximum isolation = 3\r\nSo, the answer is 3.</code></pre>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>calculateMaxDistance</code> in the editor below.</p>\r\n<p><code>calculateMaxDistance</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string expertise</code>: contains the expertise of each of the k engineers.</li>\r\n    <li><code>string workspace</code>: contains the expertise of engineers that can work in the workstations.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<p><code>int</code>: Maximum isolation</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; k &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>expertise</code>, <code>workspace</code> contains lower-case Latin alphabets only.</li>\r\n    <li>The string <code>workspace</code> is a subsequence of the string <code>expertise</code>.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: expertise = \"abcba\", workspace = \"abcababcba\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> One of the optimal ways is to assign engineers to workstations at indices 0, 4, 5, 8, 9 (corresponding to 'a', 'b', 'c', 'b', 'a' in \"abcababcba\"). The sequence of assigned workstation indices is <code>q = [0, 4, 5, 8, 9]</code>.\r\nThe isolation values between adjacent engineers are:\r\n</p>\r\n<ul>\r\n    <li>Between 1st and 2nd engineer (W0 and W4): <code>(4 - 0) - 1 = 3</code></li>\r\n    <li>Between 2nd and 3rd engineer (W4 and W5): <code>(5 - 4) - 1 = 0</code></li>\r\n    <li>Between 3rd and 4th engineer (W5 and W8): <code>(8 - 5) - 1 = 2</code></li>\r\n    <li>Between 4th and 5th engineer (W8 and W9): <code>(9 - 8) - 1 = 0</code></li>\r\n</ul>\r\n<p>The maximum isolation is <code>max(3, 0, 2, 0) = 3</code>.\r\nWait, the sample output is 4. Let's re-check the example.\r\nIf <code>q = [0, 1, 2, 7, 9]</code> for \"abcba\" in \"abcababcba\":\r\n</p>\r\n<ul>\r\n    <li>Between 1st and 2nd engineer (W0 and W1): <code>(1 - 0) - 1 = 0</code></li>\r\n    <li>Between 2nd and 3rd engineer (W1 and W2): <code>(2 - 1) - 1 = 0</code></li>\r\n    <li>Between 3rd and 4th engineer (W2 and W7): <code>(7 - 2) - 1 = 4</code></li>\r\n    <li>Between 4th and 5th engineer (W7 and W9): <code>(9 - 7) - 1 = 1</code></li>\r\n</ul>\r\n<p>The maximum isolation is <code>max(0, 0, 4, 1) = 4</code>. This matches the output.\r\nSo, the explanation should be:\r\nOne of the optimal ways is to assign engineers to workstations at indices 0, 1, 2, 7, 9 (corresponding to 'a', 'b', 'c', 'b', 'a' in \"abcababcba\").\r\nMaximum number of workstations between two workstations having adjacent engineers = 4.\r\nSo, the answer is 4.</p>\r\n\r\n<pre><code class='language-javascript'>int calculateMaxDistance(string expertise, string workspace) {\r\n    // Function implementation goes here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_22sep",
        "company_id": 518
    },
    {
        "id": 1482,
        "title": "Maximum Performance with Limited Expense",
        "problem_statement": "<h1>Maximum Performance with Limited Expense</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon is upgrading its network infrastructure and needs to purchase at most two new hardware components to meet the requirement. There are two arrays, <code>expense</code> and <code>performance</code> relating to the <code>n</code> available hardware components. Here <code>expense[i]</code> and <code>performance[i]</code> represent the cost and performance rating of the <code>i</code>th hardware component. Due to procurement limitations, the maximum total expense of the two hardware components is <code>spending_cap</code>.</p>\r\n<p>Given two arrays, <code>expense</code> and <code>performance</code>, find the maximum possible performance rating that can be achieved with at most two hardware components whose total expense is less than or equal to <code>spending_cap</code>.</p>\r\n\r\n<p>Complete the function <code>findMaximumPerformance</code> in the editor below.</p>\r\n<p><code>findMaximumPerformance</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int expense[n]</code>: the costs of hardware components</li>\r\n    <li><code>int performance[n]</code>: the performance ratings</li>\r\n    <li><code>int spending_cap</code>: the maximum expense</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<p><code>int</code>: the maximum possible performance rating of at most two hardware components with a combined expense that is less than or equal to <code>spending_cap</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 6, expense = [4, 6, 5, 7, 1, 6], performance = [3, 6, 2, 6, 9, 5], spending_cap = 7</code></pre>\r\n<p><strong>Explanation:</strong> We need to find the maximum possible performance rating by selecting at most two hardware components such that their combined expense is less than or equal to <code>spending_cap</code> (which is 7).</p>\r\n<p>Let's consider possible selections:</p>\r\n<ul>\r\n    <li><strong>Selecting one component:</strong>\r\n        <ul>\r\n            <li>Component 5 (index 4): expense = 1, performance = 9. (Valid, expense 1 &lt;= 7)</li>\r\n            <li>Other single components might have lower performance or exceed <code>spending_cap</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Selecting two components:</strong>\r\n        <ul>\r\n            <li>Components 1 (expense 4, perf 3) + 5 (expense 1, perf 9) = Total Expense 5, Total Performance 12. (Valid, 5 &lt;= 7)</li>\r\n            <li>Components 2 (expense 6, perf 6) + 5 (expense 1, perf 9) = Total Expense 7, Total Performance 15. (Valid, 7 &lt;= 7)</li>\r\n            <li>Components 3 (expense 5, perf 2) + 5 (expense 1, perf 9) = Total Expense 6, Total Performance 11. (Valid, 6 &lt;= 7)</li>\r\n            <li>(Many other combinations exist, but these illustrate the process)</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Comparing all valid combinations, the maximum performance rating achieved is 15 (by selecting components 2 and 5, with a total expense of 7).</p>\r\n<pre><code class='language-text'>Output: 15</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5\r\nexpense = [1, 2, 3, 5, 4]\r\nperformance = [1, 2, 3, 4, 6]\r\nspending_cap = 8</code></pre>\r\n<p><strong>Explanation:</strong> We need to find the maximum performance by selecting at most two components with a total expense less than or equal to 8.</p>\r\n<p>Let's consider possible selections:</p>\r\n<ul>\r\n    <li><strong>Selecting one component:</strong>\r\n        <ul>\r\n            <li>Component 5 (index 4): expense = 4, performance = 6. (Valid, expense 4 &lt;= 8)</li>\r\n            <li>Other single components might have lower performance or exceed <code>spending_cap</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Selecting two components:</strong>\r\n        <ul>\r\n            <li>(Component 1, Component 2): expense 1+2=3, perf 1+2=3 (Valid)</li>\r\n            <li>(Component 1, Component 3): expense 1+3=4, perf 1+3=4 (Valid)</li>\r\n            <li>(Component 1, Component 4): expense 1+5=6, perf 1+4=5 (Valid)</li>\r\n            <li>(Component 1, Component 5): expense 1+4=5, perf 1+6=7 (Valid)</li>\r\n            <li>(Component 2, Component 3): expense 2+3=5, perf 2+3=5 (Valid)</li>\r\n            <li>(Component 2, Component 4): expense 2+5=7, perf 2+4=6 (Valid)</li>\r\n            <li>(Component 2, Component 5): expense 2+4=6, perf 2+6=8 (Valid)</li>\r\n            <li>(Component 3, Component 4): expense 3+5=8, perf 3+4=7 (Valid)</li>\r\n            <li>(Component 3, Component 5): expense 3+4=7, perf 3+6=9 (Valid)</li>\r\n            <li>(Component 4, Component 5): expense 5+4=9, perf 4+6=10 (Invalid, expense 9 &gt; 8)</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Comparing all valid combinations (single or two components), the maximum performance is 9 (achieved by selecting components 3 and 5, with a total expense of 7).</p>\r\n<pre><code class='language-text'>Output: 9</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 x 10^5</code></li>\r\n    <li><code>1 &lt;= expense[i] &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= performance[i] &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= spending_cap &lt;= 10^9</code></li>\r\n</ul>\r\n\r\n<p>The function signature provided in the editor is:</p>\r\n<pre><code class='language-cpp'>int findMaximumPerformance(int expense_count, int* expense, int performance_count, int* performance, int spending_cap) {\r\n\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_22sep",
        "company_id": 518
    }
]