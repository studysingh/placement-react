[
    {
        "id": 211,
        "title": "Gaming Character Performance Analysis",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Gaming Character Performance Analysis</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Imagine you\\'re analyzing the performance of a gaming character over consecutive days. Each day, the character\\'s skill score is recorded, and your goal is to identify the longest streak of days where their skill levels show a strictly increasing trend. However, you have the option to \\\"erase\\\" the performance on one day to potentially improve the streak or leave the sequence as it is.</p>\n        <p>Your task is to determine the maximum number of consecutive days the character\\'s skill scores can exhibit a strictly upward trend, either by keeping the original sequence or by disregarding one day.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>The number of days, n, satisfies 2 ≤ n ≤ 2×10<sup>5</sup></li>\n            <li>The skill score on each day: a<sub>1</sub>, a<sub>2</sub>,..., a<sub>n</sub> (1 ≤ a<sub>i</sub> ≤ 10<sup>9</sup>)</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains one integer, n, representing the number of days.</li>\n            <li>The second line contains n integers — where a<sub>i</sub> is the skill score on the i-th day.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print one integer — the maximum possible length of the strictly increasing streak after removing at most one day\\'s score.</p>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Sample</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n1 2 5 3 4</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this example, you can delete a<sub>3</sub> = 5.</p>\n                <p>The resulting sequence becomes (1,2,3,4), which forms a strictly increasing streak with a length of 4.</p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\\\"programming-language\\\">\n        <h3>Language</h3>\n        <p>C++</p>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1uqjh1ewL0BFW7uDcarNO_qscxBKYFY63tB3ovn_wCOY/edit?usp=sharing",
        "solution_code": "#include<iostream>\\n#include<vector>\\nusing namespace std;\\n\\nint main() {\\n    int n;\\n    cin >> n;\\n    vector<int> a(n);\\n    for(int i = 0; i < n; i++) {\\n        cin >> a[i];\\n    }\\n    \\n    int maxLen = 1;\\n    for(int skip = -1; skip < n; skip++) {\\n        int currLen = 1;\\n        int prev = -1;\\n        \\n        for(int i = 0; i < n; i++) {\\n            if(i == skip) continue;\\n            \\n            if(prev == -1) {\\n                prev = a[i];\\n                currLen = 1;\\n            } else if(a[i] > prev) {\\n                currLen++;\\n                prev = a[i];\\n            } else {\\n                currLen = 1;\\n                prev = a[i];\\n            }\\n            maxLen = max(maxLen, currLen);\\n        }\\n    }\\n    \\n    cout << maxLen << endl;\\n    return 0;\\n}",
        "company_name": " kickdrum",
        "company_id": 53
    },
    {
        "id": 212,
        "title": "Gold Heist Optimization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Gold Heist Optimization</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>The Professor and his teammates successfully looted the Bank of Gold today.</p>\n        \n        <p>They loaded the Gold in trucks and have sent each truck to a different location, where they can unload the Gold and throw it into the pipe, present at each location which is connected to another city where they can transfer <strong>one ton of gold every minute</strong>.</p>\n        \n        <p>Raquel is the investigating officer and she has located N points which are in a linear manner and can be used by the Professor to transfer the gold to the neighbouring cities.</p>\n        \n        <p>For marking of these points, she has taken her current position which is an old warehouse as the point 0. The locations to her left are marked with negative integers in a linear manner and the locations to her right are marked with positive integers. Consider it as a number line. If a location is X miles from her initial position, it is marked on the Xth point on the number line either positive or negative based on the direction.</p>\n        \n        <p>She can drive her car at a speed of <strong>1 mile/minute</strong>. She is fully prepared with her ammunition as she is in no mood to show mercy. As soon as she finds any of the heist members, she will shoot them instantly. The Professor and his team have started their work and Raquel wants to minimize the loss of gold. She is going to reach these N locations and shoot the heist members.</p>\n        \n        <p>She needs your help in calculating the minimum amount of gold that will be lost even if she works in the optimal manner. This will help her in determining the route order she needs to take to minimise the losses.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line consists of an integer N, denoting the number of trucks.</p>\n        <p>The second line consists of an array H of size N, representing the locations of the N heist members where the i\\'th element of array H represents the location of the i\\'th member.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the minimum amount of gold that will be transferred before Raquel eliminates all the members.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 < N < 1001</li>\n            <li>-600000 < H[i] < 600000</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Input and Output</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n-3 4 -6 -10 10 22</pre>\n            <pre class=\\\"output\\\">Output:\n115</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <ul>\n                    <li>Raquel starts at 0 and goes to -3 which takes her 3 minutes so 3 tons of gold is transferred before she knocks out the heists at position -3.</li>\n                    <li>Next, she moves to position -6 and she takes 3 minutes to reach from -3 to -6. Total time passed is 6 minutes so total gold transferred will be 3+6=9 tons.</li>\n                    <li>When Raquel eliminates the heists at position +4 she takes a time of 14 minutes to reach from -10. So the total time passed till now is 24 minutes. The total gold transferred is 19+24=43 tons.</li>\n                    <li>Similarly, she goes from +4 to +10 requiring a time of 6 minutes. Total time elapsed is 30 minutes, so the gold transferred at position +10 till now is 30 tons. Hence, total gold transferred is 43+30=73 tons.</li>\n                    <li>To knock off the last heist truck she takes 12 minutes to reach +22 from +10 resulting in 42 tons of gold lost at position +22. So the total gold lost while eliminating the heists is 73+42=115 tons.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1tSNNvwaGtcvLsYpKBZVIihoxUWIBVCyey0XAz6YdEhc/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\ntypedef long long ll;\\nconst ll INF = 1e18;\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    int N;\\n    cin >> N;\\n    vector<int> left, right;\\n    for(int i=0;i<N;i++){\\n        int x;\\n        cin >> x;\\n        if(x <0) left.push_back(-x);\\n        else right.push_back(x);\\n    }\\n    sort(left.begin(), left.end());\\n    sort(right.begin(), right.end());\\n    int L = left.size();\\n    int R = right.size();\\n    // Initialize DP tables\\n    vector<vector<ll>> dp_sum_left(L+1, vector<ll>(R+1, INF));\\n    vector<vector<ll>> dp_sum_right(L+1, vector<ll>(R+1, INF));\\n    vector<vector<ll>> dp_time_left(L+1, vector<ll>(R+1, 0));\\n    vector<vector<ll>> dp_time_right(L+1, vector<ll>(R+1, 0));\\n    // Initialize starting states\\n    if(L >0){\\n        dp_sum_left[1][0] = left[0];\\n        dp_time_left[1][0] = left[0];\\n    }\\n    if(R >0){\\n        dp_sum_right[0][1] = right[0];\\n        dp_time_right[0][1] = right[0];\\n    }\\n    // Iterate through all possible states\\n    for(int i=0;i<=L;i++){\\n        for(int j=0;j<=R;j++){\\n            // From left\\n            if(i >0 && dp_sum_left[i][j] < INF){\\n                // Next left\\n                if(i < L){\\n                    ll d = abs((ll)left[i] - (ll)left[i-1]);\\n                    ll new_time = dp_time_left[i][j] + d;\\n                    ll new_sum = dp_sum_left[i][j] + new_time;\\n                    if(new_sum < dp_sum_left[i+1][j]){\\n                        dp_sum_left[i+1][j] = new_sum;\\n                        dp_time_left[i+1][j] = new_time;\\n                    }\\n                }\\n                // Next right\\n                if(j < R){\\n                    ll d = abs((ll)right[j] - (ll)left[i-1]);\\n                    ll new_time = dp_time_left[i][j] + d;\\n                    ll new_sum = dp_sum_left[i][j] + new_time;\\n                    if(new_sum < dp_sum_right[i][j+1]){\\n                        dp_sum_right[i][j+1] = new_sum;\\n                        dp_time_right[i][j+1] = new_time;\\n                    }\\n                }\\n            }\\n            // From right\\n            if(j >0 && dp_sum_right[i][j] < INF){\\n                // Next left\\n                if(i < L){\\n                    ll d = abs((ll)left[i] - (ll)right[j-1]);\\n                    ll new_time = dp_time_right[i][j] + d;\\n                    ll new_sum = dp_sum_right[i][j] + new_time;\\n                    if(new_sum < dp_sum_left[i+1][j]){\\n                        dp_sum_left[i+1][j] = new_sum;\\n                        dp_time_left[i+1][j] = new_time;\\n                    }\\n                }\\n                // Next right\\n                if(j < R){\\n                    ll d = abs((ll)right[j] - (ll)right[j-1]);\\n                    ll new_time = dp_time_right[i][j] + d;\\n                    ll new_sum = dp_sum_right[i][j] + new_time;\\n                    if(new_sum < dp_sum_right[i][j+1]){\\n                        dp_sum_right[i][j+1] = new_sum;\\n                        dp_time_right[i][j+1] = new_time;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    ll answer = INF;\\n    if(L >=0 && R >=0){\\n        answer = min(dp_sum_left[L][R], dp_sum_right[L][R]);\\n    }\\n    cout << answer;\\n}",
        "company_name": " kickdrum",
        "company_id": 53
    }
]