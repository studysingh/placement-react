[
    {
        "id": 280,
        "title": "Check Subarray Sum",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Check Subarray Sum</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Bob gave Alice n bundles of rupees represented by array nums[] where nums[i] represents that bundle. Bob wants to distribute some rupees equally to k persons so that each person must receive an equal number of rupees and no amount left after the distribution.</p>\n        \n        <p>Bob is busy with work so he asked Alice to do this task. The task is to take any one adjacent group of bundles and from them, Alice can distribute the amount to k persons equally with no amount left after distribution.</p>\n        \n        <div class=\\\"note\\\">\n            <p><strong>Note:</strong> Alice cannot distribute the amount from the single bundle. At least 2 bundles are required for the distribution.</p>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains two integers n and k.</p>\n        <p>The second line contains the n elements of the Array</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single boolean variable result – whether Alice can distribute the amount to k person equally or not.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 100000</li>\n            <li>0 ≤ nums[i] ≤ 2000</li>\n            <li>1 ≤ k ≤ 300</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Test Cases</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Testcase 1</h4>\n            <pre class=\\\"input\\\">Input:\n5 6\n2 2 2 8 4</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Alice can take the amount [8, 4] from the array and can distribute it to 6 people. They will get 2 rupees each.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Testcase 2</h4>\n            <pre class=\\\"input\\\">Input:\n5 13\n1 1 1 1 1</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>There is no possible way for the distribution.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1n38RuQbpDR5f7choW7V0gSwdezZe26Jma416ehru5YQ/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    long long n, k;\\n    cin >> n >> k;\\n    vector<long long> nums(n);\\n    for(auto &x: nums) cin >> x;\\n    \\n    if(n <2){\\n        cout << 0;\\n        return 0;\\n    }\\n    \\n   \\n    vector<long long> modIndex(k, -2);\\n    modIndex[0] = -1;\\n    long long sum =0;\\n    for(long long i=0;i<n;i++){\\n        sum += nums[i];\\n        long long m = sum % k;\\n        if(m <0) m +=k; \\n        if(modIndex[m] != -2){\\n            if(i - modIndex[m] >=2){\\n                cout << 1;\\n                return 0;\\n            }\\n        }\\n        else{\\n            modIndex[m] =i;\\n        }\\n    }\\n    cout << 0;\\n}",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 281,
        "title": "Push Pop",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Push Pop</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>You have a list of numbers, and your goal is to rearrange them into a palindrome. A palindrome is a sequence that reads the same forwards and backward, like \\\"12321\\\".</p>\n        \n        <div class=\\\"rules\\\">\n            <h3>Here\\'s the only move you can make:</h3>\n            <p><strong>Split an element:</strong> Choose any number in the list and divide it into two smaller positive numbers. For example, you can turn a 5 into a 2 and a 3.</p>\n        </div>\n\n        <div class=\\\"challenge\\\">\n            <p><strong>Your challenge:</strong> Use the fewest splits possible to create a palindrome.</p>\n            <p class=\\\"note\\\">It\\'s always possible to turn any list into a palindrome using this rule!</p>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of input contains one integer N, representing size of list.</p>\n        <p>The second line contains N space separated integers A<sub>1</sub>,A<sub>2</sub>,...,A<sub>n</sub>.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the minimum number of operations to turn a into a palindrome sequence.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 5×10<sup>5</sup></li>\n            <li>0 ≤ A<sub>i</sub> ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Test Cases</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Testcase 1</h4>\n            <pre class=\\\"input\\\">Input:\n2\n1 1</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>We don\\'t need to do anything as it is already a palindrome.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Testcase 2</h4>\n            <pre class=\\\"input\\\">Input:\n3\n3 2 1</pre>\n            <pre class=\\\"output\\\">Output:\n1</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>We use the following scheme: [3, 2, 1]→[1,2,2,1].</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1PZbOR50JXn-2XdRk2Y-5u_jTJVKmmqhohaq96K9lLuA/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    int N;\\n    cin >> N;\\n    vector<long long> A(N);\\n    for(auto &x:A) cin>>x;\\n    int left=0, right=N-1;\\n    long long left_sum = A[left];\\n    long long right_sum = A[right];\\n    int operations=0;\\n    while(left < right){\\n        if(left_sum == right_sum){\\n            left++;\\n            right--;\\n            if(left < right){\\n                left_sum = A[left];\\n                right_sum = A[right];\\n            }\\n        }\\n        else if(left_sum < right_sum){\\n            left++;\\n            if(left < N){\\n                left_sum += A[left];\\n                operations++;\\n            }\\n            else{\\n                break;\\n            }\\n        }\\n        else{\\n            right--;\\n            if(right >=0){\\n                right_sum += A[right];\\n                operations++;\\n            }\\n            else{\\n                break;\\n            }\\n        }\\n    }\\n    cout << operations;\\n}",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 282,
        "title": "Again Optimize",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Again Optimize</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>You are given an array(1-based indexing) of positive integers of length N.</p>\n        <p>You need to find a value X such that sum of |A[i]-X-i| over all 0 ≤ i < N is minimized. Display the minimum sum.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of input contains a single integer N representing the size of array.</p>\n        <p>The second line contains N integers representing elements of the array.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer representing the minimum summation.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10<sup>8</sup></li>\n            <li>0 ≤ A[i] ≤ 10<sup>8</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Test Cases</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Testcase 1</h4>\n            <pre class=\\\"input\\\">Input:\n5\n2 4 1 5 3</pre>\n            <pre class=\\\"output\\\">Output:\n7</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Given input:</p>\n                <ul>\n                    <li>Array size: 5</li>\n                    <li>Array elements: 2, 4, 1, 5, 3</li>\n                </ul>\n                <p>We need to find a value X that minimizes the sum of |A[i] - X - i| for all i in the array.</p>\n                <p>Calculating the individual terms for each index:</p>\n                <ul>\n                    <li>For i = 0: (|2 - X - 0| = |2 - X|)</li>\n                    <li>For i = 1: (|4 - X - 1| = |3 - X|)</li>\n                    <li>For i = 2: (|1 - X - 2| = |-1 - X| = |X + 1|)</li>\n                    <li>For i = 3: (|5 - X - 3| = |2 - X|)</li>\n                    <li>For i = 4: (|3 - X - 4| = |-1 - X| = |X + 1|)</li>\n                </ul>\n                <p>Now, the total sum can be expressed as:<br>\n                S(X) = |2 - X| + |3 - X| + |X + 1| + |2 - X| + |X + 1|</p>\n                <p>This simplifies to: S(X) = 2|2 - X| + |3 - X| + 2|X + 1|</p>\n                <p>To minimize this sum, we can choose X = 3:</p>\n                <ul>\n                    <li>S(3) = |2 - 3| + |3 - 3| + |3 + 1| + |2 - 3| + |3 + 1|</li>\n                    <li>S(3) = 1 + 0 + 4 + 1 + 4 = 10</li>\n                </ul>\n                <p>Thus, on choosing X = 3, we get the minimum summation as 10.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Testcase 2</h4>\n            <pre class=\\\"input\\\">Input:\n2\n1 2</pre>\n            <pre class=\\\"output\\\">Output:\n0</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Given input:</p>\n                <ul>\n                    <li>Array size: 2</li>\n                    <li>Array elements: 1, 2</li>\n                </ul>\n                <p>We need to find a value X that minimizes the sum of |A[i]-X-i| for all i in the array.</p>\n                <ul>\n                    <li>For i = 1: |1 - X - 1| = |X|</li>\n                    <li>For i = 2: |2 - X - 2| = |X|</li>\n                </ul>\n                <p>Now, we have to find a value of X, such that total sum minimizes.<br>\n                On choosing X=0 we get minimum summation as 0.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/17J7d8XE6z-HDpB8dXlmEpdCwdHXdD9KlCRIZwWtgOQU/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ninline void fast_io() {\\n    ios::sync_with_stdio(false);\\n    cin.tie(nullptr);\\n}\\n\\nint main() {\\n    fast_io();\\n    long long n;\\n    cin >> n;\\n    \\n    unordered_map<long long, unsigned int> freq;\\n    for (long long i = 1; i <= n; ++i) {\\n        long long val;\\n        cin >> val;\\n        long long c = val - i;\\n        freq[c]++;\\n    }\\n    \\n    vector<pair<long long, unsigned int>> fv;\\n    fv.reserve(freq.size());\\n    for (auto &p : freq) {\\n        fv.emplace_back(p.first, p.second);\\n    }\\n    sort(fv.begin(), fv.end(), [&](const pair<long long, unsigned int> &a, const pair<long long, unsigned int> &b) {\\n        return a.first < b.first;\\n    });\\n    \\n    long long tgt = (n + 1) / 2;\\n    long long cf = 0;\\n    long long x = 0;\\n    for (auto &p : fv) {\\n        cf += p.second;\\n        if (cf >= tgt) {\\n            x = p.first;\\n            break;\\n        }\\n    }\\n    \\n    unsigned long long sum = 0;\\n    for (auto &p : fv) {\\n        sum += (unsigned long long)p.second * abs(p.first - x);\\n    }\\n    \\n    cout << sum;\\n    \\n    return 0;\\n}",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 340,
        "title": "Access Code Generation",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Access Code Generation</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Access Code Generation</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Renowned hacker Alex is facing a new challenge. He needs to hack into a machine that operates using a non-decimal number system with base <code>K</code>. To succeed, Alex must generate all possible access codes. An access code has the following features:</p>\n        <ul>\n            <li>It is a number with a specific size <code>N</code> in this machine\\'s number system.</li>\n            <li>It must not include leading zeros.</li>\n            <li><code>0</code> is not considered as an access code.</li>\n            <li>Each access code is generated only once.</li>\n        </ul>\n        <p>Alex generates the access codes in phases, and in each phase, he will generate <code>M</code> access codes. Can you help Alex determine how many codes will be generated in the last phase of this generation process?</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of only one line with three space-separated integers:</p>\n        <ul>\n            <li><code>N</code>: the size of each access code.</li>\n            <li><code>M</code>: the number of codes generated in each phase.</li>\n            <li><code>K</code>: the base of the number system.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the number of access codes that will be generated in the last phase.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10^9</li>\n            <li>1 ≤ M ≤ 10^6</li>\n            <li>2 ≤ K ≤ 10^9</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3 2 2</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>In this case, there are 4 numbers with size 3 (in the number system with base 2). If Alex can generate 2 numbers in one phase, then in the last phase, there will be 2 codes generated.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 4 2</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>In this case, similar to the above case, there are 8 possible codes. If Alex can generate 4 codes in one phase, then in the last phase, there will be 4 codes generated.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1zITmH9Mxw6W7_qXHkibA0a0j8XRAzvw_coG7rL32ub4/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\ntypedef long long ll;\\n\\nll pow_mod_func(ll a, ll b, ll mod){\\n    ll res = 1;\\n    a = a % mod;\\n    while(b > 0){\\n        if(b & 1){\\n            res = (__int128(res) * a) % mod;\\n        }\\n        a = (__int128(a) * a) % mod;\\n        b >>=1;\\n    }\\n    return res;\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    ll N, M, K;\\n    cin >> N >> M >> K;\\n    ll total_codes_mod = 0;\\n    if(N ==1){\\n        total_codes_mod = (K-1) % M;\\n    }\\n    else{\\n        ll k_minus_1_mod = (K-1) % M;\\n        ll pow_k = pow_mod_func(K, N-1, M);\\n        total_codes_mod = (__int128(k_minus_1_mod) * pow_k) % M;\\n    }\\n    ll last_phase_size;\\n    if(total_codes_mod ==0){\\n        last_phase_size = M;\\n    }\\n    else{\\n        last_phase_size = total_codes_mod;\\n    }\\n    cout << last_phase_size;\\n}",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 341,
        "title": "Sorted Linked List",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Sorted Linked List</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Sorted Linked List</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are given two linked lists, <code>LL1</code> and <code>LL2</code>, of sizes <code>M</code> and <code>N</code> respectively. Both lists contain distinct integers. Your task is to create a new sorted linked list, <code>sorted_LL2</code>, following these rules:</p>\n        <ol>\n            <li>The integers in <code>LL2</code> that are also in <code>LL1</code> should maintain their relative order as they appear in <code>LL1</code>.</li>\n            <li>The integers in <code>LL2</code> that are not in <code>LL1</code> should be appended at the end of <code>sorted_LL2</code> in ascending order.</li>\n        </ol>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>The first line contains two integers <code>M</code> and <code>N</code> representing the sizes of the two linked lists.</li>\n            <li>The second line contains <code>M</code> space-separated integers representing the elements of the first linked list <code>LL1</code>.</li>\n            <li>The third line contains <code>N</code> space-separated integers representing the elements of the second linked list <code>LL2</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the integers of the sorted linked list <code>sorted_LL2</code> in a single line separated by spaces.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ M, N ≤ 10^5</li>\n            <li>1 ≤ integers in the list ≤ 10^9</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3 5\n8 4 9\n8 9 8 4 8</pre>\n            <pre class=\\\"output\\\">Output:\n8 8 8 4 9</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>Order Maintenance: <code>LL1</code> is [8, 4, 9]. In <code>LL2</code>, 8 appears first (three times), then 4, and finally 9. Thus, we order the integers from <code>LL2</code> that are also in <code>LL1</code> as [8, 8, 8, 4, 9].</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3 9\n2 5 3\n5 3 2 5 5 5 3 7 8</pre>\n            <pre class=\\\"output\\\">Output:\n2 5 5 5 5 3 3 7 8</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>Order Maintenance: <code>LL1</code> is [2, 5, 3]. In <code>LL2</code>, 2 appears first, then 5, and finally 3. So, we order the integers from <code>LL2</code> that are also in <code>LL1</code> as [2, 5, 5, 5, 5, 3, 3]. Appending Remaining: The integers in <code>LL2</code> that are not in <code>LL1</code> are 7 and 8, which are sorted and appended to the end of <code>sorted_LL2</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1W1DC85bDolo07rEyi9GznG0Fanv0gAgnsnmgqEsFCYU/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(nullptr);\\n\\n    long long m, n;\\n    cin >> m >> n;\\n\\n    vector<long long> l1(m);\\n    for(long long i = 0; i < m; i++) cin >> l1[i];\\n\\n    vector<pair<long long, long long>> l1o;\\n    l1o.reserve(m);\\n    for(long long i = 0; i < m; i++) l1o.emplace_back(l1[i], i);\\n    sort(l1o.begin(), l1o.end());\\n\\n    vector<long long> inL1;\\n    inL1.reserve(n);\\n    vector<long long> rem;\\n    rem.reserve(n);\\n\\n    for(long long j = 0; j < n; j++){\\n        long long v;\\n        cin >> v;\\n        auto it = lower_bound(l1o.begin(), l1o.end(), make_pair(v, -1LL));\\n        if(it != l1o.end() && it->first == v) inL1.emplace_back(it->second);\\n        else rem.emplace_back(v);\\n    }\\n\\n    vector<long long> cnt(m, 0);\\n    for(auto &idx : inL1) cnt[idx]++;\\n\\n    vector<long long> res;\\n    res.reserve(n);\\n    for(long long i = 0; i < m; i++){\\n        while(cnt[i] > 0){\\n            res.emplace_back(l1[i]);\\n            cnt[i]--;\\n        }\\n    }\\n\\n    sort(rem.begin(), rem.end());\\n    for(auto &v : rem) res.emplace_back(v);\\n\\n    string out;\\n    out.reserve(n * 11);\\n    for(long long i = 0; i < (long long)res.size(); i++){\\n        out += to_string(res[i]);\\n        if(i != (long long)res.size() -1) out += \\' \\';\\n    }\\n    cout << out << \\'\\\\n\\';\\n\\n    return 0;\\n}",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 342,
        "title": "Minimum Cost Recipe",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Minimum Cost Recipe</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Minimum Cost Recipe</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You are given a tree with <code>n</code> nodes. Each node represents an ingredient, and it has a cost associated with obtaining it. You start with the root ingredient (node 1), and you want to find the minimum cost required to create the recipe by considering the costs of the base ingredients (leaf nodes). Each ingredient can only be obtained by combining one or two or more other ingredients, represented as its children in the tree. You can visit each node only once.</p>\n        <p>Given:</p>\n        <ol>\n            <li>The tree structure in the form of an adjacency list.</li>\n            <li>The cost list where <code>cost[i]</code> represents the cost of obtaining the <code>i-th</code> ingredient.</li>\n        </ol>\n        <p>Your task is to find the minimum cost required to create the recipe starting from the root ingredient and using the minimum cost of the base ingredients (leaf nodes).</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>The first line of input contains an integer <code>n</code>: Number of nodes.</li>\n            <li>The second line of input represents an integer <code>e</code>: Number of edges.</li>\n            <li>The next <code>e</code> lines take the list of edges representing parent-child relationships. Each edge is represented with two space-separated integers <code>u</code> and <code>v</code> where <code>u</code> represents the parent node and <code>v</code> represents the child node.</li>\n            <li>Next line takes a list of costs for each node.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The output should print an integer representing the minimum cost to create the recipe using the minimum cost of the base ingredients.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10^6</li>\n            <li>Root node is numbered as 1 and child nodes follow it serially.</li>\n            <li>0 ≤ e ≤ n−1</li>\n            <li>1 < cost[i] ≤ 10^10</li>\n            <li>The edges provided must form a valid tree (acyclic and connected).</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n5\n1 2\n2 3\n2 4\n3 5\n4 6\n20 11 9 6 3 1</pre>\n            <pre class=\\\"output\\\">Output:\n38</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>Here, 5 and 6 are the base ingredients (leaf nodes).</p>\n                <p>Cost for an ingredient 5 = 20 + 11 + 9 + 3 = 43</p>\n                <p>Cost for an ingredient 6 = 20 + 11 + 6 + 1 = 38</p>\n                <p>Min cost to create a recipe = Min(43, 38) = 38</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n5\n1 2\n1 3\n2 4\n2 5\n3 6\n5 6 4 1 6 2</pre>\n            <pre class=\\\"output\\\">Output:\n11</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>Here, 4, 5, and 6 are the base ingredients (leaf nodes).</p>\n                <p>Cost for an ingredient 4 = 5 + 6 + 4 + 1 = 16</p>\n                <p>Cost for an ingredient 5 = 5 + 6 + 4 + 6 = 21</p>\n                <p>Cost for an ingredient 6 = 5 + 6 + 4 + 2 = 17</p>\n                <p>Min cost to create a recipe = Min(16, 21, 17) = 16</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1lF2K1SG7eG8eJvI4KcS8na7FDc708YUvJECwoNi0XK4/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(NULL);\\n    \\n    ll n;\\n    cin >> n;\\n    ll e;\\n    cin >> e;\\n    \\n    vector<vector<int>> adj(n+1, vector<int>());\\n    \\n    for(ll i=0;i<e;i++){\\n        ll u, v;\\n        cin >> u >> v;\\n        adj[u].push_back(v);\\n    }\\n    \\n    vector<ll> c(n+1, 0);\\n    for(ll i=1;i<=n;i++) cin >> c[i];\\n    \\n    queue<pair<int, ll>> q;\\n    q.push({1, c[1]});\\n    \\n    ll mc = LLONG_MAX;\\n    \\n    while(!q.empty()){\\n        pair<int, ll> cr = q.front();\\n        q.pop();\\n        int nd = cr.first;\\n        ll ac = cr.second;\\n        \\n        if(adj[nd].empty()){\\n            if(ac < mc){\\n                mc = ac;\\n            }\\n        }\\n        else{\\n            for(auto &ch: adj[nd]){\\n                ll nac = ac + c[ch];\\n                q.push({ch, nac});\\n            }\\n        }\\n    }\\n    \\n    cout << mc;\\n}",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 351,
        "title": "Array Similarity Factor",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Array Similarity Factor</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Array Similarity Factor</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Your assignment involves calculating the similarity factor between multiple arrays after applying specified rotations. The similarity factor is defined as the sum of the minimum elements found at each index across the rotated arrays.</p>\n        <p>Given <code>N</code> arrays, each of length <code>K</code>, and a maximum rotation value <code>P</code>, your goal is to apply the specified rotations to each array and then compute the similarity factor.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of:</p>\n        <ul>\n            <li>The first line contains three space-separated integers <code>N</code>, <code>K</code>, and <code>P</code>, where:\n                <ul>\n                    <li><code>N</code> is the number of arrays.</li>\n                    <li><code>K</code> is the length of each array.</li>\n                    <li><code>P</code> is the maximum rotation value allowed.</li>\n                </ul>\n            </li>\n            <li>The next <code>N</code> lines contain <code>K</code> integers each, representing the <code>N</code> arrays.</li>\n            <li>The last line contains <code>N</code> integers, representing the rotation instructions for each array.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Display an integer representing the similarity factor between all arrays after applying the rotations.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N, K ≤ 10^2</li>\n            <li>0 ≤ P ≤ 10^2</li>\n            <li>1 ≤ maximum element in the arrays ≤ 10^2</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3 4 2\n1 2 3 4\n5 6 7 8\n9 10 11 12\n1 2 0</pre>\n            <pre class=\\\"output\\\">Output:\n15</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>After applying the rotations:</p>\n                <ul>\n                    <li>First array: [2, 3, 4, 1]</li>\n                    <li>Second array: [7, 8, 5, 6]</li>\n                    <li>Third array: [9, 10, 11, 12]</li>\n                </ul>\n                <p>The minimum elements at each index are:</p>\n                <ul>\n                    <li>Index 0: min(2, 7, 9) = 2</li>\n                    <li>Index 1: min(3, 8, 10) = 3</li>\n                    <li>Index 2: min(4, 5, 11) = 4</li>\n                    <li>Index 3: min(1, 6, 12) = 1</li>\n                </ul>\n                <p>The similarity factor is the sum of these minimum elements: 2 + 3 + 4 + 1 = 10.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1-osiWSsKiol9MUIf2m7ljyLo2wJpYtU7Gy4WZsNil3w/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 352,
        "title": "n",
        "problem_statement": "n",
        "google_doc_link": "https://docs.google.com/document/d/1n4-rLQwKXlE9cMylomT-IKjbYqY-6guzkaR9Ur3p2nw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 354,
        "title": "Special Divisor for Unlocking Powers",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Special Divisor for Unlocking Powers</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h1, h2, h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            margin-bottom: 15px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <h1>Special Divisor for Unlocking Powers</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>In the Kingdom of Minnesota, the wise sage Archimedes has discovered an integer <code>w</code> that helps unlock powerful abilities. To unlock these powers, Archimedes needs to find a special divisor for a number <code>M</code>.</p>\n        <p>This divisor is the greatest and will help in determining the number <code>M</code>, which is defined as <code>AN = NX</code>. Archimedes believes that the number <code>M</code> should have the maximum possible number of divisors. To assist Archimedes, you need to find the smallest <code>N</code> such that <code>M</code> has the maximum number of divisors.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first and only line of input consists of a single integer <code>M</code>, representing the key to unlocking the powers.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer representing the smallest <code>N</code> such that <code>M</code> has the maximum number of divisors.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ M ≤ 10^12</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n12</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The divisors of 12 are: 1, 2, 3, 4, 6, 12.</p>\n                <p>The number 6 is the smallest number such that <code>M</code> (which is 12) has the maximum number of divisors.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n16</pre>\n            <pre class=\\\"output\\\">Output:\n8</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation:</p>\n                <p>The divisors of 16 are: 1, 2, 4, 8, 16.</p>\n                <p>The number 8 is the smallest number such that <code>M</code> (which is 16) has the maximum number of divisors.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1b-X8SXZvF6NXaOqfdIBvJ9kKA5AcWfB62wk2ntjsNGk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 359,
        "title": "Permutation Transformation Problem",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Permutation Transformation Problem</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>Permutation Transformation Problem</h2>\n        <p>You are given two permutations of numbers from 1 to N: permutation P and permutation Q. Initially, Q is in the order Q = [1, 2, 3, ..., N]. You need to transform Q into P by performing N specific operations.</p>\n        <p>The operation is defined as follows: you can remove any element I from Q and reinsert it at any position in Q.</p>\n        <p>Your task is to determine the number of different ways to perform these N operations such that Q becomes identical to P after all operations. The result should be given modulo \\\\(10^9 + 7\\\\).</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of input contains a single integer N denoting the number of elements in the permutations.</p>\n        <p>The second line of input contains N space-separated integers representing the permutation P.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print the number of ways to transform permutation Q into permutation P, modulo \\\\(10^9 + 7\\\\).</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ N ≤ 10^3</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n2 4 1 3\n</pre>\n            <pre class=\\\"output\\\">Output:\n5\n</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this example, the initial permutation Q is [1, 2, 3, 4]. The permutation P is [2, 4, 1, 3]. There are 5 different ways to transform Q into P by performing the allowed operations.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1rD3FtRFbaq83KxikrSrlskrU2Hkmgne6qmrLB7VG8VE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Myntra",
        "company_id": 78
    },
    {
        "id": 360,
        "title": "Fancy Tower Problem",
        "problem_statement": "<!DOCTYPE html>\n<html lang=\\\"en\\\">\n<head>\n    <meta charset=\\\"UTF-8\\\">\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\n    <title>Fancy Tower Problem</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n        }\n        .problem-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 8px;\n            background-color: #f9f9f9;\n        }\n        h3 {\n            color: #333;\n        }\n        .problem-description, .input-format, .output-format, .constraints, .examples {\n            margin-bottom: 20px;\n        }\n        .example {\n            background-color: #fff;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        pre {\n            background-color: #f4f4f4;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            overflow-x: auto;\n        }\n        .explanation {\n            margin-top: 10px;\n            color: #555;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-bottom: 20px;\n        }\n        table, th, td {\n            border: 1px solid #ddd;\n        }\n        th, td {\n            padding: 8px;\n            text-align: left;\n        }\n        th {\n            background-color: #f4f4f4;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-description\\\">\n        <h2>Fancy Tower Problem</h2>\n        <p>Little Fiona loves creating beautiful patterns with her blocks. She has N blocks of various sizes \\\\( A_1, A_2, \\\\ldots, A_N \\\\), where N is even. Some blocks may be of the same size. Fiona wants to stack all her blocks to form what she calls a \\\"fancy tower.\\\"</p>\n        <p>A tower \\\\( B_1, B_2, \\\\ldots, B_N \\\\) is considered fancy if it meets these criteria:</p>\n        <ol>\n            <li>The second block is strictly bigger than the first one, and then each block alternates between being strictly smaller or strictly bigger than the previous one. Formally, \\\\( B_1 < B_2 > B_3 < B_4 > \\\\ldots > B_{N-1} < B_N \\\\).</li>\n            <li>The sizes of the blocks on even positions must be strictly increasing. Formally, \\\\( B_2 < B_4 < B_6 < \\\\ldots < B_N \\\\).</li>\n        </ol>\n        <p>Fiona wants to know how many different fancy towers she can build using all of her blocks. Two towers are considered different if their sequences \\\\( B_1, B_2, \\\\ldots, B_N \\\\) differ in at least one position. Since large numbers are overwhelming for Fiona, she needs the answer modulo \\\\( 998244353 \\\\).</p>\n        <p>Can you help Fiona find the number of different fancy towers she can create?</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line of input contains an integer N denoting the length of sequence A.</p>\n        <p>The second line of input contains N space-separated integers representing the sequence itself in sorted order.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print an integer representing the number of different fancy towers Fiona can create, modulo \\\\( 998244353 \\\\).</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>2 ≤ N ≤ 10^6</li>\n            <li>1 ≤ A_i ≤ N</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n1 2 2 3\n</pre>\n            <pre class=\\\"output\\\">Output:\n2\n</pre>\n            <div class=\\\"explanation\\\">\n                <p>In this example, the sequence is [1, 2, 2, 3]. There are 2 different fancy towers that can be formed:</p>\n                <ol>\n                    <li>[1, 3, 2, 2]</li>\n                    <li>[2, 3, 1, 2]</li>\n                </ol>\n            </div>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
        "google_doc_link": "https://docs.google.com/document/d/1ITPNvE8rgnJzsQ5n6_2Lulc2pyoCyVJp8TZFO7i3Djc/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Myntra",
        "company_id": 78
    }
]