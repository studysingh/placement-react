[
    {
        "id": 297,
        "title": "Pascal Triangle Encryption",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <div class=\\\\\\\"problem-header\\\\\\\">\\n        <h1>Pascal Triangle Encryption</h1>\\n    </div>\\n\\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <p>In order to ensure maximum security, the developers at Amazon employ multiple encryption methods to keep user data protected.</p>\\n        \\n        <p>In one method, numbers are encrypted using a scheme called \\\\\\'Pascal Triangle\\\\\\'. When an array of digits is fed to this system, it sums the adjacent digits. It then takes the rightmost digit (least significant digit) of each addition for the next step. Thus, the number of digits in each step is reduced by 1. This procedure is repeated until there are only 2 digits left, and this sequence of 2 digits forms the encrypted number.</p>\\n        \\n        <p>Given the initial sequence of the digits of numbers, find the encrypted number. You should report a string of digits representing the encrypted number.</p>\\n    </div>\\n\\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Example</h3>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <p><strong>numbers = [4, 5, 6, 7]</strong></p>\\n            <p>Encryption occurs as follows:</p>\\n            <img src=\\\\\\\"encryption-diagram.png\\\\\\\" alt=\\\\\\\"Encryption Diagram\\\\\\\" />\\n            <p>Hence, the encrypted number formed is 04.</p>\\n        </div>\\n    </div>\\n\\n    <div class=\\\\\\\"function-description\\\\\\\">\\n        <h3>Function Description</h3>\\n        <p>Complete the function <code>findNumber</code> in the editor below.</p>\\n        <p><code>findNumber</code> has the following parameter:</p>\\n        <ul>\\n            <li><code>int numbers[n]</code>: the initial sequence of digits</li>\\n        </ul>\\n        <p>Returns:</p>\\n        <ul>\\n            <li><code>string</code>: the encrypted number represented as a string of 2 characters.</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li>2 ≤ numbers.length ≤ 5 × 10<sup>3</sup></li>\\n            <li>0 ≤ numbers[i] ≤ 9</li>\\n        </ul>\\n    </div>\\n\\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Sample Cases</h3>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n4\\n1 2 3 4</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n82</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>The encryption occurs as follows: [1, 2, 3, 4] → [3, 5, 7] → [8, 2].</p>\\n            </div>\\n        </div>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n2\\n4 5</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n45</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>The number of digits in the sequence is already equal to 2 so the number remains unchanged.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Skv-QeLtFaO3UOqf3cgG8a6vNxh1XWruWEgyfl5Ytls/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Amazon ",
        "company_id": 88
    },
    {
        "id": 298,
        "title": "Maximize System Throughput",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Maximize System Throughput</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>The developers at Amazon are working on optimizing their database query times. There are <em>n</em> host servers, where the throughput of the <em>i<sup>th</sup></em> host server is given by <code>host_throughput[i]</code>.</p>\n        \n        <p>These host servers are grouped into clusters of size three. The throughput of a cluster, denoted as <code>cluster_throughput</code>, is defined as the median of the <code>host_throughput</code> values of the three servers in the cluster. Each host server can be part of at most one cluster, and some servers may remain unused.</p>\n        \n        <p>The total system throughput, called <code>system_throughput</code>, is the sum of the throughputs of all the clusters formed. The task is to find the maximum possible <code>system_throughput</code>.</p>\n        \n        <p><strong>Note:</strong> The median of a cluster of three host servers is the throughput of the 2nd server when the three throughputs are sorted in either ascending or descending order.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMaxThroughput</code> in the editor below.</p>\n        <p><code>getMaxThroughput</code> has the following parameter:</p>\n        <ul>\n            <li><code>int host_throughput[n]</code>: an array denoting the throughput of the host servers</li>\n        </ul>\n        <p>Returns:</p>\n        <ul>\n            <li><code>long</code>: the maximum <code>system_throughput</code></li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ <em>n</em> ≤ 2 × 10<sup>5</sup></li>\n            <li>1 ≤ <code>host_throughput[i]</code> ≤ 10<sup>8</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer <em>n</em>, the number of host servers.</p>\n        <p>The next <em>n</em> lines contain <code>host_throughput[i]</code> (where 0 ≤ <em>i</em> &lt; <em>n</em>), the throughput of the <em>i<sup>th</sup></em> host server.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n4\n6\n3\n5\n4\n5</pre>\n            <pre class=\\\"output\\\">Output:\n9</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here, <em>n</em> = 6, and the host throughput is given by <code>host_throughput = [4, 6, 3, 5, 4, 5]</code>.</p>\n                <p>The maximum number of clusters that can be formed is 2.</p>\n                <p>One possible way to form the clusters is to select the 1<sup>st</sup>, 2<sup>nd</sup>, and 3<sup>rd</sup> host servers for the first cluster, and the 4<sup>th</sup>, 5<sup>th</sup>, and 6<sup>th</sup> host servers for the second cluster. The <code>cluster_throughput</code> of the first cluster [4, 6, 3] will be 4 (the median), and the <code>cluster_throughput</code> of the second cluster [5, 4, 5] will be 5 (the median).</p>\n                <p>Thus, the <code>system_throughput</code> will be 4 + 5 = 9.</p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n7\n8\n6\n3\n4\n4\n5\n6</pre>\n            <pre class=\\\"output\\\">Output:\n11</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here, <em>n</em> = 7, and the host throughput is given by <code>host_throughput = [8, 6, 3, 4, 4, 5, 6]</code>.</p>\n                <p>The maximum number of clusters that can be formed is 2, with one host server remaining unused.</p>\n                <p>One possible way to form the clusters is to select the 1<sup>st</sup>, 2<sup>nd</sup>, and 3<sup>rd</sup> host servers for the first cluster, and the 4<sup>th</sup>, 6<sup>th</sup>, and 7<sup>th</sup> host servers for the second. The <code>cluster_throughput</code> of the first cluster [8, 6, 3] will be 6 (the median), and the <code>cluster_throughput</code> of the second cluster [4, 5, 6] will be 5 (the median).</p>\n                <p>Thus, the <code>system_throughput</code> will be 6 + 5 = 11.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1_49YP8SqF3F4lvtlc37MNoyGmvfdbZaT_Ev2meQl_Dk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Amazon ",
        "company_id": 88
    },
    {
        "id": 434,
        "title": "Longest Self-Sufficient Proper Substring",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Longest Self-Sufficient Proper Substring</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>\n            Software developers at Amazon are developing a new library for Natural Language Processing. In one of its modules, every string needs to be preprocessed in a particular manner to find the length of its longest self-sufficient proper substring.\n        </p>\n        <p>\n            A <strong>self-sufficient proper substring</strong> is one where:\n        </p>\n        <ol>\n            <li>The substring is not the entire string <code>s</code>.</li>\n            <li>No letter that occurs inside the substring also occurs outside the substring.</li>\n        </ol>\n        <p>\n            Given the string <code>fullString</code> of length <code>n</code>, find the length of its longest self-sufficient proper substring. If none exists, return <code>0</code>.\n        </p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>\n            The function <code>findLongestLength</code> has the following parameter:\n        </p>\n        <ul>\n            <li><strong>string fullString:</strong> the string to analyze.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>\n            Returns an <code>int</code>: the length of the longest self-sufficient proper substring.\n        </p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 10^5</code></li>\n            <li><code>fullString</code> consists of lowercase English characters.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nfullString = \\\"amazonservices\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n11</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here, the length of <code>fullString</code> is <code>n = 14</code>. The longest substring where no letter occurs both inside and outside the substring is <code>zonservices</code>.</p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nfullString = \\\"abadgdg\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The two proper self-sufficient substrings are <code>aba</code> and <code>dg</code>.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1GS-qobS_jbNb1NymkuiF0x9MedCXWd6RFnuRAMIgQDw/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Amazon ",
        "company_id": 88
    },
    {
        "id": 435,
        "title": "CodeCrafters",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Code Question 1</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Developers at Amazon are working on a prototype for a utility that compresses a <em>n x n</em> matrix, <code>data</code>, with the help of a compression rate represented by an array, <code>factor</code>. The utility returns an integer which is the maximum sum of exactly <code>x</code> elements of the matrix such that the number of elements taken from the <code>i<sup>th</sup></code> row does not exceed <code>factor[i]</code> for all <code>0 ≤ i < n</code>. The utility returns <code>-1</code> if the compression cannot be performed.</p>\n        \n        <p>Given array <code>data</code> and <code>factor</code>, find the maximum sum to perform compression under the given constraints, or <code>-1</code> if it is not possible.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The function <code>findMaxValue</code> has the following parameters:</p>\n        <ul>\n            <li><code>int factor[n]</code>: the rate of compression for each element of data</li>\n            <li><code>int data[n][n]</code>: the square matrix of data</li>\n            <li><code>int x</code>: the number of elements to choose</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Returns a long integer:</p>\n        <ul>\n            <li><code>long int</code>: the maximum sum if the compression is possible or <code>-1</code> if it is not.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 1000</code></li>\n            <li><code>1 ≤ data[i][j] ≤ 10<sup>9</sup></code></li>\n            <li><code>0 ≤ factor[i] ≤ n</code></li>\n            <li><code>0 ≤ x ≤ n<sup>2</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfactor = [2, 1, 2]\nx = 2</pre>\n            <pre class=\\\"output\\\">Output:\n15</pre>\n            <div class=\\\"explanation\\\">\n                <p>The best choices for each row are (3), (5), and (9), respectively. Only <code>x = 2</code> elements can be chosen. The maximum sum of 2 elements is <code>a[2][2] + a[1][2] = 9 + 6 = 15</code>.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\nfactor = [1, 1]\ndata = [[10, 10], [10, 10]]\nx = 4</pre>\n            <pre class=\\\"output\\\">Output:\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Choose 1 element from each of the rows. There are only 2 rows, but <code>x = 4</code> elements are required, which is not possible.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1tKlSqP3xU9VosSw1Kj3UD5bO5VxB9QvVmo6U5KmZg7w/edit?usp=sharing",
        "solution_code": "long findMaxValue(vector<int> factor, vector<vector<int>> data, int x) {\\n    long long sumFactor = 0;\\n    int n = data.size();\\n    for (int i = 0; i < n; i++) {\\n        sumFactor += factor[i];\\n    }\\n    if (sumFactor < x) {\\n        return -1;\\n    }\\n    vector<long long> candidates;\\n    candidates.reserve(sumFactor);\\n    for (int i = 0; i < n; i++) {\\n        sort(data[i].begin(), data[i].end(), greater<long long>());\\n        for (int j = 0; j < factor[i]; j++) {\\n            candidates.push_back(data[i][j]);\\n        }\\n    }\\n    sort(candidates.begin(), candidates.end(), greater<long long>());\\n    long long answer = 0;\\n    for (int i = 0; i < x; i++) {\\n        answer += candidates[i];\\n    }\\n    return answer;\\n}",
        "company_name": "Amazon ",
        "company_id": 88
    },
    {
        "id": 445,
        "title": "Minimum Health Required to Win the Game",
        "problem_statement": "<div class=\\\\\\\"problem-container\\\\\\\">\\n    <h1>Minimum Health Required to Win the Game</h1>\\n    \\n    <div class=\\\\\\\"problem-description\\\\\\\">\\n        <p>Amazon Prime Games is designing a game. The player needs to pass <code>n</code> rounds sequentially in this game. Rules of play are as follows:</p>\\n        <ul>\\n            <li>The player loses <code>power[i]</code> health to complete round <code>i</code>.</li>\\n            <li>The player\\\\\\'s health must be greater than 0 at all times.</li>\\n            <li>The player can choose to use armor in any one round. The armor will prevent damage of <code>min(armor, power[i])</code>.</li>\\n        </ul>\\n        <p>Determine the minimum starting health for a player to win the game.</p>\\n    </div>\\n    \\n    <div class=\\\\\\\"input-format\\\\\\\">\\n        <h3>Input Format</h3>\\n        <p>The first line contains an integer <code>n</code>, the number of rounds.</p>\\n        <p>The second line contains <code>n</code> space-separated integers, representing the health cost of each round.</p>\\n        <p>The third line contains an integer <code>armor</code>, the maximum amount of health that may be returned one round only.</p>\\n    </div>\\n    \\n    <div class=\\\\\\\"output-format\\\\\\\">\\n        <h3>Output Format</h3>\\n        <p>Return the minimum amount of health required at the beginning of the game.</p>\\n    </div>\\n    \\n    <div class=\\\\\\\"constraints\\\\\\\">\\n        <h3>Constraints</h3>\\n        <ul>\\n            <li><code>1 ≤ n ≤ 10<sup>5</sup></code></li>\\n            <li><code>1 ≤ armor ≤ 10<sup>9</sup></code></li>\\n            <li><code>1 ≤ power[i] ≤ 10<sup>9</sup></code></li>\\n        </ul>\\n    </div>\\n    \\n    <div class=\\\\\\\"examples\\\\\\\">\\n        <h3>Examples</h3>\\n        <div class=\\\\\\\"example\\\\\\\">\\n            <pre class=\\\\\\\"input\\\\\\\">Input:\\n3\\n1 2 6\\narmor = 5</pre>\\n            <pre class=\\\\\\\"output\\\\\\\">Output:\\n6</pre>\\n            <div class=\\\\\\\"explanation\\\\\\\">\\n                <p>Using the armor in the first round, the player\\\\\\'s health after each round is as follows:</p>\\n                <ul>\\n                    <li>Initial: 6</li>\\n                    <li>After the first round with armor: 6 - 1 (armor) = 6</li>\\n                    <li>After the second round: 6 - 2 = 4</li>\\n                    <li>After the third round: 4 - 3 = 1</li>\\n                </ul>\\n                <p>Note that here since <code>armor</code> is greater than the power of the enemy it is used on, the protected amount is only 3. Hence, the answer is 4.</p>\\n            </div>\\n        </div>\\n    </div>\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1dmHx2fCpBA5fGv-JMDTCfxXJv7ljP2vz_KP4a2YP8-o/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nlong getMinimumValue(vector<int> power, int armor) {\\n    long long sum = 0;\\n    int max_p = 0;\\n    for(auto p: power){\\n        sum += p;\\n        if(p > max_p) max_p = p;\\n    }\\n    long long reduction = min((long long)armor, (long long)max_p);\\n    long long H = sum - reduction + 1;\\n    if (H < 1) H = 1;\\n    return H;\\n}\\n\\nint main(){\\n    int n;\\n    cin >> n;\\n    vector<int> power(n);\\n    for(int &x: power) cin >> x;\\n    int armor;\\n    cin >> armor;\\n    cout << getMinimumValue(power, armor);\\n}",
        "company_name": "Amazon ",
        "company_id": 88
    },
    {
        "id": 446,
        "title": "Maximum Sum Compression Utility",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Maximum Sum Compression Utility</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Developers at Amazon are working on a prototype for a utility that compresses a <code>n x n</code> matrix, <code>data</code>, with the help of a compression rate represented by an array, <code>factor</code>. The utility returns an integer which is the maximum sum of exactly <code>x</code> elements of the matrix such that the number of elements taken from the <code>i<sup>th</sup></code> row does not exceed <code>factor[i]</code>. The utility returns -1 if the compression cannot be performed.</p>\n        <p>Given array <code>data</code> and <code>factor</code>, find the maximum sum to perform compression under the given constraints, or -1 if it is not possible.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains an integer <code>n</code>, the size of the matrix.</p>\n        <p>The second line contains <code>n</code> space-separated integers representing the compression rates for each element of <code>data</code>.</p>\n        <p>The third line contains <code>n</code> space-separated integers representing the square matrix of <code>data</code>.</p>\n        <p>The fourth line contains an integer <code>x</code>, the number of elements to choose.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return a long integer: the maximum sum if the compression is possible, or -1 if it is not.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>1 ≤ n ≤ 1000</code></li>\n            <li><code>1 ≤ data[i][j] ≤ 10<sup>9</sup></code></li>\n            <li><code>0 ≤ factor[i] ≤ n</code></li>\n            <li><code>0 ≤ x ≤ n<sup>2</sup></code></li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n2 1 3\n6 8 3\n5 10 6\nx = 5</pre>\n            <pre class=\\\"output\\\">Output:\n30</pre>\n            <div class=\\\"explanation\\\">\n                <p>Choose 6 and 8 from row 0, 10 from row 1, then 5 and 1 from row 2. The sum is <code>6 + 8 + 10 + 5 + 1 = 30</code>.</p>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n2\n1 1\n10 10\n10 10\nx = 4</pre>\n            <pre class=\\\"output\\\">Output:\n-1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Choose 1 element from each of the rows. There are only two elements available, which cannot satisfy the requirement of choosing 4 elements.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1-QCDkEFuJAonU8WPQbcMmWf7VOZnIwJvTI3XK4_DMmQ/edit?usp=sharing",
        "solution_code": "long findMaxValue(vector<int> factor, vector<vector<int>> data, int x) {\\n    long long sumFactor = 0;\\n    int n = data.size();\\n    for (int i = 0; i < n; i++) {\\n        sumFactor += factor[i];\\n    }\\n    if (sumFactor < x) {\\n        return -1;\\n    }\\n    vector<long long> candidates;\\n    candidates.reserve(sumFactor);\\n    for (int i = 0; i < n; i++) {\\n        sort(data[i].begin(), data[i].end(), greater<long long>());\\n        for (int j = 0; j < factor[i]; j++) {\\n            candidates.push_back(data[i][j]);\\n        }\\n    }\\n    sort(candidates.begin(), candidates.end(), greater<long long>());\\n    long long answer = 0;\\n    for (int i = 0; i < x; i++) {\\n        answer += candidates[i];\\n    }\\n    return answer;\\n}",
        "company_name": "Amazon ",
        "company_id": 88
    },
    {
        "id": 447,
        "title": "Similar Substrings in Reviews",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h1>Similar Substrings in Reviews</h1>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Amazon shoppers often refer to user reviews to help them decide whether to purchase an item. They can focus their efforts using a keyword search, but typographical errors are common in reviews. To help mitigate this problem, Amazon\\'s algorithm will include reviews that contain a word that is similar to the search term. A string, <code>s</code>, is similar to another string, <code>t</code>, if it is possible to swap two adjacent characters at most once in <code>s</code> to turn it into <code>t</code>. Given a keyword string named <code>keyword</code>, find how many substrings of <code>review</code> are similar to <code>keyword</code>.</p>\n        <p>Note: A substring is a contiguous sequence of characters within a string. Two substrings are considered distinct if they begin at different positions.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains the string <code>keyword</code>, the keyword to find.</p>\n        <p>The second line contains the string <code>review</code>, the text to search.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return the number of substrings of <code>review</code> that are similar to <code>keyword</code>.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li><code>keyword</code> and <code>review</code> will consist solely of lowercase English letters.</li>\n            <li><code>1 ≤ |keyword| ≤ 50</code>, where <code>|s|</code> denotes the length of a string <code>s</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nkeyword = \\\"moon\\\"\nreview = \\\"monomon\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>The substrings of <code>monomon</code> that are similar to <code>moon</code> are:</p>\n                <ul>\n                    <li><code>mono</code></li>\n                    <li><code>omon</code></li>\n                </ul>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nkeyword = \\\"aaa\\\"\nreview = \\\"aaaa\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <p>The 2 substrings of <code>aaaa</code> that are similar to <code>aaa</code> are:</p>\n                <ul>\n                    <li><code>aaa</code></li>\n                    <li><code>aaa</code></li>\n                </ul>\n            </div>\n        </div>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\nkeyword = \\\"xxy\\\"\nreview = \\\"zxxxyyx\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>The 3 substrings of <code>zxxxyyx</code> that are similar to <code>xxy</code> are:</p>\n                <ul>\n                    <li><code>zxx</code></li>\n                    <li><code>xx</code></li>\n                    <li><code>xxy</code></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1J9JNJgla7XyolrlXBXo7kLFFFGQ5b8BCpjvbPOzF1SY/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nbool areSimilar(const string &s, const string &t) {\\n    if (s == t)\\n        return true;\\n    for (size_t i = 0; i < s.length() - 1; ++i) {\\n        string swapped = s;\\n        swap(swapped[i], swapped[i + 1]);\\n        if (swapped == t)\\n            return true;\\n    }\\n    return false;\\n}\\n\\nint findSimilar(string keyword, string review) {\\n    int count = 0;\\n    int kLen = keyword.length();\\n    int rLen = review.length();\\n    if (kLen > rLen)\\n        return 0;\\n    for (int i = 0; i <= rLen - kLen; ++i) {\\n        string substring = review.substr(i, kLen);\\n        if (areSimilar(substring, keyword))\\n            count++;\\n    }\\n    return count;\\n}",
        "company_name": "Amazon ",
        "company_id": 88
    }
]