[
    {
        "id": 1353,
        "title": "Maximum Contiguous Racers with Same Speed",
        "problem_statement": "<h1>Maximum Contiguous Racers with Same Speed</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>HackerLend Sports Club wants to send a team for a relay race. There are n racers indexed from 0 to n-1, each with a speed of speed[i] units. The coach wants to send a contiguous segment of racers with the same speed to ensure smooth baton transfer. To maximize the team size, the coach may remove at most k racers from the group.</p>\r\n\r\n<p>Given the array of racer speeds and an integer k, find the maximum possible number of racers in a contiguous segment with the same speed after removing at most k racers.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMaxRacers</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int speed[n]</code>: the speeds of the racers</li>\r\n    <li><code>int k</code>: the maximum number of racers that can be removed</li>\r\n</ul>\r\n<p><strong>Returns</strong>:</p>\r\n<ul>\r\n    <li><code>int</code>: the maximum number of racers that can be sent after removing at most k racers</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 6\r\nk = 2\r\nspeed = [1, 4, 4, 2, 2, 4]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The optimal strategy is to remove the two racers with speed 2 (at indices 3 and 4), resulting in <code>[1, 4, 4, 4]</code>. Now there are 3 contiguous racers with speed 4, which is the maximum possible. Therefore, the answer is 3.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nk = 1\r\nspeed = [1, 2, 1, 2, 1]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to delete the second racer (value 2 at index 1) to get <code>[1, 1, 2, 1]</code>. The first two racers (both 1s) can be sent as they have the same speed. Alternatively, deleting the third racer (value 1 at index 2) to get <code>[1, 2, 2, 1]</code> or the fourth racer (value 2 at index 3) to get <code>[1, 2, 1, 1]</code> also achieves the same maximum number of racers that can be sent (2).</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 7\r\nk = 3\r\nspeed = [1, 3, 2, 2, 2, 1, 1]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to remove the last two racers (both 1s at indices 5 and 6) to get <code>[1, 3, 2, 2, 2]</code>. This uses 2 removals, which is within the allowed <code>k=3</code>. In the resulting array, the last three racers (all 2s) can be sent as they have the same speed, giving a maximum of 3 racers.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 3 * 10^5</code></li>\r\n    <li><code>1 &lt;= k &lt;= n</code></li>\r\n    <li><code>1 &lt;= speed[i] &lt;= 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Rippling_4sep",
        "company_id": 471
    },
    {
        "id": 1354,
        "title": "Maximize Earnings",
        "problem_statement": "<h1>Maximize Earnings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>\r\n    In a company, an employee receives a fixed amount, <code>fixedPay</code> dollars, each day they work. They also receive a bonus, <code>bonus</code> dollars, on a workday if they worked the day before. The employee is planning their work schedule for <code>n</code> days.\r\n</p>\r\n<p>\r\n    Their schedule is given as a binary string <code>schedule</code> where '1' is a workday, and '0' is not. The employee can change up to <code>k</code> days off ('0') to workdays ('1').\r\n</p>\r\n<p>\r\n    Find the maximum earnings the employee can get after changing at most <code>k</code> days from '0' to '1'.\r\n</p>\r\n<p>\r\n    Complete the function <code>getMaxEarnings</code> in the editor with the following parameters:\r\n</p>\r\n<ul>\r\n    <li><code>string schedule</code>: initial work schedule</li>\r\n    <li><code>int k</code>: the maximum number of extra days the employee can work</li>\r\n    <li><code>int fixedPay</code>: the fixed pay for each workday</li>\r\n    <li><code>int bonus</code>: the bonus if they also worked the previous day</li>\r\n</ul>\r\n<p>\r\n    The function should return a <code>long</code> representing the maximum earnings possible.\r\n</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: schedule = \"10100\", k = 2, fixedPay = 1, bonus = 2\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> The initial schedule has <code>n = 5</code> days. An optimal way to change the schedule is to work on the second and fourth days. In this case, the schedule becomes \"11110\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = <code>fixedPay</code> = 1.</li>\r\n    <li>On days 2, 3, and 4, earnings = <code>fixedPay</code> + <code>bonus</code> = 1 + 2 = 3.</li>\r\n    <li>On day 5, earnings = 0 (day off).</li>\r\n    <li>Total earnings = 1 + 3 + 3 + 3 + 0 = 10.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: schedule = \"100101\", k = 2, fixedPay = 4, bonus = 3\r\nOutput: 29</code></pre>\r\n<p><strong>Explanation:</strong> An optimal schedule is to work on the second and third days too, so the schedule becomes \"111101\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = <code>fixedPay</code> = 4.</li>\r\n    <li>On days 2, 3, and 4, earnings = <code>fixedPay</code> + <code>bonus</code> = 4 + 3 = 7.</li>\r\n    <li>On day 5, earnings = 0 (day off).</li>\r\n    <li>On day 6, earnings = <code>fixedPay</code> = 4 (previous day was off).</li>\r\n    <li>Total earnings = 4 + 7 + 7 + 7 + 0 + 4 = 29.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: schedule = \"1111001\", k = 1, fixedPay = 3, bonus = 3\r\nOutput: 30</code></pre>\r\n<p><strong>Explanation:</strong> An optimal schedule is to also work on the fifth day, so the schedule becomes \"1111101\".</p>\r\n<ul>\r\n    <li>On the first day, earnings = <code>fixedPay</code> = 3.</li>\r\n    <li>On days 2, 3, 4, and 5, earnings = <code>fixedPay</code> + <code>bonus</code> = 3 + 3 = 6.</li>\r\n    <li>On day 6, earnings = 0 (day off).</li>\r\n    <li>On day 7, earnings = <code>fixedPay</code> = 3 (previous day was off).</li>\r\n    <li>Total earnings = 3 + 6 + 6 + 6 + 6 + 0 + 3 = 30.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code> (where <code>n</code> is the length of <code>schedule</code>)</li>\r\n    <li><code>1 &le; k &le; n</code></li>\r\n    <li><code>1 &le; fixedPay, bonus &le; 10<sup>9</sup></code></li>\r\n    <li><code>schedule[i]</code> is '0' or '1'</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Rippling_4sep",
        "company_id": 471
    }
]