[
    {
        "id": 158,
        "title": "Maximize Throughput",
        "problem_statement": "<div class=\\\\\\\\\\\\\\\"problem-container\\\\\\\\\\\\\\\">\\\\\\\\n    <h2 class=\\\\\\\\\\\\\\\"problem-title\\\\\\\\\\\\\\\"> Maximize Throughput</h2>\\\\\\\\n    \\\\\\\\n    <div class=\\\\\\\\\\\\\\\"problem-description\\\\\\\\\\\\\\\">\\\\\\\\n        <p>In ByteDance\\\\\\\\\\\\\\'s vast network of data centers, millions of interconnected servers process concurrent requests, handle user interactions, and deliver data to users globally. Each server is part of a dynamic task execution flow, represented by an array <code>serverTasks</code>, where each entry in the array indicates the next server in the chain that will handle a task.</p>\\\\\\\\n        \\\\\\\\n        <p>Optimizing the data pipeline requires careful management of these task handoffs. Once a task is picked up by server i, it triggers a dependency on server <code>serverTasks[i]</code>, transferring the load there. However, this data transfer disables both servers (i and <code>serverTasks[i]</code>) from participating in any further task handoffs, as they are locked due to processing the current load. Therefore, selecting servers and managing the chain reactions of these task handoffs is crucial for maximizing throughput.</p>\\\\\\\\n        \\\\\\\\n        <p>Each server at index i points to the next server <code>serverTasks[i]</code>, where the task is transferred. Once this transfer occurs, both the sending server and the receiving server become unavailable for subsequent tasks. Your challenge is to select servers in such a way that maximizes the overall throughput score. The throughput score is determined by the sum of the indices of the servers where tasks are successfully handed off.</p>\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"function-description\\\\\\\\\\\\\\\">\\\\\\\\n        <h3>Function Description</h3>\\\\\\\\n        <p>Complete the function <code>calculateMaxProcessingThroughput</code> in the editor below.</p>\\\\\\\\n        \\\\\\\\n        <p><code>calculateMaxProcessingThroughput</code> has the following parameter(s):</p>\\\\\\\\n        <ul>\\\\\\\\n            <li><code>serverTasks[n]</code>: An array of integers where each element indicates the next server where the task is to be transferred.</li>\\\\\\\\n        </ul>\\\\\\\\n        \\\\\\\\n        <h4>Returns</h4>\\\\\\\\n        <ul>\\\\\\\\n            <li><code>long</code>: The maximum throughput score achievable.</li>\\\\\\\\n        </ul>\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"constraints\\\\\\\\\\\\\\\">\\\\\\\\n        <h3>Constraints</h3>\\\\\\\\n        <ul>\\\\\\\\n            <li>1 ≤ n ≤ 2 * 10⁵</li>\\\\\\\\n            <li>0 ≤ serverTasks[i] < n</li>\\\\\\\\n        </ul>\\\\\\\\n    </div>\\\\\\\\n\\\\\\\\n    <div class=\\\\\\\\\\\\\\\"examples\\\\\\\\\\\\\\\">\\\\\\\\n        <h3>Example 1</h3>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"example\\\\\\\\\\\\\\\">\\\\\\\\n            <pre class=\\\\\\\\\\\\\\\"input\\\\\\\\\\\\\\\">n = 3\\\\\\\\nserverTasks = [0, 1, 2]</pre>\\\\\\\\n            \\\\\\\\n            <div class=\\\\\\\\\\\\\\\"explanation\\\\\\\\\\\\\\\">\\\\\\\\n                <p>We first select the server at index 0. It points to itself (server 0), and its throughput is 0. So, the current total throughput is 0. Note that server 0 is now blocked.</p>\\\\\\\\n                \\\\\\\\n                <p>Next, we select the server at index 1. It points to itself (server 1), and its throughput is 1. So, the current total throughput becomes 0 + 1 = 1. Note that both servers 0 and 1 are now blocked.</p>\\\\\\\\n                \\\\\\\\n                <p>Then, we select the server at index 2. It points to itself (server 2), and its throughput is 2. So, the current total throughput becomes 0 + 1 + 2 = 3.</p>\\\\\\\\n                \\\\\\\\n                <p>All servers are now blocked.</p>\\\\\\\\n                \\\\\\\\n                <p>Thus, the maximum achievable throughput score is 3.</p>\\\\\\\\n            </div>\\\\\\\\n        </div>\\\\\\\\n\\\\\\\\n        <h3>Example 2</h3>\\\\\\\\n        <div class=\\\\\\\\\\\\\\\"example\\\\\\\\\\\\\\\">\\\\\\\\n            <pre class=\\\\\\\\\\\\\\\"input\\\\\\\\\\\\\\\">serverTasks[] size n = 4\\\\\\\\nserverTasks = [3, 0, 1, 2]</pre>\\\\\\\\n            \\\\\\\\n            <div class=\\\\\\\\\\\\\\\"explanation\\\\\\\\\\\\\\\">\\\\\\\\n                <p>Maximum achievable throughput score is 6.</p>\\\\\\\\n            </div>\\\\\\\\n        </div>\\\\\\\\n    </div>\\\\\\\\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1OEHFurCxB2-14AACLZS4oBC3iBtJaQ_n5a_bWAauMhg/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Byte Dance ",
        "company_id": 38
    },
    {
        "id": 169,
        "title": "TikTok Reel Impact",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">TikTok Reel Impact</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>In the dynamic landscape of TikTok, creators are in a constant race to boost their videos\\' engagement and reach by leveraging new features that enhance their content.</p>\n        \n        <p>Each creator starts with a set of <em>m</em> videos represented by <code>initialReelImpacts</code>, which indicates the baseline popularity of each reel. For next <em>n</em> days, TikTok releases new trending features represented by <code>newReelImpacts</code>, with each feature offering an additional boost to the creator\\'s existing reels.</p>\n        \n        <p>On each of the next <em>n</em> days, the following takes place:</p>\n        <ul>\n            <li>The creator appends the new features represented by <code>newReelImpacts[i]</code> (where 0 ≤ i < n) to their current reels</li>\n            <li>Review the updated lineup, select the k<sup>th</sup> most impactful reel based on its popularity, and add its impact value to their total impact score</li>\n        </ul>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getTotalImpact</code> with the following parameters:</p>\n        <ul>\n            <li><code>List&lt;Integer&gt; initialReelImpacts</code>: The impact of initial m reels</li>\n            <li><code>List&lt;Integer&gt; newReelImpacts</code>: The impact of the new n reels that appear one by one</li>\n            <li><code>int k</code>: The fixed choice made by the creator, representing the position of the most impactful reel selected</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Returns</h3>\n        <p><code>long</code>: The total impact achieved by the creator after incorporating all elements from newReelImpacts.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, m ≤ 10<sup>5</sup></li>\n            <li>1 ≤ k ≤ m</li>\n            <li>1 ≤ initialReelImpacts[i], newReelImpacts[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Case 0</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">\nm = 3\ninitialReelImpacts = [2, 2, 4]\nn = 3\nnewReelImpacts = [3, 3, 5]\nk = 2</pre>\n            <pre class=\\\"output\\\">12</pre>\n            <div class=\\\"explanation\\\">\n                <p>The initial impact score of the creator is 2<sup>nd</sup> highest impact value from the initial set of initialReelImpacts = [2, 2, 4]. Thus, impact score = 2.</p>\n                <p>Over the next n days the following process unfolds:</p>\n                <ul>\n                    <li>Day 1: The creator appends a new reel with an impact of 3, resulting in [2, 2, 4, 3], and selects the 2<sup>nd</sup> highest impact of 3, making impact score 2 + 3 = 5.</li>\n                    <li>Day 2: The creator appends a new reel with an impact of 3, resulting in [2, 2, 4, 3, 3], and selects the 2<sup>nd</sup> highest impact of 3, bringing total impact score to 5 + 3 = 8.</li>\n                    <li>Day 3: The creator appends a new reel with an impact of 5 resulting in [2, 2, 4, 3, 3, 5], and selects the 2<sup>nd</sup> highest impact of 4, making total impact score to 8 + 4 = 12.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"java\\\">\npublic static long getTotalImpact(List&lt;Integer&gt; initialReelImpacts, List&lt;Integer&gt; newReelImpacts, int k) {\n    // Write your code here\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Un-QaE9wBuo0CuAA3NFR5hTLzh8fWVY0U9d2G9Plo4I/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\n\\ntypedef long long ll;\\n\\nll getTotalImpact(vector<int> ir, vector<int> nr, int k){\\n    priority_queue<int, vector<int>, greater<int>> pq;\\n    for(int x: ir){\\n        if((int)pq.size() < k){\\n            pq.push(x);\\n        }\\n        else{\\n            if(x > pq.top()){\\n                pq.pop();\\n                pq.push(x);\\n            }\\n        }\\n    }\\n    ll total = pq.top();\\n    for(int x: nr){\\n        if(x > pq.top()){\\n            pq.pop();\\n            pq.push(x);\\n        }\\n        total += pq.top();\\n    }\\n    return total;\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(NULL);\\n    int m;\\n    cin >> m;\\n    vector<int> ir(m);\\n    for(int &x: ir) cin >> x;\\n    int n;\\n    cin >> n;\\n    vector<int> nr(n);\\n    for(int &x: nr) cin >> x;\\n    int k;\\n    cin >> k;\\n    cout << getTotalImpact(ir, nr, k);\\n}",
        "company_name": "Byte Dance ",
        "company_id": 38
    },
    {
        "id": 170,
        "title": "Maximum Processing Throughput",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h1>Maximum Processing Throughput</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Complete the function calculateMaxProcessingThroughput that calculates the maximum achievable throughput score when processing tasks across servers.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p><code>serverTasks[n]</code>: An array of integers where each element indicates the next server where the task is to be transferred.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return type: <code>long</code> - The maximum throughput score achievable.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\nn = 3\nserverTasks = [2, 1, 0]</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The maximum achievable throughput score is 3.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Case 1</h4>\n            <pre class=\\\"input\\\">Input:\nn = 4\nserverTasks = [3, 0, 1, 2]</pre>\n            <pre class=\\\"output\\\">Output:\n6</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>For serverTasks = [3, 0, 1, 2]:</p>\n                <ol>\n                    <li>First select server at index 2 (serverTasks[i] = 1), which points to index 1 and its throughput is equal to 1. Total throughput = 1. Indices 1 and 2 are blocked.</li>\n                    <li>Next select server at index 3 (serverTasks[i] = 2), which points to index 1 but index 1 is blocked. Total throughput = 1 + 2 = 3. Indices 1, 2, 3 are blocked.</li>\n                    <li>Finally select server at index 0 (serverTasks[i] = 3), which points to index 3 but index 3 is blocked. Total throughput = 1 + 2 + 3 = 6.</li>\n                </ol>\n                <p>Therefore, the maximum achievable throughput score is 6.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"function-signature\\\">\n        <h3>Function Signature</h3>\n        <pre class=\\\"code\\\">typedef long long ll;\nlong calculateMaxProcessingThroughput(vector&lt;int&gt; serverTasks)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1KQDYFHlON0di-PkMi2n0y53xLKOooeNDYLfqNyBrDdU/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Byte Dance ",
        "company_id": 38
    }
]