[
    {
        "id": 1724,
        "title": "String Transformation",
        "problem_statement": "<h1>String Transformation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given two strings a and b consisting of uppercase and lowercase English letters. In one move, you can pick two characters x and y and transform all occurrences of x in a to y. Find whether it is possible to convert a into b using the above operation multiple times (possibly none). If yes, also find the minimum possible number of transformations required.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains an integer t, the number of test cases.</p>\r\n<p>For each test case:</p>\r\n<ul>\r\n    <li>The first line contains the string a.</li>\r\n    <li>The second line contains the string b, the intended final state of a.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; |a| = |b| &le; 10<sup>5</sup></code></li>\r\n    <li>The sum of lengths of all strings across all test cases does not exceed <code>10<sup>5</sup></code>.</li>\r\n    <li>Strings consist of only uppercase and lowercase English letters.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, output on a new line:</p>\r\n<ul>\r\n    <li><code>-1</code> if the conversion is not possible.</li>\r\n    <li>Otherwise, print the minimum number of transformations required.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Sample Input:</h3>\r\n<pre><code class='language-text'>3\r\nBBC\r\nABC\r\nabcd\r\nbacd\r\nproblem\r\nanswers</code></pre>\r\n\r\n<h3>Sample Output:</h3>\r\n<pre><code class='language-text'>-1\r\n3\r\n7</code></pre>\r\n\r\n<h3>Example 1:</h3>\r\n<p><strong>Explanation:</strong> It is not possible to transform \"BBC\" to \"ABC\" because 'B' would need to simultaneously become 'A' and remain 'B'.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Explanation:</strong> You can perform the following transformations:</p>\r\n<ul>\r\n    <li>'a' &rarr; 'b'</li>\r\n    <li>'b' &rarr; 'a'</li>\r\n    <li>'c' remains 'c'</li>\r\n    <li>'d' remains 'd'</li>\r\n</ul>\r\n<p>Total of 3 transformations.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<p><strong>Explanation:</strong> Transform letters step by step to match \"answers\" from \"problem\".</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int solve(const std::string& a, const std::string& b) {\n        // Core logic to solve the problem\n        return 0; // Placeholder\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int t;\n    std::cin >> t;\n    while (t--) {\n        std::string a;\n        std::cin >> a;\n        std::string b;\n        std::cin >> b;\n        Solution solution;\n        int result = solution.solve(a, b);\n        std::cout << result << \"\\n\";\n    }\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nk securities",
        "company_id": 605
    },
    {
        "id": 1725,
        "title": "Question 10",
        "problem_statement": "<h1>Question 10</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given is an array of a size n. Among all <strong>strictly increasing subsequences</strong> of a, find any one with the <strong>maximum possible sum</strong> of elements.</p>\r\n<p>A <strong>subsequence</strong> of a is defined as a sequence that can be obtained from a by deleting some elements (possibly none), without changing the order of the remaining elements.</p>\r\n<p>The array a is said to be a <strong>strictly increasing sequence</strong> if a[i] < a[j] for all valid i < j.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains an integer t, the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer n, the number of elements in the array.</li>\r\n            <li>The second line contains n space-separated integers a₁, a₂, ..., aₙ, the elements of the array.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; t &le; 1000</code></li>\r\n    <li><code>1 &le; n &le; 200,000</code></li>\r\n    <li><code>-10^9 &le; a_i &le; 10^9</code> for all valid i</li>\r\n    <li>The sum of n over all test cases does not exceed 200,000.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print the maximum possible sum of a strictly increasing subsequence on a new line.</p>\r\n\r\n<h2>Sample Input</h2>\r\n<pre><code class='language-text'>2\r\n4\r\n6 1 2 3\r\n7\r\n4 2 5 5 3 1 6</code></pre>\r\n\r\n<h2>Sample Output</h2>\r\n<pre><code class='language-text'>6\r\n15</code></pre>\r\n\r\n<h2>Explanation</h2>\r\n<h3>Test Case 1:</h3>\r\n<p><strong>For a = [6, 1, 2, 3],</strong> the subsequences [6] and [1, 2, 3] both have a sum of 6, which is the maximum possible.</p>\r\n<h3>Test Case 2:</h3>\r\n<p><strong>For a = [4, 2, 5, 5, 3, 1, 6],</strong> the subsequence [4, 5, 6] has a sum of 15, which is the maximum possible.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long findMaxSum(int n, const std::vector<int>& a) {\n        // Core logic to find the maximum sum of a strictly increasing subsequence goes here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int n;\n        std::cin >> n;\n        std::vector<int> a(n);\n        for (int i = 0; i < n; ++i) {\n            std::cin >> a[i];\n        }\n\n        Solution solution;\n        long long result = solution.findMaxSum(n, a);\n        std::cout << result << \"\\n\";\n    }\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nk securities",
        "company_id": 605
    },
    {
        "id": 1726,
        "title": "Maximum Earnings",
        "problem_statement": "<h1>Maximum Earnings</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A taxi driver knows the pick-up and drop-off locations of people who are requesting taxi services. All the locations are in km from the starting point. The starting point is at 0 km. For each km travelled by a passenger, the driver charges 1 unit of money per passenger. Moreover, the taxi itself is very fancy. Therefore some people are even willing to pay an extra tip if they get to travel in the taxi. At any point of time, the taxi can only accommodate one passenger. Determine the maximum amount the driver can earn.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: pickup = [0, 2, 9, 10, 11, 12], drop = [5, 9, 11, 11, 14, 17], tip = [1, 2, 3, 2, 2, 1]\r\nOutput: 20</code></pre>\r\n<p><strong>Explanation:</strong> The way to earn the most money is by accepting passengers at indices 1, 2 and 5.</p>\r\n<ul>\r\n    <li>The amount paid by the passenger at index 1: 9 - 2 + 2 = 9</li>\r\n    <li>The amount paid by the passenger at index 2: 11 - 9 + 3 = 5</li>\r\n    <li>The amount paid by the passenger at index 5: 17 - 12 + 1 = 6</li>\r\n    <li>The total amount paid by the passengers is 9 + 5 + 6 = 20</li>\r\n</ul>\r\n<p>Therefore, the return value is 20.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\npickup size n = 2\r\npickup = [1, 4]\r\ndrop size n = 2\r\ndrop = [5, 6]\r\ntip size n = 2\r\ntip = [1, 2]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> There are two people, and locations are overlapping so only one of them can be accepted.</p>\r\n<ul>\r\n    <li>If person 1 is picked, the amount made is 5-1+2 = 6</li>\r\n    <li>If person 2 is picked, the amount made is 6-4+5 = 7</li>\r\n</ul>\r\n<p>It is best to pick person 2 and earn 7.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\npickup size n = 3\r\npickup = [0, 4, 5]\r\ndrop size n = 3\r\ndrop = [3, 5, 7]\r\ntip size n = 3\r\ntip = [1, 2, 2]\r\nOutput: 11</code></pre>\r\n<p><strong>Explanation:</strong> All three passengers can be accepted because they do not overlap.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>0 &lt;= pickup[i]</code>, <code>drop[i] &lt;= 10^4</code></li>\r\n    <li><code>pickup[i] &lt; drop[i]</code></li>\r\n    <li><code>0 &lt;= tip[i] &lt;= 10^3</code></li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>taxiDriver</code> in the editor below. The function must return an integer denoting the maximum amount that can be earned by the driver.</p>\r\n<p><code>taxiDriver</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>pickup[pickup[0]...pickup[n-1]]</code>: an array of <code>n</code> integers that denote the pickup location of the potential riders</li>\r\n    <li><code>drop[drop[0]...drop[n-1]]</code>: an array of <code>n</code> integers that denote the drop-off locations of the potential riders</li>\r\n    <li><code>tip[tip[0]...tip[n-1]]</code>: an array of <code>n</code> integers that denote the tips offered by each person if they are accepted for a ride</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long taxiDriver(const std::vector<int>& pickup, const std::vector<int>& drop, const std::vector<int>& tip) {\n        // Core logic goes here\n        return 0LL;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int n;\n    std::cin >> n;\n\n    std::vector<int> pickup(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> pickup[i];\n    }\n\n    std::vector<int> drop(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> drop[i];\n    }\n\n    std::vector<int> tip(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> tip[i];\n    }\n\n    Solution sol;\n    long long result = sol.taxiDriver(pickup, drop, tip);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Nk securities",
        "company_id": 605
    }
]