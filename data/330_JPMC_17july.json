[
    {
        "id": 1021,
        "title": "Count Substrings with At Most K Zeros and K Ones",
        "problem_statement": "<h1>Count Substrings with At Most K Zeros and K Ones</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a string <code>str</code> of length <code>n</code> and an integer <code>k</code>. Your task is to count and print the number of substrings of <code>str</code> which contain at most <code>k</code> 0s and at most <code>k</code> 1s. Note: if <code>k = 0</code> then print 0.</p>\r\n\r\n<h3>Input Format:</h3>\r\n<p>The input consists of three lines:</p>\r\n<ul>\r\n    <li>The first line contains an integer, i.e. <code>n</code>.</li>\r\n    <li>The second line contains the string <code>str</code>.</li>\r\n    <li>The third line contains the integer <code>k</code>.</li>\r\n</ul>\r\n<p>The input will be read from the STDIN by the candidate.</p>\r\n\r\n<h3>Output Format:</h3>\r\n<p>Print the number of substrings of <code>str</code> which contain at most <code>k</code> 0s and at most <code>k</code> 1s.</p>\r\n<p>The output will be matched to the candidate's output printed on the STDOUT.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n0111\r\n2\r\nOutput:\r\n8</code></pre>\r\n<p><strong>Explanation:</strong> Substrings which contain at most k 0s and at most k 1s are {0, 01, 011, 1, 11, 111, 1}. Thus, output is 8.</p>\r\n\r\n<h3>Sample Input:</h3>\r\n<pre><code class='language-text'>Input:\r\n8\r\n01110000\r\n1</code></pre>\r\n\r\n<h3>Sample Output:</h3>\r\n<pre><code class='language-text'>Output:\r\n10</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; k &le; 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "JPMC_17july",
        "company_id": 330
    },
    {
        "id": 1022,
        "title": "Commander's Dilemma",
        "problem_statement": "<h1>Commander's Dilemma</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The nation of Eryndor is at war. Its territory consists of N cities connected by M bidirectional roads. The cities are numbered from 1 to N. Each city has a strategic value, and the generals must choose a subset of cities to defend.</p>\r\n<p>But there's a catch:</p>\r\n<ul>\r\n    <li>Once a city is defended, all cities directly connected to it (via a single road) are automatically considered secured.</li>\r\n    <li>The enemy is known to avoid secured cities. To maximize resistance, the generals aim to maximize the total strategic value of directly defended cities (i.e., cities chosen for defense, not the ones that become secured as a side effect).</li>\r\n</ul>\r\n<p>Your task is to determine the maximum total strategic value that can be achieved by selecting a subset of cities to defend, such that</p>\r\n<ul>\r\n    <li>No two defended cities are directly connected (they must not share a road).</li>\r\n    <li>All other cities may or may not be defended, depending on the plan.</li>\r\n</ul>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>The graph does not contain multiple edges between the same nodes or any self-loops.</li>\r\n    <li>The graph does not contain any cycles.</li>\r\n    <li>If M=0, then the total strategic value will be the sum of all strategic values.</li>\r\n    <li>If N=1, then you only need to consider that single node only.</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The input consists of multiple lines:</p>\r\n<ul>\r\n    <li>The first line contains two space-separated integers, N and M - the number of cities and the number of roads.</li>\r\n    <li>The second line contains N space-separated integers, V<sub>1</sub>, V<sub>2</sub>, ..., V<sub>N</sub> where V<sub>i</sub> represents the strategic value of the i<sup>th</sup> city.</li>\r\n    <li>The next M lines: Each line contains two space-separated integers, u and v, representing a bidirectional road between the city u and city v.</li>\r\n</ul>\r\n<p>The input will be read from the STDIN by the candidate.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single integer—the maximum total strategic value of directly defended cities such that no two defended cities are directly connected.</p>\r\n<p>The output will be matched to the candidate's output printed on STDOUT.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; N &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; M &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; V<sub>i</sub> &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; u, v &le; N</code></li>\r\n    <li>The graph may be disconnected.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 4\r\n5 3 7 10 2\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\nOutput:\r\n15</code></pre>\r\n<p><strong>Explanation:</strong> One optimal way is to defend cities 2 and 4 (values 3 + 10 = 13). Another way is choosing cities 1 and 4 (total strategic value = 5 + 10 = 15)—valid since 1 and 4 are not connected. Defending 3 and 4 is invalid—they are directly connected.</p>\r\n\r\n<h2>Sample Input</h2>\r\n<pre><code class='language-text'>6 5\r\n4 2 7 1 3 6\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6</code></pre>\r\n\r\n<h2>Sample Output</h2>\r\n<pre><code class='language-text'>17</code></pre>\r\n\r\n<h2>Instructions</h2>\r\n<ul>\r\n    <li>Program should take input from standard input and print output to standard output.</li>\r\n    <li>Your code is judged by an automated system, do not write any additional welcome/greeting messages.</li>\r\n    <li>\"Save and Test\" only checks for basic test cases, more rigorous cases will be used to judge your code while scoring.</li>\r\n    <li>Additional score will be given for writing optimized code both in terms of memory and execution time.</li>\r\n</ul>\r\n<p>Now let's start coding:</p>\r\n<pre><code class='language-javascript'>#include &lt;iostream&gt;\r\nusing namespace std;\r\n\r\nint main() {\r\n    // Sample code to perform I/O:\r\n    // string name;\r\n    // cin >> name; // Reading input from STDIN\r\n    // cout << name; // Writing output to STDOUT\r\n    // Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail.\r\n    // Write your fit code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "JPMC_17july",
        "company_id": 330
    }
]