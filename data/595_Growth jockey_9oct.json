[
    {
        "id": 1703,
        "title": "Task Completion Simulation",
        "problem_statement": "<h1>Task Completion Simulation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>GrowthJockey's engineering platform manages a massive workflow of 10<sup>5</sup> task nodes, numbered from 1 to 10<sup>5</sup>. Each task node is either complete (black) or pending (white). Initially, there are <code>m</code> distinct completed tasks: <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>m</sub></code>. All other tasks are still pending.</p>\r\n<p>You are given a sequence of commands that GrowthJockey's automation engine will execute. Each command can be of two types:</p>\r\n<ul>\r\n    <li><strong>A</strong> → Move to the next task (<code>x + 1</code>)</li>\r\n    <li><strong>B</strong> → Skip to the nearest pending (white) task to the right.</li>\r\n</ul>\r\n<p>For each command prefix (from 1 to <code>n</code>):</p>\r\n<ol>\r\n    <li>A new worker starts at task 1.</li>\r\n    <li>The worker executes the first <code>i</code> commands from the string.</li>\r\n    <li>The worker marks the last visited task as complete (black).</li>\r\n</ol>\r\n<p>Your job is to find out which task nodes are black after all workers finish their execution.</p>\r\n\r\n<h2>Input</h2>\r\n<p>The first line contains an integer <code>t</code> – the number of test cases.</p>\r\n<p>Each test case consists of:</p>\r\n<ul>\r\n    <li>Two integers <code>n</code> and <code>m</code>.</li>\r\n    <li>A string <code>s</code> of length <code>n</code>, containing only the characters 'A' and 'B'.</li>\r\n    <li>A line of <code>m</code> integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>m</sub></code> – the indices of initially black (completed) tasks.</li>\r\n</ul>\r\n\r\n<h2>Output</h2>\r\n<p>For each test case:</p>\r\n<ul>\r\n    <li>On the first line, print <code>k</code> – the total number of black tasks at the end.</li>\r\n    <li>On the second line, print the indices of all black tasks in increasing order.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3 2\r\nABB\r\n1 3\r\nOutput:\r\n4\r\n1 2 3 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Worker 1 → moves",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> solve(int n, int m, const std::string& s, const std::vector<int>& a) {\n        // Core logic for the problem goes here.\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int n, m;\n        std::cin >> n >> m;\n        std::string s;\n        std::cin >> s;\n        std::vector<int> a(m);\n        for (int i = 0; i < m; ++i) {\n            std::cin >> a[i];\n        }\n\n        Solution solution;\n        std::vector<int> result = solution.solve(n, m, s, a);\n\n        std::cout << result.size() << \"\\n\";\n        for (size_t i = 0; i < result.size(); ++i) {\n            std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n        }\n        std::cout << \"\\n\";\n    }\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Growth jockey_9oct",
        "company_id": 595
    }
]