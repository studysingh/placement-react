[
    {
        "id": 745,
        "title": "Processor Power Matching",
        "problem_statement": "<h1>Processor Power Matching</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon Web Services (AWS) has millions of servers that provide on-demand cloud computing platforms to their clients.</p>\r\n<p>In one AWS center, there are <code>n</code> processes to be executed and <code>m</code> processors to execute them. The <code>i<sup>th</sup></code> process requires <code>power[i]</code> for execution. A processor can provide power within its range <code>minPower</code> through <code>maxPower</code>. Process <code>i</code> can be executed on processor <code>j</code> if <code>minPower[j] &le; power[i] &le; maxPower[j]</code>.</p>\r\n<p>Given the power consumption of <code>n</code> processes and the range of power consumption of <code>m</code> processors, for each processor, find:</p>\r\n<ol>\r\n    <li>the number of processes which can be executed on the processor</li>\r\n    <li>the sum of power consumed by the processes that it can serve</li>\r\n</ol>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>The processes are run one at a time, hence the range of the processor is the same for each process individually. In other words, if two processes <code>i</code> and <code>j</code> can be executed on a processor <code>p</code>, then <code>minPower[p] &le; power[i] &le; maxPower[p]</code> and <code>minPower[p] &le; power[j] &le; maxPower[p]</code> should hold individually.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>The number of processes is <code>n = 4</code>, their power consumption is <code>power = [7, 6, 8, 10]</code>, the number of processors is <code>m = 3</code>. Their ranges are <code>minPower = [6, 3, 4]</code> and <code>maxPower = [10, 7, 9]</code>.</p>\r\n<p>Visually, the power distribution and processor ranges can be thought of as:</p>\r\n<ul>\r\n    <li><strong>Processor 1:</strong> Range [6, 10]. Processes that fit: 6, 7, 8, 10. Number of processes = 4. Sum of powers = 6 + 7 + 8 + 10 = 31.</li>\r\n    <li><strong>Processor 2:</strong> Range [3, 7]. Processes that fit: 6, 7. Number of processes = 2. Sum of powers = 6 + 7 = 13.</li>\r\n    <li><strong>Processor 3:</strong> Range [4, 9]. Processes that fit: 6, 7, 8. Number of processes = 3. Sum of powers = 6 + 7 + 8 = 21.</li>\r\n</ul>\r\n<pre><code class='language-text'>Input:\r\npower = [7, 6, 8, 10]\r\nminPower = [6, 3, 4]\r\nmaxPower = [10, 7, 9]\r\nOutput: [[4, 31], [2, 13], [3, 21]]</code></pre>\r\n<p><strong>Explanation:</strong> The answers for each of the processors are <code>[4, 31]</code>, <code>[2, 13]</code>, <code>[3, 21]</code>, where the first number represents the number of processes, and the second is the sum of power requirements. The return is a 2-dimensional array.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p><strong>Sample Case 0</strong></p>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\npower = [11, 11, 11]\r\nm = 2\r\nminPower = [8, 13]\r\nmaxPower = [11, 100]\r\nOutput:\r\n3 33\r\n0 0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The first processor (<code>minPower[0] = 8</code>, <code>maxPower[0] = 11</code>) can execute all 3 processes, and sum of powers = (11 + 11 + 11) = 33.</li>\r\n    <li>The second processor (<code>minPower[1] = 13</code>, <code>maxPower[1] = 100</code>) cannot execute any of the processes since none of them lie in its range. Thus, its number of processes = 0 and power consumed = 0.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<p><strong>Sample Case 1</strong></p>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\npower = [25, 56, 38, 31, 100]\r\nm = 4\r\nminPower = [20, 30, 40, 60]\r\nmaxPower = [30, 40, 60, 120]\r\nOutput:\r\n1 25\r\n2 69\r\n1 56\r\n1 100</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The first processor has a range <code>[20, 30]</code>. It can only execute 1 process, sum = 25.</li>\r\n    <li>The second processor has range <code>[30, 40]</code>. It can execute 2 processes with powers 31 and 38, sum = (31 + 38) = 69.</li>\r\n    <li>The third processor has range <code>[40, 60]</code>. It can execute 1 process, sum = 56.</li>\r\n    <li>The fourth processor has range <code>[60, 120]</code>. It can execute 1 process, sum = 100.</li>\r\n</ul>\r\n<p>Hence, the answer is <code>[[1, 25], [2, 69], [1, 56], [1, 100]]</code>.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getProcessesAndPowerSum</code> in the editor below.</p>\r\n<p><code>getProcessesAndPowerSum</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int power[n]</code>: the power consumption of processes</li>\r\n    <li><code>int minPower[m]</code>: the minimum bounds of the ranges of processor power</li>\r\n    <li><code>int maxPower[m]</code>: the maximum bounds of the ranges of processor power</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long_int[m][2]</code>: the <code>j<sup>th</sup></code> element of this array consists of 2 integers - the number of processes that lie within the range of the <code>j<sup>th</sup></code> processor, and the sum of the power consumption of those processes.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; m &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; power[i] &le; 10<sup>8</sup></code></li>\r\n    <li><code>1 &le; minPower[i] &le; maxPower[i] &le; 10<sup>8</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_23july",
        "company_id": 236
    },
    {
        "id": 746,
        "title": "Minimize Cleaning Cost",
        "problem_statement": "<h1>Minimize Cleaning Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Data Scientists at Amazon are working on cleansing a machine learning dataset. The dataset is represented as a string <code>dataset</code> consisting of an even number of lowercase English letters. The goal is to clean the dataset efficiently by performing specific operations.</p>\r\n\r\n<p>Here's how the operations work:</p>\r\n<ul>\r\n    <li>In each operation, two characters from the dataset are selected and removed.</li>\r\n    <li>Each operation has an associated cost:\r\n        <ul>\r\n            <li><code>matchCost</code>: the cost of removing two identical characters.</li>\r\n            <li><code>mismatchCost</code>: the cost of removing two different characters.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<p>The task is to determine the optimal strategy that minimizes the total cost to completely clean up the dataset. In other words, find the minimum cost required to remove all characters and make the dataset empty.</p>\r\n\r\n<p>Complete the function <code>minimizeCleaningCost</code> in the editor below.</p>\r\n\r\n<p><code>minimizeCleaningCost</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string dataset</code>: a string that denotes a machine learning dataset</li>\r\n    <li><code>int matchCost</code>: the cost of operation when the removed characters are equal</li>\r\n    <li><code>int mismatchCost</code>: the cost of operation when the removed characters are unequal</li>\r\n</ul>\r\n\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>int</code>: the minimum cost to clean up the dataset or make the string empty</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"ouio\", matchCost = 2, mismatchCost = 4\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Initial String: <code>dataset = \"ouio\"</code>.</li>\r\n    <li>Operation 1:\r\n        <ul>\r\n            <li>Action: Remove the first and last characters of the dataset, resulting in the string <code>dataset = \"ui\"</code>.</li>\r\n            <li>Cost: <code>matchCost = 2</code> (since both removed characters, 'o' and 'o', are the same).</li>\r\n        </ul>\r\n    </li>\r\n    <li>Operation 2:\r\n        <ul>\r\n            <li>Action: Delete the remaining characters of \"ui\", making <code>dataset</code> an empty string.</li>\r\n            <li>Cost: <code>mismatchCost = 4</code> (since the removed characters, 'u' and 'i', are different).</li>\r\n        </ul>\r\n    </li>\r\n    <li>Total Cost: <code>matchCost + mismatchCost = 2 + 4 = 6</code>.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"aaabca\", matchCost = 3, mismatchCost = 2\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>In the first operation, the first and second characters are deleted from the dataset, resulting in <code>dataset = \"abca\"</code>. The cost of this operation is <code>matchCost = 3</code> because both removed characters are equal to 'a'.</p>\r\n<p>In the next operation, the first and third characters are deleted, making <code>dataset = \"ba\"</code>. The cost of this operation is <code>mismatchCost = 2</code> because the removed characters are not equal.</p>\r\n<p>In the final operation, the remaining two characters are deleted, making the <code>dataset</code> an empty string. The cost of this operation is <code>mismatchCost = 2</code> because the removed characters are not equal.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: dataset = \"xxch\", matchCost = 5, mismatchCost = 5\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>In the first operation, the first two characters are deleted, resulting in <code>dataset = \"ch\"</code>. The cost of this operation is <code>matchCost = 5</code>, because both removed characters are equal to 'x'.</p>\r\n<p>In the next operation, the remaining two characters are deleted, making <code>dataset</code> an empty string. The cost of this operation is <code>mismatchCost = 5</code>, because the removed characters are not equal.</p>\r\n<p>Hence, the total cost is <code>5 + 5 = 10</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 <= |dataset| <= 10<sup>5</sup></code></li>\r\n    <li><code>|dataset|</code> is even</li>\r\n    <li><code>1 <= matchCost, mismatchCost <= 10<sup>4</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_23july",
        "company_id": 236
    },
    {
        "id": 768,
        "title": "Word Conjugates",
        "problem_statement": "<h1>Word Conjugates</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon has introduced an innovative tool to explore the fascinating world of \"Word Conjugates\", allowing users to analyze strings consisting of only characters: 'a', 'b', 'c' and 'd'.</p>\r\n<p>The concept of conjugates follows a unique pairing mechanism where 'a' pairs with 'b', 'c' pairs with 'd' and vice-versa. As a result, there are only four possible valid conjugate pairs: ('a','b'), ('b','a'), ('c','d'), and ('d','c').</p>\r\n<p>The objective is to calculate the total number of valid substrings in a given string s.</p>\r\n<p>A string is considered valid if:</p>\r\n<ul>\r\n    <li>There exists a permutation of the string such that the original string and its permutation are conjugates of each other.</li>\r\n    <li>Two strings s and t of the same length say n are considered conjugates if, for every index i (0 &lt;= i &lt; n), the pair formed by the characters at that index (s[i], t[i]) must be a conjugate pair.</li>\r\n</ul>\r\n<p>Given a string s that only contains the characters 'a', 'b', 'c' and 'd'. Return the total number of valid substrings in the string s according to the specified conjugate rule.</p>\r\n<p><strong>Note:</strong></p>\r\n<ul>\r\n    <li>Permutation of a string refers to any possible rearrangement of its characters. For example, the string \"cat\" has 6 possible permutations: \"cat\", \"cta\", \"act\", \"atc\", \"tac\", \"tca\".</li>\r\n    <li>A substring of a string is defined as any contiguous part of that string. For example, the string \"abc\" has the following substrings possible: \"a\", \"b\", \"c\", \"ab\", \"bc\", and \"abc\", whereas \"ca\", \"ba\" etc. are not considered as its substrings.</li>\r\n</ul>\r\n\r\n<p>Complete the function <code>getConjugatePairs</code> in the editor below.</p>\r\n<p><code>getConjugatePairs</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string s</code>: a string that only contains the characters 'a', 'b', 'c' and 'd'</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>long</code>: The total number of valid substrings of given string s</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: s = \"abdc\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Out of all possible substrings of the given string s the valid substrings include: {\"abdc\", \"ab\", \"dc\"}.</p>\r\n<ul>\r\n    <li>Substring \"abdc\" is valid as one of its permutations, \"bacd\", forms the conjugate of \"abdc\".</li>\r\n    <li>Substring \"ab\" is valid because it has two permutations: \"ab\" and \"ba\". The permutation \"ba\" forms a conjugate of \"ab\".</li>\r\n    <li>Substring \"dc\" is valid because one of its permutations, \"cd\" is the conjugate of \"dc\".</li>\r\n</ul>\r\n<p>Thus, in total, there are 3 valid substrings of string s = \"abdc\". For all other substrings, no permutation exists that forms a conjugate with the original substring. Hence, the answer is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: s = \"adcb\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Out of all possible substrings of the given string s, all the valid substrings include: {\"dc\", \"adcb\"}.</p>\r\n<ol>\r\n    <li>Substring \"dc\" is valid as one of its permutations \"cd\" is its conjugate.</li>\r\n    <li>Substring \"adcb\" is valid as one of its permutations \"bcda\" is its conjugate.</li>\r\n</ol>\r\n<p>There are in total 2 valid substrings of \"adcb\". For all other substrings, no permutation exists that forms a conjugate with the original substring. Hence, return 2.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: s = \"abcdad\"\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Out of all possible substrings of the given string s, all the valid substrings include: {\"ab\", \"cd\", \"abcd\", \"bcda\"}.</p>\r\n<ol>\r\n    <li>Substring \"ab\" is valid as one of its permutations \"ba\" is its conjugate.</li>\r\n    <li>Substring \"cd\" is valid as one of its permutations \"dc\" is its conjugate.</li>\r\n    <li>Substring \"abcd\" is valid as one of its permutations \"badc\" is its conjugate.</li>\r\n    <li>Substring \"bcda\" is valid as one of its permutations \"bdcb\" is its conjugate.</li>\r\n</ol>\r\n<p>Thus there are 4 valid substrings of \"abcdad\". For all other substrings, no permutation exists that forms a conjugate with the original substring. Hence, return 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |s| &lt;= 4*10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_23july",
        "company_id": 236
    }
]