[
    {
        "id": 945,
        "title": "Logistics Routing Hub",
        "problem_statement": "<h1>Logistics Routing Hub</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A logistics company wants to manage the worldwide transportation of materials efficiently using different vehicle types and delivery routes. The company uses cars, trucks, and planes to deliver a variety of goods and assigns delivery routes based on predefined routing strategies. They have two routing strategies: RouteStrategy1 and RouteStrategy2.</p>\r\n\r\n<p>Define a Deliverable class, which models an object that can be delivered. It should have the following attributes and a constructor method to initialize them:</p>\r\n<ul>\r\n    <li>String name: the name of the item (e.g., 'Laptops')</li>\r\n    <li>String type: the type or size of the item (e.g., 'Small', 'Large')</li>\r\n    <li>double price: the value of the item.</li>\r\n</ul>\r\n\r\n<p>Define an abstract class Vehicle representing a transport vehicle, which can be a car, truck, or plane, with the following attributes and methods:</p>\r\n<ul>\r\n    <li>RoutingStrategy routingStrategy: currently assigned routing strategy for the vehicle</li>\r\n    <li>deliver(Deliverable deliverable): Uses the current routingStrategy to deliver an item and returns the delivery message: '${Deliverable.name} has been delivered using ${Vehicle.name} through ${RoutingStrategy.name}'</li>\r\n    <li>setRoutingStrategy(RoutingStrategy routingStrategy): sets the routingStrategy attribute of the object.</li>\r\n</ul>\r\n\r\n<p>Implement Car, Truck, and Plane subclasses, and a constructor method to assign their routing strategy depending on the input.</p>\r\n\r\n<pre><code class='language-javascript'>import java.io.*;\r\n\r\nclass Deliverable {\r\n    // Complete the missing code here\r\n}\r\n\r\nabstract class Vehicle {\r\n    RoutingStrategy routingStrategy;\r\n\r\n    public String deliver(Deliverable deliverable) {\r\n        // Complete the missing code here\r\n    }\r\n\r\n    public void setRoutingStrategy(RoutingStrategy routingStrategy) {\r\n        this.routingStrategy = routingStrategy;\r\n    }\r\n}\r\n\r\nclass Car extends Vehicle {\r\n    public Car(RoutingStrategy routingStrategy) {\r\n        // Complete the missing code here\r\n    }\r\n}\r\n\r\nclass Truck extends Vehicle {\r\n    public Truck(RoutingStrategy routingStrategy) {\r\n        // Complete the missing code here\r\n    }\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\nCar RouteStrategy1 Tools Small 20.10\r\nPlane RouteStrategy1 Laptops Large 500.25\r\nTruck RouteStrategy2 Bikes Large 100.87\r\nOutput:\r\nTools has been delivered using Car through RouteStrategy1\r\nLaptops has been delivered using Plane through RouteStrategy1\r\nBikes has been delivered using Truck through RouteStrategy2</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe first delivery is with Car following RouteStrategy1 route, transporting Tools of Small type, and a price of 20.10.\r\nThe second delivery is with Plane following RouteStrategy1 route, transporting Laptops of Large type, and a price of 500.25.\r\nThe third delivery is with Truck following RouteStrategy2 route, transporting Bikes of Large type, and a price of 100.87.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\nTruck RouteStrategy1 Laptops Large 500.25\r\nCar RouteStrategy1 Brooms Small 500.00\r\nPlane RouteStrategy2 Shoes Small 300.12\r\nCar RouteStrategy2 Cars Large 200.10\r\nOutput:\r\nLaptops has been delivered using Truck through RouteStrategy1\r\nBrooms has been delivered using Car through RouteStrategy1\r\nShoes has been delivered using Plane through RouteStrategy2\r\nCars has been delivered using Car through RouteStrategy2</code></pre>\r\n<p><strong>Explanation:</strong>\r\nWe have 5 deliveries to handle\r\nThe first delivery is with Truck following RouteStrategy1 route, transporting Laptops of Large type, and a price of 500.25.\r\nThe second delivery is with Car following RouteStrategy1 route, transporting Brooms of Small type, and a price of 500.00.\r\nThe third delivery is with Plane following RouteStrategy2 route, transporting Shoes of Small type, and a price of 300.12.\r\nThe fourth delivery is with Car following RouteStrategy2 route, transporting Cars of Large type, and a price of 200.10.\r\nThe fifth delivery is with Car following RouteStrategy2 route, transporting Cars of Large type, and a price of 200.10.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &lt;= Number of deliveries &lt;= 10<sup>3</sup></li>\r\n    <li>1.00 &lt;= price of each deliverables &lt;= 100,000.00</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ubs_1july",
        "company_id": 297
    },
    {
        "id": 946,
        "title": "Authentication Tokens",
        "problem_statement": "<h1>Authentication Tokens</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>When users are authenticated, they receive an authentication token. This token expires after a system-wide <code>expiryLimit</code> unless it is reset. If a reset request is made on or before the expiry time, the expiry is extended by <code>expiryLimit</code> minutes from the current time.</p>\r\n<ul>\r\n    <li>An unexpired <code>token_id</code> can be reset any number of times.</li>\r\n    <li>A reset issued to a non-existent or an expired <code>token_id</code> is ignored.</li>\r\n    <li>Once a <code>token_id</code> expires it cannot be reused.</li>\r\n</ul>\r\n<p>Command syntax: <code>[type, token_id, T]</code></p>\r\n<ul>\r\n    <li>Create command: <code>Type 0</code> generates a token with <code>id token_id</code> at time <code>T</code>. Its expiry is set to <code>T + expiryLimit</code>.</li>\r\n    <li>Reset command: <code>Type 1</code> resets the expiry to <code>T + expiryLimit</code>.</li>\r\n</ul>\r\n<p>Start with an empty list of tokens. Perform a sequence of requests sorted ascending by their <code>T</code> parameter. Find the number of tokens that are active after all commands have been executed, at the maximum <code>T</code> of all requests.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: expiryLimit = 4, commands = [[0,1,1], [0,2,2], [1,1,5], [1,2,7]]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The maximum time T = 7, so the analysis will end at T = 7. Each time a token is created or reset, its new expiration time will be at time T + 4.</p>\r\n<p>Working through the commands:</p>\r\n<ul>\r\n    <li><code>[0,1,1]</code>: Create token_id = 1 at time T = 1 and set its expiry to T + expiryLimit = 5.</li>\r\n    <li><code>[0,2,2]</code>: Create token_id = 2 with an expiry at T = 6.</li>\r\n    <li><code>[1,1,5]</code>: Reset token_id = 1 at T = 5. The time is less than or equal to the expiry limit, so a new limit is set: 5 + 4 = 9.</li>\r\n    <li><code>[1,2,7]</code>: Reset token_id = 2 at T = 7. The id expires at time T = 6, so when the Reset token_id = 2 command comes in at T = 7, it is ignored.</li>\r\n</ul>\r\n<p>Only token_id = 1 is active at time T = 7. Return 1.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>numberOfTokens</code> function in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int expiryLimit</code>: the expiry time of each token</li>\r\n    <li><code>int commands[n][3]</code>: each <code>commands[i]</code> has 3 integers: <code>[command, token_id, T]</code></li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the number of tokens that exist at the end of the command stream.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The commands array is given sorted ascending by T (commands[i][2]).</li>\r\n    <li><code>1 &le; expiryLimit &le; 10^9</code></li>\r\n    <li><code>1 &le; n &le; 10^5</code></li>\r\n    <li><code>1 &le; token_id &le; 10^9</code></li>\r\n    <li><code>1 &le; T &le; 10^9</code></li>\r\n</ul>\r\n\r\n<h2>Sample Cases</h2>\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nexpiryLimit = 3\r\ncommands = [[0,1,1], [1,1,5]]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The token with id 1 is created at time 1. It expires at time 4. The reset command at time 5 is ignored since the token has expired. There are no tokens left.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nexpiryLimit = 4\r\ncommands = [[0,1,1], [0,2,2], [1,2,5]]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> One token 1 is created at time 1. It is supposed to expire at time T = 4 but it is reset at T = 7. Next expiry is at T = 7. Since token 2 does not exist, the reset command 1,2,5 does not have any effect. There is one token at the end when T = 5</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ubs_1july",
        "company_id": 297
    }
]