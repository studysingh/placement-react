[
    {
        "id": 1951,
        "title": "Typing Distance",
        "problem_statement": "<h1>Typing Distance</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine your computer has a keyboard layout like the one displayed below.</p>\r\n<pre><code class='language-text'>1 2 3 4 5 6 7 8 9 0\r\nQ W E R T Y U I O P\r\nA S D F G * H J K L\r\nZ X C V B N M</code></pre>\r\n<p>Assuming a keyboard typing robot. The robot's initial position is at the blue key with a star (*). Pressing any key on the keyboard generates the corresponding uppercase letter or the number.</p>\r\n<p>Given a string (with only uppercase letters and numbers), return the total distance traveled by the robot. The robot can move only left, right, top, and bottom. It can't move diagonally.</p>\r\n<p><strong>Note:</strong> There will be no spaces included in the input provided.</p>\r\n<p><strong>Function Description</strong></p>\r\n<p>Complete the function <code>getDistance</code> in the editor below.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: word = QZ\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The robot starts at the star position.</li>\r\n    <li>From '*' to 'Q': 6 steps</li>\r\n    <li>From 'Q' to 'Z': 3 steps</li>\r\n</ul>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: QA\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> Q and A are 1 character away. The robot is at Q already. So moving to A takes 1 step. (The total distance includes the initial move from '*' to 'Q', which is 6 steps, making the total 6 + 1 = 7 steps).</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: HELLO123\r\nOutput: 24</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ol>\r\n    <li>Start at '*'</li>\r\n    <li>Move to 'H' - Distance 1</li>\r\n    <li>Move to 'E' - Distance 4</li>\r\n    <li>Move to 'L' - Distance 7</li>\r\n    <li>Stay at 'L' - Distance 0</li>\r\n    <li>Move to 'O' - Distance 1</li>\r\n    <li>Move to '1' - Distance 9</li>\r\n    <li>Move to '2' - Distance 1</li>\r\n    <li>Move to '3' - Distance 1</li>\r\n</ol>\r\n<p>Total distance is 24.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The word will contain uppercase letters and numbers.</li>\r\n    <li>Length of the word will be less than 10<sup>5</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n#include <unordered_map>\n#include <cmath>\n#include <utility>\n\nclass Solution {\npublic:\n    int getDistance(const std::string& word) {\n        // Core logic to calculate the typing distance will be implemented here.\n        // 1. Create a map of characters to their (row, col) coordinates.\n        // 2. Initialize current position to the coordinates of '*'.\n        // 3. Initialize total distance to 0.\n        // 4. Iterate through each character in the input 'word'.\n        // 5. For each character, find its coordinates from the map.\n        // 6. Calculate the Manhattan distance from the current position to the new character's position.\n        // 7. Add this distance to the total distance.\n        // 8. Update the current position to the new character's position.\n        // 9. Return the total distance.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string word;\n    std::cin >> word;\n\n    Solution sol;\n    int result = sol.getDistance(word);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "hackerrank_19oct",
        "company_id": 690
    }
]