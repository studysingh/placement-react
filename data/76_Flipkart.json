[
    {
        "id": 277,
        "title": "Make Equal",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Make Equal</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Ahmed and Ali have two arrays, A and B each consisting of a permutation of numbers from 1 to N. They wish to play a game where the goal is to make their arrays similar. The arrays will be considered similar if they have the same length and all the elements at corresponding indices are equal.</p>\n        \n        <p>During each turn, a player can remove a single integer from their own array. Assuming both players play optimally, determine the minimum number of turns required to finish the game.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains one integer N representing the size of the array.</p>\n        <p>The second and third lines each will contain N space-separated integers indicating the numbers in permutations A and B, respectively.</p>\n    </div>\n\n    <div class=\\\"starter-code\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"code-block cpp\\\">\n#include &lt;cmath&gt;\n#include &lt;cstdio&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    /* Enter your code here */\n    return 0;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1m2GOCMuRhg3065tL2dUGbNVehyp4y6B-RbTKBefEOKE/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Flipkart ",
        "company_id": 76
    },
    {
        "id": 324,
        "title": "Minimum Additional Coins",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"language-notice\\\">\n        <p>The current selected programming language is <strong>C++20</strong>. We emphasize the submission of a fully working code over partially correct but efficient code. Once <strong>submitted</strong>, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of <strong>GCC</strong> being used is <strong>5.5.0</strong>.</p>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <h1>Food Court Coupon System</h1>\n        \n        <p>At a food court, customers must purchase coupon coins to purchase any food item. The food court has M coupon coins of different values so that any price of food items can be paid. Customers are given coupon coins so that the sum of coupon coins is equal to the price of the required food items.</p>\n\n        <p>Recently the food court has updated its food menu and the highest price of a food item is now P. There are food items with every price in the range 1 to P. The food court needs to add more coupon coins so that any price in range [1,P] can be paid using these coupon coins. The food court has its own system that keeps all information of its food items and coupon coins. The system must store the minimum number of coupon coins that need to be added so that any price in range [1,P] can be paid using these coupon coins.</p>\n\n        <p>Write an algorithm to find the minimum number of coupon coins that need to be added so that any price in range [1,P] can be paid using the coupon coins.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input</h3>\n        <ul>\n            <li>The first line of the input consists of an integer – <code>coinList_size</code>, representing the number of existing coupon coins (M).</li>\n            <li>The next line consists of M space-separated integers – <code>coinList[0], coinList[1],...., coinList[M-1]</code>, representing the values of existing coupon coins.</li>\n            <li>The next line consists of an integer – <code>foodPrice</code>, representing the highest price of a food item (P).</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output</h3>\n        <p>Print an integer representing the minimum number of coupon coins that need to be added to cover the range [1,P].</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 ≤ coinList_size ≤ 10<sup>5</sup></li>\n            <li>0 < coinList[0], coinList[1],...., coinList[M-1] < 1000</li>\n            <li>0 ≤ foodPrice ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n3\n1 4 10\n19</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>The prices that can be paid using these coupon coins are: 1,4,5,10,11,14,15.</p>\n                <p>If 2 coins with value 2 and 5 are added then all prices in range [1, 19] can be paid.</p>\n                <p>So, the output is 2.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    // Write your code here\n    return 0;\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1dmlpzTf6QTObehzM01w2qjdH39B3eFf_JoHbLwlooa4/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\n\\nint minPatches(vector<long long>& coins, long long P) {\\n    sort(coins.begin(), coins.end());\\n    long long miss = 1;\\n    int patches = 0;\\n    int i = 0;\\n    int n = coins.size();\\n\\n    while (miss <= P) {\\n        if (i < n && coins[i] <= miss) {\\n            miss += coins[i];\\n            i++;\\n        } else {\\n           \\n            miss += miss;\\n            patches++;\\n        }\\n    }\\n\\n    return patches;\\n}\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    \\n    long long M;\\n    cin >> M;\\n    vector<long long> coins;\\n    coins.reserve(M);\\n    for(long long i = 0; i < M; ++i){\\n        long long coin;\\n        cin >> coin;\\n        coins.push_back(coin);\\n    }\\n    long long P;\\n    cin >> P;\\n\\n    \\n    if(P == 0){\\n        cout << \\\"0\\\\n\\\";\\n        return 0;\\n    }\\n\\n    int result = minPatches(coins, P);\\n    cout << result;\\n}",
        "company_name": "Flipkart ",
        "company_id": 76
    },
    {
        "id": 325,
        "title": "Network Message Sequence Selection",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"language-notice\\\">\n        <p>The current selected programming language is <strong>C++20</strong>. We emphasize the submission of a fully working code over partially correct but efficient code. Once <strong>submitted</strong>, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of <strong>GCC</strong> being used is <strong>5.5.0</strong>.</p>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <h1>Network Message Sequence Selection</h1>\n        \n        <p>A networking company devises processes to control network traffic. A server in the network is connected to N devices. The devices are numbered from 0 to N-1. Recently, the team has devised a process in which the server receives messages from N devices for transmission then the process generates M possible sequences of messages from all devices among which one can be used during the initial operation.</p>\n\n        <p>In every sequence, a count of messages is selected from the received messages for every device. The generated sequences are numbered from 0 to M-1. To select a sequence first the highest count of messages among all sequences is calculated for every device and then the sequence is selected which has the highest count of messages for the maximum number of devices. If more than one such sequence is possible, then the sequence with the higher average of received messages will be considered.</p>\n\n        <p>Write an algorithm to find the ID of the sequence selected from the generated sequence and the number of devices for which the count of messages is highest in the sequence.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input</h3>\n        <p>The first line of the input consists of two space-separated integers – <code>msgGrid_row</code> and <code>msgGrid_col</code>, representing the number of sequences (M) and number of devices (N), respectively.</p>\n        <p>The next M lines consists of N space-separated integers representing the count of messages for the devices in a sequence.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output</h3>\n        <p>Print two space-separated integers representing the ID of the selected sequence and the number of devices for which the count of messages is highest in the sequence.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 < msgGrid_row, msgGrid_col < 10<sup>4</sup></li>\n            <li>0 < count of messages for a device in a sequence < 10<sup>4</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 5\n7 2 6 6 14\n14 12 23 14 17\n11 13 13 12 18\n11 12 11 50 9</pre>\n            <pre class=\\\"output\\\">Output:\n1 2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Maximum count of messages for each device among all sequences are: 14 13 23 50 18</p>\n                <ul>\n                    <li>The sequence with ID 0 does not have the highest count of messages for any device.</li>\n                    <li>The sequence with ID 1 has the highest count of messages i.e., 14,23 for 2 devices.</li>\n                    <li>The sequence with ID 2 has the highest count of messages i.e., 13,18 for 2 devices.</li>\n                    <li>The sequence with ID 3 has the highest count of messages i.e., 50 for 1 device.</li>\n                </ul>\n                <p>The sequences with IDs 1 and 2 have the highest count of messages for a maximum of 2 devices so the average of count of messages is calculated for both sequences:</p>\n                <ul>\n                    <li>Average of count of messages for sequence with ID 1=(14+12+23+14+17)/5=16</li>\n                    <li>Average of count of messages for sequence with ID 2=(11+13+13+12+18)/5=13.4</li>\n                </ul>\n                <p>The average of count of messages is highest for the sequence with ID 1 and it has the highest count of messages i.e., 14,23 for 2 devices.</p>\n                <p>So, the output is [1,2].</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    // Write your code here\n    return 0;\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/174hq7a1e5GRpRhVo8WuneHB7rZiWXp0peoKlR0D2wdc/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    \\n    int M, N;\\n    cin >> M >> N;\\n    \\n    vector<vector<int>> sequences(M, vector<int>(N, 0));\\n    for(int i = 0; i < M; ++i){\\n        for(int j = 0; j < N; ++j){\\n            cin >> sequences[i][j];\\n        }\\n    }\\n    \\n    vector<int> max_per_device(N, 0);\\n    for(int j = 0; j < N; ++j){\\n        int current_max = 0;\\n        for(int i = 0; i < M; ++i){\\n            if(sequences[i][j] > current_max){\\n                current_max = sequences[i][j];\\n            }\\n        }\\n        max_per_device[j] = current_max;\\n    }\\n    \\n    int max_count = -1;\\n    vector<pair<int, double>> candidates;\\n    for(int i = 0; i < M; ++i){\\n        int count = 0;\\n        long long sum = 0;\\n        for(int j = 0; j < N; ++j){\\n            sum += sequences[i][j];\\n            if(sequences[i][j] == max_per_device[j]){\\n                count++;\\n            }\\n        }\\n        double average = (double)sum / N;\\n        if(count > max_count){\\n            max_count = count;\\n            candidates.clear();\\n            candidates.emplace_back(i, average);\\n        }\\n        else if(count == max_count){\\n            candidates.emplace_back(i, average);\\n        }\\n    }\\n    \\n    int selected_id = -1;\\n    double selected_avg = -1.0;\\n    for(auto &[id, avg] : candidates){\\n        if(avg > selected_avg){\\n            selected_avg = avg;\\n            selected_id = id;\\n        }\\n    }\\n    \\n    cout << selected_id << \\\" \\\" << max_count;\\n}",
        "company_name": "Flipkart ",
        "company_id": 76
    },
    {
        "id": 326,
        "title": "Maximum Product Transportation",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"language-notice\\\">\n        <p>The current selected programming language is <strong>C++20</strong>. We emphasize the submission of a fully working code over partially correct but efficient code. Once <strong>submitted</strong>, you cannot review this problem again. You can use <code>cout</code> to debug your code. The <code>cout</code> may not work in case of syntax/runtime error. The version of <strong>GCC</strong> being used is <strong>5.5.0</strong>.</p>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <h1>Maximum Product Transportation</h1>\n        \n        <p>There are N trolleys used to transport products and each trolley is given a unique ID from 0 to N-1. A trolley operates for a certain time period and is able to carry products. For each trolley, the automated system stores three parameters i.e., the start and end time of operation (both inclusive) and units of products carried. A trolley can be operated within a specified period. No two trolleys can be operated during the same period, but if a trolley\\'s operating period ends at point T, then another trolley can be immediately started at T. The system must store the maximum number of products transported.</p>\n\n        <p>Write an algorithm to find the maximum number of products transported.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input</h3>\n        <p>The first line of the input consists of two space-separated integers – <code>trolleyList_row</code> and <code>trolleyList_col</code>, representing the number of trolleys (N) and the number of parameters associated with each trolley (<code>trolleyList_col</code>(M) is always equal to three).</p>\n        <p>The next N lines consist of M space-separated integers representing the starting of the period, ending of the period and, the number of products carried by the trolley, respectively.</p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output</h3>\n        <p>Print an integer representing the maximum number of products transported.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>0 ≤ trolleyList_row ≤ 10<sup>4</sup></li>\n            <li>0 ≤ starting of the period, ending of the period ≤ 1000</li>\n            <li>0 < number of products carried by the trolley ≤ 10<sup>4</sup></li>\n            <li>trolleyList_col = 3</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4 3\n0 2 4\n0 4 9\n2 4 6\n5 10 20</pre>\n            <pre class=\\\"output\\\">Output:\n30</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <div class=\\\"timeline-diagram\\\">\n                    <pre>\n9\n|         |\n0—1—2—3—4—5—6—7—8—9—10\n|___||___| |____________|\n  4    6        20</pre>\n                </div>\n                <ul>\n                    <li>The first trolley operates in period [0,2] and carries 4 products.</li>\n                    <li>The second trolley operates in period [0,4] and carries 9 products.</li>\n                    <li>The third trolley operates in period [2,4] and carries 6 products.</li>\n                    <li>The fourth trolley operates in period [5,10] and carries 20 products.</li>\n                </ul>\n                <p>The first, third, and fourth trolleys can be used to transport the maximum number of products i.e., 30.</p>\n                <p>So, the output is 30.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n    // Write your code here\n    return 0;\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1hEmSZAocSEtAr3qkfTV6jhLRJMDFZ90HX34Bt-2qWGk/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\n\\nstruct Trolley {\\n    int start;\\n    int end;\\n    int products;\\n};\\n\\nint main(){\\n    ios::sync_with_stdio(false);\\n    cin.tie(0);\\n    int N, M;\\n    cin >> N >> M;\\n    vector<Trolley> trolleys(N);\\n    for(int i=0;i<N;i++) cin >> trolleys[i].start >> trolleys[i].end >> trolleys[i].products;\\n    sort(trolleys.begin(), trolleys.end(), & -> bool {\\n        if(a.end != b.end) return a.end < b.end;\\n        return a.start < b.start;\\n    });\\n   \\n    vector<long long> dp(N, 0);\\n    dp[0] = trolleys[0].products;\\n    for(int i=1;i<N;i++){\\n        dp[i] = trolleys[i].products;\\n        \\n        int l=0, r=i-1, pos=-1;\\n        while(l<=r){\\n            int mid = l + (r-l)/2;\\n            if(trolleys[mid].end <= trolleys[i].start){\\n                pos = mid;\\n                l = mid +1;\\n            }\\n            else{\\n                r = mid -1;\\n            }\\n        }\\n        if(pos != -1) dp[i] += dp[pos];\\n        dp[i] = max(dp[i], dp[i-1]);\\n    }\\n    if(N==0) cout << 0;\\n    else cout << dp[N-1];\\n}",
        "company_name": "Flipkart ",
        "company_id": 76
    }
]