[
    {
        "id": 470,
        "title": "Exam Application",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Problem Title: Exam Application</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>An organization needs to build an exam application with 4 classes: <code>Exam</code>, <code>Question</code>, <code>Physics</code>, and <code>Maths</code>. The hierarchy structure of classes is shown below:</p>\n        <ul>\n            <li><strong>Question</strong></li>\n            <ul>\n                <li><strong>Physics</strong></li>\n                <li><strong>Maths</strong></li>\n            </ul>\n        </ul>\n        <p><code>Physics</code> and <code>Maths</code> are inherited from the <code>Question</code> class and implement the parameterized constructor.</p>\n        <p>Class <code>Physics</code> should contain the following private member variables:</p>\n        <ul>\n            <li><code>statement</code> - A string</li>\n            <li><code>answers</code> - An array of strings</li>\n        </ul>\n        <p>Class <code>Maths</code> should contain the following private member variables:</p>\n        <ul>\n            <li><code>statement</code> - A string</li>\n            <li><code>answer</code> - A string</li>\n        </ul>\n        <p>Both classes, <code>Physics</code> and <code>Maths</code>, implement the following functions:</p>\n        <ul>\n            <li><code>getStatement()</code> - Returns the value of the variable <code>statement</code>.</li>\n            <li><code>checkAnswer(answerToCheck)</code> - Checks if the answer equals the <code>answer</code> or not for class <code>Maths</code>.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The input consists of the necessary data to create instances of the classes.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>The output should return the results of the implemented functions for the classes.</p>\n    </div>\n    \n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>Each class should adhere to the specified structure and functionality.</li>\n            <li>Ensure proper encapsulation of member variables.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n[Sample input]</pre>\n            <pre class=\\\"output\\\">Output:\n[Sample output]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation of the output if necessary.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1OoClR1cXH0Hfd2etR-w5Rsnkv_qW9qCB8BdpEGWtVu0/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\nclass Question {\\npublic:\\n    virtual string getStatement() = 0;\\n    virtual bool checkAnswer(string answerToCheck) = 0;\\n};\\n\\nclass Physics : public Question {\\nprivate:\\n    string statement;\\n    vector<string> answers;\\n    bool checkAnswer(string answerToCheck) override {\\n        for(auto &ans : answers) if(ans == answerToCheck) return true;\\n        return false;\\n    }\\n    friend class Exam;\\npublic:\\n    Physics(string stmt, vector<string> ans) : statement(stmt), answers(ans){}\\n    string getStatement() override { return statement; }\\n};\\n\\nclass Maths : public Question {\\nprivate:\\n    string statement;\\n    string answer;\\n    bool checkAnswer(string answerToCheck) override {\\n        return answerToCheck == answer;\\n    }\\n    friend class Exam;\\npublic:\\n    Maths(string stmt, string ans) : statement(stmt), answer(ans){}\\n    string getStatement() override { return statement; }\\n};\\n\\nclass Exam {\\nprivate:\\n    vector<Question *> questions;\\npublic:\\n    void addQuestion(Question *question){\\n        questions.push_back(question);\\n    }\\n    void printExam(ostream &out){\\n        for(auto q : questions) out << q->getStatement() << \\'\\\\n\\';\\n    }\\n    int result(vector<string> answers){\\n        int cnt = 0;\\n        for(int i=0; i<questions.size() && i < answers.size(); ++i){\\n            if(questions[i]->checkAnswer(answers[i])) cnt++;\\n        }\\n        return cnt;\\n    }\\n};\\n\\nint main(){\\n    int n;\\n    cin >> n;\\n    cin.ignore();\\n    Exam e;\\n    for(int i=0;i<n;i++){\\n        string line;\\n        getline(cin, line);\\n        if(line.empty()){\\n            getline(cin, line);\\n        }\\n        vector<string> tokens;\\n        string token;\\n        istringstream iss(line);\\n        while(iss >> token) tokens.push_back(token);\\n        if(tokens[0] == \\\"Maths\\\"){\\n            if(tokens.size() >=3){\\n                string stmt = tokens[1];\\n                string ans = tokens[2];\\n                e.addQuestion(new Maths(stmt, ans));\\n            }\\n        }\\n        else if(tokens[0] == \\\"Physics\\\"){\\n            if(tokens.size() >=3){\\n                string stmt = tokens[1];\\n                vector<string> ans(tokens.begin()+2, tokens.end());\\n                e.addQuestion(new Physics(stmt, ans));\\n            }\\n        }\\n    }\\n    int m;\\n    cin >> m;\\n    vector<string> answers;\\n    for(int i=0;i<m;i++){\\n        string a;\\n        cin >> a;\\n        answers.push_back(a);\\n    }\\n    e.printExam(cout);\\n    cout << e.result(answers);\\n}",
        "company_name": "Embitel",
        "company_id": 137
    }
]