[
    {
        "id": 1960,
        "title": "Maximize Consecutive Hidden Commits",
        "problem_statement": "<h1>Maximize Consecutive Hidden Commits</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working with a Git-based version control system. Each commit in a repository has a unique integer ID representing its timestamp, and the list of commit IDs is given in ascending order. The commit history is complete and consistent.</p>\r\n<p>You are auditing this history and want to test how many consecutive commits can be temporarily hidden (e.g., by a UI filter) such that the remaining visible commits still allow someone to deduce which commits were hidden uniquely. You are allowed to hide a contiguous block of consecutive commits.</p>\r\n<p>Implement a function to maximize the number of commits hidden while ensuring the surrounding commit history clearly defines the hidden range.</p>\r\n<p>The function <code>getMaxConsecutiveHidden</code> takes the following input:</p>\r\n<pre><code class='language-text'>int commits[]: unique integers in ascending order</code></pre>\r\n<p>The function should return an integer, which maximizes the number of commits hidden.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: commits = [1, 3, 4, 5, 6, 9]\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> After hiding the maximum number of consecutive commits, the array becomes [1, 3, ..., 6, 9]. It is clear that the missing commits are 4 and 5. Hence, the optimal answer is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p>This example corresponds to \"Sample Case 0\" from the custom testing section.</p>\r\n<pre><code class='language-text'>Input: commits = [1, 2, 3, 4, 5]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The first 4 commits can be hidden, and the array becomes [1, ..., 5]. The missing commits can be deduced to be 1, 2, 3, and 4.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<p>This example corresponds to \"Sample Case 1\" from the custom testing section.</p>\r\n<pre><code class='language-text'>Input: commits = [3, 5, 7, 9]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> If any element is hidden, the array cannot be uniquely reconstructed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 2 * 10^5</code></li>\r\n    <li><code>1 &le; commits[i] &le; 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "ibm_22oct",
        "company_id": 695
    },
    {
        "id": 1961,
        "title": "Count Pairs in Range",
        "problem_statement": "<h1>Count Pairs in Range</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a function that counts the number of ordered pairs of distinct indices (i, j) for an array <code>arr</code> of size <code>n</code> such that the sum <code>arr[i] + arr[j]</code> is greater than or equal to <code>lowerLimit</code> and less than or equal to <code>upperLimit</code>.</p>\r\n<p>The function <code>getnumberOfPairs</code> will take three inputs:</p>\r\n<ul>\r\n    <li>1. INTEGER ARRAY <code>arr</code></li>\r\n    <li>2. INTEGER <code>lowerLimit</code></li>\r\n    <li>3. INTEGER <code>upperLimit</code></li>\r\n</ul>\r\n<p>The function should return a long integer, the number of pairs of indices (i, j) such that their sum <code>arr[i] + arr[j]</code> is between <code>lowerLimit</code> and <code>upperLimit</code>, inclusive.</p>\r\n<p><strong>Note:</strong> An ordered pair (i, j) in which the order of elements matters. That is, (i, j) is distinct from (j, i) unless i == j. And i != j.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [5, 10, 15, 25], lowerLimit = 20, upperLimit = 25\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The two pairs of distinct indices (i, j) whose sum is between 20 and 25 (inclusive) are (0, 2) and (1, 2).</p>\r\n<ul>\r\n    <li><code>arr[0] + arr[2] = 5 + 15 = 20</code></li>\r\n    <li><code>arr[1] + arr[2] = 10 + 15 = 25</code></li>\r\n</ul>\r\n<p>Thus, the answer is 2.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>0 <= arr[i] <= 10^9</code></li>\r\n    <li><code>0 <= lowerLimit <= upperLimit <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "ibm_22oct",
        "company_id": 695
    },
    {
        "id": 1962,
        "title": "Maximum Containers",
        "problem_statement": "<h1>Maximum Containers</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The problem asks to calculate the maximum number of containers a customer can obtain given a fixed budget, the cost per container, and the number of empty containers required to receive a free container. Each container is assumed to be emptied and returned for credit immediately.</p>\r\n<p>You need to complete the function <code>maximumContainers</code> in the editor. The function signature is as follows:</p>\r\n<pre><code class='language-cpp'>void maximumContainers(vector&lt;string&gt; scenarios) {\r\n    // Function implementation\r\n}</code></pre>\r\n<p>The function accepts a <code>STRING_ARRAY scenarios</code> as a parameter. Each string in <code>scenarios</code> contains three space-separated integers:</p>\r\n<ol>\r\n    <li>The starting budget.</li>\r\n    <li>The cost per container.</li>\r\n    <li>The number of empty containers to return for a free container.</li>\r\n</ol>\r\n<p>For each test case (each string in <code>scenarios</code>), the function must print an integer representing the maximum number of containers the customer can obtain, each on a new line. No return value is expected.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n10 2 5\r\n12 4 4\r\n6 2 2\r\nOutput:\r\n6\r\n3\r\n5</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 test cases:</p>\r\n<ol>\r\n    <li>Spend 10 units of currency on 5 containers at 2 units each. Turn in 5 containers for another one for a total of 6.</li>\r\n    <li>Spend 12 units on 3 containers at 4 units. There are not enough containers to turn in, so the total is 3.</li>\r\n    <li>Spend 6 units on 3 containers at 2 units. Turn in 2 of the containers for a 4th container leaving 1 old and 1 new container. Turn those 2 in for 1 more container making the total 5.</li>\r\n</ol>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n8 4 2\r\n7 2 3\r\nOutput:\r\n3\r\n4</code></pre>\r\n<p><strong>Explanation:</strong> There are 2 test cases:</p>\r\n<ol>\r\n    <li>Spend 8 units of currency on 2 containers at 4 units each. Turn in 2 containers for another one. Total 3.</li>\r\n    <li>Spend 6 units on 3 containers at 2 units. Turn in 3 containers for another one. 1 unit of currency is left over. Total 4.</li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^3</code></li>\r\n    <li><code>2 &lt;= starting budget &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= cost of a container in money &lt;= starting budget</code></li>\r\n    <li><code>2 &lt;= number of empty containers to return &lt;= starting budget</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "ibm_22oct",
        "company_id": 695
    },
    {
        "id": 1963,
        "title": "Remove Odd Values from Linked List",
        "problem_statement": "<h1>Remove Odd Values from Linked List</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a linked list of integers, return a reference to the head of a similar linked list with all odd values removed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong> A linked list with values <code>2 -> 1 -> 3 -> 4 -> 6</code>.</p>\r\n<p><strong>Output:</strong> A linked list with values <code>2 -> 4 -> 6</code>.</p>\r\n<p><strong>Explanation:</strong> The odd values (1 and 3) are removed from the original linked list.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= Linked list node values <= 10<sup>9</sup></code></li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>The first line contains an integer <code>n</code>, the number of nodes in the list.</p>\r\n<p>Each of the next <code>n</code> lines contains an integer <code>node->data</code>.</p>\r\n\r\n<h2>Function Signature</h2>\r\n<p>Complete the <code>deleteOdd</code> function below.</p>\r\n<p>The function is expected to return an <code>INTEGER_SINGLY_LINKED_LIST_NODE</code>.</p>\r\n<p>The function accepts <code>INTEGER_SINGLY_LINKED_LIST_NODE listHead</code> as parameter.</p>\r\n<pre><code class='language-java'>/*\r\n * For your reference:\r\n *\r\n * SinglyLinkedListNode {\r\n *     int data;\r\n *     SinglyLinkedListNode next;\r\n * }\r\n *\r\n */\r\npublic static SinglyLinkedListNode deleteOdd(SinglyLinkedListNode listHead) {\r\n    // Write your code here\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "ibm_22oct",
        "company_id": 695
    }
]