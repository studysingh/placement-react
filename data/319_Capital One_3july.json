[
    {
        "id": 991,
        "title": "Package Distribution System",
        "problem_statement": "<h1>Package Distribution System</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're managing a network of distribution centers that handle package deliveries. Each center has a different capacity for processing packages before needing a reset.</p>\r\n<p>You are given an array of integers <code>centerCapacities</code>, where <code>centerCapacities[i]</code> is a value between 1 and 5 representing the maximum number of packages that the i-th distribution center can process before requiring maintenance.</p>\r\n<p>You are also given an array of strings <code>dailyLog</code>, where <code>dailyLog[i]</code> can be one of the following:</p>\r\n<ul>\r\n    <li><code>\"PACKAGE\"</code> - a new package arrives for processing</li>\r\n    <li><code>\"CLOSURE &lt;j&gt;\"</code> - the j-th distribution center temporarily closes for renovations</li>\r\n</ul>\r\n<p>Packages are sent to centers in sequential order. Each center processes as many packages as it can based on its capacity defined by <code>centerCapacities[i]</code> before packages are sent to the next available center. After a complete rotation through all centers (returning to center 0), the capacity of all operational centers is restored to full, but closed centers remain unavailable.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>The distribution system bypasses any closed centers when allocating packages.</li>\r\n    <li>You can assume at least one center remains operational throughout the process.</li>\r\n</ul>\r\n<p>Return the index of the distribution center that processed the most packages. If multiple centers processed the same maximum number of packages, return the center with the highest index.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(centerCapacities.length * dailyLog.length)</code> will fit within the execution time limit.</p>\r\n<p>The function signature is:</p>\r\n<pre><code class='language-python'>def solution(centerCapacities, dailyLog):\r\n    pass\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: centerCapacities = [1, 2, 1, 2, 1], dailyLog = [\"PACKAGE\", \"PACKAGE\", \"CLOSURE 2\", \"PACKAGE\", \"CLOSURE 3\", \"PACKAGE\", \"PACKAGE\"]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><code>dailyLog[0] = \"PACKAGE\"</code> - the first package goes to center 0, so the package count for each center is <code>[1, 0, 0, 0, 0]</code> and remaining capacities are <code>[0, 2, 1, 2, 1]</code>.</li>\r\n    <li><code>dailyLog[1] = \"PACKAGE\"</code> - as center 0 has reached its maximum capacity, this package goes to center 1 as it still has capacity, so the package count for each center is <code>[1, 1, 0, 0, 0]</code> and remaining capacities are <code>[0, 1, 1, 2, 1]</code> now.</li>\r\n    <li><code>dailyLog[2] = \"CLOSURE 2\"</code> - center 2 closes for renovations.</li>\r\n    <li><code>dailyLog[3] = \"PACKAGE\"</code> - this package goes to center 1 as it still has capacity, so the package count for each center is <code>[1, 2, 0, 0, 0]</code> and remaining capacities are <code>[0, 0, 1, 2, 1]</code> now.</li>\r\n    <li><code>dailyLog[4] = \"CLOSURE 3\"</code> - center 3 closes for renovations.</li>\r\n    <li><code>dailyLog[5] = \"PACKAGE\"</code> - this package goes to center 4, skipping centers 2 and 3 as they are closed, so the package count for each center is <code>[1, 2, 0, 0, 1]</code> and remaining capacities are <code>[0, 0, 1, 2, 0]</code> now.</li>\r\n    <li>As the last center has reached its maximum capacity, the next center to check is center 0 again following the sequential order, so all centers' capacities are restored. The remaining capacities are <code>[1, 2, 1, 2, 1]</code>.</li>\r\n    <li><code>dailyLog[6] = \"PACKAGE\"</code> - this package goes to center 0, so the package count for center is <code>[2, 2, 0, 0, 1]</code> and remaining capacities are <code>[0, 2, 1, 2, 1]</code> now.</li>\r\n</ul>\r\n<p>Thus, the number of packages processed by each center is <code>[2, 2, 0, 0, 1]</code>. Since both centers 0 and 1 have processed the most packages at 2 each, the final answer is the highest index of 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution Time Limit:</strong> 4 seconds (Python 3)</li>\r\n    <li><strong>Memory Limit:</strong> 1 GB</li>\r\n    <li><code>centerCapacities</code> is an array of integers representing the capacity of the distribution centers.\r\n        <ul>\r\n            <li><code>1 &lt; centerCapacities.length &lt;= 100</code></li>\r\n            <li><code>1 &lt;= centerCapacities[i] &lt;= 5</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><code>dailyLog</code> is an array of operations to be processed by the distribution system.\r\n        <ul>\r\n            <li><code>1 &lt;= dailyLog.length &lt;= 1000</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> An integer representing the index of the distribution center which processed the highest number of packages. If multiple centers processed the same maximum number of packages, return the highest index among these centers.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_3july",
        "company_id": 319
    },
    {
        "id": 992,
        "title": "Most Illuminated Point",
        "problem_statement": "<h1>Most Illuminated Point</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are some lamps placed on a coordinate line. Each of these lamps illuminates some space around it within a given radius.</p>\r\n<p>In other words, you are given a two-dimensional array <code>lamps</code>, where <code>lamps[i]</code> contains information about the <code>i</code>th lamp. <code>lamps[i][0]</code> is an integer representing the lamp's coordinate, and <code>lamps[i][1]</code> is a positive integer representing the effective radius of the <code>i</code>th lamp. That means that the <code>i</code>th lamp illuminates everything in a range from <code>lamps[i][0] - lamps[i][1]</code> to <code>lamps[i][0] + lamps[i][1]</code> inclusive.</p>\r\n<p>Your task is to find the coordinate of the point that is illuminated by the highest number of lamps. In case of a tie, return the point among them with the minimal possible coordinate.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: lamps = [[-2, 3], [2, 1], [2, 1]]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe first lamp illuminates everything in range <code>[-2 - 3, -2 + 3] = [-5, 1]</code>.\r\nThe second lamp illuminates everything in range <code>[2 - 1, 2 + 1] = [1, 3]</code>.\r\nThe third lamp illuminates everything in range <code>[2 - 1, 2 + 1] = [1, 3]</code>.\r\nThe only point that is illuminated by all of the lamps is 1, hence the answer is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: lamps = [[-2, 1], [2, 1]]\r\nOutput: -3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe given lamps illuminate ranges <code>[-3, -1]</code> and <code>[1, 3]</code> respectively. Every point in these ranges are illuminated by only 1 lamp, but the one with the minimal coordinate among them is -3, so it is the answer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><strong>Execution time limit:</strong> 4 seconds (py3)</li>\r\n    <li><strong>Memory limit:</strong> 1 GB</li>\r\n    <li><strong>Input:</strong> <code>lamps</code> is a two-dimensional array containing information about the lamps. Each lamp is described by a two-element array containing the coordinate and the effective radius of the lamp.\r\n        <ul>\r\n            <li><code>1 <= lamps.length <= 10^5</code></li>\r\n            <li><code>lamps[i].length = 2</code></li>\r\n            <li><code>-10^9 <= lamps[i][0] <= 10^9</code></li>\r\n            <li><code>1 <= lamps[i][1] <= 10^9</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> An integer representing the coordinate of the point with the smallest coordinate that is illuminated by the most number of lamps.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_3july",
        "company_id": 319
    }
]