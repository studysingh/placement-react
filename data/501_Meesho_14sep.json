[
    {
        "id": 1423,
        "title": "Unique String Arrangements",
        "problem_statement": "<h1>Unique String Arrangements</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the futuristic city of Nexus Prime, a tech organization stores large amounts of encrypted data files. Each file is a string S, scrambled using different arrangements of letters, creating unique encryption patterns. Dr. Axiom, the lead researcher, wants to figure out how many different ways a file can be scrambled (encrypted). As the size of the files grows, Dr. Axiom must find a fast way to count all possible unique arrangements of characters in the file.</p>\r\n<p>Your task is to help Dr. Axiom by writing a program that, given a string S (representing the encrypted file), calculates how many unique ways the letters in the string can be rearranged. Return the answer modulo 10<sup>9</sup> + 7.</p>\r\n<p>For example, if the string is \"hidden code\", there are many possible ways to rearrange the letters, like \"hidden code\", \"hiddn code\", \"hidden hode\", \"denh code\", and more. Your goal is to find out how many such unique arrangements exist.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first and only line consists of a single string S which represents the contents of the encrypted file. The string consists of lowercase English letters and spaces. There is a single space between consecutive words.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return an integer representing the number of unique encryption patterns of the given string S. Since the answer may be very large, return it modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |S| &lt;= 10<sup>5</sup></code>, <code>|S|</code> represents the length of string.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: hidden code\r\nOutput: 8640</code></pre>\r\n<p><strong>Explanation:</strong> Some of the encryption patterns of the given string are \"hidden code\", \"hiddn code\", \"diden hode\", \"denh code\", and \"dhod clened\", etc.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: ab\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are two encryption patterns possible for the given string: \"ab\" and \"ba\".</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_14sep",
        "company_id": 501
    },
    {
        "id": 1424,
        "title": "Minimum Number of Clicks to Make All Cells Zero",
        "problem_statement": "<h1>Minimum Number of Clicks to Make All Cells Zero</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an n x m binary matrix, where each cell contains either 0 or 1.</p>\r\n<p>You can perform a special operation called a \"click\" on any cell (i, j), which toggles the value of the cell (i, j) and its immediate neighbors (up, down, left, right). Toggling a cell means flipping its value from 0 to 1 or from 1 to 0.</p>\r\n<p>Your task is to determine the minimum number of clicks required to convert the entire matrix into a matrix with all cells containing 0.</p>\r\n<p>Return the minimum number of clicks to make all the matrix cell elements as 0.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains 2 space separated integers n, m; representing row size and column size of the matrix.</p>\r\n<p>Next n lines, each contain m characters (either '0' or '1'); representing the rows of the grid.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output contains an integer representing the minimum number of clicks to make all the matrix cell elements as 0.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= n, m &lt;= 50</code></li>\r\n    <li>Matrix contains only '1' and '0'</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 3\r\n010\r\n101\r\n010\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initial matrix:</p>\r\n<pre><code class='language-text'>010\r\n101\r\n010</code></pre>\r\n<p>Click at cell (0, 1): Toggling cell (0, 1) and its neighbors (1,1), (0,0), and (0,2).</p>\r\n<pre><code class='language-text'>111\r\n111\r\n010</code></pre>\r\n<p>Click at cell (1, 0): Toggling cell (1, 0) and its neighbors (0,0), (2,0), and (1,1).</p>\r\n<pre><code class='language-text'>011\r\n001\r\n110</code></pre>\r\n<p>Click at cell (1, 2): Toggling cell (1, 2) and its neighbors (0,2), (2,2), and (1,1).</p>\r\n<pre><code class='language-text'>010\r\n000\r\n111</code></pre>\r\n<p>Click at cell (2, 1): Toggling cell (2, 1) and its neighbors (1,1), (2,0), (2,2).</p>\r\n<pre><code class='language-text'>000\r\n000\r\n000</code></pre>\r\n<p>Now all the cells are 0, and we achieved this with 4 clicks.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 5\r\n00111\r\n01010\r\n11110\r\n00111\r\n11110\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Initial matrix:</p>\r\n<pre><code class='language-text'>00111\r\n01010\r\n11110\r\n00111\r\n11110</code></pre>\r\n<p>Click at cell (0, 3): Toggling cell (0, 3) and its neighbors (1,3), (0,2), and (0,4).</p>\r\n<pre><code class='language-text'>00000\r\n01000\r\n11110\r\n00111\r\n11110</code></pre>\r\n<p>Click at cell (2, 1): Toggling cell (2, 1) and its neighbors (1,1), (3,1), (2,0), and (2,2).</p>\r\n<pre><code class='language-text'>00000\r\n00000\r\n00010\r\n01111\r\n11110</code></pre>\r\n<p>Further clicks are needed to make all cells zero, resulting in a total of 4 clicks.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Meesho_14sep",
        "company_id": 501
    }
]