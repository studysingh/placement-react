[
    {
        "id": 1282,
        "title": "Division nodes",
        "problem_statement": "<h1>Division nodes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given N nodes. There are N - 1 connecting edges between any two nodes. Each node has a value denoted by an array A.</p>\r\n<p>Write a program to divide the tree along an edge f so as to minimize the difference between the sums of the node values on either side of the edge.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the <code>solve</code> function. This function takes the following 3 parameters and returns the answer.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><code>N</code>: Represents the count of a number of nodes</li>\r\n    <li><code>edges</code>: Represents the edges between nodes</li>\r\n    <li><code>A</code>: Represents the value associated with each node</li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains <code>T</code> denoting the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The second line contains <code>N</code>.</li>\r\n            <li>Next <code>N - 1</code> lines two space-separated integers <code>U_i</code> and <code>V_i</code> denoting that the edge number <code>i</code> connects the nodes <code>U_i</code> and <code>V_i</code>.</li>\r\n            <li>The next line <code>N</code> space-separated integers denoting the values of the nodes.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h3>Output format</h3>\r\n<p>For each test case, print the index of the connecting edge.</p>\r\n<p><strong>Note:</strong> If there are multiple possible answers, then select the edge having the minimum index. You can assume that between any pair of nodes, there is no more than one connecting edge and there is no edge connecting a node to itself.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= T <= 10</code></li>\r\n    <li><code>2 <= N <= 10^5</code></li>\r\n    <li><code>1 <= A_i <= 10^9</code></li>\r\n    <li><code>1 <= U_i, V_i <= N</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n3 6 5 3 2 3 5\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> The first line represents the number of test cases, T = 1.</p>\r\n<p>The first test case</p>\r\n<p>Divide the tree 1-3 to obtain an optimal answer.</p>\r\n\r\n<h3>Note</h3>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h3>Limits</h3>\r\n<ul>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h3>Scoring</h3>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h3>Allowed Languages</h3>\r\n<p>Bash, C, C++, C++17, Clojure, C#, D, Erlang, F#, Go, Groovy, Haskell, Java 8, Java 14, Java 17, JavaScript(Node.js), Julia, Kotlin, Lisp (SBCL), Lua, Objective-C, OCaml, Octave, Pascal, Perl, PHP, Python, Python 3, Python 3.8, Racket, Ruby, Rust, Scala, Swift, TypeScript, Visual Basic</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Teradata",
        "company_id": 440
    },
    {
        "id": 1283,
        "title": "Lexicographically Smallest String",
        "problem_statement": "<h1>Lexicographically Smallest String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string <code>s</code> of length <code>N</code> that consists of lowercase Latin letters. Each lowercase Latin letter (\"a\"-\"z\") is colored with either black or white.</p>\r\n<p>You can perform the following operation any number of times (possibly, zero) on the string:</p>\r\n<ul>\r\n    <li>You can swap any two adjacent characters of the string <code>s</code> if the letters that you are swapping are colored differently.</li>\r\n</ul>\r\n<p>Find the lexicographically smallest possible string <code>s</code> after applying any number of operations (possibly, zero).</p>\r\n\r\n<h3>Notes</h3>\r\n<p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> if and only if one of the following holds:</p>\r\n<ul>\r\n    <li><code>a</code> is a prefix of <code>b</code> but <code>a ≠ b</code></li>\r\n    <li>In the first position where <code>a</code> and <code>b</code> differ, the string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</li>\r\n</ul>\r\n<p>Assume 1-based indexing.</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the <code>Lexicographically_Smallest_String</code> function. This function takes the following 3 parameters and returns the lexicographically smallest possible string <code>s</code> after applying any number of operations (possibly, zero).</p>\r\n\r\n<h3>Parameter</h3>\r\n<ul>\r\n    <li><code>N</code>: Represents an integer representing the length of string <code>s</code></li>\r\n    <li><code>s</code>: Represents a string of length <code>N</code> representing string <code>s</code></li>\r\n    <li><code>colors</code>: Represents a string that is 26 letters long representing colors (\"a\"-\"z\")</li>\r\n</ul>\r\n\r\n<h2>Input format for custom testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<p>The first line contains <code>T</code>, which represents the number of test cases.</p>\r\n<p>For each test case:</p>\r\n<ul>\r\n    <li>The first line contains an integer <code>N</code> denoting the length of string <code>s</code>.</li>\r\n    <li>The second line contains a string <code>s</code> of length <code>N</code> consisting of lowercase Latin letters.</li>\r\n    <li>The third line contains a string consisting of 26 characters of 'B' and 'W' (denoting black and white). This is the color of the <code>i</code>th lowercase Latin letter of (\"a\"-\"z\").</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Return the lexicographically smallest string <code>s</code> for each test case in a new line.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 ≤ T ≤ 5</code></li>\r\n    <li><code>2 ≤ N ≤ 10<sup>6</sup></code></li>\r\n    <li><code>s[i] ∈ Lowercase Latin Letter</code></li>\r\n    <li><code>colors[i] ∈ {'B', 'W'}</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n4\r\nahag\r\nBBBBBBBBBBBBBBBBBBBBBBBBBB\r\nOutput:\r\naagh</code></pre>\r\n<p><strong>Explanation:</strong> The provided sample input's <code>colors</code> string (<code>BBBBBBBBBBBBBBBBBBBBBBBBBB</code>) indicates that all lowercase Latin letters ('a' through 'z') are colored Black. According to the problem rules, adjacent characters can only be swapped if they are colored differently. If all characters are the same color, no swaps would be possible, and the string \"ahag\" would remain \"ahag\".</p>\r\n<p>However, the sample output \"aagh\" implies that swaps are possible. The explanation below demonstrates the operations assuming a different color mapping for the characters 'a', 'h', and 'g' to illustrate the problem's logic.</p>\r\n<p>Consider the initial string <code>s = \"ahag\"</code>.</p>\r\n<p>1. Applying operation on index 2 (character 'h') and index 3 (character 'a'): If 'h' and 'a' are colored differently (e.g., 'h' is White and 'a' is Black), they can be swapped. The string becomes <code>\"aahg\"</code>.</p>\r\n<p>2. Applying operation on index 3 (character 'h') and index 4 (character 'g'): If 'h' and 'g' are colored differently (e.g., 'h' is White and 'g' is Black), they can be swapped. The string becomes <code>\"aagh\"</code>.</p>\r\n<p>Thereby, the lexicographically smallest possible string <code>S</code> after applying any number of operations (possibly, zero) is \"aagh\".</p>\r\n<p>Assuming 1-based indexing.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Teradata",
        "company_id": 440
    },
    {
        "id": 1649,
        "title": "Binary Palindromic Number",
        "problem_statement": "<h1>Binary Palindromic Number</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a number N. You are required to convert it into a binary palindromic number. A binary palindromic number is a number whose binary representation is a palindrome.</p>\r\n<p>You can perform the following two operations on the provided number:</p>\r\n<ul>\r\n    <li>Increase the value of the number by 1.</li>\r\n    <li>Decrease the value of the number by 1.</li>\r\n</ul>\r\n<p>You are required to calculate the minimum number of operations required to convert the given number into a binary palindromic number.</p>\r\n<p><strong>Note:</strong> The given number must be represented in the form of the minimum number of bits (ignoring the leading zeros in its binary representation).</p>\r\n<p><strong>Function description</strong><br>\r\nComplete the solve function. This function takes the following parameter and returns the minimum number of operations required.</p>\r\n<p><strong>Parameter:</strong><br>\r\n<code>num</code>: Represents the number N, on which you must use a minimum number of operations, to convert the given number into a binary palindromic number.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 2\r\nOutput: 1</code></pre>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 3\r\nOutput: 0</code></pre>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: 4\r\nOutput: 1</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= T &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= N &lt;= 2 * 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Teradata",
        "company_id": 440
    }
]