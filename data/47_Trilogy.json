[
    {
        "id": 193,
        "title": "Codewriting",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Codewriting</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>A cryptarithm is a mathematical puzzle where the goal is to find the correspondence between letters and digits such that the given arithmetic equation consisting of letters holds true.</p>\n        \n        <p>Given a cryptarithm as an array of strings <code>crypt</code>, count the number of its valid solutions.</p>\n        \n        <p>The solution is valid if each letter represents a different digit, and the leading digit of any multi-digit number is not zero.</p>\n        \n        <p><code>crypt</code> has the following structure: <code>[word1, word2, word3]</code>, which stands for the <code>word1 + word2 = word3</code> cryptarithm.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input</h3>\n        <p>Array of three non-empty strings containing only uppercase English letters.</p>\n        <p><code>array.string crypt</code></p>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output</h3>\n        <p>integer</p>\n        <p>The number of valid solutions.</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ crypt[i].length ≤ 35</li>\n            <li>Execution time limit: 0.5 seconds (cpp)</li>\n            <li>Memory limit: 1 GB</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">crypt = [\\\"SEND\\\", \\\"MORE\\\", \\\"MONEY\\\"]</pre>\n            <pre class=\\\"output\\\">solution(crypt) = 1</pre>\n            <div class=\\\"explanation\\\">\n                <p>Because there is only one solution to this cryptarithm:</p>\n                <p>O = 0, M = 1, Y = 2, E = 5, N = 6, D = 7, R = 8, and S = 9 (9567 + 1085 = 10652)</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">crypt = [\\\"GREEN\\\", \\\"BLUE\\\", \\\"BLACK\\\"]</pre>\n            <pre class=\\\"output\\\">solution(crypt) = 12</pre>\n            <div class=\\\"explanation\\\">\n                <p>Because there are 12 possible valid solutions, including:</p>\n                <ul>\n                    <li>54889 + 6138 = 61027</li>\n                    <li>18559 + 2075 = 20634</li>\n                    <li>72449 + 8064 = 80513</li>\n                    <!-- Additional solutions omitted for brevity -->\n                </ul>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Example 3:</h4>\n            <pre class=\\\"input\\\">crypt = [\\\"ONE\\\", \\\"TWO\\\", \\\"THREE\\\"]</pre>\n            <pre class=\\\"output\\\">solution(crypt) = 0</pre>\n            <div class=\\\"explanation\\\">\n                <p>Because there are no valid solutions.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/11EH-RdVVLnkr1TZ89VmY-BqB0FvN2pThWT6JNG4untQ/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Trilogy",
        "company_id": 47
    },
    {
        "id": 194,
        "title": "Bank Transaction Management Bot",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Bank Transaction Management Bot</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You\\'ve been asked to program a bot for a popular bank that will automate the management of incoming requests. Every request has its own <code>timestamp</code> in seconds, and it is guaranteed that all requests come sequentially, i.e. the timestamp is strictly increasing. There are two types of incoming requests:</p>\n        \n        <ul>\n            <li><code>deposit &lt;timestamp&gt; &lt;holder_id&gt; &lt;amount&gt;</code> — request to deposit <code>amount</code> amount of money in the <code>holder_id</code> account.</li>\n            <li><code>withdraw &lt;timestamp&gt; &lt;holder_id&gt; &lt;amount&gt;</code> — request to withdraw <code>amount</code> amount of money from the <code>holder_id</code> account. As a bonus, bank also provides a cashback policy — 2% of the withdrawn amount rounded down to the nearest integer will be returned to the account exactly 24 hours after the request timestamp. If the cashback and deposit/withdrawal happen at the same timestamp, assume cashback happens earlier.</li>\n        </ul>\n\n        <p>Your system should also handle invalid requests. There are two types of invalid requests:</p>\n        <ul>\n            <li>invalid account number;</li>\n            <li>withdrawal of a larger amount of money than is currently available.</li>\n        </ul>\n\n        <p>For the given list of initial <code>balances</code> and <code>requests</code>, return the state of <code>balances</code> straight after the last request has been processed, or an array of a single element <code>[-request_id]</code> (please note the minus sign), where <code>request_id</code> is the 1-based index of the first invalid request. Note that cashback requests which haven\\'t happened before the last request should be ignored.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input/Output</h3>\n        <ul>\n            <li>[execution time limit] 0.5 seconds (cpp)</li>\n            <li>[memory limit] 1 GB</li>\n            <li>[input] array.integer balances\n                <p>Array of integers, where <code>balances[i]</code> is the amount of money in the (i + 1)<sup>th</sup> account.</p>\n                <p>Guaranteed constraints:</p>\n                <ul>\n                    <li>1 ≤ balances.length ≤ 100</li>\n                    <li>0 ≤ balances[i] ≤ 10<sup>5</sup></li>\n                </ul>\n            </li>\n            <li>[input] array.string requests\n                <p>Array of requests in the order they should be processed. Each request is guaranteed to be in the format described above. It is guaranteed that requests come sequentially, i.e. the timestamp strictly increases.</p>\n                <p>Guaranteed constraints:</p>\n                <ul>\n                    <li>1 ≤ requests.length ≤ 100</li>\n                </ul>\n            </li>\n            <li>[output] array.integer\n                <p>The <code>balances</code> after executing all the <code>requests</code> or array with a single integer - the index of the first invalid request preceded by \\\"-\\\".</p>\n            </li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example 1</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">balances = [1000, 1500]\nrequests = [\\\"withdraw 1613327630 2 400\\\", \\\"withdraw 1613327644 2 800\\\", \\\"withdraw 1614185244 1 100\\\", \\\"deposit 1614185844 2 200\\\", \\\"withdraw 1614185845 2 150\\\"]</pre>\n            <pre class=\\\"output\\\">solution(balances, requests) = [900, 295]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here are the states of balances after each request:</p>\n                <ul>\n                    <li>initially: [1000, 1500];</li>\n                    <li>\\\"withdraw 1613327630 2 400\\\": [1000, 1020];</li>\n                    <li>\\\"withdraw 1613327644 2 800\\\": [1000, 220];</li>\n                    <li>At 1614141844 the 2nd account will receive the cashback of 400 * 0.02 = 9.6, which is rounded down to 9: [1000, 229];</li>\n                    <li>At 1614141844 the 2nd account will receive the cashback of 800 * 0.02 = 16: [1000, 245];</li>\n                    <li>\\\"withdraw 1614185244 1 100\\\": [900, 245];</li>\n                    <li>\\\"deposit 1614185844 2 200\\\": [900, 445];</li>\n                    <li>\\\"withdraw 1614185845 2 150\\\": [900, 295], which is the answer.</li>\n                </ul>\n                <p>Cashbacks for the last two withdrawals happen at 1614141844 and 1614189245, which is after the last request timestamp 1614185845, so they are ignored.</p>\n            </div>\n        </div>\n\n        <h3>Example 2</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">balances = [20, 1000, 500, 40, 90]\nrequests = [\\\"deposit 1613327630 3 400\\\", \\\"withdraw 1613327635 1 20\\\", \\\"withdraw 1613327651 1 50\\\"]</pre>\n            <pre class=\\\"output\\\">solution(balances, requests) = [-3]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Here are the states of balances after each request:</p>\n                <ul>\n                    <li>initially: [20, 1000, 500, 40, 90];</li>\n                    <li>\\\"deposit 1613327630 3 400\\\": [20, 1000, 900, 40, 90];</li>\n                    <li>\\\"withdraw 1613327635 1 20\\\": [0, 1000, 900, 40, 90];</li>\n                    <li>\\\"withdraw 1613327651 1 50\\\": it is not possible to withdraw 50 from the 1st account, so the request is invalid.</li>\n                    <li>the rest of the requests are not processed</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1Qx_9WRlYmgwuEE9OmL3oi6AyQmudpJL7Tphc3Gizwsc/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Trilogy",
        "company_id": 47
    },
    {
        "id": 195,
        "title": "Add Two Huge Numbers",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Add Two Huge Numbers</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>You\\'re given 2 huge integers represented by linked lists. Each linked list element is a number from <code>0</code> to <code>9999</code> that represents a number with exactly 4 digits. The represented number might have leading zeros. Your task is to add up these huge integers and return the result in the same format.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <div class=\\\"example\\\">\n            <p>For <code>a = [9876, 5432, 1999]</code> and <code>b = [1, 8001]</code>, the output should be:</p>\n            <pre class=\\\"output\\\">solution(a, b) = [9876, 5434, 0]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation: 987654321999 + 18001 = 987654340000</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <p>For <code>a = [123, 4, 5]</code> and <code>b = [100, 100, 100]</code>, the output should be:</p>\n            <pre class=\\\"output\\\">solution(a, b) = [223, 104, 105]</pre>\n            <div class=\\\"explanation\\\">\n                <p>Explanation: 123004005 + 100100100 = 223104105</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"input-output\\\">\n        <h3>Input/Output</h3>\n        <div class=\\\"execution-limits\\\">\n            <ul>\n                <li><strong>[execution time limit]</strong> 0.5 seconds (cpp)</li>\n                <li><strong>[memory limit]</strong> 1 GB</li>\n            </ul>\n        </div>\n\n        <div class=\\\"input-format\\\">\n            <h4>[input] linkedlist.integer a</h4>\n            <p>The first number, without its leading zeros.</p>\n            <p><em>Guaranteed constraints:</em></p>\n            <ul>\n                <li>0 ≤ a size ≤ 10<sup>4</sup></li>\n                <li>0 ≤ element value ≤ 9999</li>\n            </ul>\n        </div>\n\n        <div class=\\\"input-format\\\">\n            <h4>[input] linkedlist.integer b</h4>\n            <p>The second number, without its leading zeros.</p>\n            <p><em>Guaranteed constraints:</em></p>\n            <ul>\n                <li>0 ≤ b size ≤ 10<sup>4</sup></li>\n                <li>0 ≤ element value ≤ 9999</li>\n            </ul>\n        </div>\n\n        <div class=\\\"output-format\\\">\n            <h4>[output] linkedlist.integer</h4>\n            <p>The result of adding <code>a</code> and <code>b</code> together, returned without leading zeros in the same format.</p>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/18jzRBC7KAN1C4KQocLYukROE93-bDTQjYRdj3FFtO5s/edit?usp=sharing",
        "solution_code": "// Singly-linked lists are already defined with this interface:\\n// template<typename T>\\n// struct ListNode {\\n//   ListNode(const T &v) : value(v), next(nullptr) {}\\n//   T value;\\n//   ListNode *next;\\n// };\\n\\nListNode<int> *solution(ListNode<int> *a, ListNode<int> *b) {\\n    // Reverse the linked lists to process them from least significant to most significant\\n    auto reverseList = [](ListNode<int> *head) {\\n        ListNode<int> *prev = nullptr, *current = head, *next = nullptr;\\n        while (current) {\\n            next = current->next;\\n            current->next = prev;\\n            prev = current;\\n            current = next;\\n        }\\n        return prev;\\n    };\\n\\n    a = reverseList(a);\\n    b = reverseList(b);\\n\\n    ListNode<int> *result = nullptr, *tail = nullptr;\\n    int carry = 0;\\n\\n    // Add corresponding nodes in a and b\\n    while (a ⠵⠵⠞ carry > 0) {\\n        int sum = carry;\\n        if (a) {\\n            sum += a->value;\\n            a = a->next;\\n        }\\n        if (b) {\\n            sum += b->value;\\n            b = b->next;\\n        }\\n        carry = sum / 10000;  // Carry for the next position\\n        int currentDigit = sum % 10000;\\n\\n        // Create new node for the current digit\\n        ListNode<int> *newNode = new ListNode<int>(currentDigit);\\n        if (!result) {\\n            result = newNode;\\n        } else {\\n            tail->next = newNode;\\n        }\\n        tail = newNode;\\n    }\\n\\n    // Reverse the result to get the final output format\\n    result = reverseList(result);\\n    return result;\\n}// Singly-linked lists are already defined with this interface:\\n// template<typename T>\\n// struct ListNode {\\n//   ListNode(const T &v) : value(v), next(nullptr) {}\\n//   T value;\\n//   ListNode *next;\\n// };\\n\\nListNode<int> *solution(ListNode<int> *a, ListNode<int> *b) {\\n    // Reverse the linked lists to process them from least significant to most significant\\n    auto reverseList = [](ListNode<int> *head) {\\n        ListNode<int> *prev = nullptr, *current = head, *next = nullptr;\\n        while (current) {\\n            next = current->next;\\n            current->next = prev;\\n            prev = current;\\n            current = next;\\n        }\\n        return prev;\\n    };\\n\\n    a = reverseList(a);\\n    b = reverseList(b);\\n\\n    ListNode<int> *result = nullptr, *tail = nullptr;\\n    int carry = 0;\\n\\n    // Add corresponding nodes in a and b\\n    while (a ⠵⠵⠞ carry > 0) {\\n        int sum = carry;\\n        if (a) {\\n            sum += a->value;\\n            a = a->next;\\n        }\\n        if (b) {\\n            sum += b->value;\\n            b = b->next;\\n        }\\n        carry = sum / 10000;  // Carry for the next position\\n        int currentDigit = sum % 10000;\\n\\n        // Create new node for the current digit\\n        ListNode<int> *newNode = new ListNode<int>(currentDigit);\\n        if (!result) {\\n            result = newNode;\\n        } else {\\n            tail->next = newNode;\\n        }\\n        tail = newNode;\\n    }\\n\\n    // Reverse the result to get the final output format\\n    result = reverseList(result);\\n    return result;\\n}",
        "company_name": "Trilogy",
        "company_id": 47
    },
    {
        "id": 196,
        "title": "CodeWriting: Fraction Addition",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">CodeWriting: Fraction Addition</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Your task is to find the sum of two fractions, expressed in the form X/Y and U/V, where X, Y, U, and V are four integers. Compute their sum and reduce it to its lowest indivisible state: A/B.</p>\n        \n        <p>You are given an array of strings, which contains several expressions in the form \\\"X/Y+U/V\\\". Return a string array, where the i<sup>th</sup> element is the result for the i<sup>th</sup> expression in the form \\\"A/B\\\".</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        <ul>\n            <li>2/6+2/6 equals 4/6, which should be reduced to 2/3</li>\n            <li>7/10+11/10 equals 20/10 which should be reduced to 2/1</li>\n        </ul>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Input/Output:</h4>\n            <pre class=\\\"input\\\">fractions = [\\\"2/6+2/6\\\", \\\"7/10+11/10\\\"]</pre>\n            <pre class=\\\"output\\\">solution(fractions) = [\\\"2/3\\\", \\\"2/1\\\"]</pre>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input</h3>\n        <p><strong>[input] array.string fractions</strong></p>\n        <p>An array of strings, where each string contains an expression that represents the sum of two fractions, given in the form \\\"X/Y+U/V\\\".</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Guaranteed Constraints</h3>\n        <ul>\n            <li>1 ≤ fractions.length ≤ 500</li>\n            <li>fractions[i] has the form \\\"X/Y+U/V\\\" where X, Y, U, V are integers</li>\n            <li>1 ≤ X, Y, U, V ≤ 2000</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output</h3>\n        <p><strong>[output] array.string</strong></p>\n        <p>An array of strings, where the i<sup>th</sup> element is the result for the i<sup>th</sup> expression in the form \\\"A/B\\\".</p>\n    </div>\n\n    <div class=\\\"technical-details\\\">\n        <h3>Technical Details</h3>\n        <ul>\n            <li><strong>Execution time limit:</strong> 0.5 seconds (cpp)</li>\n            <li><strong>Memory limit:</strong> 1 GB</li>\n        </ul>\n    </div>\n\n    <div class=\\\"syntax-tips\\\">\n        <h3>C++ Syntax Tips</h3>\n        <pre class=\\\"code-block\\\">\n// Prints help message to the console\n// Returns a string\nstring helloWorld(string name) {\n    cout << \\\"This prints to the console when you Run Tests\\\" << endl;\n    return \\\"Hello, \\\" + name;\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1jVLkNW4pzfxMR8oFk4fGPlosmZi-4aaXrEJf3GcdLak/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Trilogy",
        "company_id": 47
    }
]