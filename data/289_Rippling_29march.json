[
    {
        "id": 927,
        "title": "Minimum Changes to Form K-Periodic Palindrome",
        "problem_statement": "<h1>Minimum Changes to Form K-Periodic Palindrome</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The current password is represented by the string <code>currentPassword</code> consisting only of lowercase Latin letters.</p>\r\n<p>New password requirements have just been released. The new password, called <code>newPassword</code>, must meet two specific requirements:</p>\r\n<ul>\r\n    <li>It must be a palindrome.</li>\r\n    <li>It must have a period of <code>k</code>. That is, <code>newPassword[i] = newPassword[i+k]</code> for all <code>i</code> such that <code>i + k &lt; length(newPassword)</code>.</li>\r\n</ul>\r\n<p>The objective is to determine the minimum number of characters that need to be changed in <code>currentPassword</code> to create a <code>newPassword</code> of the same length.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findMinChanges</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>string currentPassword</code>: the current password</li>\r\n    <li><code>int k</code>: the required period of the new password</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of characters to change to make a valid <code>newPassword</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: currentPassword = \"abzbz\", k = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> Changing the first character of <code>currentPassword</code> to 'z' creates a <code>newPassword</code> of \"zbzbz\" which is a palindrome with a period of 3. Therefore, the answer is 1.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: currentPassword = \"cbpecbbc\", k = 4\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> Changing the third and fourth characters to 'c' and 'b' respectively makes <code>newPassword</code> \"cbbccbbc\" which is a palindrome with period four.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: currentPassword = \"vsvvsv\", k = 3\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> In this case, the <code>currentPassword</code> is a palindrome with period three already, so no changes are required.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= k &lt; length(currentPassword) &lt;= 2 * 10^5</code></li>\r\n    <li><code>currentPassword</code> only contains lowercase Latin letters.</li>\r\n    <li>It is guaranteed that <code>length(currentPassword)</code> is divisible by <code>k</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Rippling_29march",
        "company_id": 289
    },
    {
        "id": 928,
        "title": "Minimum Time to Execute Processes",
        "problem_statement": "<h1>Minimum Time to Execute Processes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are <code>n</code> processes to be executed, and the <code>i<sup>th</sup></code> process has a size of <code>processSize[i]</code>, where <code>1 &le; i &le; n</code>. Also, there are <code>m</code> processors of different size capacity. The capacity of the <code>j<sup>th</sup></code> processor is <code>capacity[j]</code> (<code>1 &le; j &le; m</code>). A processor can process a task of size less than or equal to its capacity in 1 second, but it cannot execute processes whose size is greater than its capacity.</p>\r\n<p>A processor can execute multiple processes one after the other, but needs to pause for 1 second after completing its current one. Multiple processors can work on different processes simultaneously.</p>\r\n<p>Find the minimum time to execute all the processes or return -1 if there is no way to execute all the processes.</p>\r\n\r\n<p>Complete the function <code>getMinimumTime</code> in the editor below.</p>\r\n<p><code>getMinimumTime</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int processSize[n]</code>: the size of each process</li>\r\n    <li><code>int capacity[m]</code>: the capacity of each processor</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum time required to execute all the processes, or -1 if there is no way to execute all processes.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, processSize = [2, 5, 3], m = 3, capacity = [6, 2, 4]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The optimal way to assign processes is to give the first processor the second process, the second processor the first process, and the third processor the third process. All of them complete their processes in 1 second. Therefore, the minimum time required is 1 second.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nSTDIN   FUNCTION\r\n3       processSize[] size n = 3\r\n->      processSize = [2, 5, 8]\r\n3       capacity[] size m = 3\r\n->      capacity = [6, 7, 4]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> No processor has the required capacity to process the third process, so there is no way to process them all.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nSTDIN   FUNCTION\r\n5       processSize[] size n = 5\r\n->      processSize = [1, 2, 3, 4, 6]\r\n3       capacity[] size m = 3\r\n->      capacity = [4, 7, 4]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Assign the second and third process to the first processor. It completes the first process in 1 second, then pauses for another second, before completing the third process. Therefore, it takes 3 seconds to complete all of its work. Similarly, assign the first and fifth process to the second processor. It also completes its processes in 3 seconds. The fourth process is completed by the third processor in 1 second. Hence, all of the processes are completed in 3 seconds.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n, m &le; 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; processSize[i], capacity[i] &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Rippling_29march",
        "company_id": 289
    }
]