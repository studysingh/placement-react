[
    {
        "id": 552,
        "title": "Count Matching Regions",
        "problem_statement": "<h1>Count Matching Regions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Images are stored in the form of a grid. Image recognition is possible by comparing grids of two images and checking if they have any matching regions.</p>\r\n<p>There are two grids where each cell of the grids contains either 0 or 1. If two cells share a side then they are adjacent. Cells that contain 1 form a connected region if any cell of that region can be reached by moving by row or column through the adjacent cells that contain 1. Overlay the first grid onto the second and if a region of the first grid completely matches a region of the second grid, the regions are matched. Count the total number of such matched regions in the second grid.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: grid1 = [\"111\", \"100\", \"100\"], grid2 = [\"111\", \"100\", \"101\"]\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> There are 2 regions in the second grid: {(0,0),(0,1),(0,2),(1,0),(2,0)} and {(2,2)}. Regions in grid 1 cover the first region of grid 2, but not the second region. There is 1 matching region.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<p>Making a slight alteration to the above example:</p>\r\n<pre><code class='language-text'>Input: grid1 = [\"111\", \"101\", \"100\"], grid2 = [\"111\", \"100\", \"101\"]\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> There are no matching regions. From the first graph, the 1 at position (1,2) is not matched in the second grid's larger region. The second grid position (2,2) is not matched in grid 1.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>countMatches</code> in the editor below.</p>\r\n<p><code>countMatches</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string grid1[n]</code>: an array of bit strings representing the rows of image 1</li>\r\n    <li><code>string grid2[n]</code>: an array of bit strings representing the rows of image 2</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>int</code>: number of matching regions.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 100</code></li>\r\n    <li><code>1 &le; lengths of grid1[i] and grid2[i] &le; 100</code></li>\r\n    <li>Grid cells contain only 0 or 1</li>\r\n</ul>\r\n\r\n<h3>Sample Input 0:</h3>\r\n<pre><code class='language-text'>STDIN Function\r\n3     -> grid1[] size n = 3\r\n001   -> grid1 = ['001', '011', '100']\r\n011\r\n100\r\n3     -> grid2[] size n = 3\r\n001   -> grid2 = ['001', '011', '101']\r\n011\r\n101</code></pre>\r\n<h3>Sample Output 0:</h3>\r\n<pre><code class='language-text'>1</code></pre>\r\n<h3>Explanation 0:</h3>\r\n<p>The first grid forms 2 regions. They are {(0,2), (1,1)} and {(2,0)}.</p>\r\n<p>The second grid forms 2 regions. They are {(0,2), (1,1), (2,2)} and {(2,0)}.</p>\r\n<p>So, only one region matches.</p>\r\n\r\n<h3>Sample Input 1:</h3>\r\n<pre><code class='language-text'>STDIN Function\r\n4     -> grid1[] size n = 4\r\n0100  -> grid1 = ['0100', '1001', '0011', '0011']\r\n1001\r\n0011\r\n0011\r\n4     -> grid2[] size n = 4\r\n0101  -> grid2 = ['0101', '1001', '0011', '0011']\r\n1001\r\n0011\r\n0011</code></pre>\r\n<h3>Sample Output 1:</h3>\r\n<pre><code class='language-text'>2</code></pre>\r\n<h3>Explanation 1:</h3>\r\n<p>The first grid forms 3 regions. They are {(0,1), (1,0)} and {(1,3), (2,2), (3,2), (3,3)}.</p>\r\n<p>The second grid forms 3 regions. They are {(0,1), (1,0)} and {(0,3), (1,3), (2,2), (3,2), (3,3)}.</p>\r\n<p>So, two regions match.</p>\r\n\r\n<h3>Sample Input 2:</h3>\r\n<pre><code class='language-text'>STDIN Function\r\n4     -> grid1[] size n = 4\r\n0010  -> grid1 = ['0010', '0111', '0100', '1111']\r\n0111\r\n0100\r\n1111\r\n4     -> grid2[] size n = 4\r\n0010  -> grid2 = ['0010', '0111', '0100', '1111']\r\n0111\r\n0100\r\n1111</code></pre>\r\n<h3>Sample Output 2:</h3>\r\n<pre><code class='language-text'>0</code></pre>\r\n<h3>Explanation 2:</h3>\r\n<p>The first grid forms 1 region. It is {(0,2), (1,1), (1,2), (1,3), (2,1), (3,0), (3,1), (3,2), (3,3)}.</p>\r\n<p>The second grid forms 1 region. It is {(0,2), (1,1), (1,2), (1,3), (2,1), (3,0), (3,1), (3,2), (3,3)}.</p>\r\n<p>There are no matching regions.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Linkdin_2feb",
        "company_id": 185
    },
    {
        "id": 553,
        "title": "Delete Products",
        "problem_statement": "<h1>Delete Products</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A sales executive must sell various items in a bag, where each item has an ID number.</p>\r\n<p>It is easier to sell items with the same ID numbers, and some maximum number of items can be removed from the bag. Find the minimum number of different IDs the final bag can contain after removing the allowed number of items.</p>\r\n<p>Complete the function <code>deleteProducts</code> in the editor below.</p>\r\n<p>The function is expected to return an <code>INTEGER</code>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>int ids_count</code>: The number of items in the <code>ids</code> array (referred to as <code>n</code> in constraints).</li>\r\n    <li><code>int* ids</code>: An array of integers representing the ID numbers of the items.</li>\r\n    <li><code>int m</code>: The maximum number of items that can be removed from the bag.</li>\r\n</ul>\r\n<p>The complete function signature is:</p>\r\n<pre><code class='language-text'>int deleteProducts(int ids_count, int* ids, int m)</code></pre>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the minimum number of different IDs the final bag can contain.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: ids = [1,1,1,2,2,3], m = 2\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The bag contains <code>n = 6</code> items with <code>ids = [1,1,1,2,2,3]</code>, and <code>m = 2</code> items can be removed. If two items of type 1 are removed, all three types remain. It is better to remove either two items of type 2 or one item each of types 2 and 3. Either choice leaves two types: <code>ids = [1,1,1,3]</code> or <code>ids = [1,1,2]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 100000</code></li>\r\n    <li><code>1 <= ids[i] <= 1000000</code></li>\r\n    <li><code>1 <= m <= 100000</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Linkdin_2feb",
        "company_id": 185
    },
    {
        "id": 554,
        "title": "Closest Color",
        "problem_statement": "<h1>Closest Color</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A pixel color RGB is defined as a 24 bit integer. Each 8 bit integer (1 byte) represents either red, green or blue color. Each 8 bit integer has an integer value between 0 (Low intensity) and 255 (High intensity).</p>\r\n\r\n<p>For the distance between two pixels having RGB values (r₁, g₁, b₁) and (r₂, g₂, b₂), it is calculated as follows:</p>\r\n<p>d = &radic;((r₁ - r₂)&sup2; + (g₁ - g₂)&sup2; + (b₁ - b₂)&sup2; )</p>\r\n\r\n<p>For reference, the RGB values for pure colors are defined as follows:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Pure Color</th>\r\n            <th>R</th>\r\n            <th>G</th>\r\n            <th>B</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>Black</td>\r\n            <td>0</td>\r\n            <td>0</td>\r\n            <td>0</td>\r\n        </tr>\r\n        <tr>\r\n            <td>White</td>\r\n            <td>255</td>\r\n            <td>255</td>\r\n            <td>255</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Red</td>\r\n            <td>255</td>\r\n            <td>0</td>\r\n            <td>0</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Green</td>\r\n            <td>0</td>\r\n            <td>255</td>\r\n            <td>0</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Blue</td>\r\n            <td>0</td>\r\n            <td>0</td>\r\n            <td>255</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<p>Given a 24-bit binary string describing a pixel, identify which of these five colors the pixel is closest to using the Euclidean distance calculation. Then return the closest pure color: Red, Green, Blue, Black, White. If there is more than one closest color, return Ambiguous.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>closestColor</code> in the editor below.</p>\r\n<p><code>closestColor</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string pixels[n]</code>: an array of 24-bit binary strings representing pixels as described</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>string[n]</code>: each element <code>i</code> represents the closest color for its associated <code>pixels[i]</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 1\r\npixels = [\"000000001111111100000110\"]\r\nOutput: Green</code></pre>\r\n<p><strong>Explanation:</strong> The pixel's RGB value is (0, 255, 6):</p>\r\n<ol>\r\n    <li>red = (00000000)₂ = (0)₁₀</li>\r\n    <li>green = (11111111)₂ = (255)₁₀</li>\r\n    <li>blue = (00000110)₂ = (6)₁₀</li>\r\n</ol>\r\n<p>Calculate its Euclidean distance to each color:</p>\r\n<p>Pure Black: d = ((0 - 0)&sup2; + (255 - 0)&sup2; + (6 - 0)&sup2;)&sup1;/&sup2; = 65861&sup1;/&sup2; &asymp; 255.0705785</p>\r\n<p>Pure White: d = ((0 - 255)&sup2; + (255 - 255)&sup2; + (6 - 255)&sup2;)&sup1;/&sup2; = 127026&sup1;/&sup2; &asymp; 356.4070706</p>\r\n<p>Pure Red: d = ((0 - 255)&sup2; + (255 - 0)&sup2; + (6 - 0)&sup2;)&sup1;/&sup2; = 130086&sup1;/&sup2; &asymp; 360.6743684</p>\r\n<p>Pure Green: d = ((0 - 0)&sup2; + (255 - 255)&sup2; + (6 - 0)&sup2;)&sup1;/&sup2; = 36&sup1;/&sup2; = 6</p>\r\n<p>Pure Blue: d = ((0 - 0)&sup2; + (255 - 0)&sup2; + (6 - 255)&sup2;)&sup1;/&sup2; = 127026&sup1;/&sup2; &asymp; 356.4070706</p>\r\n<p>The color with the smallest distance to the pixel is Pure Green, so the answer is Green.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 100</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Linkdin_2feb",
        "company_id": 185
    }
]