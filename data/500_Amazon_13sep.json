[
    {
        "id": 1419,
        "title": "Lexicographically Smallest Sequence",
        "problem_statement": "<h1>Lexicographically Smallest Sequence</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Data scientists at Amazon are working on a utility to generate data points based on their models on existing data points.</p>\r\n<p>A simple prototype takes in two integers, <code>n</code>, and <code>sequence_sum</code>, and generates a sequence of size <code>n</code> whose sum of elements equals <code>sequence_sum</code>, and the absolute values of the elements form a permutation of size <code>n</code>. The utility reports the lexicographically smallest such sequence.</p>\r\n<p>Given two integers, <code>n</code>, and <code>sequence_sum</code>, return the lexicographically smallest sequence of integers such that:</p>\r\n<ol>\r\n    <li>The sum of its elements equals <code>sequence_sum</code>.</li>\r\n    <li>The absolute values of its elements form a permutation of size <code>n</code>.</li>\r\n</ol>\r\n<p><strong>Note:</strong> A sequence of <code>n</code> integers is a permutation if it contains all integers from 1 to <code>n</code> exactly once. For example, <code>[1, 2, 3, 4, 5]</code> is a permutation but <code>[2, 2, 3, 4, 5]</code> is not. When the problem states \"absolute values of its elements form a permutation of size <code>n</code>\", it means that the set of absolute values of the sequence elements must be <code>{1, 2, ..., n}</code>.</p>\r\n<p>A sequence <code>x</code> is lexicographically smaller than a sequence <code>y</code> if, at the first index <code>i</code> where <code>x[i]</code> and <code>y[i]</code> differ, <code>x[i] < y[i]</code>.</p>\r\n<p>Consider <code>n = 5</code> and <code>sequence_sum = 9</code>. Some sequences of size <code>n = 5</code> with <code>sequence_sum = 9</code> are:</p>\r\n<pre><code class='language-text'>Sequence             Sum\r\n[-1, -2, 3, 4, 5]    9\r\n[-2, -1, 3, 4, 5]    9\r\n[-3, 1, 2, 4, 5]     9\r\n[3, 4, 5, -2, -1]    9</code></pre>\r\n<p>Comparing <code>[-3, 1, 2, 4, 5]</code> and <code>[-2, 3, 1, 4, 5]</code>:\r\nThe first index where they differ is 0. Since <code>-3 < -2</code>, <code>[-3, 1, 2, 4, 5]</code> is lexicographically smaller than <code>[-2, 3, 1, 4, 5]</code>.\r\nThe lexicographically smallest sequence with the given sum is <code>[-3, 1, 2, 4, 5]</code>.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getSmallestSequence</code> in the editor below.</p>\r\n<p><code>getSmallestSequence</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of elements in the sequence</li>\r\n    <li><code>long sequence_sum</code>: the sum of elements in the sequence</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>List<Integer></code>: the lexicographically smallest sequence of <code>n</code> integers following that meets the criteria. If it is not possible, return a <code>List<Integer></code> of size <code>n</code>, filled with zeros.</li>\r\n</ul>\r\n<pre><code class='language-javascript'>public static List<Integer> getSmallestSequence(int n, long sequence_sum) {\r\n    // Write your code here\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4, sequence_sum = -2\r\nOutput: [-4, -2, -1, 3]</code></pre>\r\n<p><strong>Explanation:</strong> Here <code>n = 4</code> and <code>sequence_sum = -2</code>. Possible sequences with <code>n = 4</code> and <code>sequence_sum = -2</code> which also form a permutation, when absolute values of elements are taken, are <code>[-1, -2, -3, 4]</code>, <code>[3, -2, -1, -4]</code>, <code>[-4, -2, -1, 3]</code> etc. Among these, <code>[-4, -2, -1, 3]</code> is the lexicographically smallest.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, sequence_sum = 5\r\nOutput: [0, 0, 0]</code></pre>\r\n<p><strong>Explanation:</strong> There is no possible sequence with <code>n = 3</code> and <code>sequence_sum = 5</code> whose absolute values of elements also form a permutation of size 3. Therefore, a list of three zeros is returned.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>-6 * 10^9 <= sequence_sum <= 6 * 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_13sep",
        "company_id": 500
    },
    {
        "id": 1420,
        "title": "Minimum Errors in Binary String",
        "problem_statement": "<h1>Minimum Errors in Binary String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon's database doesn't support very large numbers, and hence, numbers are stored as a string of binary characters, 'O' and 'I'. Accidentally, a 'T' was entered in some positions, and it is unknown whether they should be 'O' or 'I'.</p>\r\n<p>The string of incorrect data consists of the characters 'O', 'I', and 'T', where 'T' represents an unknown character. The 'T' can be replaced with either 'O' or 'I'. Due to some internal faults, errors are generated every time the characters 'O' and 'I' appear together as 'OI' or 'IO' in any subsequence of the string. It is observed that the number of errors a subsequence 'OI' generates is x, while a subsequence 'IO' generates y errors.</p>\r\n<p>Determine the minimum total errors generated. Since the answer can be very large, return it modulo 10<sup>9</sup> + 7.</p>\r\n<p>The minimum number of errors is minE, % MOD (10<sup>9</sup> + 7).</p>\r\n<p><strong>Hint:</strong> It can be proved that (a + b) % c = ((a % c) + (b % c)) % c where a, b, and c are integers and % represents the modulo operation.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getMinErrors</code> in the editor below.</p>\r\n<p>The function accepts following parameters:</p>\r\n<ul>\r\n    <li><strong>STRING</strong> <code>errorString</code>: a string of characters 'O', 'I', and 'T'</li>\r\n    <li><strong>INTEGER</strong> <code>x</code>: the number of errors generated for every occurrence of subsequence 'OI'</li>\r\n    <li><strong>INTEGER</strong> <code>y</code>: the number of errors generated for every occurrence of subsequence 'IO'</li>\r\n</ul>\r\n\r\n<p>The provided Java starter code is:</p>\r\n<pre><code class='language-java'>import java.io.*;\r\nimport java.util.*;\r\nimport java.util.stream.*;\r\nimport static java.util.stream.Collectors.toList;\r\n\r\nclass Result {\r\n\r\n    /*\r\n     * Complete the 'getMinErrors' function below.\r\n     *\r\n     * The function is expected to return an INTEGER.\r\n     * The function accepts following parameters:\r\n     *  1. STRING errorString\r\n     *  2. INTEGER x\r\n     *  3. INTEGER y\r\n     */\r\n\r\n    public static long MOD = 1_000_000_007L;\r\n\r\n    public static int getMinErrors(String errorString, int x, int y) {\r\n        // Write your code here\r\n    }\r\n\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: errorString = \"O!I!I1\", x = 2, y = 3\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> The problem involves replacing 'T' (or other unknown characters in the sample input) with 'O' or 'I' to minimize errors. The 'Possible String' column in the detailed explanation implicitly uses '0' for 'O' and '1' for 'I' for brevity. The total errors for each possible string are calculated as <code>(Count of OI * x) + (Count of IO * y)</code>.</p>\r\n<p>Let's consider a few possibilities from the full explanation (assuming '0' is 'O' and '1' is 'I'):</p>\r\n<ul>\r\n    <li>For the string <code>OOOIOI</code> (represented as <code>000101</code>):\r\n        <ul>\r\n            <li>Count of OI = 7</li>\r\n            <li>Count of IO = 1</li>\r\n            <li>Errors = (7 * 2) + (1 * 3) = 14 + 3 = 17</li>\r\n        </ul>\r\n    </li>\r\n    <li>For the string <code>OOOIII</code> (represented as <code>000111</code>):\r\n        <ul>\r\n            <li>Count of OI = 9</li>\r\n            <li>Count of IO = 0</li>\r\n            <li>Errors = (9 * 2) + (0 * 3) = 18 + 0 = 18</li>\r\n        </ul>\r\n    </li>\r\n    <li>For the string <code>OIOIOI</code> (represented as <code>010101</code>):\r\n        <ul>\r\n            <li>Count of OI = 3</li>\r\n            <li>Count of IO = 6</li>\r\n            <li>Errors = (3 * 2) + (6 * 3) = 6 + 18 = 24</li>\r\n        </ul>\r\n    </li>\r\n    <li>For the string <code>OIIOII</code> (represented as <code>011011</code>):\r\n        <ul>\r\n            <li>Count of OI = 5</li>\r\n            <li>Count of IO = 3</li>\r\n            <li>Errors = (5 * 2) + (3 * 3) = 10 + 9 = 19</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>After evaluating all possibilities, the minimum number of errors found is 10.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: errorString = \"!!!!\", x = 23, y = 47\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> There is a tie for the best string generated, <code>OOOOO</code> or <code>IIIII</code>, with zero subsequences 'OI' or 'IO'.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= len(errorString) &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>0 &lt;= x, y &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>s consists only of characters 'O', 'I', and 'T'</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_13sep",
        "company_id": 500
    },
    {
        "id": 1421,
        "title": "Minimum Drone Delivery Time",
        "problem_statement": "<h1>Minimum Drone Delivery Time</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Amazon operates two delivery drones, each tasked with completing a specific number of deliveries.</p>\r\n<ul>\r\n    <li>Drone 1 must complete <code>delivery1</code> deliveries.</li>\r\n    <li>Drone 2 must complete <code>delivery2</code> deliveries.</li>\r\n    <li>Each delivery takes exactly 1 hour to complete.</li>\r\n</ul>\r\n<p>To maintain optimal drone health, both drones require charging at specific intervals:</p>\r\n<ul>\r\n    <li>Drone 1 must charge every <code>charge1</code> hours. Specifically, at hours which are multiples of <code>charge1</code>.</li>\r\n    <li>Drone 2 must charge every <code>charge2</code> hours. Specifically, at hours which are multiples of <code>charge2</code>.</li>\r\n</ul>\r\n<p>Both drones can charge simultaneously, and the charging sessions must occur at the exact specified intervals. Due to high drone traffic in the area, only one drone can be out for delivery at any given hour.</p>\r\n<p>Given integers <code>delivery1</code>, <code>delivery2</code>, <code>charge1</code>, and <code>charge2</code>, determine the minimum total time required for both drones to complete all their deliveries while adhering to the delivery and charging constraints.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>minDeliveryTime</code> in the editor below.</p>\r\n<p><code>minDeliveryTime</code> takes the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int charge1</code>: indicates that Drone 1 needs to charge at hours which are multiples of <code>charge1</code>.</li>\r\n    <li><code>int delivery1</code>: the number of deliveries to be made by Drone 1.</li>\r\n    <li><code>int charge2</code>: indicates that Drone 2 needs to charge at hours which are multiples of <code>charge2</code>.</li>\r\n    <li><code>int delivery2</code>: the number of deliveries to be made by Drone 2.</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the minimum total time (in hours) required to complete all the deliveries by the drones.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: delivery1 = 3, delivery2 = 1, charge1 = 2, charge2 = 3\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Drone 1 is out for delivery on hours 1, 3, 5. It charges on hours 2 and 4 (multiples of <code>charge1 = 2</code>).</li>\r\n    <li>Drone 2 is out for delivery on hour 2. It was scheduled to charge on hour 3 (multiples of <code>charge2 = 3</code>), but since it completed its delivery by hour 2, it does not need to charge.</li>\r\n</ul>\r\n<p>Note that only one drone is out for delivery at any given hour. The minimum time required is 5 hours.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: charge1 = 2, delivery1 = 1, charge2 = 2, delivery2 = 3\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> The minimum total time will be 7 hours: Drone 1 is out for delivery at hour 1, while Drone 2 is out for delivery at hours 3, 5, and 7.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: charge1 = 3, delivery1 = 2, charge2 = 4, delivery2 = 1\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The minimum time required is 3 hours; Drone 1 is out for delivery at hours 1 and 2, while Drone 2 is out for delivery at hour 3.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &le; charge1, charge2 &le; 3 * 10<sup>4</sup></code></li>\r\n    <li><code>1 &le; delivery1, delivery2 &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_13sep",
        "company_id": 500
    },
    {
        "id": 1422,
        "title": "Retrieve Missing Data",
        "problem_statement": "<h1>Retrieve Missing Data</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The Data Science Team at Amazon is facing a unique challenge. A portion of their data has gone missing from their database. However, they believe they can recover the lost data based on the following information:</p>\r\n<ol>\r\n    <li>The missing data is a permutation of the characters found in the string <code>firstInfo</code>.</li>\r\n    <li>The missing data is lexicographically greater than the string <code>secondInfo</code>.</li>\r\n    <li>The missing data is the lexicographically smallest string that satisfies the above two conditions.</li>\r\n</ol>\r\n<p>In other words, they are searching for the smallest string that meets these criteria.</p>\r\n<p>A string x is lexicographically smaller than a string y if:</p>\r\n<ul>\r\n    <li><code>x[i] &lt; y[i]</code> at the first position where x and y differ, or</li>\r\n    <li><code>|x| &lt; |y|</code> and x is a prefix of y (where <code>|x|</code> denotes the length of string x).</li>\r\n</ul>\r\n<p>Given two strings, <code>firstInfo</code> and <code>secondInfo</code>, find the missing data that matches the above criteria. If no such string exists, return \"-1\".</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aca\", secondInfo = \"aba\"\r\nOutput: \"aca\"</code></pre>\r\n<p><strong>Explanation:</strong> The data that satisfies the given conditions is either \"aca\" or \"caa\". Both options are valid permutations of <code>firstInfo</code> and are lexicographically greater than <code>secondInfo</code>. Since the goal is to retrieve the lexicographically smallest piece of missing data, \"aca\" is the correct result.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aac\", secondInfo = \"aa\"\r\nOutput: \"aac\"</code></pre>\r\n<p><strong>Explanation:</strong> The possible pieces of missing data that satisfy the conditions are \"aac\", \"aca\", and \"caa\". Since \"aac\" is the lexicographically smallest, it is the most suitable piece of data to retrieve.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"abc\", secondInfo = \"defg\"\r\nOutput: \"-1\"</code></pre>\r\n<p><strong>Explanation:</strong> It can be observed that no permutation of the missing data from <code>firstInfo = \"abc\"</code> would be lexicographically greater than <code>secondInfo = \"defg\"</code>. Therefore, no valid data can be retrieved.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |firstInfo|, |secondInfo| &lt;= 5000</code></li>\r\n    <li><code>firstInfo</code> and <code>secondInfo</code> consist of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_13sep",
        "company_id": 500
    }
]