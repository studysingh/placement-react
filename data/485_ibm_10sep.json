[
    {
        "id": 1389,
        "title": "Minimum Special Subsequences",
        "problem_statement": "<h1>Minimum Special Subsequences</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A binary string needs to be transmitted between two servers. According to a network control protocol, data can only be sent in the form of 'special strings', i.e., binary strings where no two adjacent characters are the same.</p>\r\n<p>Any data to be transmitted must first be broken into one or more subsequences that are special strings, with each special string sent as a separate data packet.</p>\r\n<p>Find the minimum number of data packets required to send a given binary string.</p>\r\n<p><strong>Note:</strong> A subsequence is obtained by deleting some characters from the original string while maintaining the order of the remaining characters.</p>\r\n<p>Complete the function <code>getMinSubsequences</code> in the editor with the following parameter:</p>\r\n<p><code>string input_str: a binary string</code></p>\r\n<p><strong>Returns:</strong><br>\r\n<code>int: the minimum number of subsequences that the string can be broken into</code></p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: input_str = \"00100\"\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> This string can be broken into three special subsequences:</p>\r\n<ul>\r\n    <li>\"0\" (first character)</li>\r\n    <li>\"010\" (second, third, and fourth characters)</li>\r\n    <li>\"0\" (last character)</li>\r\n</ul>\r\n<p>This is the minimum number of subsequences possible, so the output is 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: input_str = \"1101\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The string can be broken into two valid subsequences \"1\" and \"101\".</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: input_str = \"11001010\"\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The two subsequences are \"1010\" and \"10\".</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= length of input_str &lt;= 10^5</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_10sep",
        "company_id": 485
    },
    {
        "id": 1390,
        "title": "Network Recovery",
        "problem_statement": "<h1>Network Recovery</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your team manages a distributed system of <code>network_nodes</code>. A major incident occurs, and the primary server with ID <code>company</code> begins recovery operations.</p>\r\n<p>Each node is connected via bidirectional links. Due to the incident, many systems are offline, and your goal is to bring systems back up in a specific order based on the following rules:</p>\r\n<ol>\r\n<li>Start from the main node (<code>company</code>); it is already online.</li>\r\n<li>Bring systems back up in order of proximity (shortest number of hops from <code>company</code>).</li>\r\n<li>If multiple systems are equally distant, recover the one with the lower node number first.</li>\r\n<li>Ignore isolated nodes â€” if a system is unreachable, it cannot be recovered yet.</li>\r\n</ol>\r\n<p>The function <code>recoverNetwork</code> takes the following four inputs:</p>\r\n<ul>\r\n<li><code>int network_nodes</code>: the number of nodes in the network</li>\r\n<li><code>int network_from[]</code>: the first node where there is a bidirectional edge</li>\r\n<li><code>int network_to[]</code>: the second node where there is a bidirectional edge</li>\r\n<li><code>int company</code>: the node from which the recovery starts</li>\r\n</ul>\r\n<p>Implement a function that returns an array of node numbers in the order they should be recovered, excluding the starting node itself.</p>\r\n\r\n<h3>Input Specification</h3>\r\n<p>The first line contains two space-separated integers: <code>network_nodes</code>, denoting the number of nodes and <code>n</code>, the number of bidirectional edges.</p>\r\n<p>Each line <code>i</code> of the <code>n</code> subsequent lines (where <code>0 <= i < n</code>) contains two space-separated integers, <code>network_from[i]</code> and <code>network_to[i]</code>.</p>\r\n<p>The last line contains an integer <code>company</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nnetwork_nodes = 4\r\nnetwork_from = [1, 2, 2]\r\nnetwork_to = [2, 3, 4]\r\ncompany = 1\r\nOutput: [2,3,4]</code></pre>\r\n<p><strong>Explanation:</strong> The company is located in node 1, and the edges are between nodes 1 and 2, nodes 2 and 3, and nodes 2 and 4. The network can be visualized as:</p>\r\n<p>\r\n    <img src=\"https://i.imgur.com/example1_graph.png\" alt=\"Graph showing node 1 connected to 2, 2 connected to 3 and 4.\">\r\n</p>\r\n<p>In this case, the nodes are visited based on the following logic:</p>\r\n<ul>\r\n<li>The closest node, node 2, is visited first. It is 1 unit away.</li>\r\n<li>The next-closest nodes are visited next. Node 3 and Node 4 are both 2 units distance.\r\n    <ul>\r\n    <li>In this case, the lower-numbered node is prioritized: visit node 3 first, then node 4.</li>\r\n    </ul>\r\n</li>\r\n</ul>\r\n<p>The answer is [2, 3, 4].</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nnetwork_nodes = 5, n = 5\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n1 5\r\ncompany = 1\r\nOutput: [2, 3, 5, 4]</code></pre>\r\n<p><strong>Explanation:</strong> The network can be visualized as:</p>\r\n<p>\r\n    <img src=\"https://i.imgur.com/example2_graph.png\" alt=\"Graph showing nodes 1-5 with connections.\">\r\n</p>\r\n<p>Nodes 2, 3, and 5 are all 1 unit of distance away from the company (node 1). These are visited based on priority in ascending order, so [2, 3, 5] is visited next. Node 4 is 2 units of distance from node 1 (via node 2), so it is visited next.</p>\r\n<p>The final order is [2, 3, 5, 4].</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\nnetwork_nodes = 3, n = 1\r\n1 2\r\ncompany = 2\r\nOutput: [1]</code></pre>\r\n<p><strong>Explanation:</strong> The network can be visualized as:</p>\r\n<p>\r\n    <img src=\"https://i.imgur.com/example3_graph.png\" alt=\"Graph showing nodes 1 and 2 connected, node 3 isolated.\">\r\n</p>\r\n<p>Node 1 is 1 unit of distance from the company (node 2). Node 3 is not accessible because there are no edges connecting it to the company's node. Therefore, the answer is [1].</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>2 <= network_nodes <= 10^5</code></li>\r\n<li><code>1 <= n <= min(network_nodes * (network_nodes - 1) / 2, 10^5)</code></li>\r\n<li><code>1 <= network_from[i], network_to[i], company <= network_nodes</code></li>\r\n<li><code>network_from[i] != network_to[i]</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_10sep",
        "company_id": 485
    },
    {
        "id": 1391,
        "title": "Detect High Load Windows",
        "problem_statement": "<h1>Detect High Load Windows</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Identify time periods when a system experiences high load based on a rolling average calculation. For each minute in the monitoring period, calculate the average load over the most recent window of minutes. If this average exceeds the specified threshold, include that minute in your results.</p>\r\n\r\n<p>The function <code>detectHighLoadWindows</code> will take three inputs:</p>\r\n<ul>\r\n    <li><code>int loads[]</code>: system load at each minute (0-based)</li>\r\n    <li><code>int windowSize</code>: size of the rolling window in minutes</li>\r\n    <li><code>int threshold</code>: average load threshold to compare against</li>\r\n</ul>\r\n<p>The function returns a sorted array of minute indices where high load was detected, or an empty array if no such minutes exist.</p>\r\n\r\n<p>The function signature is provided below:</p>\r\n<pre><code class='language-javascript'>vector<int> detectHighLoadWindows(vector<int> loads, int windowSize, int threshold)</code></pre>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>The first line contains an integer, <code>n</code>, the size of the array <code>loads</code>.</p>\r\n<p>The next <code>n</code> lines contain an integer, <code>loads[i]</code>.</p>\r\n<p>The next line contains an integer, <code>windowSize</code>.</p>\r\n<p>The last line contains an integer, <code>threshold</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nloads = [8, 14, 5, 17]\r\nwindowSize = 2\r\nthreshold = 10\r\nOutput: [1, 3]</code></pre>\r\n<p><strong>Explanation:</strong> We consider all possible windows of size <code>windowSize = 2</code>.</p>\r\n<ul>\r\n    <li><strong>Window Range [0, 1]:</strong> (minutes 0 and 1)\r\n        <ul>\r\n            <li>Loads: <code>loads[0]=8</code>, <code>loads[1]=14</code></li>\r\n            <li>Average Load: <code>(8 + 14) / 2 = 11</code></li>\r\n            <li>Is <code>11 > 10</code>? <strong>Yes</strong>. Include minute index 1.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Window Range [1, 2]:</strong> (minutes 1 and 2)\r\n        <ul>\r\n            <li>Loads: <code>loads[1]=14</code>, <code>loads[2]=5</code></li>\r\n            <li>Average Load: <code>(14 + 5) / 2 = 9.5</code></li>\r\n            <li>Is <code>9.5 > 10</code>? <strong>No</strong>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Window Range [2, 3]:</strong> (minutes 2 and 3)\r\n        <ul>\r\n            <li>Loads: <code>loads[2]=5</code>, <code>loads[3]=17</code></li>\r\n            <li>Average Load: <code>(5 + 17) / 2 = 11</code></li>\r\n            <li>Is <code>11 > 10</code>? <strong>Yes</strong>. Include minute index 3.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Minutes before <code>windowSize - 1</code> (i.e., minute 0 for <code>windowSize = 2</code>) do not have a full window available, so they are skipped as starting points for a window. The resulting sorted array of minute indices is <code>[1, 3]</code>.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nloads = [5, 1, 3]\r\nwindowSize = 2\r\nthreshold = 2\r\nOutput: [1]</code></pre>\r\n<p><strong>Explanation:</strong> We consider all possible windows of size <code>windowSize = 2</code>.</p>\r\n<ul>\r\n    <li><strong>Window Range [0, 1]:</strong> (minutes 0 and 1)\r\n        <ul>\r\n            <li>Loads: <code>loads[0]=5</code>, <code>loads[1]=1</code></li>\r\n            <li>Average Load: <code>(5 + 1) / 2 = 3</code></li>\r\n            <li>Is <code>3 > 2</code>? <strong>Yes</strong>. Include minute index 1.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Window Range [1, 2]:</strong> (minutes 1 and 2)\r\n        <ul>\r\n            <li>Loads: <code>loads[1]=1</code>, <code>loads[2]=3</code></li>\r\n            <li>Average Load: <code>(1 + 3) / 2 = 2</code></li>\r\n            <li>Is <code>2 > 2</code>? <strong>No</strong>.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Hence, the answer is <code>[1]</code>.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nloads = [1, 10, 7, 1, 10]\r\nwindowSize = 3\r\nthreshold = 5\r\nOutput: [2, 3, 4]</code></pre>\r\n<p><strong>Explanation:</strong> We consider all possible windows of size <code>windowSize = 3</code>.</p>\r\n<ul>\r\n    <li><strong>Window Range [0, 2]:</strong> (minutes 0, 1, and 2)\r\n        <ul>\r\n            <li>Loads: <code>loads[0]=1</code>, <code>loads[1]=10</code>, <code>loads[2]=7</code></li>\r\n            <li>Average Load: <code>(1 + 10 + 7) / 3 = 6</code></li>\r\n            <li>Is <code>6 > 5</code>? <strong>Yes</strong>. Include minute index 2.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Window Range [1, 3]:</strong> (minutes 1, 2, and 3)\r\n        <ul>\r\n            <li>Loads: <code>loads[1]=10</code>, <code>loads[2]=7</code>, <code>loads[3]=1</code></li>\r\n            <li>Average Load: <code>(10 + 7 + 1) / 3 = 6</code></li>\r\n            <li>Is <code>6 > 5</code>? <strong>Yes</strong>. Include minute index 3.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Window Range [2, 4]:</strong> (minutes 2, 3, and 4)\r\n        <ul>\r\n            <li>Loads: <code>loads[2]=7</code>, <code>loads[3]=1</code>, <code>loads[4]=10</code></li>\r\n            <li>Average Load: <code>(7 + 1 + 10) / 3 = 6</code></li>\r\n            <li>Is <code>6 > 5</code>? <strong>Yes</strong>. Include minute index 4.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Hence, the answer is <code>[2, 3, 4]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= windowSize <= n</code></li>\r\n    <li><code>1 <= loads[i], threshold <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_10sep",
        "company_id": 485
    },
    {
        "id": 1392,
        "title": "Largest Repackaged Packet",
        "problem_statement": "<h1>Largest Repackaged Packet</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A stream of packets arrives at a video player that can only play packets of size 2<sup>n</sup> units (where n is a non-negative integer). All packets are repackaged to the largest possible value of 2<sup>n</sup> units. Any remaining units from a packet are added to the next arriving packet before it is repackaged.</p>\r\n<p>Given an array of arriving packet sizes, find the size of the largest repackaged packet.</p>\r\n\r\n<h3>Function Signature:</h3>\r\n<pre><code class='language-cpp'>long largestRepackaged(vector&lt;int&gt; arrivingPackets) {\r\n    // Complete the function\r\n}</code></pre>\r\n<p>The function is expected to return a LONG_INTEGER. The function accepts INTEGER_ARRAY arrivingPackets as parameter.</p>\r\n\r\n<h3>Input Format:</h3>\r\n<p>The first line contains an integer, <code>n</code>, the size of <code>arrivingPackets[]</code>.</p>\r\n<p>Each line <code>i</code> of the <code>n</code> subsequent lines (where <code>0 &le; i &lt; n</code>) contains an integer, <code>arrivingPackets[i]</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arrivingPackets = [13, 25, 12, 2, 8]\r\nOutput: 16</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>First packet (13 units):</strong> Current total = 13. The largest 2<sup>n</sup> &le; 13 is 2<sup>3</sup> = 8. Repackaged size = 8. Remaining = 13 - 8 = 5.</li>\r\n    <li><strong>Second packet (25 units):</strong> Current total = 25 (new packet) + 5 (previous remainder) = 30. The largest 2<sup>n</sup> &le; 30 is 2<sup>4</sup> = 16. Repackaged size = 16. Remaining = 30 - 16 = 14.</li>\r\n    <li><strong>Third packet (12 units):</strong> Current total = 12 (new packet) + 14 (previous remainder) = 26. The largest 2<sup>n</sup> &le; 26 is 2<sup>4</sup> = 16. Repackaged size = 16. Remaining = 26 - 16 = 10.</li>\r\n    <li><strong>Fourth packet (2 units):</strong> Current total = 2 (new packet) + 10 (previous remainder) = 12. The largest 2<sup>n</sup> &le; 12 is 2<sup>3</sup> = 8. Repackaged size = 8. Remaining = 12 - 8 = 4.</li>\r\n    <li><strong>Fifth packet (8 units):</strong> Current total = 8 (new packet) + 4 (previous remainder) = 12. The largest 2<sup>n</sup> &le; 12 is 2<sup>3</sup> = 8. Repackaged size = 8. Remaining = 12 - 8 = 4.</li>\r\n</ul>\r\n<p>The largest repackaged packet size observed is 16 units.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\n4\r\n5\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Let's trace the process:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Previous Remainder</th>\r\n            <th>Incoming Packet</th>\r\n            <th>Total Units</th>\r\n            <th>Repackaged Size (2<sup>n</sup>)</th>\r\n            <th>New Remainder</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>0</td>\r\n            <td>3</td>\r\n            <td>3</td>\r\n            <td>2<sup>1</sup> = 2</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>1</td>\r\n            <td>4</td>\r\n            <td>5</td>\r\n            <td>2<sup>2</sup> = 4</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>1</td>\r\n            <td>5</td>\r\n            <td>6</td>\r\n            <td>2<sup>2</sup> = 4</td>\r\n            <td>2</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>The largest repackaged packet size observed is 4.</p>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1\r\n2\r\n4\r\n7\r\n5\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Let's trace the process:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Previous Remainder</th>\r\n            <th>Incoming Packet</th>\r\n            <th>Total Units</th>\r\n            <th>Repackaged Size (2<sup>n</sup>)</th>\r\n            <th>New Remainder</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>0</td>\r\n            <td>1</td>\r\n            <td>1</td>\r\n            <td>2<sup>0</sup> = 1</td>\r\n            <td>0</td>\r\n        </tr>\r\n        <tr>\r\n            <td>0</td>\r\n            <td>2</td>\r\n            <td>2</td>\r\n            <td>2<sup>1</sup> = 2</td>\r\n            <td>0</td>\r\n        </tr>\r\n        <tr>\r\n            <td>0</td>\r\n            <td>4</td>\r\n            <td>4</td>\r\n            <td>2<sup>2</sup> = 4</td>\r\n            <td>0</td>\r\n        </tr>\r\n        <tr>\r\n            <td>0</td>\r\n            <td>7</td>\r\n            <td>7</td>\r\n            <td>2<sup>2</sup> = 4</td>\r\n            ",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_10sep",
        "company_id": 485
    },
    {
        "id": 1393,
        "title": "Find Maximum Bandwidth",
        "problem_statement": "<h1>Find Maximum Bandwidth</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A service provider manages n API endpoints, each serving different functionalities, numbered from 1 to n. Given m bandwidth units, allocate these among the endpoints.</p>\r\n<p>The objective is to maximize the bandwidth allocated to the k<sup>th</sup> endpoint while meeting the following conditions:</p>\r\n<ul>\r\n    <li>All bandwidth units must be allocated.</li>\r\n    <li>Each endpoint must have at least 1 unit of bandwidth allocated.</li>\r\n    <li>The absolute difference in bandwidth between any two adjacent endpoints cannot exceed 1.</li>\r\n</ul>\r\n<p>Return the maximum possible bandwidth that can be allocated to the k<sup>th</sup> endpoint while satisfying all conditions.</p>\r\n\r\n<p>Complete the function <code>findMaximumBandwidths</code> in the editor. The function accepts the following parameters:</p>\r\n<pre><code class='language-javascript'>int findMaximumBandwidths(int n, int k, int m)</code></pre>\r\n\r\n<h3>Parameters:</h3>\r\n<ul>\r\n    <li><code>int n</code>: the number of API endpoints</li>\r\n    <li><code>int k</code>: the endpoint number for which bandwidth is to be maximized</li>\r\n    <li><code>int m</code>: the total bandwidth to distribute among the endpoints</li>\r\n</ul>\r\n\r\n<h3>Returns</h3>\r\n<p><code>int</code>: the maximum units of bandwidth that can be allocated to the k<sup>th</sup> endpoint</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 6, k = 2, m = 11\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One optimal way to distribute 11 units of bandwidth among the 6 endpoints is 3, 3, 2, 1, 1, 1. Here, the 2nd endpoint is allocated 3 bandwidth allocations.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 5, k = 3, m = 14\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> One way to distribute the bandwidth among the 5 endpoints is: 2, 3, 4, 3, 2. Here, the 3rd endpoint is allocated 4 bandwidth allocations.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>9</sup></code></li>\r\n    <li><code>1 &le; k &le; n</code></li>\r\n    <li><code>n &le; m &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "ibm_10sep",
        "company_id": 485
    }
]