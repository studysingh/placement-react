[
    {
        "id": 1532,
        "title": "Collect Maximum Coins",
        "problem_statement": "<h1>Collect Maximum Coins</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a new online game, players navigate a 2 x n matrix. Each cell (r, c) initially contains a certain number of coins. The number of coins in a cell changes over time - at time t, the cell at position (r, c) contains (r + 1) * (c + 1) * t coins.</p>\r\n<p>A player must:</p>\r\n<ul>\r\n    <li>Start from position (0, 0) at time t = 0</li>\r\n    <li>Move to a neighboring cell in one unit of time</li>\r\n    <li>Visit each cell exactly once</li>\r\n    <li>Collect all coins in visited cells</li>\r\n</ul>\r\n<p>Determine the maximum number of coins a player can collect.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the <code>getMaxCoins</code> function in the editor, with the following parameter(s):</p>\r\n<pre><code class='language-c'>long getMaxCoins(int coins_rows, int coins_columns, int** coins)</code></pre>\r\n<ul>\r\n    <li><code>coins_rows</code>: number of rows (always 2)</li>\r\n    <li><code>coins_columns</code>: number of columns (n)</li>\r\n    <li><code>coins[2][2]</code>: the initial number of coins in the matrix.</li>\r\n</ul>\r\n\r\n<h2>Returns</h2>\r\n<p>long: the maximum number of coins that can be collected.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>n = 4</p>\r\n<p>coins = [[1, 4, 3, 2], [2, 1, 3, 2]]</p>\r\n<p>The optimal path</p>\r\n<pre><code class='language-text'>Time | Cell   | Coins\r\n-----|--------|-------\r\n0    | (0, 0) | 0\r\n1    | (1, 0) | 1 * 2 = 2\r\n2    | (1, 1) | 2 * 1 = 2\r\n3    | (1, 2) | 3 * 3 = 9\r\n4    | (1, 3) | 4 * 2 = 8\r\n5    | (0, 3) | 5 * 2 = 10\r\n6    | (0, 2) | 6 * 3 = 18\r\n7    | (0, 1) | 7 * 4 = 28</code></pre>\r\n<p>The sum of coins collected is 0 + 2 + 2 + 9 + 8 + 10 + 18 + 28 = 77.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= coins[i][j] &lt;= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Sample Input/Output</h2>\r\n<h3>Sample Case 0:</h3>\r\n<p><strong>Input Format for Custom Testing</strong></p>\r\n<pre><code class='language-text'>STDIN   FUNCTION\r\n2       mat[][] size n\r\n2       mat[][] size n\r\n1 3     mat = [[1, 3],\r\n4 2      [4, 2]]</code></pre>\r\n<p><strong>Sample Output:</strong></p>\r\n<pre><code class='language-text'>19</code></pre>\r\n<p><strong>Explanation:</strong> The optimal path is (0,0) to (0,1), (1,1) to (1,0). The number of coins collected is 0 * 1 + 1 * 3 + 2 * 2 + 3 * 4 = 19.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "sapient_27sep",
        "company_id": 536
    },
    {
        "id": 1533,
        "title": "Maximum Segment Profit",
        "problem_statement": "<h1>Maximum Segment Profit</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You need to analyze the performance of investments in a stock. The profit and loss (P&L) for each month is represented by an integer, where each value indicates the profit earned (positive value) or loss incurred (negative value) in that month.</p>\r\n<p>Your task is to find the maximum net profit that can be gained from any contiguous segment of months, with the constraint that the segment cannot exceed a given number of months <code>k</code>.</p>\r\n\r\n<p>Complete the function <code>getMaxProfit</code> in the editor below.</p>\r\n<p>The function <code>getMaxProfit</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int pnl_count</code>: the number of monthly profit and loss values (<code>n</code>)</li>\r\n    <li><code>int pnl[]</code>: an array of integers representing monthly profit and loss values</li>\r\n    <li><code>int k</code>: maximum number of months to consider</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>long</code>: the sum of a contiguous subarray of size <code>k</code> or less that has the largest sum.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 7\r\npnl = [4, 3, -2, 9, -4, 2, 7]\r\nk = 6\r\nOutput: 15</code></pre>\r\n<p><strong>Explanation:</strong> We can select the subarray <code>[3, -2, 9, -4, 2, 7]</code> with a sum of 15 and size 6, which is equal to <code>k</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 8\r\npnl = [2, 5, -7, 8, -6, 4, 3, -9]\r\nk = 5\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> We can select the subarray <code>[2, 5, -7, 8]</code> with a sum of 8 and size 4, which is less than <code>k</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10^5</code></li>\r\n    <li><code>-10^9 &lt;= pnl[i] &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= k &lt;= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "sapient_27sep",
        "company_id": 536
    }
]