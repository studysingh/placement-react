[
    {
        "id": 1026,
        "title": "Unique Paths",
        "problem_statement": "<h1>Unique Paths</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A robot needs to navigate a factory floor. The factory floor is represented as a grid with 'm' rows and 'n' columns. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner to complete its task. The robot can only move in two directions: right (to the adjacent cell on the right) or down (to the adjacent cell below). Before deciding which path to take to reach its destination, the robot needs to determine how many unique paths are available. Can you help the robot?</p>\r\n<p>Given the dimensions of the factory floor with m rows and n columns, write a program to calculate the number of unique paths the robot can take from the top-left corner to the bottom-right corner.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input will have an integer m representing the number of rows in the factory floor grid.</p>\r\n<p>The second line of input will have an integer n representing the number of columns in the factory floor grid.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>A single line of output should contain an integer representing the number of possible paths the robot can take from the top-left corner to the bottom-right corner.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n3\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> Here m=2 (number of rows) and n=3 (number of columns). For a 2x3 grid, there are exactly 3 unique paths from the top-left corner to the bottom-right corner.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3\r\nOutput:\r\n6</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 <= m <= 100</li>\r\n    <li>1 <= n <= 100</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_27july",
        "company_id": 333
    },
    {
        "id": 1027,
        "title": "Optimal Fertilizer Mix",
        "problem_statement": "<h1>Optimal Fertilizer Mix</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A farmer is trying to create a balanced fertilizer mix using N organic substances. Each organic substance has two properties:</p>\r\n<ul>\r\n    <li><strong>Growth Boost (G):</strong> A multiplicative factor that boosts plant growth.</li>\r\n    <li><strong>Soil Toxicity (T):</strong> An additive factor that negatively affects soil quality.</li>\r\n</ul>\r\n<p>To ensure optimal crop health, the farmer wants to combine organic substances such that the absolute difference between the total growth boost and the total toxicity is minimized.</p>\r\n<ul>\r\n    <li>The total growth boost is the product of the G values of the chosen organic substances.</li>\r\n    <li>The total toxicity is the sum of T values of the chosen organic substances.</li>\r\n</ul>\r\n<p>The farmer must use at least one substance — applying nothing has no effect.</p>\r\n<p>Write a program that accepts the number of organic substances and their corresponding growth boost and toxicity values, and prints the minimum possible absolute difference between total growth boost and total toxicity across all combinations of organic substances.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= N &lt;= 10</code></li>\r\n    <li><code>1 &lt;= G, T &lt;= 100</code></li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input will contain an integer <strong>N</strong>, the number of organic substances.</p>\r\n<p>Each of the next <strong>N</strong> lines of input will contain two integers separated by a single whitespace, <strong>G</strong> and <strong>T</strong>, representing the growth boost and toxicity respectively of each organic substance.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output should contain a single integer — the smallest possible absolute difference between total growth boost and total toxicity across all combinations of organic substances.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n3 8\r\n5 8\r\n4 4\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> Various mixing combinations are shown below:</p>\r\n<pre><code class='language-text'>Composition includes | Total Growth boost(A) | Total Soil Toxicity(B) | Absolute Difference between A and B\r\n---------------------|-----------------------|------------------------|----------------------------------\r\nOnly 1               | 3                     | 8                      | 5\r\nOnly 2               | 5                     | 8                      | 3\r\nOnly 3               | 4                     | 4                      | 0\r\nOnly 1 and 2         | 15                    | 16                     | 1\r\nOnly 1 and 3         | 12                    | 12                     | 0\r\nOnly 2 and 3         | 20                    | 12                     | 8\r\nAll 1,2, and 3       | 60                    | 16                     | 44</code></pre>\r\n<p>Therefore, the minimum absolute difference between the total growth boost and total toxicity for the given organic substances is 0.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n3 11\r\n2 10\r\n3 12\r\n3 10\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong> By choosing organic substances 1, 3, and 4 to create fertilizer, we get the minimum absolute difference as ((3*3*3)-(11+12+10))=6, which is printed as output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_27july",
        "company_id": 333
    },
    {
        "id": 1028,
        "title": "Satellite Communication Network",
        "problem_statement": "<h1>Satellite Communication Network</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are designing a communication network for satellites orbiting Earth. Each satellite has a unique identification number (a positive integer) that determines its position in the network hierarchy.</p>\r\n<p>The network is formed by the first satellite launched becoming the primary hub. Subsequent satellites connect to the network based on their ID: if the new satellite's ID is less than the previous satellite's ID, it connects to the satellite from the left subspace. If greater, it connects to the satellite from the right subspace.</p>\r\n<p>The communication network should be balanced at all times, as an unbalanced network increases signal latency resulting in poor communication. The network is deemed unbalanced if any satellite's subspace height difference exceeds 1. Therefore, to maintain optimal performance, the network should automatically rebalance as per the below operations.</p>\r\n\r\n<h3>Rebalancing Operations:</h3>\r\n<ul>\r\n    <li>Orbit Adjustment A (Right Rotation): When the left subspace becomes too heavy</li>\r\n    <li>Orbit Adjustment B (Left Rotation): When the right subspace becomes too heavy</li>\r\n    <li>Compound Adjustment A-B (Left-Right Rotation): When left-right imbalance occurs</li>\r\n    <li>Compound Adjustment B-A (Right-Left Rotation): When right-left imbalance occurs</li>\r\n</ul>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input consists of n, the number of satellites.</p>\r\n<p>The second line of input consists of n satellite IDs, each separated by a single white space.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>The output should be a single line containing the satellite IDs of the final stable and balanced network, presented in pre-order traversal with a single white space separating each satellite ID.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>All satellite IDs > 0</li>\r\n    <li>Satellite IDs are unique.</li>\r\n    <li>A network always contains at least one satellite.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 7\r\n12 25 26 32 28 11 10\r\nOutput: 25 11 10 12 28 26 32</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Satellite with ID 12 becomes the primary hub.</p>\r\n<p>Next, Satellite ID 25: Its value is greater than 12, so it joins the right subtree of 12. The height difference at node 12 (left height -1, right height 0) is 1, which does not exceed 1. No adjustment is needed.</p>\r\n<pre><code class='language-text'>      12\r\n       \\\r\n        25</code></pre>\r\n<p>Next, Satellite ID 26: Its value is greater than 12 and greater than 25, so it joins the right subtree of 25.</p>\r\n<pre><code class='language-text'>      12\r\n       \\\r\n        25\r\n         \\\r\n          26</code></pre>\r\n<p>At this point, the height difference at the root (12) is 2 (left subtree height -1, right subtree height 1), which exceeds 1. This is a Right-Right imbalance. Therefore, a Right Rotation (Orbit Adjustment B) is performed at node 12. After Left Rotation, we get the balanced network as:</p>\r\n<pre><code class='language-text'>      25\r\n     /  \\\r\n    12   26</code></pre>\r\n<p>Next, Satellite ID 32: Its value is greater than 25 and greater than 26, but less than 32, so it joins the left subtree of 32.</p>\r\n<pre><code class='language-text'>      25\r\n     /  \\\r\n    12   26\r\n          \\\r\n           32</code></pre>\r\n<p>At this point, the height difference at node 26 is 2 (left subtree height -1, right subtree height 1), which exceeds 1. This is a Right-Left imbalance. Therefore, a Right-Left Rotation (Compound Adjustment B-A) is performed at node 26. After Right-Left Rotation we get the balanced network as:</p>\r\n<pre><code class='language-text'>      25\r\n     /  \\\r\n    12   28\r\n         / \\\r\n        26  32</code></pre>\r\n<p>Next, Satellite ID 11: Its value is less than 25 and less than 12, so it joins the left subtree of 12. The height difference at any node does not exceed 1. No adjustment is needed.</p>\r\n<pre><code class='language-text'>      25\r\n     /  \\\r\n    12   28\r\n   /    / \\\r\n  11   26  32</code></pre>\r\n<p>Next, Satellite ID 10: This is the last satellite to join. Its ID is less than 25, 12, and 11, so it joins the left subtree of 11.</p>\r\n<pre><code class='language-text'>      25\r\n     /  \\\r\n    12   28\r\n   /    / \\\r\n  11   26  32\r\n /\r\n10</code></pre>\r\n<p>At this point, the height difference at node 12 is 2 (left subtree height 1, right subtree height -1), which exceeds",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_27july",
        "company_id": 333
    },
    {
        "id": 1029,
        "title": "Tennis Ball Storage System",
        "problem_statement": "<h1>Tennis Ball Storage System</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A sports shop stores tennis balls in a storage grid made of multiple rows and columns. Each slot in the grid can either be empty, contain a ball, or contain a support beam. When a ball is dropped into a column, it falls until it hits a support beam or another ball. If it hits a support beam, it settles on top of it. If it hits another ball, it settles on top of that ball. Therefore, R can also be thought of as the number of rows in the grid.</p>\r\n\r\n<p>Each slot in the grid can be denoted as:</p>\r\n<pre><code class='language-text'>. (Dot) - An empty slot\r\n# (Hash) - A fixed support beam that prevents the ball from passing through\r\nO (Capital letter O) - A tennis ball that has already been placed in a slot</code></pre>\r\n\r\n<p>The store uses an automated conveyor system to drop the balls into the grid. When a ball is dropped, it will always fall to the lowest previous one has settled. Due to the shape of the grid, the balls follow a particular pattern when dropped in any column:</p>\r\n<ol>\r\n    <li>The ball falls straight down the column until it reaches the bottom row, or a beam (<code>#</code>) or another tennis ball (<code>O</code>).</li>\r\n    <li>If the ball lands on another tennis ball (<code>O</code>), it will try to roll sideways.\r\n        <ul>\r\n            <li>First, it attempts left-diagonal (left and left-down slots must both be empty).</li>\r\n            <li>If the left is blocked, it attempts right-diagonal (right and right-down slots must both be empty).</li>\r\n            <li>If both sides are blocked, the ball settles at its current position on top of the tennis ball.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Any ball that falls outside the grid bounds is ignored.</li>\r\n</ol>\r\n<p>You are given the values of R and C, the initial configuration of the R x C grid, and a sequence of N column positions where new tennis balls are dropped. Write a program to simulate their falling behavior and determine the final arrangement of the storage grid after all the tennis balls have settled.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line will contain two integers, <strong>R</strong> and <strong>C</strong>, the number of rows and columns in the storage grid, each separated by a single space.</p>\r\n<p>The next <strong>R</strong> lines will contain a string of <strong>C</strong> characters (only <code>#</code>, <code>.</code> or <code>O</code>) representing the initial state of the storage grid.</p>\r\n<p>The next line will contain an integer <strong>N</strong>, the number of tennis balls to be dropped.</p>\r\n<p>The next <strong>N</strong> lines will each contain a column number into which one tennis ball is dropped.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>Output <strong>R</strong> amount of <strong>R</strong> lines, each containing <strong>C</strong> characters (only <code>.</code> or <code>O</code>) representing the final state of the storage grid after all tennis balls have settled.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= R < 100</code></li>\r\n    <li><code>1 <= C <= 100</code> (columns are labeled 1 to C)</li>\r\n    <li><code>1 <= N <= 100</code></li>\r\n    <li>The first row of the grid will always contain empty slots.</li>\r\n    <li>Any ball that falls outside the grid bounds is ignored (refer to Example 2 for better understanding).</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 4\r\n....\r\n#...\r\n....\r\n....\r\n....\r\n4\r\n1\r\n1\r\n1\r\n1\r\nOutput:\r\n....\r\n#...\r\n....\r\n....\r\nOOO.</code></pre>\r\n<p><strong>Explanation:</strong> Given R=5, C=4, N=4. All 4 new balls drop into the first column.</p>\r\n<p>The initial structure is:</p>\r\n<pre><code class='language-text'>....\r\n#...\r\n....\r\n....\r\n....</code></pre>\r\n<p><strong>Step 1:</strong> The first ball drops in the first column. It hits the support beam (<code>#</code>), so it stays on top of it at the position second row, first column.</p>\r\n<pre><code class='language-text'>....\r\nO#..\r\n....\r\n....\r\n....</code></pre>\r\n<p><strong>Step 2:</strong> The second ball also drops into the first column and hits the first ball. Since it hit a ball, it will first try to roll left, but there is no space to the left. Hence it will try to roll right. Since the right and right-down slots are vacant, it will roll right and then drop down to the fifth row, third column. The grid state after 2 balls is:</p>\r\n<pre><code class='language-text'>....\r\n#...\r\n....\r\n....\r\nO.O.</code></pre>\r\n<p><strong>Step 3:</strong> The third ball drops into the first column on top of the first ball, then rolls right, landing on the second ball. It checks if it can move left and left-down, and finds a space there. So it rolls left, and settles at position fifth row, first column.</p>\r\n<pre><code class='language-text'>....\r\n#...\r\n....\r\n....\r\nOOO.</code></pre>\r\n<p>The 4th ball also drops into column 1. Since the first row in column 1 is now occupied by 'O', and the space below it is blocked by '#', it would attempt to roll. However, the explanation only details up to 3 balls, and the final output matches the state after 3 balls. This implies the 4th ball is ignored or exits the grid, consistent with rule 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 4\r\n....\r\n.#..\r\n....\r\n....\r\n....\r\n6\r\n2\r\n2\r\n1\r\n4\r\n2\r\n2\r\nOutput:\r\n.O..\r\n.#..\r\n....\r\n....\r\n...O</code></pre>\r\n<p><strong>Explanation:</strong> Given R=5, C=4, N=6. 6 balls are dropped sequentially at columns: 2, 2, 1, 4, 2, 2. While 6 balls are dropped, only 3 appear in the final structure. This is because some balls may land on an obstacle in the first row, and while attempting to roll, they exit the visible grid due to unsupported paths. Any ball that falls outside the grid bounds is ignored.</p>\r\n<p><strong>Ball 1:</strong> Drops into column 2 and settles on top of the support beam.</p>\r\n<pre><code class='language-text'>.O..\r\n.#..\r\n....\r\n....\r\n....</code></pre>\r\n<p><strong>Ball 2:</strong> Drops into column 2, but since the first row in column 2 is already filled, Ball 2 falls outside the grid bounds. It exits the visible grid due to unsupported path and is ignored.</p>\r\n<p><strong>Ball 3:</strong> Drops into column 1 and settles on top of the beam.</p>\r\n<pre><code class='language-text'>O...\r\n.#..\r\n....\r\n....\r\n....</code></pre>\r\n<p><strong>Ball 4:</strong> Drops into column 4 and settles in the bottom row.</p>\r\n<pre><code class='language-text'>O...\r\n.#..\r\n....\r\n....\r\n...O</code></pre>\r\n<p><strong>Balls 5 and 6:</strong> Drop at column 2 and exit the visible grid due to unsupported paths, so they are ignored. The final grid structure contains 3 balls and is printed as the output.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 5\r\n.....\r\n.....\r\n.#...\r\n.....\r\n.....\r\n3\r\n3\r\n3\r\n3\r\nOutput:\r\n.....\r\n.....\r\n.#O.O\r\n....O\r\n.....</code></pre>\r\n<p><strong>Explanation:</strong> Similarly, how all the tennis balls will be stored in the same process following the rolling rules.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_27july",
        "company_id": 333
    },
    {
        "id": 1032,
        "title": "Birthday party and return gift",
        "problem_statement": "<h1>Birthday party and return gift</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A birthday party was attended by N number of kids and each kid was given a unique id ranging from 1 to N. As a return gift, there are T toys that must be given to the kids.</p>\r\n<p>The party host decides the best way to do this is by sitting the kids down in a circle (ordered by ascending id), and then, starting with a random number D (between 1 and N) and distribute one toy at a time to each sequentially numbered kid, until all toys are distributed.</p>\r\n<p>For example, if the host picks a random number (D) 2, then gift distribution order would be (2, 3, 4, 5... N-1, N, 1, 2, 3, 4...) until all T toys are distributed. But the very last toy is damaged. The task is to find and display the ID number of the last kid, who will receive the damaged toy, so that kid can be informed about the same and ask him to go and exchange the toy from the shop.</p>\r\n\r\n<p>You are required to complete the function <code>findDamagedToy</code>. The function is expected to return an <code>INTEGER</code>. The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>INTEGER N</code></li>\r\n    <li><code>INTEGER T</code></li>\r\n    <li><code>INTEGER D</code></li>\r\n</ul>\r\n<pre><code class='language-cpp'>int findDamagedToy(int N, int T, int D) {\r\n    // Complete the 'findDamagedToy' function below.\r\n    // The function is expected to return an INTEGER.\r\n    // The function accepts following parameters:\r\n    // 1. INTEGER N\r\n    // 2. INTEGER T\r\n    // 3. INTEGER D\r\n}</code></pre>\r\n\r\n<h2>Input</h2>\r\n<p><strong>Input:</strong> N (the number of kids), T (the number of toys), and D (random number from where distribution should start), respectively in separate lines.</p>\r\n\r\n<h2>Output</h2>\r\n<p><strong>Output:</strong> For each test case, print the ID number of the kid who receives the damaged toy on a new line.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n2\r\n1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> There are N=5 kids and T=2 toys. Distribution of toy starts at ID number D=1, so the kid 1 gets the first toy and kid 2 gets the second (last) toy. Thus, we must inform kid 2 about the damaged toy, so we print the same 2 on a new line.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_27july",
        "company_id": 333
    },
    {
        "id": 1033,
        "title": "Traveler Fund",
        "problem_statement": "```html\r\n<h1>Traveler Fund</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A traveler is traveling form city of zeta to omega. He starts with X amount of money. Every day he spends some money and also he may work on some days to earn money. He may find good work some day and end up earning more than what he spends that day. It also may happen that he spends more than what he earns on any day.</p>\r\n<p>You are given an array of integers which represents his net savings (earning -expense) on any day. You need to find out minimum amount the traveler should begin with to ensure that he always have some money (>0) at the end of any day.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>-200 &lt;= a<sub>i</sub> &lt;= 200, where a<sub>i</sub> are array elements</li>\r\n    <li>0 &lt; i &lt;= 100, where i is the array length</li>\r\n    <li>X &gt;= 0</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 //Array length\r\n4 //Array elements start\r\n2\r\n-3\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong> Traveler saves $4 on first day, $2 on second day and $-3 on third day (expense is more on 3 day than earnings).</p>\r\n<p>End of the first day, he has X + $4</p>\r\n<p>End of the Second day, he has X + $(4+2)</p>\r\n<p>End of third day, he has X + $(4+2-3)</p>\r\n<p>So he can effectively start with X = $0</p>\r\n```",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Goldman sachs_27july",
        "company_id": 333
    }
]