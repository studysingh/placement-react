[
    {
        "id": 1874,
        "title": "Auto Suggest",
        "problem_statement": "<h1>Auto Suggest</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a dictionary consisting of N words and a query word S. You need to auto-suggest the best word from the dictionary that is closest to S.</p>\r\n<p>Two words are first compared by their Levenshtein distance to the word S. If two words have the same Levenshtein distance, then the lexicographically smaller word is given priority.</p>\r\n<p><strong>Notes:</strong></p>\r\n<ul>\r\n    <li>Levenshtein distance between two strings is defined as the minimum number of edits required to obtain one string from the other. An \"edit\" is defined by either an insertion of a character, a deletion of a character, or a replacement of a character.</li>\r\n    <li>Levenshtein distance between \"abc\" with \"ac\" is 1 (deletion of c), with \"abd\" is 1 (replacement of c to d) and with \"abcd\" is 1 (insertion of d).</li>\r\n    <li>All the words and the query word S consist of lowercase alphabets only.</li>\r\n</ul>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>solve</code>. This function takes the following 3 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents the number of words in the dictionary</li>\r\n    <li><strong>words:</strong> Represents the dictionary</li>\r\n    <li><strong>S:</strong> Represents the query word</li>\r\n</ul>\r\n<pre><code class='language-javascript'>package main\r\n\r\nfunc solve (N int, words []string, S string) string {\r\n    // Write your code here\r\n    return \"\"\r\n}</code></pre>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains a single integer N denoting the value of N.</li>\r\n    <li>The second line contains N space-separated strings denoting the words in the dictionary.</li>\r\n    <li>The third line contains a single string denoting the query word S.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Print a single line containing the answer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; N &le; 100</li>\r\n    <li>1 &le; words[i].length &le; 10</li>\r\n    <li>1 &le; S.length &le; 10</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5\r\ntocor torect tocfrec tocorre tocofecd\r\ntocorrect\r\nOutput: tocfrec</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Given:</p>\r\n<ul>\r\n    <li>N = 5</li>\r\n    <li>words = [\"tocor\", \"torect\", \"tocfrec\", \"tocorre\", \"tocofecd\"]</li>\r\n    <li>S = \"tocorrect\"</li>\r\n</ul>\r\n<p>Approach:</p>\r\n<p>The strings belonging to the dictionary (represented by list words) and having minimum levenshtein distance of 2 from the given string \"tocorrect\" are [\"tocfrec\", \"tocorre\"]. Among the two, \"tocfrec\" is lexicographically smaller than \"tocorre\".</p>\r\n<p>Hence, the answer is \"tocfrec\".</p>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li>Time Limit: 2.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<h2>Scoring</h2>\r\n<p>Score is assigned if any testcase passes</p>\r\n\r\n<h2>Allowed Languages</h2>\r\n<ul>\r\n    <li>Go</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <limits>\n\nclass Solution {\npublic:\n    std::string solve(int N, const std::vector<std::string>& words, const std::string& S) {\n        // Core logic goes here\n        return \"\";\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<std::string> words(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> words[i];\n    }\n\n    std::string S;\n    std::cin >> S;\n\n    Solution solution;\n    std::string result = solution.solve(N, words, S);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Swiggy_16oct",
        "company_id": 659
    },
    {
        "id": 1875,
        "title": "Recursive Land Division",
        "problem_statement": "<h1>Recursive Land Division</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A country consists of N regions, each containing a specific number of towns. The government has decided to split the country into two separate nations in a way that minimizes the absolute difference between the total number of towns in each new nation. Each region is connected to another region through roads, forming a tree structure (i.e., an undirected connected graph with N-1 edges and no cycles). Your task is to determine the minimum possible absolute difference in the number of towns between the two new nations after removing exactly one road.</p>\r\n\r\n<p><strong>Function Description</strong></p>\r\n<p>You must implement the following function <code>minTownDifference</code>.</p>\r\n\r\n<p><strong>Parameters</strong></p>\r\n<ul>\r\n    <li><code>int N</code> &rarr; The number of regions.</li>\r\n    <li><code>int[] towns</code> &rarr; An array of size N, where <code>towns[i]</code> represents the number of towns in the (i+1)th region.</li>\r\n    <li><code>int[][] roads</code> &rarr; A list of N-1 tuples, where each tuple (u, v) represents a bidirectional road connecting region u and region v.</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code> &rarr; The minimum absolute difference in the number of towns between the two new nations after removing exactly one road.</li>\r\n</ul>\r\n\r\n<p><strong>Input Format</strong></p>\r\n<ul>\r\n    <li>The first line contains one integer, N (the number of regions).</li>\r\n    <li>The second line contains N space-separated integers representing the towns array.</li>\r\n    <li>The next N-1 lines each contain two integers, u and v, representing a bidirectional road between regions u and v.</li>\r\n</ul>\r\n\r\n<p><strong>Output Format</strong></p>\r\n<p>A single integer representing the minimum possible absolute difference in the number of towns between the two new nations.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2\r\n10 20\r\n1 2\r\nOutput:\r\n10</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe input describes 2 regions with 10 and 20 towns respectively, connected by a single road between region 1 and region 2.\r\nThe total number of towns is 10 + 20 = 30.\r\nIf we remove the road (1,2), the country splits into two nations:\r\n- Nation 1: Region 1 with 10 towns.\r\n- Nation 2: Region 2 with 20 towns.\r\nThe absolute difference in the number of towns between these two nations is |10 - 20| = 10.\r\nSince there's only one road to remove, this is the minimum possible difference.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>2 &lt;= N &lt;= 10^5</code> (Large number of regions)</li>\r\n    <li><code>1 &lt;= towns[i] &lt;= 10^4</code> (Each region has a significant number of towns)</li>\r\n    <li><code>1 &lt;= u,v &lt;= N</code> (Valid region indices)</li>\r\n    <li>The given graph is a tree (i.e., it is connected and has no cycles).</li>\r\n</ul>\r\n\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<p><strong>Limits:</strong></p>\r\n<ul>\r\n    <li>Time Limit: 5.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n\r\n<p><strong>Scoring:</strong> Score is assigned if any testcase passes</p>\r\n\r\n<p><strong>Allowed Languages:</strong> Go</p>\r\n\r\n<pre><code class='language-javascript'>package main\r\nfunc minTownDifference (N int, towns []int, roads [][]int) int {\r\n    // Write your code here.\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n#include <cmath>\n\nclass Solution {\npublic:\n    long long minTownDifference(int N, const std::vector<int>& towns, const std::vector<std::vector<int>>& roads) {\n        // Core logic to be implemented here.\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<int> towns(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> towns[i];\n    }\n\n    std::vector<std::vector<int>> roads(N - 1, std::vector<int>(2));\n    for (int i = 0; i < N - 1; ++i) {\n        std::cin >> roads[i][0] >> roads[i][1];\n    }\n\n    Solution solution;\n    long long result = solution.minTownDifference(N, towns, roads);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Swiggy_16oct",
        "company_id": 659
    },
    {
        "id": 1876,
        "title": "Mirror personalities",
        "problem_statement": "<h1>Mirror personalities</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>N people live in a town. The houses are arranged in a row. The personality of each owner is represented by a lowercase English character. Each person is in a fight with all those people who have a mirror personality to the one in the fight.</p>\r\n<p>Lets A be the string \"abcd...yz\". Let B be the reverse of string A, i.e. \"zyx...ba\". The mirror of any character from string A is the character in the same index in string B. Reverse of 'a' is 'z', reverse of 'z' is 'a'.</p>\r\n<p>Given the personality of each person in the town, determine the number of pairs of residents who are in a fight.</p>\r\n<p><strong>Note:</strong> (i, j) is the same as (j, i).</p>\r\n\r\n<h3>Function description</h3>\r\n<p>Complete the function <code>solution()</code>. The function takes the following 2 parameters and returns the solution:</p>\r\n<ul>\r\n    <li><code>N</code>: Represents the length of the string</li>\r\n    <li><code>S</code>: Represents the input string</li>\r\n</ul>\r\n\r\n<h3>Input format for custom testing</h3>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code</p>\r\n<ul>\r\n    <li>The first line contains <code>N</code> denoting the length of the string.</li>\r\n    <li>The second line contains <code>S</code> denoting the input string.</li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>Return an integer denoting the number of mirror pairs.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\naaz\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given</strong></p>\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li><code>N = 3</code></li>\r\n    <li><code>S = \"aaz\"</code></li>\r\n</ul>\r\n<p><strong>Output:</strong> 2</p>\r\n<p><strong>Approach:</strong></p>\r\n<p>Considering 0-based indexing, (0, 2) and (1, 2) have mirror personalities.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= N <= 10^6</code></li>\r\n    <li><code>S[i]</code> is a valid small case English character.</li>\r\n</ul>\r\n\r\n<h2>Follow-up</h2>\r\n<p><strong>Note:</strong> Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n<h3>Limits:</h3>\r\n<ul>\r\n    <li>Time Limit: 1.0 sec(s) for each input file</li>\r\n    <li>Memory Limit: 256 MB</li>\r\n    <li>Source Limit: 1024 KB</li>\r\n</ul>\r\n<h3>Scoring:</h3>\r\n<ul>\r\n    <li>Score is assigned if any testcase passes</li>\r\n</ul>\r\n<h3>Allowed Languages:</h3>\r\n<ul>\r\n    <li>Go</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long solution(int N, const std::string& S) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n    std::string S;\n    std::cin >> S;\n\n    Solution sol;\n    long long result = sol.solution(N, S);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Swiggy_16oct",
        "company_id": 659
    }
]