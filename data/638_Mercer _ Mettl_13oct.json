[
    {
        "id": 1807,
        "title": "Inverted Triangles",
        "problem_statement": "<h1>Inverted Triangles</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>John is a tailor who is trying to design a T-shirt by placing diamond-shaped pieces of fabric in a pattern of inverted right-angled triangles. He has marked places where the diamonds will be placed on the T-shirt but has difficulty counting the number of inverted right-angled triangles in it.</p>\r\n<p>The T-shirt design is given as a matrix A which has only the integers 0 (no diamond) or 1 (one diamond) as its elements. You need to help John find and return an integer value representing the number of inverted right-angled triangles that will come up in the T-shirt.</p>\r\n\r\n<h3>Input Specification:</h3>\r\n<ul>\r\n    <li><strong>input1:</strong> An integer value representing the number of rows in the Matrix A.</li>\r\n    <li><strong>input2:</strong> An integer value representing the number of columns in the Matrix A.</li>\r\n    <li><strong>input3:</strong> An integer matrix A of size <code>input1</code> x <code>input2</code> representing the design of the T-shirt, where <code>A[i][j]</code> represents the contents of the <code>i</code>th row and the <code>j</code>th column in the input Matrix A.</li>\r\n</ul>\r\n\r\n<h3>Output Specification:</h3>\r\n<p>Return an integer value representing the number of inverted right-angled triangles that will come up in the T-shirt.</p>\r\n\r\n<p>The function signature provided is:</p>\r\n<pre><code class='language-javascript'>int countTriangles(int input1, int input2, int **input3)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ninput1 = 4\r\ninput2 = 4\r\ninput3 = {{1, 0, 1, 1}, {1, 0, 0, 0}, {0, 1, 0, 0}, {1, 0, 0, 0}}\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The following matrix is rendered from the given input:</p>\r\n<pre><code class='language-text'>1011\r\n1000\r\n0100\r\n1000</code></pre>\r\n<p>Following are the inverted right-angled triangles we can observe in the matrix:</p>\r\n<p>Triangle 1:</p>\r\n<pre><code class='language-text'>1011\r\n1000\r\n0100\r\n1000</code></pre>\r\n<p>Triangle 2:</p>\r\n<pre><code class='language-text'>1011\r\n1000\r\n0100\r\n1000</code></pre>\r\n<p>Triangle 3:</p>\r\n<pre><code class='language-text'>1011\r\n1000\r\n0100\r\n1000</code></pre>\r\n<p>Triangle 4:</p>\r\n<pre><code class='language-text'>1011\r\n1000\r\n0100\r\n1000</code></pre>\r\n<p>Since 4 inverted right-angled triangles can be formed from the given matrix, 4 is returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ninput1 = 4\r\ninput2 = 4\r\ninput3 = {{1, 0, 0, 0}, {1, 0, 1, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}}\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The following matrix is rendered from the given input:</p>\r\n<pre><code class='language-text'>1000\r\n1010\r\n1111\r\n0000</code></pre>\r\n<p>Following are the inverted right-angled triangles we can observe in the matrix:</p>\r\n<p>Triangle 1:</p>\r\n<pre><code class='language-text'>1000\r\n1010\r\n1111\r\n0000</code></pre>\r\n<p>Triangle 2:</p>\r\n<pre><code class='language-text'>1000\r\n1010\r\n1111\r\n0000</code></pre>\r\n<p>Since 2 inverted right-angled triangles can be formed from the given matrix, 2 is returned as the output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int countTriangles(int R, int C, const std::vector<std::vector<int>>& A) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int R;\n    std::cin >> R;\n\n    int C;\n    std::cin >> C;\n\n    std::vector<std::vector<int>> A(R, std::vector<int>(C));\n    for (int i = 0; i < R; ++i) {\n        for (int j = 0; j < C; ++j) {\n            std::cin >> A[i][j];\n        }\n    }\n\n    Solution sol;\n    int result = sol.countTriangles(R, C, A);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Mercer | Mettl_13oct",
        "company_id": 638
    },
    {
        "id": 1808,
        "title": "Minimum Cost",
        "problem_statement": "<h1>Minimum Cost</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The whole world is under lockdown due to the effect of COVID-19. Jason decides to utilize his time to learn new things, so he starts learning about Strings but gets stuck at some point and asks you for help.</p>\r\n<p>You are given a string S and an array of K words. You need to generate string S by concatenating any number of words any number of times as you want, but using a word costs some amount P.</p>\r\n<p>Your task is to minimize the total cost required to generate the string S using these K words.</p>\r\n<p><strong>Note:</strong> If you are unable to generate string S then you need to return -1.</p>\r\n\r\n<h3>Input Specification:</h3>\r\n<ul>\r\n    <li>input1 : A string S</li>\r\n    <li>input2 : An array of words</li>\r\n    <li>input3 : An integer K denoting the number of words</li>\r\n    <li>input4 : An array denoting the cost of K words</li>\r\n</ul>\r\n\r\n<h3>Output Specification:</h3>\r\n<p>Return the minimum cost required to generate string S.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\ninput1: lockdown\r\ninput2: [lock,down]\r\ninput3: 2\r\ninput4: [50,50]\r\nOutput: 60</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The words \"lock\" and \"down\" can be concatenated to generate string S i.e \"Lockdown\". Here using the words - \"lock\" + \"down\" will incur a cost of 50 + 50 = 100, so the Total Cost=100</li>\r\n    <li>The words \"lo\", \"ck\" and \"down\" can be concatenated to form the string S i.e \"Lockdown\". here using the words - \"lo\" + \"ck\" + \"down\" will incur a cost of 5 + 5 + 50 = 60, so the Total Cost will be 60.</li>\r\n</ul>\r\n<p>Therefore, 60 will be returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ninput1: helloworld\r\ninput2: [hi,abc,pqr]\r\ninput3: 3\r\ninput4: [1,2,3]\r\nOutput: -1</code></pre>\r\n<p><strong>Explanation:</strong> Since there are no possible ways to generate string S, -1 has to be returned as the output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <limits>\n\nclass Solution {\npublic:\n    long long minCost(const std::string& s, const std::vector<std::string>& words, int k, const std::vector<int>& costs) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string s;\n    std::cin >> s;\n\n    int k;\n    std::cin >> k;\n\n    std::vector<std::string> words(k);\n    for (int i = 0; i < k; ++i) {\n        std::cin >> words[i];\n    }\n\n    std::vector<int> costs(k);\n    for (int i = 0; i < k; ++i) {\n        std::cin >> costs[i];\n    }\n\n    Solution solution;\n    long long result = solution.minCost(s, words, k, costs);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Mercer | Mettl_13oct",
        "company_id": 638
    },
    {
        "id": 1809,
        "title": "Rock Paper Scissors",
        "problem_statement": "<h1>Rock Paper Scissors</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>James and Lily are playing a tournament of rock, paper and scissors containing N number of matches.</p>\r\n<p>In the game of Rock, Paper, Scissors certain hand signs indicating rock, paper and scissors are made by two players. Points are awarded to players, based on the following rules:</p>\r\n<ul>\r\n    <li>Rock beats Scissors</li>\r\n    <li>Scissors beats Paper</li>\r\n    <li>Paper beats Rock</li>\r\n    <li>If both players use the same hand sign, no player is awarded any points.</li>\r\n</ul>\r\n<p>The player with more points wins the tournament. James never plays the same hand signs in two consecutive games. You are given the number of matches played in the tournament and Lily's hand signs in each match, in the form of a string containing R, P and S representing rock, paper and scissors respectively.</p>\r\n<p>Your task is to find and return the total number of winning sequences in which James can win the tournament against Lily.</p>\r\n<p><strong>Note:</strong> Return answer modulo 10<sup>9</sup> + 7.</p>\r\n\r\n<h2>Input Specification</h2>\r\n<p><strong>input1:</strong> An integer value N representing the number of matches played in a tournament.</p>\r\n<p><strong>input2:</strong> A string representing the hand signs played by Lily in the tournament.</p>\r\n\r\n<h2>Output Specification</h2>\r\n<p>Return the number of winning sequences, modulo 10<sup>9</sup> + 7, in which James can win the tournament against Lily.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: input1 = 3, input2 = RPS\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 matches in the tournament. Lily plays rock in the first match, paper in the second and scissors in the last match. James can win the tournament by using the following hand sign sequence.</p>\r\n<ul>\r\n    <li><strong>RPR:</strong> James's score = 0 + 1 + 1. Lily's score = 0 + 0 + 0. If James plays the sequence RPR, he will win the last match as Rock played by James will beat Scissors played by Lily.</li>\r\n    <li><strong>RSR:</strong> James's score = 0 + 1 + 1. Lily's score = 0 + 0 + 0.</li>\r\n    <li><strong>PSR:</strong> James's score = 1 + 1 + 1. Lily's score = 0 + 0 + 0.</li>\r\n    <li><strong>PSP:</strong> James's score = 1 + 1 + 0. Lily's score = 0 + 0 + 1.</li>\r\n</ul>\r\n<p>Since there are 4 ways in which James can win the tournament, 4 is returned as the output.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: input1 = 2, input2 = RR\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are 2 matches in the tournament. Lily plays rock in both the matches. James can win the tournament by using the following hand sign sequence.</p>\r\n<ul>\r\n    <li><strong>RP:</strong> James's score = 0 + 1. Lily's score = 0 + 0.</li>\r\n    <li><strong>PR:</strong> James's score = 1 + 0. Lily's score = 0 + 0.</li>\r\n</ul>\r\n<p>Since there are 2 ways in which James can win the tournament, 2 is returned as the output.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param N The number of matches played in a tournament.\n     * @param lily_moves A string representing the hand signs played by Lily.\n     * @return The number of winning sequences for James, modulo 10^9 + 7.\n     */\n    int countWinningSequences(int N, const std::string& lily_moves) {\n        // TODO: Implement the solution logic here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n    std::string lily_moves;\n    std::cin >> lily_moves;\n\n    Solution solution;\n    int result = solution.countWinningSequences(N, lily_moves);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Mercer | Mettl_13oct",
        "company_id": 638
    }
]