[
    {
        "id": 271,
        "title": "Steven\\'s Substring (Sunset on 12 April)",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Steven\\'s Substring (Sunset on 12 April)</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Steven is trying to perform a string operation. He must find the same consecutive characters in groups of even and odd lengths in the string, merge them, and check if they are a palindrome. For e.g. if a string is (aabb) we can convert it to ab.</p>\n        \n        <p>Your task is to help Steven find and return the number of even and odd substrings from the original string which becomes palindromic after merging.</p>\n        \n        <div class=\\\"notes\\\">\n            <h4>Notes:</h4>\n            <ul>\n                <li>Strings which are the same while reading backward and forward are called palindromes.</li>\n                <li>The input string is made up of characters \\'a\\' and \\'b\\' only.</li>\n                <li>Only groups could be formed from left to right.</li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>A string containing only characters \\'a\\' and \\'b\\'</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Return an array of two integers where:</p>\n        <ul>\n            <li>First integer represents count of even length palindromic substrings</li>\n            <li>Second integer represents count of odd length palindromic substrings</li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Examples</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input: baa</pre>\n            <pre class=\\\"output\\\">Output: [1,3]</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Here we have been given a string (b,a,a) we can perform the operation by the following ways:</p>\n                <ul>\n                    <li>Here, the even length substrings which can be formed as a group are {aa} which can be converted to {a} which is a palindrome, so 1 group is formed.</li>\n                    <li>Odd length of sub-strings which can be {b}, {a}, {a} which will be palindromes after merging, so 3 groups are formed. Note that the sub-string {baa} cannot be used because it will give {ba} after merging which is not a palindrome.</li>\n                </ul>\n                <p>So, the output for even length for the substring is 1 and odd length for the string is 3.</p>\n            </div>\n        </div>\n    </div>\n\n    <div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"cpp\\\"><code>struct Result {\n    Result() : output1(){};\n    int output1[10000];\n};\n\nResult stevenSubstring(char* input1) {\n    // Write your code here\n    // Return array containing [evenCount, oddCount]\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ic2kMe6W63WqusKTVABxyLf4YtmwY3sV7IRXkaRnM-k/edit?usp=sharing",
        "solution_code": "#include <stdio.h>\\n#include <string.h>\\n#include <vector>\\n#include <stdlib.h>\\n\\nstruct Result {\\n    int output1[2];\\n};\\n\\nbool isPalindrome(const std::string& s) {\\n    int left = 0;\\n    int right = s.length() - 1;\\n    while(left < right){\\n        if(s[left] != s[right]){\\n            return false;\\n        }\\n        left++;\\n        right--;\\n    }\\n    return true;\\n}\\n\\nResult stevenSubstring(char* input1) {\\n    Result res;\\n    res.output1[0] = 0; // even count\\n    res.output1[1] = 0; // odd count\\n\\n    std::string s(input1);\\n    int n = s.length();\\n\\n    \\n    for(int i = 0; i < n; ++i){\\n        for(int j = i+1; j <= n; ++j){\\n            std::string substr = s.substr(i, j - i);\\n            int len = substr.length();\\n\\n            \\n            std::string grouped = \\\"\\\";\\n            grouped += substr[0];\\n            for(int k = 1; k < len; ++k){\\n                if(substr[k] != substr[k-1]){\\n                    grouped += substr[k];\\n                }\\n            }\\n\\n           \\n            if(isPalindrome(grouped)){\\n                if(len % 2 == 0){\\n                    res.output1[0] += 1;\\n                }\\n                else{\\n                    res.output1[1] += 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    return res;\\n}",
        "company_name": "Airtel",
        "company_id": 71
    }
]