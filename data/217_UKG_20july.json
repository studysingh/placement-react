[
    {
        "id": 678,
        "title": "Anagram Period",
        "problem_statement": "<h1>Anagram Period</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A string can be formed using another string <code>s</code> by repeatedly concatenating the anagrams of <code>s</code> any number of times. Given a string <code>input_str</code>, str of length <code>n</code>, find the length of the smallest string <code>s</code> that can be used to create <code>input_str</code>.</p>\r\n<p>Note that the string <code>input_str</code> only consists of the lowercase English letters.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getAnagramPeriod</code> in the editor below.</p>\r\n<p><code>getAnagramPeriod</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string input_str</code>: a string of length <code>n</code></li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the length of the smallest possible string <code>s</code></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>input_str</code> consists of lowercase English letters</li>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p>The first line contains a string <code>input_str</code>, the string to be formed.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: abcbcacba\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> One possible string s is \"abc\"; append the anagrams of s in the order \"abc\", \"bca\", and \"cba\".</p>\r\n<p>Another possible string s is \"abcbcacba\"; append the string s as it is to form the given string.</p>\r\n<p>It can be proven that the length of s cannot be reduced further than 3.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: bbaaaabaabaaabb\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> One possible string s is \"aaaabbb\"; append the anagrams of s in the order \"bbaa\", \"aaab\" and \"baabbb\".</p>\r\n<p>It can be proven that the length of s cannot be reduced further than 4.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "UKG_20july",
        "company_id": 217
    },
    {
        "id": 679,
        "title": "Unit Conversions",
        "problem_statement": "<h1>Unit Conversions</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are <code>unit_nodes</code> types of unit, and (<code>unit_nodes - 1</code>) relations between them. The relations are defined using three arrays namely <code>unit_from</code>, <code>unit_to</code> and <code>unit_weight</code> where <code>unit_weight[i]</code> magnitude of type <code>unit_to[i]</code> equals 1 magnitude of type <code>unit_from[i]</code>.</p>\r\n<p>Given a parameter <code>x</code>, find the magnitude in each unit which will be equivalent to <code>x</code> magnitude in unit 1. For each unit, return the answer modulo (10<sup>9</sup> + 7).</p>\r\n<p><strong>Note:</strong> The relationships between the units form a directed rooted tree, rooted at unit 1, i.e., the in-degree of every node is at most 1 (Unit 1 has in-degree 0).</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider the following input: <code>unit_nodes = 3</code>, <code>unit_from = [1, 2]</code>, <code>unit_to = [2, 3]</code>, <code>unit_weight = [2, 1]</code> and <code>x = 1</code>.</p>\r\n<p>The relations are:</p>\r\n<ul>\r\n    <li>2 magnitude of unit 2 is equivalent to 1 magnitude of unit 1. (From <code>unit_from[0]=1, unit_to[0]=2, unit_weight[0]=2</code>)</li>\r\n    <li>1 magnitude of unit 3 is equivalent to 1 magnitude of unit 2. (From <code>unit_from[1]=2, unit_to[1]=3, unit_weight[1]=1</code>)</li>\r\n</ul>\r\n<p>Given <code>x = 1</code>, so:</p>\r\n<ul>\r\n    <li>1 magnitude of unit 1 is equivalent to 1 magnitude of unit 1.</li>\r\n    <li>1 magnitude of unit 1 is equivalent to 2 magnitudes of unit 2 (from relation 1 above).</li>\r\n    <li>1 magnitude of unit 1 is equivalent to 2 magnitudes of unit 3 (from relations 1 and 2 above).</li>\r\n</ul>\r\n<pre><code class='language-text'>Input: unit_nodes = 3, unit_from = [1,2], unit_to = [2,3], unit_weight = [2,1], x = 1\r\nOutput: [1,2,2]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nGiven <code>x=1</code> for unit 1.\r\nFrom relation 1: 1 magnitude of unit 1 is equivalent to 2 magnitudes of unit 2. So, 1 * 2 = 2 magnitudes of unit 2.\r\nFrom relation 2: 1 magnitude of unit 2 is equivalent to 1 magnitude of unit 3. So, 2 magnitudes of unit 2 is equivalent to 2 * 1 = 2 magnitudes of unit 3.\r\nThe magnitudes for units [1, 2, 3] are [1, 2, 2].</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 2\r\n1 2 2\r\n2 3 2\r\n1\r\nOutput:\r\n1\r\n2\r\n4</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<code>unit_nodes = 3</code>, <code>number of relations = 2</code>.\r\nRelation 1: <code>unit_from = 1</code>, <code>unit_to = 2</code>, <code>unit_weight = 2</code> (1 magnitude of unit 1 is equivalent to 2 magnitudes of unit 2).\r\nRelation 2: <code>unit_from = 2</code>, <code>unit_to = 3</code>, <code>unit_weight = 2</code> (1 magnitude of unit 2 is equivalent to 2 magnitudes of unit 3).\r\n<code>x = 1</code> for unit 1.\r\nUnit 1: 1\r\nUnit 2: 1 * 2 = 2\r\nUnit 3: 2 * 2 = 4\r\nThe magnitudes are [1, 2, 4].</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n2 1\r\n1 2 10\r\n10\r\nOutput:\r\n10\r\n100</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<code>unit_nodes = 2</code>, <code>number of relations = 1</code>.\r\nRelation 1: <code>unit_from = 1</code>, <code>unit_to = 2</code>, <code>unit_weight = 10</code> (1 magnitude of unit 1 is equivalent to 10 magnitudes of unit 2).\r\n<code>x = 10</code> for unit 1.\r\nUnit 1: 10\r\nUnit 2: 10 * 10 = 100\r\nThe magnitudes are [10, 100].</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findEquivalentMagnitude</code> in the editor below.</p>\r\n<p><code>findEquivalentMagnitude</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>int unit_nodes</code>: the number of units</li>\r\n    <li><code>int unit_from[unit_nodes - 1]</code>: the first units in the conversions</li>\r\n    <li><code>int unit_to[unit_nodes - 1]</code>: the second units in the conversions</li>\r\n    <li><code>int unit_weight[unit_nodes - 1]</code>: the relation between the first unit and the second unit</li>\r\n    <li><code>int x</code>: the magnitude of unit 1</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p>An integer array representing the equivalent magnitude for each unit, starting from unit 1, modulo (10<sup>9</sup> + 7).</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "UKG_20july",
        "company_id": 217
    },
    {
        "id": 680,
        "title": "Subarray Xor Sum",
        "problem_statement": "<h1>Subarray Xor Sum</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of <code>n</code> integers, find the sum of the bitwise XOR sums of each of its subarrays.</p>\r\n<p>The bitwise XOR sum of a subarray <code>[l, r]</code> is defined as <code>arr[l] &#x2295; arr[l+1] &#x2295; ... &#x2295; arr[r]</code>, where <code>&#x2295;</code> denotes the bitwise XOR operation.</p>\r\n<p>Complete the function <code>getXorSum</code> in the editor below.</p>\r\n<pre><code class='language-cpp'>long getXorSum(std::vector<int> arr) {\r\n    // Function body to be implemented\r\n}</code></pre>\r\n<p>The function should return a <code>long int</code> representing the sum of xor sums of all subarrays.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, arr = [2, 3, 5]\r\nOutput: 21</code></pre>\r\n<p><strong>Explanation:</strong> The subarrays along with their XOR sums are shown:</p>\r\n<pre><code class='language-text'>Subarray   | XOR sum\r\n-----------|----------\r\n[2]        | 2\r\n[2, 3]     | 2 &#x2295; 3 = 1\r\n[2, 3, 5]  | 2 &#x2295; 3 &#x2295; 5 = 4\r\n[3]        | 3\r\n[3, 5]     | 3 &#x2295; 5 = 6\r\n[5]        | 5</code></pre>\r\n<p>The sum of the xor sums of all subarrays is 2 + 1 + 4 + 3 + 6 + 5 = 21.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, arr = [1, 2, 3]\r\nOutput: 10</code></pre>\r\n<p><strong>Explanation:</strong> The subarrays along with their xor sums are shown.</p>\r\n<ul>\r\n<li><code>[1] = 1</code></li>\r\n<li><code>[2] = 2</code></li>\r\n<li><code>[3] = 3</code></li>\r\n<li><code>[1, 2] = 1 &#x2295; 2 = 3</code></li>\r\n<li><code>[2, 3] = 2 &#x2295; 3 = 1</code></li>\r\n<li><code>[1, 2, 3] = 1 &#x2295; 2 &#x2295; 3 = 0</code></li>\r\n</ul>\r\n<p>Sum: 1 + 2 + 3 + 3 + 1 + 0 = 10.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 4, arr = [2, 4, 6, 7]\r\nOutput: 40</code></pre>\r\n<p><strong>Explanation:</strong> The xor sums are shown.</p>\r\n<ul>\r\n<li><code>[2] = 2</code></li>\r\n<li><code>[4] = 4</code></li>\r\n<li><code>[6] = 6</code></li>\r\n<li><code>[7] = 7</code></li>\r\n<li><code>[2, 4] = 2 &#x2295; 4 = 6</code></li>\r\n<li><code>[4, 6] = 4 &#x2295; 6 = 2</code></li>\r\n<li><code>[6, 7] = 6 &#x2295; 7 = 1</code></li>\r\n<li><code>[2, 4, 6] = 2 &#x2295; 4 &#x2295; 6 = 0</code></li>\r\n<li><code>[4, 6, 7] = 4 &#x2295; 6 &#x2295; 7 = 5</code></li>\r\n<li><code>[2, 4, 6, 7] = 2 &#x2295; 4 &#x2295; 6 &#x2295; 7 = 7</code></li>\r\n</ul>\r\n<p>Sum: 2 + 4 + 6 + 7 + 6 + 2 + 1 + 0 + 5 + 7 = 40.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 &#x2264; n &#x2264; 10<sup>5</sup></code></li>\r\n<li><code>0 &#x2264; arr[i] &#x2264; 10<sup>5</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "UKG_20july",
        "company_id": 217
    },
    {
        "id": 684,
        "title": "Maximum Greatness",
        "problem_statement": "<h1>Maximum Greatness</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array <code>arr</code>, we can rearrange it to form another array, let's call it <code>rearranged_arr</code>. The greatness of the array is the number of indices <code>i</code> for which <code>rearranged_arr[i] > arr[i]</code>. We want to find the maximum possible greatness that can be achieved by some rearrangement of the array.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: arr = [1, 3, 5, 2, 1, 3]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> Given the initial array <code>arr</code>, find the maximum possible greatness which can be achieved by some rearrangement of the array.</p>\r\n<p><code>[1, 3, 5, 2, 1, 3] -> original arr</code></p>\r\n<p><code>[2, 1, 3, 5, 3, 1] -> optimal rearranged_arr</code></p>\r\n<p>Here, at indices 0, 1, 3, and 4 in bold, <code>rearranged_arr[i] > arr[i]</code>. The total count for this is the maximum possible greatness. Thus, the answer is 4.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input: n = 6\r\narr = [1, 2, 3, 6, 2, 1]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The optimal rearranged_arr = [2, 3, 1, 6, 2, 1]. Here, all indices except 2 and 3 are great.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input: n = 4\r\narr = [4, 1, 6, 3]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The optimal rearranged_arr = [6, 2, 1, 4]. All indices except index 2 are great.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>findMaximumGreatness</code> in the editor below.</p>\r\n<p><code>findMaximumGreatness</code> has the following parameter:</p>\r\n<p><code>int arr[n]</code>: an array of integers</p>\r\n\r\n<h2>Returns</h2>\r\n<p><code>int</code>: the maximum possible greatness</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= arr[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "UKG_20july",
        "company_id": 217
    }
]