[
    {
        "id": 67,
        "title": "Bob Navigates a Maze",
        "problem_statement": "<div class=\"problem-container\">\n    <h1 class=\"problem-title\">Bob Navigates a Maze</h1>\n\n<div class=\"problem-description\">\n        <p>Bob and Alice have teamed up on a game show. After winning the first round, they now have access to a maze with hidden gold. If Bob can collect all the gold coins and deliver them to Alice's position, they can split the gold. Bob can move horizontally or vertically as long as he stays in the maze, and the cell is not blocked.</p>\n\n<p>The maze is represented by an n × m array. Each cell has a value, where:</p>\n        <ul>\n            <li>0 is open</li>\n            <li>1 is blocked</li>\n            <li>2 is open with a gold coin</li>\n        </ul>\n\n<p>Bob starts at the top left in cell (row, column) = (0, 0). Alice's position is given by (x,y).</p>\n\n<p>Determine the shortest path Bob can follow to collect all gold coins and deliver them to Alice. If Bob can't collect and give all the gold coins, return -1.</p>\n    </div>\n\n<div class=\"input-format\">\n        <h3>Function Parameters</h3>\n        <ul>\n            <li><code>maze[maze[0][0],...maze[n-1][m-1]]</code>: a 2D array of integers</li>\n            <li><code>x</code>: an integer denoting Alice's row coordinate</li>\n            <li><code>y</code>: an integer denoting Alice's column coordinate</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, m ≤ 100</li>\n            <li>0 ≤ the number of coins ≤ 10</li>\n            <li>1 ≤ x < n</li>\n            <li>1 ≤ y < m</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n\n<div class=\"example\">\n            <h4>Sample Case 0:</h4>\n            <pre class=\"input\">maze[][] = [[0,2,0], [0,0,1], [1,1,1]]\nx = 1\ny = 1</pre>\n            <pre class=\"output\">2</pre>\n            <div class=\"explanation\">\n                <p>The shortest path Bob can take is (0,0) → (0,1) → (1,1).</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Case 1:</h4>\n            <pre class=\"input\">maze[][] = [[0,1,0], [1,0,1], [0,2,2]]\nx = 1\ny = 1</pre>\n            <pre class=\"output\">-1</pre>\n            <div class=\"explanation\">\n                <p>It is not possible for Bob to reach Alice, so return -1.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Case 2:</h4>\n            <pre class=\"input\">maze[][] = [[0,2,0], [1,1,2], [1,0,0]]\nx = 2\ny = 1</pre>\n            <pre class=\"output\">5</pre>\n            <div class=\"explanation\">\n                <p>The shortest path Bob can take is (0,0) → (0,1) → (0,2) → (1,2) → (2,2) → (2,1).</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1HYtTr3Z873wDsGLJURv4ASwhz6qHtRs2ClDBpWXSGM4/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Thoughtspot",
        "company_id": 13
    },
    {
        "id": 68,
        "title": "Encrypting Strings",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>2. Encrypting Strings</h2>\n\n<div class=\"problem-description\">\n        <p>Implement an encryption algorithm to encrypt the string <code>originalString</code> per the following:</p>\n        <ul>\n            <li>Initialize two empty strings: <code>temporaryString</code> and <code>encryptedString</code>.</li>\n            <li>At each step, perform one of the following two operations. Choose the order of operations to produce the lexicographically minimum possible <code>encryptedString</code>:\n                <ol>\n                    <li>Take the first letter from <code>originalString</code> and append it to the end of <code>temporaryString</code>.</li>\n                    <li>Take the last letter from <code>temporaryString</code> and append it to the end of <code>encryptedString</code>.</li>\n                </ol>\n            </li>\n            <li>Given a string <code>originalString</code>, return the <code>encryptedString</code>.</li>\n        </ul>\n\n<div class=\"note\">\n            <p><strong>Note:</strong> A string <em>a</em> is lexicographically smaller than string <em>b</em> (of the same length) if, in the first position where <em>a</em> and <em>b</em> differ, string <em>a</em> has a letter that appears earlier in the alphabet than the corresponding letter in <em>b</em>.</p>\n        </div>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example\">\n            <p><code>originalString = \"dby\"</code></p>\n            <p>The string is encrypted in the following way:</p>\n            <table class=\"encryption-steps\">\n                <thead>\n                    <tr>\n                        <th>Operation Used</th>\n                        <th>originalString</th>\n                        <th>temporaryString</th>\n                        <th>encryptedString</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr><td>1</td><td>\"by\"</td><td>\"d\"</td><td>\"\"</td></tr>\n                    <tr><td>1</td><td>\"y\"</td><td>\"db\"</td><td>\"\"</td></tr>\n                    <tr><td>2</td><td>\"y\"</td><td>\"d\"</td><td>\"b\"</td></tr>\n                    <tr><td>2</td><td>\"y\"</td><td>\"\"</td><td>\"bd\"</td></tr>\n                    <tr><td>1</td><td>\"\"</td><td>\"y\"</td><td>\"bd\"</td></tr>\n                    <tr><td>2</td><td>\"\"</td><td>\"\"</td><td>\"bdy\"</td></tr>\n                </tbody>\n            </table>\n            <p>Return \"bdy\".</p>\n        </div>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getEncryptedString</code> in the editor below.</p>\n\n<h4>Function Parameters</h4>\n        <p><code>string originalString</code>: the string to encrypt</p>\n\n<h4>Returns</h4>\n        <p><code>string</code>: the encrypted string</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ |originalString| ≤ 2 * 10<sup>5</sup></li>\n            <li><code>originalString</code> consists of lowercase English letters [a-z].</li>\n        </ul>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/18xhzS-Z_HylYXY4EO11MLBhOx0gRh1lvBxCFF4hZeQY/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Thoughtspot",
        "company_id": 13
    },
    {
        "id": 69,
        "title": "Server Clusters",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>3. Server Clusters</h2>\n\n<div class=\"problem-description\">\n        <p>Given an array <code>serverProp</code> representing the properties of n servers. In a pool of servers, two servers located at indexes <i>i</i> and <i>j</i> are considered connected if the greatest common divisor of their properties, <code>serverProp[i]</code> and <code>serverProp[j]</code>, is greater than 1. These connected servers, whether connected directly or indirectly through others, form server clusters in the network.</p>\n\n<p>Determine the size of the cluster to which each server belongs. Report an array of integers where the <i>i<sup>th</sup></i> value represents the size of the cluster to which the <i>i<sup>th</sup></i> server belongs.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getClusterSizes</code> in the editor below.</p>\n        <p><code>getClusterSizes</code> has the following parameters:</p>\n        <ul>\n            <li><code>serverProp[n]</code>: the properties of servers that determine server connectivity</li>\n        </ul>\n    </div>\n\n<div class=\"returns\">\n        <h3>Returns</h3>\n        <ul>\n            <li><code>int[n]</code>: the total size of the cluster to which each server belongs</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ serverProp[i] ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example 1</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\nn = 3\nserverProp = [1, 2, 4]</pre>\n            <pre class=\"output\">Output:\n[1, 2, 2]</pre>\n            <div class=\"explanation\">\n                <p>Based on the given server properties, servers at indexes 1 and 2 are connected.</p>\n                <ul>\n                    <li>Server at vertex 0 is not connected to any other server so the cluster containing it has a size of 1.</li>\n                    <li>Server at vertex 1 is connected to server at vertex 2, forming a cluster of size 2.</li>\n                    <li>Server at vertex 2 is connected to server at vertex 1, forming a cluster of size 2.</li>\n                </ul>\n            </div>\n        </div>\n\n<h3>Example 2</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\nn = 5\nserverProp = [2, 3, 6, 1, 5]</pre>\n            <pre class=\"output\">Output:\n[3, 3, 3, 1, 1]</pre>\n            <div class=\"explanation\">\n                <p>There are connections between the vertices (0, 2) and (1, 2).</p>\n                <ul>\n                    <li>For vertex 0, connected servers are 0, 1, and 2.</li>\n                    <li>For vertex 1, connected servers are 0, 1, and 2.</li>\n                    <li>For vertex 2, connected servers are 0, 1, and 2.</li>\n                    <li>For vertex 3, the connected server is 3.</li>\n                    <li>For vertex 4, the connected server is 4.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/13GLYCCdja6NGPzYXEWiJGGhhLTqwzW_KtE-_oeVnomM/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Thoughtspot",
        "company_id": 13
    },
    {
        "id": 77,
        "title": "Equal Neurons",
        "problem_statement": "<div class=\"problem-container\">\n    <div class=\"problem-header\">\n        <h1>1. Equal Neurons</h1>\n    </div>\n\n<div class=\"problem-description\">\n        <p>There is a neural network with n layers where the number of neurons in the i<sup>th</sup> layer is denoted by layer[i], for all (0 ≤ i < n). In each generation, the system adjusts the number of neurons in a network layer. For all odd generations, 1 neuron is added to at most one layer. Similarly, for even generations, 2 neurons are added to at most one layer.</p>\n        <p>Find the minimum generation in which all the layers can have an equal number of neurons.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function findMinGeneration with the following parameters:</p>\n        <ul>\n            <li><code>vector&lt;int&gt; layer</code>: the number of neurons in the layers of the network</li>\n        </ul>\n        <h4>Returns</h4>\n        <ul>\n            <li><code>long</code>: the minimum number of generations that can have an equal number of neurons for all layers</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 10<sup>5</sup></li>\n            <li>1 ≤ layer[i] ≤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example 1</h3>\n        <p>Given n = 4 and layer = [1, 1, 2, 4]</p>\n\n<table class=\"generation-table\">\n            <thead>\n                <tr>\n                    <th>Generation</th>\n                    <th>Selected Layer</th>\n                    <th>Updated Layers</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>1</td>\n                    <td>1</td>\n                    <td>[2, 1, 2, 4]</td>\n                </tr>\n                <tr>\n                    <td>2</td>\n                    <td>1</td>\n                    <td>[4, 1, 2, 4]</td>\n                </tr>\n                <tr>\n                    <td>3</td>\n                    <td>2</td>\n                    <td>[4, 2, 2, 4]</td>\n                </tr>\n                <tr>\n                    <td>4</td>\n                    <td>2</td>\n                    <td>[4, 4, 2, 4]</td>\n                </tr>\n                <tr>\n                    <td>5</td>\n                    <td>None chosen</td>\n                    <td>[4, 4, 2, 4]</td>\n                </tr>\n                <tr>\n                    <td>6</td>\n                    <td>3</td>\n                    <td>[4, 4, 4, 4]</td>\n                </tr>\n            </tbody>\n        </table>\n        <div class=\"explanation\">\n            <p>The 6<sup>th</sup> generation is the minimum in which all the layers can have an equal number of neurons, i.e., 4.</p>\n        </div>\n\n<h3>Sample Case 0</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\n3\n3\n3\n6</pre>\n            <pre class=\"output\">Output:\n4</pre>\n            <div class=\"explanation\">\n                <table class=\"generation-table\">\n                    <thead>\n                        <tr>\n                            <th>Generation</th>\n                            <th>Selected Layer</th>\n                            <th>Updated Layers</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>1</td>\n                            <td>1</td>\n                            <td>[4, 3, 6]</td>\n                        </tr>\n                        <tr>\n                            <td>2</td>\n                            <td>1</td>\n                            <td>[6, 3, 6]</td>\n                        </tr>\n                        <tr>\n                            <td>3</td>\n                            <td>2</td>\n                            <td>[6, 4, 6]</td>\n                        </tr>\n                        <tr>\n                            <td>4</td>\n                            <td>2</td>\n                            <td>[6, 6, 6]</td>\n                        </tr>\n                    </tbody>\n                </table>\n                <p>The 4th generation is the minimum in which all the layers can have an equal number of neurons.</p>\n            </div>\n        </div>\n    </div>\n</div>\n\n<style>\n.generation-table {\n    border-collapse: collapse;\n    width: 100%;\n    margin: 1em 0;\n}\n\n.generation-table th,\n.generation-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n}\n\n.generation-table th {\n    background-color: #f5f5f5;\n}\n\n.example pre {\n    background-color: #f5f5f5;\n    padding: 1em;\n    border-radius: 4px;\n    margin: 1em 0;\n}\n</style>",
        "google_doc_link": "https://docs.google.com/document/d/1bRl5YC8x0nWoNP_NGJ9HfTcWE3R6VYfwu4wfMoAm4X8/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Thoughtspot",
        "company_id": 13
    },
    {
        "id": 78,
        "title": " Hotspot Connections",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>2. Hotspot Connections</h2>\n\n<div class=\"problem-description\">\n        <p>There are <var>employee_nodes</var> employees in a company, out of which there are <var>k</var> special employees who have data network and share their mobile hotspots with other employees.</p>\n\n<p>There are <var>employee_edges</var> connections already made between the employees, where the <var>i<sup>th</sup></var> connection connects the employees <var>employee_from[i]</var> and <var>employee_to[i]</var>, such that either of the employees can share a mobile hotspot.</p>\n\n<p>Two employees <var>x</var> and <var>y</var> are connected if there is a path between them. All the employees connected to a special employee <var>x</var> will use the mobile hotspot of the special employee <var>x</var>.</p>\n\n<p>Up to now, to restrict data usage, any employee was connected to at most one special employee. As data consumption has increased, any employee can be connected to at most <var>max_connections</var> number of special employees.</p>\n\n<p>Find the maximum number of edges that can be added to the graph such that any employee is connected to at most <var>max_connections</var> special employees.</p>\n    </div>\n\n<div class=\"function-signature\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMaximumEdges</code> with the following parameters:</p>\n        <ul>\n            <li><code>int employee_nodes</code>: the number of employees</li>\n            <li><code>int employee_from[employee_edges]</code>: the one end of the connection</li>\n            <li><code>int employee_to[employee_edges]</code>: the other end of the connection</li>\n            <li><code>int special_employees[k]</code>: the special employees</li>\n            <li><code>int max_connections</code>: the maximum number of special employees to which an employee can be connected</li>\n        </ul>\n\n<h4>Returns</h4>\n        <p><code>long</code>: the maximum number of edges that can be added to the graph such that any employee is connected to at most <var>max_connections</var> number of special employees</p>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ <var>employee_nodes</var> ≤ 2 × 10<sup>5</sup></li>\n            <li>0 ≤ <var>employee_edges</var> ≤ min(2 × 10<sup>5</sup>, <var>employee_nodes</var> × (<var>employee_nodes</var> - 1)/2)</li>\n            <li>1 ≤ <var>max_connections</var> ≤ <var>k</var> ≤ <var>employee_nodes</var></li>\n            <li>1 ≤ <var>employee_from[i]</var>, <var>employee_to[i]</var> ≤ <var>employee_nodes</var></li>\n            <li>1 ≤ <var>special_employees[i]</var> ≤ <var>employee_nodes</var></li>\n        </ul>\n\n<div class=\"notes\">\n            <h4>Note:</h4>\n            <ul>\n                <li>The given graph does not contain self-loops or multiple edges between nodes. The graph formed after adding edges should not contain self-loops or multiple edges.</li>\n                <li>It is guaranteed that in the given graph, no two special employees are connected to each other.</li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\"examples\">\n        <h3>Sample Case 1</h3>\n        <div class=\"example\">\n            <pre class=\"input\">Input:\nemployee_nodes = 6, employee_edges = 2\nemployee_from = [1, 3]\nemployee_to = [2, 4]\nspecial_employees = [2, 5, 6]\nmax_connections = 2</pre>\n            <pre class=\"output\">Output:\n8</pre>\n            <div class=\"explanation\">\n                <h4>Explanation</h4>\n                <p>The optimal way is to connect the following employees:</p>\n                <ul>\n                    <li>Connect employee 3 to employees 1 and 2.</li>\n                    <li>Connect employee 4 to employees 1 and 2.</li>\n                    <li>Connect employee 5 to employees 1, 2, 3, and 4.</li>\n                </ul>\n                <p>Hence, the answer is 8.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1vk_4dZBn9U2bgF4Hwi__p12EODjbAbPB7m7oPiYLjaE/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Thoughtspot",
        "company_id": 13
    },
    {
        "id": 79,
        "title": "File Structure",
        "problem_statement": "<div class=\"problem-container\">\n    <h2>File Structure</h2>\n\n<div class=\"problem-description\">\n        <p>There is an existing directory structure in form of a tree with n nodes and q queries.</p>\n\n<h3>The queries are of three types:</h3>\n        <ol>\n            <li>&lt;mkdir&gt; &lt;folder-x&gt; &lt;folder-y&gt;: Create a folder named &lt;folder-y&gt; under &lt;folder-x&gt;.</li>\n            <li>&lt;rmdir&gt; &lt;folder-x&gt;: Delete &lt;folder-x&gt; from the system, including its subdirectories.</li>\n            <li>&lt;count_subdir&gt; &lt;folder-x&gt;: Compute the total number of folders (possibly immediate or non-immediate) under &lt;folder-x&gt; (including itself) and return the count.</li>\n        </ol>\n\n<p>Return an array of integers representing the result of the third type of query in the same order they are given.</p>\n        <p><strong>Note:</strong> \"folder-1\" is always the root directory, and no query will call for it to be removed.</p>\n    </div>\n\n<div class=\"examples\">\n        <h3>Example</h3>\n        <div class=\"example\">\n            <p>Suppose existingStructureEdges = [[\"folder-1\", \"a\"], [\"folder-1\", \"b\"], [\"folder-1\", \"c\"], [\"a\", \"d\"], [\"a\", \"e\"], [\"e\", \"f\"], [\"c\", \"g\"]] and queries = [\"mkdir d h\", \"rmdir e\", \"count_subdir a\"]</p>\n\n<div class=\"command-table\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Command No.</th>\n                            <th>Command</th>\n                            <th>Action</th>\n                            <th>Result</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>1</td>\n                            <td>mkdir d h</td>\n                            <td>Create new directory \"h\" under \"d\"</td>\n                            <td>\"h\" created under \"d\"</td>\n                        </tr>\n                        <tr>\n                            <td>2</td>\n                            <td>rmdir e</td>\n                            <td>Remove \"e\" and its subdirectories</td>\n                            <td>\"e\" removed</td>\n                        </tr>\n                        <tr>\n                            <td>3</td>\n                            <td>count a</td>\n                            <td>Count subfolders inside \"a\"</td>\n                            <td>Answer: 3</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <p>Hence the answer is [3].</p>\n        </div>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function getSubFolders in the editor below. The function must return an array of integers representing the result of the third type of query in the same order it is given.</p>\n\n<h4>getSubFolders has the following parameter(s):</h4>\n        <ul>\n            <li><code>string existingStructureEdges[n][m]</code>: the connections</li>\n            <li><code>string queries[q]</code>: the queries</li>\n        </ul>\n\n<h4>Returns</h4>\n        <ul>\n            <li><code>int[]</code>: the answers to the queries</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, q ≤ 10³</li>\n            <li>\"folder-1\" is always the root directory, and there will not be a query that removes it from the system.</li>\n            <li>A folder name consists of lowercase characters or digits 0-9 only.</li>\n            <li>It is guaranteed that all folder names are unique.</li>\n            <li>It is guaranteed that deleted folders are not referenced to deletion or used as parent for mkdir.</li>\n            <li>It is guaranteed that there are no cyclic dependencies.</li>\n        </ul>\n    </div>\n\n<div class=\"code-template\">\n        <h3>Code Template</h3>\n        <pre class=\"cpp\"><code>vector&lt;int&gt; getSubFolders(vector&lt;vector&lt;string&gt;&gt; existingStructureEdges, vector&lt;string&gt; queries) {\n    // Implement your solution here\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1-cV1svTTWIzLQZVN9njJdo2tsfQesrT9A0VXIAqJBaQ/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Thoughtspot",
        "company_id": 13
    },
    {
        "id": 86,
        "title": "Image Filtering",
        "problem_statement": "<div class=\"problem-container\">\n    <h1>1. Image Filtering</h1>\n\n<div class=\"problem-description\">\n        <p>There is a collection of <var>n</var> image filters. The <var>i<sup>th</sup></var> filter's processing duration is the array element <var>time[i]</var>. The objective is to apply these filters to <var>m</var> images efficiently.</p>\n\n<p>To achieve this, allocate 0 or more images, referred to as <var>imagesAssigned[i]</var>, to each filter. The sum of <var>imagesAssigned[i]</var> for all filters must equal <var>m</var>, where 1 ≤ i ≤ n. The total time required for applying these filters is given by (<var>imagesAssigned[1] * time[1] + ... + imagesAssigned[n] * time[n]</var>) seconds.</p>\n\n<p>A time constraint, <var>maxTime</var>, is in place, setting an upper limit on the total available processing time. Determine the number of feasible image allocation configurations, ensuring that the total processing time remains less than or equal to <var>maxTime</var>. Given the potential for a large number of configurations, return the result modulo (10<sup>9</sup> + 7).</p>\n\n<p class=\"note\">Note: A configuration is different from the other if, for at least one filter, the images assigned to it differ between both the configurations.</p>\n    </div>\n\n<div class=\"function-description\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getNumConfigurations</code> with the following parameters:</p>\n        <ul>\n            <li><code>int n</code>: the total number of image filters</li>\n            <li><code>int time[n]</code>: the time taken by each image filter to filter one image</li>\n            <li><code>int m</code>: the total number of images to be processed</li>\n            <li><code>int maxTime</code>: the maximum processing time that can be spent on filtering all the images</li>\n        </ul>\n    </div>\n\n<div class=\"constraints\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, m ≤ 300</li>\n            <li>0 ≤ maxTime, time[i] ≤ 300</li>\n        </ul>\n    </div>\n\n<div class=\"examples\">\n        <h3>Examples</h3>\n        <div class=\"example\">\n            <h4>Sample Case 0</h4>\n            <pre class=\"input\">Input:\nn = 3\ntime = [0, 1, 0]\nm = 3\nmaxTime = 0</pre>\n            <pre class=\"output\">Output:\n4</pre>\n            <div class=\"explanation\">\n                <p>The possible configurations for imagesAssigned are [3, 0, 0], [2, 0, 1], [1, 0, 2], and [0, 0, 3], where each configuration will take 0 seconds to filter the images.</p>\n            </div>\n        </div>\n\n<div class=\"example\">\n            <h4>Sample Case 1</h4>\n            <pre class=\"input\">Input:\nn = 3\ntime = [1, 2, 3]\nm = 6\nmaxTime = 5</pre>\n            <pre class=\"output\">Output:\n0</pre>\n            <div class=\"explanation\">\n                <p>There is no way of assigning the images to the filters in maxTime = 5 seconds. The minimum processing time is 6 seconds when they are in the form [6, 0, 0].</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1gNinmuTjHsARoEzBl4jPoYZjn2dI4kg2sheWPe5OCYA/edit?usp=sharing",
        "solution_code": null,
        "company_name": "Thoughtspot",
        "company_id": 13
    }
]