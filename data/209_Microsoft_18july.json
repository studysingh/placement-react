[
    {
        "id": 634,
        "title": "Complementary Pairs",
        "problem_statement": "<h1>Complementary Pairs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Two strings form a complementary pair if there exists some permutation of their concatenation that forms a palindrome. For example, the strings \"abac\" and \"cab\" form a complementary pair since their concatenation \"abaccab\" can be rearranged to form the palindrome \"bcaacab\".</p>\r\n<p>Given an array of strings, find the number of complementary pairs that can be formed. Note that pairs (i, j) and (j, i) are considered the same.</p>\r\n<p>Your task is to complete the function `countComplementaryPairs` which takes a vector of strings, `stringData`, as input and returns a `long` integer representing the number of complementary pairs.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: stringData = [\"abc\", \"abcd\", \"bc\", \"adc\"]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The complementary pairs are:</p>\r\n<ul>\r\n    <li>(\"abc\", \"abcd\"): Concatenation \"abcabcd\". Character counts: a:2, b:2, c:2, d:1. Only 'd' has an odd count, so it can form a palindrome.</li>\r\n    <li>(\"bc\", \"abc\"): Concatenation \"bcabc\". Character counts: a:1, b:2, c:2. Only 'a' has an odd count, so it can form a palindrome.</li>\r\n    <li>(\"abcd\", \"adc\"): Concatenation \"abcdadc\". Character counts: a:2, b:1, c:2, d:2. Only 'b' has an odd count, so it can form a palindrome.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\nball\r\nall\r\ncall\r\nbal\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> The following complementary pairs can be formed:</p>\r\n<ul>\r\n    <li>(\"ball\", \"all\"): Concatenated string \"ballall\". Character counts: b:1, a:2, l:4. Only 'b' has an odd count.</li>\r\n    <li>(\"ball\", \"bal\"): Concatenated string \"ballbal\". Character counts: b:2, a:2, l:4. All characters have even counts.</li>\r\n    <li>(\"all\", \"call\"): Concatenated string \"allcall\". Character counts: a:2, l:4, c:1. Only 'c' has an odd count.</li>\r\n</ul>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\neye\r\naa\r\nc\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> The following complementary pairs can be formed:</p>\r\n<ul>\r\n    <li>(\"eye\", \"aa\"): Concatenated string \"eyeaa\". Character counts: e:2, y:1, a:2. Only 'y' has an odd count.</li>\r\n    <li>(\"aa\", \"c\"): Concatenated string \"aac\". Character counts: a:2, c:1. Only 'c' has an odd count.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; length(stringData[i]) &le; 3 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; sum of the length of strings in stringData &le; 3 * 10<sup>5</sup></code></li>\r\n    <li>All strings consist of lowercase English letters only.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Microsoft_18july",
        "company_id": 209
    }
]