[
    {
        "id": 1370,
        "title": "Team Formation 3",
        "problem_statement": "<h1>Team Formation 3</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given <code>n</code> employees, the time when the <code>i</code>-th employee starts working is represented by the array <code>startTime[i]</code> and the time when they finish the work is represented by the array <code>endTime[i]</code>.</p>\r\n<p>The <code>i</code>-th employee can interact with the <code>j</code>-th employee if their working hours overlap. A team can only be formed if at least one employee of the team can interact with all other team members. Determine the maximum size of such a team.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nstartTime = [1, 6, 4, 3, 1]\r\nendTime = [2, 7, 5, 8, 2]</code></pre>\r\n<p><strong>Explanation:</strong> Consider the group [1, 2, 3]. Employee 3 can interact with other employees in the group, so a team of size 3 is possible. A team with more than 3 employees is impossible. Therefore, the answer is 3.</p>\r\n\r\n<h3>Example 2 (Sample Input 0):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\nstartTime = [2, 5, 6, 8]\r\nendTime = [5, 6, 10, 9]\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> Employee 1 in the group [0, 1, 2] and employee 2 in the group [1, 2, 3] can each interact with the other two group members.</p>\r\n\r\n<h3>Example 3 (Sample Input 1):</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 5\r\nstartTime = [1, 2, 8, 8, 10]\r\nendTime = [4, 8, 12, 9, 11]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> In the group of employees [0, 1, 2, 3], employee 1 can interact with other employees in the group.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>getMaximumTeamSize</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int startTime[n]</code>: the start times of employees' work</li>\r\n    <li><code>int endTime[n]</code>: the end times of employees' work</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the maximum possible team size</li>\r\n</ul>\r\n<pre><code class='language-javascript'>int getMaximumTeamSize(vector&lt;int&gt; startTime, vector&lt;int&gt; endTime) {\r\n    // Function body\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 2 * 10^5</code></li>\r\n    <li><code>1 <= startTime[i] <= endTime[i] <= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tower research_5sep",
        "company_id": 477
    },
    {
        "id": 1371,
        "title": "Compatible Warehouses",
        "problem_statement": "<h1>Compatible Warehouses</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There is a network of warehouses represented as an undirected weighted rooted tree with <code>warehouse_nodes</code> nodes, rooted at warehouse 1. There are <code>warehouse_nodes - 1</code> roads connecting them, with <code>warehouse_weight[i]</code> denoting the distance of the <code>i<sup>th</sup></code> road. Each warehouse has a value assigned to it in the array <code>val</code>.</p>\r\n\r\n<p>A pair of warehouses (u, v) is compatible if:</p>\r\n<ul>\r\n    <li>u is an ancestor of v in the tree network</li>\r\n    <li><code>distance(u, v) &lt;= val[v]</code>, where <code>distance(u, v)</code> is the sum of road distances in the simple path connecting u and v</li>\r\n</ul>\r\n\r\n<p>Your task is to find the number of compatible pairs of warehouses in a network.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>countCompatiblePairs</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int warehouse_nodes</code>: the number of warehouses in the tree network</li>\r\n    <li><code>vector&lt;int&gt; warehouse_from</code>: <code>warehouse_from[i]</code> element is one endpoint of the <code>i<sup>th</sup></code> road</li>\r\n    <li><code>vector&lt;int&gt; warehouse_to</code>: <code>warehouse_to[i]</code> element is the other endpoint of the <code>i<sup>th</sup></code> road</li>\r\n    <li><code>vector&lt;int&gt; warehouse_weight</code>: <code>warehouse_weight[i]</code> element is the length of the <code>i<sup>th</sup></code> road</li>\r\n    <li><code>vector&lt;int&gt; val</code>: <code>val[i]</code> element denotes the value of the <code>i<sup>th</sup></code> warehouse</li>\r\n</ul>\r\n\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>long</code>: a long integer that denotes the number of compatible pairs of warehouses.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nwarehouse_nodes = 6\r\nwarehouse_from = [1, 6, 1, 1, 4]\r\nwarehouse_to = [6, 5, 2, 4, 3]\r\nwarehouse_weight = [4, 1, 3, 2, 1]\r\nval = [2, 1, 3, 1, 5, 4]\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> The compatible pairs of warehouses are:</p>\r\n<ul>\r\n    <li>(1, 6): distance(1, 6) = 4 &lt;= val[6] = 4</li>\r\n    <li>(1, 5): distance(1, 5) = 5 &lt;= val[5] = 5</li>\r\n    <li>(6, 5): distance(6, 5) = 1 &lt;= val[5] = 5</li>\r\n    <li>(4, 3): distance(4, 3) = 1 &lt;= val[3] = 3</li>\r\n    ",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tower research_5sep",
        "company_id": 477
    },
    {
        "id": 1372,
        "title": "Memory MEX",
        "problem_statement": "<h1>Memory MEX</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are n memory blocks, and the size of the i<sup>th</sup> block is given by the array element memoryBlocks[i], where 0 &lt;= i &lt; n.</p>\r\n\r\n<p>The following operation can be performed on memoryBlocks one time:</p>\r\n<ul>\r\n<li>An index x can be selected. The size of memoryBlocks[x] can be increased by 1 unit, but only if memoryBlocks[x] is less than n-1. The smallest integer k not present in memoryBlocks after any number of operations is called a Valid Size or the MEX (minimum excluded value).</li>\r\n</ul>\r\n\r\n<p>The task is to return an array of all possible Valid Sizes that can be achieved using memoryBlocks, sorted in ascending order.</p>\r\n\r\n<p><strong>Note:</strong><br>\r\nThe MEX of memoryBlocks is the smallest non-negative integer not present in the array.</p>\r\n\r\n<p><strong>Example:</strong><br>\r\nGiven n = 3, memoryBlock = [0, 3, 4]</p>\r\n\r\n<p>If no operation on memoryBlocks is performed, then the Valid Size is 1.</p>\r\n\r\n<p>If x = 0, increase the size of memoryBlocks[0] by 1, then the Valid Size is 0.<br>\r\nThere are only two possible Valid Sizes. Hence, the answer is [0, 1], when sorted in ascending order.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function findValidSizes in the editor below.</p>\r\n\r\n<h3>Function Parameters</h3>\r\n<p>int memoryBlocks[n]: the memory block sizes</p>\r\n\r\n<h3>Returns</h3>\r\n<p>int[]: all possible Valid Sizes that can be allocated using memoryBlocks, sorted in ascending order</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li>1 &lt;= n &lt;= 10<sup>5</sup></li>\r\n<li>0 &lt;= memoryBlocks[i] &lt; n</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nSTDIN   FUNCTION\r\n3       memoryBlocks[] size n = 3\r\n0       memoryBlocks = [0, 2, 2]\r\n2\r\n2\r\nOutput:\r\n0\r\n1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>If no operation is performed, then the Valid Size is 1.</p>\r\n<p>Selected index x = 0 and increase the size of memoryBlocks[0] by 1, then memoryBlocks becomes [1, 2, 2]. Now the possible Valid Size is 0.</p>\r\n<p>Hence, the answer is [0, 1] which is sorted in ascending order.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nSTDIN   FUNCTION\r\n3       memoryBlocks[] size n = 3\r\n2       memoryBlocks = [2, 2, 2]\r\n2\r\n2\r\nOutput:\r\n0</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>With no operation on memoryBlocks, the possible Valid Size is 0, which is the MEX of memoryBlocks.</p>\r\n<p>There is no set of operations through which the MEX is 1 or higher, hence the only possible Valid Size is 0.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Tower research_5sep",
        "company_id": 477
    }
]