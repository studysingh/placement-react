[
    {
        "id": 140,
        "title": "Pattern Matching with Wildcard",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Question 3</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Given s and x, determine the zero-based index of the first occurrence of x in s.</p>\n\n<ul>\n            <li>String s consists of lowercase letters in the range ascii[a-z].</li>\n            <li>String x consists of lowercase letters and may also contain a single wildcard character, *, that represents <em>any one character</em>.</li>\n        </ul>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function firstOccurrence in the editor below. The function must return an integer denoting the zero-based index of the first occurrence of string x in s. If x is not in s, return -1 instead.</p>\n\n<h4>Parameters:</h4>\n        <ul>\n            <li><code>string s</code>: a string of lowercase letters</li>\n            <li><code>string x</code>: a string of lowercase letters which may contain 1 instance of the wildcard character *</li>\n        </ul>\n\n<h4>Returns:</h4>\n        <ul>\n            <li><code>int</code>: the index of the first occurrence, or -1 if x does not occur in s</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ length of s ≤ 5 × 10<sup>5</sup></li>\n            <li>1 ≤ length of x ≤ 1000</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>s = \\\"xabcdey\\\"<br>\n            x = \\\"ab*de\\\"</p>\n\n<p>The first match is at index 1.</p>\n\n<table class=\\\"pattern-match\\\">\n                <tr>\n                    <th>s</th>\n                    <td>x</td>\n                    <td>a</td>\n                    <td>b</td>\n                    <td>c</td>\n                    <td>d</td>\n                    <td>e</td>\n                    <td>y</td>\n                </tr>\n                <tr>\n                    <th>x</th>\n                    <td></td>\n                    <td>a</td>\n                    <td>b</td>\n                    <td>*</td>\n                    <td>d</td>\n                    <td>e</td>\n                    <td></td>\n                </tr>\n                <tr>\n                    <th>Index</th>\n                    <td>0</td>\n                    <td>1</td>\n                    <td>2</td>\n                    <td>3</td>\n                    <td>4</td>\n                    <td>5</td>\n                    <td>6</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format for Custom Testing</h3>\n        <p>Input from stdin will be processed as follows and passed to the function.</p>\n        <p>The first line contains the string s.<br>\n        The second line contains the string x.</p>\n    </div>\n\n<div class=\\\"sample-cases\\\">\n        <h3>Sample Cases</h3>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">juliasamanthantjulia\nant</pre>\n            <pre class=\\\"output\\\">8</pre>\n        </div>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 1</h4>\n            <pre class=\\\"input\\\">juliasamanthasamanthajulia\nhas</pre>\n            <pre class=\\\"output\\\">11</pre>\n        </div>\n\n<div class=\\\"sample-case\\\">\n            <h4>Sample Case 2</h4>\n            <pre class=\\\"input\\\">juliasamanthasamanthajulia\nant*as</pre>\n            <pre class=\\\"output\\\">8</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1xNV9XGizad014LkmLnu4GQvooTN0uY69YE9mF7iuhWA/edit?usp=sharing",
        "solution_code": "#include<bits/stdc++.h>\\nusing namespace std;\\n\\nint firstOccurrence(string s, string x) {\\n    int n = s.size(), m = x.size(), w = -1;\\n    for(int i=0;i<m;i++) if(x[i] == \\'*\\'){ w = i; break;}\\n    if(w == -1){\\n        vector<int> l(m, 0);\\n        for(int i=1,k=0;i<m;i++){\\n            while(k>0 && x[i]!=x[k]) k=l[k-1];\\n            if(x[i]==x[k]) k++;\\n            l[i]=k;\\n        }\\n        int j=0;\\n        for(int i=0;i<n;i++){\\n            while(j>0 && s[i]!=x[j]) j=l[j-1];\\n            if(s[i]==x[j]) j++;\\n            if(j==m) return i-m+1;\\n        }\\n        return -1;\\n    }\\n    else{\\n        string p=x.substr(0,w), t=x.substr(w+1);\\n        int a=p.size(), b=t.size();\\n        if(a+1+b>n) return -1;\\n        vector<int> l(a,0);\\n        for(int i=1,k=0;i<a;i++){\\n            while(k>0 && p[i]!=p[k]) k=l[k-1];\\n            if(p[i]==p[k]) k++;\\n            l[i]=k;\\n        }\\n        vector<int> r(b,0);\\n        for(int i=1,k=0;i<b;i++){\\n            while(k>0 && t[i]!=t[k]) k=r[k-1];\\n            if(t[i]==t[k]) k++;\\n            r[i]=k;\\n        }\\n        vector<int> m;\\n        int j=0;\\n        for(int i=0;i<n;i++){\\n            while(j>0 && s[i]!=p[j]) j=l[j-1];\\n            if(s[i]==p[j]) j++;\\n            if(j==a){\\n                m.push_back(i-a+1);\\n                j=l[j-1];\\n            }\\n        }\\n        vector<int> v(n,0);\\n        j=0;\\n        for(int i=0;i<n;i++){\\n            while(j>0 && s[i]!=t[j]) j=r[j-1];\\n            if(s[i]==t[j]) j++;\\n            if(j==b){\\n                v[i-b+1]=1;\\n                j=r[j-1];\\n            }\\n        }\\n        for(auto p:m){\\n            if(p+a+1+b-1>=n) continue;\\n            if(v[p+a+1]) return p;\\n        }\\n        return -1;\\n    }\\n}\\n\\nint main() {\\n    string s,x;\\n    cin>>s>>x;\\n    cout<<firstOccurrence(s,x);\\n}",
        "company_name": "TSMC",
        "company_id": 36
    },
    {
        "id": 141,
        "title": "User Session Time Filter",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>User Session Time Filte</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Application logs are used in analysis of interactions with an application and may be used to detect specific actions.</p>\n\n<p>A log file is provided as a string array where each entry is in the form \\\"<code>user_id timestamp action</code>\\\". Each of the values is separated by a space.</p>\n\n<ul>\n            <li>Both <code>user_id</code> and <code>timestamp</code> consist only of digits, are at most 9 digits long and start with a non-zero digit.</li>\n            <li><code>timestamp</code> represents the time in seconds since the application was last launched</li>\n            <li><code>action</code> will be either \\\"sign-in\\\" or \\\"sign-out\\\"</li>\n        </ul>\n\n<p>Given a log with entries in no particular order, return an array of strings that denote <code>user_id</code>\\'s of users who signed out in <code>maxSpan</code> seconds or less after signing in.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>processLogs</code> in the editor below.</p>\n\n<p>The function has the following parameter(s):</p>\n        <ul>\n            <li><code>string logs[n]</code>: each <code>logs[i]</code> denotes the i<sup>th</sup> entry in the logs</li>\n            <li><code>int maxSpan</code>: the maximum difference in seconds between when a user logs in and logs out for the user to be included in the result</li>\n        </ul>\n\n<p>Returns:</p>\n        <ul>\n            <li><code>string[]</code>: a string array of user id\\'s, sorted ascending by numeric value</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, maxSpan ≤ 10<sup>5</sup></li>\n            <li>1 ≤ maxSpan ≤ n</li>\n            <li>Each <code>user_id</code> contains only characters in the range ascii[\\'0\\'-\\'9\\'], is at most 9 digits long and starts with a non-zero digit.</li>\n            <li>Each <code>timestamp</code> contains only characters in the range ascii[\\'0\\'-\\'9\\'] and begins with a non-zero digit</li>\n            <li>0 < timestamp ≤ 10<sup>9</sup></li>\n            <li>Each <code>action</code> is either \\\"sign-in\\\" or \\\"sign-out\\\".</li>\n            <li>Each user\\'s sign-in timestamp < sign-out timestamp</li>\n            <li>Each user signs in for only 1 session.</li>\n            <li>The result will contain at least one element.</li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>Input from stdin will be processed as follows and passed to the function.</p>\n        <ul>\n            <li>The first line contains an integer, n, the size of <code>logs</code>.</li>\n            <li>Each of the next n lines contains a log file entry, <code>logs[i]</code>.</li>\n            <li>The last line contains a single integer, maxSpan.</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Sample Case 0</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n6\n99 1 sign-in\n100 10 sign-in\n50 20 sign-in\n100 15 sign-out\n50 26 sign-out\n99 2 sign-out\n5</pre>\n            <pre class=\\\"output\\\">Output:\n99\n100</pre>\n            <div class=\\\"explanation\\\">\n                <table>\n                    <tr><th>ID</th><th>Sign in</th><th>Sign out</th><th>Time delta</th></tr>\n                    <tr><td>50</td><td>20</td><td>26</td><td>6</td></tr>\n                    <tr><td>99</td><td>1</td><td>2</td><td>1</td></tr>\n                    <tr><td>100</td><td>10</td><td>15</td><td>5</td></tr>\n                </table>\n            </div>\n        </div>\n\n<h3>Sample Case 1</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n4\n60 12 sign-in\n80 20 sign-out\n10 20 sign-in\n60 20 sign-out\n100</pre>\n            <pre class=\\\"output\\\">Output:\n60</pre>\n            <div class=\\\"explanation\\\">\n                <p>Only user id 60 has signed out and was not signed in for more than maxSpan = 100 seconds. The return array is [\\\"60\\\"].</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <pre class=\\\"cpp\\\"><code>vector&lt;string&gt; processLogs(vector&lt;string&gt; logs, int maxSpan) {\n\n}</code></pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/10JrKPQhIMnG3ycRJYHBdafCSrsJqAANZmCbzrEhAJ80/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nstruct UserLog {\\n    int sin;\\n    int sout;\\n    bool has_sin;\\n    bool has_sout;\\n    UserLog() : sin(0), sout(0), has_sin(false), has_sout(false) {}\\n};\\n\\nvector<string> processLogs(vector<string> logs, int span) {\\n    unordered_map<int, UserLog> logs_map;\\n    \\n    for (const auto& log : logs) {\\n        size_t pos1 = log.find(\\' \\');\\n        size_t pos2 = log.find(\\' \\', pos1 + 1);\\n        \\n        string uid_str = log.substr(0, pos1);\\n        string ts_str = log.substr(pos1 + 1, pos2 - pos1 - 1);\\n        string act = log.substr(pos2 + 1);\\n        \\n        int uid = stoi(uid_str);\\n        int ts = stoi(ts_str);\\n        \\n        if (act == \\\"sign-in\\\") {\\n            logs_map[uid].sin = ts;\\n            logs_map[uid].has_sin = true;\\n        } else if (act == \\\"sign-out\\\") {\\n            logs_map[uid].sout = ts;\\n            logs_map[uid].has_sout = true;\\n        }\\n    }\\n    \\n    vector<int> users;\\n    \\n    for (const auto& entry : logs_map) {\\n        const UserLog& log = entry.second;\\n        \\n        if (log.has_sin && log.has_sout && (log.sout - log.sin <= span)) {\\n            users.push_back(entry.first);\\n        }\\n    }\\n    \\n    sort(users.begin(), users.end());\\n    \\n    vector<string> result;\\n    result.reserve(users.size());\\n    for (const auto& uid : users) {\\n        result.push_back(to_string(uid));\\n    }\\n    \\n    return result;\\n}",
        "company_name": "TSMC",
        "company_id": 36
    },
    {
        "id": 142,
        "title": "Remove Nodes Greater Than X",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Remove Nodes Greater Than X</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Given a singly linked list and an integer, x, remove nodes greater than x.</p>\n\n<div class=\\\"function-description\\\">\n            <h3>Function Description</h3>\n            <p>Complete the function <code>removeNodes</code> in the editor below. The function must return a reference to the root node of the final list.</p>\n\n<h4>Parameters:</h4>\n            <ul>\n                <li><code>node listHead</code>: a reference to the root node of the singly-linked list</li>\n                <li><code>int x</code>: the maximum value to be included in the returned singly-linked list</li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n, x ≤ 10<sup>5</sup></li>\n            <li>1 ≤ SinglyLinkedListNode values ≤ 10<sup>5</sup></li>\n        </ul>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format for Custom Testing</h3>\n        <p>Input from stdin will be processed as follows and passed to the function:</p>\n        <ul>\n            <li>The first line contains an integer n, the number of nodes in the linked list.</li>\n            <li>The next n lines each contain an element to insert into the linked list.</li>\n            <li>The last line contains x, the maximum value allowable in the linked list.</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n<div class=\\\"example\\\" id=\\\"sample-case-0\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\n5\n1\n2\n3\n4\n5\n3</pre>\n            <pre class=\\\"output\\\">Output:\n1\n2\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>After removing the nodes having a value > 3, list = 1 → 2 → 3.</p>\n            </div>\n        </div>\n\n<div class=\\\"example\\\" id=\\\"sample-case-1\\\">\n            <h4>Sample Case 1</h4>\n            <pre class=\\\"input\\\">Input:\n5\n5\n2\n1\n6\n7\n5</pre>\n            <pre class=\\\"output\\\">Output:\n5\n2\n1</pre>\n            <div class=\\\"explanation\\\">\n                <p>After removing the nodes having a value > 5, list = 5 → 2 → 1.</p>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"code-template\\\">\n        <h3>Code Template</h3>\n        <pre class=\\\"language-cpp\\\">\nSinglyLinkedListNode {\n    int data;\n    SinglyLinkedListNode* next;\n};\n\nSinglyLinkedListNode* removeNodes(SinglyLinkedListNode* listHead, int x) {\n    // Write your code here\n}</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1WFcS-au65Mdg2x4GwzyE0mYOZEgghYTFcRYW2L0WqbI/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nstruct SinglyLinkedListNode {\\n    int data;\\n    SinglyLinkedListNode* next;\\n};\\n\\nSinglyLinkedListNode* removeNodes(SinglyLinkedListNode* listHead, int x) {\\n    SinglyLinkedListNode dummy;\\n    dummy.next = listHead;\\n    SinglyLinkedListNode* current = &dummy;\\n    while (current->next != nullptr) {\\n        if (current->next->data > x) {\\n            SinglyLinkedListNode* temp = current->next;\\n            current->next = current->next->next;\\n            delete temp;\\n        } else {\\n            current = current->next;\\n        }\\n    }\\n    return dummy.next;\\n}",
        "company_name": "TSMC",
        "company_id": 36
    }
]