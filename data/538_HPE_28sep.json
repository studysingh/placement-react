[
    {
        "id": 1536,
        "title": "Even Difference",
        "problem_statement": "<h1>Even Difference</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Find the length of the longest subsequence in an array such that when the subsequence is sorted in increasing order, the sum of differences between adjacent elements is even.</p>\r\n<p>Complete the function <code>findLongestSubsequence</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int arr[]</code>: an array of integers</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int</code>: the length of the longest subsequence as described</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p>Consider <code>n = 4</code> and <code>arr = [2, 4, 1, 7]</code>.</p>\r\n<p>Some of the subsequences:</p>\r\n<ul>\r\n    <li><code>[2, 4, 1]</code>\r\n        <ul>\r\n            <li>Sorted: <code>[1, 2, 4]</code></li>\r\n            <li>Differences: <code>|1-2| + |2-4| = 1 + 2 = 3</code> (Odd)</li>\r\n            <li>Not valid</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>[2, 1, 7]</code>\r\n        <ul>\r\n            <li>Sorted: <code>[1, 2, 7]</code></li>\r\n            <li>Differences: <code>|1-2| + |2-7| = 1 + 5 = 6</code> (Even)</li>\r\n            <li>Valid, length 3</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>[2, 4, 1, 7]</code>\r\n        <ul>\r\n            <li>Sorted: <code>[1, 2, 4, 7]</code></li>\r\n            <li>Differences: <code>|1-2| + |2-4| + |4-7| = 1 + 2 + 3 = 6</code> (Even)</li>\r\n            <li>Valid, length 4</li>\r\n        </ul>\r\n    </li>\r\n    <li><code>[2, 1]</code>\r\n        <ul>\r\n            <li>Sorted: <code>[1, 2]</code></li>\r\n            <li>Differences: <code>|1-2| = 1</code> (Odd)</li>\r\n            <li>Not valid</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The maximum possible length of a valid subsequence is 4.</p>\r\n\r\n<h3>Example 2 (Sample Case 0):</h3>\r\n<pre><code class='language-text'>Input:\r\n7\r\n7\r\n5\r\n6\r\n2\r\n3\r\n2\r\n4\r\nOutput:\r\n6</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>Consider the subsequence <code>[5, 6, 2, 3, 2, 4]</code>.</li>\r\n    <li>Arrange the subsequence in ascending order: <code>[2, 2, 3, 4, 5, 6]</code>.</li>\r\n    <li>The differences are 0, 1, 1, 1, 1.</li>\r\n    <li><code>0+1+1+1+1 = 4</code> (which is an even sum).</li>\r\n</ul>\r\n\r\n<h3>Example 3 (Sample Case 1):</h3>\r\n<pre><code class='language-text'>Input:\r\n4\r\n1\r\n3\r\n5\r\n7\r\nOutput:\r\n4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>The entire array can be used.</li>\r\n    <li>Arrange the subsequence in ascending order: <code>[1, 3, 5, 7]</code>.</li>\r\n    <li>The adjacent differences are 2, 2, 2.</li>\r\n    <li><code>2+2+2 = 6</code> (which is an even sum).</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 &le; n &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; arr[i] &le; 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HPE_28sep",
        "company_id": 538
    },
    {
        "id": 1537,
        "title": "No Ancestor Subset",
        "problem_statement": "<h1>No Ancestor Subset</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a tree with <code>tree_nodes</code> nodes, where each node <code>i</code> has an associated weight <code>weight[i]</code> (1-based indexing). The tree is rooted at node 1.</p>\r\n<p>A subset of nodes is called \"good\" if there is no pair of nodes where one node is an ancestor of the other.</p>\r\n<p>Find the maximum sum of weights from nodes that form a good subset.</p>\r\n<p><strong>Note:</strong> A node <code>u</code> is an ancestor of node <code>v</code> if it lies on the direct path from the root to node <code>v</code>.</p>\r\n\r\n<p>Complete the function <code>findMaximumSum</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int tree_nodes</code>: the number of nodes</li>\r\n    <li><code>int tree_from[tree_nodes - 1]</code>: one set of endpoints of the edges</li>\r\n    <li><code>int tree_to[tree_nodes - 1]</code>: the other set of endpoints of the edges</li>\r\n    <li><code>int weight[tree_nodes]</code>: the weights of the nodes</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long</code>: the maximum sum of nodes of a good subset</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3 2\r\n1 2\r\n1 3\r\n3\r\n2\r\n2\r\n1\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe tree has 3 nodes. Edges are (1,2) and (1,3). Weights are <code>weight = [2, 2, 1]</code> for nodes 1, 2, 3 respectively.\r\nNode 1 (weight 2) is the root. Node 2 (weight 2) and Node 3 (weight 1) are its children.\r\nPossible good subsets and their sums:\r\n<ul>\r\n    <li><code>{1}</code>, sum = 2</li>\r\n    <li><code>{2}</code>, sum = 2</li>\r\n    <li><code>{3}</code>, sum = 1</li>\r\n    <li><code>{2,3}</code>, sum = 2 + 1 = 3</li>\r\n</ul>\r\nSubsets like <code>{1,2}</code>, <code>{1,3}</code>, <code>{1,2,3}</code> are not good because 1 is an ancestor of 2 and 3.\r\nThe maximum sum of weights of nodes forming a good subset is 3, achieved by choosing <code>{2, 3}</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5 4\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n5\r\n2\r\n6\r\n2\r\n3\r\n1\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe tree has 5 nodes. Edges are (1,2), (1,3), (2,4), (3,5). Weights are <code>weight = [2, 6, 2, 3, 1]</code> for nodes 1, 2, 3, 4, 5 respectively.\r\nNode 1 (weight 2) is the root.\r\nNode 2 (weight 6) and Node 3 (weight 2) are children of Node 1.\r\nNode 4 (weight 3) is a child of Node 2.\r\nNode 5 (weight 1) is a child of Node 3.\r\nIt is optimal to choose <code>{2, 5}</code> with a total weight of 6 + 1 = 7.\r\nNote that <code>{1, 3, 4, 5}</code> is not valid because 1 is an ancestor of 3, 4, and 5.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= tree_nodes &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= tree_from[i], tree_to[i] &lt;= tree_nodes</code></li>\r\n    <li><code>1 &lt;= weight[i] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "HPE_28sep",
        "company_id": 538
    }
]