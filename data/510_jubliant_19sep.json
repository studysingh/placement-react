[
    {
        "id": 1453,
        "title": "Network Formation",
        "problem_statement": "<h1>Network Formation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A software development company aims to establish multiple shared computing systems within an office environment.</p>\r\n<p>The criteria for computers to be part of the same network are as follows:</p>\r\n<ol>\r\n    <li>They must be adjacent to each other.</li>\r\n    <li>Each network must include a minimum number of computers.</li>\r\n    <li>The combined processing speed of the computers in the network must meet or exceed a specified threshold.</li>\r\n    <li>A computer can belong to only one network.</li>\r\n</ol>\r\n<p>Given the processing speeds and the sequence of the computers, along with the network constraints, determine the maximum number of networks that can be formed.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>maximumNetworks</code> with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int n</code>: The total number of computers.</li>\r\n    <li><code>int[] speed</code>: An array where <code>speed[i]</code> denotes the processing speed of the i<sup>th</sup> computer.</li>\r\n    <li><code>int minComps</code>: The minimum number of computers each network must have.</li>\r\n    <li><code>long speedThreshold</code>: The minimum total processing speed a network must have.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: The maximum number of networks that can be formed from the computers.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 6, speed = [5, 7, 9, 12, 10, 13], minComps = 2, speedThreshold = 15\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> There are <code>n = 6</code> computers. Each network needs to have a minimum of <code>minComps = 2</code> computers and a total processing speed of at least <code>speedThreshold = 15</code>.</p>\r\n<ul>\r\n    <li>The first network includes the second, third, and fourth computers (indices 1, 2, 3 with speeds 7, 9, 12), resulting in a total processing speed of 7 + 9 + 12 = 28. This is above the threshold of 15.</li>\r\n    <li>The second network includes the fifth and sixth computers (indices 4, 5 with speeds 10, 13), with a total processing speed of 10 + 13 = 23. This is above the threshold of 15.</li>\r\n</ul>\r\n<p>The maximum number of networks that can be formed is 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 7, speed = [3, 3, 2, 5, 3, 2, 4], minComps = 2, speedThreshold = 7\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong> One optimal way to form the networks is to use the third and fourth computers (indices 2, 3 with speeds 2, 5) to form the first network, and the last three computers (indices 4, 5, 6 with speeds 3, 2, 4) to form the second network. Both networks have at least <code>minComps = 2</code> computers and a total processing speed of (2 + 5) = 7 and (3 + 2 + 4) = 9, which are not below the threshold.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= speed[i] <= 10^9</code></li>\r\n    <li><code>1 <= minComps <= n</code></li>\r\n    <li><code>1 <= speedThreshold <= 10^14</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jubliant_19sep",
        "company_id": 510
    },
    {
        "id": 1454,
        "title": "SQL: Cryptocurrency Exchange Wallets Report",
        "problem_statement": "<h1>SQL: Cryptocurrency Exchange Wallets Report</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Generate a report of Ethereum wallets and their balances based on transaction amounts.</p>\r\n<p>Your result should include:</p>\r\n<ul>\r\n    <li>Wallet address</li>\r\n    <li>Number of confirmed transactions</li>\r\n    <li>Balance (sum of all confirmed transaction amounts)</li>\r\n</ul>\r\n\r\n<h2>Requirements</h2>\r\n<ul>\r\n    <li>Only include transactions with 10 or more confirmations.</li>\r\n    <li>Only include wallets with positive balances.</li>\r\n    <li>Sort results in descending order by balance.</li>\r\n</ul>\r\n\r\n<h2>Schema</h2>\r\n<p><strong>Table:</strong> <code>wallets</code></p>\r\n<pre><code class='language-text'>+---------+--------------+-------------------+\r\n| name    | type         | description       |\r\n+---------+--------------+-------------------+\r\n| id      | SMALLINT     | unique ID, primary key |\r\n| address | VARCHAR(255) |                   |\r\n+---------+--------------+-------------------+</code></pre>\r\n\r\n<p><strong>Table:</strong> <code>transactions</code></p>\r\n<pre><code class='language-text'>+---------------+--------------+-------------------+\r\n| name          | type         | description       |\r\n+---------------+--------------+-------------------+\r\n| wallet_id     | SMALLINT     | foreign key, wallets.id |\r\n| amount        | DECIMAL(6,3) |                   |\r\n| confirmations | SMALLINT     |                   |\r\n+---------------+--------------+-------------------+</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<p><strong>Table:</strong> <code>wallets</code></p>\r\n<pre><code class='language-text'>+----+------------------------------------------+\r\n| id | address                                  |\r\n+----+------------------------------------------+\r\n| 1  | 0xce7a99fb564f654c1f48e9b687375b868553d7ec |\r\n| 2  | 0x7a70b14c1f883e5acca29d75413e803e4d     |\r\n| 3  | 0x5d386db0077b732d273e2c00e5168d1dae     |\r\n| 4  | 0x3b14e880a15bbdbeaacc38c3a1dca182a209e953 |\r\n| 5  | 0xc45a4f90ddb00df4eb7df2cfe6a01dcafd     |\r\n+----+------------------------------------------+</code></pre>\r\n\r\n<p><strong>Table:</strong> <code>transactions</code></p>\r\n<pre><code class='language-text'>+-----------+---------+---------------+\r\n| wallet_id | amount  | confirmations |\r\n+-----------+---------+---------------+\r\n| 1         | 92.254  | 40            |\r\n| 1         | 91.815  | 45            |\r\n| 2         | 74.581  | 11            |\r\n| 2         | 99.270  | 19            |\r\n| 2         | -34.418 | 38            |\r\n| 2         | -63.751 | 42            |\r\n| 2         | -44.135 | 46            |\r\n| 3         | 7.081   | 7             |\r\n| 3         | -3.689  | 20            |\r\n| 3         | 80.335  | 27            |\r\n| 4         | 94.665  | 14            |\r\n| 4         | 86.743  | 16            |\r\n| 4         | -22.050 | 43            |\r\n| 5         | -30.202 | 8             |\r\n| 5         | -52.135 | 13            |\r\n| 5         | -87.167 | 31            |\r\n| 5         | 45.879  | 32            |\r\n| 5         | -70.605 | 37            |\r\n| 5         | -67.584 | 37            |\r\n| 5         | 8.219   | 49            |\r\n+-----------+---------+---------------+</code></pre>\r\n\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>+------------------------------------------+----------------------------+-----------+\r\n| address                                  | num_confirmed_transactions | balance   |\r\n+------------------------------------------+----------------------------+-----------+\r\n| 0xce7a99fb564f654c1f48e9b687375b868553d7ec | 2                          | 184.069   |\r\n| 0x3b14e880a15bbdbeaacc38c3a1dca182a209e953 | 3                          | 159.358   |\r\n| 0x5d386db0077b732d273e2c00e5168d1dae     | 2                          | 76.646    |\r\n| 0x7a70b14c1f883e5acca29d75413e803e4d     | 5                          | 31.547    |\r\n+------------------------------------------+----------------------------+-----------+</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jubliant_19sep",
        "company_id": 510
    },
    {
        "id": 1455,
        "title": "Alloy Production",
        "problem_statement": "<h1>Alloy Production</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A foundry produces an alloy using <code>n</code> different metals. For each metal:</p>\r\n<ul>\r\n    <li><code>composition[i]</code> represents the quantity required for 1 unit of alloy</li>\r\n    <li><code>stock[i]</code> represents the current inventory</li>\r\n    <li><code>cost[i]</code> represents the cost per unit</li>\r\n</ul>\r\n<p>Given a limited budget, determine the maximum units of alloy that can be produced using the available stock plus what can be purchased within the budget.</p>\r\n\r\n<p>Complete the function <code>findMaximumAlloyUnits</code> in the editor with the following parameters:</p>\r\n<ul>\r\n    <li><code>int composition[n]</code>: the composition of metals in 1 unit of alloy</li>\r\n    <li><code>int stock[n]</code>: the units of metal type <code>i</code> that the company has in stock</li>\r\n    <li><code>int cost[n]</code>: the costs of metal type <code>i</code></li>\r\n    <li><code>int budget</code>: the total money the company can spend</li>\r\n</ul>\r\n<p><strong>Returns:</strong> <code>int</code>: the maximum unit of alloys that can be produced</p>\r\n\r\n<pre><code class='language-cpp'>int findMaximumAlloyUnits(vector&lt;int&gt; composition, vector&lt;int&gt; stock, vector&lt;int&gt; cost, int budget) {\r\n    // Function body to be implemented\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\ncomposition = [1, 2]\r\nstock = [0, 1]\r\ncost = [1, 1]\r\nbudget = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>For 1 unit of alloy:</strong>\r\n        <ul>\r\n            <li>Required: [1, 2] units of each metal</li>\r\n            <li>Available: [0, 1] units</li>\r\n            <li>Need to purchase: [1, 1] additional units</li>\r\n            <li>Purchase cost: (1 &times; 1) + (1 &times; 1) = 2 (within budget)</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>For 2 units of alloy:</strong>\r\n        <ul>\r\n            <li>Required: [2, 4] units of each metal</li>\r\n            <li>Available: [0, 1] units</li>\r\n            <li>Need to purchase: [2, 3] additional units</li>\r\n            <li>Purchase cost: (2 &times; 1) + (3 &times; 1) = 5 (exceeds budget)</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>The maximum possible alloy production is 1 unit.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\ncomposition = [2, 1, 2]\r\nstock = [1, 0, 0]\r\ncost = [2, 2, 1]\r\nbudget = 14\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li><strong>For 2 units:</strong>\r\n        <ul>\r\n            <li>Required quantity = [4, 2, 4]</li>\r\n            <li>Stock = [1, 0, 0]</li>\r\n            <li>Extra metal requirements = [3, 2, 4]</li>\r\n            <li>Cost = (3 &times; 2) + (2 &times; 2) + (4 &times; 1) = 6 + 4 + 4 = 14, which is in the budget.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>For 3 units:</strong>\r\n        <ul>\r\n            <li>Required quantity = [6, 3, 6]</li>\r\n            <li>Stock = [1, 0, 0]</li>\r\n            <li>Extra metal requirements = [5, 3, 6]</li>\r\n            <li>Cost = (5 &times; 2) + (3 &times; 2) + (6 &times; 1) = 10 + 6 + 6 = 22, which is beyond the budget.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= budget &lt;= 10^9</code></li>\r\n    <li><code>1 &lt;= composition[i] &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= stock[i] &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= cost[i] &lt;= 10^5</code></li>\r\n    <li><code>composition[i] * cost[i] &lt;= 2 * 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jubliant_19sep",
        "company_id": 510
    },
    {
        "id": 1456,
        "title": "Load Balancing",
        "problem_statement": "<h1>Load Balancing</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Develop a prototype for a resource allocation system within a distributed parallel computing framework.</p>\r\n<p>You have <code>n</code> resources and <code>m</code> tasks to schedule, where the <code>i<sup>th</sup></code> task has a processing time of <code>burstTime[i]</code>. The total load time of a resource is the sum of the burst times of the jobs assigned to it. Each resource can only be allocated jobs in a contiguous segment, i.e., from some index <code>x</code> to some index <code>y</code> (<code>burstTime[x], burstTime[x+1], ..., burstTime[y]</code>).</p>\r\n<p>Determine the minimum possible value of the maximum total load time across all resources.</p>\r\n<p>Complete the function <code>getMinMaxLoadTime</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int n</code>: the number of resources.</li>\r\n    <li><code>int burstTime[m]</code>: the burst time of jobs.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>long int</code>: the minimum max load time of the job schedule.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<p>Consider <code>n = 3</code>, <code>m = 6</code>, <code>burstTime = [4, 3, 2, 2, 2, 6]</code>.</p>\r\n<p>An optimal resource allocation is shown:</p>\r\n<p>\r\n    Server 1: Jobs 4, 3; Total Load Time 4 + 3 = 7<br>\r\n    Server 2: Jobs 2, 2, 2; Total Load Time 2 + 2 + 2 = 6<br>\r\n    Server 3: Jobs 6; Total Load Time 6\r\n</p>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 2\r\nburstTime = [9, 2, 4, 4, 5]\r\nOutput: 13</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to allocate the first two jobs (9, 2) to the first resource and the remaining three jobs (4, 4, 5) to the other resource. Total load times are 9 + 2 = 11 and 4 + 4 + 5 = 13. The maximum load is 13.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\nburstTime = [7, 2, 3, 4, 5]\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> It is optimal to allocate the first job (7) to the first resource, the last job (5) to the second resource, and the remaining three jobs (2, 3, 4) to the third resource. Total load times are 7, 5, and 2 + 3 + 4 = 9, respectively. The maximum load is 9.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= m &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= burstTime[i] &lt;= 10<sup>9</sup></code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jubliant_19sep",
        "company_id": 510
    },
    {
        "id": 1457,
        "title": "Merge Intervals",
        "problem_statement": "<h1>Merge Intervals</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a function to merge overlapping time intervals. Given a collection of time intervals represented as pairs <code>[start, end]</code>, merge any overlapping intervals and return them sorted by their start times.</p>\r\n<p>Complete the function <code>getMergedIntervals</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int intervals[n][2]</code>: the time intervals</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int[n][2]</code>: the merged intervals in sorted order</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n2\r\n6 9\r\n2 3\r\n9 11\r\n1 5\r\n14 18\r\nOutput:\r\n1 5\r\n6 11\r\n14 18</code></pre>\r\n<p><strong>Explanation:</strong> The intervals <code>[2, 3]</code> and <code>[1, 5]</code> merge into <code>[1, 5]</code>, and the intervals <code>[6, 9]</code> and <code>[9, 11]</code> merge into <code>[6, 11]</code>. The merged intervals in sorted order are <code>[1, 5]</code>, <code>[6, 11]</code>, <code>[14, 18]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n2\r\n4 8\r\n2 6\r\n5 7\r\nOutput:\r\n2 8</code></pre>\r\n<p><strong>Explanation:</strong> All three intervals overlap and merge into <code>[2, 8]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= intervals[i][0] &lt;= intervals[i][1] &lt;= 10^9</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jubliant_19sep",
        "company_id": 510
    }
]