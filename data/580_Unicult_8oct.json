[
    {
        "id": 1661,
        "title": "NodeJS: Authentication using JWT",
        "problem_statement": "<h1>NodeJS: Authentication using JWT</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Implement a REST API to manage authentication using JWT (JSON Web Token).</p>\r\n<p>The task is to implement an Auth API using User model which exposes the following:</p>\r\n\r\n<h3>POST request to /login</h3>\r\n<ul>\r\n    <li>Creates a new JWT every time</li>\r\n    <li>Expects a username and password of the user in the request body</li>\r\n    <li>Checks if the username and password are correct from the DB</li>\r\n    <li>Stores the JWT in the User table</li>\r\n    <li>The response code is 200 on the successful token creation, and the response body is the JWT token</li>\r\n</ul>\r\n\r\n<h3>POST request to /validate</h3>\r\n<ul>\r\n    <li>Decodes the JWT</li>\r\n    <li>Expects the JWT in the request body</li>\r\n    <li>The response code is 200 on the successful token decode, and the response body is the username of the user</li>\r\n</ul>\r\n\r\n<h3>User Model</h3>\r\n<ul>\r\n    <li><strong>id:</strong> The unique id of the user (Integer)</li>\r\n    <li><strong>username:</strong> The unique username of the user (String)</li>\r\n    <li><strong>password:</strong> The password of the user (String)</li>\r\n    <li><strong>token:</strong> The latest JWT (String)</li>\r\n</ul>\r\n\r\n<h3>Notes</h3>\r\n<ul>\r\n    <li>Replace the newly created JWT with the older one in the User table.</li>\r\n    <li>Encode the username and current timestamp in the JWT body like the following -\r\n<pre><code class='language-text'>{\r\n  username: &lt;username&gt;,\r\n  timestamp: &lt;current_timestamp&gt;\r\n}</code></pre>\r\n    </li>\r\n    <li>Use Sequelize ORM to fetch/update User data.</li>\r\n    <li>Get the secret of JWT from the .env file programmatically.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1: POST /login</h3>\r\n<p><strong>Request Body:</strong></p>\r\n<pre><code class='language-text'>{\r\n  \"username\": \"Jarvisporter\",\r\n  \"password\": \"myfewsord\"\r\n}</code></pre>\r\n<p><strong>Response Body:</strong></p>\r\n<pre><code class='language-text'>{\r\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphcnZpc3BvcnRlciIsInRpbWVzdGFtcCI6MTY3ODg4NjQwMCwiYXRfaWQiOiIxMjM0NTY3ODkwIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkphcnZpc3BvcnRlciIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\r\n}</code></pre>\r\n\r\n<h3>Example 2: POST /validate</h3>\r\n<p><strong>Request Body:</strong></p>\r\n<pre><code class='language-text'>{\r\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkphcnZpc3BvcnRlciIsInRpbWVzdGFtcCI6MTY3ODg4NjQwMCwiYXRfaWQiOiIxMjM0NTY3ODkwIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkphcnZpc3BvcnRlciIsImlhdCI6MTUxNjIzOTAyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\"\r\n}</code></pre>\r\n<p><strong>Response Body:</strong></p>\r\n<pre><code class='language-text'>{\r\n  \"username\": \"Jarvisporter\"\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<h3>Environment</h3>\r\n<ul>\r\n    <li>Node Version: V14(LTS)</li>\r\n    <li>Default Port: 8000</li>\r\n</ul>\r\n\r\n<h3>Read-only files:</h3>\r\n<ul>\r\n    <li>test/spec.js</li>\r\n    <li>fixtures/data.json</li>\r\n    <li>connection.js</li>\r\n    <li>seed.js</li>\r\n    <li>models/users.js</li>\r\n</ul>\r\n\r\n<h3>Software Instructions</h3>\r\n<p>The question(s) requires Node 14 LTS or above.</p>\r\n<ul>\r\n    <li><a href=\"#\">Download & Install Node.js</a></li>\r\n</ul>\r\n\r\n<h3>Git Instructions</h3>\r\n<p>Use the following commands to work with this project</p>\r\n<pre><code class='language-text'>npm start</code></pre>\r\n<pre><code class='language-text'>npm test</code></pre>\r\n<pre><code class='language-text'>npm install</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Unicult_8oct",
        "company_id": 580
    },
    {
        "id": 1662,
        "title": "Reporting Feature Design",
        "problem_statement": "<h1>Reporting Feature Design</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are tasked with building a reporting feature for an e-commerce admin dashboard. The goal is to display the top 5 customers based on total spending. The report should include each customer's name, email, total amount spent, total number of orders, and a list of their 3 most recent orders (with order ID, amount, and date). Using MongoDB and Node.js, explain how you would approach this task.</p>\r\n<p>In your answer, describe:</p>\r\n\r\n<h2>Follow-up</h2>\r\n<ul>\r\n    <li>The structure of the collections involved (e.g., users, orders) and any assumptions you made.</li>\r\n    <li>The steps involved in constructing the MongoDB aggregation pipeline to meet the reporting requirements.</li>\r\n    <li>Challenges you encountered or anticipated, especially around aggregation complexity (e.g., nested sorting, $lookup, $group, $slice).</li>\r\n    <li>How you validated and tested your pipeline during development.</li>\r\n    <li>Did you use AI? Why or why not? And how?</li>\r\n</ul>\r\n<p>Your response should demonstrate both your understanding of MongoDB's aggregation framework and your ability to problem solve real problems.</p>\r\n\r\n<h1>React Component Output</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>What is the output of this component?</p>\r\n\r\n<pre><code class='language-javascript'>export default class Clock extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {time: new Date()};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ time: \"Time never changes\" });\r\n  }\r\n\r\n  render() {\r\n    return &lt;h1&gt;Look at the time: {this.state.time}&lt;/h1&gt;;\r\n  }\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Unicult_8oct",
        "company_id": 580
    },
    {
        "id": 1663,
        "title": "NodeJS: Stock Trades API",
        "problem_statement": "<h1>NodeJS: Stock Trades API</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In this challenge, you will implement a REST API to manage a collection of stock trades.</p>\r\n<p>Every trade is a JSON object with the following properties:</p>\r\n<ul>\r\n    <li><strong>id:</strong> Unique trade identifier (integer)</li>\r\n    <li><strong>type:</strong> Trade type, either 'buy' or 'sell' (String)</li>\r\n    <li><strong>user_id:</strong> Unique user identifier (Integer)</li>\r\n    <li><strong>symbol:</strong> Stock symbol (String)</li>\r\n    <li><strong>shares:</strong> Number of shares traded, between 10 and 30 inclusive (Integer)</li>\r\n    <li><strong>price:</strong> Price per share at trade time (Integer)</li>\r\n    <li><strong>timestamp:</strong> Epoch time of the trade in milliseconds (Integer)</li>\r\n</ul>\r\n<p>The model implementation is provided and read-only. It includes a Timestamp field of DateTime type that must be serialized to/from JSON's integer timestamp.</p>\r\n<p>Implement a REST service exposing the <code>/trades</code> endpoint with these features:</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example Trade Object:</h3>\r\n<pre><code class='language-text'>{\r\n    \"id\": 1,\r\n    \"type\": \"buy\",\r\n    \"user_id\": 1,\r\n    \"symbol\": \"ABC\",\r\n    \"shares\": 30,\r\n    \"price\": 130,\r\n    \"timestamp\": 1531522781000\r\n}</code></pre>\r\n\r\n<h2>API Endpoints</h2>\r\n<ul>\r\n    <li>\r\n        <p><strong>POST request to <code>/trades</code></strong></p>\r\n        <ul>\r\n            <li>Creates a new trade.</li>\r\n            <li>Expects a JSON trade object without an <code>id</code> property.</li>\r\n            <li>Adds the trade to the collection and assigns a unique integer ID (starting from 1).</li>\r\n            <li>Returns status code 201 with the created trade object.</li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <p><strong>GET request to <code>/trades</code></strong></p>\r\n        <ul>\r\n            <li>Returns all trades.</li>\r\n            <li>Returns status code 200 with an array of all trades ordered by id (ascending).</li>\r\n            <li>Optionally accepts query parameters <code>type</code> and <code>user_id</code> (e.g., <code>/trades?type=buy&user_id=123</code>).</li>\r\n            <li>When parameters are present, returns only matching objects.</li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <p><strong>GET request to <code>/trades/:id</code></strong></p>\r\n        <ul>\r\n            <li>Returns a trade with the given <code>id</code>.</li>\r\n            <li>If found, returns status code 200 with the matching trade object.</li>\r\n            <li>If not found, returns status code 404 with text \"ID not found\".</li>\r\n        </ul>\r\n    </li>\r\n    <li>\r\n        <p><strong>DELETE, PUT, PATCH requests to <code>/trades/</code></strong></p>\r\n        <ul>\r\n            <li>Returns status code 405 (method not allowed).</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Complete the project to pass all unit tests. The project supports SQLite3 database by default.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>id</code> must be a unique integer.</li>\r\n    <li><code>type</code> must be either 'buy' or 'sell'.</li>\r\n    <li><code>user_id</code> must be an integer.</li>\r\n    <li><code>symbol</code> must be a string.</li>\r\n    <li><code>shares</code> must be an integer between 10 and 30, inclusive.</li>\r\n    <li><code>price</code> must be an integer.</li>\r\n    <li><code>timestamp</code> must be an integer representing epoch time in milliseconds.</li>\r\n</ul>\r\n\r\n<h2>Git Instructions</h2>\r\n<p>Use the following commands to work with this project:</p>\r\n<ul>\r\n    <li>\r\n        <pre><code class='language-text'>npm start</code></pre>\r\n    </li>\r\n    <li>\r\n        <pre><code class='language-text'>npm test</code></pre>\r\n    </li>\r\n    <li>\r\n        <pre><code class='language-text'>npm install</code></pre>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Unicult_8oct",
        "company_id": 580
    }
]