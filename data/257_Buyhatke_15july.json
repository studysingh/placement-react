[
    {
        "id": 837,
        "title": "Divide and Conquer",
        "problem_statement": "<h1>Divide and Conquer</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a class, persons are 'n' identified as Person 1 to Person n. A total of 'm' relationships are given, describing connections between two individuals, stating, \"Person a[i] likes b[i], and vice versa.\" The relationships can be repeated multiple times. The likeliness between individuals adheres to the transitive property, meaning that if Person A likes Person B, and Person B likes Person C, then Person A also likes Person C. The goal is to organize an exam and arrange the persons so that individuals who like each other are not seated in the same class. The task is determining the minimum number of classes needed for the exam.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>The first line contains an integer n</li>\r\n    <li>The second line contains an integer m</li>\r\n    <li>The following m lines contain the array a.</li>\r\n    <li>The following m lines contain the array b.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &lt;= n,m &lt;= 2*10<sup>5</sup></li>\r\n    <li>1 &lt;= A[i],B[i] &lt;= n</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return an integer as asked in the problem.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n3\r\n2\r\n4\r\n1\r\n3\r\n3\r\n5\r\nOutput:\r\n3</code></pre>\r\n<p><strong>Explanation:</strong> 3 classes should be enough to divide them. One possible division of classes is [4,2], [1,3] and [5].</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Buyhatke_15july",
        "company_id": 257
    },
    {
        "id": 838,
        "title": "Tan and Test Cases",
        "problem_statement": "<h1>Tan and Test Cases</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Tan is creating test cases for an array based problem. He has so generated N non-negative integers. He successfully created those arrays and send them to his reviewer Tanu for acceptance. We all know the nature of test-cases changes! Tanu has given him a task, he will pick a range <strong>[L, R] (both inclusive)</strong> and add a value K to those array elements.</p>\r\n<p>After doing this, the 2nd reviewer Shubhanshu will now also change some values in the array formed. First, he will inverse the array formed, and then he will pick a range <strong>[L, R] (both inclusive)</strong> and subtract K from all the values in that range.</p>\r\n<p>Since we are now ready with the test cases, here comes the question: You have to find the length of all non-decreasing subarray. If two subarray has the same length we will merge that subarray in sorted order and again repeat the above process until we cannot merge any two subarrays.</p>\r\n<p>You have to print the least number of subarray we can have and follow by the size of all the subarrays sorted in increasing order.</p>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li>First line will contain an integer N, denoting the size of the array.</li>\r\n    <li>Next, the N line will contain an integer each.</li>\r\n    <li>Next, we have an integer Q denoting the number of queries.</li>\r\n    <li>Tanu has:\r\n        <ul>\r\n            <li>Next, we have an integer 3 as input denoting the size of each query.</li>\r\n            <li>Next, the Q line will have three integers (l, r, k) each separated by space.</li>\r\n        </ul>\r\n    </li>\r\n    <li>Next, we have an integer P, denoting the number of queries.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ul>\r\n    <li>First line will contain an integer X, denoting the number of subarrays left with us.</li>\r\n    <li>Next X line each will contain an integer, denoting the size of the subarray.</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>N &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>Array elements are &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>Q &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>P &lt;= 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= l &lt;= r &lt;= N</code></li>\r\n    <li><code>1 &lt;= k &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>Array elements are indexed from 1.</code></li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n1\r\n2\r\n3\r\n4\r\n5\r\n2\r\n3\r\n1 3 4\r\n2 4 3\r\n2\r\n3\r\n1 3 4\r\n2 4 3\r\nOutput:\r\n2\r\n6\r\n7</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>After the first query of the Tanu array will be [5, 6, 7, 4, 5]</p>\r\n<p>Similarly after completing Tanu's query array will be [5, 3, 6, 3, 4]</p>\r\n<p>And similarly after Shubhanshu's operation will be [-1, 2, 8, 7, 7].</p>\r\n<p>So there are two subarrays possible in non decreasing order - {1}, {2, 8}, {7, 7}.</p>\r\n<p>Since the length of both subarrays is not the same, therefore we cannot merge them.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Buyhatke_15july",
        "company_id": 257
    }
]