[
    {
        "id": 1314,
        "title": "SQL: Freelance Platform Candidate Review",
        "problem_statement": "<h1>SQL: Freelance Platform Candidate Review</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Create a report of qualified freelancer profiles based on job success and verification status.</p>\r\n<p>Your result should include:</p>\r\n<ul>\r\n<li>First name</li>\r\n<li>Last name</li>\r\n<li>Email</li>\r\n<li>Job success score</li>\r\n</ul>\r\n<p>Requirements:</p>\r\n<ul>\r\n<li>Only include profiles with Job Success Score (JSS) greater than 90.</li>\r\n<li>Only include verified profiles (<code>is_verified = 1</code>).</li>\r\n<li>Sort results in descending order by <code>job_success_score</code>, then ascending by <code>first_name</code> and <code>last_name</code>.</li>\r\n<li>Limit results to the first ten records.</li>\r\n</ul>\r\n<p>The database schema is as follows:</p>\r\n<p><strong>Table: <code>profiles</code></strong></p>\r\n<pre><code class='language-text'>+-------------+--------------+-----------------------------------+\r\n| name        | type         | description                       |\r\n+-------------+--------------+-----------------------------------+\r\n| id          | SMALLINT     | unique id, primary key            |\r\n| first_name  | VARCHAR(255) |                                   |\r\n| last_name   | VARCHAR(255) |                                   |\r\n| email       | VARCHAR(255) |                                   |\r\n| is_verified | SMALLINT     | 1 = True, 0 = False               |\r\n+-------------+--------------+-----------------------------------+</code></pre>\r\n<p><strong>Table: <code>stats</code></strong></p>\r\n<pre><code class='language-text'>+-------------------+------------+-----------------------------------+\r\n| name              | type       | description                       |\r\n+-------------------+------------+-----------------------------------+\r\n| profile_id        | SMALLINT   | foreign key into profiles.id      |\r\n| job_success_score | SMALLINT   |                                   |\r\n+-------------------+------------+-----------------------------------+</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<p><strong>Input:</strong></p>\r\n<p><strong>Table: <code>profiles</code></strong></p>\r\n<pre><code class='language-text'>id | first_name | last_name  | email                     | is_verified\r\n---|------------|------------|---------------------------|------------\r\n1  | Junia      | Sehorsch   | jsehorsch0@oracle.com     | 0\r\n2  | Dave       | Halliburton| dhalliburton1@pbs.org     | 1\r\n3  | Agneta     | Dutch      | adutch2@thetimes.co.uk    | 0\r\n4  | Kendell    | Sylvester  | ksylvester3@canalblog.com | 1\r\n5  | Koralle    | Ragsdale   | kragsdale4@buzzfeed.com   | 1\r\n6  | Roma       | Kenelin    | rkenelin5@prnewswire.com  | 0\r\n7  | Harold     | Molloy     | hmolloy6@ycombinator.com  | 1\r\n8  | Berri      | Hartzogs   | bhartzogs7@ox.ac.uk       | 0\r\n9  | Garrik     | Preddle    | gpreddle8@topsy.com       | 1\r\n10 | Sophie     | Messenger  | smessenger9@myspace.com   | 1\r\n11 | Ashby      | Philipsson | aphilipssona@typepad.com  | 1\r\n12 | Kayle      | Jesteco    | kjestecob@ocn.ne.jp       | 1\r\n13 | Munroe     | Chevolleau | mchevolleauc@yandex.ru    | 1\r\n14 | Etheline   | Choake     | echoaked@hao123.com       | 1\r\n15 | Marten     | Zamboniari | mzamboniari@cbc.ca        | 1\r\n16 | Hersch     | Blasdale   | hblasdale@wunderground.com| 1\r\n17 | Jori       | MacFaell   | jmacfaellg@va.gov         | 1\r\n18 | Margo      | Finnemore  | mfinnemoreh@discovery.com | 1\r\n19 | Felicia    | Ramsdale   | framsdalei@devhub.com     | 1\r\n20 | Demetris   | Arnet      | darnetj@livejournal.com   | 1</code></pre>\r\n\r\n<p><strong>Table: <code>stats</code></strong></p>\r\n<pre><code class='language-text'>profile_id | job_success_score\r\n-----------|------------------\r\n4          | 100\r\n1          | 100\r\n18         | 95\r\n5          | 95\r\n8          | 95\r\n10         | 95\r\n12         | 95\r\n13         | 95\r\n14         | 95\r\n20         | 90\r\n17         | 90\r\n7          | 90\r\n15         | 90\r\n11         | 85\r\n16         | 85\r\n9          | 85\r\n6          | 85\r\n2          | 85\r\n3          | 75\r\n19         | 75</code></pre>\r\n\r\n<p><strong>Output:</strong></p>\r\n<pre><code class='language-text'>first_name | last_name  | email                     | job_success_score\r\n-----------|------------|---------------------------|------------------\r\nKendell    | Sylvester  | ksylvester3@canalblog.com | 100\r\nEtheline   | Choake     | echoaked@hao123.com       | 95\r\nKayle      | Jesteco    | kjestecob@ocn.ne.jp       | 95\r\nKoralle    | Ragsdale   | kragsdale4@buzzfeed.com   | 95\r\nMargo      | Finnemore  | mfinnemoreh@discovery.com | 95\r\nMunroe     | Chevolleau | mchevolleauc@yandex.ru    | 95\r\nSophie     | Messenger  | smessenger9@myspace.com   | 95\r\nDemetris   | Arnet      | darnetj@livejournal.com   | 90\r\nHarold     | Molloy     | hmolloy6@ycombinator.com  | 90\r\nJori       | MacFaell   | jmacfaellg@va.gov         | 90</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jubilant_31aug",
        "company_id": 455
    },
    {
        "id": 1315,
        "title": "Number of Characters Escaped",
        "problem_statement": "<h1>Number of Characters Escaped</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given a string composed of lowercase English letters and the characters '#' (ASCII value 35) and '!' (ASCII value 33), determine how many times a character is escaped.</p>\r\n<p>A character is considered escaped if:</p>\r\n<ul>\r\n    <li>It is a lowercase English letter,</li>\r\n    <li>There is a '!' character immediately preceding it, and</li>\r\n    <li>Both the lowercase English letter and the '!' character are enclosed within a pair of '#' characters.</li>\r\n</ul>\r\n<p>For example, in `expression = '#!abc!def!'`, the 'a' character would be considered escaped if the surrounding '#' were present.</p>\r\n<p>Complete the `numberOfCharactersEscaped` function in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li>`expression`: a string to evaluate</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li>`int`: the number of characters that are escaped</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: expression = '#!lr#po#'\r\nOutput: 0</code></pre>\r\n<p><strong>Explanation:</strong> The string `#!lr#po#` has 8 characters. The 4th character is a lowercase English letter 'r'. Although there is a '!' character before this 'r', they are not between starting and ending '#' characters, so 'r' is not escaped. The number of times characters are escaped is 0.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: expression = '#!alb!c#'\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The string `#!alb!c#` has 6 characters. The 4th character is a lowercase English letter 'b'. Since there is a '!' character before the 'b' character and both are between a starting and ending '#', the 'b' character will be escaped. The number of times characters are escaped is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= length of expression <= 10^5`</li>\r\n    <li>The `#` characters will not be nested.</li>\r\n    <li>Every opening `#` character will have a closing `#` character.</li>\r\n</ul>\r\n\r\n<h2>Input Format For Custom Testing</h2>\r\n<p>Input from stdin will be processed as follows and passed to the function:</p>\r\n<p>The first and only line of input contains a string, `expression`.</p>\r\n\r\n<h2>Function Signature</h2>\r\n<pre><code class='language-cpp'>/*\r\n * Complete the 'numberOfCharactersEscaped' function below.\r\n *\r\n * The function is expected to return an INTEGER.\r\n * The function accepts STRING expression as parameter.\r\n */\r\nint numberOfCharactersEscaped(string expression) {\r\n    // Function body to be implemented\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "jubilant_31aug",
        "company_id": 455
    }
]