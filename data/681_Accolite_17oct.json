[
    {
        "id": 1929,
        "title": "Music Festival Lineup Challenge",
        "problem_statement": "<h1>Music Festival Lineup Challenge</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A popular music festival is about to create its ultimate lineup. The festival organizers have received a series of back-to-back performer pairs. Each performer is represented by their unique stage name in lowercase letters. To ensure maximum attendance and optimize ticket sales, the festival needs a sophisticated software solution that can determine the optimal sequence in which all performers can perform at least once. If multiple sequences are possible, the solution should provide the smallest lexicographical order.</p>\r\n<p>The festival grid is structured as a P (number of rows) x Q (number of columns) matrix, where each row specifies a pair of performers who will take the stage consecutively. The primary objective is to generate a sequence that starts with a specified performer, \"starter,\" as studies have shown this sequence attracts the largest audience.</p>\r\n<p>The function signature provided for implementation is:</p>\r\n<pre><code class='language-cpp'>vector&lt;string&gt; findPerformanceOrder(vector&lt;vector&lt;string&gt;&gt;&amp; performances)</code></pre>\r\n<p><strong>Note:</strong> The function signature should not be modified, else the code will not be evaluated.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p><strong>Input:</strong> Enter two integers separated by a space: P (the number of performer pairs) and Q (which is always equal to 2 as each pair consists of exactly two performers).</p>\r\n<p>Enter semi-colon and then keep on entering two space-separated strings representing pairs of performers that will perform consecutively separated by semi-colon.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p><strong>Output:</strong> The output should be a list containing N strings, representing the optimal sequence of performers.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 5 2;charisma zeal;fusion charisma;starter beats;beats fusion;zeal vibez\r\nOutput: [starter, beats, fusion, charisma, zeal, vibez]</code></pre>\r\n<p><strong>Explanation:</strong> The optimal sequence of connections is:</p>\r\n<ul>\r\n    <li>starter &rarr; beats</li>\r\n    <li>beats &rarr; fusion</li>\r\n    <li>fusion &rarr; charisma</li>\r\n    <li>charisma &rarr; zeal</li>\r\n    <li>zeal &rarr; vibez</li>\r\n</ul>\r\n<p>Thus, the optimal sequence to maximize attendee satisfaction and ensure all performers are featured is: starter, beats, fusion, charisma, zeal, vibez. This sequence not only covers all performers at least once but also starts with \"starter,\" as specified for optimal audience engagement.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: 4 2;starter zeal;zeal starter;starter beats;beats starter\r\nOutput: [starter, beats, starter, zeal, starter]</code></pre>\r\n<p><strong>Explanation:</strong> The optimal sequence of connections is:</p>\r\n<ul>\r\n    <li>starter &rarr; beats</li>\r\n    <li>beats &rarr; starter</li>\r\n    <li>starter &rarr; zeal</li>\r\n    <li>zeal &rarr; starter</li>\r\n</ul>\r\n<p>Thus, the optimal sequence following the smallest lexicographical order, to maximize attendee satisfaction and ensure all performers are featured is: starter, beats, starter, zeal, starter.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>Q >= 2</code>. Each row will always contain exactly two performers.</li>\r\n    <li>It is guaranteed that the input will always include a performer \"starter\".</li>\r\n    <li>The sequence must begin with the performer \"starter\".</li>\r\n    <li><code>0 &lt; P, P &lt;= 100</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Accolite_17oct",
        "company_id": 681
    }
]