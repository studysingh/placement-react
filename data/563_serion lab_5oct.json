[
    {
        "id": 1611,
        "title": "Sequential Message Decoder",
        "problem_statement": "<h1>Sequential Message Decoder</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Imagine a communication system where text data is sent through a network channel. During transmission, individual characters are dispatched along with their positional identifiers. Due to network latency and routing variations, these characters may arrive at the destination in a scrambled sequence rather than their original order. You receive a series of character-position pairs representing the incoming data stream.</p>\r\n<p>A complete message spanning from position 'i' to position 'r' must satisfy these criteria:</p>\r\n<ul>\r\n    <li>The content cannot be empty</li>\r\n    <li>It must be bounded by two '*' symbols - specifically, at positions 'i' and 'r'. The '*' character must be present</li>\r\n    <li><strong>Example:</strong> 'greetings' represents a complete message where 'greetings' is the valid content. However, '*greetings*'' would be invalid since '*' represents a gap in the sequence.</li>\r\n</ul>\r\n<p>Your objective is to process each incoming character and position it according to its index_number. The moment any sequence forms a complete message, you must immediately output that message.</p>\r\n<p><strong>Note:</strong> Multiple complete messages might become valid simultaneously after placing a single character. When this occurs, display the messages sorted by their starting position values. Additionally, some characters may never contribute to forming any complete sequence.</p>\r\n<p>Process the input sequence in the given order and output messages immediately upon validation.</p>\r\n<p><strong>Function description:</strong></p>\r\n<p>Complete the function <code>messageDecoder</code>. This function takes 2 parameters and returns an array of strings.</p>\r\n<p><strong>Parameters:</strong></p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents the length of Messages array</li>\r\n    <li><strong>Messages:</strong> Represents a 2D string array having N pair of index_number and character (both as strings)</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<ul>\r\n    <li>The first line contains a single integer N.</li>\r\n    <li>Next, N lines contain two space-separated strings, each denoting index_number and a character for that index.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return each valid message on a new line.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>3 &lt;= N &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= index_number &lt;= 10^18</code></li>\r\n    <li>Character at any index is either '*' or lowercase english letters</li>\r\n    <li>There exists atleast one valid message</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: 6\r\n69321283 *\r\n1 a\r\n2 *\r\n69323585 *\r\n3 w\r\n69323284 w\r\nOutput: a\r\nw</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p><strong>Given:</strong></p>\r\n<ul>\r\n    <li><strong>N =</strong> 6</li>\r\n    <li><strong>Messages =</strong> [\"69321283\", \"*\", \"1\", \"a\", \"2\", \"*\", \"69323585\", \"*\", \"3\", \"w\", \"69323284\", \"w\"]</li>\r\n</ul>\r\n<p><strong>Approach:</strong></p>\r\n<ul>\r\n    <li>Messages[0] puts '*' at index 69321283</li>\r\n    <li>Messages[1] puts 'a' at index 1</li>\r\n    <li>Messages[2] puts '*' at index 2</li>\r\n    <li>Messages[3] puts '*' at index 69323585</li>\r\n    <li>Messages[4] puts 'w' at index 3. This makes the sequence from index_number 2 to 2 a valid message as it is enclosed within the character '*'. So, you output 'a'.</li>\r\n    <li>Messages[5] puts character 'w' at index 69323284. This makes the sequence from index_number 69323585 to 69323284 a valid message as it is enclosed within the character '*'. So, you output 'w'.</li>\r\n    <li><strong>Final output =</strong> [\"a\", \"w\"]</li>\r\n</ul>\r\n\r\n<h2>Note</h2>\r\n<p>Your code must be able to print the sample output from the provided sample input. However, your code is run against multiple hidden test cases. Therefore, your code must pass these hidden test cases to solve the problem statement.</p>\r\n\r\n<h2>Limits</h2>\r\n<ul>\r\n    <li><strong>Time Limit:</strong> 2.0 seconds for each input file</li>\r\n    <li><strong>Memory Limit:</strong> 256 MB</li>\r\n    <li><strong>Source Limit:</strong> 1024 KB</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "serion lab_5oct",
        "company_id": 563
    }
]