[
    {
        "id": 681,
        "title": "NewsProvider",
        "problem_statement": "<h1>NewsProvider</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>As the provider of a news aggregation service, you aim to provide your customers with a system that is easy to use as possible. There are many different news providers, and it is tedious for users to subscribe to all of them manually, so you want to provide a single subscription that manages all the news providers for each customer.</p>\r\n<p>Each subscriber is only interested in a certain set of topics, and should only receive news about those topics. Each news item has an interest score and each subscriber nominates their minimum interest score. A subscriber should not be sent news that has a score lower than the subscriber's minimum.</p>\r\n<p>The system may have to handle a lot of data and subscriptions, so it must be robust and not overload subscribers with too much data. We then choose to decouple the news input feed from the output towards the subscribers, giving more control to the system.</p>\r\n\r\n<h2>Class Definition</h2>\r\n<p>Complete the functions described below in the <code>NewsProvider</code> class. Keep in mind that:</p>\r\n<pre><code class='language-javascript'>import java.io.*;\r\nimport java.util.*;\r\n\r\nclass NewsProvider {\r\n    public boolean AddSubscription(long id, long minInterest, long maxNewsPerSecond, List<String> topics) {\r\n        // Add your code here\r\n        return false;\r\n    }\r\n\r\n    public boolean RemoveSubscription(long id) {\r\n        // Add your code here\r\n        return false;\r\n    }\r\n\r\n    public boolean NewsReceived(long id, double timestamp, long interest, List<String> topics) {\r\n        // Add your code here\r\n        return false;\r\n    }\r\n\r\n    public Map<Long, List<Long>> Publish(double timestamp, double maxAgeInMs) {\r\n        // Add your code here\r\n        return new HashMap<Long, List<Long>>();\r\n    }\r\n}</code></pre>\r\n\r\n<h2>Methods</h2>\r\n<h3>AddSubscription(id: long, minInterest: long, maxNewsPerSecond: long, topics: List&lt;String&gt;) -&gt; boolean</h3>\r\n<ul>\r\n    <li>Registers a new subscription for upcoming news on certain topics. Returns true if the operation succeeds, and false otherwise.</li>\r\n    <li><code>id</code> is an unique identifier of the subscription. If a subscription with the same <code>id</code> already exists, the subscription must be updated with the new parameters.</li>\r\n    <li><code>minInterest</code> represents the minimum interest score desired (inclusive).</li>\r\n    <li><code>maxNewsPerSecond</code> represents the maximum number of news items this subscriber can receive per second. This constraint is based on a rolling window, i.e. it starts counting since the last published timestamp.</li>\r\n    <li><code>topics</code> is a list of news topics this subscription should consider.</li>\r\n</ul>\r\n<h4>Input constraints:</h4>\r\n<ul>\r\n    <li><code>0 &lt;= id &lt; 2^32</code></li>\r\n    <li><code>0 &lt;= minInterest &lt; 2^32</code></li>\r\n    <li><code>0 &lt;= maxNewsPerSecond &lt; 2^32</code></li>\r\n    <li><code>0 &lt;= length(topics) &lt; 2^10</code></li>\r\n</ul>\r\n\r\n<h3>RemoveSubscription(id: long) -&gt; boolean</h3>\r\n<ul>\r\n    <li>Removes an existing subscription from the system. Returns true if the operation succeeds, and false otherwise.</li>\r\n    <li><code>id</code> is the unique identifier of the subscription to be removed. If it doesn't exist, the operation fails.</li>\r\n</ul>\r\n\r\n<h3>NewsReceived(id: long, timestamp: double, interest: long, topics: List&lt;String&gt;) -&gt; boolean</h3>\r\n<ul>\r\n    <li>Indicates news on given topics have been received at a given <code>timestamp</code>. Returns true if the operation succeeds, and false otherwise.</li>\r\n    <li><code>id</code> is an unique identifier of this news. If it has already been used, the operation fails.</li>\r\n    <li><code>interest</code> represents the interest score of these news.</li>\r\n</ul>\r\n<h4>Input constraints:</h4>\r\n<ul>\r\n    <li><code>0 &lt;= id &lt; 2^32</code></li>\r\n    <li><code>0 &lt;= interest &lt; 2^32</code></li>\r\n    <li><code>0 &lt;= length(topics) &lt; 2^10</code></li>\r\n</ul>\r\n\r\n<h3>Publish(timestamp: double, maxAgeInMs: double) -&gt; Map&lt;Long, List&lt;Long&gt;&gt;</h3>\r\n<ul>\r\n    <li>Computes the news to be published at the given <code>timestamp</code>. Returns a map of subscription ids by news ids, i.e. all subscriptions to be notified per news id. If the operation fails, return an empty map.</li>\r\n    <li>If needed, news must be prioritized first by highest interest score, then oldest timestamp and highest id.</li>\r\n    <li>A subscriber must never receive the same news twice.</li>\r\n",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "OPTIVER_20july",
        "company_id": 218
    }
]