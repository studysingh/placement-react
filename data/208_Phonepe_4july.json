[
    {
        "id": 631,
        "title": "Avengers - The secret Path of Primes",
        "problem_statement": "<h1>Avengers - The secret Path of Primes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In the vast multiverse, the Avengers are preparing for their ultimate showdown against the Council of Kang. As part of their strategy, they must navigate the complex web of mystical pathways connecting hidden realms, to harness powerful artifacts necessary to defeat Kang. These pathways are known as the Secret Path of Primes.</p>\r\n<p>However, there is a challenge: only the paths with exactly 'k' prime realms will unlock the energy to access these artifacts. Doctor Strange, the Sorcerer supreme, has used his knowledge of mystic arts to uncover a sacred tree that represents '1' to 'n', and the connection between them is defined by a series of bi-directional portals. These realms are connected in such a way that there is exactly one path between any two realms. A prime realm is one whose label is a prime number.</p>\r\n<p>The challenge lies in determining the number of valid paths that contain exactly 'k' prime realms. These paths will allow the Avengers to gather the mystical energy needed to forge a weapon capable of stopping Kang. Help the Avengers in defeating Kang.</p>\r\n<p>Note:</p>\r\n<ol>\r\n    <li>The path (4,2,5) and path (5,2,4) are considered the same and should be counted only once.</li>\r\n    <li>1 is not a prime number.</li>\r\n</ol>\r\n\r\n<h2>Input Format</h2>\r\n<ol>\r\n    <li>The first line of input will be an integer n representing the number of realms in the sacred tree.</li>\r\n    <li>The second line of input will be a integer k representing the exact number of prime realms required in a valid path.</li>\r\n    <li>The following n-1 lines would consist of two space separated integers indicating a bidirectional portal between the two nodes.</li>\r\n    <li><strong>Format:</strong>\r\n        <ul>\r\n            <li>n</li>\r\n            <li>k</li>\r\n            <li>u1 v1</li>\r\n            <li>u2 v2</li>\r\n            <li>...</li>\r\n        </ul>\r\n    </li>\r\n</ol>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>2 &lt;= n &lt;= 10^4</li>\r\n    <li>1 &lt;= portals.length(n-1) &lt;= 10^4</li>\r\n    <li>1 &lt;= ui, vi &lt;= n</li>\r\n    <li>1 &lt;= k &lt;= 10</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<ol>\r\n    <li>A single integer representing the number of valid paths that contains exactly 'k' primes nodes and 0 if none are present.</li>\r\n</ol>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n2\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\nOutput:\r\n5</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Here the first line is n (no of realms in the sacred tree). Here in input its value is 5.</p>\r\n<p>The second line is k (the exact no of prime realms required in a valid path). In the above input its value is 2.</p>\r\n<p>From the third line the details of portals are given.</p>\r\n<ol>\r\n    <li>There is a portal between realm 1 and realm 2</li>\r\n    <li>There is a portal between realm 1 and realm 3</li>\r\n    <li>There is a portal between realm 3 and realm 4</li>\r\n    <li>There is a portal between realm 3 and realm 5</li>\r\n</ol>\r\n<p>Total Valid paths are 5 which are : [3,5], [4,3,5], [1,3,5], [2,1,3], [2,1,3,4]</p>\r\n\r\n<pre><code class='language-cpp'>#include &lt;cstdio&gt;\r\n#include &lt;iostream&gt;\r\n#include &lt;algorithm&gt;\r\n#include &lt;cmath&gt;\r\n#include &lt;vector&gt;\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    // Declare the variable\r\n    int a;\r\n\r\n    // Read the variable from STDIN\r\n    cin &gt;&gt; a;\r\n\r\n    // Output the variable to STDOUT\r\n    cout &lt;&lt; a;\r\n\r\n    return 0;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Phonepe_4july",
        "company_id": 208
    },
    {
        "id": 632,
        "title": "Maximum Triplet",
        "problem_statement": "<h1>Maximum Triplet</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Sagar is playing with an array and now he also feels bored. But, suddenly, he comes up with a problem to solve. He wants to calculate the maximum sum that three consecutive elements can have in the array. Complete the function <code>maximumTriplet</code> to return an integer to the problem.</p>\r\n\r\n<pre><code class='language-javascript'>/*\r\n * Complete the 'maximumTriplet' function below.\r\n *\r\n * The function is expected to return an LONG INTEGER.\r\n * The function accepts LONG_INTEGER_ARRAY array as parameter.\r\n */\r\n\r\nlong maximumTriplet(vector&lt;long&gt; array) {\r\n    // Write your code here\r\n}</code></pre>\r\n\r\n<h2>Input Format</h2>\r\n<ul>\r\n    <li><p>The first line of input contains an integer N</p></li>\r\n    <li><p>Next N lines of input contain an integer each, the elements of the array.</p></li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><p><code>3 &lt;= N &lt;= 10^6</code></p></li>\r\n    <li><p><code>1 &lt;= A[i] &lt;= 10^9</code></p></li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>Return a single integer, the answer to the problem.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n6\r\n5\r\n2\r\n4\r\n1\r\n6\r\n5\r\nOutput:\r\n12</code></pre>\r\n<p><strong>Explanation:</strong> You can take the elements (1, 6, 5) to make the sum 12.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n19\r\n3\r\n27\r\n36\r\n6\r\nOutput:\r\n69</code></pre>\r\n<p><strong>Explanation:</strong> You can take the elements (27, 36, 6) to make the sum 12.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Phonepe_4july",
        "company_id": 208
    },
    {
        "id": 633,
        "title": "Lets Levelize It",
        "problem_statement": "<h1>Lets Levelize It</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are n jugs on the floor, numbered 1,2,3...n. Each jug is filled with water, where the initial height of the water level of i-th jug is h(i) units.</p>\r\n<p>You want to fill the jugs, so that the water level in each of the jugs becomes equal.</p>\r\n<p>There are 2 options to fill or not fill the jugs, which goes like below. You start filling the jugs on hour 1. During any jth hour, you have the following options :</p>\r\n<ul>\r\n    <li>Choose a jug and fill the water in it. The height of the water level increases by 1 unit, if the hour is odd (1, 3, 5, ..) and it increases by 2 units, if the hour is even (2, 4, 6, ..).</li>\r\n    <li>Or skip the hour without filling the jug.</li>\r\n</ul>\r\n<p>Please Note that you can't fill water in more than 1 jug in an hour.</p>\r\n<p>The task is to determine the minimum number of hours required, so that the height of the water level in each jug becomes equal.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line of input contains an integer t which denotes the number of test cases.</p>\r\n<p>The first line of test case contains an integer n which denotes the number of jugs.</p>\r\n<p>The second line of the test case contains n integers h1, h2, h3, ...hn, where h(i) denotes the initial height of water level in units.</p>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, print an integer, one integer, which denotes the minimum number of hours required, so that the height of the water level in each jug becomes equal.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Sample Input 1:</h3>\r\n<pre><code class='language-text'>4\r\n3\r\n1 2 4\r\n7\r\n1 1 1 1 1 1 2\r\n3\r\n4 4 1\r\n3\r\n1 5 3</code></pre>\r\n\r\n<h3>Sample Output 1:</h3>\r\n<pre><code class='language-text'>4\r\n9\r\n2\r\n4</code></pre>\r\n\r\n<p><strong>Explanation:</strong></p>\r\n<p>Consider the first test case of the example. The initial state of the jugs is [1,2,4].</p>\r\n<ol>\r\n    <li>During the first hour, let's water the first jug, so the sequence of heights becomes [2,2,4]</li>\r\n    <li>During the second hour, let's water the second jug, so the sequence of heights becomes [2,4,4]</li>\r\n    <li>let's skip the third hour;</li>\r\n    <li>During the fourth hour, let's water the first jug, so the sequence of heights becomes [4,4,4]</li>\r\n</ol>\r\n<p>Thus, the answer is 4</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= t &lt;= 2 * 10^4</code></li>\r\n    <li><code>1 &lt;= n &lt;= 3 * 10^5</code></li>\r\n    <li><code>1 &lt;= h(i) &lt;= 3 * 10^9</code></li>\r\n    <li>Execution time limit: 4 seconds</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Phonepe_4july",
        "company_id": 208
    }
]