[
    {
        "id": 993,
        "title": "Typing Key Changes",
        "problem_statement": "<h1>Typing Key Changes</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of uppercase and lowercase English letters <code>recording</code> representing a sequence of letters typed by the user.</p>\r\n<p>Your task is to count the number of times that the user changed keys while typing the sequence, considering that the uppercase and lowercase letters for a given letter require the user to press same letter key (ignoring modifiers like Shift or Caps Lock). For example, typing 'W' and 'w' require the user to press the same key, whereas typing 'w' and 'e' or typing 'W' and 'E' require the user to change keys.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(recording.length) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: recording = ['w', 'W', 'a', 'A', 'b', 'B']\r\nOutput: solution(recording) = 2</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>Typing 'W' and 'w' require the same key 'w'.</li>\r\n    <li>Typing 'A' and 'a' require the same key 'a'.</li>\r\n    <li>Typing 'B' and 'b' require the same key 'b'.</li>\r\n    <li>So, the user changed keys in the following order: 'w' -> 'a' -> 'b', and the total number of key changes is 2.</li>\r\n</ul>\r\n</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: recording = ['w', 'W', 'w', 'A', 'a']\r\nOutput: solution(recording) = 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\n<ul>\r\n    <li>The user changed keys in the following order: 'w' -> 'w' -> 'w' -> 'A' -> 'a', and the total number of key changes is 3.</li>\r\n</ul>\r\n</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit 0.5 seconds (cpp)</li>\r\n    <li>Memory limit 1 GB</li>\r\n    <li><strong>Input:</strong> <code>array.char recording</code>\r\n        <ul>\r\n            <li>An array of characters representing keys the user pressed. It is guaranteed that the array contains only uppercase and/or lowercase English letters.</li>\r\n            <li>Guaranteed constraints: <code>1 &le; recording.length &le; 1000</code>.</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>integer</code>\r\n        <ul>\r\n            <li>The number of key changes as described above.</li>\r\n        </ul>\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_1july",
        "company_id": 320
    },
    {
        "id": 994,
        "title": "Resource Conversion Process",
        "problem_statement": "<h1>Resource Conversion Process</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array of resources, with each being an \"A\" or \"P\". All \"A\"s are arranged at the beginning of the array and \"P\"s stand at the end.</p>\r\n<p>A process is executed on this array until it halts. You are given a variable <code>conversionRate</code>, which represents the number of \"P\" resources that can be deleted and exchanged for one \"A\" resource.</p>\r\n<p>Each cycle, one of the three events happens:</p>\r\n<ul>\r\n    <li><strong>Option 1:</strong> If there are at least <code>conversionRate</code> \"P\" resources, then the last <code>conversionRate</code> \"P\" resources are removed and one \"A\" is added at the beginning of the array;</li>\r\n    <li><strong>Option 2:</strong> If there is at least one \"A\", the last \"A\" changes to \"P\";</li>\r\n    <li><strong>Option 3:</strong> If neither Option 1 nor Option 2 can be completed, then the process halts.</li>\r\n</ul>\r\n<p>Follow the process and compute how many cycles will pass until the process halts. Refer to the examples below for better understanding.</p>\r\n<p><strong>Note:</strong> You are not expected to provide the most optimal solution, but a solution with time complexity not worse than O(resources.length * conversionRate) will fit within the execution time limit.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: resources = [\"A\", \"A\", \"P\", \"P\", \"P\"], conversionRate = 2\r\nOutput: 13</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>At the beginning, resources = [\"A\", \"A\", \"P\", \"P\", \"P\"]</li>\r\n    <li>After the 1<sup>st</sup> cycle, resources = [\"A\", \"A\", \"P\", \"P\", \"P\"]</li>\r\n    <li>After the 2<sup>nd</sup> cycle, resources = [\"A\", \"A\", \"P\", \"P\"]</li>\r\n    <li>After the 3<sup>rd</sup> cycle, resources = [\"A\", \"A\", \"P\"]</li>\r\n    <li>After the 4<sup>th</sup> cycle, resources = [\"A\", \"A\"]</li>\r\n    <li>After the 5<sup>th</sup> cycle, resources = [\"A\", \"P\"]</li>\r\n    <li>After the 6<sup>th</sup> cycle, resources = [\"A\", \"A\", \"P\", \"P\"]</li>\r\n    <li>After the 7<sup>th</sup> cycle, resources = [\"A\", \"A\", \"P\"]</li>\r\n    <li>After the 8<sup>th</sup> cycle, resources = [\"A\", \"A\"]</li>\r\n    <li>After the 9<sup>th</sup> cycle, resources = [\"A\", \"P\"]</li>\r\n    <li>After the 10<sup>th</sup> cycle, resources = [\"A\", \"A\", \"P\", \"P\"]</li>\r\n    <li>After the 11<sup>th</sup> cycle, resources = [\"A\", \"A\", \"P\"]</li>\r\n    <li>After the 12<sup>th</sup> cycle, resources = [\"A\", \"A\"]</li>\r\n    <li>After the 13<sup>th</sup> cycle, resources = [\"A\", \"P\"]</li>\r\n    <li>After 13 cycles, the process halts, hence the answer is 13.</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: resources = [\"A\", \"A\"], conversionRate = 2\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>At the beginning, resources = [\"A\", \"A\"]</li>\r\n    <li>After the 1<sup>st</sup> cycle, resources = [\"A\", \"P\"]</li>\r\n    <li>After the 2<sup>nd</sup> cycle, resources = [\"A\", \"A\", \"P\", \"P\"]</li>\r\n    <li>After the 3<sup>rd</sup> cycle, resources = [\"A\", \"A\", \"P\"]</li>\r\n    <li>After the 4<sup>th</sup> cycle, resources = [\"A\", \"A\"]</li>\r\n    <li>After 4 cycles, the process halts, hence the answer is 4.</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: resources = [\"P\", \"P\", \"P\"], conversionRate = 3\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>At the beginning, resources = [\"P\", \"P\", \"P\"]</li>\r\n    <li>After the 1<sup>st</sup> cycle, resources = [\"A\", \"P\", \"P\"]</li>\r\n    <li>After the 2<sup>nd</sup> cycle, resources = [\"A\", \"P\"]</li>\r\n    <li>After 2 cycles, the process halts, hence the answer is 2.</li>\r\n</ul>\r\n\r\n<h2>Input/Output</h2>\r\n<ul>\r\n    <li>[execution time limit] 0.5 seconds (cpp)</li>\r\n    <li>[memory limit] 1 GB</li>\r\n    <li>[input] array.string <strong>resources</strong>\r\n        <p>The input array consisting of \"A\"s and \"P\"s, where \"A\"s are first and \"P\"s are at the end.</p>\r\n        <p><strong>Guaranteed constraints:</strong></p>\r\n        <ul>\r\n            <li><code>2 <= resources.length <= 500</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>[input] integer <strong>conversionRate</strong>\r\n        <p>The number of \"P\"s that can be deleted and exchanged for one \"A\".</p>\r\n        <p><strong>Guaranteed constraints:</strong></p>\r\n        <ul>\r\n            <li><code>2 <= conversionRate <= 500</code></li>\r\n        </ul>\r\n    </li>\r\n    <li>[output] integer\r\n        <p>Number of cycles that will pass until no events can happen anymore.</p>\r\n    </li>\r\n</ul>\r\n\r\n<h2>C++ Syntax Tips</h2>\r\n<pre><code class='language-cpp'>// Prints help message to the console\r\n// Returns a string\r\nstring helloworld(string name) {\r\n    cout &lt;&lt; \"This prints to the console when you Run Tests\" &lt;&lt; endl;\r\n    return \"hello, \" + name;\r\n}</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_1july",
        "company_id": 320
    },
    {
        "id": 995,
        "title": "Warehouse Robot Commands",
        "problem_statement": "<h1>Warehouse Robot Commands</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a highly automated warehouse, a robot is tasked with organizing packages stored in a rectangular grid. The grid is represented as a 2D list of integers <code>matrix</code>, where each integer represents a package type. To manage the sorting and rearrangement, the robot follows a series of commands given as an array of strings <code>commands</code>. Each command instructs the robot to perform a specific operation on the matrix:</p>\r\n<ul>\r\n    <li><code>\"swapRows r1 r2\"</code>: swaps the elements of row <code>r1</code> with the elements of row <code>r2</code>.</li>\r\n    <li><code>\"swapColumns c1 c2\"</code>: swaps the elements of column <code>c1</code> with the elements of column <code>c2</code>.</li>\r\n    <li><code>\"reverseRow r\"</code>: reverses the elements of row <code>r</code>.</li>\r\n    <li><code>\"reverseColumn c\"</code>: reverses the elements of column <code>c</code>.</li>\r\n    <li><code>\"rotate90Clockwise\"</code>: rotates the entire matrix 90 degrees clockwise.</li>\r\n</ul>\r\n<p>Here, <code>r</code>, <code>r1</code>, and <code>r2</code> are integer row indices, and <code>c</code>, <code>c1</code>, and <code>c2</code> are integer column indices.</p>\r\n<p>Your task is to implement the sequence of commands on the <code>matrix</code> and return the final state of the matrix as a 2D list of integers.</p>\r\n<p>Note: You are not expected to provide the most optimal solution, but a solution with time complexity not worse than <code>O(matrix.length * commands.length)</code> will fit within the execution time limit.</p>\r\n\r\n<pre><code class='language-cpp'>vector<vector<int>> solution(vector<vector<int>> matrix, vector<string> commands) {\r\n\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: matrix = [[1,2,3],[4,5,6],[7,8,9]], commands = [\"swapRows 0 2\", \"swapColumns 1 2\", \"reverseRow 0\", \"reverseColumn 2\", \"rotate90Clockwise\"]\r\nOutput: [[1,4,8],[3,6,9],[7,5,2]]</code></pre>\r\n<p><strong>Explanation:</strong> The final state of the matrix after applying all commands is shown above.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: matrix = [[1,4,2],[5,2,7]], commands = [\"reverseRow 0\", \"swapColumns 0 2\", \"reverseColumn 1\", \"rotate90Clockwise\"]\r\nOutput: [[7,1],[4,2],[5,2]]</code></pre>\r\n<p><strong>Explanation:</strong> The final state of the matrix after applying all commands is shown above.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Execution time limit: 0.5 seconds (cpp)</li>\r\n    <li>Memory limit: 1 GB</li>\r\n    <li><strong>Input:</strong> <code>matrix</code> (array.array.integer)\r\n        A 2D list representing the grid of package types.\r\n        <ul>\r\n            <li><code>1 &le; matrix.length &le; 100</code> (number of rows)</li>\r\n            <li><code>1 &le; matrix[i].length &le; 100</code> (number of columns)</li>\r\n            <li><code>1 &le; matrix[i][j] &le; 1000</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Input:</strong> <code>commands</code> (array.string)\r\n        An array of commands to be executed on the matrix. Each command is guaranteed to be one of the following strings:\r\n        <ul>\r\n            <li><code>\"swapRows r1 r2\"</code></li>\r\n            <li><code>\"swapColumns c1 c2\"</code></li>\r\n            <li><code>\"reverseRow r\"</code></li>\r\n            <li><code>\"reverseColumn c\"</code></li>\r\n            <li><code>\"rotate90Clockwise\"</code></li>\r\n        </ul>\r\n        All indices in the commands are valid and lie in the matrix bounds.\r\n        <ul>\r\n            <li><code>1 &le; commands.length &le; 100</code></li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Output:</strong> <code>array.array.integer</code>\r\n        The final state of the matrix after performing all commands.\r\n    </li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_1july",
        "company_id": 320
    },
    {
        "id": 996,
        "title": "Minimum Operations to Stepwise Array",
        "problem_statement": "<h1>Minimum Operations to Stepwise Array</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are managing a row of building structures with varying heights represented by an array <code>structures</code>. You want to transform these structures into a harmonious pattern where each structure differs from its adjacent neighbors by exactly one unit in height, forming either an ascending or descending sequence.</p>\r\n<p>To modify the structures, you can only add one unit of height to any structure in a single operation. Your goal is to determine the minimum number of operations needed to achieve either an ascending or descending stepwise pattern - whichever requires fewer operations.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: structures = [1, 4, 3, 2]\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The optimal approach is to add four units to the first structure. The final heights will be: [5, 4, 3, 2], forming a descending stepwise pattern.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: structures = [5, 7, 9, 4, 11]\r\nOutput: 9</code></pre>\r\n<p><strong>Explanation:</strong> The optimal approach is to add two units to the first structure, one unit to the second structure, and six units to the fourth structure. The final heights will be: [7, 8, 9, 10, 11], forming an ascending stepwise pattern.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>structures</code> is an array of integers representing the height of each structure.</li>\r\n    <li><code>2 &le; structures.length &le; 10<sup>5</sup></code></li>\r\n    <li><code>1 &le; structures[i] &le; 10<sup>9</sup></code></li>\r\n</ul>\r\n<p>The solution should return the minimum number of operations required to create either an ascending or descending stepwise pattern, as an <code>integer64</code> (long long in C++).</p>\r\n<pre><code class='language-cpp'>long long solution(vector&lt;int&gt; structures)</code></pre>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Capital One_1july",
        "company_id": 320
    }
]