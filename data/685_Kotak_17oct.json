[
    {
        "id": 1937,
        "title": "Donation",
        "problem_statement": "<h1>Donation</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>There are 10<sup>9</sup> empty handed people standing in a line. You have to perform <strong>Q</strong> independent queries and you have been given an integer <strong>K</strong>. Each query is of type:</p>\r\n<ul>\r\n    <li><strong>L R Y:</strong> Donate <strong>Y</strong> coin to each person standing at position <strong>X</strong> such that <strong>L &le; X</strong> and <strong>X &le; R</strong>.</li>\r\n</ul>\r\n<p>After performing the given <strong>Q</strong> queries, print the positions (one-based index) of the first <strong>K</strong> people having a prime number of coins.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>K_Prime</code>. This function takes the following 3 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><strong>Q:</strong> Represents the number of queries.</li>\r\n    <li><strong>queries:</strong> Represent the container containing all the queries.</li>\r\n    <li><strong>K:</strong> Represents the number of people that need to be printed.</li>\r\n</ul>\r\n\r\n<h2>Input Format for Custom Testing</h2>\r\n<p><strong>Note:</strong> Use this input format if you are testing against custom input or writing code in a language where we don't provide boilerplate code.</p>\r\n<p>The first line contains <strong>T</strong>, which represents the number of test cases.</p>\r\n<p>For each test case:</p>\r\n<ul>\r\n    <li>The first line contains an integer <strong>Q</strong> denoting the number of queries.</li>\r\n    <li>The second line contains an integer <strong>K</strong> denoting the number of people needed to be printed.</li>\r\n    <li>The next <strong>Q</strong> lines contain three space-separated integers <strong>L</strong>, <strong>R</strong> and <strong>Y</strong> denoting the range of positions of people that have to be donated and the number of coins that needs to be donated.</li>\r\n</ul>\r\n\r\n<h2>Output Format</h2>\r\n<p>For each test case, return positions of the first <strong>K</strong> people having a prime number of coins. If the number of people having a prime number of coins is less than <strong>K</strong>, return -1.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n3\r\n2\r\n2 5 1\r\n1 2 2\r\n1 8 3\r\nOutput:\r\n4 5</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; T &le; 10</li>\r\n    <li>1 &le; Q &le; 10<sup>5</sup></li>\r\n    <li>1 &le; K &le; 10<sup>5</sup></li>\r\n    <li>1 &le; L &le; R &le; 10<sup>9</sup></li>\r\n    <li>1 &le; Y &le; 10<sup>6</sup></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    /**\n     * @param Q The number of queries.\n     * @param queries A 2D vector where each inner vector contains L, R, and Y.\n     * @param K The number of people to find.\n     * @return A vector of positions of the first K people with a prime number of coins,\n     *         or a vector containing -1 if fewer than K such people exist.\n     */\n    std::vector<long long> K_Prime(int Q, const std::vector<std::vector<long long>>& queries, int K) {\n        // Core logic to be implemented here.\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int Q;\n        std::cin >> Q;\n        int K;\n        std::cin >> K;\n\n        std::vector<std::vector<long long>> queries(Q, std::vector<long long>(3));\n        for (int i = 0; i < Q; ++i) {\n            std::cin >> queries[i][0] >> queries[i][1] >> queries[i][2];\n        }\n\n        Solution sol;\n        std::vector<long long> result = sol.K_Prime(Q, queries, K);\n\n        if (result.size() == 1 && result[0] == -1) {\n            std::cout << -1 << \"\\n\";\n        } else {\n            for (size_t i = 0; i < result.size(); ++i) {\n                std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n            }\n            std::cout << \"\\n\";\n        }\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Kotak_17oct",
        "company_id": 685
    },
    {
        "id": 1938,
        "title": "Maximum product sales",
        "problem_statement": "<h1>Maximum product sales</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are working in an E-commerce company. There are N products each having 10<sup>9</sup> items in it. The products are numbered from 1 to N.</p>\r\n<p>There will be Q customers who can do one of the following things:</p>\r\n<ul>\r\n    <li><strong>1 R:</strong> Buys one item from each of the products that have product numbers in the range (1, R) (including both 1 and R)</li>\r\n    <li><strong>2 L:</strong> Buys one item from each of the products that have product numbers in the range (L, N) (including both L and N)</li>\r\n    <li><strong>3 C:</strong> Search for the most bought product which has a product number greater than or equal to C</li>\r\n</ul>\r\n<p>You have to build a search filter that will return the most bought item that the customer wants to find. If there are multiple products then return the product that has a minimum difference from the C that is as close as possible to the customer query.</p>\r\n<p>Find out the most bought product that the customer wants to find.</p>\r\n\r\n<h2>Function description</h2>\r\n<p>Complete the function <code>solve()</code>. This function takes the following 3 parameters and returns the required answer:</p>\r\n<ul>\r\n    <li><strong>N:</strong> Represents an integer denoting the number of products</li>\r\n    <li><strong>Q:</strong> Represents an integer denoting the number of customers</li>\r\n    <li><strong>query:</strong> Represents a 2D integer array of size Q*2 representing the query of the customer</li>\r\n</ul>\r\n\r\n<h2>Input format</h2>\r\n<p><strong>Note:</strong> This is the input format that you must use to provide custom input (available above the Compile and Test button).</p>\r\n<ul>\r\n    <li>The first line of input contains an integer T denoting the number of test cases.</li>\r\n    <li>For each test case:\r\n        <ul>\r\n            <li>The first line contains an integer N.</li>\r\n            <li>The second line contains an integer Q.</li>\r\n            <li>The following Q lines contain 2 space-separated integers each, representing the 2D array query.</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<h2>Output format</h2>\r\n<p>For each query of type 3, return an integer that is closest to the product asked and has been bought.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n1\r\n5\r\n4\r\n1 5\r\n2 3\r\n3 6\r\n3 1\r\nOutput:\r\n5\r\n3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nInitially, no products are bought.\r\n1. <strong>Query 1 5:</strong> Products 1, 2, 3, 4, 5 are bought. (Counts: {1:1, 2:1, 3:1, 4:1, 5:1})\r\n2. <strong>Query 2 3:</strong> Products 3, 4, 5 are bought. (Counts: {1:1, 2:1, 3:2, 4:2, 5:2})\r\n3. <strong>Query 3 6:</strong> Search for most bought product >= 6. No products exist >= 6. The problem states \"product number greater than or equal to C\" and \"minimum difference from the C\". Given the sample output `5`, it implies that if no product >= C exists, it returns the most bought product overall, or the one closest to C from the existing products. Assuming it means the most bought product with ID >= C, and if none, then the most bought product overall. In this case, products 3, 4, 5 are most bought (count 2). Product 5 is closest to 6. So, output `5`.\r\n4. <strong>Query 3 1:</strong> Search for most bought product >= 1. Products 3, 4, 5 are most bought (count 2). Among them, product 3 is the smallest ID >= 1. So, output `3`.\r\n</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>1 &le; T &le; 10</li>\r\n    <li>1 &le; N, Q &le; 10<sup>5</sup></li>\r\n    <li>1 &le; L, R, C &le; N</li>\r\n    <li>There will be at most 10<sup>5</sup> type 3 queries for each testcase.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    std::vector<int> solve(int N, int Q, const std::vector<std::vector<int>>& query) {\n        std::vector<int> results;\n        // Core logic to process queries and find answers for type 3 queries goes here.\n        return results;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int N;\n        std::cin >> N;\n        int Q;\n        std::cin >> Q;\n        std::vector<std::vector<int>> queries(Q, std::vector<int>(2));\n        for (int i = 0; i < Q; ++i) {\n            std::cin >> queries[i][0] >> queries[i][1];\n        }\n\n        Solution sol;\n        std::vector<int> results = sol.solve(N, Q, queries);\n\n        for (int result : results) {\n            std::cout << result << \"\\n\";\n        }\n    }\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Kotak_17oct",
        "company_id": 685
    }
]