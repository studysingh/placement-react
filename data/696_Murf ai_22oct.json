[
    {
        "id": 1964,
        "title": "Longest Subarray Sum Less Than or Equal to K",
        "problem_statement": "<h1>Longest Subarray Sum Less Than or Equal to K</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Find the length of the longest subarray whose elements sum to a value less than or equal to k. A subarray is defined as a contiguous block of elements from the original array.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>maxLength</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int a[n]</code>: an array of integers</li>\r\n    <li><code>int k</code>: the maximum allowable sum</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: the length of the longest subarray of <code>a</code> that sums to a number less than or equal to <code>k</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: a = [1, 2, 3], k = 3\r\nOutput: 2</code></pre>\r\n<p><strong>Explanation:</strong>\r\nAll possible subarrays:</p>\r\n<ul>\r\n    <li><code>[1]</code>: sum = 1 (valid, 1 &le; 3)</li>\r\n    <li><code>[2]</code>: sum = 2 (valid, 2 &le; 3)</li>\r\n    <li><code>[3]</code>: sum = 3 (valid, 3 &le; 3)</li>\r\n    <li><code>[1, 2]</code>: sum = 3 (valid, 3 &le; 3)</li>\r\n    <li><code>[2, 3]</code>: sum = 5 (invalid, 5 &gt; 3)</li>\r\n    <li><code>[1, 2, 3]</code>: sum = 6 (invalid, 6 &gt; 3)</li>\r\n</ul>\r\n<p>The longest valid subarray is <code>[1, 2]</code> with length 2.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: a = [3, 1, 2, 1], k = 4\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong>\r\nThe subarrays of <code>[3, 1, 2, 1]</code> having elements that sum to a value less than or equal to <code>k = 4</code> are:</p>\r\n<ul>\r\n    <li><code>[3]</code> (sum=3)</li>\r\n    <li><code>[1]</code> (sum=1)</li>\r\n    <li><code>[2]</code> (sum=2)</li>\r\n    <li><code>[1]</code> (sum=1)</li>\r\n    <li><code>[3, 1]</code> (sum=4)</li>\r\n    <li><code>[1, 2]</code> (sum=3)</li>\r\n    <li><code>[2, 1]</code> (sum=3)</li>\r\n    <li><code>[1, 2, 1]</code> (sum=4)</li>\r\n</ul>\r\n<p>The longest of these is <code>[1, 2, 1]</code>, which has a length of 3. Return 3 as the answer.</p>\r\n\r\n<h2>Constraints</h2>\r\n<p>No explicit constraints are provided in the problem statement.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Murf ai_22oct",
        "company_id": 696
    },
    {
        "id": 1965,
        "title": "Max Profit Event",
        "problem_statement": "<h1>Max Profit Event</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given the name of an event organizer, identify the event that generates the highest profit if it sells out completely. Use the events database available at the endpoint <code>https://jsonmock.hackerrank.com/api/events</code>.</p>\r\n<p>The results are paginated and can be accessed by adding <code>&amp;page={num}</code> to the query string, where <code>{num}</code> denotes the page number.</p>\r\n<p>To filter the query by specific fields, append <code>(fieldname)=(value)</code> to the URL. For instance, <code>https://jsonmock.hackerrank.com/api/events?organized_by=anorganizer&amp;page=2</code> will return page 2 of the events organized by the organizer named <code>anorganizer</code>.</p>\r\n<p>The query response from the API includes these fields:</p>\r\n<ul>\r\n    <li><code>page</code>: the current page</li>\r\n    <li><code>per_page</code>: the maximum results per page</li>\r\n    <li><code>total</code>: the total number of records</li>\r\n    <li><code>total_pages</code>: the total number of pages for the query results</li>\r\n    <li><code>data</code>: an array of JSON objects containing event information</li>\r\n</ul>\r\n<p>Each object in the <code>data</code> field includes the following:</p>\r\n<ul>\r\n    <li><code>name</code>: the name of the event</li>\r\n    <li><code>organized_by</code>: the organizer of the event</li>\r\n    <li><code>ticket_prices</code>: an array containing 3 elements denoting prices of different types of tickets (normal, premium, and VIP)</li>\r\n    <li><code>capacity_left</code>: the number of seats left for the event</li>\r\n    <li><code>people_registered</code>: the number of people who registered for the event</li>\r\n</ul>\r\n<p>50% of the tickets are normal, 30% are premium, and 20% are VIP. Based on this, find the total profit.</p>\r\n<p>Profit from a particular ticket type is calculated as: (sold-out capacity) x (price of ticket type x share of seats). Add the results for all 3 ticket types to get the total profit.</p>\r\n<p>The <strong>sold-out capacity</strong> is calculated as: <code>people_registered + capacity_left</code>.</p>\r\n<p><strong>Note:</strong> Earnings need to be rounded to 2 decimal places before doing comparisons.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>maxProfit</code> in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string organizer</code>: the name of the organizer</li>\r\n</ul>\r\n<p><strong>Returns</strong></p>\r\n<ul>\r\n    <li><code>string</code>: the name of the event by the specified organizer that gives the maximum profit when sold out</li>\r\n</ul>\r\n<p><strong>Note:</strong> Please review the header in the code stub to see available libraries for API requests in the selected language. Required libraries can be imported to solve the question.</p>\r\n<p>Check the full list of supported libraries at <a href=\"https://www.hackerrank.com/environment\">https://www.hackerrank.com/environment</a>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: organizer = \"empower integrated markets\"\r\nOutput: UnFFPVACS</code></pre>\r\n<p><strong>Explanation:</strong> The event 'UnFFPVACS' has the greatest profit of all the events organized by \"empower integrated markets.\" The total profit is calculated as follows:</p>\r\n<p>Let <code>ticket_prices = [normal_price, premium_price, vip_price]</code>. From the problem context, these are <code>[28, 96, 169]</code>.</p>\r\n<p><code>people_registered = 87815</code>, <code>capacity_left = 225</code></p>\r\n<p><code>sold-out capacity = people_registered + capacity_left = 87815 + 225 = 88040</code></p>\r\n<p><code>total profit = sold-out capacity * (0.5 * normal_price + 0.3 * premium_price + 0.2 * vip_price)</code></p>\r\n<p><code>total profit = 88040 * (0.5 * 28 + 0.3 * 96 + 0.2 * 169)</code></p>\r\n<p><code>total profit = 88040 * (14 + 28.8 + 33.8)</code></p>\r\n<p><code>total profit = 88040 * 76.6 = 6743864</code></p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: organizer = \"incentivize cross-media solutions\"\r\nOutput: XUKkzle</code></pre>\r\n<p><strong>Explanation:</strong> The event 'XUKkzle' has the greatest profit of the events organized by \"incentivize cross-media solutions.\" The total profit is calculated as follows:</p>\r\n<p>Let <code>ticket_prices = [normal_price, premium_price, vip_price]</code>. From the problem context, these are <code>[46, 77, 184]</code>.</p>\r\n<p><code>people_registered = 86495</code>, <code>capacity_left = 171</code></p>\r\n<p><code>sold-out capacity = people_registered + capacity_left = 86495 + 171 = 86666</code></p>\r\n<p><code>total profit = sold-out capacity * (0.5 * normal_price + 0.3 * premium_price + 0.2 * vip_price)</code></p>\r\n<p><code>total profit = 86666 * (0.5 * 46 + 0.3 * 77 + 0.2 * 184)</code></p>\r\n<p><code>total profit = 86666 * (23 + 23.1 + 36.8)</code></p>\r\n<p><code>total profit = 86666 * 82.9 = 7184611.4</code></p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": null,
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Murf ai_22oct",
        "company_id": 696
    }
]