[
    {
        "id": 832,
        "title": "Get Request Status",
        "problem_statement": "<h1>Get Request Status</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In each second <code>i</code>, a gateway receives a request from the domain <code>requests[i]</code>.</p>\r\n<p>The gateway allows at most 2 successful requests from a domain within 5 seconds, and at most 5 successful requests within 30 seconds.</p>\r\n<p>Given an array of domain strings, <code>requests</code>, for each request, determine if it can be",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Idfc_29march",
        "company_id": 256
    },
    {
        "id": 833,
        "title": "Track File Access",
        "problem_statement": "<h1>Track File Access</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a file management system, <code>m</code> users upload various files, each identified by a unique <code>file_id</code>.</p>\r\n<p>You are given:</p>\r\n<ul>\r\n    <li>An array <code>records</code> of size <code>n</code>, where each entry <code>records[i]</code> is formatted as <code>&lt;user_id&gt; &lt;file_id&gt; &lt;file_path&gt;</code>. This represents a file uploaded by a user, with a unique identifier and its corresponding file path.</li>\r\n    <li>An array <code>queries</code> of size <code>q</code>, where each entry contains a <code>file_id</code> for which a lookup is requested.</li>\r\n</ul>\r\n<p>For each query, return:</p>\r\n<ol>\r\n    <li>The file path associated with the requested <code>file_id</code>.</li>\r\n    <li>The cumulative request count for the corresponding <code>user_id</code> up to the current query.</li>\r\n</ol>\r\n<p>The function should process the queries in the given order and track how many times each user has been queried.</p>\r\n<p>The function <code>trackFileAccess</code> takes the following inputs:</p>\r\n<ul>\r\n    <li><code>int m</code>: the number of users</li>\r\n    <li><code>string records[n]</code>: the records of file uploads and file paths in no particular order</li>\r\n    <li><code>string queries[q]</code>: the file IDs requested in order</li>\r\n</ul>\r\n<p>The function should return a 2-D Array of strings that, for each query, contains the file path and cumulative request count for the user up to the current query.</p>\r\n<pre><code class='language-cpp'>vector<vector<string>> trackFileAccess(int n, vector<string> records, vector<string> queries) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nm = 3\r\nrecords = [\"0 sdsf www.google.com\", \"1 juytf www.google.com\", \"0 opoit www.kaggle.com\"]\r\nq = 3\r\nqueries = [\"juytf\", \"sdsf\", \"opoit\"]\r\nOutput: [[\"www.google.com\", \"1\"], [\"www.google.com\", \"1\"], [\"www.kaggle.com\", \"2\"]]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Let's trace the queries:</p>\r\n<ul>\r\n    <li><strong>Query 1: \"juytf\"</strong>\r\n        <ul>\r\n            <li>File ID \"juytf\" is associated with User ID 1 and File Path \"www.google.com\".</li>\r\n            <li>User ID 1 has been queried 1 time so far.</li>\r\n            <li>Result: [\"www.google.com\", \"1\"]</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Query 2: \"sdsf\"</strong>\r\n        <ul>\r\n            <li>File ID \"sdsf\" is associated with User ID 0 and File Path \"www.google.com\".</li>\r\n            <li>User ID 0 has been queried 1 time so far.</li>\r\n            <li>Result: [\"www.google.com\", \"1\"]</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Query 3: \"opoit\"</strong>\r\n        <ul>\r\n            <li>File ID \"opoit\" is associated with User ID 0 and File Path \"www.kaggle.com\".</li>\r\n            <li>User ID 0 has been queried 2 times so far.</li>\r\n            <li>Result: [\"www.kaggle.com\", \"2\"]</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Combining these results gives the final output: <code>[[\"www.google.com\", \"1\"], [\"www.google.com\", \"1\"], [\"www.kaggle.com\", \"2\"]]</code>.</p>\r\n\r\n<h3>Sample Case 0:</h3>\r\n<pre><code class='language-text'>Input:\r\nm = 3\r\nrecords = [\"0 giggl www.google.com\", \"0 fcbok www.facebook.com\", \"2 lefts www.hackerank.com\", \"0 hckrk www.hackerank.com\"]\r\nqueries = [\"hckrk\", \"lefts\"]\r\nOutput: [[\"www.hackerank.com\", \"1\"], [\"www.hackerank.com\", \"1\"]]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Let's trace the queries:</p>\r\n<ul>\r\n    <li><strong>Query 1: \"hckrk\"</strong>\r\n        <ul>\r\n            <li>File ID \"hckrk\" is associated with User ID 0 and File Path \"www.hackerank.com\".</li>\r\n            <li>User ID 0 has been queried 1 time so far.</li>\r\n            <li>Result: [\"www.hackerank.com\", \"1\"]</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Query 2: \"lefts\"</strong>\r\n        <ul>\r\n            <li>File ID \"lefts\" is associated with User ID 2 and File Path \"www.hackerank.com\".</li>\r\n            <li>User ID 2 has been queried 1 time so far.</li>\r\n            <li>Result: [\"www.hackerank.com\", \"1\"]</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Combining these results gives the final output: <code>[[\"www.hackerank.com\", \"1\"], [\"www.hackerank.com\", \"1\"]]</code>.</p>\r\n\r\n<h3>Sample Case 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nm = 1\r\nrecords = [\"0 tezox www.google.com\", \"0 rrakl www.facebook.com\", \"0 crona www.hackerank.com\", \"0 hckrk www.hackerank.com\"]\r\nqueries = [\"rrakl\", \"crona\"]\r\nOutput: [[\"www.facebook.com\", \"1\"], [\"www.hackerank.com\", \"2\"]]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<p>Let's trace the queries:</p>\r\n<ul>\r\n    <li><strong>Query 1: \"rrakl\"</strong>\r\n        <ul>\r\n            <li>File ID \"rrakl\" is associated with User ID 0 and File Path \"www.facebook.com\".</li>\r\n            <li>User ID 0 has been queried 1 time so far.</li>\r\n            <li>Result: [\"www.facebook.com\", \"1\"]</li>\r\n        </ul>\r\n    </li>\r\n    <li><strong>Query 2: \"crona\"</strong>\r\n        <ul>\r\n            <li>File ID \"crona\" is associated with User ID 0 and File Path \"www.hackerank.com\".</li>\r\n            <li>User ID 0 has been queried 2 times so far.</li>\r\n            <li>Result: [\"www.hackerank.com\", \"2\"]</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n<p>Combining these results gives the final output: <code>[[\"www.facebook.com\", \"1\"], [\"www.hackerank.com\", \"2\"]]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &le; n, m, q &le; 10<sup>5</sup></code></li>\r\n    <li><code>0 &le; user_id &le; m-1</code></li>\r\n    <li>The length of any file ID does not exceed 5 characters.</li>\r\n    <li>The length of each record is no longer than 30 characters.</li>\r\n    <li>Each file ID/path pair is distinct.</li>\r\n    <li>Each requested file ID is present in the records.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Idfc_29march",
        "company_id": 256
    },
    {
        "id": 834,
        "title": "Top K Bit Distances",
        "problem_statement": "<h1>Top K Bit Distances</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The bit distance, <code>d</code> of an integer, <code>x</code> is defined as the maximum distance between any two consecutive set bits. For example, let <code>x = 1036</code>, which, represented in binary, is <code>10000001100</code>. The distances between consecutive set bits are <code>[0, 6]</code>, respectively. Hence, the bit distance <code>d(x)</code> is equal to <code>6</code>. If there is only one set bit, the bit distance is considered to be <code>-1</code>. Given an integer array, the goal is to find the top <code>k</code> integers with maximum bit distances.</p>\r\n<p>For the given array of integers, sort the integers in decreasing order of their bit distances. If there are multiple integers with the same bit distances, sort them in decreasing order by their value. Report the first <code>k</code> integers of the array thus obtained.</p>\r\n<p>For example, let <code>n = 5, numbers = [12, 4, 5, 10, 8], and k = 3</code>.\r\nThe binary representation of array numbers is <code>[1100, 100, 101, 1010, 1000]</code>. The corresponding bit distances <code>d</code> are <code>[0, -1, 1, 1, -1]</code>.\r\n<code>5</code> and <code>10</code> are the integers with the highest <code>d</code> value of <code>1</code>, but since the value of <code>10</code> is greater than <code>5</code>, <code>10</code> would be reported first. <code>5</code> is reported second.\r\nThe second-largest <code>d</code> value is for <code>12</code>, with a bit distance of <code>0</code>. Since there are no other integers with a <code>d</code> value of <code>0</code>, <code>12</code> is reported third.\r\nHence, the final pick would be the integers <code>[10, 5, 12]</code>.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>Complete the function <code>getTopKBitDistances</code> in the editor below.</p>\r\n<p><code>getTopKBitDistances</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>numbers/numbers[0]...numbers[n-1]</code>: an array of positive integers</li>\r\n    <li><code>k</code>: an integer denoting the number of integers you need to select</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>res</code>: an array of <code>k</code> integers denoting the topmost <code>k</code> integers in decreasing order of their bit distances.</li>\r\n</ul>\r\n<pre><code class='language-javascript'>vector<int> getTopKBitDistances(vector<int> numbers, int k)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nnumbers size = 3\r\nnumbers = [3, 5, 8]\r\nk = 1\r\nOutput:\r\n5</code></pre>\r\n<p><strong>Explanation:</strong> The integers in binary form are <code>[11, 101, 1000]</code>. The corresponding <code>d</code> values are <code>[0, 1, -1]</code>. Since <code>k = 1</code>, only the integer with the highest bit distance is reported, which is <code>5</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nnumbers size = 4\r\nnumbers = [10, 13, 5, 18]\r\nk = 3\r\nOutput:\r\n18\r\n13\r\n10</code></pre>\r\n<p><strong>Explanation:</strong> The integers in binary form are <code>[1010, 1101, 101, 10010]</code>. The corresponding <code>d</code> values are <code>[1, 1, 1, 2]</code>. <code>18</code> is reported first because it has the highest <code>d</code> value. <code>10, 13, 5</code> all have the same bit distance, and since only <code>2</code> more integers need to be reported, <code>13</code> and <code>10</code> are reported in that order because those are the two largest integers in decreasing order. Hence, the answer is <code>[18, 13, 10]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10^5</code></li>\r\n    <li><code>1 <= numbers[i] <= 10^8</code></li>\r\n    <li><code>1 <= k <= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Idfc_29march",
        "company_id": 256
    },
    {
        "id": 835,
        "title": "Spam Classifier",
        "problem_statement": "<h1>Spam Classifier</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A classification system evaluates if given <code>n</code> texts are spam based on a list of <code>k</code> spam words.</p>\r\n<p>A text is labeled as \"spam\" if it contains at least two spam words. Each occurrence of a spam word in a text counts towards the total. The spam words are not case-sensitive.</p>\r\n<p>Implement a function that determines whether each text is \"spam\" or \"not_spam\".</p>\r\n<p>The function <code>classifyTexts</code> will take two inputs:</p>\r\n<ul>\r\n    <li><code>string texts[n]</code>: the texts to evaluate</li>\r\n    <li><code>string spamWords[k]</code>: the spam words</li>\r\n</ul>\r\n<p>The function should return an array of <code>n</code> strings, either \"spam\" or \"not_spam\" for each text.</p>\r\n<p>The function signature is:</p>\r\n<pre><code class='language-javascript'>vector&lt;string&gt; classifyTexts(vector&lt;string&gt; texts, vector&lt;string&gt; spamWords)</code></pre>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: texts = [\"free prize worth millions\", \"ten tips for a carefree lifestyle\"], spamWords = [\"free\", \"money\", \"win\", \"millions\"]\r\nOutput: [\"spam\", \"not_spam\"]</code></pre>\r\n<p><strong>Explanation:</strong></p>\r\n<ul>\r\n    <li>For the text \"free prize worth millions\": The spam words \"free\" and \"millions\" are found. Each occurs once. Total occurrences = 2. Since 2 >= 2, the text is \"spam\".</li>\r\n    <li>For the text \"ten tips for a carefree lifestyle\": No spam words from the list are found. Total occurrences = 0. Since 0 < 2, the text is \"not_spam\".</li>\r\n</ul>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: texts = [\"I paid him paid\", \"Summertime Sadness\"], spamWords = [\"I\", \"Sadness\", \"paid\"]\r\nOutput: [\"spam\", \"not_spam\"]</code></pre>\r\n<p><strong>Explanation:</strong> Spam words are not case-sensitive.</p>\r\n<ul>\r\n    <li>For the text \"I paid him paid\": The spam word \"I\" is found once. The spam word \"paid\" is found twice. Total occurrences = 1 + 2 = 3. Since 3 >= 2, the text is \"spam\".</li>\r\n    <li>For the text \"Summertime Sadness\": The spam word \"Sadness\" is found once. Total occurrences = 1. Since 1 < 2, the text is \"not_spam\".</li>\r\n</ul>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: texts = [\"Let it go\", \"The right thing to do\"], spamWords = [\"to\", \"do\", \"right\", \"go\", \"let\"]\r\nOutput: [\"spam\", \"spam\"]</code></pre>\r\n<p><strong>Explanation:</strong> Spam words are not case-sensitive.</p>\r\n<ul>\r\n    <li>For the text \"Let it go\": The spam words \"let\" and \"go\" are found. Each occurs once. Total occurrences = 1 + 1 = 2. Since 2 >= 2, the text is \"spam\".</li>\r\n    <li>For the text \"The right thing to do\": The spam words \"right\", \"to\", and \"do\" are found. Each occurs once. Total occurrences = 1 + 1 + 1 = 3. Since 3 >= 2, the text is \"spam\".</li>\r\n</ul>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= k &lt;= 10^3</code></li>\r\n    <li><code>1 &lt;= |texts[i]| &lt;= 10^5</code></li>\r\n    <li><code>1 &lt;= |spamWords[j]| &lt;= 10^5</code></li>\r\n    <li>It is guaranteed that the texts and spam words consist of lowercase and uppercase English letters and spaces only.</li>\r\n    <li>The combined length of all <code>spamWords</code> does not exceed <code>10^7</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Idfc_29march",
        "company_id": 256
    },
    {
        "id": 836,
        "title": "Simple Cipher Decryption",
        "problem_statement": "<h1>Simple Cipher Decryption</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A simple cipher is built on the alphabet wheel which has uppercase English letters ['A'-'Z'] written on it:</p>\r\n<p>Given an encrypted string consisting of English letters ['A'-'Z'] only, decrypt the string by replacing each character with the k<sup>th</sup> character away on the wheel in the counter-clockwise direction. Counter-clockwise is the opposite direction in which the hands on a clock usually move. In the image, Z is 1 unit counter-clockwise from A.</p>\r\n<p>Complete the function <code>simpleCipher</code> in the editor below.</p>\r\n<p><code>simpleCipher</code> has the following parameter(s):</p>\r\n<ul>\r\n    <li><code>string encrypted</code>: the string to decrypt</li>\r\n    <li><code>int k</code>: the position of the character to find</li>\r\n</ul>\r\n<p>Returns:</p>\r\n<ul>\r\n    <li><code>string</code>: the decrypted string</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: encrypted = 'VTAOG', k = 2\r\nOutput: TRYME</code></pre>\r\n<p><strong>Explanation:</strong> Looking back 2 from 'V' returns 'T', from 'T' returns 'R', and so on. The decrypted string is 'TRYME'.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: encrypted = 'CDEF', k = 2\r\nOutput: ABCD</code></pre>\r\n<p><strong>Explanation:</strong> Each character is replaced by the character k = 2 positions away in the counter-clockwise direction. 'C' → 'A', 'D' → 'B', and so on. The decrypted string is 'ABCD'.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: encrypted = 'DGEO', k = 3\r\nOutput: ADBL</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= |encrypted| <= 10<sup>5</sup></code></li>\r\n    <li><code>1 <= k <= 10<sup>5</sup></code></li>\r\n    <li><code>encrypted[i]</code> is an ASCII uppercase English letter ('A' through 'Z').</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Idfc_29march",
        "company_id": 256
    }
]