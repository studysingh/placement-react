[
    {
        "id": 1365,
        "title": "Calculate Max Distance",
        "problem_statement": "<h1>Calculate Max Distance</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>At Amazon's research laboratory, <code>k</code> engineers need to be assigned to workstations based on their expertise sets.</p>\r\n<ul>\r\n    <li>Each engineer has a specific expertise, represented by a character in the <code>expertise</code> string.</li>\r\n    <li>Engineers appear in the order they need to be assigned.</li>\r\n    <li>The laboratory has a row of <code>j</code> available workstations, each tagged with the expertise it supports, represented by the <code>workspace</code> string. The <code>i</code>th character of <code>workspace</code> shows the expertise accepted by the <code>i</code>th workstation.</li>\r\n</ul>\r\n\r\n<h3>Assignment Rules:</h3>\r\n<ul>\r\n    <li>Each engineer must be assigned to a compatible workstation (matching their expertise).</li>\r\n    <li>Engineers must be placed in the same order as they appear in the <code>expertise</code> string.</li>\r\n    <li>Workstations assigned to engineers don't have to be next to each other, i.e., (they do not need to be contiguous).</li>\r\n</ul>\r\n\r\n<p><strong>Goal:</strong> Find the maximum isolation of any valid assignment.</p>\r\n\r\n<p>Isolation is defined as the largest gap (in workstation indices) between any two adjacent engineers. More formally, if engineers are assigned to workstations at positions <code>q_1, q_2, ..., q_k</code>, then: <code>isolation = max(q_i+1 - q_i)</code> for <code>1 <= i < k</code>. It is guaranteed that a valid assignment exists for every engineer.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>k = 3\r\nexpertise = \"bab\"\r\nj = 6\r\nworkspace = \"babcab\"</code></pre>\r\n<p>Following are the ways (Underlined letters represent the position of the engineers in the same order they appear in the string expertise)</p>\r\n<pre><code class='language-text'>babcab -> isolation 0 (no workstations between any two workstations having an engineer)\r\nbabcab -> isolation 3 (3 workstations between 2nd and 6th workstation having 2nd and 3rd engineer)\r\nbabcab -> isolation 3 (3 workstations between 1st and 5th workstation having 1st and 2nd engineer)\r\nbabcab -> isolation 1 (1 workstation between 3rd and 5th workstation having 1st and 2nd engineer)</code></pre>\r\n<p>Maximum isolation is 3.</p>\r\n<p><strong>Output:</strong> 3</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function <code>calculateMaxDistance</code> in the editor below.</p>\r\n<p><code>calculateMaxDistance</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>string expertise</code>: contains the expertise of each of the <code>k</code> engineers.</li>\r\n    <li><code>string workspace</code>: contains the expertise of engineers that can work in the workstations.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: Maximum isolation</li>\r\n</ul>\r\n\r\n<pre><code class='language-cpp'>int calculateMaxDistance(string expertise, string workspace) {\r\n    // Function implementation\r\n}</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= k <= j <= 2 * 10^5</code></li>\r\n    <li><code>expertise</code>, <code>workspace</code> contains lower-case Latin alphabets only.</li>\r\n    <li>The string <code>workspace</code> is a subsequence of the string <code>expertise</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_5sep",
        "company_id": 475
    },
    {
        "id": 1366,
        "title": "Code Question 2",
        "problem_statement": "<h1>Code Question 2</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The Data Science Team at Amazon is facing a unique challenge. A portion of their data has gone missing from their database. However, they believe they can recover the lost data based on the following information:</p>\r\n<ol>\r\n<li>The missing data is a permutation of the characters found in the string <code>firstInfo</code>.</li>\r\n<li>The missing data is lexicographically greater than the string <code>secondInfo</code>.</li>\r\n<li>The missing data is the lexicographically smallest string that satisfies the above two conditions.</li>\r\n</ol>\r\n<p>In other words, they are searching for the smallest string that meets these criteria.</p>\r\n<p>A string <code>x</code> is lexicographically smaller than a string <code>y</code> if:</p>\r\n<ul>\r\n<li><code>x[i] < y[i]</code> at the first position where <code>x</code> and <code>y</code> differ, or</li>\r\n<li><code>|x| < |y|</code> and <code>x</code> is a prefix of <code>y</code> (where <code>|x|</code> denotes the length of string <code>x</code>).</li>\r\n</ul>\r\n<p>Complete the function <code>retrieveData</code> in the editor below.</p>\r\n<p>The function <code>retrieveData</code> has the following parameters:</p>\r\n<ul>\r\n<li><code>firstInfo</code>: the string that contains the first information.</li>\r\n<li><code>secondInfo</code>: the string that contains the second information.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n<li><code>string</code>: the missing data that matches the above criteria if possible, otherwise return <code>\"-1\"</code>.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aca\", secondInfo = \"aba\"\r\nOutput: \"aca\"</code></pre>\r\n<p><strong>Explanation:</strong> The data that satisfies the given conditions is either \"aca\" or \"caa\". Both options are valid permutations of <code>firstInfo</code> and are lexicographically greater than <code>secondInfo</code>. Since the goal is to retrieve the lexicographically smallest piece of missing data, \"aca\" is the correct result.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aac\", secondInfo = \"aa\"\r\nOutput: \"aac\"</code></pre>\r\n<p><strong>Explanation:</strong> The possible pieces of missing data that satisfy the conditions are \"aac\", \"aca\", and \"caa\". Since \"aac\" is the lexicographically smallest, it is the most suitable piece of data to retrieve.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n<li><code>1 <= |firstInfo|, |secondInfo| <= 5000</code></li>\r\n<li><code>firstInfo</code> and <code>secondInfo</code> consist of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_5sep",
        "company_id": 475
    },
    {
        "id": 1377,
        "title": "Maximize Storage Efficiency",
        "problem_statement": "<h1>Maximize Storage Efficiency</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You're managing Amazon's cloud storage system. There are <code>n</code> tasks that need to be processed, and the <code>i<sup>th</sup></code> task is broken into <code>num_segments[i]</code> segments. The cloud storage is divided into <code>m</code> storage units. The segments are allocated to these units with the following rules:</p>\r\n<ul>\r\n    <li>Each segment is stored in exactly one storage unit.</li>\r\n    <li>Each storage unit must hold at least one segment.</li>\r\n    <li>A storage unit cannot contain segments from more than one task.</li>\r\n</ul>\r\n<p>The storage efficiency is measured by the minimum number of segments that any storage unit contains.</p>\r\n<p>Your task is to organize the segments in such a way that this storage efficiency is maximized.</p>\r\n<p>Complete the function <code>getMaximumStorageEfficiency</code> in the editor below with the following parameter(s):</p>\r\n<ul>\r\n    <li><code>int num_segments[]</code>: The number of segments a process is divided into.</li>\r\n    <li><code>int n</code>: The number of tasks.</li>\r\n    <li><code>long m</code>: The number of storage units.</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li><code>int</code>: The maximum storage efficiency.</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, num_segments = [7,10,5], m = 4\r\nOutput: 5</code></pre>\r\n<p><strong>Explanation:</strong> There are 3 tasks that need to be processed. Task 1 has 7 segments, Task 2 has 10 segments, and Task 3 has 5 segments. One of the optimal ways to allocate is:</p>\r\n<ul>\r\n    <li>Storage unit 1: all 7 segments from task 1</li>\r\n    <li>Storage unit 2: 5 segments from task 2</li>\r\n    <li>Storage unit 3: 5 segments from task 2</li>\r\n    <li>Storage unit 4: 5 segments from task 3</li>\r\n</ul>\r\n<p>The minimum segments in any storage unit is 5 in storage units 2, 3, and 4. It can be proved that we cannot achieve a higher value for the minimum segment in any storage unit. Hence, the answer is 5.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: n = 3, num_segments = [4,3,5], m = 3\r\nOutput: 3</code></pre>\r\n<p><strong>Explanation:</strong> As <code>m = 3 (= n)</code>, the only way to store the processes is:</p>\r\n<ul>\r\n    <li>Store 4 segments of task 1 in storage unit 1.</li>\r\n    <li>Store 3 segments of task 2 in storage unit 2.</li>\r\n    <li>Store 5 segments of task 3 in storage unit 3.</li>\r\n</ul>\r\n<p>Hence, the storage efficiency is 3.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: n = 2, num_segments = [1,2], m = 3\r\nOutput: 1</code></pre>\r\n<p><strong>Explanation:</strong> The only way to store the processes is:</p>\r\n<ul>\r\n    <li>Store 1 segment of task 1 in storage unit 1.</li>\r\n    <li>Store 1 segment of task 2 in storage unit 2.</li>\r\n    <li>Store 1 segment of task 2 in storage unit 3.</li>\r\n</ul>\r\n<p>Hence, the storage efficiency is 1.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li>\r\n    <li><code>1 &lt;= num_segments[i] &lt;= 10<sup>9</sup></code></li>\r\n    <li><code>n &lt;= m &lt;= sum(num_segments)</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_5sep",
        "company_id": 475
    },
    {
        "id": 1378,
        "title": "Retrieve Data",
        "problem_statement": "<h1>Retrieve Data</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The Data Science Team at Amazon is facing a unique challenge. A portion of their data has gone missing from their database. However, they believe they can recover the lost data based on the following information:</p>\r\n<ol>\r\n    <li>The missing data is a permutation of the characters found in the string <code>firstInfo</code>.</li>\r\n    <li>The missing data is lexicographically greater than the string <code>secondInfo</code>.</li>\r\n    <li>The missing data is the lexicographically smallest string that satisfies the above two conditions.</li>\r\n</ol>\r\n<p>In other words, they are searching for the smallest string that meets these criteria.</p>\r\n<p>A string <code>x</code> is lexicographically smaller than a string <code>y</code> if:</p>\r\n<ul>\r\n    <li><code>x[i] &lt; y[i]</code> at the first position <code>i</code> where <code>x</code> and <code>y</code> differ, or</li>\r\n    <li><code>x</code> is a prefix of <code>y</code> (where <code>|x|</code> denotes the length of string <code>x</code>).</li>\r\n</ul>\r\n<p>Complete the function <code>retrieveData</code> in the editor below.</p>\r\n<p>The function <code>retrieveData</code> has the following parameters:</p>\r\n<ul>\r\n    <li><code>firstInfo</code>: the string that contains the first information.</li>\r\n    <li><code>secondInfo</code>: the string that contains the second information.</li>\r\n</ul>\r\n<p>The function is expected to return a <code>STRING</code>: the missing data that matches the above criteria if possible, otherwise return <code>\"-1\"</code>.</p>\r\n<pre><code class='language-cpp'>string retrieveData(string firstInfo, string secondInfo) {\r\n    // Function implementation\r\n}\r\n</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"aae\", secondInfo = \"aa\"\r\nOutput: \"aea\"</code></pre>\r\n<p><strong>Explanation:</strong> The data that satisfies the given conditions is either \"aae\" or \"aea\". Both options are valid permutations of <code>firstInfo</code> and are lexicographically greater than <code>secondInfo</code>. Since the goal is to retrieve the lexicographically smallest piece of missing data, \"aea\" is the correct result.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: firstInfo = \"abc\", secondInfo = \"defg\"\r\nOutput: \"-1\"</code></pre>\r\n<p><strong>Explanation:</strong> It can be observed that no permutation of the missing data from <code>firstInfo = \"abc\"</code> would be lexicographically greater than <code>secondInfo = \"defg\"</code>. Therefore, no valid data can be retrieved.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= |firstInfo|, |secondInfo| &lt;= 6000</code></li>\r\n    <li><code>firstInfo</code> and <code>secondInfo</code> consist of lowercase English letters.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_5sep",
        "company_id": 475
    },
    {
        "id": 1379,
        "title": "Subsequence Medians",
        "problem_statement": "<h1>Subsequence Medians</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>A new Amazon intern encountered a challenging task. Currently, the intern has <code>n</code> integers, where the value of the <code>i<sup>th</sup></code> element is represented by the array element <code>values[i]</code>. The intern is curious to play with arrays and subsequences and thus asks you to join him. Given <code>n</code> integers, array <code>values</code>, and an integer <code>k</code>, the intern needs to find the maximum and minimum overall subsequences of length <code>k</code>.</p>\r\n<p>Complete the function <code>medians</code> in the editor below.</p>\r\n<p>The function is expected to return an <strong>INTEGER_ARRAY</strong>.</p>\r\n<p>The function accepts the following parameters:</p>\r\n<ul>\r\n    <li><code>int values[]</code>: the value of integers</li>\r\n    <li><code>int k</code>: the given integer</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p><code>int[]</code>: the maximum and minimum overall subsequences of length <code>k</code> in the form <code>[maximum median, minimum median]</code>.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: n = 3, values = [1, 2, 3], target = 2\r\nOutput: [2, 1]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nGiven <code>values = [1, 2, 3]</code> and <code>k = 2</code>, the subsequences of length <code>k</code> and their medians are:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Subsequences of length k</th>\r\n            <th>median</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>[1, 2]</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[1, 3]</td>\r\n            <td>1</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[2, 3]</td>\r\n            <td>2</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>Here, the maximum median present is 2 and the minimum median in the subsequence present is 1. We return <code>[2, 1]</code>.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: values = [56, 21], k = 1\r\nOutput: [56, 21]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nGiven <code>values = [56, 21]</code> and <code>k = 1</code>, the subsequences of length <code>k</code> and their medians are:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Subsequences of length k</th>\r\n            <th>median</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>[56]</td>\r\n            <td>56</td>\r\n        </tr>\r\n        <tr>\r\n            <td>[21]</td>\r\n            <td>21</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>The maximum median present is 56 and the minimum subsequence present is 21. We return <code>[56, 21]</code>.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: values = [16, 21, 9, 2, 78], k = 5\r\nOutput: [16, 16]</code></pre>\r\n<p><strong>Explanation:</strong>\r\nGiven <code>values = [16, 21, 9, 2, 78]</code> and <code>k = 5</code>, the subsequences of length <code>k</code> and their medians are:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Subsequences of length k</th>\r\n            <th>median</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>[16, 21, 9, 2, 78]</td>\r\n            <td>16</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>There is only one subsequence of length 5, which is the array itself. After sorting <code>[16, 21, 9, 2, 78]</code> becomes <code>[2, 9, 16, 21, 78]</code>. The median (the middle element for odd length) is 16. Hence the maximum median and minimum median are both 16. We return <code>[16, 16]</code>.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code></li>\r\n    <li><code>0 <= values[i] <= 10<sup>9</sup></code></li>\r\n    <li><code>1 <= k <= n</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Amazon_5sep",
        "company_id": 475
    }
]