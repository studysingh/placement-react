[
    {
        "id": 708,
        "title": "Total Transmitted Logs",
        "problem_statement": "<h1>Total Transmitted Logs</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a logging system with a circular buffer that can hold up to <code>n</code> logs. Each log has a unique timestamp (<code>logTimestamp</code> in milliseconds) and a log tag (<code>string</code>). When a new log arrives, the system:</p>\r\n<ul>\r\n    <li>transmits all logs sharing the same tag as the new log, but only if they fall within a specific time window (<code>transmissionWindow</code>).</li>\r\n    <li>If the buffer is full, it removes the oldest log to make space for the new one.</li>\r\n</ul>\r\n<p>Implement a function that finds the total number of logs transmitted throughout the process as logs arrive, considering the circular buffer's capacity and the time window for transmission.</p>\r\n<p>The function <code>getTotalTransmittedLogs</code> takes the following parameters:</p>\r\n<ul>\r\n    <li><code>int logTimestamp[]</code>: the recording times of logs in milliseconds</li>\r\n    <li><code>string logTag[]</code>: the tags of logs</li>\r\n    <li><code>int bufferCapacity</code>: the capacity of the circular buffer</li>\r\n    <li><code>int transmissionWindow</code>: the time range (in milliseconds) within which logs sharing the same tag as the arriving log are transmitted</li>\r\n</ul>\r\n<p>The function should return the number of logs transmitted during the process as an integer.</p>\r\n\r\n<h2>Examples</h2>\r\n\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: logTimestamp = [1000, 2000, 2500, 3000, 4000], logTag = [\"error\", \"warning\", \"error\", \"info\", \"warning\"], bufferCapacity = 3, transmissionWindow = 2000\r\nOutput: 6</code></pre>\r\n<p><strong>Explanation:</strong> The logs received are as follows:</p>\r\n<ul>\r\n    <li>Log 1: Timestamp = 1000 ms, Tag = \"error\"</li>\r\n    <li>Log 2: Timestamp = 2000 ms, Tag = \"warning\"</li>\r\n    <li>Log 3: Timestamp = 2500 ms, Tag = \"error\"</li>\r\n    <li>Log 4: Timestamp = 3000 ms, Tag = \"info\"</li>\r\n    <li>Log 5: Timestamp = 4000 ms, Tag = \"warning\"</li>\r\n</ul>\r\n<p>Condition of Buffer and logs transmitted during the process:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Time Stamp</th>\r\n            <th>Buffer before Time Stamp</th>\r\n            <th>Buffer During Time Stamp</th>\r\n            <th>Tag of current Log</th>\r\n            <th>Logs Transmitted</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>1000 ms</td>\r\n            <td></td>\r\n            <td>[Log 1]</td>\r\n            <td>\"error\"</td>\r\n            <td>[Log 1]</td>\r\n        </tr>\r\n        <tr>\r\n            <td>2000 ms</td>\r\n            <td>[Log 1]</td>\r\n            <td>[Log 1, Log 2]</td>\r\n            <td>\"warning\"</td>\r\n            <td>[Log 2]</td>\r\n        </tr>\r\n        <tr>\r\n            <td>2500 ms</td>\r\n            <td>[Log 1, Log 2]</td>\r\n            <td>[Log 1, Log 2, Log 3]</td>\r\n            <td>\"error\"</td>\r\n            <td>[Log 1, Log 3]</td>\r\n        </tr>\r\n        <tr>\r\n            <td>3000 ms</td>\r\n            <td>[Log 1, Log 2, Log 3]</td>\r\n            <td>[Log 2, Log 3, Log 4]</td>\r\n            <td>\"info\"</td>\r\n            <td>[Log 4]</td>\r\n        </tr>\r\n        <tr>\r\n            <td>4000 ms</td>\r\n            <td>[Log 2, Log 3, Log 4]</td>\r\n            <td>[Log 3, Log 4, Log 5]</td>\r\n            <td>\"warning\"</td>\r\n            <td>[Log 5]</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>The total number of logs transmitted during the process is 6.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: logTimestamp = [10, 15, 20], logTag = [\"a\", \"b\", \"b\"], bufferCapacity = 2, transmissionWindow = 5\r\nOutput: 4</code></pre>\r\n<p><strong>Explanation:</strong> The logs received are as follows:</p>\r\n<ul>\r\n    <li>Log 1: Timestamp = 10 ms, Tag = 'a'</li>\r\n    <li>Log 2: Timestamp = 15 ms, Tag = 'b'</li>\r\n    <li>Log 3: Timestamp = 20 ms, Tag = 'b'</li>\r\n</ul>\r\n<p>Condition of Buffer and logs transmitted during the process:</p>\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Time Stamp</th>\r\n            <th>Buffer before Time Stamp</th>\r\n            <th>Buffer During Time Stamp</th>\r\n            <th>Tag of current Log</th>\r\n            <th>Logs Transmitted</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr>\r\n            <td>10 ms</td>\r\n            <td></td>\r\n            <td>[Log 1]</td>\r\n            <td>\"a\"</td>\r\n            <td>[Log 1]</td>\r\n        </tr>\r\n        <tr>\r\n            <td>15 ms</td>\r\n            <td>[Log 1]</td>\r\n            <td>[Log 1, Log 2]</td>\r\n            <td>\"b\"</td>\r\n            <td>[Log 2]</td>\r\n        </tr>\r\n        <tr>\r\n            <td>20 ms</td>\r\n            <td>[Log 1, Log 2]</td>\r\n            <td>[Log 2, Log 3]</td>\r\n            <td>\"b\"</td>\r\n            <td>[Log 2, Log 3]</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<p>The total number of logs transmitted during the process is 4.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_15july",
        "company_id": 225
    },
    {
        "id": 709,
        "title": "Largest Magical Binary String",
        "problem_statement": "<h1>Largest Magical Binary String</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>In a good binary string:</p>\r\n<ol>\r\n    <li>The number of 0's equals the number of 1's.</li>\r\n    <li>For every prefix of the string, the number of 1's is greater than or equal to the number of 0's.</li>\r\n</ol>\r\n<p>Optimize a \"good\" binary string by rearranging its good substrings to create the largest possible numeric value.</p>\r\n<p><strong>Rules:</strong></p>\r\n<ul>\r\n    <li>A good string can contain multiple good substrings.</li>\r\n    <li>Two adjacent good substrings can be swapped if the resulting string remains good.</li>\r\n    <li>Two substrings are adjacent if the last character of the first substring is immediately before the first character of the second substring.</li>\r\n</ul>\r\n<p>Perform zero or more swap operations on adjacent good substrings to form the binary string with the largest possible numeric value and return that value.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>Complete the function `largestMagical` in the editor with the following parameters:</p>\r\n<ul>\r\n    <li>`str binString`: a binary string</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<ul>\r\n    <li>`str`: the largest possible binary value as a string</li>\r\n</ul>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: binString = \"11011000\"\r\nOutput: 11100100</code></pre>\r\n<p><strong>Explanation:</strong> Choose two adjacent good substrings to swap: \"10\" and \"1100\". The resultant string, `str = 11100100`.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: binString = \"1100\"\r\nOutput: 1100</code></pre>\r\n<p><strong>Explanation:</strong> The only good substring of `binString` is \"1100\". No operations can be applied to the string.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: binString = \"1101001100\"\r\nOutput: 1101001100</code></pre>\r\n<p><strong>Explanation:</strong> The only consecutive good substrings are \"110100\" and \"1100\". Note that \"100\" is not a good substring because it contains more zeroes than ones. If they are swapped, it results in a numerically smaller string. Thus, `binString` is already the numerically largest good string that can be formed.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>Each character of `binString` is in {0,1}.</li>\r\n    <li>1 &le; length of `binString` &le; 50</li>\r\n    <li>`binString` is a good string.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_15july",
        "company_id": 225
    },
    {
        "id": 710,
        "title": "Maximum Sum of Array",
        "problem_statement": "<h1>Maximum Sum of Array</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given two arrays, <code>arr1</code> and <code>arr2</code>, each of length <code>n</code>. In one operation, any two elements within a single array can be swapped. This operation can be performed any number of times. The goal is to find the maximum possible sum of <code>i * (arr2[i] - arr1[i])</code> for all <code>1 <= i <= n</code> after rearranging the elements within <code>arr1</code> and/or <code>arr2</code>. Since the maximum possible sum can be very large, return the value modulo <code>(10^9 + 7)</code>.</p>\r\n<p>Complete the function <code>getMaxSumOfArray</code> in the editor below.</p>\r\n<pre><code class='language-cpp'>int getMaxSumOfArray(vector&lt;int&gt; arr1, vector&lt;int&gt; arr2) {\r\n    // Complete the function below\r\n}</code></pre>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 4\r\narr1 = [2, 1, 3, 4]\r\narr2 = [2, 3, 2, 4]\r\nOutput: 7</code></pre>\r\n<p><strong>Explanation:</strong> Some possible rearrangements and their resulting sums are shown in the problem statement. For instance, if <code>arr1</code> is rearranged to <code>[2, 1, 3, 4]</code> and <code>arr2</code> to <code>[2, 3, 2, 3]</code>, the sum is <code>-3</code>. If <code>arr1</code> is rearranged to <code>[3, 1, 2, 4]</code> and <code>arr2</code> to <code>[2, 3, 2, 3]</code>, the sum is <code>-1</code>. If <code>arr1</code> is rearranged to <code>[3, 1, 2, 4]</code> and <code>arr2</code> to <code>[3, 2, 2, 3]</code>, the sum is <code>-2</code>. The maximum sum possible is 7, and 7 modulo (10^9 + 7) = 7.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\nn = 3\r\narr1 = [1, 2, 3]\r\narr2 = [10, 10, ",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_15july",
        "company_id": 225
    },
    {
        "id": 711,
        "title": "Longest Single Slot",
        "problem_statement": "<h1>Longest Single Slot</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Analyze the work shifts of 26 nurses with employee numbers 0 to 25, corresponding to IDs 'a' through 'z'.</p>\r\n<ul>\r\n    <li>Shifts start at time 0.</li>\r\n    <li>One nurse works at a time.</li>\r\n    <li>The next nurse begins immediately when the previous one finishes.</li>\r\n    <li>Given a 2D array, <code>leaveTimes</code>, where each element is <code>[employee number, leave time]</code>.</li>\r\n    <li>Determine the ID of the nurse who has the longest single shift.</li>\r\n</ul>\r\n<p><strong>Note:</strong> Consecutive shifts by the same employee are considered separate.</p>\r\n<p>Complete the function <code>findLongestSingleSlot</code> which accepts a 2D integer array, <code>leaveTimes</code>, as a parameter. Each inner array <code>[employee number, leave time]</code> represents an employee's shift ending time. The function should return the character ID of the nurse with the longest single shift.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: leaveTimes = [[0, 3], [2, 5], [0, 9], [1, 15]]\r\nOutput: b</code></pre>\r\n<p><strong>Explanation:</strong> The shifts are as follows:</p>\r\n<ol>\r\n    <li>Employee 0 works from t = 0 to t = 3, i.e., for 3 units.</li>\r\n    <li>Employee 2 works from t = 3 to t = 5, i.e., for 2 units.</li>\r\n    <li>Employee 0 works from t = 5 to t = 9, i.e., for 4 units.</li>\r\n    <li>Employee 1 works from t = 9 to t = 15, i.e., for 6 units.</li>\r\n</ol>\r\n<p>The longest shift is of 6 units by employee 1. Employee 1's ID is 'b'.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: leaveTimes = [[0, 2], [1, 3], [0, 7]]\r\nOutput: a</code></pre>\r\n<p><strong>Explanation:</strong> The time slots are as follows:</p>\r\n<ol>\r\n    <li>Employee 0 works for 2-0 = 2 units.</li>\r\n    <li>Employee 1 works for 3-2 = 1 unit.</li>\r\n    <li>Employee 0 works for 7-3 = 4 units.</li>\r\n</ol>\r\n<p>The longest shift is 4 units by employee 0 whose ID = 'a'.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: leaveTimes = [[0, 1], [0, 3], [4, 5], [5, 6], [4, 10]]\r\nOutput: e</code></pre>\r\n<p><strong>Explanation:</strong> The time slots are as follows:</p>\r\n<ol>\r\n    <li>Employee 0 works for 1-0 = 1 unit.</li>\r\n    <li>Employee 0 works for 3-1 = 2 units.</li>\r\n    <li>Employee 4 works for 5-3 = 2 units.</li>\r\n    <li>Employee 5 works for 6-5 = 1 unit.</li>\r\n    <li>Employee 4 works for 10-6 = 4 units.</li>\r\n</ol>\r\n<p>The longest shift is of 4 units by employee 4 whose ID = 'e'. Note that the first two slots by employee 0 are treated as two different shifts.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 <= n <= 10<sup>5</sup></code> (where <code>n</code> is the number of shifts)</li>\r\n    <li><code>0 <= leaveTimes[i][0] <= 25</code> (employee number)</li>\r\n    <li><code>1 <= leaveTimes[i][1] <= 10<sup>9</sup></code> (leave time)</li>\r\n    <li>Only one nurse has the longest shift.</li>\r\n    <li><code>leaveTimes</code> is sorted in ascending order of <code>leaveTimes[i][1]</code>.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Ion Group_15july",
        "company_id": 225
    }
]