[
    {
        "id": 143,
        "title": "Get Lexicographically Smallest String",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Question 16: Get Lexicographically Smallest String</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>A data scientist is working on a project where they need to train a language model to recognize certain patterns in text data. The model requires a specific set of characters as input to learn from. However, some of the characters needed for training are missing from the dataset, represented in the form of a string called <code>dataToBeGenerated</code>.</p>\n\n<p>To acquire these missing characters, the data scientist has a tool that can generate multiple copies of a given string. However, the tool can only generate strings of a fixed length, <code>n</code>, and it only accepts one input string to generate missing data.</p>\n\n<p>Each string generated by the tool incurs a cost, and the more copies of strings generated, the higher the cost. The goal is to minimize the cost while ensuring the data contains all the required characters. The task is to find the lexicographically smallest input string that, when fed into the data generation tool, produces datasets containing all the required characters while minimizing the total cost. If it is not possible to do so, return \\\"-1\\\" as a string.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getLexSmallestString</code> which takes the following parameters:</p>\n        <ul>\n            <li><code>int n</code>: the length of the input string provided to the generation tool</li>\n            <li><code>string dataToBeGenerated</code>: a string containing all the missing characters required for training the language model</li>\n        </ul>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 2 * 10<sup>5</sup></li>\n            <li>1 ≤ |dataToBeGenerated| ≤ 2 * 10<sup>5</sup></li>\n            <li><code>dataToBeGenerated</code> only contains lowercase English letters from \\'a\\' to \\'z\\'</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n<div class=\\\"example\\\">\n            <h4>Example 1:</h4>\n            <pre class=\\\"input\\\">Input:\nn = 2\ndataToBeGenerated = \\\"aawvavv\\\"</pre>\n            <pre class=\\\"output\\\">Output:\n\\\"av\\\"</pre>\n            <div class=\\\"explanation\\\">\n                <p>The character \\'a\\' appears 3 times, and \\'v\\' appears 4 times. Since the number of distinct characters required (= 2) is not greater than n, it is possible for the tool to generate a string that provides the missing characters.</p>\n                <p>There are two distinct characters, and the input string must be of size 2. Hence, the input string can only be \\\"av\\\" or \\\"va\\\".</p>\n                <ul>\n                    <li>Three copies of \\\"av\\\" or \\\"va\\\" are required to generate all copies of \\'a\\'.</li>\n                    <li>Four copies of \\\"av\\\" or \\\"va\\\" are required to generate all copies of \\'v\\'.</li>\n                </ul>\n                <p>Thus, for the minimum cost, i.e., the minimum number of strings generated, the answer is \\\"av\\\". It is also lexicographically minimal.</p>\n            </div>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Example 2:</h4>\n            <pre class=\\\"input\\\">Input:\nn = 4\ndataToBeGenerated = \\\"abacbca\\\"</pre>\n            <pre class=\\\"",
        "google_doc_link": "https://docs.google.com/document/d/1xK7Yjhe9YY5D5XqMNkapk1sKqZlhpJI4WwO4R0cFEMo/edit?usp=sharing",
        "solution_code": "string getLexSmallestString(int n, string s) {\\n    int f[26] = {0};\\n    for(char c: s) f[c - \\'a\\']++;\\n    int m = 0;\\n    for(int i=0;i<26;i++) m = max(m, f[i]);\\n    int l=1, r=m, k=-1;\\n    while(l <= r){\\n        int d = l + (r - l)/2;\\n        long long t =0;\\n        for(int i=0;i<26;i++) {\\n            if(f[i] >0){\\n                t += (f[i] + d -1)/d;\\n                if(t > n) break;\\n            }\\n        }\\n        if(t <=n){\\n            k = d;\\n            r = d -1;\\n        }\\n        else{\\n            l = d +1;\\n        }\\n    }\\n    if(k == -1) return \\\"-1\\\";\\n    int c[26] = {0};\\n    long long t =0;\\n    for(int i=0;i<26;i++) {\\n        if(f[i] >0){\\n            c[i] = (f[i] + k -1)/k;\\n            t += c[i];\\n        }\\n    }\\n    if(t > n) return \\\"-1\\\";\\n    c[0] += (n - t);\\n    string a = \\\"\\\";\\n    for(int i=0;i<26;i++) {\\n        a += string(c[i], \\'a\\' + i);\\n    }\\n    sort(a.begin(), a.end());\\n    return a;\\n}",
        "company_name": "Zomato",
        "company_id": 31
    },
    {
        "id": 144,
        "title": "Model Capacity Partitioning",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\"> Model Capacity Partitioning</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>In a machine learning project, there are <em>n</em> computational units, each with its unique computational capacity, represented by an array called <code>storage</code>. These computational units are used in training machine learning models.</p>\n\n<p>The objective is to create exactly <em>k</em> model instances using the following process:</p>\n        <ul>\n            <li>Partition the array of computational units into <em>k</em> subarrays, ensuring that each subarray forms a valid permutation and subarrays do not intersect.</li>\n            <li>Each partitioned subarray corresponds to one machine learning model, and the length of the permutation determines the computational capacity of the model.</li>\n            <li>An array, <code>modelCap</code>, is generated that contains the computational capacity of each of the models.</li>\n        </ul>\n\n<p>It is not always possible to create exactly <em>k</em> models with the given computational units, so the project allows replacing some computational units with others that may have any computational capacity. The goal is to find the minimum number of replacements (<code>minOp</code>) needed to partition the array into exactly <em>k</em> machine learning models.</p>\n\n<p><strong>Note:</strong> A subarray of length <em>m</em> is a valid permutation if it consists of the integers from 1 to <em>m</em> in any order.</p>\n    </div>\n\n<div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getModelCapacities</code> in the editor below.</p>\n        <p><code>getModelCapacities</code> takes the following parameter(s):</p>\n        <ul>\n            <li><code>vector&lt;int&gt; storage</code>: the computational capacity of n computational units</li>\n            <li><code>int k</code>: the number of model instances that must be created</li>\n        </ul>\n    </div>\n\n<div class=\\\"return-value\\\">\n        <h3>Returns</h3>\n        <p><code>vector&lt;int&gt;</code>: the lexicographically minimum <code>modelCap</code> representing the computational capacity of each of the k machine learning models</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ n ≤ 100</li>\n            <li>1 ≤ k ≤ n</li>\n            <li>1 ≤ storage[i] ≤ n</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Example 1</h3>\n        <div class=\\\"example\\\">\n            <p>Given that n = 6, k = 2, and storage = [2, 3, 1, 5, 6, 2]</p>\n            <pre class=\\\"input\\\">Input:\n6\n2 3 1 5 6 2\n2</pre>\n            <pre class=\\\"output\\\">Output:\n1 3</pre>\n            <div class=\\\"explanation\\\">\n                <p>One of the optimal ways is to partition the array as follows: [[2], [3, 1, 5, 6, 2]].</p>\n                <p>In one operation, [2] can be converted to [1], and in another operation, [3, 1, 5, 6, 2] can be converted to [3, 1, 5, 4, 2].</p>\n                <p>Therefore, minOp = 1 + 1 = 2, and modelCap = [1, 3].</p>\n            </div>\n        </div>\n\n<h3>Example 2</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n7\n4 2 1 3 1 1 2\n3</pre>\n            <pre class=\\\"output\\\">Output:\n4 1 2</pre>\n            <div class=\\\"explanation\\\">\n                <p>The optimal partitions are [[4, 2, 1, 3], [1], [1, 2]] with minOp = 0.</p>\n                <p>As a result, the array modelCap = [4, 1, 2].</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1B3tJ6_ft64H-Ipn6QuwnmNgD1YThggzmHNwep58-eqM/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Zomato",
        "company_id": 31
    },
    {
        "id": 145,
        "title": "Count Tree Paths",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Count Tree Paths</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>Given a network of product dependencies represented as a tree. The tree consists of <code>treeNodes</code> vertices, and the relationships between products are defined by two arrays: <code>treeFrom</code> and <code>treeTo</code>, both of size <code>treeNodes - 1</code>. These arrays specify connections, where <code>treeFrom[i]</code> is connected to <code>treeTo[i]</code>.</p>\n\n<p>For this product dependency tree, the task is to determine the number of triplets of vertices (i, j, k) that meet the following conditions:</p>\n        <ul>\n            <li>0 ≤ i < j < k < treeNodes</li>\n            <li>There should be no simple path connecting vertices i, j, and k.</li>\n        </ul>\n\n<p>Due to the potentially large number of triplets, return the answer modulo (10<sup>9</sup> + 7).</p>\n\n<div class=\\\"notes\\\">\n            <h4>Notes:</h4>\n            <ul>\n                <li>A path in this context refers to a sequence of vertices where each vertex is connected to the next one, representing a product dependency relationship.</li>\n                <li>A path that does not include repeated vertices is termed a simple path.</li>\n            </ul>\n        </div>\n    </div>\n\n<div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <p>The first line contains two space-separated integers, <code>treeNodes</code> and <code>treeEdges</code> (where <code>treeEdges = treeNodes - 1</code>), representing the number of nodes and edges.</p>\n        <p>Each of the subsequent <code>treeEdges</code> lines (indexed from 0 to <code>treeEdges - 1</code>) contains two space-separated integers, <code>treeFrom[i]</code> and <code>treeTo[i]</code>.</p>\n    </div>\n\n<div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 ≤ treeNodes ≤ 10<sup>5</sup></li>\n            <li>0 ≤ treeFrom[i], treeTo[i] < treeNodes</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Examples</h3>\n\n<div class=\\\"example\\\">\n            <h4>Sample Case 0:</h4>\n            <pre class=\\\"input\\\">2 1\n0 1</pre>\n            <pre class=\\\"output\\\">0</pre>\n            <div class=\\\"explanation\\\">\n                <p>Since there are fewer than 3 nodes, no triplet is possible.</p>\n            </div>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Sample Case 1:</h4>\n            <pre class=\\\"input\\\">5 4\n0 2\n2 1\n2 3\n2 4</pre>\n            <pre class=\\\"output\\\">4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The following triplets lack a simple path connecting them:</p>\n                <ul>\n                    <li>(0, 1, 4)</li>\n                    <li>(0, 3, 4)</li>\n                    <li>(0, 1, 3)</li>\n                    <li>(1, 3, 4)</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n<div class=\\\"function-signature\\\">\n        <h3>Function Description</h3>\n        <pre class=\\\"code\\\">int countTreePaths(int treeNodes, vector&lt;int&gt; treeFrom, vector&lt;int&gt; treeTo)</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1k7QisQB6oas0aCQ5gJ1NnDFH-yRtsxmXVIiQBnIz8eA/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nstruct DPState {\\n    int cost;\\n    vector<int> modelCap;\\n};\\n\\nvector<int> getModelCapacities(vector<int> storage, int k) {\\n    int n = storage.size();\\n    vector<vector<int>> precompute(n, vector<int>(n, 0));\\n    for(int p=0;p<n;p++) {\\n        for(int q=p;q<n;q++) {\\n            int m = q - p +1;\\n            vector<bool> freq(m+1, false);\\n            int count =0;\\n            for(int r=p;r<=q;r++) {\\n                if(storage[r]>=1 && storage[r]<=m && !freq[storage[r]]) {\\n                    freq[storage[r]]=true;\\n                    count++;\\n                }\\n            }\\n            precompute[p][q] = m - count;\\n        }\\n    }\\n    const int INF = 1e9;\\n    vector<vector<DPState>> dp(n+1, vector<DPState>(k+1, DPState{INF, {}}));\\n    dp[0][0] = DPState{0, {}};\\n    for(int i=1;i<=n;i++) {\\n        for(int j=1;j<=k;j++) {\\n            for(int p=j-1;p<i;p++) {\\n                if(dp[p][j-1].cost == INF) continue;\\n                int cost = precompute[p][i-1];\\n                int totalCost = dp[p][j-1].cost + cost;\\n                if(totalCost < dp[i][j].cost) {\\n                    dp[i][j].cost = totalCost;\\n                    dp[i][j].modelCap = dp[p][j-1].modelCap;\\n                    dp[i][j].modelCap.push_back(i - p);\\n                }\\n                else if(totalCost == dp[i][j].cost) {\\n                    vector<int> newModelCap = dp[p][j-1].modelCap;\\n                    newModelCap.push_back(i - p);\\n                    bool better = false;\\n                    for(int x=0;x<newModelCap.size();x++) {\\n                        if(x >= dp[i][j].modelCap.size()) {\\n                            better = true;\\n                            break;\\n                        }\\n                        if(newModelCap[x] < dp[i][j].modelCap[x]) {\\n                            better = true;\\n                            break;\\n                        }\\n                        if(newModelCap[x] > dp[i][j].modelCap[x]) {\\n                            break;\\n                        }\\n                    }\\n                    if(better) {\\n                        dp[i][j].modelCap = newModelCap;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    return dp[n][k].modelCap;\\n}",
        "company_name": "Zomato",
        "company_id": 31
    },
    {
        "id": 148,
        "title": "Git: Excluding Specific Files and Directories",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Git: Excluding Specific Files and Directories</h2>\n\n<div class=\\\"problem-description\\\">\n        <p>In the lifecycle of a software development project, adjusting the set of files and directories tracked by the version control system is sometimes necessary. This adjustment can be due to the inclusion of sensitive information, configuration files, or dependencies that should not be shared or tracked through the repository. Git provides mechanisms to exclude specific files and directories from being tracked, while still maintaining their presence in the local project directory.</p>\n\n<p>For this task, within an existing project repository, the objective is to stop tracking the \\\".env\\\" file and the \\\"cache/\\\" directory (including all files within it), without physically removing these items from the project directory. After updating the tracking behavior, a new commit should be made to reflect these changes.</p>\n    </div>\n\n<div class=\\\"task-requirements\\\">\n        <h3>Task Requirements</h3>\n        <p>Using the existing project repository located at <code>/home/ubuntu/1792024-git-excluding-specific-files-and-directories</code>:</p>\n        <ul>\n            <li>Implement the necessary git ignore process to exclude \\\".env\\\" file and the \\\"cache/\\\" directory from being tracked by Git.</li>\n            <li>Execute the appropriate Git commands to ensure that the \\\".env\\\" file and the \\\"cache/\\\" directory are no longer tracked, while also ensuring they are not deleted from the filesystem.</li>\n            <li>Confirm that \\\".env\\\" file and the \\\"cache/\\\" directory are effectively excluded from Git tracking.</li>\n            <li>Commit the changes with the commit message \\\"Exclude from tracking\\\".</li>\n            <li>Push the commit to the remote repository.</li>\n        </ul>\n    </div>\n\n<div class=\\\"examples\\\">\n        <h3>Expected Output Examples</h3>\n\n<div class=\\\"example\\\">\n            <h4>Expected output of <code>git status</code>:</h4>\n            <pre class=\\\"output\\\">\nOn branch master\nYour branch is up to date with \\'origin/master\\'.\n\nnothing to commit, working tree clean</pre>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Expected output of <code>git ls-files</code>:</h4>\n            <pre class=\\\"output\\\">\n.gitignore\nREADME.md\ncore.module\nmodules/a.module</pre>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Expected output of <code>git ls-files --other</code>:</h4>\n            <pre class=\\\"output\\\">\n.env\ncache/a.cache\ncache/b.cache\ncache/something.else</pre>\n        </div>\n\n<div class=\\\"example\\\">\n            <h4>Expected output of <code>ls -al .env cache/*</code>:</h4>\n            <pre class=\\\"output\\\">\n-rw-r--r-- 1 ubuntu ubuntu 52 Jun 9 09:22 .env\n-rw-rw-r-- 1 ubuntu ubuntu 11 Jun 9 09:20 cache/a.cache\n-rw-rw-r-- 1 ubuntu ubuntu 20 Jun 9 09:20 cache/b.cache\n-rw-rw-r-- 1 ubuntu ubuntu 25 Jun 9 09:20 cache/something.else</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1INGMvsia7ACt7rZLWEf467d7YJeXbc8DkXEntIAL_zo/edit?usp=sharing",
        "solution_code": "#!/bin/bash\\n\\nREPO_DIR=\\\"/home/ubuntu/1792024-git-excluding-specific-files-and-directories\\\"\\n\\ncd \\\"$REPO_DIR\\\" || exit\\n\\ngrep -qxF \\'.env\\' .gitignore || echo \\\".env\\\" >> .gitignore\\ngrep -qxF \\'cache/\\' .gitignore || echo \\\"cache/\\\" >> .gitignore\\n\\ngit rm --cached .env\\ngit rm -r --cached cache/\\n\\necho \\\"Modified .gitignore and unstaged files:\\\"\\ngit status\\n\\ngit commit -am \\\"Exclude from tracking\\\"\\n\\ngit push origin master\\n\\necho \\\"Final status:\\\"\\ngit status",
        "company_name": "Zomato",
        "company_id": 31
    },
    {
        "id": 182,
        "title": "Duplicate Bid Detection",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Duplicate Bid Detection</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>An auction web service uses a \\\"bid over starting price\\\" model. Buyers can increase the starting price of a lot an unlimited number of times with a fixed bid amount predetermined by the seller. The buyer who leaves the last bid wins.</p>\n        \n        <p>The QA department reported a bug in which buyers bid against themselves, i.e., they made consecutive bids on an item. The development team is already working on a fix. They need to find and eliminate all duplicate bids.</p>\n    </div>\n    \n    <div class=\\\"task\\\">\n        <h3>Task</h3>\n        <p>Create a query that returns a list of all affected lots with a list of duplicate bids.</p>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Required Output Columns</h3>\n        <ul>\n            <li><code>lot_id</code> - lot ID</li>\n            <li><code>lot_name</code> - lot name</li>\n            <li><code>buyer_id</code> - buyer ID</li>\n            <li><code>buyer_username</code> - buyer username</li>\n            <li><code>duplicated_bid_id</code> - list of found duplicated bid records for a specific account</li>\n        </ul>\n        \n        <div class=\\\"output-notes\\\">\n            <p>Notes about duplicated_bid_id:</p>\n            <ul>\n                <li>A record is a bid ID</li>\n                <li>Records are separated by a comma</li>\n                <li>Records are sorted in ascending order</li>\n            </ul>\n        </div>\n    </div>\n    \n    <div class=\\\"sorting\\\">\n        <h3>Sorting Requirements</h3>\n        <p>The result should be sorted in:</p>\n        <ol>\n            <li>Descending order by the number of duplicate bids found</li>\n            <li>Ascending order by buyer_username</li>\n        </ol>\n    </div>\n\n    <div class=\\\"schema\\\">\n        <h3>Database Schema</h3>\n        <div class=\\\"table-schema\\\">\n            <h4>buyers</h4>\n            <table>\n                <tr>\n                    <th>Column</th>\n                    <th>Type</th>\n                    <th>Constraints</th>\n                    <th>Description</th>\n                </tr>\n                <tr>\n                    <td>id</td>\n                    <td>INT</td>\n                    <td>PRIMARY KEY</td>\n                    <td>Buyer ID</td>\n                </tr>\n                <tr>\n                    <td>username</td>\n                    <td>VARCHAR(255)</td>\n                    <td></td>\n                    <td>Buyer username</td>\n                </tr>\n            </table>\n\n            <h4>lots</h4>\n            <table>\n                <tr>\n                    <th>Column</th>\n                    <th>Type</th>\n                    <th>Constraints</th>\n                    <th>Description</th>\n                </tr>\n                <tr>\n                    <td>id</td>\n                    <td>INT</td>\n                    <td>PRIMARY KEY</td>\n                    <td>Lot ID</td>\n                </tr>\n                <tr>\n                    <td>name</td>\n                    <td>VARCHAR(255)</td>\n                    <td></td>\n                    <td>Lot name</td>\n                </tr>\n                <tr>\n                    <td>starting_price</td>\n                    <td>DECIMAL(6,2)</td>\n                    <td></td>\n                    <td>Lot starting price amount</td>\n                </tr>\n                <tr>\n                    <td>bid_step</td>\n                    <td>DECIMAL(6,2)</td>\n                    <td></td>\n                    <td>Lot bid step</td>\n                </tr>\n            </table>\n\n            <h4>bids</h4>\n            <table>\n                <tr>\n                    <th>Column</th>\n                    <th>Type</th>\n                    <th>Constraints</th>\n                    <th>Description</th>\n                </tr>\n                <tr>\n                    <td>id</td>\n                    <td>INT</td>\n                    <td>PRIMARY KEY</td>\n                    <td>Bid ID</td>\n                </tr>\n                <tr>\n                    <td>buyer_id</td>\n                    <td>INT</td>\n                    <td>FOREIGN KEY</td>\n                    <td>Buyer ID</td>\n                </tr>\n                <tr>\n                    <td>lot_id</td>\n                    <td>INT</td>\n                    <td>FOREIGN KEY</td>\n                    <td>Lot ID</td>\n                </tr>\n                <tr>\n                    <td>dt</td>\n                    <td>DATETIME</td>\n                    <td></td>\n                    <td>Bid date and time</td>\n                </tr>\n            </table>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1sI4_2DtwokoL2Vk5rzSCED7gkOaWA8t_zQnUrZFtWDc/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Zomato",
        "company_id": 31
    },
    {
        "id": 183,
        "title": "Cities with Above-Average Customer Count",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Cities with Above-Average Customer Count</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Write a query which will return all cities with more customers than the average number of customers of all cities. For each such city, return the country name, the city name and the number of customers. Order the result by country name ascending.</p>\n    </div>\n\n    <div class=\\\"schema-section\\\">\n        <h3>Schema</h3>\n        \n        <div class=\\\"table-definition\\\">\n            <h4>Table: country</h4>\n            <table class=\\\"schema-table\\\">\n                <thead>\n                    <tr>\n                        <th>column name</th>\n                        <th>column type</th>\n                        <th>key/NULL</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>id</td>\n                        <td>int</td>\n                        <td>PK</td>\n                    </tr>\n                    <tr>\n                        <td>country_name</td>\n                        <td>varchar(128)</td>\n                        <td></td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <div class=\\\"table-definition\\\">\n            <h4>Table: city</h4>\n            <table class=\\\"schema-table\\\">\n                <thead>\n                    <tr>\n                        <th>column name</th>\n                        <th>column type</th>\n                        <th>key/NULL</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>id</td>\n                        <td>int</td>\n                        <td>PK</td>\n                    </tr>\n                    <tr>\n                        <td>city_name</td>\n                        <td>varchar(128)</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>postal_code</td>\n                        <td>varchar(16)</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>country_id</td>\n                        <td>int</td>\n                        <td>FK</td>\n                    </tr>\n                </tbody>\n            </table>\n            <p class=\\\"note\\\">city.country_id references country.id</p>\n        </div>\n\n        <div class=\\\"table-definition\\\">\n            <h4>Table: customer</h4>\n            <table class=\\\"schema-table\\\">\n                <thead>\n                    <tr>\n                        <th>column name</th>\n                        <th>column type</th>\n                        <th>key/NULL</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>id</td>\n                        <td>int</td>\n                        <td>PK</td>\n                    </tr>\n                    <tr>\n                        <td>customer_name</td>\n                        <td>varchar(255)</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>city_id</td>\n                        <td>int</td>\n                        <td>FK</td>\n                    </tr>\n                    <tr>\n                        <td>customer_address</td>\n                        <td>varchar(255)</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>contact_person</td>\n                        <td>varchar(255)</td>\n                        <td>N</td>\n                    </tr>\n                    <tr>\n                        <td>email</td>\n                        <td>varchar(128)</td>\n                        <td></td>\n                    </tr>\n                    <tr>\n                        <td>phone</td>\n                        <td>varchar(128)</td>\n                        <td></td>\n                    </tr>\n                </tbody>\n            </table>\n            <p class=\\\"note\\\">customer.city_id references city.id</p>\n        </div>\n    </div>\n\n    <div class=\\\"sample-output\\\">\n        <h3>Sample Output Format</h3>\n        <p>The first line of the result should be:</p>\n        <pre>country_name city_name count\n-> Austria Wien 3</pre>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/10YQJtZyRJ4zIHG_P6S-T96gjL3NdsscqaUZm0rMpEbo/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Zomato",
        "company_id": 31
    }
]