[
    {
        "id": 171,
        "title": "Birthday Candle Distribution",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2 class=\\\"problem-title\\\">Birthday Candle Distribution</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>Bob is throwing a birthday party and has invited N friends. He has also prepared M candles for the celebration. However, he only has K candles available (where M â‰¥ K) since some candles were lost or damaged. Each friend wants to celebrate, but they prefer to have as many candles as possible. However, Bob wants to ensure that no friend feels left out or disappointed. To do this, he must distribute the candles fairly among the cakes.</p>\n        \n        <p>The cakes are arranged in a row, and he will be at the K-th cake (1-indexed). The task is to find the maximum number of candles Bob can have such that each friend has at least one candle, each candle is placed on a cake, and no friend has significantly 2 fewer candles than their neighbors.</p>\n        \n        <p>In other words, Bob needs to distribute the candles among the cakes in such a way that every friend has at least one candle, and no friend has two or fewer candles fewer than any of their neighbors.</p>\n    </div>\n    \n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains a single integer T representing the number of test cases.</li>\n            <li>The second line of input contains three integers N, M, and K, representing the number of friends, the number of candles, and the position of Bob\\'s cake, respectively.</li>\n        </ul>\n    </div>\n    \n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer K representing maximum number of candles Bob can have such that every friend has at least one candle.</p>\n    </div>\n    \n    <div class=\\\"examples\\\">\n        <h3>Sample Test Cases</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Testcase #0</h4>\n            <pre class=\\\"input\\\">Input:\n6 9 4</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>Bob has 6 friends and 9 candles. He has the 4th cake. To ensure no friend feels disappointed, we need to distribute the candles in a fair way. One possible distribution is as follows:</p>\n                <ul>\n                    <li>Cake 1: 1 candle</li>\n                    <li>Cake 2: 1 candle</li>\n                    <li>Cake 3: 1 candle</li>\n                    <li>Cake 4: 2 candles (Bob\\'s cake)</li>\n                    <li>Cake 5: 2 candles</li>\n                    <li>Cake 6: 2 candles</li>\n                </ul>\n                <p>With this distribution, every friend has at least one candle, and no one has two fewer candles than their neighbors. Therefore, Bob can have a maximum of 2 candles.</p>\n            </div>\n        </div>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Testcase #1</h4>\n            <pre class=\\\"input\\\">Input:\n4 10 3</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1hHI1LuzywD_WERR-FMKgfk7KyeLcXEKZ-TWq8ApQTyk/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Dell",
        "company_id": 33
    },
    {
        "id": 172,
        "title": "Energy Orb Neutralization",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <span class=\\\"problem-id\\\">ProblemId: 25679399</span>\n        <h1>Energy Orb Neutralization</h1>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>On the planet Xenon, Captain Zog must neutralize an alien artifact consisting of N energy orbs, each resonating at a unique frequency Hi. The goal is to deactivate all orbs using the fewest possible cycles.</p>\n\n        <h3>Process:</h3>\n        <ul>\n            <li>Each deactivation cycle targets a contiguous sequence of orbs exhibiting a symmetrical pattern.</li>\n            <li>Symmetry here means the sequence can split into two halves that mirror each other: the first orb matches the last, the second matches the second-last, and so forth.</li>\n            <li>After neutralizing a symmetrical sequence, the remaining orbs rearrange into a new continuous pattern.</li>\n        </ul>\n\n        <p>As Chief Researcher, your task is to determine the minimum number of cycles required to render the artifact safe. This involves strategically identifying and neutralizing symmetrical sequences until all orbs are deactivated, ensuring the artifact is inert and ready for investigation.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line contains a single integer N representing the number of energy orbs.</li>\n            <li>The second line contains N space separated integers H1, H2,..., HN representing the frequency of the i-th energy orb in the sequence.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Print a single integer indicating the minimum number of deactivation cycles required to neutralise all the orbs.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Test Cases</h3>\n        \n        <div class=\\\"example\\\">\n            <h4>Sample Testcase #0</h4>\n            <pre class=\\\"input\\\">Input:\n4\n1 3 4 1</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>In this case, we can first neutralise the second orb (3) in the first cycle. Then all other orbs will fall back and the new sequence will look like [1 4 1] which is symmetrical and can be neutralised in the second cycle.</p>\n            </div>\n        </div>\n\n        <div class=\\\"example\\\">\n            <h4>Sample Testcase #1</h4>\n            <pre class=\\\"input\\\">Input:\n6\n1 2 5 2 5 1</pre>\n            <pre class=\\\"output\\\">Output:\n2</pre>\n            <div class=\\\"explanation\\\">\n                <h4>Explanation:</h4>\n                <p>In the first deactivation cycle, we can neutralize the subsequence [2, 5, 2] since it is symmetrical. After neutralizing this subsequence, the remaining sequence collapses to [1, 5, 1], which is symmetrical and can be neutralized in the second cycle.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/13p9NsAEXbGJwPbLCVsnfE2Id3SYgLL9Y7oH1j0TbZUU/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Dell",
        "company_id": 33
    },
    {
        "id": 173,
        "title": "Unique Fractions Counter",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <div class=\\\"problem-header\\\">\n        <h2>Unique Fractions Counter</h2>\n    </div>\n\n    <div class=\\\"problem-description\\\">\n        <p>Given an array A of integers, determine the count of unique fractions that can be formed using pairs of these integers as the numerator and denominator.</p>\n        \n        <p>Fractions are considered equivalent if they simplify to different values in their lowest terms. For example, 4/2 and 2/1 are equivalent and should only be counted once.</p>\n        \n        <p class=\\\"note\\\">Note that a same positional element for both numerator and denominator cannot be considered (e.g., 2/2 is not considered) but if there are duplicates in array they are considered different elements.</p>\n    </div>\n\n    <div class=\\\"input-format\\\">\n        <h3>Input Format</h3>\n        <ul>\n            <li>The first line of input contains an integer representing size of array.</li>\n            <li>Second line of input contains n space separated integer representing elements of array A.</li>\n        </ul>\n    </div>\n\n    <div class=\\\"output-format\\\">\n        <h3>Output Format</h3>\n        <p>Output contains an integer representing the count of unique fractions that can be formed from the given array.</p>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Sample Testcase #0</h3>\n        <div class=\\\"example\\\">\n            <pre class=\\\"input\\\">Input:\n5\n1 3 7 9 3</pre>\n            <pre class=\\\"output\\\">Output:\n11</pre>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1ZAugW9re9Kd3P5RkDAlIC3OU5xnW9lvnNShh-8wMlFU/edit?usp=sharing",
        "solution_code": "",
        "company_name": "Dell",
        "company_id": 33
    },
    {
        "id": 174,
        "title": "Parallel Job Processing",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Parallel Job Processing</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>There are <em>n</em> jobs that can be executed in parallel on a processor, where the execution time of the <em>i<sup>th</sup></em> job is <em>executionTime[i]</em>. To speed up execution, the following strategy is used.</p>\n        \n        <p>In one operation, a job is chosen, the <em>major job</em>, and is executed for <em>x</em> seconds. All other jobs are executed for <em>y</em> seconds where <em>y < x</em>.</p>\n        \n        <p>A job is complete when it has been executed for at least <em>executionTime[i]</em> seconds, then it exits the pool. Find the minimum number of operations in which the processor can completely execute all the jobs if run optimally.</p>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>getMinimumOperations</code> with the following parameters:</p>\n        <ul>\n            <li><code>int executionTime[n]</code>: the execution times of each job</li>\n            <li><code>int x</code>: the time for which the major job is executed</li>\n            <li><code>int y</code>: the time for which all other jobs are executed</li>\n        </ul>\n    </div>\n\n    <div class=\\\"returns\\\">\n        <h3>Returns</h3>\n        <p><code>int</code>: the minimum number of operations in which the processor can complete the jobs</p>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 â‰¤ n â‰¤ 10<sup>5</sup></li>\n            <li>1 â‰¤ executionTime[i] â‰¤ 10<sup>9</sup></li>\n            <li>1 â‰¤ y < x â‰¤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>Consider n = 5, executionTime = [3, 4, 1, 7, 6], x = 4 and y = 2.</p>\n            \n            <p>The following strategy is optimal using 1-based indexing:</p>\n            <ul>\n                <li>Choose job 4 as the major job and reduce the execution times of job 4 by x = 4 and of other jobs by y = 2.<br>\n                Now executionTime = [1, 2, -1, 3, 4]. Job 3 is complete, so it is removed.</li>\n                <li>Choose job 4, executionTime = [-1, 0, -, -1, 2]. So, jobs 1, 2, and 4 are now complete.</li>\n                <li>Choose job 5, executionTime = [-, -, -, -2]. Job 5 is complete.</li>\n            </ul>\n            \n            <p>It takes 3 operations to execute all the jobs so the answer is 3.</p>\n        </div>\n\n        <div class=\\\"sample-cases\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\nn = 5\nexecutionTime = [3, 3, 6, 3, 9]\nx = 3\ny = 2</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <h5>Explanation:</h5>\n                <ul>\n                    <li>Choose job 5, then executionTime = [1, 1, 4, 1, 6]. All jobs are still in the pool.</li>\n                    <li>Choose job 5, then executionTime = [-1, -1, 2, -1, 3]. So, jobs 1, 2, and 4 are complete.</li>\n                    <li>Choose job 5, then executionTime = [-, -, 0, -, 0]. Jobs 3 and 5 are complete.</li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1KW-78cTugQQjbuesC6wma0QkHL7a8k0PGUBgjeEwz6A/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\n\\nusing namespace std;\\n\\nint getMinimumOperations(vector<int> executionTime, int x, int y) {\\n    int n = executionTime.size();\\n    long long left = 1, right = 1;\\n    for(auto &t : executionTime){\\n        right = max(right, (long long)t);\\n    }\\n    right = 1e12;\\n    auto isPossible = [&](long long k) -> bool {\\n        long long total = 0;\\n        long long diff = x - y;\\n        for(auto &t : executionTime){\\n            if(t > k * y){\\n                long long required = t - k * y;\\n                long long m = (required + diff - 1) / diff;\\n                total += m;\\n                if(total > k) return false;\\n            }\\n        }\\n        return total <= k;\\n    };\\n    while(left < right){\\n        long long mid = left + (right - left) / 2;\\n        if(isPossible(mid)){\\n            right = mid;\\n        }\\n        else{\\n            left = mid + 1;\\n        }\\n    }\\n    return left;\\n}\\n\\nint main(){\\n    int n;\\n    cin >> n;\\n    vector<int> executionTime(n);\\n    for(auto &x : executionTime) cin >> x;\\n    int x, y;\\n    cin >> x >> y;\\n    cout << getMinimumOperations(executionTime, x, y) << endl;\\n}",
        "company_name": "Dell",
        "company_id": 33
    },
    {
        "id": 175,
        "title": "Consistent User Event Logs Analysis",
        "problem_statement": "<div class=\\\"problem-container\\\">\n    <h2>Consistent User Event Logs Analysis</h2>\n    \n    <div class=\\\"problem-description\\\">\n        <p>The developers working on a social media network app want to analyze user behavior. There are <em>n</em> event logs where <code>userEvent[i]</code> denotes the <code>userId</code> for the user that triggered the <em>i<sup>th</sup></em> event. The team wants to analyze the subarrays of the logs which are <em>consistent</em>, that is, the frequency of the most frequent user in the subarray is equal to the frequency of the least frequent user in the whole array. Find the maximum length of consistent logs.</p>\n        \n        <div class=\\\"note\\\">\n            <p><strong>Note:</strong></p>\n            <ul>\n                <li>A subarray is a contiguous group of elements in an array.</li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\\\"function-description\\\">\n        <h3>Function Description</h3>\n        <p>Complete the function <code>findConsistentLogs</code> in the editor below.</p>\n        \n        <p><code>findConsistentLogs</code> has the following parameters:</p>\n        <ul>\n            <li><code>int userEvent[n]</code>: the userIds present in the event logs</li>\n        </ul>\n\n        <p><strong>Returns</strong></p>\n        <ul>\n            <li><code>int</code>: the maximum length of consistent logs</li>\n        </ul>\n    </div>\n\n    <div class=\\\"constraints\\\">\n        <h3>Constraints</h3>\n        <ul>\n            <li>1 â‰¤ n â‰¤ 3Ã—10<sup>5</sup></li>\n            <li>1 â‰¤ userEvent[i] â‰¤ 10<sup>9</sup></li>\n        </ul>\n    </div>\n\n    <div class=\\\"examples\\\">\n        <h3>Example</h3>\n        <div class=\\\"example\\\">\n            <p>Given n = 10, and userEvent = [1, 2, 1, 3, 4, 2, 4, 3, 3, 4]</p>\n            <ul>\n                <li>The frequencies of 1 and 2 are 2.</li>\n                <li>The frequencies of 3 and 4 are 3.</li>\n                <li>The minimum frequency in the array is 2.</li>\n                <li>The longest valid subarray has 8 elements: [1, 2, 1, 3, 4, 2, 4, 3].</li>\n                <li>The frequencies of 1, 2, 3, and 4 are all 2.</li>\n            </ul>\n            <p>The frequency of the most common element in the subarray is 2, the same as the minimum frequency in the entire array.</p>\n            <p>Hence, the maximum length of consistent logs is 8.</p>\n        </div>\n\n        <div class=\\\"sample-case\\\">\n            <h4>Sample Case 0</h4>\n            <pre class=\\\"input\\\">Input:\n3\n[9, 9, 9]</pre>\n            <pre class=\\\"output\\\">Output:\n3</pre>\n            <div class=\\\"explanation\\\">\n                <p>The consistent logs are [9, 9, 9] because both the frequency of the least frequent user in the entire array and the frequency of the most frequent user in the subarray is 3.</p>\n            </div>\n        </div>\n\n        <div class=\\\"sample-case\\\">\n            <h4>Sample Case 1</h4>\n            <pre class=\\\"input\\\">Input:\n5\n[9, 8, 5, 9, 2]</pre>\n            <pre class=\\\"output\\\">Output:\n4</pre>\n            <div class=\\\"explanation\\\">\n                <p>The consistent logs are [8, 5, 9, 2] because both the frequency of the least frequent user in the array and the frequency of the most frequent user in this subarray is 1.</p>\n            </div>\n        </div>\n    </div>\n</div>",
        "google_doc_link": "https://docs.google.com/document/d/1TqodUOZNy9LYI7Wkvby1T87t20RUtDtSp1SlmwLdL0A/edit?usp=sharing",
        "solution_code": "#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint findConsistentLogs(vector<int> userEvent) {\\n    int n = userEvent.size();\\n    unordered_map<int, int> freqMap;\\n    for(auto user : userEvent){\\n        freqMap[user]++;\\n    }\\n    int min_freq = INT32_MAX;\\n    for(auto &[k, v] : freqMap){\\n        min_freq = min(min_freq, v);\\n    }\\n    vector<int> uniqueUsers;\\n    for(auto &[k, v] : freqMap){\\n        uniqueUsers.push_back(k);\\n    }\\n    int m = uniqueUsers.size();\\n    unordered_map<int, int> userToIndex;\\n    for(int i=0;i<m;i++) userToIndex[uniqueUsers[i]] = i;\\n    vector<int> counts(m, 0);\\n    int left = 0, max_len = 0, unique_in_window = 0, num_with_min_freq = 0;\\n    for(int right=0; right<n; right++){\\n        int user = userEvent[right];\\n        int idx = userToIndex[user];\\n        counts[idx]++;\\n        if(counts[idx] == 1){\\n            unique_in_window++;\\n        }\\n        if(counts[idx] == min_freq){\\n            num_with_min_freq++;\\n        }\\n        if(counts[idx] == min_freq + 1){\\n            num_with_min_freq--;\\n        }\\n        while(counts[idx] > min_freq){\\n            int left_user = userEvent[left];\\n            int left_idx = userToIndex[left_user];\\n            if(counts[left_idx] == min_freq){\\n                num_with_min_freq--;\\n            }\\n            counts[left_idx]--;\\n            if(counts[left_idx] == min_freq){\\n                num_with_min_freq++;\\n            }\\n            if(counts[left_idx] == 0){\\n                unique_in_window--;\\n            }\\n            left++;\\n        }\\n        if(num_with_min_freq >=1){\\n            max_len = max(max_len, right - left +1);\\n        }\\n    }\\n    return max_len;\\n}\\n\\nint main()\\n{\\n    int n;\\n    cin >> n;\\n    vector<int> userEvent(n);\\n    for(auto &x : userEvent) cin >> x;\\n    cout << findConsistentLogs(userEvent);\\n}",
        "company_name": "Dell",
        "company_id": 33
    }
]