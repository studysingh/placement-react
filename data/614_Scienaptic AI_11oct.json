[
    {
        "id": 1749,
        "title": "Virus Spread in a Ship",
        "problem_statement": "<h1>Virus Spread in a Ship</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given a ship's seating arrangement, represented as an m x n grid (where m represents the number of rows and n represents the number of columns). One of the passengers is infected with a virus and will spread it to nearby passengers. The virus spreads to adjacent seats (left, right, top, and bottom) after every hour, but it does not spread diagonally.</p>\r\n<p>Given the initial infected passenger's seat location, your task is to determine the maximum number of hours it will take for the virus to infect all the passengers in the ship.</p>\r\n<p><strong>Input:</strong></p>\r\n<ul>\r\n    <li>An integer <code>m</code>, the number of rows in the ship's seating arrangement (<code>1 &lt;= m &lt;= 10</code>).</li>\r\n    <li>An integer <code>n</code>, the number of columns in the ship's seating arrangement (<code>1 &lt;= n &lt;= 100</code>).</li>\r\n    <li>A string <code>startPosition</code> representing the initial infected position in the format \"x,y\", where x and y are the row and column of the infected passenger.</li>\r\n</ul>\r\n<p><strong>Output:</strong></p>\r\n<p>Return an integer representing the maximum number of hours required for the virus to spread and infect all passengers. If all passengers are already infected initially, return 0.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: m = 5, n = 9, startPosition = 0,0\r\nOutput: 8</code></pre>\r\n<p><strong>Explanation:</strong> In this example, starting from position (0,0), it will take 8 hours to infect all passengers, with the virus spreading to adjacent seats each hour.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>The seating grid is rectangular, and no two passengers sit at the same position.</li>\r\n    <li>All passengers are seated in a valid grid configuration.</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <sstream>\n\nclass Solution {\npublic:\n    int maxHours(int m, int n, int startX, int startY) {\n        // Core logic to be implemented here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int m, n;\n    std::cin >> m >> n;\n\n    std::string startPosition;\n    std::cin >> startPosition;\n\n    size_t comma_pos = startPosition.find(',');\n    int startX = std::stoi(startPosition.substr(0, comma_pos));\n    int startY = std::stoi(startPosition.substr(comma_pos + 1));\n\n    Solution solution;\n    int result = solution.maxHours(m, n, startX, startY);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Scienaptic AI_11oct",
        "company_id": 614
    },
    {
        "id": 1750,
        "title": "Library Fine",
        "problem_statement": "<h1>Library Fine</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Your local library needs your help! Given the expected and actual return dates for a library book, create a program that calculates the fine (if any).</p>\r\n<p>The fee structure is as follows:</p>\r\n<ul>\r\n    <li>If the book is returned on or before the expected return date, no fine will be charged.</li>\r\n    <li>If the book is returned after the expected return day but still within the same calendar month and year as the expected return date. Then <strong>Fine = 50</strong></li>\r\n    <li>If the book is returned after the expected return month but still within the same calendar year as the expected return date. Then <strong>Fine = 200</strong></li>\r\n    <li>If the book is returned after the calendar year in which it was expected, there is a fixed fine of <strong>1000</strong></li>\r\n</ul>\r\n<p>Charges are based only on the least precise measure of lateness. For example, whether a book is due January 1, 2017 or December 31, 2017, if it is returned January 1, 2018, that is a year late and the fine would be 1000</p>\r\n<p>The input would be two dates in the <strong>DD:MM:YYYY</strong> format.</p>\r\n<p>The first input is the due date and the second one is the date the book was returned.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n20:06:2022\r\n28:06:2022\r\nOutput: 50</code></pre>\r\n<p><strong>Explanation:</strong> Returned within the same month</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass Solution {\npublic:\n    int calculateFine(int d_returned, int m_returned, int y_returned, int d_due, int m_due, int y_due) {\n        // Core logic goes here\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    std::string due_date_str, returned_date_str;\n    std::cin >> due_date_str >> returned_date_str;\n\n    int d_due = std::stoi(due_date_str.substr(0, 2));\n    int m_due = std::stoi(due_date_str.substr(3, 2));\n    int y_due = std::stoi(due_date_str.substr(6, 4));\n\n    int d_returned = std::stoi(returned_date_str.substr(0, 2));\n    int m_returned = std::stoi(returned_date_str.substr(3, 2));\n    int y_returned = std::stoi(returned_date_str.substr(6, 4));\n\n    Solution solution;\n    int result = solution.calculateFine(d_returned, m_returned, y_returned, d_due, m_due, y_due);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Scienaptic AI_11oct",
        "company_id": 614
    },
    {
        "id": 1751,
        "title": "Sort array by frequency",
        "problem_statement": "<h1>Sort array by frequency</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Given an array of integers <code>nums</code>, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</p>\r\n<p>Return the sorted array.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input: nums = [1,1,2,2,2,3]\r\nOutput: [3,1,1,2,2,2]</code></pre>\r\n<p><strong>Explanation:</strong> '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input: nums = [2,3,1,3,2]\r\nOutput: [1,3,3,2,2]</code></pre>\r\n<p><strong>Explanation:</strong> '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.</p>\r\n\r\n<h3>Example 3:</h3>\r\n<pre><code class='language-text'>Input: nums = [-1,1,-6,4,5,-6,1,4]\r\nOutput: [5,-1,4,4,-6,-6,1,1]</code></pre>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li><code>1 &lt;= nums.length &lt;= 100</code></li>\r\n    <li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <map>\n\nclass Solution {\npublic:\n    std::vector<int> frequencySort(std::vector<int>& nums) {\n        // Core logic to be implemented here\n        return {};\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    // The problem statement implies the input is an array, but doesn't specify\n    // the exact input format. A common competitive programming format is to\n    // first provide the size of the array, followed by the elements.\n    // We will assume this format.\n    // Example:\n    // 6\n    // 1 1 2 2 2 3\n    \n    int n;\n    // Reading numbers until end of input, as size is not explicitly mentioned.\n    // This is a flexible way to handle LeetCode-style inputs in a local environment.\n    std::vector<int> nums;\n    int num;\n    while (std::cin >> num) {\n        nums.push_back(num);\n    }\n\n    Solution solution;\n    std::vector<int> result = solution.frequencySort(nums);\n\n    for (size_t i = 0; i < result.size(); ++i) {\n        std::cout << result[i] << (i == result.size() - 1 ? \"\" : \" \");\n    }\n    std::cout << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Scienaptic AI_11oct",
        "company_id": 614
    }
]