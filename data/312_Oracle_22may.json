[
    {
        "id": 972,
        "title": "Cover Them All",
        "problem_statement": "<h1>Cover Them All</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>Using the following rules, determine the minimum cost needed to reach any integer point on an infinite number line. If it is not possible to reach all points, return -1.</p>\r\n<p>The rules are:</p>\r\n<ol>\r\n    <li>You start at position x = 0</li>\r\n    <li>For each available distance `distance[i]`, the cost to move to any point `x ± distance[i]` is `cost[i]`</li>\r\n    <li>After paying the cost to use `distance[i]`, you can move to `x ± distance[i]` an infinite number of times at no additional cost</li>\r\n</ol>\r\n<p><strong>Example:</strong></p>\r\n<pre><code class='language-text'>distance = [1, 2, 3], cost = [3, 1, 1]</code></pre>\r\n<p>The minimum cost is 2, achieved by using `distance[1]=2` and `distance[2]=3`, costing `cost[1] + cost[2] = 1 + 1 = 2`.</p>\r\n<ul>\r\n    <li>To move in the positive direction, you can repeat the pattern: right 3, left 2. This allows you to traverse positions `0 → 3 → 1 → 4 → 2 → 5 → 3 → 6 → 4 → ...`</li>\r\n    <li>To move in the negative direction, you can reverse the pattern: left 3, right 2. This allows you to traverse positions `0 → -3 → -1 → -4 → -2 → -5 → ...`</li>\r\n</ul>\r\n<p>With these two movements, you can reach any integer position on the number line.</p>\r\n\r\n<p>Complete the function `coverThemAll` in the editor with the following parameter(s):</p>\r\n<ul>\r\n    <li>`int distance[n]`: the distances of available moves</li>\r\n    <li>`int cost[n]`: the costs associated with the distances, aligned by index</li>\r\n</ul>\r\n<p><strong>Returns:</strong></p>\r\n<p>`int`: the minimum cost or -1</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Example 1:</h3>\r\n<pre><code class='language-text'>Input:\r\n3\r\n100 99 9900\r\n3\r\n1 1 1\r\nOutput:\r\n2</code></pre>\r\n<p><strong>Explanation:</strong> It is possible to use `distance[0] = 100` and `distance[1] = 99`. A traversal pattern in the positive direction is right 100, left 99, yielding `0 - 100 - 1 - 101 - 2...`</p>\r\n\r\n<h3>Example 2:</h3>\r\n<pre><code class='language-text'>Input:\r\n5\r\n10\r\n20\r\n30\r\n40\r\n50\r\n5\r\n1\r\n1\r\n1\r\n1\r\n1\r\nOutput:\r\n-1</code></pre>\r\n<p><strong>Explanation:</strong> There is no way to reach a point that is not a multiple of 10. Return -1 if all points cannot be reached.</p>\r\n\r\n<h2>Constraints</h2>\r\n<ul>\r\n    <li>`1 <= n <= 300`</li>\r\n    <li>`1 <= distance[i] <= 10^5`</li>\r\n    <li>`1 <= cost[i] <= 10^5`</li>\r\n</ul>",
        "google_doc_link": null,
        "solution_code": null,
        "company_name": "Oracle_22may",
        "company_id": 312
    }
]