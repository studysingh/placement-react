[
    {
        "id": 1948,
        "title": "Equal Subarrays",
        "problem_statement": "<h1>Equal Subarrays</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>An array, A of size N consisting of non-negative integers is given.</p>\r\n<p>The subarray of A is a contiguous part of the array A, i.e., the array Aᵢ, Aᵢ₊₁, ..., Aⱼ for some 1 ≤ i ≤ j ≤ n.</p>\r\n<p>A subarray is called an equal subarray when all its elements are equal.</p>\r\n<p>Find the total number of equal subarrays of the array A.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>In the provided code snippet, implement the provided <code>equalSubarrayCount(...)</code> method to find the total number of equal subarrays of the array A. You can write your code in the space below the phrase “WRITE YOUR LOGIC HERE”.</p>\r\n<p>There will be multiple test cases running, so the Input and Output should match exactly as provided. The base output variable <code>result</code> is set to a default value of -404 which can be modified. Additionally, you can add or remove these output variables.</p>\r\n\r\n<h2>Input Format</h2>\r\n<p>The first line contains a single integer N, denoting the length of the array.</p>\r\n<p>The second line contains N integers A₁, A₂, ..., Aₙ, denoting the elements of the array A.</p>\r\n\r\n<h2>Examples</h2>\r\n<h3>Sample Input:</h3>\r\n<pre><code class='language-text'>5 -- denotes N\r\n6 6 2 1 1 -- denotes array elements</code></pre>\r\n<p><strong>Explanation:</strong> For the input array <code>[6, 6, 2, 1, 1]</code>, the equal subarrays are:\r\n<ul>\r\n    <li><code>[6]</code></li>\r\n    <li><code>[6]</code></li>\r\n    <li><code>[2]</code></li>\r\n    <li><code>[1]</code></li>\r\n    <li><code>[1]</code></li>\r\n    <li><code>[6, 6]</code></li>\r\n    <li><code>[1, 1]</code></li>\r\n</ul>\r\nThe total number of equal subarrays is 7.</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass Solution {\npublic:\n    /**\n     * @brief Finds the total number of equal subarrays of the array A.\n     *\n     * @param N The size of the array A.\n     * @param A The input array of non-negative integers.\n     * @return The total number of equal subarrays.\n     */\n    long long equalSubarrayCount(int N, const std::vector<int>& A) {\n        // WRITE YOUR LOGIC HERE\n        return 0;\n    }\n};\n\nint main() {\n    // Fast I/O\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i];\n    }\n\n    Solution solution;\n    long long result = solution.equalSubarrayCount(N, A);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Coupa",
        "company_id": 689
    },
    {
        "id": 1949,
        "title": "Router Busy Light",
        "problem_statement": "<h1>Router Busy Light</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>The network router stores information in the queue of size <strong>N</strong>. The log of the packet flow in the queue is maintained in the form of a string.</p>\r\n<ul>\r\n    <li>The router logs the character <strong>E</strong> when a packet joins the queue.</li>\r\n    <li>The router logs the character <strong>L</strong> when a packet leaves the queue.</li>\r\n    <li>A red light lights up when a log entry exceeds the size of the queue (<strong>N</strong>).</li>\r\n</ul>\r\n<p>Given the log of a string, calculate the number of times the \"router busy\" light lit up.</p>\r\n\r\n<h3>Function Description</h3>\r\n<p>In the provided code snippet, implement the provided <code>routerBusy(...)</code> method using the variables to print a single integer representing the number of times the \"router busy\" light will blink. You can write your code in the space below the phrase \"WRITE YOUR LOGIC HERE\".</p>\r\n<p>There will be multiple test cases running, so the Input and Output should match exactly as provided. The base Output variable <code>result</code> is set to...</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <string>\n#include <vector>\n\nclass Solution {\npublic:\n    int routerBusy(int N, const std::string& log) {\n        // WRITE YOUR LOGIC HERE\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n    std::cout.tie(NULL);\n\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int N;\n        std::cin >> N;\n        std::string log;\n        std::cin >> log;\n\n        Solution solution;\n        int result = solution.routerBusy(N, log);\n        std::cout << result << std::endl;\n    }\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Coupa",
        "company_id": 689
    },
    {
        "id": 1950,
        "title": "Sum of Subarray",
        "problem_statement": "<h1>Sum of Subarray</h1>\r\n\r\n<h2>Problem Description</h2>\r\n<p>You are given an array A of length N.</p>\r\n<p>For any subarray of array A, a subsequence of a subarray can be obtained by erasing some (possibly zero) elements from the subarray. You can erase any elements, not necessarily going successively.</p>\r\n<p>A subsequence of length K (where K >= 3) is considered good if every index i in subsequence (where 1 < i < K) satisfies the following equation: | A<sub>i</sub> - A<sub>i-1</sub> | + | A<sub>i+1</sub> - A<sub>i</sub> | = | A<sub>i-1</sub> - A<sub>i+1</sub> |</p>\r\n<p>The value of subarray S is defined as the maximum length of the good subsequence in the subarray S.</p>\r\n<p>Find the sum of the values of all the subarrays of array A.</p>\r\n\r\n<h2>Function Description</h2>\r\n<p>In the provided code snippet, implement the provided <code>sumOfValues(...)</code> method to find the sum of the values of all the subarrays of array A. You can write your code in the space below the phrase \"WRITE YOUR LOGIC HERE\".</p>",
        "google_doc_link": null,
        "solution_code": null,
        "pregiven_code": "p\n#include <iostream>\n#include <vector>\n#include <string>\n#include <numeric>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long sumOfValues(int N, const std::vector<int>& A) {\n        // WRITE YOUR LOGIC HERE\n        return 0;\n    }\n};\n\nint main() {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\n    int N;\n    std::cin >> N;\n\n    std::vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        std::cin >> A[i];\n    }\n\n    Solution solution;\n    long long result = solution.sumOfValues(N, A);\n\n    std::cout << result << std::endl;\n\n    return 0;\n}",
        "input_test_case": null,
        "output_test_case": null,
        "company_name": "Coupa",
        "company_id": 689
    }
]